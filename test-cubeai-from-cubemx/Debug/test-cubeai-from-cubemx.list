
test-cubeai-from-cubemx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014e58  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005088  08015028  08015028  00025028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a0b0  0801a0b0  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801a0b0  0801a0b0  0002a0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a0b8  0801a0b8  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a0b8  0801a0b8  0002a0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a0bc  0801a0bc  0002a0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0801a0c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000411cc  200001e8  0801a2a8  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200413b4  0801a2a8  000313b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042887  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000087b1  00000000  00000000  00072a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ff8  00000000  00000000  0007b250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002c50  00000000  00000000  0007e248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f8c1  00000000  00000000  00080e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f206  00000000  00000000  00090759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012c67d  00000000  00000000  000cf95f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fbfdc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000db74  00000000  00000000  001fc030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015010 	.word	0x08015010

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08015010 	.word	0x08015010

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000efc:	f3bf 8f4f 	dsb	sy
}
 8000f00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f02:	f3bf 8f6f 	isb	sy
}
 8000f06:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f08:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <SCB_EnableICache+0x48>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f10:	f3bf 8f4f 	dsb	sy
}
 8000f14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f16:	f3bf 8f6f 	isb	sy
}
 8000f1a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <SCB_EnableICache+0x48>)
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <SCB_EnableICache+0x48>)
 8000f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f26:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f28:	f3bf 8f4f 	dsb	sy
}
 8000f2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f2e:	f3bf 8f6f 	isb	sy
}
 8000f32:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <SCB_EnableDCache+0x84>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f52:	f3bf 8f4f 	dsb	sy
}
 8000f56:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <SCB_EnableDCache+0x84>)
 8000f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f5e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	0b5b      	lsrs	r3, r3, #13
 8000f64:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f68:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	08db      	lsrs	r3, r3, #3
 8000f6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f72:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	015a      	lsls	r2, r3, #5
 8000f78:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000f7c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f82:	4911      	ldr	r1, [pc, #68]	; (8000fc8 <SCB_EnableDCache+0x84>)
 8000f84:	4313      	orrs	r3, r2
 8000f86:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1e5a      	subs	r2, r3, #1
 8000f8e:	60ba      	str	r2, [r7, #8]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1ef      	bne.n	8000f74 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	1e5a      	subs	r2, r3, #1
 8000f98:	60fa      	str	r2, [r7, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1e5      	bne.n	8000f6a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f9e:	f3bf 8f4f 	dsb	sy
}
 8000fa2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <SCB_EnableDCache+0x84>)
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <SCB_EnableDCache+0x84>)
 8000faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb0:	f3bf 8f4f 	dsb	sy
}
 8000fb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fb6:	f3bf 8f6f 	isb	sy
}
 8000fba:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000fcc:	b5b0      	push	{r4, r5, r7, lr}
 8000fce:	f5ad 6db3 	sub.w	sp, sp, #1432	; 0x598
 8000fd2:	af00      	add	r7, sp, #0
	// SCB_InvalidateDCache();
	// SCB_InvalidateICache();

	/*Code Projet 7 Janvier*/
	char buf[50];
	int buf_len = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
	ai_error ai_err;
	ai_i32 nbatch;
	uint32_t timestamp;
	float y_val;
	float test = 0.0;
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 8000fe2:	6013      	str	r3, [r2, #0]
	// Buffers used to store input and output tensors
	AI_ALIGNED(4) ai_i8 in_data[AI_TONECRAFTER_IN_1_SIZE_BYTES];
	AI_ALIGNED(4) ai_i8 out_data[AI_TONECRAFTER_OUT_1_SIZE_BYTES];

	// Pointer to our model
	ai_handle tonecrafter = AI_HANDLE_NULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c

	// Initialize wrapper structs that hold pointers to data and info about the
	// data (tensor height, width, channels)
	ai_buffer ai_input[AI_TONECRAFTER_IN_NUM] = AI_TONECRAFTER_IN;
 8000fea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fee:	4a5a      	ldr	r2, [pc, #360]	; (8001158 <main+0x18c>)
 8000ff0:	461c      	mov	r4, r3
 8000ff2:	4615      	mov	r5, r2
 8000ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ffc:	e884 0003 	stmia.w	r4, {r0, r1}
	ai_buffer ai_output[AI_TONECRAFTER_OUT_NUM] = AI_TONECRAFTER_OUT;
 8001000:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001004:	4a55      	ldr	r2, [pc, #340]	; (800115c <main+0x190>)
 8001006:	461c      	mov	r4, r3
 8001008:	4615      	mov	r5, r2
 800100a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800100e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001012:	e884 0003 	stmia.w	r4, {r0, r1}

	// Set working memory and get weights/biases from model
	ai_network_params ai_params = {
 8001016:	463b      	mov	r3, r7
 8001018:	4a51      	ldr	r2, [pc, #324]	; (8001160 <main+0x194>)
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	463b      	mov	r3, r7
 800101e:	2201      	movs	r2, #1
 8001020:	809a      	strh	r2, [r3, #4]
 8001022:	463b      	mov	r3, r7
 8001024:	2201      	movs	r2, #1
 8001026:	80da      	strh	r2, [r3, #6]
 8001028:	463b      	mov	r3, r7
 800102a:	2201      	movs	r2, #1
 800102c:	811a      	strh	r2, [r3, #8]
 800102e:	463b      	mov	r3, r7
 8001030:	f243 02e4 	movw	r2, #12516	; 0x30e4
 8001034:	60da      	str	r2, [r3, #12]
	AI_TONECRAFTER_DATA_WEIGHTS(ai_tonecrafter_data_weights_get()),
 8001036:	f011 f82f 	bl	8012098 <ai_tonecrafter_data_weights_get>
 800103a:	4602      	mov	r2, r0
	ai_network_params ai_params = {
 800103c:	463b      	mov	r3, r7
 800103e:	611a      	str	r2, [r3, #16]
 8001040:	463b      	mov	r3, r7
 8001042:	2200      	movs	r2, #0
 8001044:	615a      	str	r2, [r3, #20]
 8001046:	463b      	mov	r3, r7
 8001048:	4a46      	ldr	r2, [pc, #280]	; (8001164 <main+0x198>)
 800104a:	619a      	str	r2, [r3, #24]
 800104c:	463b      	mov	r3, r7
 800104e:	2201      	movs	r2, #1
 8001050:	839a      	strh	r2, [r3, #28]
 8001052:	463b      	mov	r3, r7
 8001054:	2201      	movs	r2, #1
 8001056:	83da      	strh	r2, [r3, #30]
 8001058:	463b      	mov	r3, r7
 800105a:	2201      	movs	r2, #1
 800105c:	841a      	strh	r2, [r3, #32]
 800105e:	463b      	mov	r3, r7
 8001060:	f44f 7244 	mov.w	r2, #784	; 0x310
 8001064:	625a      	str	r2, [r3, #36]	; 0x24
 8001066:	463b      	mov	r3, r7
 8001068:	f507 7211 	add.w	r2, r7, #580	; 0x244
 800106c:	629a      	str	r2, [r3, #40]	; 0x28
 800106e:	463b      	mov	r3, r7
 8001070:	2200      	movs	r2, #0
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c
	AI_TONECRAFTER_DATA_ACTIVATIONS(activations)
	};


	// Set pointers wrapper structs to our data buffers
	ai_input[0].n_batches = 1;
 8001074:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001078:	2201      	movs	r2, #1
 800107a:	809a      	strh	r2, [r3, #4]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 800107c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001080:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001084:	611a      	str	r2, [r3, #16]
	ai_output[0].n_batches = 1;
 8001086:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800108a:	2201      	movs	r2, #1
 800108c:	809a      	strh	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 800108e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001092:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001096:	611a      	str	r2, [r3, #16]

	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8001098:	f7ff ff2e 	bl	8000ef8 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 800109c:	f7ff ff52 	bl	8000f44 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010a0:	f003 f89b 	bl	80041da <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010a4:	f000 f868 	bl	8001178 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010a8:	f001 f8c6 	bl	8002238 <MX_GPIO_Init>
	MX_DMA_Init();
 80010ac:	f001 f802 	bl	80020b4 <MX_DMA_Init>
	MX_ADC3_Init();
 80010b0:	f000 f922 	bl	80012f8 <MX_ADC3_Init>
	MX_CRC_Init();
 80010b4:	f000 f972 	bl	800139c <MX_CRC_Init>
	MX_DCMI_Init();
 80010b8:	f000 f992 	bl	80013e0 <MX_DCMI_Init>
	MX_DMA2D_Init();
 80010bc:	f000 f9c4 	bl	8001448 <MX_DMA2D_Init>
	MX_FMC_Init();
 80010c0:	f001 f866 	bl	8002190 <MX_FMC_Init>
	MX_I2C1_Init();
 80010c4:	f000 f9f2 	bl	80014ac <MX_I2C1_Init>
	MX_I2C3_Init();
 80010c8:	f000 fa30 	bl	800152c <MX_I2C3_Init>
	MX_LTDC_Init();
 80010cc:	f000 fa6e 	bl	80015ac <MX_LTDC_Init>
	MX_QUADSPI_Init();
 80010d0:	f000 faf0 	bl	80016b4 <MX_QUADSPI_Init>
	MX_RTC_Init();
 80010d4:	f000 fb30 	bl	8001738 <MX_RTC_Init>
	MX_SAI2_Init();
 80010d8:	f000 fbd4 	bl	8001884 <MX_SAI2_Init>
	MX_SDMMC1_SD_Init();
 80010dc:	f000 fc8e 	bl	80019fc <MX_SDMMC1_SD_Init>
	MX_SPDIFRX_Init();
 80010e0:	f000 fcac 	bl	8001a3c <MX_SPDIFRX_Init>
	MX_TIM1_Init();
 80010e4:	f000 fcda 	bl	8001a9c <MX_TIM1_Init>
	MX_TIM2_Init();
 80010e8:	f000 fd84 	bl	8001bf4 <MX_TIM2_Init>
	MX_TIM3_Init();
 80010ec:	f000 fdf8 	bl	8001ce0 <MX_TIM3_Init>
	MX_TIM5_Init();
 80010f0:	f000 fe6e 	bl	8001dd0 <MX_TIM5_Init>
	MX_TIM8_Init();
 80010f4:	f000 fee4 	bl	8001ec0 <MX_TIM8_Init>
	MX_TIM12_Init();
 80010f8:	f000 ff36 	bl	8001f68 <MX_TIM12_Init>
	MX_USART1_UART_Init();
 80010fc:	f000 ff7a 	bl	8001ff4 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 8001100:	f000 ffa8 	bl	8002054 <MX_USART6_UART_Init>
	MX_FATFS_Init();
 8001104:	f00e ffec 	bl	80100e0 <MX_FATFS_Init>
	// MX_LIBJPEG_Init();

	/* USER CODE BEGIN 2 */

	MPU_Init();
 8001108:	f002 ffc5 	bl	8004096 <MPU_Init>

	/* post-init SDRAM */
	// Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
	FMC_Bank1->BTCR[0] = 0x000030D2;
 800110c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001110:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001114:	601a      	str	r2, [r3, #0]

	/* post-init touchscreen */
	TS_Init();
 8001116:	f002 ffa5 	bl	8004064 <TS_Init>
	printf("Touchscreen Init: OK\n");
 800111a:	4813      	ldr	r0, [pc, #76]	; (8001168 <main+0x19c>)
 800111c:	f011 fdbe 	bl	8012c9c <puts>

	SCB_EnableICache(); // comment out if in step debugging to avoid weird behaviours
 8001120:	f7ff feea 	bl	8000ef8 <SCB_EnableICache>
	SCB_EnableDCache();
 8001124:	f7ff ff0e 	bl	8000f44 <SCB_EnableDCache>
	//test();
	//audioLoop(); // comment to use RTOS (see below)

	/*Code Projet 7 janvier*/
	// Start timer/counter
	HAL_TIM_Base_Start(&htim12);
 8001128:	4810      	ldr	r0, [pc, #64]	; (800116c <main+0x1a0>)
 800112a:	f00b fda5 	bl	800cc78 <HAL_TIM_Base_Start>

	// Greetings!
	buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 800112e:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8001132:	490f      	ldr	r1, [pc, #60]	; (8001170 <main+0x1a4>)
 8001134:	4618      	mov	r0, r3
 8001136:	f011 fdc9 	bl	8012ccc <siprintf>
 800113a:	f8c7 0594 	str.w	r0, [r7, #1428]	; 0x594
	HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 800113e:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001142:	b29a      	uxth	r2, r3
 8001144:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8001148:	2364      	movs	r3, #100	; 0x64
 800114a:	480a      	ldr	r0, [pc, #40]	; (8001174 <main+0x1a8>)
 800114c:	f00c ff00 	bl	800df50 <HAL_UART_Transmit>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8001150:	f010 fdee 	bl	8011d30 <MX_USB_HOST_Process>
 8001154:	e7fc      	b.n	8001150 <main+0x184>
 8001156:	bf00      	nop
 8001158:	0801505c 	.word	0x0801505c
 800115c:	08015074 	.word	0x08015074
 8001160:	40040440 	.word	0x40040440
 8001164:	00040440 	.word	0x00040440
 8001168:	08015028 	.word	0x08015028
 800116c:	20000b44 	.word	0x20000b44
 8001170:	08015040 	.word	0x08015040
 8001174:	20000a34 	.word	0x20000a34

08001178 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b0b4      	sub	sp, #208	; 0xd0
 800117c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001182:	2230      	movs	r2, #48	; 0x30
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f010 ffd0 	bl	801212c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800119c:	f107 0308 	add.w	r3, r7, #8
 80011a0:	2284      	movs	r2, #132	; 0x84
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f010 ffc1 	bl	801212c <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80011aa:	f007 fb11 	bl	80087d0 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	4b4f      	ldr	r3, [pc, #316]	; (80012ec <SystemClock_Config+0x174>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	4a4e      	ldr	r2, [pc, #312]	; (80012ec <SystemClock_Config+0x174>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ba:	4b4c      	ldr	r3, [pc, #304]	; (80012ec <SystemClock_Config+0x174>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c6:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <SystemClock_Config+0x178>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a49      	ldr	r2, [pc, #292]	; (80012f0 <SystemClock_Config+0x178>)
 80011cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	4b47      	ldr	r3, [pc, #284]	; (80012f0 <SystemClock_Config+0x178>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80011de:	2309      	movs	r3, #9
 80011e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011ec:	2301      	movs	r3, #1
 80011ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f2:	2302      	movs	r3, #2
 80011f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001200:	2319      	movs	r3, #25
 8001202:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 8001206:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800120a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8001214:	2309      	movs	r3, #9
 8001216:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800121e:	4618      	mov	r0, r3
 8001220:	f008 fafa 	bl	8009818 <HAL_RCC_OscConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0xb6>
	{
		Error_Handler();
 800122a:	f001 fa43 	bl	80026b4 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800122e:	f007 fadf 	bl	80087f0 <HAL_PWREx_EnableOverDrive>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8001238:	f001 fa3c 	bl	80026b4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123c:	230f      	movs	r3, #15
 800123e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001242:	2302      	movs	r3, #2
 8001244:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800124e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001252:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800125e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001262:	2106      	movs	r1, #6
 8001264:	4618      	mov	r0, r3
 8001266:	f008 fd7b 	bl	8009d60 <HAL_RCC_ClockConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8001270:	f001 fa20 	bl	80026b4 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <SystemClock_Config+0x17c>)
 8001276:	60bb      	str	r3, [r7, #8]
			|RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
			|RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
			|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
			|RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001278:	2364      	movs	r3, #100	; 0x64
 800127a:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800127c:	2302      	movs	r3, #2
 800127e:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001280:	2302      	movs	r3, #2
 8001282:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001284:	2302      	movs	r3, #2
 8001286:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001288:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800128c:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800128e:	2305      	movs	r3, #5
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 8;
 8001292:	2308      	movs	r3, #8
 8001294:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001296:	2303      	movs	r3, #3
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLI2SDivQ = 1;
 800129a:	2301      	movs	r3, #1
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 800129e:	2301      	movs	r3, #1
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80012a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012a6:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ac:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80012ae:	2300      	movs	r3, #0
 80012b0:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012b2:	2300      	movs	r3, #0
 80012b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80012b6:	2300      	movs	r3, #0
 80012b8:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80012be:	2300      	movs	r3, #0
 80012c0:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80012c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80012c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	4618      	mov	r0, r3
 80012d6:	f008 ff4b 	bl	800a170 <HAL_RCCEx_PeriphCLKConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <SystemClock_Config+0x16c>
	{
		Error_Handler();
 80012e0:	f001 f9e8 	bl	80026b4 <Error_Handler>
	}
}
 80012e4:	bf00      	nop
 80012e6:	37d0      	adds	r7, #208	; 0xd0
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40007000 	.word	0x40007000
 80012f4:	01b14868 	.word	0x01b14868

080012f8 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80012fe:	463b      	mov	r3, r7
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 800130a:	4b21      	ldr	r3, [pc, #132]	; (8001390 <MX_ADC3_Init+0x98>)
 800130c:	4a21      	ldr	r2, [pc, #132]	; (8001394 <MX_ADC3_Init+0x9c>)
 800130e:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001310:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <MX_ADC3_Init+0x98>)
 8001312:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001316:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001318:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <MX_ADC3_Init+0x98>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800131e:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <MX_ADC3_Init+0x98>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8001324:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <MX_ADC3_Init+0x98>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <MX_ADC3_Init+0x98>)
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <MX_ADC3_Init+0x98>)
 8001334:	2200      	movs	r2, #0
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_ADC3_Init+0x98>)
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <MX_ADC3_Init+0xa0>)
 800133c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_ADC3_Init+0x98>)
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <MX_ADC3_Init+0x98>)
 8001346:	2201      	movs	r2, #1
 8001348:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_ADC3_Init+0x98>)
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_ADC3_Init+0x98>)
 8001354:	2201      	movs	r2, #1
 8001356:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <MX_ADC3_Init+0x98>)
 800135a:	f002 ff8f 	bl	800427c <HAL_ADC_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 8001364:	f001 f9a6 	bl	80026b4 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8001368:	2304      	movs	r3, #4
 800136a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800136c:	2301      	movs	r3, #1
 800136e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001374:	463b      	mov	r3, r7
 8001376:	4619      	mov	r1, r3
 8001378:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_ADC3_Init+0x98>)
 800137a:	f002 ffc3 	bl	8004304 <HAL_ADC_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 8001384:	f001 f996 	bl	80026b4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	2000084c 	.word	0x2000084c
 8001394:	40012200 	.word	0x40012200
 8001398:	0f000001 	.word	0x0f000001

0800139c <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80013a0:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <MX_CRC_Init+0x3c>)
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <MX_CRC_Init+0x40>)
 80013a4:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_CRC_Init+0x3c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <MX_CRC_Init+0x3c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_CRC_Init+0x3c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <MX_CRC_Init+0x3c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_CRC_Init+0x3c>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013c4:	4804      	ldr	r0, [pc, #16]	; (80013d8 <MX_CRC_Init+0x3c>)
 80013c6:	f003 fb71 	bl	8004aac <HAL_CRC_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 80013d0:	f001 f970 	bl	80026b4 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000600 	.word	0x20000600
 80013dc:	40023000 	.word	0x40023000

080013e0 <MX_DCMI_Init>:
 * @brief DCMI Initialization Function
 * @param None
 * @retval None
 */
static void MX_DCMI_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	/* USER CODE END DCMI_Init 0 */

	/* USER CODE BEGIN DCMI_Init 1 */

	/* USER CODE END DCMI_Init 1 */
	hdcmi.Instance = DCMI;
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <MX_DCMI_Init+0x60>)
 80013e6:	4a17      	ldr	r2, [pc, #92]	; (8001444 <MX_DCMI_Init+0x64>)
 80013e8:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <MX_DCMI_Init+0x60>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <MX_DCMI_Init+0x60>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_DCMI_Init+0x60>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80013fc:	4b10      	ldr	r3, [pc, #64]	; (8001440 <MX_DCMI_Init+0x60>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_DCMI_Init+0x60>)
 8001404:	2200      	movs	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001408:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <MX_DCMI_Init+0x60>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_DCMI_Init+0x60>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <MX_DCMI_Init+0x60>)
 8001416:	2200      	movs	r2, #0
 8001418:	625a      	str	r2, [r3, #36]	; 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_DCMI_Init+0x60>)
 800141c:	2200      	movs	r2, #0
 800141e:	629a      	str	r2, [r3, #40]	; 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001420:	4b07      	ldr	r3, [pc, #28]	; (8001440 <MX_DCMI_Init+0x60>)
 8001422:	2200      	movs	r2, #0
 8001424:	62da      	str	r2, [r3, #44]	; 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_DCMI_Init+0x60>)
 8001428:	2200      	movs	r2, #0
 800142a:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <MX_DCMI_Init+0x60>)
 800142e:	f003 fc27 	bl	8004c80 <HAL_DCMI_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_DCMI_Init+0x5c>
	{
		Error_Handler();
 8001438:	f001 f93c 	bl	80026b4 <Error_Handler>
	}
	/* USER CODE BEGIN DCMI_Init 2 */

	/* USER CODE END DCMI_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000894 	.word	0x20000894
 8001444:	50050000 	.word	0x50050000

08001448 <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <MX_DMA2D_Init+0x5c>)
 800144e:	4a16      	ldr	r2, [pc, #88]	; (80014a8 <MX_DMA2D_Init+0x60>)
 8001450:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_DMA2D_Init+0x5c>)
 8001454:	2200      	movs	r2, #0
 8001456:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <MX_DMA2D_Init+0x5c>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_DMA2D_Init+0x5c>)
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_DMA2D_Init+0x5c>)
 8001466:	2200      	movs	r2, #0
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_DMA2D_Init+0x5c>)
 800146c:	2200      	movs	r2, #0
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_DMA2D_Init+0x5c>)
 8001472:	2200      	movs	r2, #0
 8001474:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_DMA2D_Init+0x5c>)
 8001478:	2200      	movs	r2, #0
 800147a:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800147c:	4809      	ldr	r0, [pc, #36]	; (80014a4 <MX_DMA2D_Init+0x5c>)
 800147e:	f004 f8c5 	bl	800560c <HAL_DMA2D_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 8001488:	f001 f914 	bl	80026b4 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800148c:	2101      	movs	r1, #1
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_DMA2D_Init+0x5c>)
 8001490:	f004 fa16 	bl	80058c0 <HAL_DMA2D_ConfigLayer>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 800149a:	f001 f90b 	bl	80026b4 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000ab8 	.word	0x20000ab8
 80014a8:	4002b000 	.word	0x4002b000

080014ac <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_I2C1_Init+0x74>)
 80014b2:	4a1c      	ldr	r2, [pc, #112]	; (8001524 <MX_I2C1_Init+0x78>)
 80014b4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_I2C1_Init+0x74>)
 80014b8:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <MX_I2C1_Init+0x7c>)
 80014ba:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_I2C1_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_I2C1_Init+0x74>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_I2C1_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_I2C1_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_I2C1_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_I2C1_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_I2C1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014e6:	480e      	ldr	r0, [pc, #56]	; (8001520 <MX_I2C1_Init+0x74>)
 80014e8:	f006 fa60 	bl	80079ac <HAL_I2C_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 80014f2:	f001 f8df 	bl	80026b4 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4809      	ldr	r0, [pc, #36]	; (8001520 <MX_I2C1_Init+0x74>)
 80014fa:	f006 fdf3 	bl	80080e4 <HAL_I2CEx_ConfigAnalogFilter>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001504:	f001 f8d6 	bl	80026b4 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001508:	2100      	movs	r1, #0
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_I2C1_Init+0x74>)
 800150c:	f006 fe35 	bl	800817a <HAL_I2CEx_ConfigDigitalFilter>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001516:	f001 f8cd 	bl	80026b4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200005b4 	.word	0x200005b4
 8001524:	40005400 	.word	0x40005400
 8001528:	00c0eaff 	.word	0x00c0eaff

0800152c <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <MX_I2C3_Init+0x74>)
 8001532:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <MX_I2C3_Init+0x78>)
 8001534:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <MX_I2C3_Init+0x74>)
 8001538:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <MX_I2C3_Init+0x7c>)
 800153a:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <MX_I2C3_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <MX_I2C3_Init+0x74>)
 8001544:	2201      	movs	r2, #1
 8001546:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <MX_I2C3_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_I2C3_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <MX_I2C3_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_I2C3_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_I2C3_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001566:	480e      	ldr	r0, [pc, #56]	; (80015a0 <MX_I2C3_Init+0x74>)
 8001568:	f006 fa20 	bl	80079ac <HAL_I2C_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 8001572:	f001 f89f 	bl	80026b4 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001576:	2100      	movs	r1, #0
 8001578:	4809      	ldr	r0, [pc, #36]	; (80015a0 <MX_I2C3_Init+0x74>)
 800157a:	f006 fdb3 	bl	80080e4 <HAL_I2CEx_ConfigAnalogFilter>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 8001584:	f001 f896 	bl	80026b4 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001588:	2100      	movs	r1, #0
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_I2C3_Init+0x74>)
 800158c:	f006 fdf5 	bl	800817a <HAL_I2CEx_ConfigDigitalFilter>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 8001596:	f001 f88d 	bl	80026b4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2000038c 	.word	0x2000038c
 80015a4:	40005c00 	.word	0x40005c00
 80015a8:	00c0eaff 	.word	0x00c0eaff

080015ac <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08e      	sub	sp, #56	; 0x38
 80015b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2234      	movs	r2, #52	; 0x34
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f010 fdb7 	bl	801212c <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 80015be:	4b3b      	ldr	r3, [pc, #236]	; (80016ac <MX_LTDC_Init+0x100>)
 80015c0:	4a3b      	ldr	r2, [pc, #236]	; (80016b0 <MX_LTDC_Init+0x104>)
 80015c2:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015c4:	4b39      	ldr	r3, [pc, #228]	; (80016ac <MX_LTDC_Init+0x100>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80015ca:	4b38      	ldr	r3, [pc, #224]	; (80016ac <MX_LTDC_Init+0x100>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80015d0:	4b36      	ldr	r3, [pc, #216]	; (80016ac <MX_LTDC_Init+0x100>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015d6:	4b35      	ldr	r3, [pc, #212]	; (80016ac <MX_LTDC_Init+0x100>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 80015dc:	4b33      	ldr	r3, [pc, #204]	; (80016ac <MX_LTDC_Init+0x100>)
 80015de:	2228      	movs	r2, #40	; 0x28
 80015e0:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 80015e2:	4b32      	ldr	r3, [pc, #200]	; (80016ac <MX_LTDC_Init+0x100>)
 80015e4:	2209      	movs	r2, #9
 80015e6:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 80015e8:	4b30      	ldr	r3, [pc, #192]	; (80016ac <MX_LTDC_Init+0x100>)
 80015ea:	2235      	movs	r2, #53	; 0x35
 80015ec:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 80015ee:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <MX_LTDC_Init+0x100>)
 80015f0:	220b      	movs	r2, #11
 80015f2:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 80015f4:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <MX_LTDC_Init+0x100>)
 80015f6:	f240 2215 	movw	r2, #533	; 0x215
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 80015fc:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <MX_LTDC_Init+0x100>)
 80015fe:	f240 121b 	movw	r2, #283	; 0x11b
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 8001604:	4b29      	ldr	r3, [pc, #164]	; (80016ac <MX_LTDC_Init+0x100>)
 8001606:	f240 2235 	movw	r2, #565	; 0x235
 800160a:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <MX_LTDC_Init+0x100>)
 800160e:	f240 121d 	movw	r2, #285	; 0x11d
 8001612:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8001614:	4b25      	ldr	r3, [pc, #148]	; (80016ac <MX_LTDC_Init+0x100>)
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 800161c:	4b23      	ldr	r3, [pc, #140]	; (80016ac <MX_LTDC_Init+0x100>)
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 8001624:	4b21      	ldr	r3, [pc, #132]	; (80016ac <MX_LTDC_Init+0x100>)
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800162c:	481f      	ldr	r0, [pc, #124]	; (80016ac <MX_LTDC_Init+0x100>)
 800162e:	f006 fdf1 	bl	8008214 <HAL_LTDC_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 8001638:	f001 f83c 	bl	80026b4 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 8001640:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001644:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 800164a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800164e:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001650:	2302      	movs	r3, #2
 8001652:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8001654:	23ff      	movs	r3, #255	; 0xff
 8001656:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800165c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001660:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001662:	2307      	movs	r3, #7
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 8001666:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 800166c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 8001672:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001676:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2200      	movs	r2, #0
 800168e:	4619      	mov	r1, r3
 8001690:	4806      	ldr	r0, [pc, #24]	; (80016ac <MX_LTDC_Init+0x100>)
 8001692:	f006 fe8f 	bl	80083b4 <HAL_LTDC_ConfigLayer>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 800169c:	f001 f80a 	bl	80026b4 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	LCD_Init();
 80016a0:	f002 fa46 	bl	8003b30 <LCD_Init>

	/* USER CODE END LTDC_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	3738      	adds	r7, #56	; 0x38
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200007a4 	.word	0x200007a4
 80016b0:	40016800 	.word	0x40016800

080016b4 <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 80016b8:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <MX_QUADSPI_Init+0x7c>)
 80016ba:	4a1e      	ldr	r2, [pc, #120]	; (8001734 <MX_QUADSPI_Init+0x80>)
 80016bc:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 1;
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <MX_QUADSPI_Init+0x7c>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 4;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_QUADSPI_Init+0x7c>)
 80016c6:	2204      	movs	r2, #4
 80016c8:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <MX_QUADSPI_Init+0x7c>)
 80016cc:	2210      	movs	r2, #16
 80016ce:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 24;
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_QUADSPI_Init+0x7c>)
 80016d2:	2218      	movs	r2, #24
 80016d4:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_QUADSPI_Init+0x7c>)
 80016d8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80016dc:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_QUADSPI_Init+0x7c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
	hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <MX_QUADSPI_Init+0x7c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
	hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_QUADSPI_Init+0x7c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80016f0:	480f      	ldr	r0, [pc, #60]	; (8001730 <MX_QUADSPI_Init+0x7c>)
 80016f2:	f007 f8cd 	bl	8008890 <HAL_QSPI_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_QUADSPI_Init+0x4c>
	{
		Error_Handler();
 80016fc:	f000 ffda 	bl	80026b4 <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	// + memory reset + config dummy cycles on QSPI memory side, see disco_qspi.c
	/* QSPI memory reset */
	if (DISCO_QSPI_ResetMemory(&hqspi) != HAL_OK) Error_Handler();
 8001700:	480b      	ldr	r0, [pc, #44]	; (8001730 <MX_QUADSPI_Init+0x7c>)
 8001702:	f002 fb17 	bl	8003d34 <DISCO_QSPI_ResetMemory>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_QUADSPI_Init+0x5c>
 800170c:	f000 ffd2 	bl	80026b4 <Error_Handler>
	/* Configuration of the dummy cycles on QSPI memory side */
	if (DISCO_QSPI_DummyCyclesCfg(&hqspi) != HAL_OK) Error_Handler();
 8001710:	4807      	ldr	r0, [pc, #28]	; (8001730 <MX_QUADSPI_Init+0x7c>)
 8001712:	f002 fb51 	bl	8003db8 <DISCO_QSPI_DummyCyclesCfg>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_QUADSPI_Init+0x6c>
 800171c:	f000 ffca 	bl	80026b4 <Error_Handler>

	DISCO_QSPI_EnableMemoryMappedMode();
 8001720:	f002 fad6 	bl	8003cd0 <DISCO_QSPI_EnableMemoryMappedMode>
	HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001724:	205c      	movs	r0, #92	; 0x5c
 8001726:	f003 f937 	bl	8004998 <HAL_NVIC_DisableIRQ>


	/* USER CODE END QUADSPI_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000bc4 	.word	0x20000bc4
 8001734:	a0001000 	.word	0xa0001000

08001738 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b092      	sub	sp, #72	; 0x48
 800173c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 800173e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
 800174e:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 8001750:	2300      	movs	r3, #0
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
	RTC_AlarmTypeDef sAlarm = {0};
 8001754:	463b      	mov	r3, r7
 8001756:	222c      	movs	r2, #44	; 0x2c
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f010 fce6 	bl	801212c <memset>
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001760:	4b46      	ldr	r3, [pc, #280]	; (800187c <MX_RTC_Init+0x144>)
 8001762:	4a47      	ldr	r2, [pc, #284]	; (8001880 <MX_RTC_Init+0x148>)
 8001764:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001766:	4b45      	ldr	r3, [pc, #276]	; (800187c <MX_RTC_Init+0x144>)
 8001768:	2200      	movs	r2, #0
 800176a:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 800176c:	4b43      	ldr	r3, [pc, #268]	; (800187c <MX_RTC_Init+0x144>)
 800176e:	227f      	movs	r2, #127	; 0x7f
 8001770:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8001772:	4b42      	ldr	r3, [pc, #264]	; (800187c <MX_RTC_Init+0x144>)
 8001774:	22ff      	movs	r2, #255	; 0xff
 8001776:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001778:	4b40      	ldr	r3, [pc, #256]	; (800187c <MX_RTC_Init+0x144>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800177e:	4b3f      	ldr	r3, [pc, #252]	; (800187c <MX_RTC_Init+0x144>)
 8001780:	2200      	movs	r2, #0
 8001782:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001784:	4b3d      	ldr	r3, [pc, #244]	; (800187c <MX_RTC_Init+0x144>)
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800178a:	483c      	ldr	r0, [pc, #240]	; (800187c <MX_RTC_Init+0x144>)
 800178c:	f009 fa24 	bl	800abd8 <HAL_RTC_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_RTC_Init+0x62>
	{
		Error_Handler();
 8001796:	f000 ff8d 	bl	80026b4 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 800179a:	2300      	movs	r3, #0
 800179c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sTime.Minutes = 0x0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sTime.Seconds = 0x0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80017b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017b8:	2201      	movs	r2, #1
 80017ba:	4619      	mov	r1, r3
 80017bc:	482f      	ldr	r0, [pc, #188]	; (800187c <MX_RTC_Init+0x144>)
 80017be:	f009 fa9d 	bl	800acfc <HAL_RTC_SetTime>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_RTC_Init+0x94>
	{
		Error_Handler();
 80017c8:	f000 ff74 	bl	80026b4 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80017cc:	2301      	movs	r3, #1
 80017ce:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sDate.Month = RTC_MONTH_JANUARY;
 80017d2:	2301      	movs	r3, #1
 80017d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sDate.Date = 0x1;
 80017d8:	2301      	movs	r3, #1
 80017da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sDate.Year = 0x0;
 80017de:	2300      	movs	r3, #0
 80017e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80017e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e8:	2201      	movs	r2, #1
 80017ea:	4619      	mov	r1, r3
 80017ec:	4823      	ldr	r0, [pc, #140]	; (800187c <MX_RTC_Init+0x144>)
 80017ee:	f009 fb43 	bl	800ae78 <HAL_RTC_SetDate>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_RTC_Init+0xc4>
	{
		Error_Handler();
 80017f8:	f000 ff5c 	bl	80026b4 <Error_Handler>
	}
	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8001800:	2300      	movs	r3, #0
 8001802:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8001804:	2300      	movs	r3, #0
 8001806:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001808:	2300      	movs	r3, #0
 800180a:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800180c:	2300      	movs	r3, #0
 800180e:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001814:	2300      	movs	r3, #0
 8001816:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 8001820:	2301      	movs	r3, #1
 8001822:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 8001826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800182c:	463b      	mov	r3, r7
 800182e:	2201      	movs	r2, #1
 8001830:	4619      	mov	r1, r3
 8001832:	4812      	ldr	r0, [pc, #72]	; (800187c <MX_RTC_Init+0x144>)
 8001834:	f009 fbc8 	bl	800afc8 <HAL_RTC_SetAlarm>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_RTC_Init+0x10a>
	{
		Error_Handler();
 800183e:	f000 ff39 	bl	80026b4 <Error_Handler>
	}
	/** Enable the Alarm B
	 */
	sAlarm.Alarm = RTC_ALARM_B;
 8001842:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001848:	463b      	mov	r3, r7
 800184a:	2201      	movs	r2, #1
 800184c:	4619      	mov	r1, r3
 800184e:	480b      	ldr	r0, [pc, #44]	; (800187c <MX_RTC_Init+0x144>)
 8001850:	f009 fbba 	bl	800afc8 <HAL_RTC_SetAlarm>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_RTC_Init+0x126>
	{
		Error_Handler();
 800185a:	f000 ff2b 	bl	80026b4 <Error_Handler>
	}
	/** Enable the TimeStamp
	 */
	if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800185e:	2202      	movs	r2, #2
 8001860:	2100      	movs	r1, #0
 8001862:	4806      	ldr	r0, [pc, #24]	; (800187c <MX_RTC_Init+0x144>)
 8001864:	f009 fd3a 	bl	800b2dc <HAL_RTCEx_SetTimeStamp>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_RTC_Init+0x13a>
	{
		Error_Handler();
 800186e:	f000 ff21 	bl	80026b4 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	3748      	adds	r7, #72	; 0x48
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000968 	.word	0x20000968
 8001880:	40002800 	.word	0x40002800

08001884 <MX_SAI2_Init>:
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 8001888:	4b58      	ldr	r3, [pc, #352]	; (80019ec <MX_SAI2_Init+0x168>)
 800188a:	4a59      	ldr	r2, [pc, #356]	; (80019f0 <MX_SAI2_Init+0x16c>)
 800188c:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800188e:	4b57      	ldr	r3, [pc, #348]	; (80019ec <MX_SAI2_Init+0x168>)
 8001890:	2200      	movs	r2, #0
 8001892:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001894:	4b55      	ldr	r3, [pc, #340]	; (80019ec <MX_SAI2_Init+0x168>)
 8001896:	2200      	movs	r2, #0
 8001898:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 800189a:	4b54      	ldr	r3, [pc, #336]	; (80019ec <MX_SAI2_Init+0x168>)
 800189c:	2280      	movs	r2, #128	; 0x80
 800189e:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80018a0:	4b52      	ldr	r3, [pc, #328]	; (80019ec <MX_SAI2_Init+0x168>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80018a6:	4b51      	ldr	r3, [pc, #324]	; (80019ec <MX_SAI2_Init+0x168>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80018ac:	4b4f      	ldr	r3, [pc, #316]	; (80019ec <MX_SAI2_Init+0x168>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80018b2:	4b4e      	ldr	r3, [pc, #312]	; (80019ec <MX_SAI2_Init+0x168>)
 80018b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018b8:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80018ba:	4b4c      	ldr	r3, [pc, #304]	; (80019ec <MX_SAI2_Init+0x168>)
 80018bc:	2200      	movs	r2, #0
 80018be:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80018c0:	4b4a      	ldr	r3, [pc, #296]	; (80019ec <MX_SAI2_Init+0x168>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K; // SAI_AUDIO_FREQUENCY_48K;
 80018c6:	4b49      	ldr	r3, [pc, #292]	; (80019ec <MX_SAI2_Init+0x168>)
 80018c8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80018cc:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80018ce:	4b47      	ldr	r3, [pc, #284]	; (80019ec <MX_SAI2_Init+0x168>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80018d4:	4b45      	ldr	r3, [pc, #276]	; (80019ec <MX_SAI2_Init+0x168>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80018da:	4b44      	ldr	r3, [pc, #272]	; (80019ec <MX_SAI2_Init+0x168>)
 80018dc:	2200      	movs	r2, #0
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80018e0:	4b42      	ldr	r3, [pc, #264]	; (80019ec <MX_SAI2_Init+0x168>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 64;
 80018e6:	4b41      	ldr	r3, [pc, #260]	; (80019ec <MX_SAI2_Init+0x168>)
 80018e8:	2240      	movs	r2, #64	; 0x40
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 80018ec:	4b3f      	ldr	r3, [pc, #252]	; (80019ec <MX_SAI2_Init+0x168>)
 80018ee:	2220      	movs	r2, #32
 80018f0:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80018f2:	4b3e      	ldr	r3, [pc, #248]	; (80019ec <MX_SAI2_Init+0x168>)
 80018f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018f8:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80018fa:	4b3c      	ldr	r3, [pc, #240]	; (80019ec <MX_SAI2_Init+0x168>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001900:	4b3a      	ldr	r3, [pc, #232]	; (80019ec <MX_SAI2_Init+0x168>)
 8001902:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001906:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001908:	4b38      	ldr	r3, [pc, #224]	; (80019ec <MX_SAI2_Init+0x168>)
 800190a:	2200      	movs	r2, #0
 800190c:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800190e:	4b37      	ldr	r3, [pc, #220]	; (80019ec <MX_SAI2_Init+0x168>)
 8001910:	2200      	movs	r2, #0
 8001912:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 4;
 8001914:	4b35      	ldr	r3, [pc, #212]	; (80019ec <MX_SAI2_Init+0x168>)
 8001916:	2204      	movs	r2, #4
 8001918:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 800191a:	4b34      	ldr	r3, [pc, #208]	; (80019ec <MX_SAI2_Init+0x168>)
 800191c:	2205      	movs	r2, #5
 800191e:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001920:	4832      	ldr	r0, [pc, #200]	; (80019ec <MX_SAI2_Init+0x168>)
 8001922:	f009 fd31 	bl	800b388 <HAL_SAI_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_SAI2_Init+0xac>
	{
		Error_Handler();
 800192c:	f000 fec2 	bl	80026b4 <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 8001930:	4b30      	ldr	r3, [pc, #192]	; (80019f4 <MX_SAI2_Init+0x170>)
 8001932:	4a31      	ldr	r2, [pc, #196]	; (80019f8 <MX_SAI2_Init+0x174>)
 8001934:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001936:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <MX_SAI2_Init+0x170>)
 8001938:	2200      	movs	r2, #0
 800193a:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800193c:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <MX_SAI2_Init+0x170>)
 800193e:	2203      	movs	r2, #3
 8001940:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8001942:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <MX_SAI2_Init+0x170>)
 8001944:	2280      	movs	r2, #128	; 0x80
 8001946:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001948:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <MX_SAI2_Init+0x170>)
 800194a:	2200      	movs	r2, #0
 800194c:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800194e:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <MX_SAI2_Init+0x170>)
 8001950:	2201      	movs	r2, #1
 8001952:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <MX_SAI2_Init+0x170>)
 8001956:	2201      	movs	r2, #1
 8001958:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800195a:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <MX_SAI2_Init+0x170>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001960:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <MX_SAI2_Init+0x170>)
 8001962:	2201      	movs	r2, #1
 8001964:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001966:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <MX_SAI2_Init+0x170>)
 8001968:	2200      	movs	r2, #0
 800196a:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800196c:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <MX_SAI2_Init+0x170>)
 800196e:	2200      	movs	r2, #0
 8001970:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001972:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <MX_SAI2_Init+0x170>)
 8001974:	2200      	movs	r2, #0
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <MX_SAI2_Init+0x170>)
 800197a:	2200      	movs	r2, #0
 800197c:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 64;
 800197e:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <MX_SAI2_Init+0x170>)
 8001980:	2240      	movs	r2, #64	; 0x40
 8001982:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 8001984:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <MX_SAI2_Init+0x170>)
 8001986:	2220      	movs	r2, #32
 8001988:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800198a:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <MX_SAI2_Init+0x170>)
 800198c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001990:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <MX_SAI2_Init+0x170>)
 8001994:	2200      	movs	r2, #0
 8001996:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001998:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <MX_SAI2_Init+0x170>)
 800199a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800199e:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <MX_SAI2_Init+0x170>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80019a6:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <MX_SAI2_Init+0x170>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 4;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_SAI2_Init+0x170>)
 80019ae:	2204      	movs	r2, #4
 80019b0:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x0000000A;
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <MX_SAI2_Init+0x170>)
 80019b4:	220a      	movs	r2, #10
 80019b6:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80019b8:	480e      	ldr	r0, [pc, #56]	; (80019f4 <MX_SAI2_Init+0x170>)
 80019ba:	f009 fce5 	bl	800b388 <HAL_SAI_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_SAI2_Init+0x144>
	{
		Error_Handler();
 80019c4:	f000 fe76 	bl	80026b4 <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	// bug fix:
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <MX_SAI2_Init+0x168>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4b07      	ldr	r3, [pc, #28]	; (80019ec <MX_SAI2_Init+0x168>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019d6:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_SAI2_Init+0x170>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <MX_SAI2_Init+0x170>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019e6:	601a      	str	r2, [r3, #0]

	/* USER CODE END SAI2_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000530 	.word	0x20000530
 80019f0:	40015c04 	.word	0x40015c04
 80019f4:	20000304 	.word	0x20000304
 80019f8:	40015c24 	.word	0x40015c24

080019fc <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <MX_SDMMC1_SD_Init+0x38>)
 8001a02:	4a0d      	ldr	r2, [pc, #52]	; (8001a38 <MX_SDMMC1_SD_Init+0x3c>)
 8001a04:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <MX_SDMMC1_SD_Init+0x38>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <MX_SDMMC1_SD_Init+0x38>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <MX_SDMMC1_SD_Init+0x38>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <MX_SDMMC1_SD_Init+0x38>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <MX_SDMMC1_SD_Init+0x38>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <MX_SDMMC1_SD_Init+0x38>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	20000684 	.word	0x20000684
 8001a38:	40012c00 	.word	0x40012c00

08001a3c <MX_SPDIFRX_Init>:
 * @brief SPDIFRX Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPDIFRX_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	/* USER CODE END SPDIFRX_Init 0 */

	/* USER CODE BEGIN SPDIFRX_Init 1 */

	/* USER CODE END SPDIFRX_Init 1 */
	hspdif.Instance = SPDIFRX;
 8001a40:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <MX_SPDIFRX_Init+0x5c>)
 8001a42:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a46:	601a      	str	r2, [r3, #0]
	hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <MX_SPDIFRX_Init+0x5c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	605a      	str	r2, [r3, #4]
	hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <MX_SPDIFRX_Init+0x5c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
	hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <MX_SPDIFRX_Init+0x5c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
	hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <MX_SPDIFRX_Init+0x5c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
	hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001a60:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <MX_SPDIFRX_Init+0x5c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	615a      	str	r2, [r3, #20]
	hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <MX_SPDIFRX_Init+0x5c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
	hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <MX_SPDIFRX_Init+0x5c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
	hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <MX_SPDIFRX_Init+0x5c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	621a      	str	r2, [r3, #32]
	hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <MX_SPDIFRX_Init+0x5c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24
	hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <MX_SPDIFRX_Init+0x5c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <MX_SPDIFRX_Init+0x5c>)
 8001a86:	f00b f843 	bl	800cb10 <HAL_SPDIFRX_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_SPDIFRX_Init+0x58>
	{
		Error_Handler();
 8001a90:	f000 fe10 	bl	80026b4 <Error_Handler>
	}
	/* USER CODE BEGIN SPDIFRX_Init 2 */

	/* USER CODE END SPDIFRX_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200004e4 	.word	0x200004e4

08001a9c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b09a      	sub	sp, #104	; 0x68
 8001aa0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aa2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001abc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
 8001acc:	615a      	str	r2, [r3, #20]
 8001ace:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	222c      	movs	r2, #44	; 0x2c
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f010 fb28 	bl	801212c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001adc:	4b43      	ldr	r3, [pc, #268]	; (8001bec <MX_TIM1_Init+0x150>)
 8001ade:	4a44      	ldr	r2, [pc, #272]	; (8001bf0 <MX_TIM1_Init+0x154>)
 8001ae0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001ae2:	4b42      	ldr	r3, [pc, #264]	; (8001bec <MX_TIM1_Init+0x150>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae8:	4b40      	ldr	r3, [pc, #256]	; (8001bec <MX_TIM1_Init+0x150>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001aee:	4b3f      	ldr	r3, [pc, #252]	; (8001bec <MX_TIM1_Init+0x150>)
 8001af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001af4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af6:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <MX_TIM1_Init+0x150>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001afc:	4b3b      	ldr	r3, [pc, #236]	; (8001bec <MX_TIM1_Init+0x150>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b02:	4b3a      	ldr	r3, [pc, #232]	; (8001bec <MX_TIM1_Init+0x150>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b08:	4838      	ldr	r0, [pc, #224]	; (8001bec <MX_TIM1_Init+0x150>)
 8001b0a:	f00b f85d 	bl	800cbc8 <HAL_TIM_Base_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8001b14:	f000 fdce 	bl	80026b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b1c:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b22:	4619      	mov	r1, r3
 8001b24:	4831      	ldr	r0, [pc, #196]	; (8001bec <MX_TIM1_Init+0x150>)
 8001b26:	f00b fc15 	bl	800d354 <HAL_TIM_ConfigClockSource>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8001b30:	f000 fdc0 	bl	80026b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b34:	482d      	ldr	r0, [pc, #180]	; (8001bec <MX_TIM1_Init+0x150>)
 8001b36:	f00b f987 	bl	800ce48 <HAL_TIM_PWM_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8001b40:	f000 fdb8 	bl	80026b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b44:	2300      	movs	r3, #0
 8001b46:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b54:	4619      	mov	r1, r3
 8001b56:	4825      	ldr	r0, [pc, #148]	; (8001bec <MX_TIM1_Init+0x150>)
 8001b58:	f00c f882 	bl	800dc60 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 8001b62:	f000 fda7 	bl	80026b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b66:	2360      	movs	r3, #96	; 0x60
 8001b68:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b72:	2300      	movs	r3, #0
 8001b74:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b86:	2200      	movs	r2, #0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4818      	ldr	r0, [pc, #96]	; (8001bec <MX_TIM1_Init+0x150>)
 8001b8c:	f00b fad2 	bl	800d134 <HAL_TIM_PWM_ConfigChannel>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 8001b96:	f000 fd8d 	bl	80026b4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bb2:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4807      	ldr	r0, [pc, #28]	; (8001bec <MX_TIM1_Init+0x150>)
 8001bd0:	f00c f8d4 	bl	800dd7c <HAL_TIMEx_ConfigBreakDeadTime>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM1_Init+0x142>
	{
		Error_Handler();
 8001bda:	f000 fd6b 	bl	80026b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001bde:	4803      	ldr	r0, [pc, #12]	; (8001bec <MX_TIM1_Init+0x150>)
 8001be0:	f001 fa8a 	bl	80030f8 <HAL_TIM_MspPostInit>

}
 8001be4:	bf00      	nop
 8001be6:	3768      	adds	r7, #104	; 0x68
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000988 	.word	0x20000988
 8001bf0:	40010000 	.word	0x40010000

08001bf4 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08e      	sub	sp, #56	; 0x38
 8001bf8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001c14:	463b      	mov	r3, r7
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	611a      	str	r2, [r3, #16]
 8001c22:	615a      	str	r2, [r3, #20]
 8001c24:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001c26:	4b2d      	ldr	r3, [pc, #180]	; (8001cdc <MX_TIM2_Init+0xe8>)
 8001c28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c2c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001c2e:	4b2b      	ldr	r3, [pc, #172]	; (8001cdc <MX_TIM2_Init+0xe8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c34:	4b29      	ldr	r3, [pc, #164]	; (8001cdc <MX_TIM2_Init+0xe8>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001c3a:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <MX_TIM2_Init+0xe8>)
 8001c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c40:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c42:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <MX_TIM2_Init+0xe8>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c48:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <MX_TIM2_Init+0xe8>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c4e:	4823      	ldr	r0, [pc, #140]	; (8001cdc <MX_TIM2_Init+0xe8>)
 8001c50:	f00a ffba 	bl	800cbc8 <HAL_TIM_Base_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8001c5a:	f000 fd2b 	bl	80026b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c62:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c68:	4619      	mov	r1, r3
 8001c6a:	481c      	ldr	r0, [pc, #112]	; (8001cdc <MX_TIM2_Init+0xe8>)
 8001c6c:	f00b fb72 	bl	800d354 <HAL_TIM_ConfigClockSource>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 8001c76:	f000 fd1d 	bl	80026b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c7a:	4818      	ldr	r0, [pc, #96]	; (8001cdc <MX_TIM2_Init+0xe8>)
 8001c7c:	f00b f8e4 	bl	800ce48 <HAL_TIM_PWM_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 8001c86:	f000 fd15 	bl	80026b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c92:	f107 031c 	add.w	r3, r7, #28
 8001c96:	4619      	mov	r1, r3
 8001c98:	4810      	ldr	r0, [pc, #64]	; (8001cdc <MX_TIM2_Init+0xe8>)
 8001c9a:	f00b ffe1 	bl	800dc60 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8001ca4:	f000 fd06 	bl	80026b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca8:	2360      	movs	r3, #96	; 0x60
 8001caa:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cb8:	463b      	mov	r3, r7
 8001cba:	2200      	movs	r2, #0
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4807      	ldr	r0, [pc, #28]	; (8001cdc <MX_TIM2_Init+0xe8>)
 8001cc0:	f00b fa38 	bl	800d134 <HAL_TIM_PWM_ConfigChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 8001cca:	f000 fcf3 	bl	80026b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <MX_TIM2_Init+0xe8>)
 8001cd0:	f001 fa12 	bl	80030f8 <HAL_TIM_MspPostInit>

}
 8001cd4:	bf00      	nop
 8001cd6:	3738      	adds	r7, #56	; 0x38
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000af8 	.word	0x20000af8

08001ce0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08e      	sub	sp, #56	; 0x38
 8001ce4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001d00:	463b      	mov	r3, r7
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]
 8001d0c:	611a      	str	r2, [r3, #16]
 8001d0e:	615a      	str	r2, [r3, #20]
 8001d10:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001d12:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <MX_TIM3_Init+0xe8>)
 8001d14:	4a2d      	ldr	r2, [pc, #180]	; (8001dcc <MX_TIM3_Init+0xec>)
 8001d16:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001d18:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <MX_TIM3_Init+0xe8>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1e:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <MX_TIM3_Init+0xe8>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001d24:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <MX_TIM3_Init+0xe8>)
 8001d26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d2a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2c:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <MX_TIM3_Init+0xe8>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d32:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <MX_TIM3_Init+0xe8>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d38:	4823      	ldr	r0, [pc, #140]	; (8001dc8 <MX_TIM3_Init+0xe8>)
 8001d3a:	f00a ff45 	bl	800cbc8 <HAL_TIM_Base_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 8001d44:	f000 fcb6 	bl	80026b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d52:	4619      	mov	r1, r3
 8001d54:	481c      	ldr	r0, [pc, #112]	; (8001dc8 <MX_TIM3_Init+0xe8>)
 8001d56:	f00b fafd 	bl	800d354 <HAL_TIM_ConfigClockSource>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 8001d60:	f000 fca8 	bl	80026b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d64:	4818      	ldr	r0, [pc, #96]	; (8001dc8 <MX_TIM3_Init+0xe8>)
 8001d66:	f00b f86f 	bl	800ce48 <HAL_TIM_PWM_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 8001d70:	f000 fca0 	bl	80026b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	4619      	mov	r1, r3
 8001d82:	4811      	ldr	r0, [pc, #68]	; (8001dc8 <MX_TIM3_Init+0xe8>)
 8001d84:	f00b ff6c 	bl	800dc60 <HAL_TIMEx_MasterConfigSynchronization>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 8001d8e:	f000 fc91 	bl	80026b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d92:	2360      	movs	r3, #96	; 0x60
 8001d94:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001da2:	463b      	mov	r3, r7
 8001da4:	2200      	movs	r2, #0
 8001da6:	4619      	mov	r1, r3
 8001da8:	4807      	ldr	r0, [pc, #28]	; (8001dc8 <MX_TIM3_Init+0xe8>)
 8001daa:	f00b f9c3 	bl	800d134 <HAL_TIM_PWM_ConfigChannel>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM3_Init+0xd8>
	{
		Error_Handler();
 8001db4:	f000 fc7e 	bl	80026b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001db8:	4803      	ldr	r0, [pc, #12]	; (8001dc8 <MX_TIM3_Init+0xe8>)
 8001dba:	f001 f99d 	bl	80030f8 <HAL_TIM_MspPostInit>

}
 8001dbe:	bf00      	nop
 8001dc0:	3738      	adds	r7, #56	; 0x38
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000758 	.word	0x20000758
 8001dcc:	40000400 	.word	0x40000400

08001dd0 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08e      	sub	sp, #56	; 0x38
 8001dd4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001df0:	463b      	mov	r3, r7
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
 8001dfc:	611a      	str	r2, [r3, #16]
 8001dfe:	615a      	str	r2, [r3, #20]
 8001e00:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001e02:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <MX_TIM5_Init+0xe8>)
 8001e04:	4a2d      	ldr	r2, [pc, #180]	; (8001ebc <MX_TIM5_Init+0xec>)
 8001e06:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8001e08:	4b2b      	ldr	r3, [pc, #172]	; (8001eb8 <MX_TIM5_Init+0xe8>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0e:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <MX_TIM5_Init+0xe8>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8001e14:	4b28      	ldr	r3, [pc, #160]	; (8001eb8 <MX_TIM5_Init+0xe8>)
 8001e16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e1a:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1c:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <MX_TIM5_Init+0xe8>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e22:	4b25      	ldr	r3, [pc, #148]	; (8001eb8 <MX_TIM5_Init+0xe8>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e28:	4823      	ldr	r0, [pc, #140]	; (8001eb8 <MX_TIM5_Init+0xe8>)
 8001e2a:	f00a fecd 	bl	800cbc8 <HAL_TIM_Base_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM5_Init+0x68>
	{
		Error_Handler();
 8001e34:	f000 fc3e 	bl	80026b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e42:	4619      	mov	r1, r3
 8001e44:	481c      	ldr	r0, [pc, #112]	; (8001eb8 <MX_TIM5_Init+0xe8>)
 8001e46:	f00b fa85 	bl	800d354 <HAL_TIM_ConfigClockSource>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM5_Init+0x84>
	{
		Error_Handler();
 8001e50:	f000 fc30 	bl	80026b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e54:	4818      	ldr	r0, [pc, #96]	; (8001eb8 <MX_TIM5_Init+0xe8>)
 8001e56:	f00a fff7 	bl	800ce48 <HAL_TIM_PWM_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM5_Init+0x94>
	{
		Error_Handler();
 8001e60:	f000 fc28 	bl	80026b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e6c:	f107 031c 	add.w	r3, r7, #28
 8001e70:	4619      	mov	r1, r3
 8001e72:	4811      	ldr	r0, [pc, #68]	; (8001eb8 <MX_TIM5_Init+0xe8>)
 8001e74:	f00b fef4 	bl	800dc60 <HAL_TIMEx_MasterConfigSynchronization>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM5_Init+0xb2>
	{
		Error_Handler();
 8001e7e:	f000 fc19 	bl	80026b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e82:	2360      	movs	r3, #96	; 0x60
 8001e84:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e92:	463b      	mov	r3, r7
 8001e94:	220c      	movs	r2, #12
 8001e96:	4619      	mov	r1, r3
 8001e98:	4807      	ldr	r0, [pc, #28]	; (8001eb8 <MX_TIM5_Init+0xe8>)
 8001e9a:	f00b f94b 	bl	800d134 <HAL_TIM_PWM_ConfigChannel>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM5_Init+0xd8>
	{
		Error_Handler();
 8001ea4:	f000 fc06 	bl	80026b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8001ea8:	4803      	ldr	r0, [pc, #12]	; (8001eb8 <MX_TIM5_Init+0xe8>)
 8001eaa:	f001 f925 	bl	80030f8 <HAL_TIM_MspPostInit>

}
 8001eae:	bf00      	nop
 8001eb0:	3738      	adds	r7, #56	; 0x38
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000708 	.word	0x20000708
 8001ebc:	40000c00 	.word	0x40000c00

08001ec0 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec6:	f107 0310 	add.w	r3, r7, #16
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <MX_TIM8_Init+0xa0>)
 8001ee0:	4a20      	ldr	r2, [pc, #128]	; (8001f64 <MX_TIM8_Init+0xa4>)
 8001ee2:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <MX_TIM8_Init+0xa0>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <MX_TIM8_Init+0xa0>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <MX_TIM8_Init+0xa0>)
 8001ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ef6:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <MX_TIM8_Init+0xa0>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001efe:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <MX_TIM8_Init+0xa0>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f04:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <MX_TIM8_Init+0xa0>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f0a:	4815      	ldr	r0, [pc, #84]	; (8001f60 <MX_TIM8_Init+0xa0>)
 8001f0c:	f00a fe5c 	bl	800cbc8 <HAL_TIM_Base_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM8_Init+0x5a>
	{
		Error_Handler();
 8001f16:	f000 fbcd 	bl	80026b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f1e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f20:	f107 0310 	add.w	r3, r7, #16
 8001f24:	4619      	mov	r1, r3
 8001f26:	480e      	ldr	r0, [pc, #56]	; (8001f60 <MX_TIM8_Init+0xa0>)
 8001f28:	f00b fa14 	bl	800d354 <HAL_TIM_ConfigClockSource>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM8_Init+0x76>
	{
		Error_Handler();
 8001f32:	f000 fbbf 	bl	80026b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4806      	ldr	r0, [pc, #24]	; (8001f60 <MX_TIM8_Init+0xa0>)
 8001f48:	f00b fe8a 	bl	800dc60 <HAL_TIMEx_MasterConfigSynchronization>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM8_Init+0x96>
	{
		Error_Handler();
 8001f52:	f000 fbaf 	bl	80026b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	3720      	adds	r7, #32
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000438 	.word	0x20000438
 8001f64:	40010400 	.word	0x40010400

08001f68 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
 8001f7c:	615a      	str	r2, [r3, #20]
 8001f7e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8001f80:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <MX_TIM12_Init+0x84>)
 8001f82:	4a1b      	ldr	r2, [pc, #108]	; (8001ff0 <MX_TIM12_Init+0x88>)
 8001f84:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 8001f86:	4b19      	ldr	r3, [pc, #100]	; (8001fec <MX_TIM12_Init+0x84>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8c:	4b17      	ldr	r3, [pc, #92]	; (8001fec <MX_TIM12_Init+0x84>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 65535;
 8001f92:	4b16      	ldr	r3, [pc, #88]	; (8001fec <MX_TIM12_Init+0x84>)
 8001f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f98:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9a:	4b14      	ldr	r3, [pc, #80]	; (8001fec <MX_TIM12_Init+0x84>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <MX_TIM12_Init+0x84>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001fa6:	4811      	ldr	r0, [pc, #68]	; (8001fec <MX_TIM12_Init+0x84>)
 8001fa8:	f00a ff4e 	bl	800ce48 <HAL_TIM_PWM_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM12_Init+0x4e>
	{
		Error_Handler();
 8001fb2:	f000 fb7f 	bl	80026b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb6:	2360      	movs	r3, #96	; 0x60
 8001fb8:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	2200      	movs	r2, #0
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4807      	ldr	r0, [pc, #28]	; (8001fec <MX_TIM12_Init+0x84>)
 8001fce:	f00b f8b1 	bl	800d134 <HAL_TIM_PWM_ConfigChannel>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_TIM12_Init+0x74>
	{
		Error_Handler();
 8001fd8:	f000 fb6c 	bl	80026b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8001fdc:	4803      	ldr	r0, [pc, #12]	; (8001fec <MX_TIM12_Init+0x84>)
 8001fde:	f001 f88b 	bl	80030f8 <HAL_TIM_MspPostInit>

}
 8001fe2:	bf00      	nop
 8001fe4:	3720      	adds	r7, #32
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000b44 	.word	0x20000b44
 8001ff0:	40001800 	.word	0x40001800

08001ff4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001ff8:	4b14      	ldr	r3, [pc, #80]	; (800204c <MX_USART1_UART_Init+0x58>)
 8001ffa:	4a15      	ldr	r2, [pc, #84]	; (8002050 <MX_USART1_UART_Init+0x5c>)
 8001ffc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <MX_USART1_UART_Init+0x58>)
 8002000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002004:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <MX_USART1_UART_Init+0x58>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800200c:	4b0f      	ldr	r3, [pc, #60]	; (800204c <MX_USART1_UART_Init+0x58>)
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <MX_USART1_UART_Init+0x58>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <MX_USART1_UART_Init+0x58>)
 800201a:	220c      	movs	r2, #12
 800201c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <MX_USART1_UART_Init+0x58>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <MX_USART1_UART_Init+0x58>)
 8002026:	2200      	movs	r2, #0
 8002028:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <MX_USART1_UART_Init+0x58>)
 800202c:	2200      	movs	r2, #0
 800202e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <MX_USART1_UART_Init+0x58>)
 8002032:	2200      	movs	r2, #0
 8002034:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002036:	4805      	ldr	r0, [pc, #20]	; (800204c <MX_USART1_UART_Init+0x58>)
 8002038:	f00b ff3c 	bl	800deb4 <HAL_UART_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8002042:	f000 fb37 	bl	80026b4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200008e4 	.word	0x200008e4
 8002050:	40011000 	.word	0x40011000

08002054 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002058:	4b14      	ldr	r3, [pc, #80]	; (80020ac <MX_USART6_UART_Init+0x58>)
 800205a:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <MX_USART6_UART_Init+0x5c>)
 800205c:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800205e:	4b13      	ldr	r3, [pc, #76]	; (80020ac <MX_USART6_UART_Init+0x58>)
 8002060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002064:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <MX_USART6_UART_Init+0x58>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <MX_USART6_UART_Init+0x58>)
 800206e:	2200      	movs	r2, #0
 8002070:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <MX_USART6_UART_Init+0x58>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <MX_USART6_UART_Init+0x58>)
 800207a:	220c      	movs	r2, #12
 800207c:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207e:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <MX_USART6_UART_Init+0x58>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002084:	4b09      	ldr	r3, [pc, #36]	; (80020ac <MX_USART6_UART_Init+0x58>)
 8002086:	2200      	movs	r2, #0
 8002088:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800208a:	4b08      	ldr	r3, [pc, #32]	; (80020ac <MX_USART6_UART_Init+0x58>)
 800208c:	2200      	movs	r2, #0
 800208e:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <MX_USART6_UART_Init+0x58>)
 8002092:	2200      	movs	r2, #0
 8002094:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8002096:	4805      	ldr	r0, [pc, #20]	; (80020ac <MX_USART6_UART_Init+0x58>)
 8002098:	f00b ff0c 	bl	800deb4 <HAL_UART_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_USART6_UART_Init+0x52>
	{
		Error_Handler();
 80020a2:	f000 fb07 	bl	80026b4 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000a34 	.word	0x20000a34
 80020b0:	40011400 	.word	0x40011400

080020b4 <MX_DMA_Init>:
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma2_stream0
 */
static void MX_DMA_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80020ba:	4b32      	ldr	r3, [pc, #200]	; (8002184 <MX_DMA_Init+0xd0>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a31      	ldr	r2, [pc, #196]	; (8002184 <MX_DMA_Init+0xd0>)
 80020c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <MX_DMA_Init+0xd0>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
	hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80020d2:	4b2d      	ldr	r3, [pc, #180]	; (8002188 <MX_DMA_Init+0xd4>)
 80020d4:	4a2d      	ldr	r2, [pc, #180]	; (800218c <MX_DMA_Init+0xd8>)
 80020d6:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80020d8:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <MX_DMA_Init+0xd4>)
 80020da:	2200      	movs	r2, #0
 80020dc:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80020de:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <MX_DMA_Init+0xd4>)
 80020e0:	2280      	movs	r2, #128	; 0x80
 80020e2:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 80020e4:	4b28      	ldr	r3, [pc, #160]	; (8002188 <MX_DMA_Init+0xd4>)
 80020e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ea:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80020ec:	4b26      	ldr	r3, [pc, #152]	; (8002188 <MX_DMA_Init+0xd4>)
 80020ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f2:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020f4:	4b24      	ldr	r3, [pc, #144]	; (8002188 <MX_DMA_Init+0xd4>)
 80020f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020fa:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020fc:	4b22      	ldr	r3, [pc, #136]	; (8002188 <MX_DMA_Init+0xd4>)
 80020fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002102:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8002104:	4b20      	ldr	r3, [pc, #128]	; (8002188 <MX_DMA_Init+0xd4>)
 8002106:	2200      	movs	r2, #0
 8002108:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 800210a:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <MX_DMA_Init+0xd4>)
 800210c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002110:	621a      	str	r2, [r3, #32]
	hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002112:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <MX_DMA_Init+0xd4>)
 8002114:	2204      	movs	r2, #4
 8002116:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002118:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <MX_DMA_Init+0xd4>)
 800211a:	2203      	movs	r2, #3
 800211c:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <MX_DMA_Init+0xd4>)
 8002120:	2200      	movs	r2, #0
 8002122:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002124:	4b18      	ldr	r3, [pc, #96]	; (8002188 <MX_DMA_Init+0xd4>)
 8002126:	2200      	movs	r2, #0
 8002128:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 800212a:	4817      	ldr	r0, [pc, #92]	; (8002188 <MX_DMA_Init+0xd4>)
 800212c:	f002 fef2 	bl	8004f14 <HAL_DMA_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_DMA_Init+0x86>
	{
		Error_Handler( );
 8002136:	f000 fabd 	bl	80026b4 <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2105      	movs	r1, #5
 800213e:	2038      	movs	r0, #56	; 0x38
 8002140:	f002 fc00 	bl	8004944 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002144:	2038      	movs	r0, #56	; 0x38
 8002146:	f002 fc19 	bl	800497c <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2105      	movs	r1, #5
 800214e:	2039      	movs	r0, #57	; 0x39
 8002150:	f002 fbf8 	bl	8004944 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002154:	2039      	movs	r0, #57	; 0x39
 8002156:	f002 fc11 	bl	800497c <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2105      	movs	r1, #5
 800215e:	203c      	movs	r0, #60	; 0x3c
 8002160:	f002 fbf0 	bl	8004944 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002164:	203c      	movs	r0, #60	; 0x3c
 8002166:	f002 fc09 	bl	800497c <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	2105      	movs	r1, #5
 800216e:	2046      	movs	r0, #70	; 0x46
 8002170:	f002 fbe8 	bl	8004944 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002174:	2046      	movs	r0, #70	; 0x46
 8002176:	f002 fc01 	bl	800497c <HAL_NVIC_EnableIRQ>

}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	200003d8 	.word	0x200003d8
 800218c:	40026410 	.word	0x40026410

08002190 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
 80021a4:	615a      	str	r2, [r3, #20]
 80021a6:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 80021a8:	4b21      	ldr	r3, [pc, #132]	; (8002230 <MX_FMC_Init+0xa0>)
 80021aa:	4a22      	ldr	r2, [pc, #136]	; (8002234 <MX_FMC_Init+0xa4>)
 80021ac:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80021ae:	4b20      	ldr	r3, [pc, #128]	; (8002230 <MX_FMC_Init+0xa0>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80021b4:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <MX_FMC_Init+0xa0>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80021ba:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <MX_FMC_Init+0xa0>)
 80021bc:	2204      	movs	r2, #4
 80021be:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80021c0:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <MX_FMC_Init+0xa0>)
 80021c2:	2210      	movs	r2, #16
 80021c4:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <MX_FMC_Init+0xa0>)
 80021c8:	2240      	movs	r2, #64	; 0x40
 80021ca:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <MX_FMC_Init+0xa0>)
 80021ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021d2:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80021d4:	4b16      	ldr	r3, [pc, #88]	; (8002230 <MX_FMC_Init+0xa0>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <MX_FMC_Init+0xa0>)
 80021dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021e0:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80021e2:	4b13      	ldr	r3, [pc, #76]	; (8002230 <MX_FMC_Init+0xa0>)
 80021e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <MX_FMC_Init+0xa0>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 80021f0:	2302      	movs	r3, #2
 80021f2:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 80021f4:	2307      	movs	r3, #7
 80021f6:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 80021f8:	2304      	movs	r3, #4
 80021fa:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 80021fc:	2307      	movs	r3, #7
 80021fe:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 8002200:	2303      	movs	r3, #3
 8002202:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8002204:	2302      	movs	r3, #2
 8002206:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8002208:	2302      	movs	r3, #2
 800220a:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	4619      	mov	r1, r3
 8002210:	4807      	ldr	r0, [pc, #28]	; (8002230 <MX_FMC_Init+0xa0>)
 8002212:	f00a fbfe 	bl	800ca12 <HAL_SDRAM_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_FMC_Init+0x90>
	{
		Error_Handler( );
 800221c:	f000 fa4a 	bl	80026b4 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	DISCO_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002220:	f240 6003 	movw	r0, #1539	; 0x603
 8002224:	f001 febe 	bl	8003fa4 <DISCO_SDRAM_Initialization_sequence>

	/* USER CODE END FMC_Init 2 */
}
 8002228:	bf00      	nop
 800222a:	3720      	adds	r7, #32
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000b90 	.word	0x20000b90
 8002234:	a0000140 	.word	0xa0000140

08002238 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b090      	sub	sp, #64	; 0x40
 800223c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	60da      	str	r2, [r3, #12]
 800224c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800224e:	4baf      	ldr	r3, [pc, #700]	; (800250c <MX_GPIO_Init+0x2d4>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4aae      	ldr	r2, [pc, #696]	; (800250c <MX_GPIO_Init+0x2d4>)
 8002254:	f043 0310 	orr.w	r3, r3, #16
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4bac      	ldr	r3, [pc, #688]	; (800250c <MX_GPIO_Init+0x2d4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28
 8002264:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002266:	4ba9      	ldr	r3, [pc, #676]	; (800250c <MX_GPIO_Init+0x2d4>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4aa8      	ldr	r2, [pc, #672]	; (800250c <MX_GPIO_Init+0x2d4>)
 800226c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4ba6      	ldr	r3, [pc, #664]	; (800250c <MX_GPIO_Init+0x2d4>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800227e:	4ba3      	ldr	r3, [pc, #652]	; (800250c <MX_GPIO_Init+0x2d4>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4aa2      	ldr	r2, [pc, #648]	; (800250c <MX_GPIO_Init+0x2d4>)
 8002284:	f043 0302 	orr.w	r3, r3, #2
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4ba0      	ldr	r3, [pc, #640]	; (800250c <MX_GPIO_Init+0x2d4>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	623b      	str	r3, [r7, #32]
 8002294:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002296:	4b9d      	ldr	r3, [pc, #628]	; (800250c <MX_GPIO_Init+0x2d4>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a9c      	ldr	r2, [pc, #624]	; (800250c <MX_GPIO_Init+0x2d4>)
 800229c:	f043 0308 	orr.w	r3, r3, #8
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b9a      	ldr	r3, [pc, #616]	; (800250c <MX_GPIO_Init+0x2d4>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	61fb      	str	r3, [r7, #28]
 80022ac:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80022ae:	4b97      	ldr	r3, [pc, #604]	; (800250c <MX_GPIO_Init+0x2d4>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a96      	ldr	r2, [pc, #600]	; (800250c <MX_GPIO_Init+0x2d4>)
 80022b4:	f043 0304 	orr.w	r3, r3, #4
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b94      	ldr	r3, [pc, #592]	; (800250c <MX_GPIO_Init+0x2d4>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	61bb      	str	r3, [r7, #24]
 80022c4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80022c6:	4b91      	ldr	r3, [pc, #580]	; (800250c <MX_GPIO_Init+0x2d4>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a90      	ldr	r2, [pc, #576]	; (800250c <MX_GPIO_Init+0x2d4>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b8e      	ldr	r3, [pc, #568]	; (800250c <MX_GPIO_Init+0x2d4>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 80022de:	4b8b      	ldr	r3, [pc, #556]	; (800250c <MX_GPIO_Init+0x2d4>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a8a      	ldr	r2, [pc, #552]	; (800250c <MX_GPIO_Init+0x2d4>)
 80022e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b88      	ldr	r3, [pc, #544]	; (800250c <MX_GPIO_Init+0x2d4>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 80022f6:	4b85      	ldr	r3, [pc, #532]	; (800250c <MX_GPIO_Init+0x2d4>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a84      	ldr	r2, [pc, #528]	; (800250c <MX_GPIO_Init+0x2d4>)
 80022fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b82      	ldr	r3, [pc, #520]	; (800250c <MX_GPIO_Init+0x2d4>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 800230e:	4b7f      	ldr	r3, [pc, #508]	; (800250c <MX_GPIO_Init+0x2d4>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a7e      	ldr	r2, [pc, #504]	; (800250c <MX_GPIO_Init+0x2d4>)
 8002314:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b7c      	ldr	r3, [pc, #496]	; (800250c <MX_GPIO_Init+0x2d4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002326:	4b79      	ldr	r3, [pc, #484]	; (800250c <MX_GPIO_Init+0x2d4>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	4a78      	ldr	r2, [pc, #480]	; (800250c <MX_GPIO_Init+0x2d4>)
 800232c:	f043 0320 	orr.w	r3, r3, #32
 8002330:	6313      	str	r3, [r2, #48]	; 0x30
 8002332:	4b76      	ldr	r3, [pc, #472]	; (800250c <MX_GPIO_Init+0x2d4>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f003 0320 	and.w	r3, r3, #32
 800233a:	607b      	str	r3, [r7, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800233e:	4b73      	ldr	r3, [pc, #460]	; (800250c <MX_GPIO_Init+0x2d4>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a72      	ldr	r2, [pc, #456]	; (800250c <MX_GPIO_Init+0x2d4>)
 8002344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b70      	ldr	r3, [pc, #448]	; (800250c <MX_GPIO_Init+0x2d4>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002356:	2201      	movs	r2, #1
 8002358:	2120      	movs	r1, #32
 800235a:	486d      	ldr	r0, [pc, #436]	; (8002510 <MX_GPIO_Init+0x2d8>)
 800235c:	f003 fe12 	bl	8005f84 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 8002360:	2200      	movs	r2, #0
 8002362:	210e      	movs	r1, #14
 8002364:	486b      	ldr	r0, [pc, #428]	; (8002514 <MX_GPIO_Init+0x2dc>)
 8002366:	f003 fe0d 	bl	8005f84 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800236a:	2201      	movs	r2, #1
 800236c:	2108      	movs	r1, #8
 800236e:	486a      	ldr	r0, [pc, #424]	; (8002518 <MX_GPIO_Init+0x2e0>)
 8002370:	f003 fe08 	bl	8005f84 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002374:	2201      	movs	r2, #1
 8002376:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800237a:	4866      	ldr	r0, [pc, #408]	; (8002514 <MX_GPIO_Init+0x2dc>)
 800237c:	f003 fe02 	bl	8005f84 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002380:	2200      	movs	r2, #0
 8002382:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002386:	4865      	ldr	r0, [pc, #404]	; (800251c <MX_GPIO_Init+0x2e4>)
 8002388:	f003 fdfc 	bl	8005f84 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800238c:	2200      	movs	r2, #0
 800238e:	21c8      	movs	r1, #200	; 0xc8
 8002390:	4863      	ldr	r0, [pc, #396]	; (8002520 <MX_GPIO_Init+0x2e8>)
 8002392:	f003 fdf7 	bl	8005f84 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002396:	2308      	movs	r3, #8
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800239a:	2300      	movs	r3, #0
 800239c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023a6:	4619      	mov	r1, r3
 80023a8:	485e      	ldr	r0, [pc, #376]	; (8002524 <MX_GPIO_Init+0x2ec>)
 80023aa:	f003 fb1b 	bl	80059e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80023ae:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b4:	2302      	movs	r3, #2
 80023b6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023bc:	2303      	movs	r3, #3
 80023be:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023c0:	230b      	movs	r3, #11
 80023c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c8:	4619      	mov	r1, r3
 80023ca:	4855      	ldr	r0, [pc, #340]	; (8002520 <MX_GPIO_Init+0x2e8>)
 80023cc:	f003 fb0a 	bl	80059e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80023d0:	f643 4323 	movw	r3, #15395	; 0x3c23
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d6:	2302      	movs	r3, #2
 80023d8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023de:	2303      	movs	r3, #3
 80023e0:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80023e2:	230a      	movs	r3, #10
 80023e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ea:	4619      	mov	r1, r3
 80023ec:	484e      	ldr	r0, [pc, #312]	; (8002528 <MX_GPIO_Init+0x2f0>)
 80023ee:	f003 faf9 	bl	80059e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80023f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f8:	2300      	movs	r3, #0
 80023fa:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002400:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002404:	4619      	mov	r1, r3
 8002406:	4849      	ldr	r0, [pc, #292]	; (800252c <MX_GPIO_Init+0x2f4>)
 8002408:	f003 faec 	bl	80059e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 800240c:	2340      	movs	r3, #64	; 0x40
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002410:	4b47      	ldr	r3, [pc, #284]	; (8002530 <MX_GPIO_Init+0x2f8>)
 8002412:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800241c:	4619      	mov	r1, r3
 800241e:	483c      	ldr	r0, [pc, #240]	; (8002510 <MX_GPIO_Init+0x2d8>)
 8002420:	f003 fae0 	bl	80059e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002424:	2320      	movs	r3, #32
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002428:	2301      	movs	r3, #1
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002430:	2300      	movs	r3, #0
 8002432:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002438:	4619      	mov	r1, r3
 800243a:	4835      	ldr	r0, [pc, #212]	; (8002510 <MX_GPIO_Init+0x2d8>)
 800243c:	f003 fad2 	bl	80059e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 8002440:	f241 030e 	movw	r3, #4110	; 0x100e
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002446:	2301      	movs	r3, #1
 8002448:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2300      	movs	r3, #0
 8002450:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002456:	4619      	mov	r1, r3
 8002458:	482e      	ldr	r0, [pc, #184]	; (8002514 <MX_GPIO_Init+0x2dc>)
 800245a:	f003 fac3 	bl	80059e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800245e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002464:	2300      	movs	r3, #0
 8002466:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800246c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002470:	4619      	mov	r1, r3
 8002472:	4830      	ldr	r0, [pc, #192]	; (8002534 <MX_GPIO_Init+0x2fc>)
 8002474:	f003 fab6 	bl	80059e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002478:	2308      	movs	r3, #8
 800247a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247c:	2301      	movs	r3, #1
 800247e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002488:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800248c:	4619      	mov	r1, r3
 800248e:	4822      	ldr	r0, [pc, #136]	; (8002518 <MX_GPIO_Init+0x2e0>)
 8002490:	f003 faa8 	bl	80059e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002494:	2310      	movs	r3, #16
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002498:	2300      	movs	r3, #0
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80024a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a4:	4619      	mov	r1, r3
 80024a6:	481a      	ldr	r0, [pc, #104]	; (8002510 <MX_GPIO_Init+0x2d8>)
 80024a8:	f003 fa9c 	bl	80059e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80024ac:	f248 0304 	movw	r3, #32772	; 0x8004
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b2:	2300      	movs	r3, #0
 80024b4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024be:	4619      	mov	r1, r3
 80024c0:	4816      	ldr	r0, [pc, #88]	; (800251c <MX_GPIO_Init+0x2e4>)
 80024c2:	f003 fa8f 	bl	80059e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80024c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024cc:	2301      	movs	r3, #1
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d4:	2300      	movs	r3, #0
 80024d6:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80024d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024dc:	4619      	mov	r1, r3
 80024de:	480f      	ldr	r0, [pc, #60]	; (800251c <MX_GPIO_Init+0x2e4>)
 80024e0:	f003 fa80 	bl	80059e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : BLUE_BTN_Pin */
	GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 80024e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ea:	2300      	movs	r3, #0
 80024ec:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 80024f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f6:	4619      	mov	r1, r3
 80024f8:	4806      	ldr	r0, [pc, #24]	; (8002514 <MX_GPIO_Init+0x2dc>)
 80024fa:	f003 fa73 	bl	80059e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 80024fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <MX_GPIO_Init+0x300>)
 8002506:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	e017      	b.n	800253c <MX_GPIO_Init+0x304>
 800250c:	40023800 	.word	0x40023800
 8002510:	40020c00 	.word	0x40020c00
 8002514:	40022000 	.word	0x40022000
 8002518:	40022800 	.word	0x40022800
 800251c:	40021c00 	.word	0x40021c00
 8002520:	40021800 	.word	0x40021800
 8002524:	40021000 	.word	0x40021000
 8002528:	40020400 	.word	0x40020400
 800252c:	40022400 	.word	0x40022400
 8002530:	10120000 	.word	0x10120000
 8002534:	40020800 	.word	0x40020800
 8002538:	10110000 	.word	0x10110000
 800253c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800253e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002542:	4619      	mov	r1, r3
 8002544:	4844      	ldr	r0, [pc, #272]	; (8002658 <MX_GPIO_Init+0x420>)
 8002546:	f003 fa4d 	bl	80059e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800254a:	2310      	movs	r3, #16
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002556:	2303      	movs	r3, #3
 8002558:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800255a:	230a      	movs	r3, #10
 800255c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800255e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002562:	4619      	mov	r1, r3
 8002564:	483d      	ldr	r0, [pc, #244]	; (800265c <MX_GPIO_Init+0x424>)
 8002566:	f003 fa3d 	bl	80059e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800256a:	23c8      	movs	r3, #200	; 0xc8
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800256e:	2301      	movs	r3, #1
 8002570:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002576:	2300      	movs	r3, #0
 8002578:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800257a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800257e:	4619      	mov	r1, r3
 8002580:	4837      	ldr	r0, [pc, #220]	; (8002660 <MX_GPIO_Init+0x428>)
 8002582:	f003 fa2f 	bl	80059e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002586:	2305      	movs	r3, #5
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258a:	2302      	movs	r3, #2
 800258c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002592:	2303      	movs	r3, #3
 8002594:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002596:	230a      	movs	r3, #10
 8002598:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800259a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800259e:	4619      	mov	r1, r3
 80025a0:	4830      	ldr	r0, [pc, #192]	; (8002664 <MX_GPIO_Init+0x42c>)
 80025a2:	f003 fa1f 	bl	80059e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80025a6:	2332      	movs	r3, #50	; 0x32
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b2:	2303      	movs	r3, #3
 80025b4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025b6:	230b      	movs	r3, #11
 80025b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025be:	4619      	mov	r1, r3
 80025c0:	4828      	ldr	r0, [pc, #160]	; (8002664 <MX_GPIO_Init+0x42c>)
 80025c2:	f003 fa0f 	bl	80059e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80025c6:	2304      	movs	r3, #4
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ca:	2300      	movs	r3, #0
 80025cc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80025d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025d6:	4619      	mov	r1, r3
 80025d8:	4821      	ldr	r0, [pc, #132]	; (8002660 <MX_GPIO_Init+0x428>)
 80025da:	f003 fa03 	bl	80059e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80025de:	2386      	movs	r3, #134	; 0x86
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e2:	2302      	movs	r3, #2
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ea:	2303      	movs	r3, #3
 80025ec:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025ee:	230b      	movs	r3, #11
 80025f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025f6:	4619      	mov	r1, r3
 80025f8:	481b      	ldr	r0, [pc, #108]	; (8002668 <MX_GPIO_Init+0x430>)
 80025fa:	f003 f9f3 	bl	80059e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80025fe:	2328      	movs	r3, #40	; 0x28
 8002600:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260a:	2303      	movs	r3, #3
 800260c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800260e:	230a      	movs	r3, #10
 8002610:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002612:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002616:	4619      	mov	r1, r3
 8002618:	4813      	ldr	r0, [pc, #76]	; (8002668 <MX_GPIO_Init+0x430>)
 800261a:	f003 f9e3 	bl	80059e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800261e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002624:	2302      	movs	r3, #2
 8002626:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262c:	2300      	movs	r3, #0
 800262e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002630:	2305      	movs	r3, #5
 8002632:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002638:	4619      	mov	r1, r3
 800263a:	480c      	ldr	r0, [pc, #48]	; (800266c <MX_GPIO_Init+0x434>)
 800263c:	f003 f9d2 	bl	80059e4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002640:	2200      	movs	r2, #0
 8002642:	2105      	movs	r1, #5
 8002644:	2028      	movs	r0, #40	; 0x28
 8002646:	f002 f97d 	bl	8004944 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800264a:	2028      	movs	r0, #40	; 0x28
 800264c:	f002 f996 	bl	800497c <HAL_NVIC_EnableIRQ>

}
 8002650:	bf00      	nop
 8002652:	3740      	adds	r7, #64	; 0x40
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40022000 	.word	0x40022000
 800265c:	40021c00 	.word	0x40021c00
 8002660:	40021800 	.word	0x40021800
 8002664:	40020800 	.word	0x40020800
 8002668:	40020000 	.word	0x40020000
 800266c:	40020400 	.word	0x40020400

08002670 <Error>:

/* USER CODE BEGIN 4 */

void Error(char* msg)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
	printf(msg);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f010 fa73 	bl	8012b64 <iprintf>
	printf("\n");
 800267e:	200a      	movs	r0, #10
 8002680:	f010 fa88 	bl	8012b94 <putchar>
	Error_Handler();
 8002684:	f000 f816 	bl	80026b4 <Error_Handler>
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80026a2:	f001 fda7 	bl	80041f4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40001000 	.word	0x40001000

080026b4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	while (1)
	{
		LED_Toggle();
 80026b8:	f001 f9c6 	bl	8003a48 <LED_Toggle>
		HAL_Delay(100);
 80026bc:	2064      	movs	r0, #100	; 0x64
 80026be:	f001 fdb9 	bl	8004234 <HAL_Delay>
		LED_Toggle();
 80026c2:	e7f9      	b.n	80026b8 <Error_Handler+0x4>

080026c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80026ca:	4b11      	ldr	r3, [pc, #68]	; (8002710 <HAL_MspInit+0x4c>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	4a10      	ldr	r2, [pc, #64]	; (8002710 <HAL_MspInit+0x4c>)
 80026d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d4:	6413      	str	r3, [r2, #64]	; 0x40
 80026d6:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <HAL_MspInit+0x4c>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_MspInit+0x4c>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <HAL_MspInit+0x4c>)
 80026e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ec:	6453      	str	r3, [r2, #68]	; 0x44
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <HAL_MspInit+0x4c>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	210f      	movs	r1, #15
 80026fe:	f06f 0001 	mvn.w	r0, #1
 8002702:	f002 f91f 	bl	8004944 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800

08002714 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08a      	sub	sp, #40	; 0x28
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271c:	f107 0314 	add.w	r3, r7, #20
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a21      	ldr	r2, [pc, #132]	; (80027b8 <HAL_ADC_MspInit+0xa4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d13c      	bne.n	80027b0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002736:	4b21      	ldr	r3, [pc, #132]	; (80027bc <HAL_ADC_MspInit+0xa8>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	4a20      	ldr	r2, [pc, #128]	; (80027bc <HAL_ADC_MspInit+0xa8>)
 800273c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002740:	6453      	str	r3, [r2, #68]	; 0x44
 8002742:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <HAL_ADC_MspInit+0xa8>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800274e:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <HAL_ADC_MspInit+0xa8>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	4a1a      	ldr	r2, [pc, #104]	; (80027bc <HAL_ADC_MspInit+0xa8>)
 8002754:	f043 0320 	orr.w	r3, r3, #32
 8002758:	6313      	str	r3, [r2, #48]	; 0x30
 800275a:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_ADC_MspInit+0xa8>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002766:	4b15      	ldr	r3, [pc, #84]	; (80027bc <HAL_ADC_MspInit+0xa8>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a14      	ldr	r2, [pc, #80]	; (80027bc <HAL_ADC_MspInit+0xa8>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_ADC_MspInit+0xa8>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800277e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002782:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002784:	2303      	movs	r3, #3
 8002786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	4619      	mov	r1, r3
 8002792:	480b      	ldr	r0, [pc, #44]	; (80027c0 <HAL_ADC_MspInit+0xac>)
 8002794:	f003 f926 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002798:	2301      	movs	r3, #1
 800279a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800279c:	2303      	movs	r3, #3
 800279e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4619      	mov	r1, r3
 80027aa:	4806      	ldr	r0, [pc, #24]	; (80027c4 <HAL_ADC_MspInit+0xb0>)
 80027ac:	f003 f91a 	bl	80059e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80027b0:	bf00      	nop
 80027b2:	3728      	adds	r7, #40	; 0x28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40012200 	.word	0x40012200
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40021400 	.word	0x40021400
 80027c4:	40020000 	.word	0x40020000

080027c8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <HAL_CRC_MspInit+0x38>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d10b      	bne.n	80027f2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <HAL_CRC_MspInit+0x3c>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a09      	ldr	r2, [pc, #36]	; (8002804 <HAL_CRC_MspInit+0x3c>)
 80027e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <HAL_CRC_MspInit+0x3c>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40023000 	.word	0x40023000
 8002804:	40023800 	.word	0x40023800

08002808 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08e      	sub	sp, #56	; 0x38
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a6c      	ldr	r2, [pc, #432]	; (80029d8 <HAL_DCMI_MspInit+0x1d0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	f040 80d2 	bne.w	80029d0 <HAL_DCMI_MspInit+0x1c8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800282c:	4b6b      	ldr	r3, [pc, #428]	; (80029dc <HAL_DCMI_MspInit+0x1d4>)
 800282e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002830:	4a6a      	ldr	r2, [pc, #424]	; (80029dc <HAL_DCMI_MspInit+0x1d4>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6353      	str	r3, [r2, #52]	; 0x34
 8002838:	4b68      	ldr	r3, [pc, #416]	; (80029dc <HAL_DCMI_MspInit+0x1d4>)
 800283a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	623b      	str	r3, [r7, #32]
 8002842:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002844:	4b65      	ldr	r3, [pc, #404]	; (80029dc <HAL_DCMI_MspInit+0x1d4>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	4a64      	ldr	r2, [pc, #400]	; (80029dc <HAL_DCMI_MspInit+0x1d4>)
 800284a:	f043 0310 	orr.w	r3, r3, #16
 800284e:	6313      	str	r3, [r2, #48]	; 0x30
 8002850:	4b62      	ldr	r3, [pc, #392]	; (80029dc <HAL_DCMI_MspInit+0x1d4>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800285c:	4b5f      	ldr	r3, [pc, #380]	; (80029dc <HAL_DCMI_MspInit+0x1d4>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	4a5e      	ldr	r2, [pc, #376]	; (80029dc <HAL_DCMI_MspInit+0x1d4>)
 8002862:	f043 0308 	orr.w	r3, r3, #8
 8002866:	6313      	str	r3, [r2, #48]	; 0x30
 8002868:	4b5c      	ldr	r3, [pc, #368]	; (80029dc <HAL_DCMI_MspInit+0x1d4>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002874:	4b59      	ldr	r3, [pc, #356]	; (80029dc <HAL_DCMI_MspInit+0x1d4>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	4a58      	ldr	r2, [pc, #352]	; (80029dc <HAL_DCMI_MspInit+0x1d4>)
 800287a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800287e:	6313      	str	r3, [r2, #48]	; 0x30
 8002880:	4b56      	ldr	r3, [pc, #344]	; (80029dc <HAL_DCMI_MspInit+0x1d4>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800288c:	4b53      	ldr	r3, [pc, #332]	; (80029dc <HAL_DCMI_MspInit+0x1d4>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	4a52      	ldr	r2, [pc, #328]	; (80029dc <HAL_DCMI_MspInit+0x1d4>)
 8002892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002896:	6313      	str	r3, [r2, #48]	; 0x30
 8002898:	4b50      	ldr	r3, [pc, #320]	; (80029dc <HAL_DCMI_MspInit+0x1d4>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a4:	4b4d      	ldr	r3, [pc, #308]	; (80029dc <HAL_DCMI_MspInit+0x1d4>)
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	4a4c      	ldr	r2, [pc, #304]	; (80029dc <HAL_DCMI_MspInit+0x1d4>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6313      	str	r3, [r2, #48]	; 0x30
 80028b0:	4b4a      	ldr	r3, [pc, #296]	; (80029dc <HAL_DCMI_MspInit+0x1d4>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80028bc:	2360      	movs	r3, #96	; 0x60
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c8:	2300      	movs	r3, #0
 80028ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028cc:	230d      	movs	r3, #13
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d4:	4619      	mov	r1, r3
 80028d6:	4842      	ldr	r0, [pc, #264]	; (80029e0 <HAL_DCMI_MspInit+0x1d8>)
 80028d8:	f003 f884 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80028dc:	2308      	movs	r3, #8
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e0:	2302      	movs	r3, #2
 80028e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e8:	2300      	movs	r3, #0
 80028ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028ec:	230d      	movs	r3, #13
 80028ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80028f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f4:	4619      	mov	r1, r3
 80028f6:	483b      	ldr	r0, [pc, #236]	; (80029e4 <HAL_DCMI_MspInit+0x1dc>)
 80028f8:	f003 f874 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80028fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	2300      	movs	r3, #0
 800290c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800290e:	230d      	movs	r3, #13
 8002910:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002916:	4619      	mov	r1, r3
 8002918:	4833      	ldr	r0, [pc, #204]	; (80029e8 <HAL_DCMI_MspInit+0x1e0>)
 800291a:	f003 f863 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800291e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292c:	2300      	movs	r3, #0
 800292e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002930:	230d      	movs	r3, #13
 8002932:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002938:	4619      	mov	r1, r3
 800293a:	482c      	ldr	r0, [pc, #176]	; (80029ec <HAL_DCMI_MspInit+0x1e4>)
 800293c:	f003 f852 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002940:	2350      	movs	r3, #80	; 0x50
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294c:	2300      	movs	r3, #0
 800294e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002950:	230d      	movs	r3, #13
 8002952:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002958:	4619      	mov	r1, r3
 800295a:	4825      	ldr	r0, [pc, #148]	; (80029f0 <HAL_DCMI_MspInit+0x1e8>)
 800295c:	f003 f842 	bl	80059e4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002960:	4b24      	ldr	r3, [pc, #144]	; (80029f4 <HAL_DCMI_MspInit+0x1ec>)
 8002962:	4a25      	ldr	r2, [pc, #148]	; (80029f8 <HAL_DCMI_MspInit+0x1f0>)
 8002964:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8002966:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <HAL_DCMI_MspInit+0x1ec>)
 8002968:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800296c:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800296e:	4b21      	ldr	r3, [pc, #132]	; (80029f4 <HAL_DCMI_MspInit+0x1ec>)
 8002970:	2200      	movs	r2, #0
 8002972:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002974:	4b1f      	ldr	r3, [pc, #124]	; (80029f4 <HAL_DCMI_MspInit+0x1ec>)
 8002976:	2200      	movs	r2, #0
 8002978:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800297a:	4b1e      	ldr	r3, [pc, #120]	; (80029f4 <HAL_DCMI_MspInit+0x1ec>)
 800297c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002980:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002982:	4b1c      	ldr	r3, [pc, #112]	; (80029f4 <HAL_DCMI_MspInit+0x1ec>)
 8002984:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002988:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800298a:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <HAL_DCMI_MspInit+0x1ec>)
 800298c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002990:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8002992:	4b18      	ldr	r3, [pc, #96]	; (80029f4 <HAL_DCMI_MspInit+0x1ec>)
 8002994:	2200      	movs	r2, #0
 8002996:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8002998:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <HAL_DCMI_MspInit+0x1ec>)
 800299a:	2200      	movs	r2, #0
 800299c:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800299e:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <HAL_DCMI_MspInit+0x1ec>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80029a4:	4813      	ldr	r0, [pc, #76]	; (80029f4 <HAL_DCMI_MspInit+0x1ec>)
 80029a6:	f002 fab5 	bl	8004f14 <HAL_DMA_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_DCMI_MspInit+0x1ac>
    {
      Error_Handler();
 80029b0:	f7ff fe80 	bl	80026b4 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a0f      	ldr	r2, [pc, #60]	; (80029f4 <HAL_DCMI_MspInit+0x1ec>)
 80029b8:	649a      	str	r2, [r3, #72]	; 0x48
 80029ba:	4a0e      	ldr	r2, [pc, #56]	; (80029f4 <HAL_DCMI_MspInit+0x1ec>)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 80029c0:	2200      	movs	r2, #0
 80029c2:	2105      	movs	r1, #5
 80029c4:	204e      	movs	r0, #78	; 0x4e
 80029c6:	f001 ffbd 	bl	8004944 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80029ca:	204e      	movs	r0, #78	; 0x4e
 80029cc:	f001 ffd6 	bl	800497c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80029d0:	bf00      	nop
 80029d2:	3738      	adds	r7, #56	; 0x38
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	50050000 	.word	0x50050000
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40020c00 	.word	0x40020c00
 80029e8:	40021800 	.word	0x40021800
 80029ec:	40021c00 	.word	0x40021c00
 80029f0:	40020000 	.word	0x40020000
 80029f4:	20000624 	.word	0x20000624
 80029f8:	40026428 	.word	0x40026428

080029fc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a0d      	ldr	r2, [pc, #52]	; (8002a40 <HAL_DMA2D_MspInit+0x44>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d113      	bne.n	8002a36 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <HAL_DMA2D_MspInit+0x48>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	4a0c      	ldr	r2, [pc, #48]	; (8002a44 <HAL_DMA2D_MspInit+0x48>)
 8002a14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a18:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <HAL_DMA2D_MspInit+0x48>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2105      	movs	r1, #5
 8002a2a:	205a      	movs	r0, #90	; 0x5a
 8002a2c:	f001 ff8a 	bl	8004944 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002a30:	205a      	movs	r0, #90	; 0x5a
 8002a32:	f001 ffa3 	bl	800497c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	4002b000 	.word	0x4002b000
 8002a44:	40023800 	.word	0x40023800

08002a48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08c      	sub	sp, #48	; 0x30
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a50:	f107 031c 	add.w	r3, r7, #28
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a2f      	ldr	r2, [pc, #188]	; (8002b24 <HAL_I2C_MspInit+0xdc>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d129      	bne.n	8002abe <HAL_I2C_MspInit+0x76>
	//    gpio_init_structure.Speed = GPIO_SPEED_FAST;


  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6a:	4b2f      	ldr	r3, [pc, #188]	; (8002b28 <HAL_I2C_MspInit+0xe0>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	4a2e      	ldr	r2, [pc, #184]	; (8002b28 <HAL_I2C_MspInit+0xe0>)
 8002a70:	f043 0302 	orr.w	r3, r3, #2
 8002a74:	6313      	str	r3, [r2, #48]	; 0x30
 8002a76:	4b2c      	ldr	r3, [pc, #176]	; (8002b28 <HAL_I2C_MspInit+0xe0>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	61bb      	str	r3, [r7, #24]
 8002a80:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002a82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a88:	2312      	movs	r3, #18
 8002a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a94:	2304      	movs	r3, #4
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a98:	f107 031c 	add.w	r3, r7, #28
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4823      	ldr	r0, [pc, #140]	; (8002b2c <HAL_I2C_MspInit+0xe4>)
 8002aa0:	f002 ffa0 	bl	80059e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aa4:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <HAL_I2C_MspInit+0xe0>)
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	4a1f      	ldr	r2, [pc, #124]	; (8002b28 <HAL_I2C_MspInit+0xe0>)
 8002aaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002aae:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <HAL_I2C_MspInit+0xe0>)
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002abc:	e02d      	b.n	8002b1a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a1b      	ldr	r2, [pc, #108]	; (8002b30 <HAL_I2C_MspInit+0xe8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d128      	bne.n	8002b1a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ac8:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <HAL_I2C_MspInit+0xe0>)
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	4a16      	ldr	r2, [pc, #88]	; (8002b28 <HAL_I2C_MspInit+0xe0>)
 8002ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad4:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <HAL_I2C_MspInit+0xe0>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002ae0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ae6:	2312      	movs	r3, #18
 8002ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aea:	2301      	movs	r3, #1
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aee:	2303      	movs	r3, #3
 8002af0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002af2:	2304      	movs	r3, #4
 8002af4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002af6:	f107 031c 	add.w	r3, r7, #28
 8002afa:	4619      	mov	r1, r3
 8002afc:	480d      	ldr	r0, [pc, #52]	; (8002b34 <HAL_I2C_MspInit+0xec>)
 8002afe:	f002 ff71 	bl	80059e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <HAL_I2C_MspInit+0xe0>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	4a08      	ldr	r2, [pc, #32]	; (8002b28 <HAL_I2C_MspInit+0xe0>)
 8002b08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0e:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_I2C_MspInit+0xe0>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
}
 8002b1a:	bf00      	nop
 8002b1c:	3730      	adds	r7, #48	; 0x30
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40005400 	.word	0x40005400
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40020400 	.word	0x40020400
 8002b30:	40005c00 	.word	0x40005c00
 8002b34:	40021c00 	.word	0x40021c00

08002b38 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <HAL_I2C_MspDeInit+0x64>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d110      	bne.n	8002b6c <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002b4a:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <HAL_I2C_MspDeInit+0x68>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <HAL_I2C_MspDeInit+0x68>)
 8002b50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b54:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8002b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b5a:	4812      	ldr	r0, [pc, #72]	; (8002ba4 <HAL_I2C_MspDeInit+0x6c>)
 8002b5c:	f003 f8ee 	bl	8005d3c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b64:	480f      	ldr	r0, [pc, #60]	; (8002ba4 <HAL_I2C_MspDeInit+0x6c>)
 8002b66:	f003 f8e9 	bl	8005d3c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002b6a:	e013      	b.n	8002b94 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a0d      	ldr	r2, [pc, #52]	; (8002ba8 <HAL_I2C_MspDeInit+0x70>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d10e      	bne.n	8002b94 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002b76:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <HAL_I2C_MspDeInit+0x68>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <HAL_I2C_MspDeInit+0x68>)
 8002b7c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b80:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002b82:	2180      	movs	r1, #128	; 0x80
 8002b84:	4809      	ldr	r0, [pc, #36]	; (8002bac <HAL_I2C_MspDeInit+0x74>)
 8002b86:	f003 f8d9 	bl	8005d3c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8002b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b8e:	4807      	ldr	r0, [pc, #28]	; (8002bac <HAL_I2C_MspDeInit+0x74>)
 8002b90:	f003 f8d4 	bl	8005d3c <HAL_GPIO_DeInit>
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40005400 	.word	0x40005400
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40020400 	.word	0x40020400
 8002ba8:	40005c00 	.word	0x40005c00
 8002bac:	40021c00 	.word	0x40021c00

08002bb0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08e      	sub	sp, #56	; 0x38
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a51      	ldr	r2, [pc, #324]	; (8002d14 <HAL_LTDC_MspInit+0x164>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	f040 809b 	bne.w	8002d0a <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002bd4:	4b50      	ldr	r3, [pc, #320]	; (8002d18 <HAL_LTDC_MspInit+0x168>)
 8002bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd8:	4a4f      	ldr	r2, [pc, #316]	; (8002d18 <HAL_LTDC_MspInit+0x168>)
 8002bda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bde:	6453      	str	r3, [r2, #68]	; 0x44
 8002be0:	4b4d      	ldr	r3, [pc, #308]	; (8002d18 <HAL_LTDC_MspInit+0x168>)
 8002be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002be8:	623b      	str	r3, [r7, #32]
 8002bea:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bec:	4b4a      	ldr	r3, [pc, #296]	; (8002d18 <HAL_LTDC_MspInit+0x168>)
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf0:	4a49      	ldr	r2, [pc, #292]	; (8002d18 <HAL_LTDC_MspInit+0x168>)
 8002bf2:	f043 0310 	orr.w	r3, r3, #16
 8002bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf8:	4b47      	ldr	r3, [pc, #284]	; (8002d18 <HAL_LTDC_MspInit+0x168>)
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002c04:	4b44      	ldr	r3, [pc, #272]	; (8002d18 <HAL_LTDC_MspInit+0x168>)
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	4a43      	ldr	r2, [pc, #268]	; (8002d18 <HAL_LTDC_MspInit+0x168>)
 8002c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c10:	4b41      	ldr	r3, [pc, #260]	; (8002d18 <HAL_LTDC_MspInit+0x168>)
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002c1c:	4b3e      	ldr	r3, [pc, #248]	; (8002d18 <HAL_LTDC_MspInit+0x168>)
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	4a3d      	ldr	r2, [pc, #244]	; (8002d18 <HAL_LTDC_MspInit+0x168>)
 8002c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c26:	6313      	str	r3, [r2, #48]	; 0x30
 8002c28:	4b3b      	ldr	r3, [pc, #236]	; (8002d18 <HAL_LTDC_MspInit+0x168>)
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c34:	4b38      	ldr	r3, [pc, #224]	; (8002d18 <HAL_LTDC_MspInit+0x168>)
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	4a37      	ldr	r2, [pc, #220]	; (8002d18 <HAL_LTDC_MspInit+0x168>)
 8002c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c40:	4b35      	ldr	r3, [pc, #212]	; (8002d18 <HAL_LTDC_MspInit+0x168>)
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002c4c:	4b32      	ldr	r3, [pc, #200]	; (8002d18 <HAL_LTDC_MspInit+0x168>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	4a31      	ldr	r2, [pc, #196]	; (8002d18 <HAL_LTDC_MspInit+0x168>)
 8002c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c56:	6313      	str	r3, [r2, #48]	; 0x30
 8002c58:	4b2f      	ldr	r3, [pc, #188]	; (8002d18 <HAL_LTDC_MspInit+0x168>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002c64:	2310      	movs	r3, #16
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c70:	2300      	movs	r3, #0
 8002c72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c74:	230e      	movs	r3, #14
 8002c76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4827      	ldr	r0, [pc, #156]	; (8002d1c <HAL_LTDC_MspInit+0x16c>)
 8002c80:	f002 feb0 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002c84:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c92:	2300      	movs	r3, #0
 8002c94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c96:	230e      	movs	r3, #14
 8002c98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	481f      	ldr	r0, [pc, #124]	; (8002d20 <HAL_LTDC_MspInit+0x170>)
 8002ca2:	f002 fe9f 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002ca6:	23f7      	movs	r3, #247	; 0xf7
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002caa:	2302      	movs	r3, #2
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002cb6:	230e      	movs	r3, #14
 8002cb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4818      	ldr	r0, [pc, #96]	; (8002d24 <HAL_LTDC_MspInit+0x174>)
 8002cc2:	f002 fe8f 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002cd8:	2309      	movs	r3, #9
 8002cda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4811      	ldr	r0, [pc, #68]	; (8002d28 <HAL_LTDC_MspInit+0x178>)
 8002ce4:	f002 fe7e 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002ce8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002cfa:	230e      	movs	r3, #14
 8002cfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d02:	4619      	mov	r1, r3
 8002d04:	4809      	ldr	r0, [pc, #36]	; (8002d2c <HAL_LTDC_MspInit+0x17c>)
 8002d06:	f002 fe6d 	bl	80059e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002d0a:	bf00      	nop
 8002d0c:	3738      	adds	r7, #56	; 0x38
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40016800 	.word	0x40016800
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40022400 	.word	0x40022400
 8002d24:	40022800 	.word	0x40022800
 8002d28:	40021800 	.word	0x40021800
 8002d2c:	40022000 	.word	0x40022000

08002d30 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08c      	sub	sp, #48	; 0x30
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d38:	f107 031c 	add.w	r3, r7, #28
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a3f      	ldr	r2, [pc, #252]	; (8002e4c <HAL_QSPI_MspInit+0x11c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d178      	bne.n	8002e44 <HAL_QSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002d52:	4b3f      	ldr	r3, [pc, #252]	; (8002e50 <HAL_QSPI_MspInit+0x120>)
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	4a3e      	ldr	r2, [pc, #248]	; (8002e50 <HAL_QSPI_MspInit+0x120>)
 8002d58:	f043 0302 	orr.w	r3, r3, #2
 8002d5c:	6393      	str	r3, [r2, #56]	; 0x38
 8002d5e:	4b3c      	ldr	r3, [pc, #240]	; (8002e50 <HAL_QSPI_MspInit+0x120>)
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d6a:	4b39      	ldr	r3, [pc, #228]	; (8002e50 <HAL_QSPI_MspInit+0x120>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	4a38      	ldr	r2, [pc, #224]	; (8002e50 <HAL_QSPI_MspInit+0x120>)
 8002d70:	f043 0310 	orr.w	r3, r3, #16
 8002d74:	6313      	str	r3, [r2, #48]	; 0x30
 8002d76:	4b36      	ldr	r3, [pc, #216]	; (8002e50 <HAL_QSPI_MspInit+0x120>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f003 0310 	and.w	r3, r3, #16
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d82:	4b33      	ldr	r3, [pc, #204]	; (8002e50 <HAL_QSPI_MspInit+0x120>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4a32      	ldr	r2, [pc, #200]	; (8002e50 <HAL_QSPI_MspInit+0x120>)
 8002d88:	f043 0302 	orr.w	r3, r3, #2
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4b30      	ldr	r3, [pc, #192]	; (8002e50 <HAL_QSPI_MspInit+0x120>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d9a:	4b2d      	ldr	r3, [pc, #180]	; (8002e50 <HAL_QSPI_MspInit+0x120>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	4a2c      	ldr	r2, [pc, #176]	; (8002e50 <HAL_QSPI_MspInit+0x120>)
 8002da0:	f043 0308 	orr.w	r3, r3, #8
 8002da4:	6313      	str	r3, [r2, #48]	; 0x30
 8002da6:	4b2a      	ldr	r3, [pc, #168]	; (8002e50 <HAL_QSPI_MspInit+0x120>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002db2:	2304      	movs	r3, #4
 8002db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	2302      	movs	r3, #2
 8002db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002dc2:	2309      	movs	r3, #9
 8002dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002dc6:	f107 031c 	add.w	r3, r7, #28
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4821      	ldr	r0, [pc, #132]	; (8002e54 <HAL_QSPI_MspInit+0x124>)
 8002dce:	f002 fe09 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002dd2:	2340      	movs	r3, #64	; 0x40
 8002dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dde:	2303      	movs	r3, #3
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002de2:	230a      	movs	r3, #10
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002de6:	f107 031c 	add.w	r3, r7, #28
 8002dea:	4619      	mov	r1, r3
 8002dec:	481a      	ldr	r0, [pc, #104]	; (8002e58 <HAL_QSPI_MspInit+0x128>)
 8002dee:	f002 fdf9 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002df2:	2304      	movs	r3, #4
 8002df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df6:	2302      	movs	r3, #2
 8002df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e02:	2309      	movs	r3, #9
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e06:	f107 031c 	add.w	r3, r7, #28
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4812      	ldr	r0, [pc, #72]	; (8002e58 <HAL_QSPI_MspInit+0x128>)
 8002e0e:	f002 fde9 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002e12:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e20:	2303      	movs	r3, #3
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e24:	2309      	movs	r3, #9
 8002e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e28:	f107 031c 	add.w	r3, r7, #28
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	480b      	ldr	r0, [pc, #44]	; (8002e5c <HAL_QSPI_MspInit+0x12c>)
 8002e30:	f002 fdd8 	bl	80059e4 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8002e34:	2200      	movs	r2, #0
 8002e36:	2105      	movs	r1, #5
 8002e38:	205c      	movs	r0, #92	; 0x5c
 8002e3a:	f001 fd83 	bl	8004944 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002e3e:	205c      	movs	r0, #92	; 0x5c
 8002e40:	f001 fd9c 	bl	800497c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002e44:	bf00      	nop
 8002e46:	3730      	adds	r7, #48	; 0x30
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	a0001000 	.word	0xa0001000
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40020400 	.word	0x40020400
 8002e5c:	40020c00 	.word	0x40020c00

08002e60 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a07      	ldr	r2, [pc, #28]	; (8002e8c <HAL_RTC_MspInit+0x2c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d105      	bne.n	8002e7e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <HAL_RTC_MspInit+0x30>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a06      	ldr	r2, [pc, #24]	; (8002e90 <HAL_RTC_MspInit+0x30>)
 8002e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40002800 	.word	0x40002800
 8002e90:	40023800 	.word	0x40023800

08002e94 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08a      	sub	sp, #40	; 0x28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9c:	f107 0314 	add.w	r3, r7, #20
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	60da      	str	r2, [r3, #12]
 8002eaa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a25      	ldr	r2, [pc, #148]	; (8002f48 <HAL_SD_MspInit+0xb4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d144      	bne.n	8002f40 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002eb6:	4b25      	ldr	r3, [pc, #148]	; (8002f4c <HAL_SD_MspInit+0xb8>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	4a24      	ldr	r2, [pc, #144]	; (8002f4c <HAL_SD_MspInit+0xb8>)
 8002ebc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec2:	4b22      	ldr	r3, [pc, #136]	; (8002f4c <HAL_SD_MspInit+0xb8>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ece:	4b1f      	ldr	r3, [pc, #124]	; (8002f4c <HAL_SD_MspInit+0xb8>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a1e      	ldr	r2, [pc, #120]	; (8002f4c <HAL_SD_MspInit+0xb8>)
 8002ed4:	f043 0304 	orr.w	r3, r3, #4
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b1c      	ldr	r3, [pc, #112]	; (8002f4c <HAL_SD_MspInit+0xb8>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ee6:	4b19      	ldr	r3, [pc, #100]	; (8002f4c <HAL_SD_MspInit+0xb8>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	4a18      	ldr	r2, [pc, #96]	; (8002f4c <HAL_SD_MspInit+0xb8>)
 8002eec:	f043 0308 	orr.w	r3, r3, #8
 8002ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef2:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <HAL_SD_MspInit+0xb8>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002efe:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002f02:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f04:	2302      	movs	r3, #2
 8002f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002f10:	230c      	movs	r3, #12
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f14:	f107 0314 	add.w	r3, r7, #20
 8002f18:	4619      	mov	r1, r3
 8002f1a:	480d      	ldr	r0, [pc, #52]	; (8002f50 <HAL_SD_MspInit+0xbc>)
 8002f1c:	f002 fd62 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002f20:	2304      	movs	r3, #4
 8002f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f24:	2302      	movs	r3, #2
 8002f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002f30:	230c      	movs	r3, #12
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002f34:	f107 0314 	add.w	r3, r7, #20
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4806      	ldr	r0, [pc, #24]	; (8002f54 <HAL_SD_MspInit+0xc0>)
 8002f3c:	f002 fd52 	bl	80059e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002f40:	bf00      	nop
 8002f42:	3728      	adds	r7, #40	; 0x28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40012c00 	.word	0x40012c00
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40020800 	.word	0x40020800
 8002f54:	40020c00 	.word	0x40020c00

08002f58 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08a      	sub	sp, #40	; 0x28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f60:	f107 0314 	add.w	r3, r7, #20
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	60da      	str	r2, [r3, #12]
 8002f6e:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002f78:	d127      	bne.n	8002fca <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002f7a:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	4a15      	ldr	r2, [pc, #84]	; (8002fd4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	6413      	str	r3, [r2, #64]	; 0x40
 8002f86:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	4a0f      	ldr	r2, [pc, #60]	; (8002fd4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002f98:	f043 0308 	orr.w	r3, r3, #8
 8002f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002faa:	2380      	movs	r3, #128	; 0x80
 8002fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002fba:	2308      	movs	r3, #8
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4804      	ldr	r0, [pc, #16]	; (8002fd8 <HAL_SPDIFRX_MspInit+0x80>)
 8002fc6:	f002 fd0d 	bl	80059e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002fca:	bf00      	nop
 8002fcc:	3728      	adds	r7, #40	; 0x28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40020c00 	.word	0x40020c00

08002fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b089      	sub	sp, #36	; 0x24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a2e      	ldr	r2, [pc, #184]	; (80030a4 <HAL_TIM_Base_MspInit+0xc8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d10c      	bne.n	8003008 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fee:	4b2e      	ldr	r3, [pc, #184]	; (80030a8 <HAL_TIM_Base_MspInit+0xcc>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	4a2d      	ldr	r2, [pc, #180]	; (80030a8 <HAL_TIM_Base_MspInit+0xcc>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffa:	4b2b      	ldr	r3, [pc, #172]	; (80030a8 <HAL_TIM_Base_MspInit+0xcc>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	61fb      	str	r3, [r7, #28]
 8003004:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003006:	e046      	b.n	8003096 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003010:	d10c      	bne.n	800302c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003012:	4b25      	ldr	r3, [pc, #148]	; (80030a8 <HAL_TIM_Base_MspInit+0xcc>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	4a24      	ldr	r2, [pc, #144]	; (80030a8 <HAL_TIM_Base_MspInit+0xcc>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	6413      	str	r3, [r2, #64]	; 0x40
 800301e:	4b22      	ldr	r3, [pc, #136]	; (80030a8 <HAL_TIM_Base_MspInit+0xcc>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	61bb      	str	r3, [r7, #24]
 8003028:	69bb      	ldr	r3, [r7, #24]
}
 800302a:	e034      	b.n	8003096 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1e      	ldr	r2, [pc, #120]	; (80030ac <HAL_TIM_Base_MspInit+0xd0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10c      	bne.n	8003050 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003036:	4b1c      	ldr	r3, [pc, #112]	; (80030a8 <HAL_TIM_Base_MspInit+0xcc>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	4a1b      	ldr	r2, [pc, #108]	; (80030a8 <HAL_TIM_Base_MspInit+0xcc>)
 800303c:	f043 0302 	orr.w	r3, r3, #2
 8003040:	6413      	str	r3, [r2, #64]	; 0x40
 8003042:	4b19      	ldr	r3, [pc, #100]	; (80030a8 <HAL_TIM_Base_MspInit+0xcc>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	697b      	ldr	r3, [r7, #20]
}
 800304e:	e022      	b.n	8003096 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a16      	ldr	r2, [pc, #88]	; (80030b0 <HAL_TIM_Base_MspInit+0xd4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d10c      	bne.n	8003074 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800305a:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <HAL_TIM_Base_MspInit+0xcc>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	4a12      	ldr	r2, [pc, #72]	; (80030a8 <HAL_TIM_Base_MspInit+0xcc>)
 8003060:	f043 0308 	orr.w	r3, r3, #8
 8003064:	6413      	str	r3, [r2, #64]	; 0x40
 8003066:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <HAL_TIM_Base_MspInit+0xcc>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]
}
 8003072:	e010      	b.n	8003096 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0e      	ldr	r2, [pc, #56]	; (80030b4 <HAL_TIM_Base_MspInit+0xd8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d10b      	bne.n	8003096 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800307e:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <HAL_TIM_Base_MspInit+0xcc>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	4a09      	ldr	r2, [pc, #36]	; (80030a8 <HAL_TIM_Base_MspInit+0xcc>)
 8003084:	f043 0302 	orr.w	r3, r3, #2
 8003088:	6453      	str	r3, [r2, #68]	; 0x44
 800308a:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <HAL_TIM_Base_MspInit+0xcc>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
}
 8003096:	bf00      	nop
 8003098:	3724      	adds	r7, #36	; 0x24
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40010000 	.word	0x40010000
 80030a8:	40023800 	.word	0x40023800
 80030ac:	40000400 	.word	0x40000400
 80030b0:	40000c00 	.word	0x40000c00
 80030b4:	40010400 	.word	0x40010400

080030b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <HAL_TIM_PWM_MspInit+0x38>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d10b      	bne.n	80030e2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80030ca:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80030d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030d4:	6413      	str	r3, [r2, #64]	; 0x40
 80030d6:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80030e2:	bf00      	nop
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	40001800 	.word	0x40001800
 80030f4:	40023800 	.word	0x40023800

080030f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08c      	sub	sp, #48	; 0x30
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003100:	f107 031c 	add.w	r3, r7, #28
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	60da      	str	r2, [r3, #12]
 800310e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a56      	ldr	r2, [pc, #344]	; (8003270 <HAL_TIM_MspPostInit+0x178>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d11d      	bne.n	8003156 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800311a:	4b56      	ldr	r3, [pc, #344]	; (8003274 <HAL_TIM_MspPostInit+0x17c>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	4a55      	ldr	r2, [pc, #340]	; (8003274 <HAL_TIM_MspPostInit+0x17c>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	6313      	str	r3, [r2, #48]	; 0x30
 8003126:	4b53      	ldr	r3, [pc, #332]	; (8003274 <HAL_TIM_MspPostInit+0x17c>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	61bb      	str	r3, [r7, #24]
 8003130:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003132:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003138:	2302      	movs	r3, #2
 800313a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	2300      	movs	r3, #0
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003140:	2300      	movs	r3, #0
 8003142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003144:	2301      	movs	r3, #1
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003148:	f107 031c 	add.w	r3, r7, #28
 800314c:	4619      	mov	r1, r3
 800314e:	484a      	ldr	r0, [pc, #296]	; (8003278 <HAL_TIM_MspPostInit+0x180>)
 8003150:	f002 fc48 	bl	80059e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003154:	e087      	b.n	8003266 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315e:	d11d      	bne.n	800319c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003160:	4b44      	ldr	r3, [pc, #272]	; (8003274 <HAL_TIM_MspPostInit+0x17c>)
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	4a43      	ldr	r2, [pc, #268]	; (8003274 <HAL_TIM_MspPostInit+0x17c>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	6313      	str	r3, [r2, #48]	; 0x30
 800316c:	4b41      	ldr	r3, [pc, #260]	; (8003274 <HAL_TIM_MspPostInit+0x17c>)
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003178:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800317c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317e:	2302      	movs	r3, #2
 8003180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003182:	2300      	movs	r3, #0
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003186:	2300      	movs	r3, #0
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800318a:	2301      	movs	r3, #1
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800318e:	f107 031c 	add.w	r3, r7, #28
 8003192:	4619      	mov	r1, r3
 8003194:	4838      	ldr	r0, [pc, #224]	; (8003278 <HAL_TIM_MspPostInit+0x180>)
 8003196:	f002 fc25 	bl	80059e4 <HAL_GPIO_Init>
}
 800319a:	e064      	b.n	8003266 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a36      	ldr	r2, [pc, #216]	; (800327c <HAL_TIM_MspPostInit+0x184>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d11c      	bne.n	80031e0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a6:	4b33      	ldr	r3, [pc, #204]	; (8003274 <HAL_TIM_MspPostInit+0x17c>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	4a32      	ldr	r2, [pc, #200]	; (8003274 <HAL_TIM_MspPostInit+0x17c>)
 80031ac:	f043 0302 	orr.w	r3, r3, #2
 80031b0:	6313      	str	r3, [r2, #48]	; 0x30
 80031b2:	4b30      	ldr	r3, [pc, #192]	; (8003274 <HAL_TIM_MspPostInit+0x17c>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80031be:	2310      	movs	r3, #16
 80031c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c2:	2302      	movs	r3, #2
 80031c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ca:	2300      	movs	r3, #0
 80031cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031ce:	2302      	movs	r3, #2
 80031d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80031d2:	f107 031c 	add.w	r3, r7, #28
 80031d6:	4619      	mov	r1, r3
 80031d8:	4829      	ldr	r0, [pc, #164]	; (8003280 <HAL_TIM_MspPostInit+0x188>)
 80031da:	f002 fc03 	bl	80059e4 <HAL_GPIO_Init>
}
 80031de:	e042      	b.n	8003266 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a27      	ldr	r2, [pc, #156]	; (8003284 <HAL_TIM_MspPostInit+0x18c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d11c      	bne.n	8003224 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80031ea:	4b22      	ldr	r3, [pc, #136]	; (8003274 <HAL_TIM_MspPostInit+0x17c>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	4a21      	ldr	r2, [pc, #132]	; (8003274 <HAL_TIM_MspPostInit+0x17c>)
 80031f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f4:	6313      	str	r3, [r2, #48]	; 0x30
 80031f6:	4b1f      	ldr	r3, [pc, #124]	; (8003274 <HAL_TIM_MspPostInit+0x17c>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003202:	2301      	movs	r3, #1
 8003204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003206:	2302      	movs	r3, #2
 8003208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320e:	2300      	movs	r3, #0
 8003210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003212:	2302      	movs	r3, #2
 8003214:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003216:	f107 031c 	add.w	r3, r7, #28
 800321a:	4619      	mov	r1, r3
 800321c:	481a      	ldr	r0, [pc, #104]	; (8003288 <HAL_TIM_MspPostInit+0x190>)
 800321e:	f002 fbe1 	bl	80059e4 <HAL_GPIO_Init>
}
 8003222:	e020      	b.n	8003266 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a18      	ldr	r2, [pc, #96]	; (800328c <HAL_TIM_MspPostInit+0x194>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d11b      	bne.n	8003266 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800322e:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_TIM_MspPostInit+0x17c>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a10      	ldr	r2, [pc, #64]	; (8003274 <HAL_TIM_MspPostInit+0x17c>)
 8003234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <HAL_TIM_MspPostInit+0x17c>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003246:	2340      	movs	r3, #64	; 0x40
 8003248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324a:	2302      	movs	r3, #2
 800324c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003252:	2300      	movs	r3, #0
 8003254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003256:	2309      	movs	r3, #9
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800325a:	f107 031c 	add.w	r3, r7, #28
 800325e:	4619      	mov	r1, r3
 8003260:	480b      	ldr	r0, [pc, #44]	; (8003290 <HAL_TIM_MspPostInit+0x198>)
 8003262:	f002 fbbf 	bl	80059e4 <HAL_GPIO_Init>
}
 8003266:	bf00      	nop
 8003268:	3730      	adds	r7, #48	; 0x30
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40010000 	.word	0x40010000
 8003274:	40023800 	.word	0x40023800
 8003278:	40020000 	.word	0x40020000
 800327c:	40000400 	.word	0x40000400
 8003280:	40020400 	.word	0x40020400
 8003284:	40000c00 	.word	0x40000c00
 8003288:	40022000 	.word	0x40022000
 800328c:	40001800 	.word	0x40001800
 8003290:	40021c00 	.word	0x40021c00

08003294 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08c      	sub	sp, #48	; 0x30
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329c:	f107 031c 	add.w	r3, r7, #28
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a3c      	ldr	r2, [pc, #240]	; (80033a4 <HAL_UART_MspInit+0x110>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d145      	bne.n	8003342 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032b6:	4b3c      	ldr	r3, [pc, #240]	; (80033a8 <HAL_UART_MspInit+0x114>)
 80032b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ba:	4a3b      	ldr	r2, [pc, #236]	; (80033a8 <HAL_UART_MspInit+0x114>)
 80032bc:	f043 0310 	orr.w	r3, r3, #16
 80032c0:	6453      	str	r3, [r2, #68]	; 0x44
 80032c2:	4b39      	ldr	r3, [pc, #228]	; (80033a8 <HAL_UART_MspInit+0x114>)
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ce:	4b36      	ldr	r3, [pc, #216]	; (80033a8 <HAL_UART_MspInit+0x114>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	4a35      	ldr	r2, [pc, #212]	; (80033a8 <HAL_UART_MspInit+0x114>)
 80032d4:	f043 0302 	orr.w	r3, r3, #2
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30
 80032da:	4b33      	ldr	r3, [pc, #204]	; (80033a8 <HAL_UART_MspInit+0x114>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e6:	4b30      	ldr	r3, [pc, #192]	; (80033a8 <HAL_UART_MspInit+0x114>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	4a2f      	ldr	r2, [pc, #188]	; (80033a8 <HAL_UART_MspInit+0x114>)
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	6313      	str	r3, [r2, #48]	; 0x30
 80032f2:	4b2d      	ldr	r3, [pc, #180]	; (80033a8 <HAL_UART_MspInit+0x114>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80032fe:	2380      	movs	r3, #128	; 0x80
 8003300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003302:	2302      	movs	r3, #2
 8003304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330a:	2300      	movs	r3, #0
 800330c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800330e:	2307      	movs	r3, #7
 8003310:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003312:	f107 031c 	add.w	r3, r7, #28
 8003316:	4619      	mov	r1, r3
 8003318:	4824      	ldr	r0, [pc, #144]	; (80033ac <HAL_UART_MspInit+0x118>)
 800331a:	f002 fb63 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800331e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003324:	2302      	movs	r3, #2
 8003326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332c:	2300      	movs	r3, #0
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003330:	2307      	movs	r3, #7
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003334:	f107 031c 	add.w	r3, r7, #28
 8003338:	4619      	mov	r1, r3
 800333a:	481d      	ldr	r0, [pc, #116]	; (80033b0 <HAL_UART_MspInit+0x11c>)
 800333c:	f002 fb52 	bl	80059e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003340:	e02c      	b.n	800339c <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1b      	ldr	r2, [pc, #108]	; (80033b4 <HAL_UART_MspInit+0x120>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d127      	bne.n	800339c <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 800334c:	4b16      	ldr	r3, [pc, #88]	; (80033a8 <HAL_UART_MspInit+0x114>)
 800334e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003350:	4a15      	ldr	r2, [pc, #84]	; (80033a8 <HAL_UART_MspInit+0x114>)
 8003352:	f043 0320 	orr.w	r3, r3, #32
 8003356:	6453      	str	r3, [r2, #68]	; 0x44
 8003358:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <HAL_UART_MspInit+0x114>)
 800335a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003364:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <HAL_UART_MspInit+0x114>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	4a0f      	ldr	r2, [pc, #60]	; (80033a8 <HAL_UART_MspInit+0x114>)
 800336a:	f043 0304 	orr.w	r3, r3, #4
 800336e:	6313      	str	r3, [r2, #48]	; 0x30
 8003370:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <HAL_UART_MspInit+0x114>)
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800337c:	23c0      	movs	r3, #192	; 0xc0
 800337e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003380:	2302      	movs	r3, #2
 8003382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003388:	2303      	movs	r3, #3
 800338a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800338c:	2308      	movs	r3, #8
 800338e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003390:	f107 031c 	add.w	r3, r7, #28
 8003394:	4619      	mov	r1, r3
 8003396:	4808      	ldr	r0, [pc, #32]	; (80033b8 <HAL_UART_MspInit+0x124>)
 8003398:	f002 fb24 	bl	80059e4 <HAL_GPIO_Init>
}
 800339c:	bf00      	nop
 800339e:	3730      	adds	r7, #48	; 0x30
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40011000 	.word	0x40011000
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40020400 	.word	0x40020400
 80033b0:	40020000 	.word	0x40020000
 80033b4:	40011400 	.word	0x40011400
 80033b8:	40020800 	.word	0x40020800

080033bc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80033c2:	1d3b      	adds	r3, r7, #4
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80033d0:	4b3d      	ldr	r3, [pc, #244]	; (80034c8 <HAL_FMC_MspInit+0x10c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d173      	bne.n	80034c0 <HAL_FMC_MspInit+0x104>
    return;
  }
  FMC_Initialized = 1;
 80033d8:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <HAL_FMC_MspInit+0x10c>)
 80033da:	2201      	movs	r2, #1
 80033dc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80033de:	4b3b      	ldr	r3, [pc, #236]	; (80034cc <HAL_FMC_MspInit+0x110>)
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	4a3a      	ldr	r2, [pc, #232]	; (80034cc <HAL_FMC_MspInit+0x110>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	6393      	str	r3, [r2, #56]	; 0x38
 80033ea:	4b38      	ldr	r3, [pc, #224]	; (80034cc <HAL_FMC_MspInit+0x110>)
 80033ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80033f6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80033fa:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fc:	2302      	movs	r3, #2
 80033fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003404:	2303      	movs	r3, #3
 8003406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003408:	230c      	movs	r3, #12
 800340a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800340c:	1d3b      	adds	r3, r7, #4
 800340e:	4619      	mov	r1, r3
 8003410:	482f      	ldr	r0, [pc, #188]	; (80034d0 <HAL_FMC_MspInit+0x114>)
 8003412:	f002 fae7 	bl	80059e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003416:	f248 1333 	movw	r3, #33075	; 0x8133
 800341a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341c:	2302      	movs	r3, #2
 800341e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003424:	2303      	movs	r3, #3
 8003426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003428:	230c      	movs	r3, #12
 800342a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800342c:	1d3b      	adds	r3, r7, #4
 800342e:	4619      	mov	r1, r3
 8003430:	4828      	ldr	r0, [pc, #160]	; (80034d4 <HAL_FMC_MspInit+0x118>)
 8003432:	f002 fad7 	bl	80059e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003436:	f24c 7303 	movw	r3, #50947	; 0xc703
 800343a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343c:	2302      	movs	r3, #2
 800343e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003444:	2303      	movs	r3, #3
 8003446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003448:	230c      	movs	r3, #12
 800344a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800344c:	1d3b      	adds	r3, r7, #4
 800344e:	4619      	mov	r1, r3
 8003450:	4821      	ldr	r0, [pc, #132]	; (80034d8 <HAL_FMC_MspInit+0x11c>)
 8003452:	f002 fac7 	bl	80059e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003456:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800345a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345c:	2302      	movs	r3, #2
 800345e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003464:	2303      	movs	r3, #3
 8003466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003468:	230c      	movs	r3, #12
 800346a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800346c:	1d3b      	adds	r3, r7, #4
 800346e:	4619      	mov	r1, r3
 8003470:	481a      	ldr	r0, [pc, #104]	; (80034dc <HAL_FMC_MspInit+0x120>)
 8003472:	f002 fab7 	bl	80059e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003476:	2328      	movs	r3, #40	; 0x28
 8003478:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347a:	2302      	movs	r3, #2
 800347c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003482:	2303      	movs	r3, #3
 8003484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003486:	230c      	movs	r3, #12
 8003488:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800348a:	1d3b      	adds	r3, r7, #4
 800348c:	4619      	mov	r1, r3
 800348e:	4814      	ldr	r0, [pc, #80]	; (80034e0 <HAL_FMC_MspInit+0x124>)
 8003490:	f002 faa8 	bl	80059e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003494:	2308      	movs	r3, #8
 8003496:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003498:	2302      	movs	r3, #2
 800349a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a0:	2303      	movs	r3, #3
 80034a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034a4:	230c      	movs	r3, #12
 80034a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80034a8:	1d3b      	adds	r3, r7, #4
 80034aa:	4619      	mov	r1, r3
 80034ac:	480d      	ldr	r0, [pc, #52]	; (80034e4 <HAL_FMC_MspInit+0x128>)
 80034ae:	f002 fa99 	bl	80059e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  // syd:
  /* Associate mem2mem DMA handle with SDRAM */
  __HAL_LINKDMA(&hsdram1, hdma, hdma_memtomem_dma2_stream0);
 80034b2:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <HAL_FMC_MspInit+0x12c>)
 80034b4:	4a0d      	ldr	r2, [pc, #52]	; (80034ec <HAL_FMC_MspInit+0x130>)
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <HAL_FMC_MspInit+0x130>)
 80034ba:	4a0b      	ldr	r2, [pc, #44]	; (80034e8 <HAL_FMC_MspInit+0x12c>)
 80034bc:	639a      	str	r2, [r3, #56]	; 0x38
 80034be:	e000      	b.n	80034c2 <HAL_FMC_MspInit+0x106>
    return;
 80034c0:	bf00      	nop
  //i.e.:
  // hsdram1.hdma = &hdma_memtomem_dma2_stream0;
  // hdma_memtomem_dma2_stream0.Parent = &hsdram1;

  /* USER CODE END FMC_MspInit 1 */
}
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20000204 	.word	0x20000204
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40021800 	.word	0x40021800
 80034d8:	40020c00 	.word	0x40020c00
 80034dc:	40021400 	.word	0x40021400
 80034e0:	40021c00 	.word	0x40021c00
 80034e4:	40020800 	.word	0x40020800
 80034e8:	20000b90 	.word	0x20000b90
 80034ec:	200003d8 	.word	0x200003d8

080034f0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80034f8:	f7ff ff60 	bl	80033bc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	; 0x28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a6f      	ldr	r2, [pc, #444]	; (80036d0 <HAL_SAI_MspInit+0x1cc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d175      	bne.n	8003602 <HAL_SAI_MspInit+0xfe>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003516:	4b6f      	ldr	r3, [pc, #444]	; (80036d4 <HAL_SAI_MspInit+0x1d0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10b      	bne.n	8003536 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800351e:	4b6e      	ldr	r3, [pc, #440]	; (80036d8 <HAL_SAI_MspInit+0x1d4>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	4a6d      	ldr	r2, [pc, #436]	; (80036d8 <HAL_SAI_MspInit+0x1d4>)
 8003524:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003528:	6453      	str	r3, [r2, #68]	; 0x44
 800352a:	4b6b      	ldr	r3, [pc, #428]	; (80036d8 <HAL_SAI_MspInit+0x1d4>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003536:	4b67      	ldr	r3, [pc, #412]	; (80036d4 <HAL_SAI_MspInit+0x1d0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3301      	adds	r3, #1
 800353c:	4a65      	ldr	r2, [pc, #404]	; (80036d4 <HAL_SAI_MspInit+0x1d0>)
 800353e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin;
 8003540:	2310      	movs	r3, #16
 8003542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003544:	2302      	movs	r3, #2
 8003546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354c:	2303      	movs	r3, #3
 800354e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003550:	230a      	movs	r3, #10
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8003554:	f107 0314 	add.w	r3, r7, #20
 8003558:	4619      	mov	r1, r3
 800355a:	4860      	ldr	r0, [pc, #384]	; (80036dc <HAL_SAI_MspInit+0x1d8>)
 800355c:	f002 fa42 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003560:	23e0      	movs	r3, #224	; 0xe0
 8003562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003564:	2302      	movs	r3, #2
 8003566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	2300      	movs	r3, #0
 800356a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800356c:	2302      	movs	r3, #2
 800356e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003570:	230a      	movs	r3, #10
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003574:	f107 0314 	add.w	r3, r7, #20
 8003578:	4619      	mov	r1, r3
 800357a:	4858      	ldr	r0, [pc, #352]	; (80036dc <HAL_SAI_MspInit+0x1d8>)
 800357c:	f002 fa32 	bl	80059e4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8003580:	4b57      	ldr	r3, [pc, #348]	; (80036e0 <HAL_SAI_MspInit+0x1dc>)
 8003582:	4a58      	ldr	r2, [pc, #352]	; (80036e4 <HAL_SAI_MspInit+0x1e0>)
 8003584:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8003586:	4b56      	ldr	r3, [pc, #344]	; (80036e0 <HAL_SAI_MspInit+0x1dc>)
 8003588:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800358c:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800358e:	4b54      	ldr	r3, [pc, #336]	; (80036e0 <HAL_SAI_MspInit+0x1dc>)
 8003590:	2240      	movs	r2, #64	; 0x40
 8003592:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003594:	4b52      	ldr	r3, [pc, #328]	; (80036e0 <HAL_SAI_MspInit+0x1dc>)
 8003596:	2200      	movs	r2, #0
 8003598:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 800359a:	4b51      	ldr	r3, [pc, #324]	; (80036e0 <HAL_SAI_MspInit+0x1dc>)
 800359c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035a0:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035a2:	4b4f      	ldr	r3, [pc, #316]	; (80036e0 <HAL_SAI_MspInit+0x1dc>)
 80035a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035a8:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035aa:	4b4d      	ldr	r3, [pc, #308]	; (80036e0 <HAL_SAI_MspInit+0x1dc>)
 80035ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035b0:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 80035b2:	4b4b      	ldr	r3, [pc, #300]	; (80036e0 <HAL_SAI_MspInit+0x1dc>)
 80035b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035b8:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 80035ba:	4b49      	ldr	r3, [pc, #292]	; (80036e0 <HAL_SAI_MspInit+0x1dc>)
 80035bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035c0:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80035c2:	4b47      	ldr	r3, [pc, #284]	; (80036e0 <HAL_SAI_MspInit+0x1dc>)
 80035c4:	2204      	movs	r2, #4
 80035c6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80035c8:	4b45      	ldr	r3, [pc, #276]	; (80036e0 <HAL_SAI_MspInit+0x1dc>)
 80035ca:	2203      	movs	r2, #3
 80035cc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 80035ce:	4b44      	ldr	r3, [pc, #272]	; (80036e0 <HAL_SAI_MspInit+0x1dc>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80035d4:	4b42      	ldr	r3, [pc, #264]	; (80036e0 <HAL_SAI_MspInit+0x1dc>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 80035da:	4841      	ldr	r0, [pc, #260]	; (80036e0 <HAL_SAI_MspInit+0x1dc>)
 80035dc:	f001 fc9a 	bl	8004f14 <HAL_DMA_Init>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_SAI_MspInit+0xe6>
    {
      Error_Handler();
 80035e6:	f7ff f865 	bl	80026b4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a3c      	ldr	r2, [pc, #240]	; (80036e0 <HAL_SAI_MspInit+0x1dc>)
 80035ee:	671a      	str	r2, [r3, #112]	; 0x70
 80035f0:	4a3b      	ldr	r2, [pc, #236]	; (80036e0 <HAL_SAI_MspInit+0x1dc>)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a39      	ldr	r2, [pc, #228]	; (80036e0 <HAL_SAI_MspInit+0x1dc>)
 80035fa:	66da      	str	r2, [r3, #108]	; 0x6c
 80035fc:	4a38      	ldr	r2, [pc, #224]	; (80036e0 <HAL_SAI_MspInit+0x1dc>)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a38      	ldr	r2, [pc, #224]	; (80036e8 <HAL_SAI_MspInit+0x1e4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d15c      	bne.n	80036c6 <HAL_SAI_MspInit+0x1c2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800360c:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <HAL_SAI_MspInit+0x1d0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10b      	bne.n	800362c <HAL_SAI_MspInit+0x128>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003614:	4b30      	ldr	r3, [pc, #192]	; (80036d8 <HAL_SAI_MspInit+0x1d4>)
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	4a2f      	ldr	r2, [pc, #188]	; (80036d8 <HAL_SAI_MspInit+0x1d4>)
 800361a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800361e:	6453      	str	r3, [r2, #68]	; 0x44
 8003620:	4b2d      	ldr	r3, [pc, #180]	; (80036d8 <HAL_SAI_MspInit+0x1d4>)
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800362c:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <HAL_SAI_MspInit+0x1d0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3301      	adds	r3, #1
 8003632:	4a28      	ldr	r2, [pc, #160]	; (80036d4 <HAL_SAI_MspInit+0x1d0>)
 8003634:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800363a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363c:	2302      	movs	r3, #2
 800363e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003640:	2300      	movs	r3, #0
 8003642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003644:	2302      	movs	r3, #2
 8003646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003648:	230a      	movs	r3, #10
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800364c:	f107 0314 	add.w	r3, r7, #20
 8003650:	4619      	mov	r1, r3
 8003652:	4826      	ldr	r0, [pc, #152]	; (80036ec <HAL_SAI_MspInit+0x1e8>)
 8003654:	f002 f9c6 	bl	80059e4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 8003658:	4b25      	ldr	r3, [pc, #148]	; (80036f0 <HAL_SAI_MspInit+0x1ec>)
 800365a:	4a26      	ldr	r2, [pc, #152]	; (80036f4 <HAL_SAI_MspInit+0x1f0>)
 800365c:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 800365e:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <HAL_SAI_MspInit+0x1ec>)
 8003660:	2200      	movs	r2, #0
 8003662:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003664:	4b22      	ldr	r3, [pc, #136]	; (80036f0 <HAL_SAI_MspInit+0x1ec>)
 8003666:	2200      	movs	r2, #0
 8003668:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800366a:	4b21      	ldr	r3, [pc, #132]	; (80036f0 <HAL_SAI_MspInit+0x1ec>)
 800366c:	2200      	movs	r2, #0
 800366e:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8003670:	4b1f      	ldr	r3, [pc, #124]	; (80036f0 <HAL_SAI_MspInit+0x1ec>)
 8003672:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003676:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003678:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <HAL_SAI_MspInit+0x1ec>)
 800367a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800367e:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <HAL_SAI_MspInit+0x1ec>)
 8003682:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003686:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003688:	4b19      	ldr	r3, [pc, #100]	; (80036f0 <HAL_SAI_MspInit+0x1ec>)
 800368a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800368e:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8003690:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <HAL_SAI_MspInit+0x1ec>)
 8003692:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003696:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003698:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <HAL_SAI_MspInit+0x1ec>)
 800369a:	2200      	movs	r2, #0
 800369c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 800369e:	4814      	ldr	r0, [pc, #80]	; (80036f0 <HAL_SAI_MspInit+0x1ec>)
 80036a0:	f001 fc38 	bl	8004f14 <HAL_DMA_Init>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_SAI_MspInit+0x1aa>
    {
      Error_Handler();
 80036aa:	f7ff f803 	bl	80026b4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a0f      	ldr	r2, [pc, #60]	; (80036f0 <HAL_SAI_MspInit+0x1ec>)
 80036b2:	671a      	str	r2, [r3, #112]	; 0x70
 80036b4:	4a0e      	ldr	r2, [pc, #56]	; (80036f0 <HAL_SAI_MspInit+0x1ec>)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a0c      	ldr	r2, [pc, #48]	; (80036f0 <HAL_SAI_MspInit+0x1ec>)
 80036be:	66da      	str	r2, [r3, #108]	; 0x6c
 80036c0:	4a0b      	ldr	r2, [pc, #44]	; (80036f0 <HAL_SAI_MspInit+0x1ec>)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80036c6:	bf00      	nop
 80036c8:	3728      	adds	r7, #40	; 0x28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40015c04 	.word	0x40015c04
 80036d4:	20000208 	.word	0x20000208
 80036d8:	40023800 	.word	0x40023800
 80036dc:	40022000 	.word	0x40022000
 80036e0:	200009d4 	.word	0x200009d4
 80036e4:	40026470 	.word	0x40026470
 80036e8:	40015c24 	.word	0x40015c24
 80036ec:	40021800 	.word	0x40021800
 80036f0:	20000484 	.word	0x20000484
 80036f4:	400264b8 	.word	0x400264b8

080036f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08c      	sub	sp, #48	; 0x30
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003708:	2200      	movs	r2, #0
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	2036      	movs	r0, #54	; 0x36
 800370e:	f001 f919 	bl	8004944 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003712:	2036      	movs	r0, #54	; 0x36
 8003714:	f001 f932 	bl	800497c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003718:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <HAL_InitTick+0xa0>)
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	4a1e      	ldr	r2, [pc, #120]	; (8003798 <HAL_InitTick+0xa0>)
 800371e:	f043 0310 	orr.w	r3, r3, #16
 8003722:	6413      	str	r3, [r2, #64]	; 0x40
 8003724:	4b1c      	ldr	r3, [pc, #112]	; (8003798 <HAL_InitTick+0xa0>)
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003730:	f107 0210 	add.w	r2, r7, #16
 8003734:	f107 0314 	add.w	r3, r7, #20
 8003738:	4611      	mov	r1, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f006 fce6 	bl	800a10c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003740:	f006 fcbc 	bl	800a0bc <HAL_RCC_GetPCLK1Freq>
 8003744:	4603      	mov	r3, r0
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800374a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374c:	4a13      	ldr	r2, [pc, #76]	; (800379c <HAL_InitTick+0xa4>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	0c9b      	lsrs	r3, r3, #18
 8003754:	3b01      	subs	r3, #1
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003758:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <HAL_InitTick+0xa8>)
 800375a:	4a12      	ldr	r2, [pc, #72]	; (80037a4 <HAL_InitTick+0xac>)
 800375c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800375e:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <HAL_InitTick+0xa8>)
 8003760:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003764:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003766:	4a0e      	ldr	r2, [pc, #56]	; (80037a0 <HAL_InitTick+0xa8>)
 8003768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <HAL_InitTick+0xa8>)
 800376e:	2200      	movs	r2, #0
 8003770:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_InitTick+0xa8>)
 8003774:	2200      	movs	r2, #0
 8003776:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003778:	4809      	ldr	r0, [pc, #36]	; (80037a0 <HAL_InitTick+0xa8>)
 800377a:	f009 fa25 	bl	800cbc8 <HAL_TIM_Base_Init>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d104      	bne.n	800378e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003784:	4806      	ldr	r0, [pc, #24]	; (80037a0 <HAL_InitTick+0xa8>)
 8003786:	f009 fae7 	bl	800cd58 <HAL_TIM_Base_Start_IT>
 800378a:	4603      	mov	r3, r0
 800378c:	e000      	b.n	8003790 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
}
 8003790:	4618      	mov	r0, r3
 8003792:	3730      	adds	r7, #48	; 0x30
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40023800 	.word	0x40023800
 800379c:	431bde83 	.word	0x431bde83
 80037a0:	20000c10 	.word	0x20000c10
 80037a4:	40001000 	.word	0x40001000

080037a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037ac:	e7fe      	b.n	80037ac <NMI_Handler+0x4>

080037ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037ae:	b480      	push	{r7}
 80037b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037b2:	e7fe      	b.n	80037b2 <HardFault_Handler+0x4>

080037b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037b8:	e7fe      	b.n	80037b8 <MemManage_Handler+0x4>

080037ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037ba:	b480      	push	{r7}
 80037bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037be:	e7fe      	b.n	80037be <BusFault_Handler+0x4>

080037c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037c4:	e7fe      	b.n	80037c4 <UsageFault_Handler+0x4>

080037c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037c6:	b480      	push	{r7}
 80037c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037ca:	bf00      	nop
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80037d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80037dc:	f002 fc06 	bl	8005fec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80037e0:	bf00      	nop
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80037e8:	4802      	ldr	r0, [pc, #8]	; (80037f4 <TIM6_DAC_IRQHandler+0x10>)
 80037ea:	f009 fb84 	bl	800cef6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000c10 	.word	0x20000c10

080037f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// mem2mem DMA (eg SDRAM to RAM)

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 80037fc:	4802      	ldr	r0, [pc, #8]	; (8003808 <DMA2_Stream0_IRQHandler+0x10>)
 80037fe:	f001 fcc9 	bl	8005194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200003d8 	.word	0x200003d8

0800380c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	// DMA streaming from camera to memory

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003810:	4802      	ldr	r0, [pc, #8]	; (800381c <DMA2_Stream1_IRQHandler+0x10>)
 8003812:	f001 fcbf 	bl	8005194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20000624 	.word	0x20000624

08003820 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	// audio out

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8003824:	4802      	ldr	r0, [pc, #8]	; (8003830 <DMA2_Stream4_IRQHandler+0x10>)
 8003826:	f001 fcb5 	bl	8005194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	200009d4 	.word	0x200009d4

08003834 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003838:	4802      	ldr	r0, [pc, #8]	; (8003844 <OTG_FS_IRQHandler+0x10>)
 800383a:	f002 fddf 	bl	80063fc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	200410a0 	.word	0x200410a0

08003848 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

	// audio in

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 800384c:	4802      	ldr	r0, [pc, #8]	; (8003858 <DMA2_Stream7_IRQHandler+0x10>)
 800384e:	f001 fca1 	bl	8005194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000484 	.word	0x20000484

0800385c <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

	// c'était BSP_CAMERA_IRQHandler()

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003860:	4802      	ldr	r0, [pc, #8]	; (800386c <DCMI_IRQHandler+0x10>)
 8003862:	f001 fa87 	bl	8004d74 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20000894 	.word	0x20000894

08003870 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

	// c'était BSP_LCD_DMA2D_IRQHandler();

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003874:	4802      	ldr	r0, [pc, #8]	; (8003880 <DMA2D_IRQHandler+0x10>)
 8003876:	f001 ff13 	bl	80056a0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000ab8 	.word	0x20000ab8

08003884 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8003888:	4802      	ldr	r0, [pc, #8]	; (8003894 <QUADSPI_IRQHandler+0x10>)
 800388a:	f005 f87d 	bl	8008988 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800388e:	bf00      	nop
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000bc4 	.word	0x20000bc4

08003898 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
	return 1;
 800389c:	2301      	movs	r3, #1
}
 800389e:	4618      	mov	r0, r3
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <_kill>:

int _kill(int pid, int sig)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80038b2:	f00e fbfb 	bl	80120ac <__errno>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2216      	movs	r2, #22
 80038ba:	601a      	str	r2, [r3, #0]
	return -1;
 80038bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <_exit>:

void _exit (int status)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80038d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff ffe7 	bl	80038a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80038da:	e7fe      	b.n	80038da <_exit+0x12>

080038dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	e00a      	b.n	8003904 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80038ee:	f3af 8000 	nop.w
 80038f2:	4601      	mov	r1, r0
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	60ba      	str	r2, [r7, #8]
 80038fa:	b2ca      	uxtb	r2, r1
 80038fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	3301      	adds	r3, #1
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	429a      	cmp	r2, r3
 800390a:	dbf0      	blt.n	80038ee <_read+0x12>
	}

return len;
 800390c:	687b      	ldr	r3, [r7, #4]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b086      	sub	sp, #24
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	e009      	b.n	800393c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	60ba      	str	r2, [r7, #8]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f000 f893 	bl	8003a5c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	3301      	adds	r3, #1
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	429a      	cmp	r2, r3
 8003942:	dbf1      	blt.n	8003928 <_write+0x12>
	}
	return len;
 8003944:	687b      	ldr	r3, [r7, #4]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <_close>:

int _close(int file)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
	return -1;
 8003956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800395a:	4618      	mov	r0, r3
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003976:	605a      	str	r2, [r3, #4]
	return 0;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <_isatty>:

int _isatty(int file)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
	return 1;
 800398e:	2301      	movs	r3, #1
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
	return 0;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039c0:	4a14      	ldr	r2, [pc, #80]	; (8003a14 <_sbrk+0x5c>)
 80039c2:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <_sbrk+0x60>)
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039cc:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <_sbrk+0x64>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d102      	bne.n	80039da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039d4:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <_sbrk+0x64>)
 80039d6:	4a12      	ldr	r2, [pc, #72]	; (8003a20 <_sbrk+0x68>)
 80039d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039da:	4b10      	ldr	r3, [pc, #64]	; (8003a1c <_sbrk+0x64>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4413      	add	r3, r2
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d207      	bcs.n	80039f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039e8:	f00e fb60 	bl	80120ac <__errno>
 80039ec:	4603      	mov	r3, r0
 80039ee:	220c      	movs	r2, #12
 80039f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039f6:	e009      	b.n	8003a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039f8:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <_sbrk+0x64>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039fe:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <_sbrk+0x64>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4413      	add	r3, r2
 8003a06:	4a05      	ldr	r2, [pc, #20]	; (8003a1c <_sbrk+0x64>)
 8003a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20050000 	.word	0x20050000
 8003a18:	00000800 	.word	0x00000800
 8003a1c:	2000020c 	.word	0x2000020c
 8003a20:	200413b8 	.word	0x200413b8

08003a24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <SystemInit+0x20>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	4a05      	ldr	r2, [pc, #20]	; (8003a44 <SystemInit+0x20>)
 8003a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a38:	bf00      	nop
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	e000ed00 	.word	0xe000ed00

08003a48 <LED_Toggle>:
void LED_Off(){

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
}

void LED_Toggle(){
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 8003a4c:	2102      	movs	r1, #2
 8003a4e:	4802      	ldr	r0, [pc, #8]	; (8003a58 <LED_Toggle+0x10>)
 8003a50:	f002 fab1 	bl	8005fb6 <HAL_GPIO_TogglePin>

}
 8003a54:	bf00      	nop
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40022000 	.word	0x40022000

08003a5c <__io_putchar>:
 * of the STLink (USB) programming port, it is enough to open a serial terminal on the host PC
 * (e.g., Hyperterminal or Putty on Windows, screen on Linux or Macos) to obtain a debugging console.
 * On linux/MacOS, this VCP shows up as /dev/ttyUSBSomething (ls /dev etc will provide you with its real name),
 * while on Windows, it's COMSOmething (from COM1 to ...).
 */
int __io_putchar(int ch){
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF); // beware blocking call! TODO => use DMA
 8003a64:	1d39      	adds	r1, r7, #4
 8003a66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	4803      	ldr	r0, [pc, #12]	; (8003a7c <__io_putchar+0x20>)
 8003a6e:	f00a fa6f 	bl	800df50 <HAL_UART_Transmit>
	return ch;
 8003a72:	687b      	ldr	r3, [r7, #4]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	200008e4 	.word	0x200008e4

08003a80 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08a      	sub	sp, #40	; 0x28
 8003a84:	af04      	add	r7, sp, #16
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	4608      	mov	r0, r1
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4603      	mov	r3, r0
 8003a90:	72fb      	strb	r3, [r7, #11]
 8003a92:	460b      	mov	r3, r1
 8003a94:	813b      	strh	r3, [r7, #8]
 8003a96:	4613      	mov	r3, r2
 8003a98:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003a9e:	7afb      	ldrb	r3, [r7, #11]
 8003aa0:	b299      	uxth	r1, r3
 8003aa2:	88f8      	ldrh	r0, [r7, #6]
 8003aa4:	893a      	ldrh	r2, [r7, #8]
 8003aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aaa:	9302      	str	r3, [sp, #8]
 8003aac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003aae:	9301      	str	r3, [sp, #4]
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f004 f838 	bl	8007b2c <HAL_I2C_Mem_Write>
 8003abc:	4603      	mov	r3, r0
 8003abe:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d004      	beq.n	8003ad0 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003ac6:	7afb      	ldrb	r3, [r7, #11]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f805 	bl	8003ada <I2Cx_Error>
  }
  return status;
 8003ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f003 fff0 	bl	8007acc <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  HAL_I2C_Init(i2c_handler);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f003 ff5d 	bl	80079ac <HAL_I2C_Init>
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <TS_I2C_Write>:
  * Writes a single control data to the touchscreen controller over the I2C bus.
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_I2C_Write(uint8_t Reg, uint8_t Value){
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	4603      	mov	r3, r0
 8003b04:	460a      	mov	r2, r1
 8003b06:	71fb      	strb	r3, [r7, #7]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	71bb      	strb	r3, [r7, #6]

  I2Cx_WriteMultiple(&hi2c3, TS_I2C_ADDRESS, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	2301      	movs	r3, #1
 8003b12:	9301      	str	r3, [sp, #4]
 8003b14:	1dbb      	adds	r3, r7, #6
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	2301      	movs	r3, #1
 8003b1a:	2170      	movs	r1, #112	; 0x70
 8003b1c:	4803      	ldr	r0, [pc, #12]	; (8003b2c <TS_I2C_Write+0x30>)
 8003b1e:	f7ff ffaf 	bl	8003a80 <I2Cx_WriteMultiple>

}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	2000038c 	.word	0x2000038c

08003b30 <LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
void LCD_Init(void){
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0

	/* check if FB has a pixel format coherent with PF_565 define */
#ifdef PF_565
	if (hltdc.LayerCfg[0].PixelFormat != LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB565, check MX_LTDC_Init() or undefine PF_565");
 8003b34:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <LCD_Init+0x44>)
 8003b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d002      	beq.n	8003b42 <LCD_Init+0x12>
 8003b3c:	480e      	ldr	r0, [pc, #56]	; (8003b78 <LCD_Init+0x48>)
 8003b3e:	f7fe fd97 	bl	8002670 <Error>
#else
	if (hltdc.LayerCfg[0].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB888, check MX_LTDC_Init() or define PF_565");
#endif

#ifndef FB_IN_SDRAM
	HAL_LTDC_SetAddress(&hltdc, frameBuf0, 0);
 8003b42:	4b0e      	ldr	r3, [pc, #56]	; (8003b7c <LCD_Init+0x4c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2200      	movs	r2, #0
 8003b48:	4619      	mov	r1, r3
 8003b4a:	480a      	ldr	r0, [pc, #40]	; (8003b74 <LCD_Init+0x44>)
 8003b4c:	f004 fc70 	bl	8008430 <HAL_LTDC_SetAddress>
#endif

	LCD_DisplayOn();
 8003b50:	f000 f81a 	bl	8003b88 <LCD_DisplayOn>

	LCD_SetFont(&LCD_DEFAULT_FONT);
 8003b54:	480a      	ldr	r0, [pc, #40]	; (8003b80 <LCD_Init+0x50>)
 8003b56:	f000 f87d 	bl	8003c54 <LCD_SetFont>

	LCD_SetBackColor(LCD_COLOR_WHITE);
 8003b5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b5e:	f000 f861 	bl	8003c24 <LCD_SetBackColor>
	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8003b62:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003b66:	f000 f82d 	bl	8003bc4 <LCD_SetStrokeColor>
	LCD_SetFillColor(LCD_COLOR_RED);
 8003b6a:	4806      	ldr	r0, [pc, #24]	; (8003b84 <LCD_Init+0x54>)
 8003b6c:	f000 f842 	bl	8003bf4 <LCD_SetFillColor>


}
 8003b70:	bf00      	nop
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	200007a4 	.word	0x200007a4
 8003b78:	080150b0 	.word	0x080150b0
 8003b7c:	20000004 	.word	0x20000004
 8003b80:	20000008 	.word	0x20000008
 8003b84:	ffff0000 	.word	0xffff0000

08003b88 <LCD_DisplayOn>:
/**
 * @brief  Enables the display.
 * @retval None
 */
void LCD_DisplayOn(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
	__HAL_LTDC_ENABLE(&hltdc);
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <LCD_DisplayOn+0x30>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699a      	ldr	r2, [r3, #24]
 8003b92:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <LCD_DisplayOn+0x30>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ba2:	4806      	ldr	r0, [pc, #24]	; (8003bbc <LCD_DisplayOn+0x34>)
 8003ba4:	f002 f9ee 	bl	8005f84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003ba8:	2201      	movs	r2, #1
 8003baa:	2108      	movs	r1, #8
 8003bac:	4804      	ldr	r0, [pc, #16]	; (8003bc0 <LCD_DisplayOn+0x38>)
 8003bae:	f002 f9e9 	bl	8005f84 <HAL_GPIO_WritePin>
}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	200007a4 	.word	0x200007a4
 8003bbc:	40022000 	.word	0x40022000
 8003bc0:	40022800 	.word	0x40022800

08003bc4 <LCD_SetStrokeColor>:
/**
 * @brief  Sets the LCD stroke (and text) color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetStrokeColor(uint32_t Color8888)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
	StrokeColor = Color8888;
 8003bcc:	4a07      	ldr	r2, [pc, #28]	; (8003bec <LCD_SetStrokeColor+0x28>)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	StrokeColor565 = ARGB888ToRGB565(StrokeColor);
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <LCD_SetStrokeColor+0x28>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f84c 	bl	8003c74 <ARGB888ToRGB565>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	461a      	mov	r2, r3
 8003be0:	4b03      	ldr	r3, [pc, #12]	; (8003bf0 <LCD_SetStrokeColor+0x2c>)
 8003be2:	601a      	str	r2, [r3, #0]
#endif
}
 8003be4:	bf00      	nop
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20000210 	.word	0x20000210
 8003bf0:	2000021c 	.word	0x2000021c

08003bf4 <LCD_SetFillColor>:
/**
 * @brief  Sets the LCD fill color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetFillColor(uint32_t Color8888)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
	FillColor = Color8888;
 8003bfc:	4a07      	ldr	r2, [pc, #28]	; (8003c1c <LCD_SetFillColor+0x28>)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	FillColor565 = ARGB888ToRGB565(FillColor);
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <LCD_SetFillColor+0x28>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 f834 	bl	8003c74 <ARGB888ToRGB565>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	461a      	mov	r2, r3
 8003c10:	4b03      	ldr	r3, [pc, #12]	; (8003c20 <LCD_SetFillColor+0x2c>)
 8003c12:	601a      	str	r2, [r3, #0]
#endif
}
 8003c14:	bf00      	nop
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20000214 	.word	0x20000214
 8003c20:	20000220 	.word	0x20000220

08003c24 <LCD_SetBackColor>:
 * @brief  Sets the LCD background color.
 * @param  Color: Layer background color code ARGB(8-8-8-8)
 * @retval None
 */
void LCD_SetBackColor(uint32_t Color)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
	BackColor = Color;
 8003c2c:	4a07      	ldr	r2, [pc, #28]	; (8003c4c <LCD_SetBackColor+0x28>)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	BackColor565 = ARGB888ToRGB565(BackColor);
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <LCD_SetBackColor+0x28>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 f81c 	bl	8003c74 <ARGB888ToRGB565>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <LCD_SetBackColor+0x2c>)
 8003c42:	601a      	str	r2, [r3, #0]
#endif
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20000218 	.word	0x20000218
 8003c50:	20000224 	.word	0x20000224

08003c54 <LCD_SetFont>:
 * @brief  Sets the LCD text font.
 * @param  fonts: Layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *fonts)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	pFont = fonts;
 8003c5c:	4a04      	ldr	r2, [pc, #16]	; (8003c70 <LCD_SetFont+0x1c>)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6013      	str	r3, [r2, #0]
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	20000228 	.word	0x20000228

08003c74 <ARGB888ToRGB565>:

/**
 * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
 */
static uint16_t ARGB888ToRGB565(uint32_t RGB_Code)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
	uint8_t red   = (RGB_Code & 0x00FF0000) >> 16;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	0c1b      	lsrs	r3, r3, #16
 8003c80:	75fb      	strb	r3, [r7, #23]
	uint8_t green = (RGB_Code & 0x0000FF00) >> 8;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	0a1b      	lsrs	r3, r3, #8
 8003c86:	75bb      	strb	r3, [r7, #22]
	uint8_t blue  = (RGB_Code & 0x000000FF);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	757b      	strb	r3, [r7, #21]

	uint16_t b = (blue >> 3) & 0x1f; // 5 bits
 8003c8c:	7d7b      	ldrb	r3, [r7, #21]
 8003c8e:	08db      	lsrs	r3, r3, #3
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	827b      	strh	r3, [r7, #18]
	uint16_t g = ((green >> 2) & 0x3f) << 5; // 6 bits
 8003c9a:	7dbb      	ldrb	r3, [r7, #22]
 8003c9c:	089b      	lsrs	r3, r3, #2
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	015b      	lsls	r3, r3, #5
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003ca8:	823b      	strh	r3, [r7, #16]
	uint16_t r = ((red >> 3) & 0x1f) << 11; // 5 bits
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
 8003cac:	08db      	lsrs	r3, r3, #3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	02db      	lsls	r3, r3, #11
 8003cb2:	81fb      	strh	r3, [r7, #14]

	return (uint16_t) (r | g | b);
 8003cb4:	89fa      	ldrh	r2, [r7, #14]
 8003cb6:	8a3b      	ldrh	r3, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	8a7b      	ldrh	r3, [r7, #18]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	b29b      	uxth	r3, r3
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <DISCO_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t DISCO_QSPI_EnableMemoryMappedMode(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b090      	sub	sp, #64	; 0x40
 8003cd4:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cda:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8003cdc:	23eb      	movs	r3, #235	; 0xeb
 8003cde:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003ce0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003ce6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cea:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003cec:	2300      	movs	r3, #0
 8003cee:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003cf0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8003cf6:	230a      	movs	r3, #10
 8003cf8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003d02:	2300      	movs	r3, #0
 8003d04:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	603b      	str	r3, [r7, #0]

  if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003d0e:	463a      	mov	r2, r7
 8003d10:	f107 0308 	add.w	r3, r7, #8
 8003d14:	4619      	mov	r1, r3
 8003d16:	4806      	ldr	r0, [pc, #24]	; (8003d30 <DISCO_QSPI_EnableMemoryMappedMode+0x60>)
 8003d18:	f005 fa04 	bl	8009124 <HAL_QSPI_MemoryMapped>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <DISCO_QSPI_EnableMemoryMappedMode+0x56>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <DISCO_QSPI_EnableMemoryMappedMode+0x58>
  }

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3740      	adds	r7, #64	; 0x40
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20000bc4 	.word	0x20000bc4

08003d34 <DISCO_QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b090      	sub	sp, #64	; 0x40
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003d3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d40:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003d42:	2366      	movs	r3, #102	; 0x66
 8003d44:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003d46:	2300      	movs	r3, #0
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8003d52:	2300      	movs	r3, #0
 8003d54:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d62:	f107 0308 	add.w	r3, r7, #8
 8003d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f004 ffcb 	bl	8008d08 <HAL_QSPI_Command>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <DISCO_QSPI_ResetMemory+0x48>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e019      	b.n	8003db0 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8003d7c:	2399      	movs	r3, #153	; 0x99
 8003d7e:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d80:	f107 0308 	add.w	r3, r7, #8
 8003d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d88:	4619      	mov	r1, r3
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f004 ffbc 	bl	8008d08 <HAL_QSPI_Command>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <DISCO_QSPI_ResetMemory+0x66>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e00a      	b.n	8003db0 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d9a:	f241 3188 	movw	r1, #5000	; 0x1388
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f8c7 	bl	8003f32 <QSPI_AutoPollingMemReady>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <DISCO_QSPI_ResetMemory+0x7a>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <DISCO_QSPI_ResetMemory+0x7c>
  }

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3740      	adds	r7, #64	; 0x40
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <DISCO_QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b094      	sub	sp, #80	; 0x50
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8003dc6:	2385      	movs	r3, #133	; 0x85
 8003dc8:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003dd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dd6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003de0:	2300      	movs	r3, #0
 8003de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003de4:	2300      	movs	r3, #0
 8003de6:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003de8:	2300      	movs	r3, #0
 8003dea:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003dec:	f107 0310 	add.w	r3, r7, #16
 8003df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df4:	4619      	mov	r1, r3
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f004 ff86 	bl	8008d08 <HAL_QSPI_Command>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <DISCO_QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e048      	b.n	8003e98 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e06:	f107 030f 	add.w	r3, r7, #15
 8003e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f005 f86e 	bl	8008ef2 <HAL_QSPI_Receive>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <DISCO_QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e03b      	b.n	8003e98 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != HAL_OK)
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f83d 	bl	8003ea0 <QSPI_WriteEnable>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <DISCO_QSPI_DummyCyclesCfg+0x78>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e033      	b.n	8003e98 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8003e30:	2381      	movs	r3, #129	; 0x81
 8003e32:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	b25b      	sxtb	r3, r3
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	b25a      	sxtb	r2, r3
 8003e3e:	23f0      	movs	r3, #240	; 0xf0
 8003e40:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e44:	fa93 f3a3 	rbit	r3, r3
 8003e48:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e4c:	fab3 f383 	clz	r3, r3
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	4619      	mov	r1, r3
 8003e54:	230a      	movs	r3, #10
 8003e56:	408b      	lsls	r3, r1
 8003e58:	b25b      	sxtb	r3, r3
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	b25b      	sxtb	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	73fb      	strb	r3, [r7, #15]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e62:	f107 0310 	add.w	r3, r7, #16
 8003e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f004 ff4b 	bl	8008d08 <HAL_QSPI_Command>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <DISCO_QSPI_DummyCyclesCfg+0xc4>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e00d      	b.n	8003e98 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e7c:	f107 030f 	add.w	r3, r7, #15
 8003e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e84:	4619      	mov	r1, r3
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f004 ff9c 	bl	8008dc4 <HAL_QSPI_Transmit>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <DISCO_QSPI_DummyCyclesCfg+0xde>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3750      	adds	r7, #80	; 0x50
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b096      	sub	sp, #88	; 0x58
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eac:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003eae:	2306      	movs	r3, #6
 8003eb0:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ece:	f107 0320 	add.w	r3, r7, #32
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f004 ff15 	bl	8008d08 <HAL_QSPI_Command>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <QSPI_WriteEnable+0x48>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e020      	b.n	8003f2a <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = N25Q128A_SR_WREN;
 8003ee8:	2302      	movs	r3, #2
 8003eea:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8003eec:	2302      	movs	r3, #2
 8003eee:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8003ef8:	2310      	movs	r3, #16
 8003efa:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003efc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f00:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003f02:	2305      	movs	r3, #5
 8003f04:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003f06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f0a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f0c:	f107 0208 	add.w	r2, r7, #8
 8003f10:	f107 0120 	add.w	r1, r7, #32
 8003f14:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f005 f88c 	bl	8009036 <HAL_QSPI_AutoPolling>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <QSPI_WriteEnable+0x88>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <QSPI_WriteEnable+0x8a>
  }

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3758      	adds	r7, #88	; 0x58
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b096      	sub	sp, #88	; 0x58
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003f3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f40:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003f42:	2305      	movs	r3, #5
 8003f44:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003f46:	2300      	movs	r3, #0
 8003f48:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003f4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f52:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003f54:	2300      	movs	r3, #0
 8003f56:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003f60:	2300      	movs	r3, #0
 8003f62:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8003f70:	2301      	movs	r3, #1
 8003f72:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8003f74:	2310      	movs	r3, #16
 8003f76:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003f78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f7c:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003f7e:	f107 0208 	add.w	r2, r7, #8
 8003f82:	f107 0120 	add.w	r1, r7, #32
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f005 f854 	bl	8009036 <HAL_QSPI_AutoPolling>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <QSPI_AutoPollingMemReady+0x66>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <QSPI_AutoPollingMemReady+0x68>
  }

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3758      	adds	r7, #88	; 0x58
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <DISCO_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  * @retval None
  */
void DISCO_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003fb0:	4b2a      	ldr	r3, [pc, #168]	; (800405c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003fb6:	4b29      	ldr	r3, [pc, #164]	; (800405c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003fb8:	2210      	movs	r2, #16
 8003fba:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003fbc:	4b27      	ldr	r3, [pc, #156]	; (800405c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003fc2:	4b26      	ldr	r3, [pc, #152]	; (800405c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fcc:	4923      	ldr	r1, [pc, #140]	; (800405c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003fce:	4824      	ldr	r0, [pc, #144]	; (8004060 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8003fd0:	f008 fd53 	bl	800ca7a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003fd4:	2001      	movs	r0, #1
 8003fd6:	f000 f92d 	bl	8004234 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003fda:	4b20      	ldr	r3, [pc, #128]	; (800405c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003fdc:	2202      	movs	r2, #2
 8003fde:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003fe0:	4b1e      	ldr	r3, [pc, #120]	; (800405c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003fe2:	2210      	movs	r2, #16
 8003fe4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003fe6:	4b1d      	ldr	r3, [pc, #116]	; (800405c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003fe8:	2201      	movs	r2, #1
 8003fea:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003fec:	4b1b      	ldr	r3, [pc, #108]	; (800405c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ff6:	4919      	ldr	r1, [pc, #100]	; (800405c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003ff8:	4819      	ldr	r0, [pc, #100]	; (8004060 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8003ffa:	f008 fd3e 	bl	800ca7a <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003ffe:	4b17      	ldr	r3, [pc, #92]	; (800405c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004000:	2203      	movs	r2, #3
 8004002:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004004:	4b15      	ldr	r3, [pc, #84]	; (800405c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004006:	2210      	movs	r2, #16
 8004008:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800400a:	4b14      	ldr	r3, [pc, #80]	; (800405c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800400c:	2208      	movs	r2, #8
 800400e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004010:	4b12      	ldr	r3, [pc, #72]	; (800405c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004012:	2200      	movs	r2, #0
 8004014:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800401a:	4910      	ldr	r1, [pc, #64]	; (800405c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800401c:	4810      	ldr	r0, [pc, #64]	; (8004060 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 800401e:	f008 fd2c 	bl	800ca7a <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004022:	f44f 7308 	mov.w	r3, #544	; 0x220
 8004026:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004028:	4b0c      	ldr	r3, [pc, #48]	; (800405c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800402a:	2204      	movs	r2, #4
 800402c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800402e:	4b0b      	ldr	r3, [pc, #44]	; (800405c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004030:	2210      	movs	r2, #16
 8004032:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004034:	4b09      	ldr	r3, [pc, #36]	; (800405c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004036:	2201      	movs	r2, #1
 8004038:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4a07      	ldr	r2, [pc, #28]	; (800405c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800403e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004044:	4905      	ldr	r1, [pc, #20]	; (800405c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004046:	4806      	ldr	r0, [pc, #24]	; (8004060 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004048:	f008 fd17 	bl	800ca7a <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	4804      	ldr	r0, [pc, #16]	; (8004060 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004050:	f008 fd3e 	bl	800cad0 <HAL_SDRAM_ProgramRefreshRate>
}
 8004054:	bf00      	nop
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	2000022c 	.word	0x2000022c
 8004060:	20000b90 	.word	0x20000b90

08004064 <TS_Init>:
 * @brief  Initializes and configures the touch screen functionalities and
 *         configures all necessary hardware resources (GPIOs, I2C, clocks..).
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
void TS_Init()
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
	/* Wait at least 200ms after power up before accessing registers
	 * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
	HAL_Delay(200);
 8004068:	20c8      	movs	r0, #200	; 0xc8
 800406a:	f000 f8e3 	bl	8004234 <HAL_Delay>

	TS_DisableIT();
 800406e:	f000 f802 	bl	8004076 <TS_DisableIT>

}
 8004072:	bf00      	nop
 8004074:	bd80      	pop	{r7, pc}

08004076 <TS_DisableIT>:
  * @brief  Configure the FT5336 device to stop generating IT on the given INT pin
  *         connected to MCU as EXTI.
  * @retval None
  */
void TS_DisableIT()
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b082      	sub	sp, #8
 800407a:	af00      	add	r7, sp, #0
  uint8_t regValue = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	71fb      	strb	r3, [r7, #7]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8004080:	2300      	movs	r3, #0
 8004082:	71fb      	strb	r3, [r7, #7]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_I2C_Write(FT5336_GMODE_REG, regValue);
 8004084:	79fb      	ldrb	r3, [r7, #7]
 8004086:	4619      	mov	r1, r3
 8004088:	20a4      	movs	r0, #164	; 0xa4
 800408a:	f7ff fd37 	bl	8003afc <TS_I2C_Write>
}
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <MPU_Init>:
 */

#include "bsp/mpu.h"


void MPU_Init(){
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0

	HAL_MPU_Disable();
 800409c:	f000 fc8a 	bl	80049b4 <HAL_MPU_Disable>
    /* Configure unused area of QSPI region as strongly ordered.
     * This is *important* to avoid unintentional fetches from illegal
     * addresses due to cache/speculation which would halt the MCU.
     */
    MPU_Region_InitTypeDef MPU_InitStruct;
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80040a0:	2301      	movs	r3, #1
 80040a2:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 80040a4:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80040a8:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80040aa:	231b      	movs	r3, #27
 80040ac:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80040ae:	2303      	movs	r3, #3
 80040b0:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80040b2:	2300      	movs	r3, #0
 80040b4:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80040b6:	2300      	movs	r3, #0
 80040b8:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80040ba:	2300      	movs	r3, #0
 80040bc:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80040be:	2302      	movs	r3, #2
 80040c0:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 80040c6:	2300      	movs	r3, #0
 80040c8:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80040ca:	2300      	movs	r3, #0
 80040cc:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80040ce:	463b      	mov	r3, r7
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fca7 	bl	8004a24 <HAL_MPU_ConfigRegion>

    /* Configure the MPU attributes as WT for QSPI (used 16Mbytes) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80040d6:	2301      	movs	r3, #1
 80040d8:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 80040da:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80040de:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80040e0:	2317      	movs	r3, #23
 80040e2:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80040e4:	2303      	movs	r3, #3
 80040e6:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80040e8:	2300      	movs	r3, #0
 80040ea:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80040ec:	2301      	movs	r3, #1
 80040ee:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80040f4:	2303      	movs	r3, #3
 80040f6:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 80040fc:	2300      	movs	r3, #0
 80040fe:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004100:	2300      	movs	r3, #0
 8004102:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004104:	463b      	mov	r3, r7
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fc8c 	bl	8004a24 <HAL_MPU_ConfigRegion>

    /* Enable D-cache on SDRAM (Write-through) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800410c:	2301      	movs	r3, #1
 800410e:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0xC0000000;
 8004110:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8004114:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8004116:	2316      	movs	r3, #22
 8004118:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800411a:	2303      	movs	r3, #3
 800411c:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800411e:	2300      	movs	r3, #0
 8004120:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8004122:	2301      	movs	r3, #1
 8004124:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004126:	2301      	movs	r3, #1
 8004128:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800412a:	2300      	movs	r3, #0
 800412c:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800412e:	2300      	movs	r3, #0
 8004130:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8004132:	2300      	movs	r3, #0
 8004134:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004136:	2301      	movs	r3, #1
 8004138:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800413a:	463b      	mov	r3, r7
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fc71 	bl	8004a24 <HAL_MPU_ConfigRegion>

    // RAM interne : (test)
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004142:	2301      	movs	r3, #1
 8004144:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x20000000;
 8004146:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800414a:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800414c:	2312      	movs	r3, #18
 800414e:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8004150:	2303      	movs	r3, #3
 8004152:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004154:	2300      	movs	r3, #0
 8004156:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004158:	2300      	movs	r3, #0
 800415a:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800415c:	2300      	movs	r3, #0
 800415e:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8004160:	2301      	movs	r3, #1
 8004162:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004164:	2300      	movs	r3, #0
 8004166:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8004168:	2300      	movs	r3, #0
 800416a:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800416c:	2300      	movs	r3, #0
 800416e:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004170:	463b      	mov	r3, r7
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fc56 	bl	8004a24 <HAL_MPU_ConfigRegion>


    /* Enable the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004178:	2004      	movs	r0, #4
 800417a:	f000 fc33 	bl	80049e4 <HAL_MPU_Enable>

}
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800418c:	480d      	ldr	r0, [pc, #52]	; (80041c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800418e:	490e      	ldr	r1, [pc, #56]	; (80041c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004190:	4a0e      	ldr	r2, [pc, #56]	; (80041cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004194:	e002      	b.n	800419c <LoopCopyDataInit>

08004196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800419a:	3304      	adds	r3, #4

0800419c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800419c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800419e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041a0:	d3f9      	bcc.n	8004196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041a2:	4a0b      	ldr	r2, [pc, #44]	; (80041d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80041a4:	4c0b      	ldr	r4, [pc, #44]	; (80041d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80041a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041a8:	e001      	b.n	80041ae <LoopFillZerobss>

080041aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041ac:	3204      	adds	r2, #4

080041ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041b0:	d3fb      	bcc.n	80041aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80041b2:	f7ff fc37 	bl	8003a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041b6:	f00d ff7f 	bl	80120b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041ba:	f7fc ff07 	bl	8000fcc <main>
  bx  lr    
 80041be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80041c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80041c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041c8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80041cc:	0801a0c0 	.word	0x0801a0c0
  ldr r2, =_sbss
 80041d0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80041d4:	200413b4 	.word	0x200413b4

080041d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041d8:	e7fe      	b.n	80041d8 <ADC_IRQHandler>

080041da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041de:	2003      	movs	r0, #3
 80041e0:	f000 fba5 	bl	800492e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041e4:	2000      	movs	r0, #0
 80041e6:	f7ff fa87 	bl	80036f8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80041ea:	f7fe fa6b 	bl	80026c4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041f8:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_IncTick+0x20>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	4b06      	ldr	r3, [pc, #24]	; (8004218 <HAL_IncTick+0x24>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4413      	add	r3, r2
 8004204:	4a04      	ldr	r2, [pc, #16]	; (8004218 <HAL_IncTick+0x24>)
 8004206:	6013      	str	r3, [r2, #0]
}
 8004208:	bf00      	nop
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	20000014 	.word	0x20000014
 8004218:	2004085c 	.word	0x2004085c

0800421c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  return uwTick;
 8004220:	4b03      	ldr	r3, [pc, #12]	; (8004230 <HAL_GetTick+0x14>)
 8004222:	681b      	ldr	r3, [r3, #0]
}
 8004224:	4618      	mov	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	2004085c 	.word	0x2004085c

08004234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800423c:	f7ff ffee 	bl	800421c <HAL_GetTick>
 8004240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800424c:	d005      	beq.n	800425a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800424e:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <HAL_Delay+0x44>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4413      	add	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800425a:	bf00      	nop
 800425c:	f7ff ffde 	bl	800421c <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	429a      	cmp	r2, r3
 800426a:	d8f7      	bhi.n	800425c <HAL_Delay+0x28>
  {
  }
}
 800426c:	bf00      	nop
 800426e:	bf00      	nop
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20000014 	.word	0x20000014

0800427c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e031      	b.n	80042f6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fe fa3a 	bl	8002714 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d116      	bne.n	80042e8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042be:	4b10      	ldr	r3, [pc, #64]	; (8004300 <HAL_ADC_Init+0x84>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	f043 0202 	orr.w	r2, r3, #2
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f964 	bl	8004598 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f023 0303 	bic.w	r3, r3, #3
 80042de:	f043 0201 	orr.w	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40
 80042e6:	e001      	b.n	80042ec <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	ffffeefd 	.word	0xffffeefd

08004304 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800430e:	2300      	movs	r3, #0
 8004310:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x1c>
 800431c:	2302      	movs	r3, #2
 800431e:	e12a      	b.n	8004576 <HAL_ADC_ConfigChannel+0x272>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b09      	cmp	r3, #9
 800432e:	d93a      	bls.n	80043a6 <HAL_ADC_ConfigChannel+0xa2>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004338:	d035      	beq.n	80043a6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68d9      	ldr	r1, [r3, #12]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	461a      	mov	r2, r3
 8004348:	4613      	mov	r3, r2
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	4413      	add	r3, r2
 800434e:	3b1e      	subs	r3, #30
 8004350:	2207      	movs	r2, #7
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	43da      	mvns	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	400a      	ands	r2, r1
 800435e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a87      	ldr	r2, [pc, #540]	; (8004584 <HAL_ADC_ConfigChannel+0x280>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d10a      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68d9      	ldr	r1, [r3, #12]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	061a      	lsls	r2, r3, #24
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800437e:	e035      	b.n	80043ec <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68d9      	ldr	r1, [r3, #12]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	b29b      	uxth	r3, r3
 8004390:	4618      	mov	r0, r3
 8004392:	4603      	mov	r3, r0
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	4403      	add	r3, r0
 8004398:	3b1e      	subs	r3, #30
 800439a:	409a      	lsls	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043a4:	e022      	b.n	80043ec <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6919      	ldr	r1, [r3, #16]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	4613      	mov	r3, r2
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	4413      	add	r3, r2
 80043ba:	2207      	movs	r2, #7
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	43da      	mvns	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	400a      	ands	r2, r1
 80043c8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6919      	ldr	r1, [r3, #16]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	4618      	mov	r0, r3
 80043dc:	4603      	mov	r3, r0
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	4403      	add	r3, r0
 80043e2:	409a      	lsls	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b06      	cmp	r3, #6
 80043f2:	d824      	bhi.n	800443e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	3b05      	subs	r3, #5
 8004406:	221f      	movs	r2, #31
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43da      	mvns	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	400a      	ands	r2, r1
 8004414:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	b29b      	uxth	r3, r3
 8004422:	4618      	mov	r0, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	3b05      	subs	r3, #5
 8004430:	fa00 f203 	lsl.w	r2, r0, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	635a      	str	r2, [r3, #52]	; 0x34
 800443c:	e04c      	b.n	80044d8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b0c      	cmp	r3, #12
 8004444:	d824      	bhi.n	8004490 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	3b23      	subs	r3, #35	; 0x23
 8004458:	221f      	movs	r2, #31
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	43da      	mvns	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	400a      	ands	r2, r1
 8004466:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	b29b      	uxth	r3, r3
 8004474:	4618      	mov	r0, r3
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	3b23      	subs	r3, #35	; 0x23
 8004482:	fa00 f203 	lsl.w	r2, r0, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	631a      	str	r2, [r3, #48]	; 0x30
 800448e:	e023      	b.n	80044d8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	3b41      	subs	r3, #65	; 0x41
 80044a2:	221f      	movs	r2, #31
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	43da      	mvns	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	400a      	ands	r2, r1
 80044b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	4618      	mov	r0, r3
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	3b41      	subs	r3, #65	; 0x41
 80044cc:	fa00 f203 	lsl.w	r2, r0, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a2a      	ldr	r2, [pc, #168]	; (8004588 <HAL_ADC_ConfigChannel+0x284>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d10a      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x1f4>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044ea:	d105      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80044ec:	4b27      	ldr	r3, [pc, #156]	; (800458c <HAL_ADC_ConfigChannel+0x288>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	4a26      	ldr	r2, [pc, #152]	; (800458c <HAL_ADC_ConfigChannel+0x288>)
 80044f2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80044f6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a22      	ldr	r2, [pc, #136]	; (8004588 <HAL_ADC_ConfigChannel+0x284>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d109      	bne.n	8004516 <HAL_ADC_ConfigChannel+0x212>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b12      	cmp	r3, #18
 8004508:	d105      	bne.n	8004516 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800450a:	4b20      	ldr	r3, [pc, #128]	; (800458c <HAL_ADC_ConfigChannel+0x288>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	4a1f      	ldr	r2, [pc, #124]	; (800458c <HAL_ADC_ConfigChannel+0x288>)
 8004510:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004514:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1b      	ldr	r2, [pc, #108]	; (8004588 <HAL_ADC_ConfigChannel+0x284>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d125      	bne.n	800456c <HAL_ADC_ConfigChannel+0x268>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a17      	ldr	r2, [pc, #92]	; (8004584 <HAL_ADC_ConfigChannel+0x280>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d003      	beq.n	8004532 <HAL_ADC_ConfigChannel+0x22e>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b11      	cmp	r3, #17
 8004530:	d11c      	bne.n	800456c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004532:	4b16      	ldr	r3, [pc, #88]	; (800458c <HAL_ADC_ConfigChannel+0x288>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	4a15      	ldr	r2, [pc, #84]	; (800458c <HAL_ADC_ConfigChannel+0x288>)
 8004538:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800453c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a10      	ldr	r2, [pc, #64]	; (8004584 <HAL_ADC_ConfigChannel+0x280>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d111      	bne.n	800456c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004548:	4b11      	ldr	r3, [pc, #68]	; (8004590 <HAL_ADC_ConfigChannel+0x28c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a11      	ldr	r2, [pc, #68]	; (8004594 <HAL_ADC_ConfigChannel+0x290>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	0c9a      	lsrs	r2, r3, #18
 8004554:	4613      	mov	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800455e:	e002      	b.n	8004566 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	3b01      	subs	r3, #1
 8004564:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1f9      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	10000012 	.word	0x10000012
 8004588:	40012000 	.word	0x40012000
 800458c:	40012300 	.word	0x40012300
 8004590:	20000000 	.word	0x20000000
 8004594:	431bde83 	.word	0x431bde83

08004598 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80045a0:	4b78      	ldr	r3, [pc, #480]	; (8004784 <ADC_Init+0x1ec>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	4a77      	ldr	r2, [pc, #476]	; (8004784 <ADC_Init+0x1ec>)
 80045a6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80045aa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80045ac:	4b75      	ldr	r3, [pc, #468]	; (8004784 <ADC_Init+0x1ec>)
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	4973      	ldr	r1, [pc, #460]	; (8004784 <ADC_Init+0x1ec>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6859      	ldr	r1, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	021a      	lsls	r2, r3, #8
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80045ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6859      	ldr	r1, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800460e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6899      	ldr	r1, [r3, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	4a58      	ldr	r2, [pc, #352]	; (8004788 <ADC_Init+0x1f0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d022      	beq.n	8004672 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800463a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6899      	ldr	r1, [r3, #8]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800465c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6899      	ldr	r1, [r3, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	609a      	str	r2, [r3, #8]
 8004670:	e00f      	b.n	8004692 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004680:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004690:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0202 	bic.w	r2, r2, #2
 80046a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6899      	ldr	r1, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	005a      	lsls	r2, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01b      	beq.n	80046f8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80046de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6859      	ldr	r1, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	3b01      	subs	r3, #1
 80046ec:	035a      	lsls	r2, r3, #13
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	e007      	b.n	8004708 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004706:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004716:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	3b01      	subs	r3, #1
 8004724:	051a      	lsls	r2, r3, #20
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800473c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6899      	ldr	r1, [r3, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800474a:	025a      	lsls	r2, r3, #9
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004762:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6899      	ldr	r1, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	029a      	lsls	r2, r3, #10
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	609a      	str	r2, [r3, #8]
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	40012300 	.word	0x40012300
 8004788:	0f000001 	.word	0x0f000001

0800478c <__NVIC_SetPriorityGrouping>:
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800479c:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <__NVIC_SetPriorityGrouping+0x40>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047a8:	4013      	ands	r3, r2
 80047aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80047b4:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <__NVIC_SetPriorityGrouping+0x44>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047ba:	4a04      	ldr	r2, [pc, #16]	; (80047cc <__NVIC_SetPriorityGrouping+0x40>)
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	60d3      	str	r3, [r2, #12]
}
 80047c0:	bf00      	nop
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	e000ed00 	.word	0xe000ed00
 80047d0:	05fa0000 	.word	0x05fa0000

080047d4 <__NVIC_GetPriorityGrouping>:
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047d8:	4b04      	ldr	r3, [pc, #16]	; (80047ec <__NVIC_GetPriorityGrouping+0x18>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	0a1b      	lsrs	r3, r3, #8
 80047de:	f003 0307 	and.w	r3, r3, #7
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	e000ed00 	.word	0xe000ed00

080047f0 <__NVIC_EnableIRQ>:
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	4603      	mov	r3, r0
 80047f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	db0b      	blt.n	800481a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	f003 021f 	and.w	r2, r3, #31
 8004808:	4907      	ldr	r1, [pc, #28]	; (8004828 <__NVIC_EnableIRQ+0x38>)
 800480a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	2001      	movs	r0, #1
 8004812:	fa00 f202 	lsl.w	r2, r0, r2
 8004816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	e000e100 	.word	0xe000e100

0800482c <__NVIC_DisableIRQ>:
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	4603      	mov	r3, r0
 8004834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483a:	2b00      	cmp	r3, #0
 800483c:	db12      	blt.n	8004864 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800483e:	79fb      	ldrb	r3, [r7, #7]
 8004840:	f003 021f 	and.w	r2, r3, #31
 8004844:	490a      	ldr	r1, [pc, #40]	; (8004870 <__NVIC_DisableIRQ+0x44>)
 8004846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	2001      	movs	r0, #1
 800484e:	fa00 f202 	lsl.w	r2, r0, r2
 8004852:	3320      	adds	r3, #32
 8004854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004858:	f3bf 8f4f 	dsb	sy
}
 800485c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800485e:	f3bf 8f6f 	isb	sy
}
 8004862:	bf00      	nop
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	e000e100 	.word	0xe000e100

08004874 <__NVIC_SetPriority>:
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	4603      	mov	r3, r0
 800487c:	6039      	str	r1, [r7, #0]
 800487e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004884:	2b00      	cmp	r3, #0
 8004886:	db0a      	blt.n	800489e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	b2da      	uxtb	r2, r3
 800488c:	490c      	ldr	r1, [pc, #48]	; (80048c0 <__NVIC_SetPriority+0x4c>)
 800488e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004892:	0112      	lsls	r2, r2, #4
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	440b      	add	r3, r1
 8004898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800489c:	e00a      	b.n	80048b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	4908      	ldr	r1, [pc, #32]	; (80048c4 <__NVIC_SetPriority+0x50>)
 80048a4:	79fb      	ldrb	r3, [r7, #7]
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	3b04      	subs	r3, #4
 80048ac:	0112      	lsls	r2, r2, #4
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	440b      	add	r3, r1
 80048b2:	761a      	strb	r2, [r3, #24]
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	e000e100 	.word	0xe000e100
 80048c4:	e000ed00 	.word	0xe000ed00

080048c8 <NVIC_EncodePriority>:
{
 80048c8:	b480      	push	{r7}
 80048ca:	b089      	sub	sp, #36	; 0x24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f1c3 0307 	rsb	r3, r3, #7
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	bf28      	it	cs
 80048e6:	2304      	movcs	r3, #4
 80048e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	3304      	adds	r3, #4
 80048ee:	2b06      	cmp	r3, #6
 80048f0:	d902      	bls.n	80048f8 <NVIC_EncodePriority+0x30>
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	3b03      	subs	r3, #3
 80048f6:	e000      	b.n	80048fa <NVIC_EncodePriority+0x32>
 80048f8:	2300      	movs	r3, #0
 80048fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43da      	mvns	r2, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	401a      	ands	r2, r3
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004910:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	fa01 f303 	lsl.w	r3, r1, r3
 800491a:	43d9      	mvns	r1, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004920:	4313      	orrs	r3, r2
}
 8004922:	4618      	mov	r0, r3
 8004924:	3724      	adds	r7, #36	; 0x24
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b082      	sub	sp, #8
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7ff ff28 	bl	800478c <__NVIC_SetPriorityGrouping>
}
 800493c:	bf00      	nop
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004952:	2300      	movs	r3, #0
 8004954:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004956:	f7ff ff3d 	bl	80047d4 <__NVIC_GetPriorityGrouping>
 800495a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	68b9      	ldr	r1, [r7, #8]
 8004960:	6978      	ldr	r0, [r7, #20]
 8004962:	f7ff ffb1 	bl	80048c8 <NVIC_EncodePriority>
 8004966:	4602      	mov	r2, r0
 8004968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800496c:	4611      	mov	r1, r2
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff ff80 	bl	8004874 <__NVIC_SetPriority>
}
 8004974:	bf00      	nop
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	4603      	mov	r3, r0
 8004984:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff ff30 	bl	80047f0 <__NVIC_EnableIRQ>
}
 8004990:	bf00      	nop
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80049a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff ff40 	bl	800482c <__NVIC_DisableIRQ>
}
 80049ac:	bf00      	nop
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80049b8:	f3bf 8f5f 	dmb	sy
}
 80049bc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80049be:	4b07      	ldr	r3, [pc, #28]	; (80049dc <HAL_MPU_Disable+0x28>)
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	4a06      	ldr	r2, [pc, #24]	; (80049dc <HAL_MPU_Disable+0x28>)
 80049c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c8:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80049ca:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <HAL_MPU_Disable+0x2c>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	605a      	str	r2, [r3, #4]
}
 80049d0:	bf00      	nop
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	e000ed00 	.word	0xe000ed00
 80049e0:	e000ed90 	.word	0xe000ed90

080049e4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80049ec:	4a0b      	ldr	r2, [pc, #44]	; (8004a1c <HAL_MPU_Enable+0x38>)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80049f6:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <HAL_MPU_Enable+0x3c>)
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	4a09      	ldr	r2, [pc, #36]	; (8004a20 <HAL_MPU_Enable+0x3c>)
 80049fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a00:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004a02:	f3bf 8f4f 	dsb	sy
}
 8004a06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a08:	f3bf 8f6f 	isb	sy
}
 8004a0c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	e000ed90 	.word	0xe000ed90
 8004a20:	e000ed00 	.word	0xe000ed00

08004a24 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	785a      	ldrb	r2, [r3, #1]
 8004a30:	4b1d      	ldr	r3, [pc, #116]	; (8004aa8 <HAL_MPU_ConfigRegion+0x84>)
 8004a32:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d029      	beq.n	8004a90 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8004a3c:	4a1a      	ldr	r2, [pc, #104]	; (8004aa8 <HAL_MPU_ConfigRegion+0x84>)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	7b1b      	ldrb	r3, [r3, #12]
 8004a48:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	7adb      	ldrb	r3, [r3, #11]
 8004a4e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004a50:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	7a9b      	ldrb	r3, [r3, #10]
 8004a56:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004a58:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	7b5b      	ldrb	r3, [r3, #13]
 8004a5e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004a60:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	7b9b      	ldrb	r3, [r3, #14]
 8004a66:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004a68:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	7bdb      	ldrb	r3, [r3, #15]
 8004a6e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004a70:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	7a5b      	ldrb	r3, [r3, #9]
 8004a76:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004a78:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	7a1b      	ldrb	r3, [r3, #8]
 8004a7e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004a80:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	7812      	ldrb	r2, [r2, #0]
 8004a86:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004a88:	4a07      	ldr	r2, [pc, #28]	; (8004aa8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004a8a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004a8c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004a8e:	e005      	b.n	8004a9c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_MPU_ConfigRegion+0x84>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8004a96:	4b04      	ldr	r3, [pc, #16]	; (8004aa8 <HAL_MPU_ConfigRegion+0x84>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	611a      	str	r2, [r3, #16]
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	e000ed90 	.word	0xe000ed90

08004aac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e054      	b.n	8004b68 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	7f5b      	ldrb	r3, [r3, #29]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d105      	bne.n	8004ad4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7fd fe7a 	bl	80027c8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	791b      	ldrb	r3, [r3, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10c      	bne.n	8004afc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a22      	ldr	r2, [pc, #136]	; (8004b70 <HAL_CRC_Init+0xc4>)
 8004ae8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0218 	bic.w	r2, r2, #24
 8004af8:	609a      	str	r2, [r3, #8]
 8004afa:	e00c      	b.n	8004b16 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6899      	ldr	r1, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	461a      	mov	r2, r3
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f834 	bl	8004b74 <HAL_CRCEx_Polynomial_Set>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e028      	b.n	8004b68 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	795b      	ldrb	r3, [r3, #5]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d105      	bne.n	8004b2a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b26:	611a      	str	r2, [r3, #16]
 8004b28:	e004      	b.n	8004b34 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6912      	ldr	r2, [r2, #16]
 8004b32:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695a      	ldr	r2, [r3, #20]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699a      	ldr	r2, [r3, #24]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	04c11db7 	.word	0x04c11db7

08004b74 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b087      	sub	sp, #28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004b84:	231f      	movs	r3, #31
 8004b86:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004b88:	bf00      	nop
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1e5a      	subs	r2, r3, #1
 8004b8e:	613a      	str	r2, [r7, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d009      	beq.n	8004ba8 <HAL_CRCEx_Polynomial_Set+0x34>
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f003 031f 	and.w	r3, r3, #31
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0f0      	beq.n	8004b8a <HAL_CRCEx_Polynomial_Set+0x16>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b18      	cmp	r3, #24
 8004bac:	d846      	bhi.n	8004c3c <HAL_CRCEx_Polynomial_Set+0xc8>
 8004bae:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb4:	08004c43 	.word	0x08004c43
 8004bb8:	08004c3d 	.word	0x08004c3d
 8004bbc:	08004c3d 	.word	0x08004c3d
 8004bc0:	08004c3d 	.word	0x08004c3d
 8004bc4:	08004c3d 	.word	0x08004c3d
 8004bc8:	08004c3d 	.word	0x08004c3d
 8004bcc:	08004c3d 	.word	0x08004c3d
 8004bd0:	08004c3d 	.word	0x08004c3d
 8004bd4:	08004c31 	.word	0x08004c31
 8004bd8:	08004c3d 	.word	0x08004c3d
 8004bdc:	08004c3d 	.word	0x08004c3d
 8004be0:	08004c3d 	.word	0x08004c3d
 8004be4:	08004c3d 	.word	0x08004c3d
 8004be8:	08004c3d 	.word	0x08004c3d
 8004bec:	08004c3d 	.word	0x08004c3d
 8004bf0:	08004c3d 	.word	0x08004c3d
 8004bf4:	08004c25 	.word	0x08004c25
 8004bf8:	08004c3d 	.word	0x08004c3d
 8004bfc:	08004c3d 	.word	0x08004c3d
 8004c00:	08004c3d 	.word	0x08004c3d
 8004c04:	08004c3d 	.word	0x08004c3d
 8004c08:	08004c3d 	.word	0x08004c3d
 8004c0c:	08004c3d 	.word	0x08004c3d
 8004c10:	08004c3d 	.word	0x08004c3d
 8004c14:	08004c19 	.word	0x08004c19
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	2b06      	cmp	r3, #6
 8004c1c:	d913      	bls.n	8004c46 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c22:	e010      	b.n	8004c46 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	2b07      	cmp	r3, #7
 8004c28:	d90f      	bls.n	8004c4a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c2e:	e00c      	b.n	8004c4a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	2b0f      	cmp	r3, #15
 8004c34:	d90b      	bls.n	8004c4e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c3a:	e008      	b.n	8004c4e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c40:	e006      	b.n	8004c50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c42:	bf00      	nop
 8004c44:	e004      	b.n	8004c50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c46:	bf00      	nop
 8004c48:	e002      	b.n	8004c50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c4a:	bf00      	nop
 8004c4c:	e000      	b.n	8004c50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c4e:	bf00      	nop
  }
  if (status == HAL_OK)
 8004c50:	7dfb      	ldrb	r3, [r7, #23]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10d      	bne.n	8004c72 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f023 0118 	bic.w	r1, r3, #24
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e069      	b.n	8004d66 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d102      	bne.n	8004ca4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fd fdb2 	bl	8002808 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6819      	ldr	r1, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4b2a      	ldr	r3, [pc, #168]	; (8004d70 <HAL_DCMI_Init+0xf0>)
 8004cc6:	400b      	ands	r3, r1
 8004cc8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6819      	ldr	r1, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004cde:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004cea:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004cf6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004d02:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d0e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	d112      	bne.n	8004d46 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	7f1b      	ldrb	r3, [r3, #28]
 8004d24:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	7f5b      	ldrb	r3, [r3, #29]
 8004d2a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d2c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	7f9b      	ldrb	r3, [r3, #30]
 8004d32:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004d34:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	7fdb      	ldrb	r3, [r3, #31]
 8004d3c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004d42:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d44:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f042 021e 	orr.w	r2, r2, #30
 8004d54:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	ffe0f007 	.word	0xffe0f007

08004d74 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d016      	beq.n	8004dbc <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2204      	movs	r2, #4
 8004d94:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9a:	f043 0202 	orr.w	r2, r3, #2
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2204      	movs	r2, #4
 8004da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dae:	4a35      	ldr	r2, [pc, #212]	; (8004e84 <HAL_DCMI_IRQHandler+0x110>)
 8004db0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 f9ca 	bl	8005150 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d01e      	beq.n	8004e04 <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd2:	f043 0201 	orr.w	r2, r3, #1
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2204      	movs	r2, #4
 8004dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de6:	4a27      	ldr	r2, [pc, #156]	; (8004e84 <HAL_DCMI_IRQHandler+0x110>)
 8004de8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 f9ae 	bl	8005150 <HAL_DMA_Abort_IT>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d004      	beq.n	8004e04 <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 f86a 	bl	8004ed8 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f003 0310 	and.w	r3, r3, #16
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d006      	beq.n	8004e1c <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2210      	movs	r2, #16
 8004e14:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f840 	bl	8004e9c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f003 0308 	and.w	r3, r3, #8
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d006      	beq.n	8004e34 <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2208      	movs	r2, #8
 8004e2c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f83e 	bl	8004eb0 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d01d      	beq.n	8004e7a <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d107      	bne.n	8004e5c <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 021e 	bic.w	r2, r2, #30
 8004e5a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0201 	bic.w	r2, r2, #1
 8004e6a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2201      	movs	r2, #1
 8004e72:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f825 	bl	8004ec4 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8004e7a:	bf00      	nop
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	08004ed9 	.word	0x08004ed9

08004e88 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee4:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d009      	beq.n	8004f04 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f7ff ffbf 	bl	8004e88 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8004f0a:	bf00      	nop
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
	...

08004f14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f20:	f7ff f97c 	bl	800421c <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e099      	b.n	8005064 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0201 	bic.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f50:	e00f      	b.n	8004f72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f52:	f7ff f963 	bl	800421c <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b05      	cmp	r3, #5
 8004f5e:	d908      	bls.n	8004f72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2220      	movs	r2, #32
 8004f64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2203      	movs	r2, #3
 8004f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e078      	b.n	8005064 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1e8      	bne.n	8004f52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4b38      	ldr	r3, [pc, #224]	; (800506c <HAL_DMA_Init+0x158>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	d107      	bne.n	8004fdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f023 0307 	bic.w	r3, r3, #7
 8004ff2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	2b04      	cmp	r3, #4
 8005004:	d117      	bne.n	8005036 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00e      	beq.n	8005036 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fa7b 	bl	8005514 <DMA_CheckFifoParam>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d008      	beq.n	8005036 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2240      	movs	r2, #64	; 0x40
 8005028:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005032:	2301      	movs	r3, #1
 8005034:	e016      	b.n	8005064 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fa32 	bl	80054a8 <DMA_CalcBaseAndBitshift>
 8005044:	4603      	mov	r3, r0
 8005046:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504c:	223f      	movs	r2, #63	; 0x3f
 800504e:	409a      	lsls	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	f010803f 	.word	0xf010803f

08005070 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800507e:	f7ff f8cd 	bl	800421c <HAL_GetTick>
 8005082:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d008      	beq.n	80050a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2280      	movs	r2, #128	; 0x80
 8005094:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e052      	b.n	8005148 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0216 	bic.w	r2, r2, #22
 80050b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	695a      	ldr	r2, [r3, #20]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d103      	bne.n	80050d2 <HAL_DMA_Abort+0x62>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d007      	beq.n	80050e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0208 	bic.w	r2, r2, #8
 80050e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0201 	bic.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050f2:	e013      	b.n	800511c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050f4:	f7ff f892 	bl	800421c <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b05      	cmp	r3, #5
 8005100:	d90c      	bls.n	800511c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2203      	movs	r2, #3
 8005114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e015      	b.n	8005148 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1e4      	bne.n	80050f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800512e:	223f      	movs	r2, #63	; 0x3f
 8005130:	409a      	lsls	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d004      	beq.n	800516e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2280      	movs	r2, #128	; 0x80
 8005168:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e00c      	b.n	8005188 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2205      	movs	r2, #5
 8005172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0201 	bic.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800519c:	2300      	movs	r3, #0
 800519e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80051a0:	4b92      	ldr	r3, [pc, #584]	; (80053ec <HAL_DMA_IRQHandler+0x258>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a92      	ldr	r2, [pc, #584]	; (80053f0 <HAL_DMA_IRQHandler+0x25c>)
 80051a6:	fba2 2303 	umull	r2, r3, r2, r3
 80051aa:	0a9b      	lsrs	r3, r3, #10
 80051ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051be:	2208      	movs	r2, #8
 80051c0:	409a      	lsls	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4013      	ands	r3, r2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d01a      	beq.n	8005200 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d013      	beq.n	8005200 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0204 	bic.w	r2, r2, #4
 80051e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ec:	2208      	movs	r2, #8
 80051ee:	409a      	lsls	r2, r3
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f8:	f043 0201 	orr.w	r2, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005204:	2201      	movs	r2, #1
 8005206:	409a      	lsls	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4013      	ands	r3, r2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d012      	beq.n	8005236 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00b      	beq.n	8005236 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005222:	2201      	movs	r2, #1
 8005224:	409a      	lsls	r2, r3
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522e:	f043 0202 	orr.w	r2, r3, #2
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523a:	2204      	movs	r2, #4
 800523c:	409a      	lsls	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4013      	ands	r3, r2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d012      	beq.n	800526c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00b      	beq.n	800526c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005258:	2204      	movs	r2, #4
 800525a:	409a      	lsls	r2, r3
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005264:	f043 0204 	orr.w	r2, r3, #4
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005270:	2210      	movs	r2, #16
 8005272:	409a      	lsls	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4013      	ands	r3, r2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d043      	beq.n	8005304 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d03c      	beq.n	8005304 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800528e:	2210      	movs	r2, #16
 8005290:	409a      	lsls	r2, r3
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d018      	beq.n	80052d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d108      	bne.n	80052c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d024      	beq.n	8005304 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	4798      	blx	r3
 80052c2:	e01f      	b.n	8005304 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d01b      	beq.n	8005304 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	4798      	blx	r3
 80052d4:	e016      	b.n	8005304 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d107      	bne.n	80052f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0208 	bic.w	r2, r2, #8
 80052f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005308:	2220      	movs	r2, #32
 800530a:	409a      	lsls	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4013      	ands	r3, r2
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 808e 	beq.w	8005432 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 8086 	beq.w	8005432 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532a:	2220      	movs	r2, #32
 800532c:	409a      	lsls	r2, r3
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b05      	cmp	r3, #5
 800533c:	d136      	bne.n	80053ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0216 	bic.w	r2, r2, #22
 800534c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695a      	ldr	r2, [r3, #20]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800535c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	d103      	bne.n	800536e <HAL_DMA_IRQHandler+0x1da>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800536a:	2b00      	cmp	r3, #0
 800536c:	d007      	beq.n	800537e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0208 	bic.w	r2, r2, #8
 800537c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005382:	223f      	movs	r2, #63	; 0x3f
 8005384:	409a      	lsls	r2, r3
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d07d      	beq.n	800549e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	4798      	blx	r3
        }
        return;
 80053aa:	e078      	b.n	800549e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d01c      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d108      	bne.n	80053da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d030      	beq.n	8005432 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	4798      	blx	r3
 80053d8:	e02b      	b.n	8005432 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d027      	beq.n	8005432 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	4798      	blx	r3
 80053ea:	e022      	b.n	8005432 <HAL_DMA_IRQHandler+0x29e>
 80053ec:	20000000 	.word	0x20000000
 80053f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10f      	bne.n	8005422 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0210 	bic.w	r2, r2, #16
 8005410:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	2b00      	cmp	r3, #0
 8005438:	d032      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d022      	beq.n	800548c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2205      	movs	r2, #5
 800544a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 0201 	bic.w	r2, r2, #1
 800545c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	3301      	adds	r3, #1
 8005462:	60bb      	str	r3, [r7, #8]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	429a      	cmp	r2, r3
 8005468:	d307      	bcc.n	800547a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1f2      	bne.n	800545e <HAL_DMA_IRQHandler+0x2ca>
 8005478:	e000      	b.n	800547c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800547a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005490:	2b00      	cmp	r3, #0
 8005492:	d005      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	4798      	blx	r3
 800549c:	e000      	b.n	80054a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800549e:	bf00      	nop
    }
  }
}
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop

080054a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	3b10      	subs	r3, #16
 80054b8:	4a13      	ldr	r2, [pc, #76]	; (8005508 <DMA_CalcBaseAndBitshift+0x60>)
 80054ba:	fba2 2303 	umull	r2, r3, r2, r3
 80054be:	091b      	lsrs	r3, r3, #4
 80054c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80054c2:	4a12      	ldr	r2, [pc, #72]	; (800550c <DMA_CalcBaseAndBitshift+0x64>)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	461a      	mov	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d908      	bls.n	80054e8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <DMA_CalcBaseAndBitshift+0x68>)
 80054de:	4013      	ands	r3, r2
 80054e0:	1d1a      	adds	r2, r3, #4
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	659a      	str	r2, [r3, #88]	; 0x58
 80054e6:	e006      	b.n	80054f6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	461a      	mov	r2, r3
 80054ee:	4b08      	ldr	r3, [pc, #32]	; (8005510 <DMA_CalcBaseAndBitshift+0x68>)
 80054f0:	4013      	ands	r3, r2
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	aaaaaaab 	.word	0xaaaaaaab
 800550c:	08016bd0 	.word	0x08016bd0
 8005510:	fffffc00 	.word	0xfffffc00

08005514 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800551c:	2300      	movs	r3, #0
 800551e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005524:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d11f      	bne.n	800556e <DMA_CheckFifoParam+0x5a>
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2b03      	cmp	r3, #3
 8005532:	d856      	bhi.n	80055e2 <DMA_CheckFifoParam+0xce>
 8005534:	a201      	add	r2, pc, #4	; (adr r2, 800553c <DMA_CheckFifoParam+0x28>)
 8005536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553a:	bf00      	nop
 800553c:	0800554d 	.word	0x0800554d
 8005540:	0800555f 	.word	0x0800555f
 8005544:	0800554d 	.word	0x0800554d
 8005548:	080055e3 	.word	0x080055e3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d046      	beq.n	80055e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800555c:	e043      	b.n	80055e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005562:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005566:	d140      	bne.n	80055ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800556c:	e03d      	b.n	80055ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005576:	d121      	bne.n	80055bc <DMA_CheckFifoParam+0xa8>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b03      	cmp	r3, #3
 800557c:	d837      	bhi.n	80055ee <DMA_CheckFifoParam+0xda>
 800557e:	a201      	add	r2, pc, #4	; (adr r2, 8005584 <DMA_CheckFifoParam+0x70>)
 8005580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005584:	08005595 	.word	0x08005595
 8005588:	0800559b 	.word	0x0800559b
 800558c:	08005595 	.word	0x08005595
 8005590:	080055ad 	.word	0x080055ad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]
      break;
 8005598:	e030      	b.n	80055fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d025      	beq.n	80055f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055aa:	e022      	b.n	80055f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055b4:	d11f      	bne.n	80055f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80055ba:	e01c      	b.n	80055f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d903      	bls.n	80055ca <DMA_CheckFifoParam+0xb6>
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d003      	beq.n	80055d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80055c8:	e018      	b.n	80055fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	73fb      	strb	r3, [r7, #15]
      break;
 80055ce:	e015      	b.n	80055fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00e      	beq.n	80055fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	73fb      	strb	r3, [r7, #15]
      break;
 80055e0:	e00b      	b.n	80055fa <DMA_CheckFifoParam+0xe6>
      break;
 80055e2:	bf00      	nop
 80055e4:	e00a      	b.n	80055fc <DMA_CheckFifoParam+0xe8>
      break;
 80055e6:	bf00      	nop
 80055e8:	e008      	b.n	80055fc <DMA_CheckFifoParam+0xe8>
      break;
 80055ea:	bf00      	nop
 80055ec:	e006      	b.n	80055fc <DMA_CheckFifoParam+0xe8>
      break;
 80055ee:	bf00      	nop
 80055f0:	e004      	b.n	80055fc <DMA_CheckFifoParam+0xe8>
      break;
 80055f2:	bf00      	nop
 80055f4:	e002      	b.n	80055fc <DMA_CheckFifoParam+0xe8>
      break;   
 80055f6:	bf00      	nop
 80055f8:	e000      	b.n	80055fc <DMA_CheckFifoParam+0xe8>
      break;
 80055fa:	bf00      	nop
    }
  } 
  
  return status; 
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop

0800560c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e039      	b.n	8005692 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d106      	bne.n	8005638 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7fd f9e2 	bl	80029fc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565c:	f023 0107 	bic.w	r1, r3, #7
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005672:	4b0a      	ldr	r3, [pc, #40]	; (800569c <HAL_DMA2D_Init+0x90>)
 8005674:	4013      	ands	r3, r2
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	68d1      	ldr	r1, [r2, #12]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6812      	ldr	r2, [r2, #0]
 800567e:	430b      	orrs	r3, r1
 8005680:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	ffffc000 	.word	0xffffc000

080056a0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d026      	beq.n	8005710 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d021      	beq.n	8005710 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056da:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e0:	f043 0201 	orr.w	r2, r3, #1
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2201      	movs	r2, #1
 80056ee:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2204      	movs	r2, #4
 80056f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f003 0320 	and.w	r3, r3, #32
 8005716:	2b00      	cmp	r3, #0
 8005718:	d026      	beq.n	8005768 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d021      	beq.n	8005768 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005732:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2220      	movs	r2, #32
 800573a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005740:	f043 0202 	orr.w	r2, r3, #2
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2204      	movs	r2, #4
 800574c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b00      	cmp	r3, #0
 8005770:	d026      	beq.n	80057c0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005778:	2b00      	cmp	r3, #0
 800577a:	d021      	beq.n	80057c0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800578a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2208      	movs	r2, #8
 8005792:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005798:	f043 0204 	orr.w	r2, r3, #4
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2204      	movs	r2, #4
 80057a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f003 0304 	and.w	r3, r3, #4
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d013      	beq.n	80057f2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00e      	beq.n	80057f2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057e2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2204      	movs	r2, #4
 80057ea:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f853 	bl	8005898 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d024      	beq.n	8005846 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005802:	2b00      	cmp	r3, #0
 8005804:	d01f      	beq.n	8005846 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005814:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2202      	movs	r2, #2
 800581c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f003 0310 	and.w	r3, r3, #16
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01f      	beq.n	8005890 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d01a      	beq.n	8005890 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005868:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2210      	movs	r2, #16
 8005870:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f80e 	bl	80058ac <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005890:	bf00      	nop
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d101      	bne.n	80058e0 <HAL_DMA2D_ConfigLayer+0x20>
 80058dc:	2302      	movs	r3, #2
 80058de:	e079      	b.n	80059d4 <HAL_DMA2D_ConfigLayer+0x114>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	3318      	adds	r3, #24
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	4413      	add	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	041b      	lsls	r3, r3, #16
 8005906:	4313      	orrs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800590a:	4b35      	ldr	r3, [pc, #212]	; (80059e0 <HAL_DMA2D_ConfigLayer+0x120>)
 800590c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	2b0a      	cmp	r3, #10
 8005914:	d003      	beq.n	800591e <HAL_DMA2D_ConfigLayer+0x5e>
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2b09      	cmp	r3, #9
 800591c:	d107      	bne.n	800592e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	e005      	b.n	800593a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	061b      	lsls	r3, r3, #24
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d120      	bne.n	8005982 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	43db      	mvns	r3, r3
 800594a:	ea02 0103 	and.w	r1, r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	430a      	orrs	r2, r1
 8005956:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	6812      	ldr	r2, [r2, #0]
 8005960:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2b0a      	cmp	r3, #10
 8005968:	d003      	beq.n	8005972 <HAL_DMA2D_ConfigLayer+0xb2>
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2b09      	cmp	r3, #9
 8005970:	d127      	bne.n	80059c2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800597e:	629a      	str	r2, [r3, #40]	; 0x28
 8005980:	e01f      	b.n	80059c2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69da      	ldr	r2, [r3, #28]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	43db      	mvns	r3, r3
 800598c:	ea02 0103 	and.w	r1, r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	430a      	orrs	r2, r1
 8005998:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	6812      	ldr	r2, [r2, #0]
 80059a2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2b0a      	cmp	r3, #10
 80059aa:	d003      	beq.n	80059b4 <HAL_DMA2D_ConfigLayer+0xf4>
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	2b09      	cmp	r3, #9
 80059b2:	d106      	bne.n	80059c2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80059c0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	ff03000f 	.word	0xff03000f

080059e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b089      	sub	sp, #36	; 0x24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80059ee:	2300      	movs	r3, #0
 80059f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80059f2:	2300      	movs	r3, #0
 80059f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80059f6:	2300      	movs	r3, #0
 80059f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80059fa:	2300      	movs	r3, #0
 80059fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]
 8005a02:	e175      	b.n	8005cf0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005a04:	2201      	movs	r2, #1
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	4013      	ands	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	f040 8164 	bne.w	8005cea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d00b      	beq.n	8005a42 <HAL_GPIO_Init+0x5e>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d007      	beq.n	8005a42 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a36:	2b11      	cmp	r3, #17
 8005a38:	d003      	beq.n	8005a42 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2b12      	cmp	r3, #18
 8005a40:	d130      	bne.n	8005aa4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	2203      	movs	r2, #3
 8005a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a52:	43db      	mvns	r3, r3
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	4013      	ands	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a78:	2201      	movs	r2, #1
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a80:	43db      	mvns	r3, r3
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	4013      	ands	r3, r2
 8005a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	091b      	lsrs	r3, r3, #4
 8005a8e:	f003 0201 	and.w	r2, r3, #1
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	fa02 f303 	lsl.w	r3, r2, r3
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	2203      	movs	r2, #3
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d003      	beq.n	8005ae4 <HAL_GPIO_Init+0x100>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b12      	cmp	r3, #18
 8005ae2:	d123      	bne.n	8005b2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	08da      	lsrs	r2, r3, #3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3208      	adds	r2, #8
 8005aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	220f      	movs	r2, #15
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	43db      	mvns	r3, r3
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	4013      	ands	r3, r2
 8005b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f003 0307 	and.w	r3, r3, #7
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	08da      	lsrs	r2, r3, #3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3208      	adds	r2, #8
 8005b26:	69b9      	ldr	r1, [r7, #24]
 8005b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	005b      	lsls	r3, r3, #1
 8005b36:	2203      	movs	r2, #3
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	43db      	mvns	r3, r3
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	4013      	ands	r3, r2
 8005b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f003 0203 	and.w	r2, r3, #3
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 80be 	beq.w	8005cea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b6e:	4b66      	ldr	r3, [pc, #408]	; (8005d08 <HAL_GPIO_Init+0x324>)
 8005b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b72:	4a65      	ldr	r2, [pc, #404]	; (8005d08 <HAL_GPIO_Init+0x324>)
 8005b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b78:	6453      	str	r3, [r2, #68]	; 0x44
 8005b7a:	4b63      	ldr	r3, [pc, #396]	; (8005d08 <HAL_GPIO_Init+0x324>)
 8005b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005b86:	4a61      	ldr	r2, [pc, #388]	; (8005d0c <HAL_GPIO_Init+0x328>)
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	089b      	lsrs	r3, r3, #2
 8005b8c:	3302      	adds	r3, #2
 8005b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	220f      	movs	r2, #15
 8005b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a58      	ldr	r2, [pc, #352]	; (8005d10 <HAL_GPIO_Init+0x32c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d037      	beq.n	8005c22 <HAL_GPIO_Init+0x23e>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a57      	ldr	r2, [pc, #348]	; (8005d14 <HAL_GPIO_Init+0x330>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d031      	beq.n	8005c1e <HAL_GPIO_Init+0x23a>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a56      	ldr	r2, [pc, #344]	; (8005d18 <HAL_GPIO_Init+0x334>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d02b      	beq.n	8005c1a <HAL_GPIO_Init+0x236>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a55      	ldr	r2, [pc, #340]	; (8005d1c <HAL_GPIO_Init+0x338>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d025      	beq.n	8005c16 <HAL_GPIO_Init+0x232>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a54      	ldr	r2, [pc, #336]	; (8005d20 <HAL_GPIO_Init+0x33c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d01f      	beq.n	8005c12 <HAL_GPIO_Init+0x22e>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a53      	ldr	r2, [pc, #332]	; (8005d24 <HAL_GPIO_Init+0x340>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d019      	beq.n	8005c0e <HAL_GPIO_Init+0x22a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a52      	ldr	r2, [pc, #328]	; (8005d28 <HAL_GPIO_Init+0x344>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d013      	beq.n	8005c0a <HAL_GPIO_Init+0x226>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a51      	ldr	r2, [pc, #324]	; (8005d2c <HAL_GPIO_Init+0x348>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00d      	beq.n	8005c06 <HAL_GPIO_Init+0x222>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a50      	ldr	r2, [pc, #320]	; (8005d30 <HAL_GPIO_Init+0x34c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d007      	beq.n	8005c02 <HAL_GPIO_Init+0x21e>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a4f      	ldr	r2, [pc, #316]	; (8005d34 <HAL_GPIO_Init+0x350>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d101      	bne.n	8005bfe <HAL_GPIO_Init+0x21a>
 8005bfa:	2309      	movs	r3, #9
 8005bfc:	e012      	b.n	8005c24 <HAL_GPIO_Init+0x240>
 8005bfe:	230a      	movs	r3, #10
 8005c00:	e010      	b.n	8005c24 <HAL_GPIO_Init+0x240>
 8005c02:	2308      	movs	r3, #8
 8005c04:	e00e      	b.n	8005c24 <HAL_GPIO_Init+0x240>
 8005c06:	2307      	movs	r3, #7
 8005c08:	e00c      	b.n	8005c24 <HAL_GPIO_Init+0x240>
 8005c0a:	2306      	movs	r3, #6
 8005c0c:	e00a      	b.n	8005c24 <HAL_GPIO_Init+0x240>
 8005c0e:	2305      	movs	r3, #5
 8005c10:	e008      	b.n	8005c24 <HAL_GPIO_Init+0x240>
 8005c12:	2304      	movs	r3, #4
 8005c14:	e006      	b.n	8005c24 <HAL_GPIO_Init+0x240>
 8005c16:	2303      	movs	r3, #3
 8005c18:	e004      	b.n	8005c24 <HAL_GPIO_Init+0x240>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	e002      	b.n	8005c24 <HAL_GPIO_Init+0x240>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e000      	b.n	8005c24 <HAL_GPIO_Init+0x240>
 8005c22:	2300      	movs	r3, #0
 8005c24:	69fa      	ldr	r2, [r7, #28]
 8005c26:	f002 0203 	and.w	r2, r2, #3
 8005c2a:	0092      	lsls	r2, r2, #2
 8005c2c:	4093      	lsls	r3, r2
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005c34:	4935      	ldr	r1, [pc, #212]	; (8005d0c <HAL_GPIO_Init+0x328>)
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	089b      	lsrs	r3, r3, #2
 8005c3a:	3302      	adds	r3, #2
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c42:	4b3d      	ldr	r3, [pc, #244]	; (8005d38 <HAL_GPIO_Init+0x354>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	43db      	mvns	r3, r3
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c66:	4a34      	ldr	r2, [pc, #208]	; (8005d38 <HAL_GPIO_Init+0x354>)
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005c6c:	4b32      	ldr	r3, [pc, #200]	; (8005d38 <HAL_GPIO_Init+0x354>)
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	43db      	mvns	r3, r3
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c90:	4a29      	ldr	r2, [pc, #164]	; (8005d38 <HAL_GPIO_Init+0x354>)
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c96:	4b28      	ldr	r3, [pc, #160]	; (8005d38 <HAL_GPIO_Init+0x354>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cba:	4a1f      	ldr	r2, [pc, #124]	; (8005d38 <HAL_GPIO_Init+0x354>)
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cc0:	4b1d      	ldr	r3, [pc, #116]	; (8005d38 <HAL_GPIO_Init+0x354>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ce4:	4a14      	ldr	r2, [pc, #80]	; (8005d38 <HAL_GPIO_Init+0x354>)
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	3301      	adds	r3, #1
 8005cee:	61fb      	str	r3, [r7, #28]
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	2b0f      	cmp	r3, #15
 8005cf4:	f67f ae86 	bls.w	8005a04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005cf8:	bf00      	nop
 8005cfa:	bf00      	nop
 8005cfc:	3724      	adds	r7, #36	; 0x24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	40023800 	.word	0x40023800
 8005d0c:	40013800 	.word	0x40013800
 8005d10:	40020000 	.word	0x40020000
 8005d14:	40020400 	.word	0x40020400
 8005d18:	40020800 	.word	0x40020800
 8005d1c:	40020c00 	.word	0x40020c00
 8005d20:	40021000 	.word	0x40021000
 8005d24:	40021400 	.word	0x40021400
 8005d28:	40021800 	.word	0x40021800
 8005d2c:	40021c00 	.word	0x40021c00
 8005d30:	40022000 	.word	0x40022000
 8005d34:	40022400 	.word	0x40022400
 8005d38:	40013c00 	.word	0x40013c00

08005d3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005d46:	2300      	movs	r3, #0
 8005d48:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	e0d9      	b.n	8005f0c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005d58:	2201      	movs	r2, #1
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d60:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	4013      	ands	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	f040 80c9 	bne.w	8005f06 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005d74:	4a6b      	ldr	r2, [pc, #428]	; (8005f24 <HAL_GPIO_DeInit+0x1e8>)
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	089b      	lsrs	r3, r3, #2
 8005d7a:	3302      	adds	r3, #2
 8005d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d80:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f003 0303 	and.w	r3, r3, #3
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	220f      	movs	r2, #15
 8005d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	4013      	ands	r3, r2
 8005d94:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a63      	ldr	r2, [pc, #396]	; (8005f28 <HAL_GPIO_DeInit+0x1ec>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d037      	beq.n	8005e0e <HAL_GPIO_DeInit+0xd2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a62      	ldr	r2, [pc, #392]	; (8005f2c <HAL_GPIO_DeInit+0x1f0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d031      	beq.n	8005e0a <HAL_GPIO_DeInit+0xce>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a61      	ldr	r2, [pc, #388]	; (8005f30 <HAL_GPIO_DeInit+0x1f4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d02b      	beq.n	8005e06 <HAL_GPIO_DeInit+0xca>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a60      	ldr	r2, [pc, #384]	; (8005f34 <HAL_GPIO_DeInit+0x1f8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d025      	beq.n	8005e02 <HAL_GPIO_DeInit+0xc6>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a5f      	ldr	r2, [pc, #380]	; (8005f38 <HAL_GPIO_DeInit+0x1fc>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d01f      	beq.n	8005dfe <HAL_GPIO_DeInit+0xc2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a5e      	ldr	r2, [pc, #376]	; (8005f3c <HAL_GPIO_DeInit+0x200>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d019      	beq.n	8005dfa <HAL_GPIO_DeInit+0xbe>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a5d      	ldr	r2, [pc, #372]	; (8005f40 <HAL_GPIO_DeInit+0x204>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d013      	beq.n	8005df6 <HAL_GPIO_DeInit+0xba>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a5c      	ldr	r2, [pc, #368]	; (8005f44 <HAL_GPIO_DeInit+0x208>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00d      	beq.n	8005df2 <HAL_GPIO_DeInit+0xb6>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a5b      	ldr	r2, [pc, #364]	; (8005f48 <HAL_GPIO_DeInit+0x20c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d007      	beq.n	8005dee <HAL_GPIO_DeInit+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a5a      	ldr	r2, [pc, #360]	; (8005f4c <HAL_GPIO_DeInit+0x210>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d101      	bne.n	8005dea <HAL_GPIO_DeInit+0xae>
 8005de6:	2309      	movs	r3, #9
 8005de8:	e012      	b.n	8005e10 <HAL_GPIO_DeInit+0xd4>
 8005dea:	230a      	movs	r3, #10
 8005dec:	e010      	b.n	8005e10 <HAL_GPIO_DeInit+0xd4>
 8005dee:	2308      	movs	r3, #8
 8005df0:	e00e      	b.n	8005e10 <HAL_GPIO_DeInit+0xd4>
 8005df2:	2307      	movs	r3, #7
 8005df4:	e00c      	b.n	8005e10 <HAL_GPIO_DeInit+0xd4>
 8005df6:	2306      	movs	r3, #6
 8005df8:	e00a      	b.n	8005e10 <HAL_GPIO_DeInit+0xd4>
 8005dfa:	2305      	movs	r3, #5
 8005dfc:	e008      	b.n	8005e10 <HAL_GPIO_DeInit+0xd4>
 8005dfe:	2304      	movs	r3, #4
 8005e00:	e006      	b.n	8005e10 <HAL_GPIO_DeInit+0xd4>
 8005e02:	2303      	movs	r3, #3
 8005e04:	e004      	b.n	8005e10 <HAL_GPIO_DeInit+0xd4>
 8005e06:	2302      	movs	r3, #2
 8005e08:	e002      	b.n	8005e10 <HAL_GPIO_DeInit+0xd4>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e000      	b.n	8005e10 <HAL_GPIO_DeInit+0xd4>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	f002 0203 	and.w	r2, r2, #3
 8005e16:	0092      	lsls	r2, r2, #2
 8005e18:	4093      	lsls	r3, r2
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d132      	bne.n	8005e86 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005e20:	4b4b      	ldr	r3, [pc, #300]	; (8005f50 <HAL_GPIO_DeInit+0x214>)
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	43db      	mvns	r3, r3
 8005e28:	4949      	ldr	r1, [pc, #292]	; (8005f50 <HAL_GPIO_DeInit+0x214>)
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005e2e:	4b48      	ldr	r3, [pc, #288]	; (8005f50 <HAL_GPIO_DeInit+0x214>)
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	43db      	mvns	r3, r3
 8005e36:	4946      	ldr	r1, [pc, #280]	; (8005f50 <HAL_GPIO_DeInit+0x214>)
 8005e38:	4013      	ands	r3, r2
 8005e3a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005e3c:	4b44      	ldr	r3, [pc, #272]	; (8005f50 <HAL_GPIO_DeInit+0x214>)
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	43db      	mvns	r3, r3
 8005e44:	4942      	ldr	r1, [pc, #264]	; (8005f50 <HAL_GPIO_DeInit+0x214>)
 8005e46:	4013      	ands	r3, r2
 8005e48:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005e4a:	4b41      	ldr	r3, [pc, #260]	; (8005f50 <HAL_GPIO_DeInit+0x214>)
 8005e4c:	68da      	ldr	r2, [r3, #12]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	43db      	mvns	r3, r3
 8005e52:	493f      	ldr	r1, [pc, #252]	; (8005f50 <HAL_GPIO_DeInit+0x214>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f003 0303 	and.w	r3, r3, #3
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	220f      	movs	r2, #15
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005e68:	4a2e      	ldr	r2, [pc, #184]	; (8005f24 <HAL_GPIO_DeInit+0x1e8>)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	089b      	lsrs	r3, r3, #2
 8005e6e:	3302      	adds	r3, #2
 8005e70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	43da      	mvns	r2, r3
 8005e78:	482a      	ldr	r0, [pc, #168]	; (8005f24 <HAL_GPIO_DeInit+0x1e8>)
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	089b      	lsrs	r3, r3, #2
 8005e7e:	400a      	ands	r2, r1
 8005e80:	3302      	adds	r3, #2
 8005e82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	2103      	movs	r1, #3
 8005e90:	fa01 f303 	lsl.w	r3, r1, r3
 8005e94:	43db      	mvns	r3, r3
 8005e96:	401a      	ands	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	08da      	lsrs	r2, r3, #3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3208      	adds	r2, #8
 8005ea4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f003 0307 	and.w	r3, r3, #7
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	220f      	movs	r2, #15
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	43db      	mvns	r3, r3
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	08d2      	lsrs	r2, r2, #3
 8005ebc:	4019      	ands	r1, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	3208      	adds	r2, #8
 8005ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	2103      	movs	r1, #3
 8005ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed4:	43db      	mvns	r3, r3
 8005ed6:	401a      	ands	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	401a      	ands	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	2103      	movs	r1, #3
 8005efa:	fa01 f303 	lsl.w	r3, r1, r3
 8005efe:	43db      	mvns	r3, r3
 8005f00:	401a      	ands	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2b0f      	cmp	r3, #15
 8005f10:	f67f af22 	bls.w	8005d58 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	40013800 	.word	0x40013800
 8005f28:	40020000 	.word	0x40020000
 8005f2c:	40020400 	.word	0x40020400
 8005f30:	40020800 	.word	0x40020800
 8005f34:	40020c00 	.word	0x40020c00
 8005f38:	40021000 	.word	0x40021000
 8005f3c:	40021400 	.word	0x40021400
 8005f40:	40021800 	.word	0x40021800
 8005f44:	40021c00 	.word	0x40021c00
 8005f48:	40022000 	.word	0x40022000
 8005f4c:	40022400 	.word	0x40022400
 8005f50:	40013c00 	.word	0x40013c00

08005f54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691a      	ldr	r2, [r3, #16]
 8005f64:	887b      	ldrh	r3, [r7, #2]
 8005f66:	4013      	ands	r3, r2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	73fb      	strb	r3, [r7, #15]
 8005f70:	e001      	b.n	8005f76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f72:	2300      	movs	r3, #0
 8005f74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	807b      	strh	r3, [r7, #2]
 8005f90:	4613      	mov	r3, r2
 8005f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f94:	787b      	ldrb	r3, [r7, #1]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f9a:	887a      	ldrh	r2, [r7, #2]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005fa0:	e003      	b.n	8005faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005fa2:	887b      	ldrh	r3, [r7, #2]
 8005fa4:	041a      	lsls	r2, r3, #16
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	619a      	str	r2, [r3, #24]
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005fc8:	887a      	ldrh	r2, [r7, #2]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	041a      	lsls	r2, r3, #16
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	43d9      	mvns	r1, r3
 8005fd4:	887b      	ldrh	r3, [r7, #2]
 8005fd6:	400b      	ands	r3, r1
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	619a      	str	r2, [r3, #24]
}
 8005fde:	bf00      	nop
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
	...

08005fec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005ff6:	4b08      	ldr	r3, [pc, #32]	; (8006018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ff8:	695a      	ldr	r2, [r3, #20]
 8005ffa:	88fb      	ldrh	r3, [r7, #6]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d006      	beq.n	8006010 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006002:	4a05      	ldr	r2, [pc, #20]	; (8006018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006004:	88fb      	ldrh	r3, [r7, #6]
 8006006:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006008:	88fb      	ldrh	r3, [r7, #6]
 800600a:	4618      	mov	r0, r3
 800600c:	f000 f806 	bl	800601c <HAL_GPIO_EXTI_Callback>
  }
}
 8006010:	bf00      	nop
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	40013c00 	.word	0x40013c00

0800601c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	4603      	mov	r3, r0
 8006024:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8006032:	b590      	push	{r4, r7, lr}
 8006034:	b089      	sub	sp, #36	; 0x24
 8006036:	af04      	add	r7, sp, #16
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	4608      	mov	r0, r1
 800603c:	4611      	mov	r1, r2
 800603e:	461a      	mov	r2, r3
 8006040:	4603      	mov	r3, r0
 8006042:	70fb      	strb	r3, [r7, #3]
 8006044:	460b      	mov	r3, r1
 8006046:	70bb      	strb	r3, [r7, #2]
 8006048:	4613      	mov	r3, r2
 800604a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006052:	2b01      	cmp	r3, #1
 8006054:	d101      	bne.n	800605a <HAL_HCD_HC_Init+0x28>
 8006056:	2302      	movs	r3, #2
 8006058:	e076      	b.n	8006148 <HAL_HCD_HC_Init+0x116>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8006062:	78fb      	ldrb	r3, [r7, #3]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	212c      	movs	r1, #44	; 0x2c
 8006068:	fb01 f303 	mul.w	r3, r1, r3
 800606c:	4413      	add	r3, r2
 800606e:	333d      	adds	r3, #61	; 0x3d
 8006070:	2200      	movs	r2, #0
 8006072:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006074:	78fb      	ldrb	r3, [r7, #3]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	212c      	movs	r1, #44	; 0x2c
 800607a:	fb01 f303 	mul.w	r3, r1, r3
 800607e:	4413      	add	r3, r2
 8006080:	3338      	adds	r3, #56	; 0x38
 8006082:	787a      	ldrb	r2, [r7, #1]
 8006084:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8006086:	78fb      	ldrb	r3, [r7, #3]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	212c      	movs	r1, #44	; 0x2c
 800608c:	fb01 f303 	mul.w	r3, r1, r3
 8006090:	4413      	add	r3, r2
 8006092:	3340      	adds	r3, #64	; 0x40
 8006094:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006096:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	212c      	movs	r1, #44	; 0x2c
 800609e:	fb01 f303 	mul.w	r3, r1, r3
 80060a2:	4413      	add	r3, r2
 80060a4:	3339      	adds	r3, #57	; 0x39
 80060a6:	78fa      	ldrb	r2, [r7, #3]
 80060a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80060aa:	78fb      	ldrb	r3, [r7, #3]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	212c      	movs	r1, #44	; 0x2c
 80060b0:	fb01 f303 	mul.w	r3, r1, r3
 80060b4:	4413      	add	r3, r2
 80060b6:	333f      	adds	r3, #63	; 0x3f
 80060b8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80060bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80060be:	78fb      	ldrb	r3, [r7, #3]
 80060c0:	78ba      	ldrb	r2, [r7, #2]
 80060c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060c6:	b2d0      	uxtb	r0, r2
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	212c      	movs	r1, #44	; 0x2c
 80060cc:	fb01 f303 	mul.w	r3, r1, r3
 80060d0:	4413      	add	r3, r2
 80060d2:	333a      	adds	r3, #58	; 0x3a
 80060d4:	4602      	mov	r2, r0
 80060d6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80060d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	da09      	bge.n	80060f4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80060e0:	78fb      	ldrb	r3, [r7, #3]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	212c      	movs	r1, #44	; 0x2c
 80060e6:	fb01 f303 	mul.w	r3, r1, r3
 80060ea:	4413      	add	r3, r2
 80060ec:	333b      	adds	r3, #59	; 0x3b
 80060ee:	2201      	movs	r2, #1
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	e008      	b.n	8006106 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80060f4:	78fb      	ldrb	r3, [r7, #3]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	212c      	movs	r1, #44	; 0x2c
 80060fa:	fb01 f303 	mul.w	r3, r1, r3
 80060fe:	4413      	add	r3, r2
 8006100:	333b      	adds	r3, #59	; 0x3b
 8006102:	2200      	movs	r2, #0
 8006104:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8006106:	78fb      	ldrb	r3, [r7, #3]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	212c      	movs	r1, #44	; 0x2c
 800610c:	fb01 f303 	mul.w	r3, r1, r3
 8006110:	4413      	add	r3, r2
 8006112:	333c      	adds	r3, #60	; 0x3c
 8006114:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006118:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6818      	ldr	r0, [r3, #0]
 800611e:	787c      	ldrb	r4, [r7, #1]
 8006120:	78ba      	ldrb	r2, [r7, #2]
 8006122:	78f9      	ldrb	r1, [r7, #3]
 8006124:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006126:	9302      	str	r3, [sp, #8]
 8006128:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800612c:	9301      	str	r3, [sp, #4]
 800612e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	4623      	mov	r3, r4
 8006136:	f009 fb93 	bl	800f860 <USB_HC_Init>
 800613a:	4603      	mov	r3, r0
 800613c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006146:	7bfb      	ldrb	r3, [r7, #15]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	bd90      	pop	{r4, r7, pc}

08006150 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	4608      	mov	r0, r1
 800615a:	4611      	mov	r1, r2
 800615c:	461a      	mov	r2, r3
 800615e:	4603      	mov	r3, r0
 8006160:	70fb      	strb	r3, [r7, #3]
 8006162:	460b      	mov	r3, r1
 8006164:	70bb      	strb	r3, [r7, #2]
 8006166:	4613      	mov	r3, r2
 8006168:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	212c      	movs	r1, #44	; 0x2c
 8006170:	fb01 f303 	mul.w	r3, r1, r3
 8006174:	4413      	add	r3, r2
 8006176:	333b      	adds	r3, #59	; 0x3b
 8006178:	78ba      	ldrb	r2, [r7, #2]
 800617a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800617c:	78fb      	ldrb	r3, [r7, #3]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	212c      	movs	r1, #44	; 0x2c
 8006182:	fb01 f303 	mul.w	r3, r1, r3
 8006186:	4413      	add	r3, r2
 8006188:	333f      	adds	r3, #63	; 0x3f
 800618a:	787a      	ldrb	r2, [r7, #1]
 800618c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800618e:	7c3b      	ldrb	r3, [r7, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d112      	bne.n	80061ba <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006194:	78fb      	ldrb	r3, [r7, #3]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	212c      	movs	r1, #44	; 0x2c
 800619a:	fb01 f303 	mul.w	r3, r1, r3
 800619e:	4413      	add	r3, r2
 80061a0:	3342      	adds	r3, #66	; 0x42
 80061a2:	2203      	movs	r2, #3
 80061a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	212c      	movs	r1, #44	; 0x2c
 80061ac:	fb01 f303 	mul.w	r3, r1, r3
 80061b0:	4413      	add	r3, r2
 80061b2:	333d      	adds	r3, #61	; 0x3d
 80061b4:	7f3a      	ldrb	r2, [r7, #28]
 80061b6:	701a      	strb	r2, [r3, #0]
 80061b8:	e008      	b.n	80061cc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80061ba:	78fb      	ldrb	r3, [r7, #3]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	212c      	movs	r1, #44	; 0x2c
 80061c0:	fb01 f303 	mul.w	r3, r1, r3
 80061c4:	4413      	add	r3, r2
 80061c6:	3342      	adds	r3, #66	; 0x42
 80061c8:	2202      	movs	r2, #2
 80061ca:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80061cc:	787b      	ldrb	r3, [r7, #1]
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	f200 80c6 	bhi.w	8006360 <HAL_HCD_HC_SubmitRequest+0x210>
 80061d4:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80061d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061da:	bf00      	nop
 80061dc:	080061ed 	.word	0x080061ed
 80061e0:	0800634d 	.word	0x0800634d
 80061e4:	08006251 	.word	0x08006251
 80061e8:	080062cf 	.word	0x080062cf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80061ec:	7c3b      	ldrb	r3, [r7, #16]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	f040 80b8 	bne.w	8006364 <HAL_HCD_HC_SubmitRequest+0x214>
 80061f4:	78bb      	ldrb	r3, [r7, #2]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f040 80b4 	bne.w	8006364 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80061fc:	8b3b      	ldrh	r3, [r7, #24]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d108      	bne.n	8006214 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8006202:	78fb      	ldrb	r3, [r7, #3]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	212c      	movs	r1, #44	; 0x2c
 8006208:	fb01 f303 	mul.w	r3, r1, r3
 800620c:	4413      	add	r3, r2
 800620e:	3355      	adds	r3, #85	; 0x55
 8006210:	2201      	movs	r2, #1
 8006212:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006214:	78fb      	ldrb	r3, [r7, #3]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	212c      	movs	r1, #44	; 0x2c
 800621a:	fb01 f303 	mul.w	r3, r1, r3
 800621e:	4413      	add	r3, r2
 8006220:	3355      	adds	r3, #85	; 0x55
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d109      	bne.n	800623c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	212c      	movs	r1, #44	; 0x2c
 800622e:	fb01 f303 	mul.w	r3, r1, r3
 8006232:	4413      	add	r3, r2
 8006234:	3342      	adds	r3, #66	; 0x42
 8006236:	2200      	movs	r2, #0
 8006238:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800623a:	e093      	b.n	8006364 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800623c:	78fb      	ldrb	r3, [r7, #3]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	212c      	movs	r1, #44	; 0x2c
 8006242:	fb01 f303 	mul.w	r3, r1, r3
 8006246:	4413      	add	r3, r2
 8006248:	3342      	adds	r3, #66	; 0x42
 800624a:	2202      	movs	r2, #2
 800624c:	701a      	strb	r2, [r3, #0]
      break;
 800624e:	e089      	b.n	8006364 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006250:	78bb      	ldrb	r3, [r7, #2]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d11d      	bne.n	8006292 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006256:	78fb      	ldrb	r3, [r7, #3]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	212c      	movs	r1, #44	; 0x2c
 800625c:	fb01 f303 	mul.w	r3, r1, r3
 8006260:	4413      	add	r3, r2
 8006262:	3355      	adds	r3, #85	; 0x55
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d109      	bne.n	800627e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	212c      	movs	r1, #44	; 0x2c
 8006270:	fb01 f303 	mul.w	r3, r1, r3
 8006274:	4413      	add	r3, r2
 8006276:	3342      	adds	r3, #66	; 0x42
 8006278:	2200      	movs	r2, #0
 800627a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800627c:	e073      	b.n	8006366 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	212c      	movs	r1, #44	; 0x2c
 8006284:	fb01 f303 	mul.w	r3, r1, r3
 8006288:	4413      	add	r3, r2
 800628a:	3342      	adds	r3, #66	; 0x42
 800628c:	2202      	movs	r2, #2
 800628e:	701a      	strb	r2, [r3, #0]
      break;
 8006290:	e069      	b.n	8006366 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	212c      	movs	r1, #44	; 0x2c
 8006298:	fb01 f303 	mul.w	r3, r1, r3
 800629c:	4413      	add	r3, r2
 800629e:	3354      	adds	r3, #84	; 0x54
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d109      	bne.n	80062ba <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80062a6:	78fb      	ldrb	r3, [r7, #3]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	212c      	movs	r1, #44	; 0x2c
 80062ac:	fb01 f303 	mul.w	r3, r1, r3
 80062b0:	4413      	add	r3, r2
 80062b2:	3342      	adds	r3, #66	; 0x42
 80062b4:	2200      	movs	r2, #0
 80062b6:	701a      	strb	r2, [r3, #0]
      break;
 80062b8:	e055      	b.n	8006366 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80062ba:	78fb      	ldrb	r3, [r7, #3]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	212c      	movs	r1, #44	; 0x2c
 80062c0:	fb01 f303 	mul.w	r3, r1, r3
 80062c4:	4413      	add	r3, r2
 80062c6:	3342      	adds	r3, #66	; 0x42
 80062c8:	2202      	movs	r2, #2
 80062ca:	701a      	strb	r2, [r3, #0]
      break;
 80062cc:	e04b      	b.n	8006366 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80062ce:	78bb      	ldrb	r3, [r7, #2]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d11d      	bne.n	8006310 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80062d4:	78fb      	ldrb	r3, [r7, #3]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	212c      	movs	r1, #44	; 0x2c
 80062da:	fb01 f303 	mul.w	r3, r1, r3
 80062de:	4413      	add	r3, r2
 80062e0:	3355      	adds	r3, #85	; 0x55
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d109      	bne.n	80062fc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	212c      	movs	r1, #44	; 0x2c
 80062ee:	fb01 f303 	mul.w	r3, r1, r3
 80062f2:	4413      	add	r3, r2
 80062f4:	3342      	adds	r3, #66	; 0x42
 80062f6:	2200      	movs	r2, #0
 80062f8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80062fa:	e034      	b.n	8006366 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80062fc:	78fb      	ldrb	r3, [r7, #3]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	212c      	movs	r1, #44	; 0x2c
 8006302:	fb01 f303 	mul.w	r3, r1, r3
 8006306:	4413      	add	r3, r2
 8006308:	3342      	adds	r3, #66	; 0x42
 800630a:	2202      	movs	r2, #2
 800630c:	701a      	strb	r2, [r3, #0]
      break;
 800630e:	e02a      	b.n	8006366 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006310:	78fb      	ldrb	r3, [r7, #3]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	212c      	movs	r1, #44	; 0x2c
 8006316:	fb01 f303 	mul.w	r3, r1, r3
 800631a:	4413      	add	r3, r2
 800631c:	3354      	adds	r3, #84	; 0x54
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d109      	bne.n	8006338 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	212c      	movs	r1, #44	; 0x2c
 800632a:	fb01 f303 	mul.w	r3, r1, r3
 800632e:	4413      	add	r3, r2
 8006330:	3342      	adds	r3, #66	; 0x42
 8006332:	2200      	movs	r2, #0
 8006334:	701a      	strb	r2, [r3, #0]
      break;
 8006336:	e016      	b.n	8006366 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	212c      	movs	r1, #44	; 0x2c
 800633e:	fb01 f303 	mul.w	r3, r1, r3
 8006342:	4413      	add	r3, r2
 8006344:	3342      	adds	r3, #66	; 0x42
 8006346:	2202      	movs	r2, #2
 8006348:	701a      	strb	r2, [r3, #0]
      break;
 800634a:	e00c      	b.n	8006366 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800634c:	78fb      	ldrb	r3, [r7, #3]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	212c      	movs	r1, #44	; 0x2c
 8006352:	fb01 f303 	mul.w	r3, r1, r3
 8006356:	4413      	add	r3, r2
 8006358:	3342      	adds	r3, #66	; 0x42
 800635a:	2200      	movs	r2, #0
 800635c:	701a      	strb	r2, [r3, #0]
      break;
 800635e:	e002      	b.n	8006366 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8006360:	bf00      	nop
 8006362:	e000      	b.n	8006366 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006364:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006366:	78fb      	ldrb	r3, [r7, #3]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	212c      	movs	r1, #44	; 0x2c
 800636c:	fb01 f303 	mul.w	r3, r1, r3
 8006370:	4413      	add	r3, r2
 8006372:	3344      	adds	r3, #68	; 0x44
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	8b3a      	ldrh	r2, [r7, #24]
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	202c      	movs	r0, #44	; 0x2c
 8006380:	fb00 f303 	mul.w	r3, r0, r3
 8006384:	440b      	add	r3, r1
 8006386:	334c      	adds	r3, #76	; 0x4c
 8006388:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800638a:	78fb      	ldrb	r3, [r7, #3]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	212c      	movs	r1, #44	; 0x2c
 8006390:	fb01 f303 	mul.w	r3, r1, r3
 8006394:	4413      	add	r3, r2
 8006396:	3360      	adds	r3, #96	; 0x60
 8006398:	2200      	movs	r2, #0
 800639a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800639c:	78fb      	ldrb	r3, [r7, #3]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	212c      	movs	r1, #44	; 0x2c
 80063a2:	fb01 f303 	mul.w	r3, r1, r3
 80063a6:	4413      	add	r3, r2
 80063a8:	3350      	adds	r3, #80	; 0x50
 80063aa:	2200      	movs	r2, #0
 80063ac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80063ae:	78fb      	ldrb	r3, [r7, #3]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	212c      	movs	r1, #44	; 0x2c
 80063b4:	fb01 f303 	mul.w	r3, r1, r3
 80063b8:	4413      	add	r3, r2
 80063ba:	3339      	adds	r3, #57	; 0x39
 80063bc:	78fa      	ldrb	r2, [r7, #3]
 80063be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80063c0:	78fb      	ldrb	r3, [r7, #3]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	212c      	movs	r1, #44	; 0x2c
 80063c6:	fb01 f303 	mul.w	r3, r1, r3
 80063ca:	4413      	add	r3, r2
 80063cc:	3361      	adds	r3, #97	; 0x61
 80063ce:	2200      	movs	r2, #0
 80063d0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6818      	ldr	r0, [r3, #0]
 80063d6:	78fb      	ldrb	r3, [r7, #3]
 80063d8:	222c      	movs	r2, #44	; 0x2c
 80063da:	fb02 f303 	mul.w	r3, r2, r3
 80063de:	3338      	adds	r3, #56	; 0x38
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	18d1      	adds	r1, r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	461a      	mov	r2, r3
 80063ec:	f009 fb46 	bl	800fa7c <USB_HC_StartXfer>
 80063f0:	4603      	mov	r3, r0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop

080063fc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4618      	mov	r0, r3
 8006414:	f009 f961 	bl	800f6da <USB_GetMode>
 8006418:	4603      	mov	r3, r0
 800641a:	2b01      	cmp	r3, #1
 800641c:	f040 80ef 	bne.w	80065fe <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4618      	mov	r0, r3
 8006426:	f009 f945 	bl	800f6b4 <USB_ReadInterrupts>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 80e5 	beq.w	80065fc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4618      	mov	r0, r3
 8006438:	f009 f93c 	bl	800f6b4 <USB_ReadInterrupts>
 800643c:	4603      	mov	r3, r0
 800643e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006442:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006446:	d104      	bne.n	8006452 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006450:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4618      	mov	r0, r3
 8006458:	f009 f92c 	bl	800f6b4 <USB_ReadInterrupts>
 800645c:	4603      	mov	r3, r0
 800645e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006466:	d104      	bne.n	8006472 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006470:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4618      	mov	r0, r3
 8006478:	f009 f91c 	bl	800f6b4 <USB_ReadInterrupts>
 800647c:	4603      	mov	r3, r0
 800647e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006482:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006486:	d104      	bne.n	8006492 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006490:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4618      	mov	r0, r3
 8006498:	f009 f90c 	bl	800f6b4 <USB_ReadInterrupts>
 800649c:	4603      	mov	r3, r0
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d103      	bne.n	80064ae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2202      	movs	r2, #2
 80064ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f009 f8fe 	bl	800f6b4 <USB_ReadInterrupts>
 80064b8:	4603      	mov	r3, r0
 80064ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064c2:	d115      	bne.n	80064f0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80064cc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d108      	bne.n	80064f0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f00b fc4c 	bl	8011d7c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2101      	movs	r1, #1
 80064ea:	4618      	mov	r0, r3
 80064ec:	f009 f903 	bl	800f6f6 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f009 f8dd 	bl	800f6b4 <USB_ReadInterrupts>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006504:	d102      	bne.n	800650c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f001 f9dd 	bl	80078c6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4618      	mov	r0, r3
 8006512:	f009 f8cf 	bl	800f6b4 <USB_ReadInterrupts>
 8006516:	4603      	mov	r3, r0
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b08      	cmp	r3, #8
 800651e:	d106      	bne.n	800652e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f00b fc0f 	bl	8011d44 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2208      	movs	r2, #8
 800652c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4618      	mov	r0, r3
 8006534:	f009 f8be 	bl	800f6b4 <USB_ReadInterrupts>
 8006538:	4603      	mov	r3, r0
 800653a:	f003 0310 	and.w	r3, r3, #16
 800653e:	2b10      	cmp	r3, #16
 8006540:	d101      	bne.n	8006546 <HAL_HCD_IRQHandler+0x14a>
 8006542:	2301      	movs	r3, #1
 8006544:	e000      	b.n	8006548 <HAL_HCD_IRQHandler+0x14c>
 8006546:	2300      	movs	r3, #0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d012      	beq.n	8006572 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699a      	ldr	r2, [r3, #24]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 0210 	bic.w	r2, r2, #16
 800655a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 f8e0 	bl	8007722 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	699a      	ldr	r2, [r3, #24]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f042 0210 	orr.w	r2, r2, #16
 8006570:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4618      	mov	r0, r3
 8006578:	f009 f89c 	bl	800f6b4 <USB_ReadInterrupts>
 800657c:	4603      	mov	r3, r0
 800657e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006582:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006586:	d13a      	bne.n	80065fe <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4618      	mov	r0, r3
 800658e:	f009 fbb7 	bl	800fd00 <USB_HC_ReadInterrupt>
 8006592:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006594:	2300      	movs	r3, #0
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	e025      	b.n	80065e6 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f003 030f 	and.w	r3, r3, #15
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	fa22 f303 	lsr.w	r3, r2, r3
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d018      	beq.n	80065e0 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065c4:	d106      	bne.n	80065d4 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	4619      	mov	r1, r3
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f889 	bl	80066e4 <HCD_HC_IN_IRQHandler>
 80065d2:	e005      	b.n	80065e0 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	4619      	mov	r1, r3
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fca4 	bl	8006f28 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	3301      	adds	r3, #1
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d3d4      	bcc.n	800659a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80065f8:	615a      	str	r2, [r3, #20]
 80065fa:	e000      	b.n	80065fe <HAL_HCD_IRQHandler+0x202>
      return;
 80065fc:	bf00      	nop
    }
  }
}
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_HCD_Start+0x16>
 8006616:	2302      	movs	r3, #2
 8006618:	e013      	b.n	8006642 <HAL_HCD_Start+0x3e>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4618      	mov	r0, r3
 8006628:	f008 ff7c 	bl	800f524 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2101      	movs	r1, #1
 8006632:	4618      	mov	r0, r3
 8006634:	f009 f8c3 	bl	800f7be <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006658:	2b01      	cmp	r3, #1
 800665a:	d101      	bne.n	8006660 <HAL_HCD_Stop+0x16>
 800665c:	2302      	movs	r3, #2
 800665e:	e00d      	b.n	800667c <HAL_HCD_Stop+0x32>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4618      	mov	r0, r3
 800666e:	f009 fcb1 	bl	800ffd4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4618      	mov	r0, r3
 8006692:	f009 f86a 	bl	800f76a <USB_ResetPort>
 8006696:	4603      	mov	r3, r0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80066ac:	78fb      	ldrb	r3, [r7, #3]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	212c      	movs	r1, #44	; 0x2c
 80066b2:	fb01 f303 	mul.w	r3, r1, r3
 80066b6:	4413      	add	r3, r2
 80066b8:	3360      	adds	r3, #96	; 0x60
 80066ba:	781b      	ldrb	r3, [r3, #0]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f009 f8ab 	bl	800f830 <USB_GetHostSpeed>
 80066da:	4603      	mov	r3, r0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80066fa:	78fb      	ldrb	r3, [r7, #3]
 80066fc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	4413      	add	r3, r2
 8006706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b04      	cmp	r3, #4
 8006712:	d119      	bne.n	8006748 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	4413      	add	r3, r2
 800671c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006720:	461a      	mov	r2, r3
 8006722:	2304      	movs	r3, #4
 8006724:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	4413      	add	r3, r2
 800672e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	0151      	lsls	r1, r2, #5
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	440a      	add	r2, r1
 800673c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006740:	f043 0302 	orr.w	r3, r3, #2
 8006744:	60d3      	str	r3, [r2, #12]
 8006746:	e101      	b.n	800694c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	4413      	add	r3, r2
 8006750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800675a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800675e:	d12b      	bne.n	80067b8 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	4413      	add	r3, r2
 8006768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676c:	461a      	mov	r2, r3
 800676e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006772:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	212c      	movs	r1, #44	; 0x2c
 800677a:	fb01 f303 	mul.w	r3, r1, r3
 800677e:	4413      	add	r3, r2
 8006780:	3361      	adds	r3, #97	; 0x61
 8006782:	2207      	movs	r2, #7
 8006784:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	4413      	add	r3, r2
 800678e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	0151      	lsls	r1, r2, #5
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	440a      	add	r2, r1
 800679c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067a0:	f043 0302 	orr.w	r3, r3, #2
 80067a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	b2d2      	uxtb	r2, r2
 80067ae:	4611      	mov	r1, r2
 80067b0:	4618      	mov	r0, r3
 80067b2:	f009 fab6 	bl	800fd22 <USB_HC_Halt>
 80067b6:	e0c9      	b.n	800694c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	d109      	bne.n	80067e2 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067da:	461a      	mov	r2, r3
 80067dc:	2320      	movs	r3, #32
 80067de:	6093      	str	r3, [r2, #8]
 80067e0:	e0b4      	b.n	800694c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f003 0308 	and.w	r3, r3, #8
 80067f4:	2b08      	cmp	r3, #8
 80067f6:	d133      	bne.n	8006860 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	0151      	lsls	r1, r2, #5
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	440a      	add	r2, r1
 800680e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006812:	f043 0302 	orr.w	r3, r3, #2
 8006816:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	212c      	movs	r1, #44	; 0x2c
 800681e:	fb01 f303 	mul.w	r3, r1, r3
 8006822:	4413      	add	r3, r2
 8006824:	3361      	adds	r3, #97	; 0x61
 8006826:	2205      	movs	r2, #5
 8006828:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	4413      	add	r3, r2
 8006832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006836:	461a      	mov	r2, r3
 8006838:	2310      	movs	r3, #16
 800683a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	4413      	add	r3, r2
 8006844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006848:	461a      	mov	r2, r3
 800684a:	2308      	movs	r3, #8
 800684c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	4611      	mov	r1, r2
 8006858:	4618      	mov	r0, r3
 800685a:	f009 fa62 	bl	800fd22 <USB_HC_Halt>
 800685e:	e075      	b.n	800694c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	4413      	add	r3, r2
 8006868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006876:	d134      	bne.n	80068e2 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	4413      	add	r3, r2
 8006880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	0151      	lsls	r1, r2, #5
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	440a      	add	r2, r1
 800688e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006892:	f043 0302 	orr.w	r3, r3, #2
 8006896:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	212c      	movs	r1, #44	; 0x2c
 800689e:	fb01 f303 	mul.w	r3, r1, r3
 80068a2:	4413      	add	r3, r2
 80068a4:	3361      	adds	r3, #97	; 0x61
 80068a6:	2208      	movs	r2, #8
 80068a8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b6:	461a      	mov	r2, r3
 80068b8:	2310      	movs	r3, #16
 80068ba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c8:	461a      	mov	r2, r3
 80068ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068ce:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	b2d2      	uxtb	r2, r2
 80068d8:	4611      	mov	r1, r2
 80068da:	4618      	mov	r0, r3
 80068dc:	f009 fa21 	bl	800fd22 <USB_HC_Halt>
 80068e0:	e034      	b.n	800694c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f4:	2b80      	cmp	r3, #128	; 0x80
 80068f6:	d129      	bne.n	800694c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	0151      	lsls	r1, r2, #5
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	440a      	add	r2, r1
 800690e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006912:	f043 0302 	orr.w	r3, r3, #2
 8006916:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	212c      	movs	r1, #44	; 0x2c
 800691e:	fb01 f303 	mul.w	r3, r1, r3
 8006922:	4413      	add	r3, r2
 8006924:	3361      	adds	r3, #97	; 0x61
 8006926:	2206      	movs	r2, #6
 8006928:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	b2d2      	uxtb	r2, r2
 8006932:	4611      	mov	r1, r2
 8006934:	4618      	mov	r0, r3
 8006936:	f009 f9f4 	bl	800fd22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	4413      	add	r3, r2
 8006942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006946:	461a      	mov	r2, r3
 8006948:	2380      	movs	r3, #128	; 0x80
 800694a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	4413      	add	r3, r2
 8006954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800695e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006962:	d122      	bne.n	80069aa <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	4413      	add	r3, r2
 800696c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	0151      	lsls	r1, r2, #5
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	440a      	add	r2, r1
 800697a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800697e:	f043 0302 	orr.w	r3, r3, #2
 8006982:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	4611      	mov	r1, r2
 800698e:	4618      	mov	r0, r3
 8006990:	f009 f9c7 	bl	800fd22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	4413      	add	r3, r2
 800699c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a0:	461a      	mov	r2, r3
 80069a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069a6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80069a8:	e2ba      	b.n	8006f20 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	2b01      	cmp	r3, #1
 80069be:	f040 811b 	bne.w	8006bf8 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d019      	beq.n	80069fe <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	212c      	movs	r1, #44	; 0x2c
 80069d0:	fb01 f303 	mul.w	r3, r1, r3
 80069d4:	4413      	add	r3, r2
 80069d6:	3348      	adds	r3, #72	; 0x48
 80069d8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	0159      	lsls	r1, r3, #5
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	440b      	add	r3, r1
 80069e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80069ec:	1ad2      	subs	r2, r2, r3
 80069ee:	6879      	ldr	r1, [r7, #4]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	202c      	movs	r0, #44	; 0x2c
 80069f4:	fb00 f303 	mul.w	r3, r0, r3
 80069f8:	440b      	add	r3, r1
 80069fa:	3350      	adds	r3, #80	; 0x50
 80069fc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	212c      	movs	r1, #44	; 0x2c
 8006a04:	fb01 f303 	mul.w	r3, r1, r3
 8006a08:	4413      	add	r3, r2
 8006a0a:	3361      	adds	r3, #97	; 0x61
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	212c      	movs	r1, #44	; 0x2c
 8006a16:	fb01 f303 	mul.w	r3, r1, r3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	335c      	adds	r3, #92	; 0x5c
 8006a1e:	2200      	movs	r2, #0
 8006a20:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a2e:	461a      	mov	r2, r3
 8006a30:	2301      	movs	r3, #1
 8006a32:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	212c      	movs	r1, #44	; 0x2c
 8006a3a:	fb01 f303 	mul.w	r3, r1, r3
 8006a3e:	4413      	add	r3, r2
 8006a40:	333f      	adds	r3, #63	; 0x3f
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d009      	beq.n	8006a5c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	212c      	movs	r1, #44	; 0x2c
 8006a4e:	fb01 f303 	mul.w	r3, r1, r3
 8006a52:	4413      	add	r3, r2
 8006a54:	333f      	adds	r3, #63	; 0x3f
 8006a56:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d121      	bne.n	8006aa0 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	0151      	lsls	r1, r2, #5
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	440a      	add	r2, r1
 8006a72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a76:	f043 0302 	orr.w	r3, r3, #2
 8006a7a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	4611      	mov	r1, r2
 8006a86:	4618      	mov	r0, r3
 8006a88:	f009 f94b 	bl	800fd22 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a98:	461a      	mov	r2, r3
 8006a9a:	2310      	movs	r3, #16
 8006a9c:	6093      	str	r3, [r2, #8]
 8006a9e:	e066      	b.n	8006b6e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	212c      	movs	r1, #44	; 0x2c
 8006aa6:	fb01 f303 	mul.w	r3, r1, r3
 8006aaa:	4413      	add	r3, r2
 8006aac:	333f      	adds	r3, #63	; 0x3f
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	2b03      	cmp	r3, #3
 8006ab2:	d127      	bne.n	8006b04 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	0151      	lsls	r1, r2, #5
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	440a      	add	r2, r1
 8006aca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ace:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ad2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	212c      	movs	r1, #44	; 0x2c
 8006ada:	fb01 f303 	mul.w	r3, r1, r3
 8006ade:	4413      	add	r3, r2
 8006ae0:	3360      	adds	r3, #96	; 0x60
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	b2d9      	uxtb	r1, r3
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	202c      	movs	r0, #44	; 0x2c
 8006af0:	fb00 f303 	mul.w	r3, r0, r3
 8006af4:	4413      	add	r3, r2
 8006af6:	3360      	adds	r3, #96	; 0x60
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	461a      	mov	r2, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f00b f94b 	bl	8011d98 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006b02:	e034      	b.n	8006b6e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	212c      	movs	r1, #44	; 0x2c
 8006b0a:	fb01 f303 	mul.w	r3, r1, r3
 8006b0e:	4413      	add	r3, r2
 8006b10:	333f      	adds	r3, #63	; 0x3f
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d12a      	bne.n	8006b6e <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	212c      	movs	r1, #44	; 0x2c
 8006b1e:	fb01 f303 	mul.w	r3, r1, r3
 8006b22:	4413      	add	r3, r2
 8006b24:	3360      	adds	r3, #96	; 0x60
 8006b26:	2201      	movs	r2, #1
 8006b28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	212c      	movs	r1, #44	; 0x2c
 8006b30:	fb01 f303 	mul.w	r3, r1, r3
 8006b34:	4413      	add	r3, r2
 8006b36:	3354      	adds	r3, #84	; 0x54
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	f083 0301 	eor.w	r3, r3, #1
 8006b3e:	b2d8      	uxtb	r0, r3
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	212c      	movs	r1, #44	; 0x2c
 8006b46:	fb01 f303 	mul.w	r3, r1, r3
 8006b4a:	4413      	add	r3, r2
 8006b4c:	3354      	adds	r3, #84	; 0x54
 8006b4e:	4602      	mov	r2, r0
 8006b50:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	b2d9      	uxtb	r1, r3
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	202c      	movs	r0, #44	; 0x2c
 8006b5c:	fb00 f303 	mul.w	r3, r0, r3
 8006b60:	4413      	add	r3, r2
 8006b62:	3360      	adds	r3, #96	; 0x60
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f00b f915 	bl	8011d98 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d12b      	bne.n	8006bce <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	212c      	movs	r1, #44	; 0x2c
 8006b7c:	fb01 f303 	mul.w	r3, r1, r3
 8006b80:	4413      	add	r3, r2
 8006b82:	3348      	adds	r3, #72	; 0x48
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6879      	ldr	r1, [r7, #4]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	202c      	movs	r0, #44	; 0x2c
 8006b8c:	fb00 f202 	mul.w	r2, r0, r2
 8006b90:	440a      	add	r2, r1
 8006b92:	3240      	adds	r2, #64	; 0x40
 8006b94:	8812      	ldrh	r2, [r2, #0]
 8006b96:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f000 81be 	beq.w	8006f20 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	212c      	movs	r1, #44	; 0x2c
 8006baa:	fb01 f303 	mul.w	r3, r1, r3
 8006bae:	4413      	add	r3, r2
 8006bb0:	3354      	adds	r3, #84	; 0x54
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	f083 0301 	eor.w	r3, r3, #1
 8006bb8:	b2d8      	uxtb	r0, r3
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	212c      	movs	r1, #44	; 0x2c
 8006bc0:	fb01 f303 	mul.w	r3, r1, r3
 8006bc4:	4413      	add	r3, r2
 8006bc6:	3354      	adds	r3, #84	; 0x54
 8006bc8:	4602      	mov	r2, r0
 8006bca:	701a      	strb	r2, [r3, #0]
}
 8006bcc:	e1a8      	b.n	8006f20 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	212c      	movs	r1, #44	; 0x2c
 8006bd4:	fb01 f303 	mul.w	r3, r1, r3
 8006bd8:	4413      	add	r3, r2
 8006bda:	3354      	adds	r3, #84	; 0x54
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	f083 0301 	eor.w	r3, r3, #1
 8006be2:	b2d8      	uxtb	r0, r3
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	212c      	movs	r1, #44	; 0x2c
 8006bea:	fb01 f303 	mul.w	r3, r1, r3
 8006bee:	4413      	add	r3, r2
 8006bf0:	3354      	adds	r3, #84	; 0x54
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	701a      	strb	r2, [r3, #0]
}
 8006bf6:	e193      	b.n	8006f20 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	f040 8106 	bne.w	8006e1c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	0151      	lsls	r1, r2, #5
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	440a      	add	r2, r1
 8006c26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c2a:	f023 0302 	bic.w	r3, r3, #2
 8006c2e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	212c      	movs	r1, #44	; 0x2c
 8006c36:	fb01 f303 	mul.w	r3, r1, r3
 8006c3a:	4413      	add	r3, r2
 8006c3c:	3361      	adds	r3, #97	; 0x61
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d109      	bne.n	8006c58 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	212c      	movs	r1, #44	; 0x2c
 8006c4a:	fb01 f303 	mul.w	r3, r1, r3
 8006c4e:	4413      	add	r3, r2
 8006c50:	3360      	adds	r3, #96	; 0x60
 8006c52:	2201      	movs	r2, #1
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	e0c9      	b.n	8006dec <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	212c      	movs	r1, #44	; 0x2c
 8006c5e:	fb01 f303 	mul.w	r3, r1, r3
 8006c62:	4413      	add	r3, r2
 8006c64:	3361      	adds	r3, #97	; 0x61
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	2b05      	cmp	r3, #5
 8006c6a:	d109      	bne.n	8006c80 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	212c      	movs	r1, #44	; 0x2c
 8006c72:	fb01 f303 	mul.w	r3, r1, r3
 8006c76:	4413      	add	r3, r2
 8006c78:	3360      	adds	r3, #96	; 0x60
 8006c7a:	2205      	movs	r2, #5
 8006c7c:	701a      	strb	r2, [r3, #0]
 8006c7e:	e0b5      	b.n	8006dec <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	212c      	movs	r1, #44	; 0x2c
 8006c86:	fb01 f303 	mul.w	r3, r1, r3
 8006c8a:	4413      	add	r3, r2
 8006c8c:	3361      	adds	r3, #97	; 0x61
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	2b06      	cmp	r3, #6
 8006c92:	d009      	beq.n	8006ca8 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	212c      	movs	r1, #44	; 0x2c
 8006c9a:	fb01 f303 	mul.w	r3, r1, r3
 8006c9e:	4413      	add	r3, r2
 8006ca0:	3361      	adds	r3, #97	; 0x61
 8006ca2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006ca4:	2b08      	cmp	r3, #8
 8006ca6:	d150      	bne.n	8006d4a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	212c      	movs	r1, #44	; 0x2c
 8006cae:	fb01 f303 	mul.w	r3, r1, r3
 8006cb2:	4413      	add	r3, r2
 8006cb4:	335c      	adds	r3, #92	; 0x5c
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	1c5a      	adds	r2, r3, #1
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	202c      	movs	r0, #44	; 0x2c
 8006cc0:	fb00 f303 	mul.w	r3, r0, r3
 8006cc4:	440b      	add	r3, r1
 8006cc6:	335c      	adds	r3, #92	; 0x5c
 8006cc8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	212c      	movs	r1, #44	; 0x2c
 8006cd0:	fb01 f303 	mul.w	r3, r1, r3
 8006cd4:	4413      	add	r3, r2
 8006cd6:	335c      	adds	r3, #92	; 0x5c
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d912      	bls.n	8006d04 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	212c      	movs	r1, #44	; 0x2c
 8006ce4:	fb01 f303 	mul.w	r3, r1, r3
 8006ce8:	4413      	add	r3, r2
 8006cea:	335c      	adds	r3, #92	; 0x5c
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	212c      	movs	r1, #44	; 0x2c
 8006cf6:	fb01 f303 	mul.w	r3, r1, r3
 8006cfa:	4413      	add	r3, r2
 8006cfc:	3360      	adds	r3, #96	; 0x60
 8006cfe:	2204      	movs	r2, #4
 8006d00:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006d02:	e073      	b.n	8006dec <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	212c      	movs	r1, #44	; 0x2c
 8006d0a:	fb01 f303 	mul.w	r3, r1, r3
 8006d0e:	4413      	add	r3, r2
 8006d10:	3360      	adds	r3, #96	; 0x60
 8006d12:	2202      	movs	r2, #2
 8006d14:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	015a      	lsls	r2, r3, #5
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d2c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d34:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d42:	461a      	mov	r2, r3
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006d48:	e050      	b.n	8006dec <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	212c      	movs	r1, #44	; 0x2c
 8006d50:	fb01 f303 	mul.w	r3, r1, r3
 8006d54:	4413      	add	r3, r2
 8006d56:	3361      	adds	r3, #97	; 0x61
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d122      	bne.n	8006da4 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	212c      	movs	r1, #44	; 0x2c
 8006d64:	fb01 f303 	mul.w	r3, r1, r3
 8006d68:	4413      	add	r3, r2
 8006d6a:	3360      	adds	r3, #96	; 0x60
 8006d6c:	2202      	movs	r2, #2
 8006d6e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d86:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d8e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	6013      	str	r3, [r2, #0]
 8006da2:	e023      	b.n	8006dec <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	212c      	movs	r1, #44	; 0x2c
 8006daa:	fb01 f303 	mul.w	r3, r1, r3
 8006dae:	4413      	add	r3, r2
 8006db0:	3361      	adds	r3, #97	; 0x61
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2b07      	cmp	r3, #7
 8006db6:	d119      	bne.n	8006dec <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	212c      	movs	r1, #44	; 0x2c
 8006dbe:	fb01 f303 	mul.w	r3, r1, r3
 8006dc2:	4413      	add	r3, r2
 8006dc4:	335c      	adds	r3, #92	; 0x5c
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	1c5a      	adds	r2, r3, #1
 8006dca:	6879      	ldr	r1, [r7, #4]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	202c      	movs	r0, #44	; 0x2c
 8006dd0:	fb00 f303 	mul.w	r3, r0, r3
 8006dd4:	440b      	add	r3, r1
 8006dd6:	335c      	adds	r3, #92	; 0x5c
 8006dd8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	212c      	movs	r1, #44	; 0x2c
 8006de0:	fb01 f303 	mul.w	r3, r1, r3
 8006de4:	4413      	add	r3, r2
 8006de6:	3360      	adds	r3, #96	; 0x60
 8006de8:	2204      	movs	r2, #4
 8006dea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df8:	461a      	mov	r2, r3
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	b2d9      	uxtb	r1, r3
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	202c      	movs	r0, #44	; 0x2c
 8006e08:	fb00 f303 	mul.w	r3, r0, r3
 8006e0c:	4413      	add	r3, r2
 8006e0e:	3360      	adds	r3, #96	; 0x60
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f00a ffbf 	bl	8011d98 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006e1a:	e081      	b.n	8006f20 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f003 0310 	and.w	r3, r3, #16
 8006e2e:	2b10      	cmp	r3, #16
 8006e30:	d176      	bne.n	8006f20 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	212c      	movs	r1, #44	; 0x2c
 8006e38:	fb01 f303 	mul.w	r3, r1, r3
 8006e3c:	4413      	add	r3, r2
 8006e3e:	333f      	adds	r3, #63	; 0x3f
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d121      	bne.n	8006e8a <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	212c      	movs	r1, #44	; 0x2c
 8006e4c:	fb01 f303 	mul.w	r3, r1, r3
 8006e50:	4413      	add	r3, r2
 8006e52:	335c      	adds	r3, #92	; 0x5c
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	0151      	lsls	r1, r2, #5
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	440a      	add	r2, r1
 8006e6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e72:	f043 0302 	orr.w	r3, r3, #2
 8006e76:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	b2d2      	uxtb	r2, r2
 8006e80:	4611      	mov	r1, r2
 8006e82:	4618      	mov	r0, r3
 8006e84:	f008 ff4d 	bl	800fd22 <USB_HC_Halt>
 8006e88:	e041      	b.n	8006f0e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	212c      	movs	r1, #44	; 0x2c
 8006e90:	fb01 f303 	mul.w	r3, r1, r3
 8006e94:	4413      	add	r3, r2
 8006e96:	333f      	adds	r3, #63	; 0x3f
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d009      	beq.n	8006eb2 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	212c      	movs	r1, #44	; 0x2c
 8006ea4:	fb01 f303 	mul.w	r3, r1, r3
 8006ea8:	4413      	add	r3, r2
 8006eaa:	333f      	adds	r3, #63	; 0x3f
 8006eac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d12d      	bne.n	8006f0e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	212c      	movs	r1, #44	; 0x2c
 8006eb8:	fb01 f303 	mul.w	r3, r1, r3
 8006ebc:	4413      	add	r3, r2
 8006ebe:	335c      	adds	r3, #92	; 0x5c
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d120      	bne.n	8006f0e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	212c      	movs	r1, #44	; 0x2c
 8006ed2:	fb01 f303 	mul.w	r3, r1, r3
 8006ed6:	4413      	add	r3, r2
 8006ed8:	3361      	adds	r3, #97	; 0x61
 8006eda:	2203      	movs	r2, #3
 8006edc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	0151      	lsls	r1, r2, #5
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	440a      	add	r2, r1
 8006ef4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ef8:	f043 0302 	orr.w	r3, r3, #2
 8006efc:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	b2d2      	uxtb	r2, r2
 8006f06:	4611      	mov	r1, r2
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f008 ff0a 	bl	800fd22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	6093      	str	r3, [r2, #8]
}
 8006f20:	bf00      	nop
 8006f22:	3718      	adds	r7, #24
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	460b      	mov	r3, r1
 8006f32:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8006f3e:	78fb      	ldrb	r3, [r7, #3]
 8006f40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f003 0304 	and.w	r3, r3, #4
 8006f54:	2b04      	cmp	r3, #4
 8006f56:	d119      	bne.n	8006f8c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f64:	461a      	mov	r2, r3
 8006f66:	2304      	movs	r3, #4
 8006f68:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	0151      	lsls	r1, r2, #5
 8006f7c:	69ba      	ldr	r2, [r7, #24]
 8006f7e:	440a      	add	r2, r1
 8006f80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f84:	f043 0302 	orr.w	r3, r3, #2
 8006f88:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8006f8a:	e3c6      	b.n	800771a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f003 0320 	and.w	r3, r3, #32
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	d13e      	bne.n	8007020 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fae:	461a      	mov	r2, r3
 8006fb0:	2320      	movs	r3, #32
 8006fb2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	212c      	movs	r1, #44	; 0x2c
 8006fba:	fb01 f303 	mul.w	r3, r1, r3
 8006fbe:	4413      	add	r3, r2
 8006fc0:	333d      	adds	r3, #61	; 0x3d
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	f040 83a8 	bne.w	800771a <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	212c      	movs	r1, #44	; 0x2c
 8006fd0:	fb01 f303 	mul.w	r3, r1, r3
 8006fd4:	4413      	add	r3, r2
 8006fd6:	333d      	adds	r3, #61	; 0x3d
 8006fd8:	2200      	movs	r2, #0
 8006fda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	212c      	movs	r1, #44	; 0x2c
 8006fe2:	fb01 f303 	mul.w	r3, r1, r3
 8006fe6:	4413      	add	r3, r2
 8006fe8:	3360      	adds	r3, #96	; 0x60
 8006fea:	2202      	movs	r2, #2
 8006fec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	0151      	lsls	r1, r2, #5
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	440a      	add	r2, r1
 8007004:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007008:	f043 0302 	orr.w	r3, r3, #2
 800700c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	b2d2      	uxtb	r2, r2
 8007016:	4611      	mov	r1, r2
 8007018:	4618      	mov	r0, r3
 800701a:	f008 fe82 	bl	800fd22 <USB_HC_Halt>
}
 800701e:	e37c      	b.n	800771a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	4413      	add	r3, r2
 8007028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007036:	d122      	bne.n	800707e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	4413      	add	r3, r2
 8007040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	0151      	lsls	r1, r2, #5
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	440a      	add	r2, r1
 800704e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007052:	f043 0302 	orr.w	r3, r3, #2
 8007056:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	b2d2      	uxtb	r2, r2
 8007060:	4611      	mov	r1, r2
 8007062:	4618      	mov	r0, r3
 8007064:	f008 fe5d 	bl	800fd22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	4413      	add	r3, r2
 8007070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007074:	461a      	mov	r2, r3
 8007076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800707a:	6093      	str	r3, [r2, #8]
}
 800707c:	e34d      	b.n	800771a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	015a      	lsls	r2, r3, #5
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	4413      	add	r3, r2
 8007086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f003 0301 	and.w	r3, r3, #1
 8007090:	2b01      	cmp	r3, #1
 8007092:	d150      	bne.n	8007136 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	212c      	movs	r1, #44	; 0x2c
 800709a:	fb01 f303 	mul.w	r3, r1, r3
 800709e:	4413      	add	r3, r2
 80070a0:	335c      	adds	r3, #92	; 0x5c
 80070a2:	2200      	movs	r2, #0
 80070a4:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b8:	2b40      	cmp	r3, #64	; 0x40
 80070ba:	d111      	bne.n	80070e0 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	212c      	movs	r1, #44	; 0x2c
 80070c2:	fb01 f303 	mul.w	r3, r1, r3
 80070c6:	4413      	add	r3, r2
 80070c8:	333d      	adds	r3, #61	; 0x3d
 80070ca:	2201      	movs	r2, #1
 80070cc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070da:	461a      	mov	r2, r3
 80070dc:	2340      	movs	r3, #64	; 0x40
 80070de:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	0151      	lsls	r1, r2, #5
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	440a      	add	r2, r1
 80070f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070fa:	f043 0302 	orr.w	r3, r3, #2
 80070fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	b2d2      	uxtb	r2, r2
 8007108:	4611      	mov	r1, r2
 800710a:	4618      	mov	r0, r3
 800710c:	f008 fe09 	bl	800fd22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	4413      	add	r3, r2
 8007118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711c:	461a      	mov	r2, r3
 800711e:	2301      	movs	r3, #1
 8007120:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	212c      	movs	r1, #44	; 0x2c
 8007128:	fb01 f303 	mul.w	r3, r1, r3
 800712c:	4413      	add	r3, r2
 800712e:	3361      	adds	r3, #97	; 0x61
 8007130:	2201      	movs	r2, #1
 8007132:	701a      	strb	r2, [r3, #0]
}
 8007134:	e2f1      	b.n	800771a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	4413      	add	r3, r2
 800713e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007148:	2b40      	cmp	r3, #64	; 0x40
 800714a:	d13c      	bne.n	80071c6 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	212c      	movs	r1, #44	; 0x2c
 8007152:	fb01 f303 	mul.w	r3, r1, r3
 8007156:	4413      	add	r3, r2
 8007158:	3361      	adds	r3, #97	; 0x61
 800715a:	2204      	movs	r2, #4
 800715c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	212c      	movs	r1, #44	; 0x2c
 8007164:	fb01 f303 	mul.w	r3, r1, r3
 8007168:	4413      	add	r3, r2
 800716a:	333d      	adds	r3, #61	; 0x3d
 800716c:	2201      	movs	r2, #1
 800716e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	212c      	movs	r1, #44	; 0x2c
 8007176:	fb01 f303 	mul.w	r3, r1, r3
 800717a:	4413      	add	r3, r2
 800717c:	335c      	adds	r3, #92	; 0x5c
 800717e:	2200      	movs	r2, #0
 8007180:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	4413      	add	r3, r2
 800718a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	0151      	lsls	r1, r2, #5
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	440a      	add	r2, r1
 8007198:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800719c:	f043 0302 	orr.w	r3, r3, #2
 80071a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	b2d2      	uxtb	r2, r2
 80071aa:	4611      	mov	r1, r2
 80071ac:	4618      	mov	r0, r3
 80071ae:	f008 fdb8 	bl	800fd22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071be:	461a      	mov	r2, r3
 80071c0:	2340      	movs	r3, #64	; 0x40
 80071c2:	6093      	str	r3, [r2, #8]
}
 80071c4:	e2a9      	b.n	800771a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f003 0308 	and.w	r3, r3, #8
 80071d8:	2b08      	cmp	r3, #8
 80071da:	d12a      	bne.n	8007232 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071e8:	461a      	mov	r2, r3
 80071ea:	2308      	movs	r3, #8
 80071ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	0151      	lsls	r1, r2, #5
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	440a      	add	r2, r1
 8007204:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007208:	f043 0302 	orr.w	r3, r3, #2
 800720c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	b2d2      	uxtb	r2, r2
 8007216:	4611      	mov	r1, r2
 8007218:	4618      	mov	r0, r3
 800721a:	f008 fd82 	bl	800fd22 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	212c      	movs	r1, #44	; 0x2c
 8007224:	fb01 f303 	mul.w	r3, r1, r3
 8007228:	4413      	add	r3, r2
 800722a:	3361      	adds	r3, #97	; 0x61
 800722c:	2205      	movs	r2, #5
 800722e:	701a      	strb	r2, [r3, #0]
}
 8007230:	e273      	b.n	800771a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	4413      	add	r3, r2
 800723a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f003 0310 	and.w	r3, r3, #16
 8007244:	2b10      	cmp	r3, #16
 8007246:	d150      	bne.n	80072ea <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	212c      	movs	r1, #44	; 0x2c
 800724e:	fb01 f303 	mul.w	r3, r1, r3
 8007252:	4413      	add	r3, r2
 8007254:	335c      	adds	r3, #92	; 0x5c
 8007256:	2200      	movs	r2, #0
 8007258:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	212c      	movs	r1, #44	; 0x2c
 8007260:	fb01 f303 	mul.w	r3, r1, r3
 8007264:	4413      	add	r3, r2
 8007266:	3361      	adds	r3, #97	; 0x61
 8007268:	2203      	movs	r2, #3
 800726a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	212c      	movs	r1, #44	; 0x2c
 8007272:	fb01 f303 	mul.w	r3, r1, r3
 8007276:	4413      	add	r3, r2
 8007278:	333d      	adds	r3, #61	; 0x3d
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d112      	bne.n	80072a6 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	212c      	movs	r1, #44	; 0x2c
 8007286:	fb01 f303 	mul.w	r3, r1, r3
 800728a:	4413      	add	r3, r2
 800728c:	333c      	adds	r3, #60	; 0x3c
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d108      	bne.n	80072a6 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	212c      	movs	r1, #44	; 0x2c
 800729a:	fb01 f303 	mul.w	r3, r1, r3
 800729e:	4413      	add	r3, r2
 80072a0:	333d      	adds	r3, #61	; 0x3d
 80072a2:	2201      	movs	r2, #1
 80072a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	0151      	lsls	r1, r2, #5
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	440a      	add	r2, r1
 80072bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072c0:	f043 0302 	orr.w	r3, r3, #2
 80072c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	b2d2      	uxtb	r2, r2
 80072ce:	4611      	mov	r1, r2
 80072d0:	4618      	mov	r0, r3
 80072d2:	f008 fd26 	bl	800fd22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e2:	461a      	mov	r2, r3
 80072e4:	2310      	movs	r3, #16
 80072e6:	6093      	str	r3, [r2, #8]
}
 80072e8:	e217      	b.n	800771a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072fc:	2b80      	cmp	r3, #128	; 0x80
 80072fe:	d174      	bne.n	80073ea <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d121      	bne.n	800734c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	212c      	movs	r1, #44	; 0x2c
 800730e:	fb01 f303 	mul.w	r3, r1, r3
 8007312:	4413      	add	r3, r2
 8007314:	3361      	adds	r3, #97	; 0x61
 8007316:	2206      	movs	r2, #6
 8007318:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	4413      	add	r3, r2
 8007322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	0151      	lsls	r1, r2, #5
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	440a      	add	r2, r1
 8007330:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007334:	f043 0302 	orr.w	r3, r3, #2
 8007338:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	b2d2      	uxtb	r2, r2
 8007342:	4611      	mov	r1, r2
 8007344:	4618      	mov	r0, r3
 8007346:	f008 fcec 	bl	800fd22 <USB_HC_Halt>
 800734a:	e044      	b.n	80073d6 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	212c      	movs	r1, #44	; 0x2c
 8007352:	fb01 f303 	mul.w	r3, r1, r3
 8007356:	4413      	add	r3, r2
 8007358:	335c      	adds	r3, #92	; 0x5c
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	1c5a      	adds	r2, r3, #1
 800735e:	6879      	ldr	r1, [r7, #4]
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	202c      	movs	r0, #44	; 0x2c
 8007364:	fb00 f303 	mul.w	r3, r0, r3
 8007368:	440b      	add	r3, r1
 800736a:	335c      	adds	r3, #92	; 0x5c
 800736c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	212c      	movs	r1, #44	; 0x2c
 8007374:	fb01 f303 	mul.w	r3, r1, r3
 8007378:	4413      	add	r3, r2
 800737a:	335c      	adds	r3, #92	; 0x5c
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b02      	cmp	r3, #2
 8007380:	d920      	bls.n	80073c4 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	212c      	movs	r1, #44	; 0x2c
 8007388:	fb01 f303 	mul.w	r3, r1, r3
 800738c:	4413      	add	r3, r2
 800738e:	335c      	adds	r3, #92	; 0x5c
 8007390:	2200      	movs	r2, #0
 8007392:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	212c      	movs	r1, #44	; 0x2c
 800739a:	fb01 f303 	mul.w	r3, r1, r3
 800739e:	4413      	add	r3, r2
 80073a0:	3360      	adds	r3, #96	; 0x60
 80073a2:	2204      	movs	r2, #4
 80073a4:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	b2d9      	uxtb	r1, r3
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	202c      	movs	r0, #44	; 0x2c
 80073b0:	fb00 f303 	mul.w	r3, r0, r3
 80073b4:	4413      	add	r3, r2
 80073b6:	3360      	adds	r3, #96	; 0x60
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	461a      	mov	r2, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f00a fceb 	bl	8011d98 <HAL_HCD_HC_NotifyURBChange_Callback>
 80073c2:	e008      	b.n	80073d6 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	212c      	movs	r1, #44	; 0x2c
 80073ca:	fb01 f303 	mul.w	r3, r1, r3
 80073ce:	4413      	add	r3, r2
 80073d0:	3360      	adds	r3, #96	; 0x60
 80073d2:	2202      	movs	r2, #2
 80073d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073e2:	461a      	mov	r2, r3
 80073e4:	2380      	movs	r3, #128	; 0x80
 80073e6:	6093      	str	r3, [r2, #8]
}
 80073e8:	e197      	b.n	800771a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007400:	d134      	bne.n	800746c <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	4413      	add	r3, r2
 800740a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	0151      	lsls	r1, r2, #5
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	440a      	add	r2, r1
 8007418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800741c:	f043 0302 	orr.w	r3, r3, #2
 8007420:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	b2d2      	uxtb	r2, r2
 800742a:	4611      	mov	r1, r2
 800742c:	4618      	mov	r0, r3
 800742e:	f008 fc78 	bl	800fd22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	015a      	lsls	r2, r3, #5
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	4413      	add	r3, r2
 800743a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800743e:	461a      	mov	r2, r3
 8007440:	2310      	movs	r3, #16
 8007442:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	4413      	add	r3, r2
 800744c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007450:	461a      	mov	r2, r3
 8007452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007456:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	212c      	movs	r1, #44	; 0x2c
 800745e:	fb01 f303 	mul.w	r3, r1, r3
 8007462:	4413      	add	r3, r2
 8007464:	3361      	adds	r3, #97	; 0x61
 8007466:	2208      	movs	r2, #8
 8007468:	701a      	strb	r2, [r3, #0]
}
 800746a:	e156      	b.n	800771a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	015a      	lsls	r2, r3, #5
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	4413      	add	r3, r2
 8007474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 0302 	and.w	r3, r3, #2
 800747e:	2b02      	cmp	r3, #2
 8007480:	f040 814b 	bne.w	800771a <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	4413      	add	r3, r2
 800748c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	0151      	lsls	r1, r2, #5
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	440a      	add	r2, r1
 800749a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800749e:	f023 0302 	bic.w	r3, r3, #2
 80074a2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	212c      	movs	r1, #44	; 0x2c
 80074aa:	fb01 f303 	mul.w	r3, r1, r3
 80074ae:	4413      	add	r3, r2
 80074b0:	3361      	adds	r3, #97	; 0x61
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d179      	bne.n	80075ac <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	212c      	movs	r1, #44	; 0x2c
 80074be:	fb01 f303 	mul.w	r3, r1, r3
 80074c2:	4413      	add	r3, r2
 80074c4:	3360      	adds	r3, #96	; 0x60
 80074c6:	2201      	movs	r2, #1
 80074c8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	212c      	movs	r1, #44	; 0x2c
 80074d0:	fb01 f303 	mul.w	r3, r1, r3
 80074d4:	4413      	add	r3, r2
 80074d6:	333f      	adds	r3, #63	; 0x3f
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d00a      	beq.n	80074f4 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	212c      	movs	r1, #44	; 0x2c
 80074e4:	fb01 f303 	mul.w	r3, r1, r3
 80074e8:	4413      	add	r3, r2
 80074ea:	333f      	adds	r3, #63	; 0x3f
 80074ec:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	f040 80fc 	bne.w	80076ec <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d142      	bne.n	8007582 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	212c      	movs	r1, #44	; 0x2c
 8007502:	fb01 f303 	mul.w	r3, r1, r3
 8007506:	4413      	add	r3, r2
 8007508:	334c      	adds	r3, #76	; 0x4c
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	f000 80ed 	beq.w	80076ec <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	212c      	movs	r1, #44	; 0x2c
 8007518:	fb01 f303 	mul.w	r3, r1, r3
 800751c:	4413      	add	r3, r2
 800751e:	334c      	adds	r3, #76	; 0x4c
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	202c      	movs	r0, #44	; 0x2c
 8007528:	fb00 f202 	mul.w	r2, r0, r2
 800752c:	440a      	add	r2, r1
 800752e:	3240      	adds	r2, #64	; 0x40
 8007530:	8812      	ldrh	r2, [r2, #0]
 8007532:	4413      	add	r3, r2
 8007534:	3b01      	subs	r3, #1
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	202c      	movs	r0, #44	; 0x2c
 800753c:	fb00 f202 	mul.w	r2, r0, r2
 8007540:	440a      	add	r2, r1
 8007542:	3240      	adds	r2, #64	; 0x40
 8007544:	8812      	ldrh	r2, [r2, #0]
 8007546:	fbb3 f3f2 	udiv	r3, r3, r2
 800754a:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	2b00      	cmp	r3, #0
 8007554:	f000 80ca 	beq.w	80076ec <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	212c      	movs	r1, #44	; 0x2c
 800755e:	fb01 f303 	mul.w	r3, r1, r3
 8007562:	4413      	add	r3, r2
 8007564:	3355      	adds	r3, #85	; 0x55
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	f083 0301 	eor.w	r3, r3, #1
 800756c:	b2d8      	uxtb	r0, r3
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	212c      	movs	r1, #44	; 0x2c
 8007574:	fb01 f303 	mul.w	r3, r1, r3
 8007578:	4413      	add	r3, r2
 800757a:	3355      	adds	r3, #85	; 0x55
 800757c:	4602      	mov	r2, r0
 800757e:	701a      	strb	r2, [r3, #0]
 8007580:	e0b4      	b.n	80076ec <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	212c      	movs	r1, #44	; 0x2c
 8007588:	fb01 f303 	mul.w	r3, r1, r3
 800758c:	4413      	add	r3, r2
 800758e:	3355      	adds	r3, #85	; 0x55
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	f083 0301 	eor.w	r3, r3, #1
 8007596:	b2d8      	uxtb	r0, r3
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	212c      	movs	r1, #44	; 0x2c
 800759e:	fb01 f303 	mul.w	r3, r1, r3
 80075a2:	4413      	add	r3, r2
 80075a4:	3355      	adds	r3, #85	; 0x55
 80075a6:	4602      	mov	r2, r0
 80075a8:	701a      	strb	r2, [r3, #0]
 80075aa:	e09f      	b.n	80076ec <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	212c      	movs	r1, #44	; 0x2c
 80075b2:	fb01 f303 	mul.w	r3, r1, r3
 80075b6:	4413      	add	r3, r2
 80075b8:	3361      	adds	r3, #97	; 0x61
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d109      	bne.n	80075d4 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	212c      	movs	r1, #44	; 0x2c
 80075c6:	fb01 f303 	mul.w	r3, r1, r3
 80075ca:	4413      	add	r3, r2
 80075cc:	3360      	adds	r3, #96	; 0x60
 80075ce:	2202      	movs	r2, #2
 80075d0:	701a      	strb	r2, [r3, #0]
 80075d2:	e08b      	b.n	80076ec <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	212c      	movs	r1, #44	; 0x2c
 80075da:	fb01 f303 	mul.w	r3, r1, r3
 80075de:	4413      	add	r3, r2
 80075e0:	3361      	adds	r3, #97	; 0x61
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	d109      	bne.n	80075fc <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	212c      	movs	r1, #44	; 0x2c
 80075ee:	fb01 f303 	mul.w	r3, r1, r3
 80075f2:	4413      	add	r3, r2
 80075f4:	3360      	adds	r3, #96	; 0x60
 80075f6:	2202      	movs	r2, #2
 80075f8:	701a      	strb	r2, [r3, #0]
 80075fa:	e077      	b.n	80076ec <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	212c      	movs	r1, #44	; 0x2c
 8007602:	fb01 f303 	mul.w	r3, r1, r3
 8007606:	4413      	add	r3, r2
 8007608:	3361      	adds	r3, #97	; 0x61
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	2b05      	cmp	r3, #5
 800760e:	d109      	bne.n	8007624 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	212c      	movs	r1, #44	; 0x2c
 8007616:	fb01 f303 	mul.w	r3, r1, r3
 800761a:	4413      	add	r3, r2
 800761c:	3360      	adds	r3, #96	; 0x60
 800761e:	2205      	movs	r2, #5
 8007620:	701a      	strb	r2, [r3, #0]
 8007622:	e063      	b.n	80076ec <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	212c      	movs	r1, #44	; 0x2c
 800762a:	fb01 f303 	mul.w	r3, r1, r3
 800762e:	4413      	add	r3, r2
 8007630:	3361      	adds	r3, #97	; 0x61
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b06      	cmp	r3, #6
 8007636:	d009      	beq.n	800764c <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	212c      	movs	r1, #44	; 0x2c
 800763e:	fb01 f303 	mul.w	r3, r1, r3
 8007642:	4413      	add	r3, r2
 8007644:	3361      	adds	r3, #97	; 0x61
 8007646:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007648:	2b08      	cmp	r3, #8
 800764a:	d14f      	bne.n	80076ec <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	212c      	movs	r1, #44	; 0x2c
 8007652:	fb01 f303 	mul.w	r3, r1, r3
 8007656:	4413      	add	r3, r2
 8007658:	335c      	adds	r3, #92	; 0x5c
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	6879      	ldr	r1, [r7, #4]
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	202c      	movs	r0, #44	; 0x2c
 8007664:	fb00 f303 	mul.w	r3, r0, r3
 8007668:	440b      	add	r3, r1
 800766a:	335c      	adds	r3, #92	; 0x5c
 800766c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	212c      	movs	r1, #44	; 0x2c
 8007674:	fb01 f303 	mul.w	r3, r1, r3
 8007678:	4413      	add	r3, r2
 800767a:	335c      	adds	r3, #92	; 0x5c
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b02      	cmp	r3, #2
 8007680:	d912      	bls.n	80076a8 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	212c      	movs	r1, #44	; 0x2c
 8007688:	fb01 f303 	mul.w	r3, r1, r3
 800768c:	4413      	add	r3, r2
 800768e:	335c      	adds	r3, #92	; 0x5c
 8007690:	2200      	movs	r2, #0
 8007692:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	212c      	movs	r1, #44	; 0x2c
 800769a:	fb01 f303 	mul.w	r3, r1, r3
 800769e:	4413      	add	r3, r2
 80076a0:	3360      	adds	r3, #96	; 0x60
 80076a2:	2204      	movs	r2, #4
 80076a4:	701a      	strb	r2, [r3, #0]
 80076a6:	e021      	b.n	80076ec <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	212c      	movs	r1, #44	; 0x2c
 80076ae:	fb01 f303 	mul.w	r3, r1, r3
 80076b2:	4413      	add	r3, r2
 80076b4:	3360      	adds	r3, #96	; 0x60
 80076b6:	2202      	movs	r2, #2
 80076b8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	015a      	lsls	r2, r3, #5
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	4413      	add	r3, r2
 80076c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076d0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076d8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076e6:	461a      	mov	r2, r3
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	015a      	lsls	r2, r3, #5
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076f8:	461a      	mov	r2, r3
 80076fa:	2302      	movs	r3, #2
 80076fc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	b2d9      	uxtb	r1, r3
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	202c      	movs	r0, #44	; 0x2c
 8007708:	fb00 f303 	mul.w	r3, r0, r3
 800770c:	4413      	add	r3, r2
 800770e:	3360      	adds	r3, #96	; 0x60
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f00a fb3f 	bl	8011d98 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800771a:	bf00      	nop
 800771c:	3720      	adds	r7, #32
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b08a      	sub	sp, #40	; 0x28
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	f003 030f 	and.w	r3, r3, #15
 8007742:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	0c5b      	lsrs	r3, r3, #17
 8007748:	f003 030f 	and.w	r3, r3, #15
 800774c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	091b      	lsrs	r3, r3, #4
 8007752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007756:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	2b02      	cmp	r3, #2
 800775c:	d004      	beq.n	8007768 <HCD_RXQLVL_IRQHandler+0x46>
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2b05      	cmp	r3, #5
 8007762:	f000 80a9 	beq.w	80078b8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007766:	e0aa      	b.n	80078be <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 80a6 	beq.w	80078bc <HCD_RXQLVL_IRQHandler+0x19a>
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	212c      	movs	r1, #44	; 0x2c
 8007776:	fb01 f303 	mul.w	r3, r1, r3
 800777a:	4413      	add	r3, r2
 800777c:	3344      	adds	r3, #68	; 0x44
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 809b 	beq.w	80078bc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	212c      	movs	r1, #44	; 0x2c
 800778c:	fb01 f303 	mul.w	r3, r1, r3
 8007790:	4413      	add	r3, r2
 8007792:	3350      	adds	r3, #80	; 0x50
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	441a      	add	r2, r3
 800779a:	6879      	ldr	r1, [r7, #4]
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	202c      	movs	r0, #44	; 0x2c
 80077a0:	fb00 f303 	mul.w	r3, r0, r3
 80077a4:	440b      	add	r3, r1
 80077a6:	334c      	adds	r3, #76	; 0x4c
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d87a      	bhi.n	80078a4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6818      	ldr	r0, [r3, #0]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	212c      	movs	r1, #44	; 0x2c
 80077b8:	fb01 f303 	mul.w	r3, r1, r3
 80077bc:	4413      	add	r3, r2
 80077be:	3344      	adds	r3, #68	; 0x44
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	b292      	uxth	r2, r2
 80077c6:	4619      	mov	r1, r3
 80077c8:	f007 ff4b 	bl	800f662 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	212c      	movs	r1, #44	; 0x2c
 80077d2:	fb01 f303 	mul.w	r3, r1, r3
 80077d6:	4413      	add	r3, r2
 80077d8:	3344      	adds	r3, #68	; 0x44
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	441a      	add	r2, r3
 80077e0:	6879      	ldr	r1, [r7, #4]
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	202c      	movs	r0, #44	; 0x2c
 80077e6:	fb00 f303 	mul.w	r3, r0, r3
 80077ea:	440b      	add	r3, r1
 80077ec:	3344      	adds	r3, #68	; 0x44
 80077ee:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	212c      	movs	r1, #44	; 0x2c
 80077f6:	fb01 f303 	mul.w	r3, r1, r3
 80077fa:	4413      	add	r3, r2
 80077fc:	3350      	adds	r3, #80	; 0x50
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	441a      	add	r2, r3
 8007804:	6879      	ldr	r1, [r7, #4]
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	202c      	movs	r0, #44	; 0x2c
 800780a:	fb00 f303 	mul.w	r3, r0, r3
 800780e:	440b      	add	r3, r1
 8007810:	3350      	adds	r3, #80	; 0x50
 8007812:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	4413      	add	r3, r2
 800781c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	0cdb      	lsrs	r3, r3, #19
 8007824:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007828:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	212c      	movs	r1, #44	; 0x2c
 8007830:	fb01 f303 	mul.w	r3, r1, r3
 8007834:	4413      	add	r3, r2
 8007836:	3340      	adds	r3, #64	; 0x40
 8007838:	881b      	ldrh	r3, [r3, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	4293      	cmp	r3, r2
 8007840:	d13c      	bne.n	80078bc <HCD_RXQLVL_IRQHandler+0x19a>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d039      	beq.n	80078bc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	015a      	lsls	r2, r3, #5
 800784c:	6a3b      	ldr	r3, [r7, #32]
 800784e:	4413      	add	r3, r2
 8007850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800785e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007866:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	015a      	lsls	r2, r3, #5
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	4413      	add	r3, r2
 8007870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007874:	461a      	mov	r2, r3
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	212c      	movs	r1, #44	; 0x2c
 8007880:	fb01 f303 	mul.w	r3, r1, r3
 8007884:	4413      	add	r3, r2
 8007886:	3354      	adds	r3, #84	; 0x54
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	f083 0301 	eor.w	r3, r3, #1
 800788e:	b2d8      	uxtb	r0, r3
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	212c      	movs	r1, #44	; 0x2c
 8007896:	fb01 f303 	mul.w	r3, r1, r3
 800789a:	4413      	add	r3, r2
 800789c:	3354      	adds	r3, #84	; 0x54
 800789e:	4602      	mov	r2, r0
 80078a0:	701a      	strb	r2, [r3, #0]
      break;
 80078a2:	e00b      	b.n	80078bc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	212c      	movs	r1, #44	; 0x2c
 80078aa:	fb01 f303 	mul.w	r3, r1, r3
 80078ae:	4413      	add	r3, r2
 80078b0:	3360      	adds	r3, #96	; 0x60
 80078b2:	2204      	movs	r2, #4
 80078b4:	701a      	strb	r2, [r3, #0]
      break;
 80078b6:	e001      	b.n	80078bc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80078b8:	bf00      	nop
 80078ba:	e000      	b.n	80078be <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80078bc:	bf00      	nop
  }
}
 80078be:	bf00      	nop
 80078c0:	3728      	adds	r7, #40	; 0x28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b086      	sub	sp, #24
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80078f2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f003 0302 	and.w	r3, r3, #2
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d10b      	bne.n	8007916 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b01      	cmp	r3, #1
 8007906:	d102      	bne.n	800790e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f00a fa29 	bl	8011d60 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	f043 0302 	orr.w	r3, r3, #2
 8007914:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f003 0308 	and.w	r3, r3, #8
 800791c:	2b08      	cmp	r3, #8
 800791e:	d132      	bne.n	8007986 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f043 0308 	orr.w	r3, r3, #8
 8007926:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f003 0304 	and.w	r3, r3, #4
 800792e:	2b04      	cmp	r3, #4
 8007930:	d126      	bne.n	8007980 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	2b02      	cmp	r3, #2
 8007938:	d113      	bne.n	8007962 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007940:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007944:	d106      	bne.n	8007954 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2102      	movs	r1, #2
 800794c:	4618      	mov	r0, r3
 800794e:	f007 fed2 	bl	800f6f6 <USB_InitFSLSPClkSel>
 8007952:	e011      	b.n	8007978 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2101      	movs	r1, #1
 800795a:	4618      	mov	r0, r3
 800795c:	f007 fecb 	bl	800f6f6 <USB_InitFSLSPClkSel>
 8007960:	e00a      	b.n	8007978 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d106      	bne.n	8007978 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007970:	461a      	mov	r2, r3
 8007972:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007976:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f00a fa1b 	bl	8011db4 <HAL_HCD_PortEnabled_Callback>
 800797e:	e002      	b.n	8007986 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f00a fa25 	bl	8011dd0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f003 0320 	and.w	r3, r3, #32
 800798c:	2b20      	cmp	r3, #32
 800798e:	d103      	bne.n	8007998 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	f043 0320 	orr.w	r3, r3, #32
 8007996:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800799e:	461a      	mov	r2, r3
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	6013      	str	r3, [r2, #0]
}
 80079a4:	bf00      	nop
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e07f      	b.n	8007abe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d106      	bne.n	80079d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7fb f838 	bl	8002a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2224      	movs	r2, #36	; 0x24
 80079dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 0201 	bic.w	r2, r2, #1
 80079ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80079fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	689a      	ldr	r2, [r3, #8]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d107      	bne.n	8007a26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	689a      	ldr	r2, [r3, #8]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a22:	609a      	str	r2, [r3, #8]
 8007a24:	e006      	b.n	8007a34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	689a      	ldr	r2, [r3, #8]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007a32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d104      	bne.n	8007a46 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6859      	ldr	r1, [r3, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	4b1d      	ldr	r3, [pc, #116]	; (8007ac8 <HAL_I2C_Init+0x11c>)
 8007a52:	430b      	orrs	r3, r1
 8007a54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68da      	ldr	r2, [r3, #12]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691a      	ldr	r2, [r3, #16]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	ea42 0103 	orr.w	r1, r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	021a      	lsls	r2, r3, #8
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	69d9      	ldr	r1, [r3, #28]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a1a      	ldr	r2, [r3, #32]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f042 0201 	orr.w	r2, r2, #1
 8007a9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2220      	movs	r2, #32
 8007aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	02008000 	.word	0x02008000

08007acc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e021      	b.n	8007b22 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2224      	movs	r2, #36	; 0x24
 8007ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f022 0201 	bic.w	r2, r2, #1
 8007af4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7fb f81e 	bl	8002b38 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
	...

08007b2c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b088      	sub	sp, #32
 8007b30:	af02      	add	r7, sp, #8
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	4608      	mov	r0, r1
 8007b36:	4611      	mov	r1, r2
 8007b38:	461a      	mov	r2, r3
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	817b      	strh	r3, [r7, #10]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	813b      	strh	r3, [r7, #8]
 8007b42:	4613      	mov	r3, r2
 8007b44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b20      	cmp	r3, #32
 8007b50:	f040 80f9 	bne.w	8007d46 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b54:	6a3b      	ldr	r3, [r7, #32]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d002      	beq.n	8007b60 <HAL_I2C_Mem_Write+0x34>
 8007b5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d105      	bne.n	8007b6c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b66:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e0ed      	b.n	8007d48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d101      	bne.n	8007b7a <HAL_I2C_Mem_Write+0x4e>
 8007b76:	2302      	movs	r3, #2
 8007b78:	e0e6      	b.n	8007d48 <HAL_I2C_Mem_Write+0x21c>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007b82:	f7fc fb4b 	bl	800421c <HAL_GetTick>
 8007b86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	2319      	movs	r3, #25
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 f955 	bl	8007e44 <I2C_WaitOnFlagUntilTimeout>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e0d1      	b.n	8007d48 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2221      	movs	r2, #33	; 0x21
 8007ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2240      	movs	r2, #64	; 0x40
 8007bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a3a      	ldr	r2, [r7, #32]
 8007bbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007bcc:	88f8      	ldrh	r0, [r7, #6]
 8007bce:	893a      	ldrh	r2, [r7, #8]
 8007bd0:	8979      	ldrh	r1, [r7, #10]
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	9301      	str	r3, [sp, #4]
 8007bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	4603      	mov	r3, r0
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 f8b9 	bl	8007d54 <I2C_RequestMemoryWrite>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d005      	beq.n	8007bf4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e0a9      	b.n	8007d48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	2bff      	cmp	r3, #255	; 0xff
 8007bfc:	d90e      	bls.n	8007c1c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	22ff      	movs	r2, #255	; 0xff
 8007c02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	8979      	ldrh	r1, [r7, #10]
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 fa37 	bl	8008088 <I2C_TransferConfig>
 8007c1a:	e00f      	b.n	8007c3c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	8979      	ldrh	r1, [r7, #10]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 fa26 	bl	8008088 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f000 f93f 	bl	8007ec4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d001      	beq.n	8007c50 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e07b      	b.n	8007d48 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	781a      	ldrb	r2, [r3, #0]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d034      	beq.n	8007cf4 <HAL_I2C_Mem_Write+0x1c8>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d130      	bne.n	8007cf4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c98:	2200      	movs	r2, #0
 8007c9a:	2180      	movs	r1, #128	; 0x80
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f000 f8d1 	bl	8007e44 <I2C_WaitOnFlagUntilTimeout>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e04d      	b.n	8007d48 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	2bff      	cmp	r3, #255	; 0xff
 8007cb4:	d90e      	bls.n	8007cd4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	22ff      	movs	r2, #255	; 0xff
 8007cba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	8979      	ldrh	r1, [r7, #10]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 f9db 	bl	8008088 <I2C_TransferConfig>
 8007cd2:	e00f      	b.n	8007cf4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	8979      	ldrh	r1, [r7, #10]
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 f9ca 	bl	8008088 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d19e      	bne.n	8007c3c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f000 f91e 	bl	8007f44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d001      	beq.n	8007d12 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e01a      	b.n	8007d48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2220      	movs	r2, #32
 8007d18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6859      	ldr	r1, [r3, #4]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	4b0a      	ldr	r3, [pc, #40]	; (8007d50 <HAL_I2C_Mem_Write+0x224>)
 8007d26:	400b      	ands	r3, r1
 8007d28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	e000      	b.n	8007d48 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007d46:	2302      	movs	r3, #2
  }
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3718      	adds	r7, #24
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	fe00e800 	.word	0xfe00e800

08007d54 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af02      	add	r7, sp, #8
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	4608      	mov	r0, r1
 8007d5e:	4611      	mov	r1, r2
 8007d60:	461a      	mov	r2, r3
 8007d62:	4603      	mov	r3, r0
 8007d64:	817b      	strh	r3, [r7, #10]
 8007d66:	460b      	mov	r3, r1
 8007d68:	813b      	strh	r3, [r7, #8]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007d6e:	88fb      	ldrh	r3, [r7, #6]
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	8979      	ldrh	r1, [r7, #10]
 8007d74:	4b20      	ldr	r3, [pc, #128]	; (8007df8 <I2C_RequestMemoryWrite+0xa4>)
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 f983 	bl	8008088 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d82:	69fa      	ldr	r2, [r7, #28]
 8007d84:	69b9      	ldr	r1, [r7, #24]
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 f89c 	bl	8007ec4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e02c      	b.n	8007df0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d96:	88fb      	ldrh	r3, [r7, #6]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d105      	bne.n	8007da8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d9c:	893b      	ldrh	r3, [r7, #8]
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	629a      	str	r2, [r3, #40]	; 0x28
 8007da6:	e015      	b.n	8007dd4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007da8:	893b      	ldrh	r3, [r7, #8]
 8007daa:	0a1b      	lsrs	r3, r3, #8
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007db6:	69fa      	ldr	r2, [r7, #28]
 8007db8:	69b9      	ldr	r1, [r7, #24]
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 f882 	bl	8007ec4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e012      	b.n	8007df0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007dca:	893b      	ldrh	r3, [r7, #8]
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2180      	movs	r1, #128	; 0x80
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f000 f830 	bl	8007e44 <I2C_WaitOnFlagUntilTimeout>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e000      	b.n	8007df0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	80002000 	.word	0x80002000

08007dfc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d103      	bne.n	8007e1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2200      	movs	r2, #0
 8007e18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	f003 0301 	and.w	r3, r3, #1
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d007      	beq.n	8007e38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	699a      	ldr	r2, [r3, #24]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f042 0201 	orr.w	r2, r2, #1
 8007e36:	619a      	str	r2, [r3, #24]
  }
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	603b      	str	r3, [r7, #0]
 8007e50:	4613      	mov	r3, r2
 8007e52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e54:	e022      	b.n	8007e9c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e5c:	d01e      	beq.n	8007e9c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e5e:	f7fc f9dd 	bl	800421c <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d302      	bcc.n	8007e74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d113      	bne.n	8007e9c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e78:	f043 0220 	orr.w	r2, r3, #32
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2220      	movs	r2, #32
 8007e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e00f      	b.n	8007ebc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	699a      	ldr	r2, [r3, #24]
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	bf0c      	ite	eq
 8007eac:	2301      	moveq	r3, #1
 8007eae:	2300      	movne	r3, #0
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	79fb      	ldrb	r3, [r7, #7]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d0cd      	beq.n	8007e56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007ed0:	e02c      	b.n	8007f2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	68b9      	ldr	r1, [r7, #8]
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f000 f870 	bl	8007fbc <I2C_IsAcknowledgeFailed>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e02a      	b.n	8007f3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007eec:	d01e      	beq.n	8007f2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eee:	f7fc f995 	bl	800421c <HAL_GetTick>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d302      	bcc.n	8007f04 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d113      	bne.n	8007f2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f08:	f043 0220 	orr.w	r2, r3, #32
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2220      	movs	r2, #32
 8007f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e007      	b.n	8007f3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	f003 0302 	and.w	r3, r3, #2
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d1cb      	bne.n	8007ed2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f50:	e028      	b.n	8007fa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	68b9      	ldr	r1, [r7, #8]
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f000 f830 	bl	8007fbc <I2C_IsAcknowledgeFailed>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e026      	b.n	8007fb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f66:	f7fc f959 	bl	800421c <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d302      	bcc.n	8007f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d113      	bne.n	8007fa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f80:	f043 0220 	orr.w	r2, r3, #32
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e007      	b.n	8007fb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	f003 0320 	and.w	r3, r3, #32
 8007fae:	2b20      	cmp	r3, #32
 8007fb0:	d1cf      	bne.n	8007f52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	f003 0310 	and.w	r3, r3, #16
 8007fd2:	2b10      	cmp	r3, #16
 8007fd4:	d151      	bne.n	800807a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fd6:	e022      	b.n	800801e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fde:	d01e      	beq.n	800801e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fe0:	f7fc f91c 	bl	800421c <HAL_GetTick>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d302      	bcc.n	8007ff6 <I2C_IsAcknowledgeFailed+0x3a>
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d113      	bne.n	800801e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ffa:	f043 0220 	orr.w	r2, r3, #32
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2220      	movs	r2, #32
 8008006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e02e      	b.n	800807c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	f003 0320 	and.w	r3, r3, #32
 8008028:	2b20      	cmp	r3, #32
 800802a:	d1d5      	bne.n	8007fd8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2210      	movs	r2, #16
 8008032:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2220      	movs	r2, #32
 800803a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f7ff fedd 	bl	8007dfc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6859      	ldr	r1, [r3, #4]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	4b0d      	ldr	r3, [pc, #52]	; (8008084 <I2C_IsAcknowledgeFailed+0xc8>)
 800804e:	400b      	ands	r3, r1
 8008050:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008056:	f043 0204 	orr.w	r2, r3, #4
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2220      	movs	r2, #32
 8008062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e000      	b.n	800807c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	fe00e800 	.word	0xfe00e800

08008088 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	607b      	str	r3, [r7, #4]
 8008092:	460b      	mov	r3, r1
 8008094:	817b      	strh	r3, [r7, #10]
 8008096:	4613      	mov	r3, r2
 8008098:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	0d5b      	lsrs	r3, r3, #21
 80080a4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80080a8:	4b0d      	ldr	r3, [pc, #52]	; (80080e0 <I2C_TransferConfig+0x58>)
 80080aa:	430b      	orrs	r3, r1
 80080ac:	43db      	mvns	r3, r3
 80080ae:	ea02 0103 	and.w	r1, r2, r3
 80080b2:	897b      	ldrh	r3, [r7, #10]
 80080b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80080b8:	7a7b      	ldrb	r3, [r7, #9]
 80080ba:	041b      	lsls	r3, r3, #16
 80080bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080c0:	431a      	orrs	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	431a      	orrs	r2, r3
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	431a      	orrs	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	430a      	orrs	r2, r1
 80080d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80080d2:	bf00      	nop
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	03ff63ff 	.word	0x03ff63ff

080080e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b20      	cmp	r3, #32
 80080f8:	d138      	bne.n	800816c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008100:	2b01      	cmp	r3, #1
 8008102:	d101      	bne.n	8008108 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008104:	2302      	movs	r3, #2
 8008106:	e032      	b.n	800816e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2224      	movs	r2, #36	; 0x24
 8008114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f022 0201 	bic.w	r2, r2, #1
 8008126:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008136:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6819      	ldr	r1, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	683a      	ldr	r2, [r7, #0]
 8008144:	430a      	orrs	r2, r1
 8008146:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f042 0201 	orr.w	r2, r2, #1
 8008156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2220      	movs	r2, #32
 800815c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	e000      	b.n	800816e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800816c:	2302      	movs	r3, #2
  }
}
 800816e:	4618      	mov	r0, r3
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800817a:	b480      	push	{r7}
 800817c:	b085      	sub	sp, #20
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800818a:	b2db      	uxtb	r3, r3
 800818c:	2b20      	cmp	r3, #32
 800818e:	d139      	bne.n	8008204 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008196:	2b01      	cmp	r3, #1
 8008198:	d101      	bne.n	800819e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800819a:	2302      	movs	r3, #2
 800819c:	e033      	b.n	8008206 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2224      	movs	r2, #36	; 0x24
 80081aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f022 0201 	bic.w	r2, r2, #1
 80081bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80081cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	021b      	lsls	r3, r3, #8
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f042 0201 	orr.w	r2, r2, #1
 80081ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2220      	movs	r2, #32
 80081f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	e000      	b.n	8008206 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008204:	2302      	movs	r3, #2
  }
}
 8008206:	4618      	mov	r0, r3
 8008208:	3714      	adds	r7, #20
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
	...

08008214 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e0bf      	b.n	80083a6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	d106      	bne.n	8008240 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f7fa fcb8 	bl	8002bb0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	699a      	ldr	r2, [r3, #24]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008256:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6999      	ldr	r1, [r3, #24]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800826c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	430a      	orrs	r2, r1
 800827a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6899      	ldr	r1, [r3, #8]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	4b4a      	ldr	r3, [pc, #296]	; (80083b0 <HAL_LTDC_Init+0x19c>)
 8008288:	400b      	ands	r3, r1
 800828a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	041b      	lsls	r3, r3, #16
 8008292:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6899      	ldr	r1, [r3, #8]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	699a      	ldr	r2, [r3, #24]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	431a      	orrs	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	430a      	orrs	r2, r1
 80082a8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68d9      	ldr	r1, [r3, #12]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	4b3e      	ldr	r3, [pc, #248]	; (80083b0 <HAL_LTDC_Init+0x19c>)
 80082b6:	400b      	ands	r3, r1
 80082b8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	041b      	lsls	r3, r3, #16
 80082c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68d9      	ldr	r1, [r3, #12]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a1a      	ldr	r2, [r3, #32]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	431a      	orrs	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	430a      	orrs	r2, r1
 80082d6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6919      	ldr	r1, [r3, #16]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	4b33      	ldr	r3, [pc, #204]	; (80083b0 <HAL_LTDC_Init+0x19c>)
 80082e4:	400b      	ands	r3, r1
 80082e6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ec:	041b      	lsls	r3, r3, #16
 80082ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6919      	ldr	r1, [r3, #16]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	431a      	orrs	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	430a      	orrs	r2, r1
 8008304:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	6959      	ldr	r1, [r3, #20]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	4b27      	ldr	r3, [pc, #156]	; (80083b0 <HAL_LTDC_Init+0x19c>)
 8008312:	400b      	ands	r3, r1
 8008314:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831a:	041b      	lsls	r3, r3, #16
 800831c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	6959      	ldr	r1, [r3, #20]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	431a      	orrs	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	430a      	orrs	r2, r1
 8008332:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800833a:	021b      	lsls	r3, r3, #8
 800833c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008344:	041b      	lsls	r3, r3, #16
 8008346:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008356:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4313      	orrs	r3, r2
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800836a:	431a      	orrs	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	430a      	orrs	r2, r1
 8008372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f042 0206 	orr.w	r2, r2, #6
 8008382:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	699a      	ldr	r2, [r3, #24]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f042 0201 	orr.w	r2, r2, #1
 8008392:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	f000f800 	.word	0xf000f800

080083b4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80083b4:	b5b0      	push	{r4, r5, r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d101      	bne.n	80083ce <HAL_LTDC_ConfigLayer+0x1a>
 80083ca:	2302      	movs	r3, #2
 80083cc:	e02c      	b.n	8008428 <HAL_LTDC_ConfigLayer+0x74>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2201      	movs	r2, #1
 80083d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2202      	movs	r2, #2
 80083da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2134      	movs	r1, #52	; 0x34
 80083e4:	fb01 f303 	mul.w	r3, r1, r3
 80083e8:	4413      	add	r3, r2
 80083ea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	4614      	mov	r4, r2
 80083f2:	461d      	mov	r5, r3
 80083f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008400:	682b      	ldr	r3, [r5, #0]
 8008402:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	68b9      	ldr	r1, [r7, #8]
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 f847 	bl	800849c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2201      	movs	r2, #1
 8008414:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bdb0      	pop	{r4, r5, r7, pc}

08008430 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008442:	2b01      	cmp	r3, #1
 8008444:	d101      	bne.n	800844a <HAL_LTDC_SetAddress+0x1a>
 8008446:	2302      	movs	r3, #2
 8008448:	e024      	b.n	8008494 <HAL_LTDC_SetAddress+0x64>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2202      	movs	r2, #2
 8008456:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2234      	movs	r2, #52	; 0x34
 800845e:	fb02 f303 	mul.w	r3, r2, r3
 8008462:	3338      	adds	r3, #56	; 0x38
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	4413      	add	r3, r2
 8008468:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	6979      	ldr	r1, [r7, #20]
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 f811 	bl	800849c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2201      	movs	r2, #1
 8008480:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3718      	adds	r7, #24
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800849c:	b480      	push	{r7}
 800849e:	b089      	sub	sp, #36	; 0x24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	0c1b      	lsrs	r3, r3, #16
 80084b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084b8:	4413      	add	r3, r2
 80084ba:	041b      	lsls	r3, r3, #16
 80084bc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	461a      	mov	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	01db      	lsls	r3, r3, #7
 80084c8:	4413      	add	r3, r2
 80084ca:	3384      	adds	r3, #132	; 0x84
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	6812      	ldr	r2, [r2, #0]
 80084d2:	4611      	mov	r1, r2
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	01d2      	lsls	r2, r2, #7
 80084d8:	440a      	add	r2, r1
 80084da:	3284      	adds	r2, #132	; 0x84
 80084dc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80084e0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	0c1b      	lsrs	r3, r3, #16
 80084ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084f2:	4413      	add	r3, r2
 80084f4:	1c5a      	adds	r2, r3, #1
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4619      	mov	r1, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	01db      	lsls	r3, r3, #7
 8008500:	440b      	add	r3, r1
 8008502:	3384      	adds	r3, #132	; 0x84
 8008504:	4619      	mov	r1, r3
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	4313      	orrs	r3, r2
 800850a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	68da      	ldr	r2, [r3, #12]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800851a:	4413      	add	r3, r2
 800851c:	041b      	lsls	r3, r3, #16
 800851e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	461a      	mov	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	01db      	lsls	r3, r3, #7
 800852a:	4413      	add	r3, r2
 800852c:	3384      	adds	r3, #132	; 0x84
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	6812      	ldr	r2, [r2, #0]
 8008534:	4611      	mov	r1, r2
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	01d2      	lsls	r2, r2, #7
 800853a:	440a      	add	r2, r1
 800853c:	3284      	adds	r2, #132	; 0x84
 800853e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008542:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	689a      	ldr	r2, [r3, #8]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008552:	4413      	add	r3, r2
 8008554:	1c5a      	adds	r2, r3, #1
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4619      	mov	r1, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	01db      	lsls	r3, r3, #7
 8008560:	440b      	add	r3, r1
 8008562:	3384      	adds	r3, #132	; 0x84
 8008564:	4619      	mov	r1, r3
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	4313      	orrs	r3, r2
 800856a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	461a      	mov	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	01db      	lsls	r3, r3, #7
 8008576:	4413      	add	r3, r2
 8008578:	3384      	adds	r3, #132	; 0x84
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	6812      	ldr	r2, [r2, #0]
 8008580:	4611      	mov	r1, r2
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	01d2      	lsls	r2, r2, #7
 8008586:	440a      	add	r2, r1
 8008588:	3284      	adds	r2, #132	; 0x84
 800858a:	f023 0307 	bic.w	r3, r3, #7
 800858e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	461a      	mov	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	01db      	lsls	r3, r3, #7
 800859a:	4413      	add	r3, r2
 800859c:	3384      	adds	r3, #132	; 0x84
 800859e:	461a      	mov	r2, r3
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80085ac:	021b      	lsls	r3, r3, #8
 80085ae:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80085b6:	041b      	lsls	r3, r3, #16
 80085b8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	061b      	lsls	r3, r3, #24
 80085c0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	461a      	mov	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	01db      	lsls	r3, r3, #7
 80085cc:	4413      	add	r3, r2
 80085ce:	3384      	adds	r3, #132	; 0x84
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	01db      	lsls	r3, r3, #7
 80085dc:	4413      	add	r3, r2
 80085de:	3384      	adds	r3, #132	; 0x84
 80085e0:	461a      	mov	r2, r3
 80085e2:	2300      	movs	r3, #0
 80085e4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80085ec:	461a      	mov	r2, r3
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	431a      	orrs	r2, r3
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	431a      	orrs	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4619      	mov	r1, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	01db      	lsls	r3, r3, #7
 8008600:	440b      	add	r3, r1
 8008602:	3384      	adds	r3, #132	; 0x84
 8008604:	4619      	mov	r1, r3
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	4313      	orrs	r3, r2
 800860a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	461a      	mov	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	01db      	lsls	r3, r3, #7
 8008616:	4413      	add	r3, r2
 8008618:	3384      	adds	r3, #132	; 0x84
 800861a:	695b      	ldr	r3, [r3, #20]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	6812      	ldr	r2, [r2, #0]
 8008620:	4611      	mov	r1, r2
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	01d2      	lsls	r2, r2, #7
 8008626:	440a      	add	r2, r1
 8008628:	3284      	adds	r2, #132	; 0x84
 800862a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800862e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	461a      	mov	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	01db      	lsls	r3, r3, #7
 800863a:	4413      	add	r3, r2
 800863c:	3384      	adds	r3, #132	; 0x84
 800863e:	461a      	mov	r2, r3
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	695b      	ldr	r3, [r3, #20]
 8008644:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	01db      	lsls	r3, r3, #7
 8008650:	4413      	add	r3, r2
 8008652:	3384      	adds	r3, #132	; 0x84
 8008654:	69da      	ldr	r2, [r3, #28]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4619      	mov	r1, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	01db      	lsls	r3, r3, #7
 8008660:	440b      	add	r3, r1
 8008662:	3384      	adds	r3, #132	; 0x84
 8008664:	4619      	mov	r1, r3
 8008666:	4b58      	ldr	r3, [pc, #352]	; (80087c8 <LTDC_SetConfig+0x32c>)
 8008668:	4013      	ands	r3, r2
 800866a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	69da      	ldr	r2, [r3, #28]
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	6a1b      	ldr	r3, [r3, #32]
 8008674:	68f9      	ldr	r1, [r7, #12]
 8008676:	6809      	ldr	r1, [r1, #0]
 8008678:	4608      	mov	r0, r1
 800867a:	6879      	ldr	r1, [r7, #4]
 800867c:	01c9      	lsls	r1, r1, #7
 800867e:	4401      	add	r1, r0
 8008680:	3184      	adds	r1, #132	; 0x84
 8008682:	4313      	orrs	r3, r2
 8008684:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	01db      	lsls	r3, r3, #7
 8008690:	4413      	add	r3, r2
 8008692:	3384      	adds	r3, #132	; 0x84
 8008694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	461a      	mov	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	01db      	lsls	r3, r3, #7
 80086a0:	4413      	add	r3, r2
 80086a2:	3384      	adds	r3, #132	; 0x84
 80086a4:	461a      	mov	r2, r3
 80086a6:	2300      	movs	r3, #0
 80086a8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	461a      	mov	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	01db      	lsls	r3, r3, #7
 80086b4:	4413      	add	r3, r2
 80086b6:	3384      	adds	r3, #132	; 0x84
 80086b8:	461a      	mov	r2, r3
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086be:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d102      	bne.n	80086ce <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80086c8:	2304      	movs	r3, #4
 80086ca:	61fb      	str	r3, [r7, #28]
 80086cc:	e01b      	b.n	8008706 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d102      	bne.n	80086dc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80086d6:	2303      	movs	r3, #3
 80086d8:	61fb      	str	r3, [r7, #28]
 80086da:	e014      	b.n	8008706 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	2b04      	cmp	r3, #4
 80086e2:	d00b      	beq.n	80086fc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d007      	beq.n	80086fc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80086f0:	2b03      	cmp	r3, #3
 80086f2:	d003      	beq.n	80086fc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80086f8:	2b07      	cmp	r3, #7
 80086fa:	d102      	bne.n	8008702 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80086fc:	2302      	movs	r3, #2
 80086fe:	61fb      	str	r3, [r7, #28]
 8008700:	e001      	b.n	8008706 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8008702:	2301      	movs	r3, #1
 8008704:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	461a      	mov	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	01db      	lsls	r3, r3, #7
 8008710:	4413      	add	r3, r2
 8008712:	3384      	adds	r3, #132	; 0x84
 8008714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	6812      	ldr	r2, [r2, #0]
 800871a:	4611      	mov	r1, r2
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	01d2      	lsls	r2, r2, #7
 8008720:	440a      	add	r2, r1
 8008722:	3284      	adds	r2, #132	; 0x84
 8008724:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008728:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872e:	69fa      	ldr	r2, [r7, #28]
 8008730:	fb02 f303 	mul.w	r3, r2, r3
 8008734:	041a      	lsls	r2, r3, #16
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	6859      	ldr	r1, [r3, #4]
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	1acb      	subs	r3, r1, r3
 8008740:	69f9      	ldr	r1, [r7, #28]
 8008742:	fb01 f303 	mul.w	r3, r1, r3
 8008746:	3303      	adds	r3, #3
 8008748:	68f9      	ldr	r1, [r7, #12]
 800874a:	6809      	ldr	r1, [r1, #0]
 800874c:	4608      	mov	r0, r1
 800874e:	6879      	ldr	r1, [r7, #4]
 8008750:	01c9      	lsls	r1, r1, #7
 8008752:	4401      	add	r1, r0
 8008754:	3184      	adds	r1, #132	; 0x84
 8008756:	4313      	orrs	r3, r2
 8008758:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	461a      	mov	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	01db      	lsls	r3, r3, #7
 8008764:	4413      	add	r3, r2
 8008766:	3384      	adds	r3, #132	; 0x84
 8008768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4619      	mov	r1, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	01db      	lsls	r3, r3, #7
 8008774:	440b      	add	r3, r1
 8008776:	3384      	adds	r3, #132	; 0x84
 8008778:	4619      	mov	r1, r3
 800877a:	4b14      	ldr	r3, [pc, #80]	; (80087cc <LTDC_SetConfig+0x330>)
 800877c:	4013      	ands	r3, r2
 800877e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	461a      	mov	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	01db      	lsls	r3, r3, #7
 800878a:	4413      	add	r3, r2
 800878c:	3384      	adds	r3, #132	; 0x84
 800878e:	461a      	mov	r2, r3
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008794:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	461a      	mov	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	01db      	lsls	r3, r3, #7
 80087a0:	4413      	add	r3, r2
 80087a2:	3384      	adds	r3, #132	; 0x84
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	6812      	ldr	r2, [r2, #0]
 80087aa:	4611      	mov	r1, r2
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	01d2      	lsls	r2, r2, #7
 80087b0:	440a      	add	r2, r1
 80087b2:	3284      	adds	r2, #132	; 0x84
 80087b4:	f043 0301 	orr.w	r3, r3, #1
 80087b8:	6013      	str	r3, [r2, #0]
}
 80087ba:	bf00      	nop
 80087bc:	3724      	adds	r7, #36	; 0x24
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	fffff8f8 	.word	0xfffff8f8
 80087cc:	fffff800 	.word	0xfffff800

080087d0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80087d0:	b480      	push	{r7}
 80087d2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80087d4:	4b05      	ldr	r3, [pc, #20]	; (80087ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a04      	ldr	r2, [pc, #16]	; (80087ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80087da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087de:	6013      	str	r3, [r2, #0]
}
 80087e0:	bf00      	nop
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	40007000 	.word	0x40007000

080087f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80087f6:	2300      	movs	r3, #0
 80087f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80087fa:	4b23      	ldr	r3, [pc, #140]	; (8008888 <HAL_PWREx_EnableOverDrive+0x98>)
 80087fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fe:	4a22      	ldr	r2, [pc, #136]	; (8008888 <HAL_PWREx_EnableOverDrive+0x98>)
 8008800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008804:	6413      	str	r3, [r2, #64]	; 0x40
 8008806:	4b20      	ldr	r3, [pc, #128]	; (8008888 <HAL_PWREx_EnableOverDrive+0x98>)
 8008808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800880e:	603b      	str	r3, [r7, #0]
 8008810:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008812:	4b1e      	ldr	r3, [pc, #120]	; (800888c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a1d      	ldr	r2, [pc, #116]	; (800888c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800881c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800881e:	f7fb fcfd 	bl	800421c <HAL_GetTick>
 8008822:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008824:	e009      	b.n	800883a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008826:	f7fb fcf9 	bl	800421c <HAL_GetTick>
 800882a:	4602      	mov	r2, r0
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008834:	d901      	bls.n	800883a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008836:	2303      	movs	r3, #3
 8008838:	e022      	b.n	8008880 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800883a:	4b14      	ldr	r3, [pc, #80]	; (800888c <HAL_PWREx_EnableOverDrive+0x9c>)
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008846:	d1ee      	bne.n	8008826 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008848:	4b10      	ldr	r3, [pc, #64]	; (800888c <HAL_PWREx_EnableOverDrive+0x9c>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a0f      	ldr	r2, [pc, #60]	; (800888c <HAL_PWREx_EnableOverDrive+0x9c>)
 800884e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008852:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008854:	f7fb fce2 	bl	800421c <HAL_GetTick>
 8008858:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800885a:	e009      	b.n	8008870 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800885c:	f7fb fcde 	bl	800421c <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800886a:	d901      	bls.n	8008870 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e007      	b.n	8008880 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008870:	4b06      	ldr	r3, [pc, #24]	; (800888c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008878:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800887c:	d1ee      	bne.n	800885c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	40023800 	.word	0x40023800
 800888c:	40007000 	.word	0x40007000

08008890 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af02      	add	r7, sp, #8
 8008896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008898:	f7fb fcc0 	bl	800421c <HAL_GetTick>
 800889c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d101      	bne.n	80088a8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e067      	b.n	8008978 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10b      	bne.n	80088cc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7fa fa37 	bl	8002d30 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80088c2:	f241 3188 	movw	r1, #5000	; 0x1388
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fda8 	bl	800941c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	3b01      	subs	r3, #1
 80088dc:	021a      	lsls	r2, r3, #8
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	430a      	orrs	r2, r1
 80088e4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	2120      	movs	r1, #32
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fdd3 	bl	800949e <QSPI_WaitFlagStateUntilTimeout>
 80088f8:	4603      	mov	r3, r0
 80088fa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80088fc:	7afb      	ldrb	r3, [r7, #11]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d135      	bne.n	800896e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	4b1d      	ldr	r3, [pc, #116]	; (8008980 <HAL_QSPI_Init+0xf0>)
 800890a:	4013      	ands	r3, r2
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	6852      	ldr	r2, [r2, #4]
 8008910:	0611      	lsls	r1, r2, #24
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	68d2      	ldr	r2, [r2, #12]
 8008916:	4311      	orrs	r1, r2
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	69d2      	ldr	r2, [r2, #28]
 800891c:	4311      	orrs	r1, r2
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	6a12      	ldr	r2, [r2, #32]
 8008922:	4311      	orrs	r1, r2
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	6812      	ldr	r2, [r2, #0]
 8008928:	430b      	orrs	r3, r1
 800892a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	685a      	ldr	r2, [r3, #4]
 8008932:	4b14      	ldr	r3, [pc, #80]	; (8008984 <HAL_QSPI_Init+0xf4>)
 8008934:	4013      	ands	r3, r2
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	6912      	ldr	r2, [r2, #16]
 800893a:	0411      	lsls	r1, r2, #16
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	6952      	ldr	r2, [r2, #20]
 8008940:	4311      	orrs	r1, r2
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	6992      	ldr	r2, [r2, #24]
 8008946:	4311      	orrs	r1, r2
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	6812      	ldr	r2, [r2, #0]
 800894c:	430b      	orrs	r3, r1
 800894e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f042 0201 	orr.w	r2, r2, #1
 800895e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008976:	7afb      	ldrb	r3, [r7, #11]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	00ffff2f 	.word	0x00ffff2f
 8008984:	ffe0f8fe 	.word	0xffe0f8fe

08008988 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b086      	sub	sp, #24
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f003 0304 	and.w	r3, r3, #4
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d064      	beq.n	8008a74 <HAL_QSPI_IRQHandler+0xec>
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d05f      	beq.n	8008a74 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	3320      	adds	r3, #32
 80089ba:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b12      	cmp	r3, #18
 80089c6:	d125      	bne.n	8008a14 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80089c8:	e01c      	b.n	8008a04 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00f      	beq.n	80089f2 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d6:	781a      	ldrb	r2, [r3, #0]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e0:	1c5a      	adds	r2, r3, #1
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ea:	1e5a      	subs	r2, r3, #1
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80089f0:	e008      	b.n	8008a04 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a00:	601a      	str	r2, [r3, #0]
          break;
 8008a02:	e033      	b.n	8008a6c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f003 0304 	and.w	r3, r3, #4
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1db      	bne.n	80089ca <HAL_QSPI_IRQHandler+0x42>
 8008a12:	e02b      	b.n	8008a6c <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b22      	cmp	r3, #34	; 0x22
 8008a1e:	d125      	bne.n	8008a6c <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8008a20:	e01d      	b.n	8008a5e <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d010      	beq.n	8008a4c <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	7812      	ldrb	r2, [r2, #0]
 8008a32:	b2d2      	uxtb	r2, r2
 8008a34:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3a:	1c5a      	adds	r2, r3, #1
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a44:	1e5a      	subs	r2, r3, #1
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	639a      	str	r2, [r3, #56]	; 0x38
 8008a4a:	e008      	b.n	8008a5e <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a5a:	601a      	str	r2, [r3, #0]
          break;
 8008a5c:	e006      	b.n	8008a6c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	f003 0304 	and.w	r3, r3, #4
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1da      	bne.n	8008a22 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fbed 	bl	800924c <HAL_QSPI_FifoThresholdCallback>
 8008a72:	e142      	b.n	8008cfa <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	f003 0302 	and.w	r3, r3, #2
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f000 80b6 	beq.w	8008bec <HAL_QSPI_IRQHandler+0x264>
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 80b0 	beq.w	8008bec <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2202      	movs	r2, #2
 8008a92:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8008aa2:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	2b12      	cmp	r3, #18
 8008aae:	d123      	bne.n	8008af8 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 0304 	and.w	r3, r3, #4
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d011      	beq.n	8008ae2 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f022 0204 	bic.w	r2, r2, #4
 8008acc:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f022 0201 	bic.w	r2, r2, #1
 8008ae0:	601a      	str	r2, [r3, #0]
      }

#if  defined(QSPI1_V1_0)
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fc3e 	bl	8009364 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fba1 	bl	8009238 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008af6:	e0fd      	b.n	8008cf4 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	2b22      	cmp	r3, #34	; 0x22
 8008b02:	d146      	bne.n	8008b92 <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 0304 	and.w	r3, r3, #4
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d012      	beq.n	8008b38 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f022 0204 	bic.w	r2, r2, #4
 8008b20:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f022 0201 	bic.w	r2, r2, #1
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	e021      	b.n	8008b7c <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3320      	adds	r3, #32
 8008b3e:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8008b40:	e013      	b.n	8008b6a <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d017      	beq.n	8008b7a <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	7812      	ldrb	r2, [r2, #0]
 8008b52:	b2d2      	uxtb	r2, r2
 8008b54:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b64:	1e5a      	subs	r2, r3, #1
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1e4      	bne.n	8008b42 <HAL_QSPI_IRQHandler+0x1ba>
 8008b78:	e000      	b.n	8008b7c <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8008b7a:	bf00      	nop
        }
      }

#if  defined(QSPI1_V1_0)
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fbf1 	bl	8009364 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fb4a 	bl	8009224 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008b90:	e0b0      	b.n	8008cf4 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d107      	bne.n	8008bae <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fb32 	bl	8009210 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008bac:	e0a2      	b.n	8008cf4 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b08      	cmp	r3, #8
 8008bb8:	f040 809c 	bne.w	8008cf4 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	695a      	ldr	r2, [r3, #20]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008bca:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d103      	bne.n	8008be4 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fb0d 	bl	80091fc <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008be2:	e087      	b.n	8008cf4 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 faff 	bl	80091e8 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008bea:	e083      	b.n	8008cf4 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	f003 0308 	and.w	r3, r3, #8
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d01f      	beq.n	8008c36 <HAL_QSPI_IRQHandler+0x2ae>
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d01a      	beq.n	8008c36 <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2208      	movs	r2, #8
 8008c06:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00b      	beq.n	8008c2e <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8008c24:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fb16 	bl	8009260 <HAL_QSPI_StatusMatchCallback>
 8008c34:	e061      	b.n	8008cfa <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d047      	beq.n	8008cd0 <HAL_QSPI_IRQHandler+0x348>
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d042      	beq.n	8008cd0 <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8008c60:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c66:	f043 0202 	orr.w	r2, r3, #2
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 0304 	and.w	r3, r3, #4
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d021      	beq.n	8008cc0 <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f022 0204 	bic.w	r2, r2, #4
 8008c8a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c90:	4a1c      	ldr	r2, [pc, #112]	; (8008d04 <HAL_QSPI_IRQHandler+0x37c>)
 8008c92:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fc fa59 	bl	8005150 <HAL_DMA_Abort_IT>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d029      	beq.n	8008cf8 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca8:	f043 0204 	orr.w	r2, r3, #4
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fa95 	bl	80091e8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008cbe:	e01b      	b.n	8008cf8 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fa8d 	bl	80091e8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008cce:	e013      	b.n	8008cf8 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	f003 0310 	and.w	r3, r3, #16
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00f      	beq.n	8008cfa <HAL_QSPI_IRQHandler+0x372>
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00a      	beq.n	8008cfa <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2210      	movs	r2, #16
 8008cea:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fac1 	bl	8009274 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8008cf2:	e002      	b.n	8008cfa <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008cf4:	bf00      	nop
 8008cf6:	e000      	b.n	8008cfa <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008cf8:	bf00      	nop
}
 8008cfa:	bf00      	nop
 8008cfc:	3718      	adds	r7, #24
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	08009439 	.word	0x08009439

08008d08 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b088      	sub	sp, #32
 8008d0c:	af02      	add	r7, sp, #8
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008d14:	f7fb fa82 	bl	800421c <HAL_GetTick>
 8008d18:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d101      	bne.n	8008d2a <HAL_QSPI_Command+0x22>
 8008d26:	2302      	movs	r3, #2
 8008d28:	e048      	b.n	8008dbc <HAL_QSPI_Command+0xb4>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d137      	bne.n	8008dae <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2202      	movs	r2, #2
 8008d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	2200      	movs	r2, #0
 8008d54:	2120      	movs	r1, #32
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	f000 fba1 	bl	800949e <QSPI_WaitFlagStateUntilTimeout>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8008d60:	7dfb      	ldrb	r3, [r7, #23]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d125      	bne.n	8008db2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8008d66:	2200      	movs	r2, #0
 8008d68:	68b9      	ldr	r1, [r7, #8]
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f000 fbce 	bl	800950c <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d115      	bne.n	8008da4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	2102      	movs	r1, #2
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f000 fb8b 	bl	800949e <QSPI_WaitFlagStateUntilTimeout>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8008d8c:	7dfb      	ldrb	r3, [r7, #23]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10f      	bne.n	8008db2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2202      	movs	r2, #2
 8008d98:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008da2:	e006      	b.n	8008db2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008dac:	e001      	b.n	8008db2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8008dae:	2302      	movs	r3, #2
 8008db0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3718      	adds	r7, #24
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b08a      	sub	sp, #40	; 0x28
 8008dc8:	af02      	add	r7, sp, #8
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8008dd4:	f7fb fa22 	bl	800421c <HAL_GetTick>
 8008dd8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	3320      	adds	r3, #32
 8008de0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d101      	bne.n	8008df2 <HAL_QSPI_Transmit+0x2e>
 8008dee:	2302      	movs	r3, #2
 8008df0:	e07b      	b.n	8008eea <HAL_QSPI_Transmit+0x126>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d16a      	bne.n	8008edc <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d05b      	beq.n	8008eca <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2212      	movs	r2, #18
 8008e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	1c5a      	adds	r2, r3, #1
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	1c5a      	adds	r2, r3, #1
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	68ba      	ldr	r2, [r7, #8]
 8008e36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	695a      	ldr	r2, [r3, #20]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008e46:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8008e48:	e01b      	b.n	8008e82 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	2201      	movs	r2, #1
 8008e52:	2104      	movs	r1, #4
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f000 fb22 	bl	800949e <QSPI_WaitFlagStateUntilTimeout>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8008e5e:	7ffb      	ldrb	r3, [r7, #31]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d113      	bne.n	8008e8c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e68:	781a      	ldrb	r2, [r3, #0]
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e72:	1c5a      	adds	r2, r3, #1
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7c:	1e5a      	subs	r2, r3, #1
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1df      	bne.n	8008e4a <HAL_QSPI_Transmit+0x86>
 8008e8a:	e000      	b.n	8008e8e <HAL_QSPI_Transmit+0xca>
          break;
 8008e8c:	bf00      	nop
      }

      if (status == HAL_OK)
 8008e8e:	7ffb      	ldrb	r3, [r7, #31]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d115      	bne.n	8008ec0 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	2102      	movs	r1, #2
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f000 fafd 	bl	800949e <QSPI_WaitFlagStateUntilTimeout>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8008ea8:	7ffb      	ldrb	r3, [r7, #31]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d108      	bne.n	8008ec0 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f000 f9e6 	bl	8009288 <HAL_QSPI_Abort>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ec8:	e00a      	b.n	8008ee0 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ece:	f043 0208 	orr.w	r2, r3, #8
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	77fb      	strb	r3, [r7, #31]
 8008eda:	e001      	b.n	8008ee0 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8008edc:	2302      	movs	r3, #2
 8008ede:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8008ee8:	7ffb      	ldrb	r3, [r7, #31]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3720      	adds	r7, #32
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b08a      	sub	sp, #40	; 0x28
 8008ef6:	af02      	add	r7, sp, #8
 8008ef8:	60f8      	str	r0, [r7, #12]
 8008efa:	60b9      	str	r1, [r7, #8]
 8008efc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008efe:	2300      	movs	r3, #0
 8008f00:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8008f02:	f7fb f98b 	bl	800421c <HAL_GetTick>
 8008f06:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	699b      	ldr	r3, [r3, #24]
 8008f0e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	3320      	adds	r3, #32
 8008f16:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d101      	bne.n	8008f28 <HAL_QSPI_Receive+0x36>
 8008f24:	2302      	movs	r3, #2
 8008f26:	e082      	b.n	800902e <HAL_QSPI_Receive+0x13c>
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d171      	bne.n	8009020 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d062      	beq.n	800900e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2222      	movs	r2, #34	; 0x22
 8008f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	1c5a      	adds	r2, r3, #1
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	695b      	ldr	r3, [r3, #20]
 8008f74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008f80:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8008f8a:	e01c      	b.n	8008fc6 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	2201      	movs	r2, #1
 8008f94:	2106      	movs	r1, #6
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f000 fa81 	bl	800949e <QSPI_WaitFlagStateUntilTimeout>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8008fa0:	7ffb      	ldrb	r3, [r7, #31]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d114      	bne.n	8008fd0 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008faa:	693a      	ldr	r2, [r7, #16]
 8008fac:	7812      	ldrb	r2, [r2, #0]
 8008fae:	b2d2      	uxtb	r2, r2
 8008fb0:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb6:	1c5a      	adds	r2, r3, #1
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc0:	1e5a      	subs	r2, r3, #1
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1de      	bne.n	8008f8c <HAL_QSPI_Receive+0x9a>
 8008fce:	e000      	b.n	8008fd2 <HAL_QSPI_Receive+0xe0>
          break;
 8008fd0:	bf00      	nop
      }

      if (status == HAL_OK)
 8008fd2:	7ffb      	ldrb	r3, [r7, #31]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d115      	bne.n	8009004 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	2102      	movs	r1, #2
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f000 fa5b 	bl	800949e <QSPI_WaitFlagStateUntilTimeout>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8008fec:	7ffb      	ldrb	r3, [r7, #31]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d108      	bne.n	8009004 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	f000 f944 	bl	8009288 <HAL_QSPI_Abort>
 8009000:	4603      	mov	r3, r0
 8009002:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800900c:	e00a      	b.n	8009024 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009012:	f043 0208 	orr.w	r2, r3, #8
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	77fb      	strb	r3, [r7, #31]
 800901e:	e001      	b.n	8009024 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8009020:	2302      	movs	r3, #2
 8009022:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800902c:	7ffb      	ldrb	r3, [r7, #31]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3720      	adds	r7, #32
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b088      	sub	sp, #32
 800903a:	af02      	add	r7, sp, #8
 800903c:	60f8      	str	r0, [r7, #12]
 800903e:	60b9      	str	r1, [r7, #8]
 8009040:	607a      	str	r2, [r7, #4]
 8009042:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009044:	f7fb f8ea 	bl	800421c <HAL_GetTick>
 8009048:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b01      	cmp	r3, #1
 8009054:	d101      	bne.n	800905a <HAL_QSPI_AutoPolling+0x24>
 8009056:	2302      	movs	r3, #2
 8009058:	e060      	b.n	800911c <HAL_QSPI_AutoPolling+0xe6>
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b01      	cmp	r3, #1
 800906c:	d14f      	bne.n	800910e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2242      	movs	r2, #66	; 0x42
 8009078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	2200      	movs	r2, #0
 8009084:	2120      	movs	r1, #32
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f000 fa09 	bl	800949e <QSPI_WaitFlagStateUntilTimeout>
 800908c:	4603      	mov	r3, r0
 800908e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8009090:	7dfb      	ldrb	r3, [r7, #23]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d13d      	bne.n	8009112 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	6812      	ldr	r2, [r2, #0]
 800909e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	6852      	ldr	r2, [r2, #4]
 80090a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	6892      	ldr	r2, [r2, #8]
 80090b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	431a      	orrs	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80090cc:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	68da      	ldr	r2, [r3, #12]
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80090d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80090da:	68b9      	ldr	r1, [r7, #8]
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f000 fa15 	bl	800950c <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	9300      	str	r3, [sp, #0]
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	2201      	movs	r2, #1
 80090ea:	2108      	movs	r1, #8
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f000 f9d6 	bl	800949e <QSPI_WaitFlagStateUntilTimeout>
 80090f2:	4603      	mov	r3, r0
 80090f4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80090f6:	7dfb      	ldrb	r3, [r7, #23]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10a      	bne.n	8009112 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2208      	movs	r2, #8
 8009102:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800910c:	e001      	b.n	8009112 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800910e:	2302      	movs	r3, #2
 8009110:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800911a:	7dfb      	ldrb	r3, [r7, #23]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3718      	adds	r7, #24
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b088      	sub	sp, #32
 8009128:	af02      	add	r7, sp, #8
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009130:	f7fb f874 	bl	800421c <HAL_GetTick>
 8009134:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800913c:	b2db      	uxtb	r3, r3
 800913e:	2b01      	cmp	r3, #1
 8009140:	d101      	bne.n	8009146 <HAL_QSPI_MemoryMapped+0x22>
 8009142:	2302      	movs	r3, #2
 8009144:	e04c      	b.n	80091e0 <HAL_QSPI_MemoryMapped+0xbc>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b01      	cmp	r3, #1
 8009158:	d13b      	bne.n	80091d2 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2282      	movs	r2, #130	; 0x82
 8009164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	2200      	movs	r2, #0
 8009172:	2120      	movs	r1, #32
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f000 f992 	bl	800949e <QSPI_WaitFlagStateUntilTimeout>
 800917a:	4603      	mov	r3, r0
 800917c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800917e:	7dfb      	ldrb	r3, [r7, #23]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d128      	bne.n	80091d6 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f023 0108 	bic.w	r1, r3, #8
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685a      	ldr	r2, [r3, #4]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	430a      	orrs	r2, r1
 8009198:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	2b08      	cmp	r3, #8
 80091a0:	d110      	bne.n	80091c4 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	6812      	ldr	r2, [r2, #0]
 80091aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2210      	movs	r2, #16
 80091b2:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80091c2:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80091c4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80091c8:	68b9      	ldr	r1, [r7, #8]
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 f99e 	bl	800950c <QSPI_Config>
 80091d0:	e001      	b.n	80091d6 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 80091d2:	2302      	movs	r3, #2
 80091d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80091de:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3718      	adds	r7, #24
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8009240:	bf00      	nop
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8009254:	bf00      	nop
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af02      	add	r7, sp, #8
 800928e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009290:	2300      	movs	r3, #0
 8009292:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8009294:	f7fa ffc2 	bl	800421c <HAL_GetTick>
 8009298:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	f003 0302 	and.w	r3, r3, #2
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d056      	beq.n	8009358 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 0304 	and.w	r3, r3, #4
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d017      	beq.n	80092f0 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0204 	bic.w	r2, r2, #4
 80092ce:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7fb fecb 	bl	8005070 <HAL_DMA_Abort>
 80092da:	4603      	mov	r3, r0
 80092dc:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80092de:	7bfb      	ldrb	r3, [r7, #15]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d005      	beq.n	80092f0 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092e8:	f043 0204 	orr.w	r2, r3, #4
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f042 0202 	orr.w	r2, r2, #2
 80092fe:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009304:	9300      	str	r3, [sp, #0]
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2201      	movs	r2, #1
 800930a:	2102      	movs	r1, #2
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f8c6 	bl	800949e <QSPI_WaitFlagStateUntilTimeout>
 8009312:	4603      	mov	r3, r0
 8009314:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009316:	7bfb      	ldrb	r3, [r7, #15]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d10e      	bne.n	800933a <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2202      	movs	r2, #2
 8009322:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	2200      	movs	r2, #0
 800932e:	2120      	movs	r1, #32
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f8b4 	bl	800949e <QSPI_WaitFlagStateUntilTimeout>
 8009336:	4603      	mov	r3, r0
 8009338:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800933a:	7bfb      	ldrb	r3, [r7, #15]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10b      	bne.n	8009358 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	695a      	ldr	r2, [r3, #20]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800934e:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8009358:	7bfb      	ldrb	r3, [r7, #15]
}
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
	...

08009364 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800936c:	2300      	movs	r3, #0
 800936e:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009376:	b2db      	uxtb	r3, r3
 8009378:	f003 0302 	and.w	r3, r3, #2
 800937c:	2b00      	cmp	r3, #0
 800937e:	d046      	beq.n	800940e <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2208      	movs	r2, #8
 800938c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800939e:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f003 0304 	and.w	r3, r3, #4
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d01b      	beq.n	80093e6 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f022 0204 	bic.w	r2, r2, #4
 80093bc:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c2:	4a15      	ldr	r2, [pc, #84]	; (8009418 <HAL_QSPI_Abort_IT+0xb4>)
 80093c4:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fb fec0 	bl	8005150 <HAL_DMA_Abort_IT>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d01b      	beq.n	800940e <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2201      	movs	r2, #1
 80093da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7ff ff0c 	bl	80091fc <HAL_QSPI_AbortCpltCallback>
 80093e4:	e013      	b.n	800940e <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2202      	movs	r2, #2
 80093ec:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80093fc:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f042 0202 	orr.w	r2, r2, #2
 800940c:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 800940e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	08009439 	.word	0x08009439

0800941c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	683a      	ldr	r2, [r7, #0]
 800942a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800942c:	bf00      	nop
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009444:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2200      	movs	r2, #0
 8009450:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b08      	cmp	r3, #8
 800945c:	d114      	bne.n	8009488 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2202      	movs	r2, #2
 8009464:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009474:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f042 0202 	orr.w	r2, r2, #2
 8009484:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8009486:	e006      	b.n	8009496 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f7ff fea9 	bl	80091e8 <HAL_QSPI_ErrorCallback>
}
 8009496:	bf00      	nop
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	60f8      	str	r0, [r7, #12]
 80094a6:	60b9      	str	r1, [r7, #8]
 80094a8:	603b      	str	r3, [r7, #0]
 80094aa:	4613      	mov	r3, r2
 80094ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80094ae:	e01a      	b.n	80094e6 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094b6:	d016      	beq.n	80094e6 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094b8:	f7fa feb0 	bl	800421c <HAL_GetTick>
 80094bc:	4602      	mov	r2, r0
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	69ba      	ldr	r2, [r7, #24]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d302      	bcc.n	80094ce <QSPI_WaitFlagStateUntilTimeout+0x30>
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10b      	bne.n	80094e6 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2204      	movs	r2, #4
 80094d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094da:	f043 0201 	orr.w	r2, r3, #1
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e00e      	b.n	8009504 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	689a      	ldr	r2, [r3, #8]
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	4013      	ands	r3, r2
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	bf14      	ite	ne
 80094f4:	2301      	movne	r3, #1
 80094f6:	2300      	moveq	r3, #0
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	461a      	mov	r2, r3
 80094fc:	79fb      	ldrb	r3, [r7, #7]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d1d6      	bne.n	80094b0 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951c:	2b00      	cmp	r3, #0
 800951e:	d009      	beq.n	8009534 <QSPI_Config+0x28>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009526:	d005      	beq.n	8009534 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	3a01      	subs	r2, #1
 8009532:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	2b00      	cmp	r3, #0
 800953a:	f000 80b9 	beq.w	80096b0 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d05f      	beq.n	8009606 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	6892      	ldr	r2, [r2, #8]
 800954e:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	69db      	ldr	r3, [r3, #28]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d031      	beq.n	80095bc <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009560:	431a      	orrs	r2, r3
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009566:	431a      	orrs	r2, r3
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956c:	431a      	orrs	r2, r3
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	049b      	lsls	r3, r3, #18
 8009574:	431a      	orrs	r2, r3
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	431a      	orrs	r2, r3
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	6a1b      	ldr	r3, [r3, #32]
 8009580:	431a      	orrs	r2, r3
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	431a      	orrs	r2, r3
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	69db      	ldr	r3, [r3, #28]
 800958c:	431a      	orrs	r2, r3
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	431a      	orrs	r2, r3
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	ea42 0103 	orr.w	r1, r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	430a      	orrs	r2, r1
 80095a4:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80095ac:	f000 812e 	beq.w	800980c <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	6852      	ldr	r2, [r2, #4]
 80095b8:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80095ba:	e127      	b.n	800980c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c4:	431a      	orrs	r2, r3
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ca:	431a      	orrs	r2, r3
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d0:	431a      	orrs	r2, r3
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	049b      	lsls	r3, r3, #18
 80095d8:	431a      	orrs	r2, r3
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	431a      	orrs	r2, r3
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	6a1b      	ldr	r3, [r3, #32]
 80095e4:	431a      	orrs	r2, r3
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	69db      	ldr	r3, [r3, #28]
 80095ea:	431a      	orrs	r2, r3
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	431a      	orrs	r2, r3
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	ea42 0103 	orr.w	r1, r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	430a      	orrs	r2, r1
 8009602:	615a      	str	r2, [r3, #20]
}
 8009604:	e102      	b.n	800980c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	69db      	ldr	r3, [r3, #28]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d02e      	beq.n	800966c <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009616:	431a      	orrs	r2, r3
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800961c:	431a      	orrs	r2, r3
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009622:	431a      	orrs	r2, r3
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	695b      	ldr	r3, [r3, #20]
 8009628:	049b      	lsls	r3, r3, #18
 800962a:	431a      	orrs	r2, r3
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	6a1b      	ldr	r3, [r3, #32]
 8009630:	431a      	orrs	r2, r3
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	431a      	orrs	r2, r3
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	69db      	ldr	r3, [r3, #28]
 800963c:	431a      	orrs	r2, r3
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	699b      	ldr	r3, [r3, #24]
 8009642:	431a      	orrs	r2, r3
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	ea42 0103 	orr.w	r1, r2, r3
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	430a      	orrs	r2, r1
 8009654:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800965c:	f000 80d6 	beq.w	800980c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	6852      	ldr	r2, [r2, #4]
 8009668:	619a      	str	r2, [r3, #24]
}
 800966a:	e0cf      	b.n	800980c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009674:	431a      	orrs	r2, r3
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800967a:	431a      	orrs	r2, r3
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009680:	431a      	orrs	r2, r3
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	049b      	lsls	r3, r3, #18
 8009688:	431a      	orrs	r2, r3
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	6a1b      	ldr	r3, [r3, #32]
 800968e:	431a      	orrs	r2, r3
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	69db      	ldr	r3, [r3, #28]
 8009694:	431a      	orrs	r2, r3
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	431a      	orrs	r2, r3
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	ea42 0103 	orr.w	r1, r2, r3
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	430a      	orrs	r2, r1
 80096ac:	615a      	str	r2, [r3, #20]
}
 80096ae:	e0ad      	b.n	800980c <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	6a1b      	ldr	r3, [r3, #32]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d058      	beq.n	800976a <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	6892      	ldr	r2, [r2, #8]
 80096c0:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	69db      	ldr	r3, [r3, #28]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d02d      	beq.n	8009726 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d2:	431a      	orrs	r2, r3
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d8:	431a      	orrs	r2, r3
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096de:	431a      	orrs	r2, r3
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	695b      	ldr	r3, [r3, #20]
 80096e4:	049b      	lsls	r3, r3, #18
 80096e6:	431a      	orrs	r2, r3
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	431a      	orrs	r2, r3
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	431a      	orrs	r2, r3
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	431a      	orrs	r2, r3
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	69db      	ldr	r3, [r3, #28]
 80096fe:	431a      	orrs	r2, r3
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	ea42 0103 	orr.w	r1, r2, r3
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	430a      	orrs	r2, r1
 8009710:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009718:	d078      	beq.n	800980c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	6852      	ldr	r2, [r2, #4]
 8009722:	619a      	str	r2, [r3, #24]
}
 8009724:	e072      	b.n	800980c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800972e:	431a      	orrs	r2, r3
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009734:	431a      	orrs	r2, r3
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973a:	431a      	orrs	r2, r3
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	695b      	ldr	r3, [r3, #20]
 8009740:	049b      	lsls	r3, r3, #18
 8009742:	431a      	orrs	r2, r3
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	431a      	orrs	r2, r3
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	6a1b      	ldr	r3, [r3, #32]
 800974e:	431a      	orrs	r2, r3
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	69db      	ldr	r3, [r3, #28]
 8009754:	431a      	orrs	r2, r3
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	ea42 0103 	orr.w	r1, r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	430a      	orrs	r2, r1
 8009766:	615a      	str	r2, [r3, #20]
}
 8009768:	e050      	b.n	800980c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d02a      	beq.n	80097c8 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800977a:	431a      	orrs	r2, r3
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009780:	431a      	orrs	r2, r3
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009786:	431a      	orrs	r2, r3
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	049b      	lsls	r3, r3, #18
 800978e:	431a      	orrs	r2, r3
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	6a1b      	ldr	r3, [r3, #32]
 8009794:	431a      	orrs	r2, r3
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	431a      	orrs	r2, r3
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	69db      	ldr	r3, [r3, #28]
 80097a0:	431a      	orrs	r2, r3
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	ea42 0103 	orr.w	r1, r2, r3
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	430a      	orrs	r2, r1
 80097b2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80097ba:	d027      	beq.n	800980c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	6852      	ldr	r2, [r2, #4]
 80097c4:	619a      	str	r2, [r3, #24]
}
 80097c6:	e021      	b.n	800980c <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d01d      	beq.n	800980c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d8:	431a      	orrs	r2, r3
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097de:	431a      	orrs	r2, r3
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e4:	431a      	orrs	r2, r3
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	695b      	ldr	r3, [r3, #20]
 80097ea:	049b      	lsls	r3, r3, #18
 80097ec:	431a      	orrs	r2, r3
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	431a      	orrs	r2, r3
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	69db      	ldr	r3, [r3, #28]
 80097f8:	431a      	orrs	r2, r3
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	ea42 0103 	orr.w	r1, r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	430a      	orrs	r2, r1
 800980a:	615a      	str	r2, [r3, #20]
}
 800980c:	bf00      	nop
 800980e:	3714      	adds	r7, #20
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009820:	2300      	movs	r3, #0
 8009822:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d101      	bne.n	800982e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	e291      	b.n	8009d52 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 0301 	and.w	r3, r3, #1
 8009836:	2b00      	cmp	r3, #0
 8009838:	f000 8087 	beq.w	800994a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800983c:	4b96      	ldr	r3, [pc, #600]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	f003 030c 	and.w	r3, r3, #12
 8009844:	2b04      	cmp	r3, #4
 8009846:	d00c      	beq.n	8009862 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009848:	4b93      	ldr	r3, [pc, #588]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	f003 030c 	and.w	r3, r3, #12
 8009850:	2b08      	cmp	r3, #8
 8009852:	d112      	bne.n	800987a <HAL_RCC_OscConfig+0x62>
 8009854:	4b90      	ldr	r3, [pc, #576]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800985c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009860:	d10b      	bne.n	800987a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009862:	4b8d      	ldr	r3, [pc, #564]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800986a:	2b00      	cmp	r3, #0
 800986c:	d06c      	beq.n	8009948 <HAL_RCC_OscConfig+0x130>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d168      	bne.n	8009948 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e26b      	b.n	8009d52 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009882:	d106      	bne.n	8009892 <HAL_RCC_OscConfig+0x7a>
 8009884:	4b84      	ldr	r3, [pc, #528]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a83      	ldr	r2, [pc, #524]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 800988a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	e02e      	b.n	80098f0 <HAL_RCC_OscConfig+0xd8>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10c      	bne.n	80098b4 <HAL_RCC_OscConfig+0x9c>
 800989a:	4b7f      	ldr	r3, [pc, #508]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a7e      	ldr	r2, [pc, #504]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 80098a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098a4:	6013      	str	r3, [r2, #0]
 80098a6:	4b7c      	ldr	r3, [pc, #496]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a7b      	ldr	r2, [pc, #492]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 80098ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098b0:	6013      	str	r3, [r2, #0]
 80098b2:	e01d      	b.n	80098f0 <HAL_RCC_OscConfig+0xd8>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098bc:	d10c      	bne.n	80098d8 <HAL_RCC_OscConfig+0xc0>
 80098be:	4b76      	ldr	r3, [pc, #472]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a75      	ldr	r2, [pc, #468]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 80098c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098c8:	6013      	str	r3, [r2, #0]
 80098ca:	4b73      	ldr	r3, [pc, #460]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a72      	ldr	r2, [pc, #456]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 80098d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098d4:	6013      	str	r3, [r2, #0]
 80098d6:	e00b      	b.n	80098f0 <HAL_RCC_OscConfig+0xd8>
 80098d8:	4b6f      	ldr	r3, [pc, #444]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a6e      	ldr	r2, [pc, #440]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 80098de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	4b6c      	ldr	r3, [pc, #432]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a6b      	ldr	r2, [pc, #428]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 80098ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d013      	beq.n	8009920 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098f8:	f7fa fc90 	bl	800421c <HAL_GetTick>
 80098fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098fe:	e008      	b.n	8009912 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009900:	f7fa fc8c 	bl	800421c <HAL_GetTick>
 8009904:	4602      	mov	r2, r0
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	2b64      	cmp	r3, #100	; 0x64
 800990c:	d901      	bls.n	8009912 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800990e:	2303      	movs	r3, #3
 8009910:	e21f      	b.n	8009d52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009912:	4b61      	ldr	r3, [pc, #388]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800991a:	2b00      	cmp	r3, #0
 800991c:	d0f0      	beq.n	8009900 <HAL_RCC_OscConfig+0xe8>
 800991e:	e014      	b.n	800994a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009920:	f7fa fc7c 	bl	800421c <HAL_GetTick>
 8009924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009926:	e008      	b.n	800993a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009928:	f7fa fc78 	bl	800421c <HAL_GetTick>
 800992c:	4602      	mov	r2, r0
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	2b64      	cmp	r3, #100	; 0x64
 8009934:	d901      	bls.n	800993a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009936:	2303      	movs	r3, #3
 8009938:	e20b      	b.n	8009d52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800993a:	4b57      	ldr	r3, [pc, #348]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1f0      	bne.n	8009928 <HAL_RCC_OscConfig+0x110>
 8009946:	e000      	b.n	800994a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 0302 	and.w	r3, r3, #2
 8009952:	2b00      	cmp	r3, #0
 8009954:	d069      	beq.n	8009a2a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009956:	4b50      	ldr	r3, [pc, #320]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	f003 030c 	and.w	r3, r3, #12
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00b      	beq.n	800997a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009962:	4b4d      	ldr	r3, [pc, #308]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	f003 030c 	and.w	r3, r3, #12
 800996a:	2b08      	cmp	r3, #8
 800996c:	d11c      	bne.n	80099a8 <HAL_RCC_OscConfig+0x190>
 800996e:	4b4a      	ldr	r3, [pc, #296]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009976:	2b00      	cmp	r3, #0
 8009978:	d116      	bne.n	80099a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800997a:	4b47      	ldr	r3, [pc, #284]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f003 0302 	and.w	r3, r3, #2
 8009982:	2b00      	cmp	r3, #0
 8009984:	d005      	beq.n	8009992 <HAL_RCC_OscConfig+0x17a>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	2b01      	cmp	r3, #1
 800998c:	d001      	beq.n	8009992 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	e1df      	b.n	8009d52 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009992:	4b41      	ldr	r3, [pc, #260]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	00db      	lsls	r3, r3, #3
 80099a0:	493d      	ldr	r1, [pc, #244]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 80099a2:	4313      	orrs	r3, r2
 80099a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80099a6:	e040      	b.n	8009a2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d023      	beq.n	80099f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80099b0:	4b39      	ldr	r3, [pc, #228]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a38      	ldr	r2, [pc, #224]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 80099b6:	f043 0301 	orr.w	r3, r3, #1
 80099ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099bc:	f7fa fc2e 	bl	800421c <HAL_GetTick>
 80099c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099c2:	e008      	b.n	80099d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099c4:	f7fa fc2a 	bl	800421c <HAL_GetTick>
 80099c8:	4602      	mov	r2, r0
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	2b02      	cmp	r3, #2
 80099d0:	d901      	bls.n	80099d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e1bd      	b.n	8009d52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099d6:	4b30      	ldr	r3, [pc, #192]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 0302 	and.w	r3, r3, #2
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d0f0      	beq.n	80099c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099e2:	4b2d      	ldr	r3, [pc, #180]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	00db      	lsls	r3, r3, #3
 80099f0:	4929      	ldr	r1, [pc, #164]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 80099f2:	4313      	orrs	r3, r2
 80099f4:	600b      	str	r3, [r1, #0]
 80099f6:	e018      	b.n	8009a2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099f8:	4b27      	ldr	r3, [pc, #156]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a26      	ldr	r2, [pc, #152]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 80099fe:	f023 0301 	bic.w	r3, r3, #1
 8009a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a04:	f7fa fc0a 	bl	800421c <HAL_GetTick>
 8009a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a0a:	e008      	b.n	8009a1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a0c:	f7fa fc06 	bl	800421c <HAL_GetTick>
 8009a10:	4602      	mov	r2, r0
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d901      	bls.n	8009a1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009a1a:	2303      	movs	r3, #3
 8009a1c:	e199      	b.n	8009d52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a1e:	4b1e      	ldr	r3, [pc, #120]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 0302 	and.w	r3, r3, #2
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1f0      	bne.n	8009a0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f003 0308 	and.w	r3, r3, #8
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d038      	beq.n	8009aa8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d019      	beq.n	8009a72 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a3e:	4b16      	ldr	r3, [pc, #88]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 8009a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a42:	4a15      	ldr	r2, [pc, #84]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 8009a44:	f043 0301 	orr.w	r3, r3, #1
 8009a48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a4a:	f7fa fbe7 	bl	800421c <HAL_GetTick>
 8009a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a50:	e008      	b.n	8009a64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a52:	f7fa fbe3 	bl	800421c <HAL_GetTick>
 8009a56:	4602      	mov	r2, r0
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d901      	bls.n	8009a64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009a60:	2303      	movs	r3, #3
 8009a62:	e176      	b.n	8009d52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a64:	4b0c      	ldr	r3, [pc, #48]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 8009a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a68:	f003 0302 	and.w	r3, r3, #2
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d0f0      	beq.n	8009a52 <HAL_RCC_OscConfig+0x23a>
 8009a70:	e01a      	b.n	8009aa8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a72:	4b09      	ldr	r3, [pc, #36]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 8009a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a76:	4a08      	ldr	r2, [pc, #32]	; (8009a98 <HAL_RCC_OscConfig+0x280>)
 8009a78:	f023 0301 	bic.w	r3, r3, #1
 8009a7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a7e:	f7fa fbcd 	bl	800421c <HAL_GetTick>
 8009a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a84:	e00a      	b.n	8009a9c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a86:	f7fa fbc9 	bl	800421c <HAL_GetTick>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d903      	bls.n	8009a9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009a94:	2303      	movs	r3, #3
 8009a96:	e15c      	b.n	8009d52 <HAL_RCC_OscConfig+0x53a>
 8009a98:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a9c:	4b91      	ldr	r3, [pc, #580]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aa0:	f003 0302 	and.w	r3, r3, #2
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1ee      	bne.n	8009a86 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 0304 	and.w	r3, r3, #4
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f000 80a4 	beq.w	8009bfe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ab6:	4b8b      	ldr	r3, [pc, #556]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10d      	bne.n	8009ade <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ac2:	4b88      	ldr	r3, [pc, #544]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac6:	4a87      	ldr	r2, [pc, #540]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009acc:	6413      	str	r3, [r2, #64]	; 0x40
 8009ace:	4b85      	ldr	r3, [pc, #532]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ad6:	60bb      	str	r3, [r7, #8]
 8009ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ada:	2301      	movs	r3, #1
 8009adc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ade:	4b82      	ldr	r3, [pc, #520]	; (8009ce8 <HAL_RCC_OscConfig+0x4d0>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d118      	bne.n	8009b1c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009aea:	4b7f      	ldr	r3, [pc, #508]	; (8009ce8 <HAL_RCC_OscConfig+0x4d0>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a7e      	ldr	r2, [pc, #504]	; (8009ce8 <HAL_RCC_OscConfig+0x4d0>)
 8009af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009af6:	f7fa fb91 	bl	800421c <HAL_GetTick>
 8009afa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009afc:	e008      	b.n	8009b10 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009afe:	f7fa fb8d 	bl	800421c <HAL_GetTick>
 8009b02:	4602      	mov	r2, r0
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	2b64      	cmp	r3, #100	; 0x64
 8009b0a:	d901      	bls.n	8009b10 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	e120      	b.n	8009d52 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b10:	4b75      	ldr	r3, [pc, #468]	; (8009ce8 <HAL_RCC_OscConfig+0x4d0>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d0f0      	beq.n	8009afe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d106      	bne.n	8009b32 <HAL_RCC_OscConfig+0x31a>
 8009b24:	4b6f      	ldr	r3, [pc, #444]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b28:	4a6e      	ldr	r2, [pc, #440]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009b2a:	f043 0301 	orr.w	r3, r3, #1
 8009b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8009b30:	e02d      	b.n	8009b8e <HAL_RCC_OscConfig+0x376>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10c      	bne.n	8009b54 <HAL_RCC_OscConfig+0x33c>
 8009b3a:	4b6a      	ldr	r3, [pc, #424]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b3e:	4a69      	ldr	r2, [pc, #420]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009b40:	f023 0301 	bic.w	r3, r3, #1
 8009b44:	6713      	str	r3, [r2, #112]	; 0x70
 8009b46:	4b67      	ldr	r3, [pc, #412]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b4a:	4a66      	ldr	r2, [pc, #408]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009b4c:	f023 0304 	bic.w	r3, r3, #4
 8009b50:	6713      	str	r3, [r2, #112]	; 0x70
 8009b52:	e01c      	b.n	8009b8e <HAL_RCC_OscConfig+0x376>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	2b05      	cmp	r3, #5
 8009b5a:	d10c      	bne.n	8009b76 <HAL_RCC_OscConfig+0x35e>
 8009b5c:	4b61      	ldr	r3, [pc, #388]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b60:	4a60      	ldr	r2, [pc, #384]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009b62:	f043 0304 	orr.w	r3, r3, #4
 8009b66:	6713      	str	r3, [r2, #112]	; 0x70
 8009b68:	4b5e      	ldr	r3, [pc, #376]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b6c:	4a5d      	ldr	r2, [pc, #372]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009b6e:	f043 0301 	orr.w	r3, r3, #1
 8009b72:	6713      	str	r3, [r2, #112]	; 0x70
 8009b74:	e00b      	b.n	8009b8e <HAL_RCC_OscConfig+0x376>
 8009b76:	4b5b      	ldr	r3, [pc, #364]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b7a:	4a5a      	ldr	r2, [pc, #360]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009b7c:	f023 0301 	bic.w	r3, r3, #1
 8009b80:	6713      	str	r3, [r2, #112]	; 0x70
 8009b82:	4b58      	ldr	r3, [pc, #352]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b86:	4a57      	ldr	r2, [pc, #348]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009b88:	f023 0304 	bic.w	r3, r3, #4
 8009b8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d015      	beq.n	8009bc2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b96:	f7fa fb41 	bl	800421c <HAL_GetTick>
 8009b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b9c:	e00a      	b.n	8009bb4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b9e:	f7fa fb3d 	bl	800421c <HAL_GetTick>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d901      	bls.n	8009bb4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	e0ce      	b.n	8009d52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bb4:	4b4b      	ldr	r3, [pc, #300]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bb8:	f003 0302 	and.w	r3, r3, #2
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d0ee      	beq.n	8009b9e <HAL_RCC_OscConfig+0x386>
 8009bc0:	e014      	b.n	8009bec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bc2:	f7fa fb2b 	bl	800421c <HAL_GetTick>
 8009bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009bc8:	e00a      	b.n	8009be0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bca:	f7fa fb27 	bl	800421c <HAL_GetTick>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d901      	bls.n	8009be0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	e0b8      	b.n	8009d52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009be0:	4b40      	ldr	r3, [pc, #256]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009be4:	f003 0302 	and.w	r3, r3, #2
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1ee      	bne.n	8009bca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d105      	bne.n	8009bfe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bf2:	4b3c      	ldr	r3, [pc, #240]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf6:	4a3b      	ldr	r2, [pc, #236]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bfc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f000 80a4 	beq.w	8009d50 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009c08:	4b36      	ldr	r3, [pc, #216]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	f003 030c 	and.w	r3, r3, #12
 8009c10:	2b08      	cmp	r3, #8
 8009c12:	d06b      	beq.n	8009cec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	699b      	ldr	r3, [r3, #24]
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d149      	bne.n	8009cb0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c1c:	4b31      	ldr	r3, [pc, #196]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a30      	ldr	r2, [pc, #192]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c28:	f7fa faf8 	bl	800421c <HAL_GetTick>
 8009c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c2e:	e008      	b.n	8009c42 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c30:	f7fa faf4 	bl	800421c <HAL_GetTick>
 8009c34:	4602      	mov	r2, r0
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d901      	bls.n	8009c42 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009c3e:	2303      	movs	r3, #3
 8009c40:	e087      	b.n	8009d52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c42:	4b28      	ldr	r3, [pc, #160]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1f0      	bne.n	8009c30 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	69da      	ldr	r2, [r3, #28]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a1b      	ldr	r3, [r3, #32]
 8009c56:	431a      	orrs	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5c:	019b      	lsls	r3, r3, #6
 8009c5e:	431a      	orrs	r2, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c64:	085b      	lsrs	r3, r3, #1
 8009c66:	3b01      	subs	r3, #1
 8009c68:	041b      	lsls	r3, r3, #16
 8009c6a:	431a      	orrs	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c70:	061b      	lsls	r3, r3, #24
 8009c72:	4313      	orrs	r3, r2
 8009c74:	4a1b      	ldr	r2, [pc, #108]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009c76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c7a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c7c:	4b19      	ldr	r3, [pc, #100]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a18      	ldr	r2, [pc, #96]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c88:	f7fa fac8 	bl	800421c <HAL_GetTick>
 8009c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c8e:	e008      	b.n	8009ca2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c90:	f7fa fac4 	bl	800421c <HAL_GetTick>
 8009c94:	4602      	mov	r2, r0
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d901      	bls.n	8009ca2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	e057      	b.n	8009d52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ca2:	4b10      	ldr	r3, [pc, #64]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d0f0      	beq.n	8009c90 <HAL_RCC_OscConfig+0x478>
 8009cae:	e04f      	b.n	8009d50 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cb0:	4b0c      	ldr	r3, [pc, #48]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a0b      	ldr	r2, [pc, #44]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009cb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cbc:	f7fa faae 	bl	800421c <HAL_GetTick>
 8009cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cc2:	e008      	b.n	8009cd6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009cc4:	f7fa faaa 	bl	800421c <HAL_GetTick>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d901      	bls.n	8009cd6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	e03d      	b.n	8009d52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cd6:	4b03      	ldr	r3, [pc, #12]	; (8009ce4 <HAL_RCC_OscConfig+0x4cc>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1f0      	bne.n	8009cc4 <HAL_RCC_OscConfig+0x4ac>
 8009ce2:	e035      	b.n	8009d50 <HAL_RCC_OscConfig+0x538>
 8009ce4:	40023800 	.word	0x40023800
 8009ce8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009cec:	4b1b      	ldr	r3, [pc, #108]	; (8009d5c <HAL_RCC_OscConfig+0x544>)
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d028      	beq.n	8009d4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d121      	bne.n	8009d4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d11a      	bne.n	8009d4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009d1c:	4013      	ands	r3, r2
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009d22:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d111      	bne.n	8009d4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d32:	085b      	lsrs	r3, r3, #1
 8009d34:	3b01      	subs	r3, #1
 8009d36:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d107      	bne.n	8009d4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d46:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d001      	beq.n	8009d50 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e000      	b.n	8009d52 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3718      	adds	r7, #24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	40023800 	.word	0x40023800

08009d60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d101      	bne.n	8009d78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	e0d0      	b.n	8009f1a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009d78:	4b6a      	ldr	r3, [pc, #424]	; (8009f24 <HAL_RCC_ClockConfig+0x1c4>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f003 030f 	and.w	r3, r3, #15
 8009d80:	683a      	ldr	r2, [r7, #0]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d910      	bls.n	8009da8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d86:	4b67      	ldr	r3, [pc, #412]	; (8009f24 <HAL_RCC_ClockConfig+0x1c4>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f023 020f 	bic.w	r2, r3, #15
 8009d8e:	4965      	ldr	r1, [pc, #404]	; (8009f24 <HAL_RCC_ClockConfig+0x1c4>)
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d96:	4b63      	ldr	r3, [pc, #396]	; (8009f24 <HAL_RCC_ClockConfig+0x1c4>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f003 030f 	and.w	r3, r3, #15
 8009d9e:	683a      	ldr	r2, [r7, #0]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d001      	beq.n	8009da8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	e0b8      	b.n	8009f1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f003 0302 	and.w	r3, r3, #2
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d020      	beq.n	8009df6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 0304 	and.w	r3, r3, #4
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d005      	beq.n	8009dcc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009dc0:	4b59      	ldr	r3, [pc, #356]	; (8009f28 <HAL_RCC_ClockConfig+0x1c8>)
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	4a58      	ldr	r2, [pc, #352]	; (8009f28 <HAL_RCC_ClockConfig+0x1c8>)
 8009dc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009dca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f003 0308 	and.w	r3, r3, #8
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d005      	beq.n	8009de4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009dd8:	4b53      	ldr	r3, [pc, #332]	; (8009f28 <HAL_RCC_ClockConfig+0x1c8>)
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	4a52      	ldr	r2, [pc, #328]	; (8009f28 <HAL_RCC_ClockConfig+0x1c8>)
 8009dde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009de2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009de4:	4b50      	ldr	r3, [pc, #320]	; (8009f28 <HAL_RCC_ClockConfig+0x1c8>)
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	494d      	ldr	r1, [pc, #308]	; (8009f28 <HAL_RCC_ClockConfig+0x1c8>)
 8009df2:	4313      	orrs	r3, r2
 8009df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 0301 	and.w	r3, r3, #1
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d040      	beq.n	8009e84 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d107      	bne.n	8009e1a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e0a:	4b47      	ldr	r3, [pc, #284]	; (8009f28 <HAL_RCC_ClockConfig+0x1c8>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d115      	bne.n	8009e42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e07f      	b.n	8009f1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d107      	bne.n	8009e32 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e22:	4b41      	ldr	r3, [pc, #260]	; (8009f28 <HAL_RCC_ClockConfig+0x1c8>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d109      	bne.n	8009e42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e073      	b.n	8009f1a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e32:	4b3d      	ldr	r3, [pc, #244]	; (8009f28 <HAL_RCC_ClockConfig+0x1c8>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f003 0302 	and.w	r3, r3, #2
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d101      	bne.n	8009e42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e06b      	b.n	8009f1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009e42:	4b39      	ldr	r3, [pc, #228]	; (8009f28 <HAL_RCC_ClockConfig+0x1c8>)
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	f023 0203 	bic.w	r2, r3, #3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	4936      	ldr	r1, [pc, #216]	; (8009f28 <HAL_RCC_ClockConfig+0x1c8>)
 8009e50:	4313      	orrs	r3, r2
 8009e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e54:	f7fa f9e2 	bl	800421c <HAL_GetTick>
 8009e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e5a:	e00a      	b.n	8009e72 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e5c:	f7fa f9de 	bl	800421c <HAL_GetTick>
 8009e60:	4602      	mov	r2, r0
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d901      	bls.n	8009e72 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009e6e:	2303      	movs	r3, #3
 8009e70:	e053      	b.n	8009f1a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e72:	4b2d      	ldr	r3, [pc, #180]	; (8009f28 <HAL_RCC_ClockConfig+0x1c8>)
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	f003 020c 	and.w	r2, r3, #12
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d1eb      	bne.n	8009e5c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009e84:	4b27      	ldr	r3, [pc, #156]	; (8009f24 <HAL_RCC_ClockConfig+0x1c4>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 030f 	and.w	r3, r3, #15
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d210      	bcs.n	8009eb4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e92:	4b24      	ldr	r3, [pc, #144]	; (8009f24 <HAL_RCC_ClockConfig+0x1c4>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f023 020f 	bic.w	r2, r3, #15
 8009e9a:	4922      	ldr	r1, [pc, #136]	; (8009f24 <HAL_RCC_ClockConfig+0x1c4>)
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ea2:	4b20      	ldr	r3, [pc, #128]	; (8009f24 <HAL_RCC_ClockConfig+0x1c4>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f003 030f 	and.w	r3, r3, #15
 8009eaa:	683a      	ldr	r2, [r7, #0]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d001      	beq.n	8009eb4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e032      	b.n	8009f1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f003 0304 	and.w	r3, r3, #4
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d008      	beq.n	8009ed2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ec0:	4b19      	ldr	r3, [pc, #100]	; (8009f28 <HAL_RCC_ClockConfig+0x1c8>)
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	4916      	ldr	r1, [pc, #88]	; (8009f28 <HAL_RCC_ClockConfig+0x1c8>)
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f003 0308 	and.w	r3, r3, #8
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d009      	beq.n	8009ef2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009ede:	4b12      	ldr	r3, [pc, #72]	; (8009f28 <HAL_RCC_ClockConfig+0x1c8>)
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	00db      	lsls	r3, r3, #3
 8009eec:	490e      	ldr	r1, [pc, #56]	; (8009f28 <HAL_RCC_ClockConfig+0x1c8>)
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009ef2:	f000 f821 	bl	8009f38 <HAL_RCC_GetSysClockFreq>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	4b0b      	ldr	r3, [pc, #44]	; (8009f28 <HAL_RCC_ClockConfig+0x1c8>)
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	091b      	lsrs	r3, r3, #4
 8009efe:	f003 030f 	and.w	r3, r3, #15
 8009f02:	490a      	ldr	r1, [pc, #40]	; (8009f2c <HAL_RCC_ClockConfig+0x1cc>)
 8009f04:	5ccb      	ldrb	r3, [r1, r3]
 8009f06:	fa22 f303 	lsr.w	r3, r2, r3
 8009f0a:	4a09      	ldr	r2, [pc, #36]	; (8009f30 <HAL_RCC_ClockConfig+0x1d0>)
 8009f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009f0e:	4b09      	ldr	r3, [pc, #36]	; (8009f34 <HAL_RCC_ClockConfig+0x1d4>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7f9 fbf0 	bl	80036f8 <HAL_InitTick>

  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	40023c00 	.word	0x40023c00
 8009f28:	40023800 	.word	0x40023800
 8009f2c:	08015100 	.word	0x08015100
 8009f30:	20000000 	.word	0x20000000
 8009f34:	20000010 	.word	0x20000010

08009f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f38:	b5b0      	push	{r4, r5, r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009f3e:	2100      	movs	r1, #0
 8009f40:	6079      	str	r1, [r7, #4]
 8009f42:	2100      	movs	r1, #0
 8009f44:	60f9      	str	r1, [r7, #12]
 8009f46:	2100      	movs	r1, #0
 8009f48:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f4e:	4952      	ldr	r1, [pc, #328]	; (800a098 <HAL_RCC_GetSysClockFreq+0x160>)
 8009f50:	6889      	ldr	r1, [r1, #8]
 8009f52:	f001 010c 	and.w	r1, r1, #12
 8009f56:	2908      	cmp	r1, #8
 8009f58:	d00d      	beq.n	8009f76 <HAL_RCC_GetSysClockFreq+0x3e>
 8009f5a:	2908      	cmp	r1, #8
 8009f5c:	f200 8094 	bhi.w	800a088 <HAL_RCC_GetSysClockFreq+0x150>
 8009f60:	2900      	cmp	r1, #0
 8009f62:	d002      	beq.n	8009f6a <HAL_RCC_GetSysClockFreq+0x32>
 8009f64:	2904      	cmp	r1, #4
 8009f66:	d003      	beq.n	8009f70 <HAL_RCC_GetSysClockFreq+0x38>
 8009f68:	e08e      	b.n	800a088 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009f6a:	4b4c      	ldr	r3, [pc, #304]	; (800a09c <HAL_RCC_GetSysClockFreq+0x164>)
 8009f6c:	60bb      	str	r3, [r7, #8]
      break;
 8009f6e:	e08e      	b.n	800a08e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009f70:	4b4b      	ldr	r3, [pc, #300]	; (800a0a0 <HAL_RCC_GetSysClockFreq+0x168>)
 8009f72:	60bb      	str	r3, [r7, #8]
      break;
 8009f74:	e08b      	b.n	800a08e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009f76:	4948      	ldr	r1, [pc, #288]	; (800a098 <HAL_RCC_GetSysClockFreq+0x160>)
 8009f78:	6849      	ldr	r1, [r1, #4]
 8009f7a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8009f7e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009f80:	4945      	ldr	r1, [pc, #276]	; (800a098 <HAL_RCC_GetSysClockFreq+0x160>)
 8009f82:	6849      	ldr	r1, [r1, #4]
 8009f84:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009f88:	2900      	cmp	r1, #0
 8009f8a:	d024      	beq.n	8009fd6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f8c:	4942      	ldr	r1, [pc, #264]	; (800a098 <HAL_RCC_GetSysClockFreq+0x160>)
 8009f8e:	6849      	ldr	r1, [r1, #4]
 8009f90:	0989      	lsrs	r1, r1, #6
 8009f92:	4608      	mov	r0, r1
 8009f94:	f04f 0100 	mov.w	r1, #0
 8009f98:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009f9c:	f04f 0500 	mov.w	r5, #0
 8009fa0:	ea00 0204 	and.w	r2, r0, r4
 8009fa4:	ea01 0305 	and.w	r3, r1, r5
 8009fa8:	493d      	ldr	r1, [pc, #244]	; (800a0a0 <HAL_RCC_GetSysClockFreq+0x168>)
 8009faa:	fb01 f003 	mul.w	r0, r1, r3
 8009fae:	2100      	movs	r1, #0
 8009fb0:	fb01 f102 	mul.w	r1, r1, r2
 8009fb4:	1844      	adds	r4, r0, r1
 8009fb6:	493a      	ldr	r1, [pc, #232]	; (800a0a0 <HAL_RCC_GetSysClockFreq+0x168>)
 8009fb8:	fba2 0101 	umull	r0, r1, r2, r1
 8009fbc:	1863      	adds	r3, r4, r1
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	f04f 0300 	mov.w	r3, #0
 8009fc8:	f7f6 fe0e 	bl	8000be8 <__aeabi_uldivmod>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	60fb      	str	r3, [r7, #12]
 8009fd4:	e04a      	b.n	800a06c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009fd6:	4b30      	ldr	r3, [pc, #192]	; (800a098 <HAL_RCC_GetSysClockFreq+0x160>)
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	099b      	lsrs	r3, r3, #6
 8009fdc:	461a      	mov	r2, r3
 8009fde:	f04f 0300 	mov.w	r3, #0
 8009fe2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009fe6:	f04f 0100 	mov.w	r1, #0
 8009fea:	ea02 0400 	and.w	r4, r2, r0
 8009fee:	ea03 0501 	and.w	r5, r3, r1
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	4629      	mov	r1, r5
 8009ff6:	f04f 0200 	mov.w	r2, #0
 8009ffa:	f04f 0300 	mov.w	r3, #0
 8009ffe:	014b      	lsls	r3, r1, #5
 800a000:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a004:	0142      	lsls	r2, r0, #5
 800a006:	4610      	mov	r0, r2
 800a008:	4619      	mov	r1, r3
 800a00a:	1b00      	subs	r0, r0, r4
 800a00c:	eb61 0105 	sbc.w	r1, r1, r5
 800a010:	f04f 0200 	mov.w	r2, #0
 800a014:	f04f 0300 	mov.w	r3, #0
 800a018:	018b      	lsls	r3, r1, #6
 800a01a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a01e:	0182      	lsls	r2, r0, #6
 800a020:	1a12      	subs	r2, r2, r0
 800a022:	eb63 0301 	sbc.w	r3, r3, r1
 800a026:	f04f 0000 	mov.w	r0, #0
 800a02a:	f04f 0100 	mov.w	r1, #0
 800a02e:	00d9      	lsls	r1, r3, #3
 800a030:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a034:	00d0      	lsls	r0, r2, #3
 800a036:	4602      	mov	r2, r0
 800a038:	460b      	mov	r3, r1
 800a03a:	1912      	adds	r2, r2, r4
 800a03c:	eb45 0303 	adc.w	r3, r5, r3
 800a040:	f04f 0000 	mov.w	r0, #0
 800a044:	f04f 0100 	mov.w	r1, #0
 800a048:	0299      	lsls	r1, r3, #10
 800a04a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a04e:	0290      	lsls	r0, r2, #10
 800a050:	4602      	mov	r2, r0
 800a052:	460b      	mov	r3, r1
 800a054:	4610      	mov	r0, r2
 800a056:	4619      	mov	r1, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	461a      	mov	r2, r3
 800a05c:	f04f 0300 	mov.w	r3, #0
 800a060:	f7f6 fdc2 	bl	8000be8 <__aeabi_uldivmod>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	4613      	mov	r3, r2
 800a06a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a06c:	4b0a      	ldr	r3, [pc, #40]	; (800a098 <HAL_RCC_GetSysClockFreq+0x160>)
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	0c1b      	lsrs	r3, r3, #16
 800a072:	f003 0303 	and.w	r3, r3, #3
 800a076:	3301      	adds	r3, #1
 800a078:	005b      	lsls	r3, r3, #1
 800a07a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	fbb2 f3f3 	udiv	r3, r2, r3
 800a084:	60bb      	str	r3, [r7, #8]
      break;
 800a086:	e002      	b.n	800a08e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a088:	4b04      	ldr	r3, [pc, #16]	; (800a09c <HAL_RCC_GetSysClockFreq+0x164>)
 800a08a:	60bb      	str	r3, [r7, #8]
      break;
 800a08c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a08e:	68bb      	ldr	r3, [r7, #8]
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bdb0      	pop	{r4, r5, r7, pc}
 800a098:	40023800 	.word	0x40023800
 800a09c:	00f42400 	.word	0x00f42400
 800a0a0:	017d7840 	.word	0x017d7840

0800a0a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a0a8:	4b03      	ldr	r3, [pc, #12]	; (800a0b8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	20000000 	.word	0x20000000

0800a0bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a0c0:	f7ff fff0 	bl	800a0a4 <HAL_RCC_GetHCLKFreq>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	4b05      	ldr	r3, [pc, #20]	; (800a0dc <HAL_RCC_GetPCLK1Freq+0x20>)
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	0a9b      	lsrs	r3, r3, #10
 800a0cc:	f003 0307 	and.w	r3, r3, #7
 800a0d0:	4903      	ldr	r1, [pc, #12]	; (800a0e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a0d2:	5ccb      	ldrb	r3, [r1, r3]
 800a0d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	40023800 	.word	0x40023800
 800a0e0:	08015110 	.word	0x08015110

0800a0e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a0e8:	f7ff ffdc 	bl	800a0a4 <HAL_RCC_GetHCLKFreq>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	4b05      	ldr	r3, [pc, #20]	; (800a104 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	0b5b      	lsrs	r3, r3, #13
 800a0f4:	f003 0307 	and.w	r3, r3, #7
 800a0f8:	4903      	ldr	r1, [pc, #12]	; (800a108 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a0fa:	5ccb      	ldrb	r3, [r1, r3]
 800a0fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a100:	4618      	mov	r0, r3
 800a102:	bd80      	pop	{r7, pc}
 800a104:	40023800 	.word	0x40023800
 800a108:	08015110 	.word	0x08015110

0800a10c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	220f      	movs	r2, #15
 800a11a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a11c:	4b12      	ldr	r3, [pc, #72]	; (800a168 <HAL_RCC_GetClockConfig+0x5c>)
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	f003 0203 	and.w	r2, r3, #3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a128:	4b0f      	ldr	r3, [pc, #60]	; (800a168 <HAL_RCC_GetClockConfig+0x5c>)
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a134:	4b0c      	ldr	r3, [pc, #48]	; (800a168 <HAL_RCC_GetClockConfig+0x5c>)
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a140:	4b09      	ldr	r3, [pc, #36]	; (800a168 <HAL_RCC_GetClockConfig+0x5c>)
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	08db      	lsrs	r3, r3, #3
 800a146:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a14e:	4b07      	ldr	r3, [pc, #28]	; (800a16c <HAL_RCC_GetClockConfig+0x60>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f003 020f 	and.w	r2, r3, #15
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	601a      	str	r2, [r3, #0]
}
 800a15a:	bf00      	nop
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	40023800 	.word	0x40023800
 800a16c:	40023c00 	.word	0x40023c00

0800a170 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a178:	2300      	movs	r3, #0
 800a17a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a17c:	2300      	movs	r3, #0
 800a17e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a180:	2300      	movs	r3, #0
 800a182:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a184:	2300      	movs	r3, #0
 800a186:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 0301 	and.w	r3, r3, #1
 800a194:	2b00      	cmp	r3, #0
 800a196:	d012      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a198:	4b69      	ldr	r3, [pc, #420]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	4a68      	ldr	r2, [pc, #416]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a19e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a1a2:	6093      	str	r3, [r2, #8]
 800a1a4:	4b66      	ldr	r3, [pc, #408]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1a6:	689a      	ldr	r2, [r3, #8]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ac:	4964      	ldr	r1, [pc, #400]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d101      	bne.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d017      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a1ca:	4b5d      	ldr	r3, [pc, #372]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1d8:	4959      	ldr	r1, [pc, #356]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1e8:	d101      	bne.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d101      	bne.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a202:	2b00      	cmp	r3, #0
 800a204:	d017      	beq.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a206:	4b4e      	ldr	r3, [pc, #312]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a20c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a214:	494a      	ldr	r1, [pc, #296]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a216:	4313      	orrs	r3, r2
 800a218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a224:	d101      	bne.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a226:	2301      	movs	r3, #1
 800a228:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d101      	bne.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a232:	2301      	movs	r3, #1
 800a234:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d001      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a242:	2301      	movs	r3, #1
 800a244:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f003 0320 	and.w	r3, r3, #32
 800a24e:	2b00      	cmp	r3, #0
 800a250:	f000 808b 	beq.w	800a36a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a254:	4b3a      	ldr	r3, [pc, #232]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a258:	4a39      	ldr	r2, [pc, #228]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a25a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a25e:	6413      	str	r3, [r2, #64]	; 0x40
 800a260:	4b37      	ldr	r3, [pc, #220]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a268:	60bb      	str	r3, [r7, #8]
 800a26a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a26c:	4b35      	ldr	r3, [pc, #212]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a34      	ldr	r2, [pc, #208]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a276:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a278:	f7f9 ffd0 	bl	800421c <HAL_GetTick>
 800a27c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a27e:	e008      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a280:	f7f9 ffcc 	bl	800421c <HAL_GetTick>
 800a284:	4602      	mov	r2, r0
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	1ad3      	subs	r3, r2, r3
 800a28a:	2b64      	cmp	r3, #100	; 0x64
 800a28c:	d901      	bls.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a28e:	2303      	movs	r3, #3
 800a290:	e357      	b.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a292:	4b2c      	ldr	r3, [pc, #176]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d0f0      	beq.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a29e:	4b28      	ldr	r3, [pc, #160]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d035      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d02e      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a2bc:	4b20      	ldr	r3, [pc, #128]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a2c6:	4b1e      	ldr	r3, [pc, #120]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ca:	4a1d      	ldr	r2, [pc, #116]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2d0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a2d2:	4b1b      	ldr	r3, [pc, #108]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2d6:	4a1a      	ldr	r2, [pc, #104]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a2de:	4a18      	ldr	r2, [pc, #96]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a2e4:	4b16      	ldr	r3, [pc, #88]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2e8:	f003 0301 	and.w	r3, r3, #1
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d114      	bne.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2f0:	f7f9 ff94 	bl	800421c <HAL_GetTick>
 800a2f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2f6:	e00a      	b.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2f8:	f7f9 ff90 	bl	800421c <HAL_GetTick>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	f241 3288 	movw	r2, #5000	; 0x1388
 800a306:	4293      	cmp	r3, r2
 800a308:	d901      	bls.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e319      	b.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a30e:	4b0c      	ldr	r3, [pc, #48]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a312:	f003 0302 	and.w	r3, r3, #2
 800a316:	2b00      	cmp	r3, #0
 800a318:	d0ee      	beq.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a31e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a322:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a326:	d111      	bne.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800a328:	4b05      	ldr	r3, [pc, #20]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a334:	4b04      	ldr	r3, [pc, #16]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a336:	400b      	ands	r3, r1
 800a338:	4901      	ldr	r1, [pc, #4]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a33a:	4313      	orrs	r3, r2
 800a33c:	608b      	str	r3, [r1, #8]
 800a33e:	e00b      	b.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a340:	40023800 	.word	0x40023800
 800a344:	40007000 	.word	0x40007000
 800a348:	0ffffcff 	.word	0x0ffffcff
 800a34c:	4bb1      	ldr	r3, [pc, #708]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	4ab0      	ldr	r2, [pc, #704]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a352:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a356:	6093      	str	r3, [r2, #8]
 800a358:	4bae      	ldr	r3, [pc, #696]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a35a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a364:	49ab      	ldr	r1, [pc, #684]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a366:	4313      	orrs	r3, r2
 800a368:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f003 0310 	and.w	r3, r3, #16
 800a372:	2b00      	cmp	r3, #0
 800a374:	d010      	beq.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a376:	4ba7      	ldr	r3, [pc, #668]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a37c:	4aa5      	ldr	r2, [pc, #660]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a37e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a382:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800a386:	4ba3      	ldr	r3, [pc, #652]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a388:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a390:	49a0      	ldr	r1, [pc, #640]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a392:	4313      	orrs	r3, r2
 800a394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d00a      	beq.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a3a4:	4b9b      	ldr	r3, [pc, #620]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a3a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3b2:	4998      	ldr	r1, [pc, #608]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00a      	beq.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a3c6:	4b93      	ldr	r3, [pc, #588]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a3c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3d4:	498f      	ldr	r1, [pc, #572]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00a      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a3e8:	4b8a      	ldr	r3, [pc, #552]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a3ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3f6:	4987      	ldr	r1, [pc, #540]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00a      	beq.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a40a:	4b82      	ldr	r3, [pc, #520]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a40c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a410:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a418:	497e      	ldr	r1, [pc, #504]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a41a:	4313      	orrs	r3, r2
 800a41c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00a      	beq.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a42c:	4b79      	ldr	r3, [pc, #484]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a42e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a432:	f023 0203 	bic.w	r2, r3, #3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a43a:	4976      	ldr	r1, [pc, #472]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a43c:	4313      	orrs	r3, r2
 800a43e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00a      	beq.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a44e:	4b71      	ldr	r3, [pc, #452]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a454:	f023 020c 	bic.w	r2, r3, #12
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a45c:	496d      	ldr	r1, [pc, #436]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a45e:	4313      	orrs	r3, r2
 800a460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00a      	beq.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a470:	4b68      	ldr	r3, [pc, #416]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a476:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a47e:	4965      	ldr	r1, [pc, #404]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a480:	4313      	orrs	r3, r2
 800a482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00a      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a492:	4b60      	ldr	r3, [pc, #384]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a498:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4a0:	495c      	ldr	r1, [pc, #368]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00a      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a4b4:	4b57      	ldr	r3, [pc, #348]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a4b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c2:	4954      	ldr	r1, [pc, #336]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00a      	beq.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a4d6:	4b4f      	ldr	r3, [pc, #316]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a4d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4e4:	494b      	ldr	r1, [pc, #300]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00a      	beq.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a4f8:	4b46      	ldr	r3, [pc, #280]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a4fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a506:	4943      	ldr	r1, [pc, #268]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a508:	4313      	orrs	r3, r2
 800a50a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00a      	beq.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a51a:	4b3e      	ldr	r3, [pc, #248]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a520:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a528:	493a      	ldr	r1, [pc, #232]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a52a:	4313      	orrs	r3, r2
 800a52c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00a      	beq.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a53c:	4b35      	ldr	r3, [pc, #212]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a53e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a542:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a54a:	4932      	ldr	r1, [pc, #200]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a54c:	4313      	orrs	r3, r2
 800a54e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d011      	beq.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a55e:	4b2d      	ldr	r3, [pc, #180]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a564:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a56c:	4929      	ldr	r1, [pc, #164]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a56e:	4313      	orrs	r3, r2
 800a570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a57c:	d101      	bne.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a57e:	2301      	movs	r3, #1
 800a580:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 0308 	and.w	r3, r3, #8
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d001      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800a58e:	2301      	movs	r3, #1
 800a590:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00a      	beq.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a59e:	4b1d      	ldr	r3, [pc, #116]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a5a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5a4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5ac:	4919      	ldr	r1, [pc, #100]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00b      	beq.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a5c0:	4b14      	ldr	r3, [pc, #80]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a5c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5d0:	4910      	ldr	r1, [pc, #64]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d006      	beq.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f000 80d9 	beq.w	800a79e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a5ec:	4b09      	ldr	r3, [pc, #36]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a08      	ldr	r2, [pc, #32]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a5f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a5f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5f8:	f7f9 fe10 	bl	800421c <HAL_GetTick>
 800a5fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a5fe:	e00b      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a600:	f7f9 fe0c 	bl	800421c <HAL_GetTick>
 800a604:	4602      	mov	r2, r0
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	1ad3      	subs	r3, r2, r3
 800a60a:	2b64      	cmp	r3, #100	; 0x64
 800a60c:	d904      	bls.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a60e:	2303      	movs	r3, #3
 800a610:	e197      	b.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a612:	bf00      	nop
 800a614:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a618:	4b6c      	ldr	r3, [pc, #432]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a620:	2b00      	cmp	r3, #0
 800a622:	d1ed      	bne.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f003 0301 	and.w	r3, r3, #1
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d021      	beq.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a634:	2b00      	cmp	r3, #0
 800a636:	d11d      	bne.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a638:	4b64      	ldr	r3, [pc, #400]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a63a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a63e:	0c1b      	lsrs	r3, r3, #16
 800a640:	f003 0303 	and.w	r3, r3, #3
 800a644:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a646:	4b61      	ldr	r3, [pc, #388]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a64c:	0e1b      	lsrs	r3, r3, #24
 800a64e:	f003 030f 	and.w	r3, r3, #15
 800a652:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	019a      	lsls	r2, r3, #6
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	041b      	lsls	r3, r3, #16
 800a65e:	431a      	orrs	r2, r3
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	061b      	lsls	r3, r3, #24
 800a664:	431a      	orrs	r2, r3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	071b      	lsls	r3, r3, #28
 800a66c:	4957      	ldr	r1, [pc, #348]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a66e:	4313      	orrs	r3, r2
 800a670:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d004      	beq.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a684:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a688:	d00a      	beq.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a692:	2b00      	cmp	r3, #0
 800a694:	d02e      	beq.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a69e:	d129      	bne.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a6a0:	4b4a      	ldr	r3, [pc, #296]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6a6:	0c1b      	lsrs	r3, r3, #16
 800a6a8:	f003 0303 	and.w	r3, r3, #3
 800a6ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a6ae:	4b47      	ldr	r3, [pc, #284]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6b4:	0f1b      	lsrs	r3, r3, #28
 800a6b6:	f003 0307 	and.w	r3, r3, #7
 800a6ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	019a      	lsls	r2, r3, #6
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	041b      	lsls	r3, r3, #16
 800a6c6:	431a      	orrs	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	061b      	lsls	r3, r3, #24
 800a6ce:	431a      	orrs	r2, r3
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	071b      	lsls	r3, r3, #28
 800a6d4:	493d      	ldr	r1, [pc, #244]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a6dc:	4b3b      	ldr	r3, [pc, #236]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6e2:	f023 021f 	bic.w	r2, r3, #31
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	4937      	ldr	r1, [pc, #220]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d01d      	beq.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a700:	4b32      	ldr	r3, [pc, #200]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a706:	0e1b      	lsrs	r3, r3, #24
 800a708:	f003 030f 	and.w	r3, r3, #15
 800a70c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a70e:	4b2f      	ldr	r3, [pc, #188]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a714:	0f1b      	lsrs	r3, r3, #28
 800a716:	f003 0307 	and.w	r3, r3, #7
 800a71a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	019a      	lsls	r2, r3, #6
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	691b      	ldr	r3, [r3, #16]
 800a726:	041b      	lsls	r3, r3, #16
 800a728:	431a      	orrs	r2, r3
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	061b      	lsls	r3, r3, #24
 800a72e:	431a      	orrs	r2, r3
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	071b      	lsls	r3, r3, #28
 800a734:	4925      	ldr	r1, [pc, #148]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a736:	4313      	orrs	r3, r2
 800a738:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a744:	2b00      	cmp	r3, #0
 800a746:	d011      	beq.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	019a      	lsls	r2, r3, #6
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	691b      	ldr	r3, [r3, #16]
 800a752:	041b      	lsls	r3, r3, #16
 800a754:	431a      	orrs	r2, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	061b      	lsls	r3, r3, #24
 800a75c:	431a      	orrs	r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	071b      	lsls	r3, r3, #28
 800a764:	4919      	ldr	r1, [pc, #100]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a766:	4313      	orrs	r3, r2
 800a768:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a76c:	4b17      	ldr	r3, [pc, #92]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a16      	ldr	r2, [pc, #88]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a772:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a776:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a778:	f7f9 fd50 	bl	800421c <HAL_GetTick>
 800a77c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a77e:	e008      	b.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a780:	f7f9 fd4c 	bl	800421c <HAL_GetTick>
 800a784:	4602      	mov	r2, r0
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	1ad3      	subs	r3, r2, r3
 800a78a:	2b64      	cmp	r3, #100	; 0x64
 800a78c:	d901      	bls.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a78e:	2303      	movs	r3, #3
 800a790:	e0d7      	b.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a792:	4b0e      	ldr	r3, [pc, #56]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d0f0      	beq.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	f040 80cd 	bne.w	800a940 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a7a6:	4b09      	ldr	r3, [pc, #36]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a08      	ldr	r2, [pc, #32]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a7ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7b2:	f7f9 fd33 	bl	800421c <HAL_GetTick>
 800a7b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a7b8:	e00a      	b.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a7ba:	f7f9 fd2f 	bl	800421c <HAL_GetTick>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	1ad3      	subs	r3, r2, r3
 800a7c4:	2b64      	cmp	r3, #100	; 0x64
 800a7c6:	d903      	bls.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e0ba      	b.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a7cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a7d0:	4b5e      	ldr	r3, [pc, #376]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7dc:	d0ed      	beq.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d003      	beq.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d009      	beq.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d02e      	beq.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a802:	2b00      	cmp	r3, #0
 800a804:	d12a      	bne.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a806:	4b51      	ldr	r3, [pc, #324]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a80c:	0c1b      	lsrs	r3, r3, #16
 800a80e:	f003 0303 	and.w	r3, r3, #3
 800a812:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a814:	4b4d      	ldr	r3, [pc, #308]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a81a:	0f1b      	lsrs	r3, r3, #28
 800a81c:	f003 0307 	and.w	r3, r3, #7
 800a820:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	019a      	lsls	r2, r3, #6
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	041b      	lsls	r3, r3, #16
 800a82c:	431a      	orrs	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	699b      	ldr	r3, [r3, #24]
 800a832:	061b      	lsls	r3, r3, #24
 800a834:	431a      	orrs	r2, r3
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	071b      	lsls	r3, r3, #28
 800a83a:	4944      	ldr	r1, [pc, #272]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a83c:	4313      	orrs	r3, r2
 800a83e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a842:	4b42      	ldr	r3, [pc, #264]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a848:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a850:	3b01      	subs	r3, #1
 800a852:	021b      	lsls	r3, r3, #8
 800a854:	493d      	ldr	r1, [pc, #244]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a856:	4313      	orrs	r3, r2
 800a858:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a864:	2b00      	cmp	r3, #0
 800a866:	d022      	beq.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a86c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a870:	d11d      	bne.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a872:	4b36      	ldr	r3, [pc, #216]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a878:	0e1b      	lsrs	r3, r3, #24
 800a87a:	f003 030f 	and.w	r3, r3, #15
 800a87e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a880:	4b32      	ldr	r3, [pc, #200]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a886:	0f1b      	lsrs	r3, r3, #28
 800a888:	f003 0307 	and.w	r3, r3, #7
 800a88c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	695b      	ldr	r3, [r3, #20]
 800a892:	019a      	lsls	r2, r3, #6
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6a1b      	ldr	r3, [r3, #32]
 800a898:	041b      	lsls	r3, r3, #16
 800a89a:	431a      	orrs	r2, r3
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	061b      	lsls	r3, r3, #24
 800a8a0:	431a      	orrs	r2, r3
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	071b      	lsls	r3, r3, #28
 800a8a6:	4929      	ldr	r1, [pc, #164]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 0308 	and.w	r3, r3, #8
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d028      	beq.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a8ba:	4b24      	ldr	r3, [pc, #144]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8c0:	0e1b      	lsrs	r3, r3, #24
 800a8c2:	f003 030f 	and.w	r3, r3, #15
 800a8c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a8c8:	4b20      	ldr	r3, [pc, #128]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ce:	0c1b      	lsrs	r3, r3, #16
 800a8d0:	f003 0303 	and.w	r3, r3, #3
 800a8d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	695b      	ldr	r3, [r3, #20]
 800a8da:	019a      	lsls	r2, r3, #6
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	041b      	lsls	r3, r3, #16
 800a8e0:	431a      	orrs	r2, r3
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	061b      	lsls	r3, r3, #24
 800a8e6:	431a      	orrs	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	69db      	ldr	r3, [r3, #28]
 800a8ec:	071b      	lsls	r3, r3, #28
 800a8ee:	4917      	ldr	r1, [pc, #92]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a8f6:	4b15      	ldr	r3, [pc, #84]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a904:	4911      	ldr	r1, [pc, #68]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a906:	4313      	orrs	r3, r2
 800a908:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a90c:	4b0f      	ldr	r3, [pc, #60]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a0e      	ldr	r2, [pc, #56]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a916:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a918:	f7f9 fc80 	bl	800421c <HAL_GetTick>
 800a91c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a91e:	e008      	b.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a920:	f7f9 fc7c 	bl	800421c <HAL_GetTick>
 800a924:	4602      	mov	r2, r0
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	1ad3      	subs	r3, r2, r3
 800a92a:	2b64      	cmp	r3, #100	; 0x64
 800a92c:	d901      	bls.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a92e:	2303      	movs	r3, #3
 800a930:	e007      	b.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a932:	4b06      	ldr	r3, [pc, #24]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a93a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a93e:	d1ef      	bne.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800a940:	2300      	movs	r3, #0
}
 800a942:	4618      	mov	r0, r3
 800a944:	3720      	adds	r7, #32
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	40023800 	.word	0x40023800

0800a950 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a950:	b480      	push	{r7}
 800a952:	b087      	sub	sp, #28
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800a958:	2300      	movs	r3, #0
 800a95a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800a95c:	2300      	movs	r3, #0
 800a95e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800a960:	2300      	movs	r3, #0
 800a962:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800a964:	2300      	movs	r3, #0
 800a966:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a96e:	f040 808c 	bne.w	800aa8a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800a972:	4b95      	ldr	r3, [pc, #596]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a978:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a980:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a988:	d07c      	beq.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a990:	d87d      	bhi.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d004      	beq.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a99e:	d039      	beq.n	800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800a9a0:	e075      	b.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a9a2:	4b89      	ldr	r3, [pc, #548]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d108      	bne.n	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a9ae:	4b86      	ldr	r3, [pc, #536]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9b6:	4a85      	ldr	r2, [pc, #532]	; (800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a9b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9bc:	613b      	str	r3, [r7, #16]
 800a9be:	e007      	b.n	800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a9c0:	4b81      	ldr	r3, [pc, #516]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9c8:	4a81      	ldr	r2, [pc, #516]	; (800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a9ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ce:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800a9d0:	4b7d      	ldr	r3, [pc, #500]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a9d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9d6:	0e1b      	lsrs	r3, r3, #24
 800a9d8:	f003 030f 	and.w	r3, r3, #15
 800a9dc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800a9de:	4b7a      	ldr	r3, [pc, #488]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a9e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9e4:	099b      	lsrs	r3, r3, #6
 800a9e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ea:	693a      	ldr	r2, [r7, #16]
 800a9ec:	fb02 f203 	mul.w	r2, r2, r3
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9f6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800a9f8:	4b73      	ldr	r3, [pc, #460]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a9fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9fe:	0a1b      	lsrs	r3, r3, #8
 800aa00:	f003 031f 	and.w	r3, r3, #31
 800aa04:	3301      	adds	r3, #1
 800aa06:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800aa08:	697a      	ldr	r2, [r7, #20]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa10:	617b      	str	r3, [r7, #20]
        break;
 800aa12:	e03d      	b.n	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800aa14:	4b6c      	ldr	r3, [pc, #432]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d108      	bne.n	800aa32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800aa20:	4b69      	ldr	r3, [pc, #420]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa28:	4a68      	ldr	r2, [pc, #416]	; (800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800aa2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa2e:	613b      	str	r3, [r7, #16]
 800aa30:	e007      	b.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800aa32:	4b65      	ldr	r3, [pc, #404]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa3a:	4a65      	ldr	r2, [pc, #404]	; (800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800aa3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa40:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800aa42:	4b61      	ldr	r3, [pc, #388]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa48:	0e1b      	lsrs	r3, r3, #24
 800aa4a:	f003 030f 	and.w	r3, r3, #15
 800aa4e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800aa50:	4b5d      	ldr	r3, [pc, #372]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa56:	099b      	lsrs	r3, r3, #6
 800aa58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa5c:	693a      	ldr	r2, [r7, #16]
 800aa5e:	fb02 f203 	mul.w	r2, r2, r3
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa68:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800aa6a:	4b57      	ldr	r3, [pc, #348]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa70:	f003 031f 	and.w	r3, r3, #31
 800aa74:	3301      	adds	r3, #1
 800aa76:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa80:	617b      	str	r3, [r7, #20]
        break;
 800aa82:	e005      	b.n	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa84:	4b53      	ldr	r3, [pc, #332]	; (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800aa86:	617b      	str	r3, [r7, #20]
        break;
 800aa88:	e002      	b.n	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800aa8a:	bf00      	nop
 800aa8c:	e000      	b.n	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800aa8e:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa96:	f040 808c 	bne.w	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800aa9a:	4b4b      	ldr	r3, [pc, #300]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aaa0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800aaa8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aab0:	d07c      	beq.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aab8:	d87d      	bhi.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d004      	beq.n	800aaca <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aac6:	d039      	beq.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800aac8:	e075      	b.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800aaca:	4b3f      	ldr	r3, [pc, #252]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d108      	bne.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800aad6:	4b3c      	ldr	r3, [pc, #240]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aade:	4a3b      	ldr	r2, [pc, #236]	; (800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800aae0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aae4:	613b      	str	r3, [r7, #16]
 800aae6:	e007      	b.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800aae8:	4b37      	ldr	r3, [pc, #220]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aaf0:	4a37      	ldr	r2, [pc, #220]	; (800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800aaf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaf6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800aaf8:	4b33      	ldr	r3, [pc, #204]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aafa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aafe:	0e1b      	lsrs	r3, r3, #24
 800ab00:	f003 030f 	and.w	r3, r3, #15
 800ab04:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800ab06:	4b30      	ldr	r3, [pc, #192]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ab08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab0c:	099b      	lsrs	r3, r3, #6
 800ab0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	fb02 f203 	mul.w	r2, r2, r3
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab1e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800ab20:	4b29      	ldr	r3, [pc, #164]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ab22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab26:	0a1b      	lsrs	r3, r3, #8
 800ab28:	f003 031f 	and.w	r3, r3, #31
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ab30:	697a      	ldr	r2, [r7, #20]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab38:	617b      	str	r3, [r7, #20]
        break;
 800ab3a:	e03d      	b.n	800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ab3c:	4b22      	ldr	r3, [pc, #136]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d108      	bne.n	800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ab48:	4b1f      	ldr	r3, [pc, #124]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab50:	4a1e      	ldr	r2, [pc, #120]	; (800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ab52:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab56:	613b      	str	r3, [r7, #16]
 800ab58:	e007      	b.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ab5a:	4b1b      	ldr	r3, [pc, #108]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab62:	4a1b      	ldr	r2, [pc, #108]	; (800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800ab64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab68:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800ab6a:	4b17      	ldr	r3, [pc, #92]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ab6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab70:	0e1b      	lsrs	r3, r3, #24
 800ab72:	f003 030f 	and.w	r3, r3, #15
 800ab76:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800ab78:	4b13      	ldr	r3, [pc, #76]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ab7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab7e:	099b      	lsrs	r3, r3, #6
 800ab80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab84:	693a      	ldr	r2, [r7, #16]
 800ab86:	fb02 f203 	mul.w	r2, r2, r3
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab90:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800ab92:	4b0d      	ldr	r3, [pc, #52]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ab94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab98:	f003 031f 	and.w	r3, r3, #31
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800aba0:	697a      	ldr	r2, [r7, #20]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aba8:	617b      	str	r3, [r7, #20]
        break;
 800abaa:	e005      	b.n	800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800abac:	4b09      	ldr	r3, [pc, #36]	; (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800abae:	617b      	str	r3, [r7, #20]
        break;
 800abb0:	e002      	b.n	800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800abb2:	bf00      	nop
 800abb4:	e000      	b.n	800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800abb6:	bf00      	nop

  return frequency;
 800abb8:	697b      	ldr	r3, [r7, #20]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	371c      	adds	r7, #28
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	40023800 	.word	0x40023800
 800abcc:	00f42400 	.word	0x00f42400
 800abd0:	017d7840 	.word	0x017d7840
 800abd4:	00bb8000 	.word	0x00bb8000

0800abd8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d101      	bne.n	800abea <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e081      	b.n	800acee <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	7f5b      	ldrb	r3, [r3, #29]
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d105      	bne.n	800ac00 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f7f8 f930 	bl	8002e60 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2202      	movs	r2, #2
 800ac04:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	22ca      	movs	r2, #202	; 0xca
 800ac0c:	625a      	str	r2, [r3, #36]	; 0x24
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2253      	movs	r2, #83	; 0x53
 800ac14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fb16 	bl	800b248 <RTC_EnterInitMode>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d008      	beq.n	800ac34 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	22ff      	movs	r2, #255	; 0xff
 800ac28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2204      	movs	r2, #4
 800ac2e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800ac30:	2301      	movs	r3, #1
 800ac32:	e05c      	b.n	800acee <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	6899      	ldr	r1, [r3, #8]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	4b2e      	ldr	r3, [pc, #184]	; (800acf8 <HAL_RTC_Init+0x120>)
 800ac40:	400b      	ands	r3, r1
 800ac42:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	6899      	ldr	r1, [r3, #8]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	685a      	ldr	r2, [r3, #4]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	431a      	orrs	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	695b      	ldr	r3, [r3, #20]
 800ac58:	431a      	orrs	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	430a      	orrs	r2, r1
 800ac60:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	68d2      	ldr	r2, [r2, #12]
 800ac6a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	6919      	ldr	r1, [r3, #16]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	041a      	lsls	r2, r3, #16
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	430a      	orrs	r2, r1
 800ac7e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	68da      	ldr	r2, [r3, #12]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac8e:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	f003 0320 	and.w	r3, r3, #32
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d10e      	bne.n	800acbc <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 faaa 	bl	800b1f8 <HAL_RTC_WaitForSynchro>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d008      	beq.n	800acbc <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	22ff      	movs	r2, #255	; 0xff
 800acb0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2204      	movs	r2, #4
 800acb6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	e018      	b.n	800acee <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f022 0208 	bic.w	r2, r2, #8
 800acca:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	699a      	ldr	r2, [r3, #24]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	430a      	orrs	r2, r1
 800acdc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	22ff      	movs	r2, #255	; 0xff
 800ace4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2201      	movs	r2, #1
 800acea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800acec:	2300      	movs	r3, #0
  }
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3708      	adds	r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	ff8fffbf 	.word	0xff8fffbf

0800acfc <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800acfc:	b590      	push	{r4, r7, lr}
 800acfe:	b087      	sub	sp, #28
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	7f1b      	ldrb	r3, [r3, #28]
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d101      	bne.n	800ad18 <HAL_RTC_SetTime+0x1c>
 800ad14:	2302      	movs	r3, #2
 800ad16:	e0a8      	b.n	800ae6a <HAL_RTC_SetTime+0x16e>
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2202      	movs	r2, #2
 800ad22:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d126      	bne.n	800ad78 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d102      	bne.n	800ad3e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	4618      	mov	r0, r3
 800ad44:	f000 faac 	bl	800b2a0 <RTC_ByteToBcd2>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	785b      	ldrb	r3, [r3, #1]
 800ad50:	4618      	mov	r0, r3
 800ad52:	f000 faa5 	bl	800b2a0 <RTC_ByteToBcd2>
 800ad56:	4603      	mov	r3, r0
 800ad58:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800ad5a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	789b      	ldrb	r3, [r3, #2]
 800ad60:	4618      	mov	r0, r3
 800ad62:	f000 fa9d 	bl	800b2a0 <RTC_ByteToBcd2>
 800ad66:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800ad68:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	7b1b      	ldrb	r3, [r3, #12]
 800ad70:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800ad72:	4313      	orrs	r3, r2
 800ad74:	617b      	str	r3, [r7, #20]
 800ad76:	e018      	b.n	800adaa <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d102      	bne.n	800ad8c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	785b      	ldrb	r3, [r3, #1]
 800ad96:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ad98:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800ad9a:	68ba      	ldr	r2, [r7, #8]
 800ad9c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800ad9e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	7b1b      	ldrb	r3, [r3, #12]
 800ada4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ada6:	4313      	orrs	r3, r2
 800ada8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	22ca      	movs	r2, #202	; 0xca
 800adb0:	625a      	str	r2, [r3, #36]	; 0x24
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2253      	movs	r2, #83	; 0x53
 800adb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	f000 fa44 	bl	800b248 <RTC_EnterInitMode>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d00b      	beq.n	800adde <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	22ff      	movs	r2, #255	; 0xff
 800adcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2204      	movs	r2, #4
 800add2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2200      	movs	r2, #0
 800add8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	e045      	b.n	800ae6a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	6979      	ldr	r1, [r7, #20]
 800ade4:	4b23      	ldr	r3, [pc, #140]	; (800ae74 <HAL_RTC_SetTime+0x178>)
 800ade6:	400b      	ands	r3, r1
 800ade8:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	689a      	ldr	r2, [r3, #8]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800adf8:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	6899      	ldr	r1, [r3, #8]
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	691a      	ldr	r2, [r3, #16]
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	695b      	ldr	r3, [r3, #20]
 800ae08:	431a      	orrs	r2, r3
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	430a      	orrs	r2, r1
 800ae10:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	68da      	ldr	r2, [r3, #12]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae20:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	f003 0320 	and.w	r3, r3, #32
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d111      	bne.n	800ae54 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f000 f9e1 	bl	800b1f8 <HAL_RTC_WaitForSynchro>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d00b      	beq.n	800ae54 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	22ff      	movs	r2, #255	; 0xff
 800ae42:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2204      	movs	r2, #4
 800ae48:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800ae50:	2301      	movs	r3, #1
 800ae52:	e00a      	b.n	800ae6a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	22ff      	movs	r2, #255	; 0xff
 800ae5a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2200      	movs	r2, #0
 800ae66:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800ae68:	2300      	movs	r3, #0
  }
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	371c      	adds	r7, #28
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd90      	pop	{r4, r7, pc}
 800ae72:	bf00      	nop
 800ae74:	007f7f7f 	.word	0x007f7f7f

0800ae78 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ae78:	b590      	push	{r4, r7, lr}
 800ae7a:	b087      	sub	sp, #28
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800ae84:	2300      	movs	r3, #0
 800ae86:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	7f1b      	ldrb	r3, [r3, #28]
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d101      	bne.n	800ae94 <HAL_RTC_SetDate+0x1c>
 800ae90:	2302      	movs	r3, #2
 800ae92:	e092      	b.n	800afba <HAL_RTC_SetDate+0x142>
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2201      	movs	r2, #1
 800ae98:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2202      	movs	r2, #2
 800ae9e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d10e      	bne.n	800aec4 <HAL_RTC_SetDate+0x4c>
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	785b      	ldrb	r3, [r3, #1]
 800aeaa:	f003 0310 	and.w	r3, r3, #16
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d008      	beq.n	800aec4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	785b      	ldrb	r3, [r3, #1]
 800aeb6:	f023 0310 	bic.w	r3, r3, #16
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	330a      	adds	r3, #10
 800aebe:	b2da      	uxtb	r2, r3
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d11c      	bne.n	800af04 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	78db      	ldrb	r3, [r3, #3]
 800aece:	4618      	mov	r0, r3
 800aed0:	f000 f9e6 	bl	800b2a0 <RTC_ByteToBcd2>
 800aed4:	4603      	mov	r3, r0
 800aed6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	785b      	ldrb	r3, [r3, #1]
 800aedc:	4618      	mov	r0, r3
 800aede:	f000 f9df 	bl	800b2a0 <RTC_ByteToBcd2>
 800aee2:	4603      	mov	r3, r0
 800aee4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800aee6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	789b      	ldrb	r3, [r3, #2]
 800aeec:	4618      	mov	r0, r3
 800aeee:	f000 f9d7 	bl	800b2a0 <RTC_ByteToBcd2>
 800aef2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800aef4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800aefe:	4313      	orrs	r3, r2
 800af00:	617b      	str	r3, [r7, #20]
 800af02:	e00e      	b.n	800af22 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	78db      	ldrb	r3, [r3, #3]
 800af08:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	785b      	ldrb	r3, [r3, #1]
 800af0e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800af10:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800af16:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800af1e:	4313      	orrs	r3, r2
 800af20:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	22ca      	movs	r2, #202	; 0xca
 800af28:	625a      	str	r2, [r3, #36]	; 0x24
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2253      	movs	r2, #83	; 0x53
 800af30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800af32:	68f8      	ldr	r0, [r7, #12]
 800af34:	f000 f988 	bl	800b248 <RTC_EnterInitMode>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00b      	beq.n	800af56 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	22ff      	movs	r2, #255	; 0xff
 800af44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2204      	movs	r2, #4
 800af4a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2200      	movs	r2, #0
 800af50:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	e031      	b.n	800afba <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	6979      	ldr	r1, [r7, #20]
 800af5c:	4b19      	ldr	r3, [pc, #100]	; (800afc4 <HAL_RTC_SetDate+0x14c>)
 800af5e:	400b      	ands	r3, r1
 800af60:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	68da      	ldr	r2, [r3, #12]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af70:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	f003 0320 	and.w	r3, r3, #32
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d111      	bne.n	800afa4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f000 f939 	bl	800b1f8 <HAL_RTC_WaitForSynchro>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d00b      	beq.n	800afa4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	22ff      	movs	r2, #255	; 0xff
 800af92:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2204      	movs	r2, #4
 800af98:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2200      	movs	r2, #0
 800af9e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800afa0:	2301      	movs	r3, #1
 800afa2:	e00a      	b.n	800afba <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	22ff      	movs	r2, #255	; 0xff
 800afaa:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2201      	movs	r2, #1
 800afb0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2200      	movs	r2, #0
 800afb6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800afb8:	2300      	movs	r3, #0
  }
}
 800afba:	4618      	mov	r0, r3
 800afbc:	371c      	adds	r7, #28
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd90      	pop	{r4, r7, pc}
 800afc2:	bf00      	nop
 800afc4:	00ffff3f 	.word	0x00ffff3f

0800afc8 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800afc8:	b590      	push	{r4, r7, lr}
 800afca:	b089      	sub	sp, #36	; 0x24
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800afd4:	2300      	movs	r3, #0
 800afd6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800afd8:	2300      	movs	r3, #0
 800afda:	61fb      	str	r3, [r7, #28]
 800afdc:	2300      	movs	r3, #0
 800afde:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	7f1b      	ldrb	r3, [r3, #28]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d101      	bne.n	800afec <HAL_RTC_SetAlarm+0x24>
 800afe8:	2302      	movs	r3, #2
 800afea:	e101      	b.n	800b1f0 <HAL_RTC_SetAlarm+0x228>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2201      	movs	r2, #1
 800aff0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2202      	movs	r2, #2
 800aff6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d137      	bne.n	800b06e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d102      	bne.n	800b012 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	2200      	movs	r2, #0
 800b010:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	4618      	mov	r0, r3
 800b018:	f000 f942 	bl	800b2a0 <RTC_ByteToBcd2>
 800b01c:	4603      	mov	r3, r0
 800b01e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	785b      	ldrb	r3, [r3, #1]
 800b024:	4618      	mov	r0, r3
 800b026:	f000 f93b 	bl	800b2a0 <RTC_ByteToBcd2>
 800b02a:	4603      	mov	r3, r0
 800b02c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800b02e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	789b      	ldrb	r3, [r3, #2]
 800b034:	4618      	mov	r0, r3
 800b036:	f000 f933 	bl	800b2a0 <RTC_ByteToBcd2>
 800b03a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800b03c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	7b1b      	ldrb	r3, [r3, #12]
 800b044:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800b046:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b050:	4618      	mov	r0, r3
 800b052:	f000 f925 	bl	800b2a0 <RTC_ByteToBcd2>
 800b056:	4603      	mov	r3, r0
 800b058:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800b05a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800b062:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800b068:	4313      	orrs	r3, r2
 800b06a:	61fb      	str	r3, [r7, #28]
 800b06c:	e023      	b.n	800b0b6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d102      	bne.n	800b082 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	2200      	movs	r2, #0
 800b080:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	785b      	ldrb	r3, [r3, #1]
 800b08c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800b08e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800b090:	68ba      	ldr	r2, [r7, #8]
 800b092:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800b094:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	7b1b      	ldrb	r3, [r3, #12]
 800b09a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800b09c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b0a4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800b0a6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800b0ac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	685a      	ldr	r2, [r3, #4]
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	69db      	ldr	r3, [r3, #28]
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	22ca      	movs	r2, #202	; 0xca
 800b0c8:	625a      	str	r2, [r3, #36]	; 0x24
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2253      	movs	r2, #83	; 0x53
 800b0d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0da:	d13f      	bne.n	800b15c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	689a      	ldr	r2, [r3, #8]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b0ea:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	689a      	ldr	r2, [r3, #8]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b0fa:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b0fc:	f7f9 f88e 	bl	800421c <HAL_GetTick>
 800b100:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800b102:	e013      	b.n	800b12c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b104:	f7f9 f88a 	bl	800421c <HAL_GetTick>
 800b108:	4602      	mov	r2, r0
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	1ad3      	subs	r3, r2, r3
 800b10e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b112:	d90b      	bls.n	800b12c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	22ff      	movs	r2, #255	; 0xff
 800b11a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2203      	movs	r2, #3
 800b120:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2200      	movs	r2, #0
 800b126:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b128:	2303      	movs	r3, #3
 800b12a:	e061      	b.n	800b1f0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	f003 0301 	and.w	r3, r3, #1
 800b136:	2b00      	cmp	r3, #0
 800b138:	d0e4      	beq.n	800b104 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	69fa      	ldr	r2, [r7, #28]
 800b140:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	697a      	ldr	r2, [r7, #20]
 800b148:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	689a      	ldr	r2, [r3, #8]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b158:	609a      	str	r2, [r3, #8]
 800b15a:	e03e      	b.n	800b1da <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	689a      	ldr	r2, [r3, #8]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b16a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	689a      	ldr	r2, [r3, #8]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b17a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b17c:	f7f9 f84e 	bl	800421c <HAL_GetTick>
 800b180:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800b182:	e013      	b.n	800b1ac <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b184:	f7f9 f84a 	bl	800421c <HAL_GetTick>
 800b188:	4602      	mov	r2, r0
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	1ad3      	subs	r3, r2, r3
 800b18e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b192:	d90b      	bls.n	800b1ac <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	22ff      	movs	r2, #255	; 0xff
 800b19a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2203      	movs	r2, #3
 800b1a0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b1a8:	2303      	movs	r3, #3
 800b1aa:	e021      	b.n	800b1f0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	f003 0302 	and.w	r3, r3, #2
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d0e4      	beq.n	800b184 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	69fa      	ldr	r2, [r7, #28]
 800b1c0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	689a      	ldr	r2, [r3, #8]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	22ff      	movs	r2, #255	; 0xff
 800b1e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3724      	adds	r7, #36	; 0x24
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd90      	pop	{r4, r7, pc}

0800b1f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b200:	2300      	movs	r3, #0
 800b202:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	68da      	ldr	r2, [r3, #12]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b212:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b214:	f7f9 f802 	bl	800421c <HAL_GetTick>
 800b218:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b21a:	e009      	b.n	800b230 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b21c:	f7f8 fffe 	bl	800421c <HAL_GetTick>
 800b220:	4602      	mov	r2, r0
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b22a:	d901      	bls.n	800b230 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800b22c:	2303      	movs	r3, #3
 800b22e:	e007      	b.n	800b240 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	68db      	ldr	r3, [r3, #12]
 800b236:	f003 0320 	and.w	r3, r3, #32
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d0ee      	beq.n	800b21c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3710      	adds	r7, #16
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b250:	2300      	movs	r3, #0
 800b252:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d119      	bne.n	800b296 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b26a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b26c:	f7f8 ffd6 	bl	800421c <HAL_GetTick>
 800b270:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b272:	e009      	b.n	800b288 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b274:	f7f8 ffd2 	bl	800421c <HAL_GetTick>
 800b278:	4602      	mov	r2, r0
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	1ad3      	subs	r3, r2, r3
 800b27e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b282:	d901      	bls.n	800b288 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800b284:	2303      	movs	r3, #3
 800b286:	e007      	b.n	800b298 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b292:	2b00      	cmp	r3, #0
 800b294:	d0ee      	beq.n	800b274 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800b296:	2300      	movs	r3, #0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3710      	adds	r7, #16
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800b2ae:	e005      	b.n	800b2bc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800b2b6:	79fb      	ldrb	r3, [r7, #7]
 800b2b8:	3b0a      	subs	r3, #10
 800b2ba:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800b2bc:	79fb      	ldrb	r3, [r7, #7]
 800b2be:	2b09      	cmp	r3, #9
 800b2c0:	d8f6      	bhi.n	800b2b0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	011b      	lsls	r3, r3, #4
 800b2c8:	b2da      	uxtb	r2, r3
 800b2ca:	79fb      	ldrb	r3, [r7, #7]
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	b2db      	uxtb	r3, r3
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3714      	adds	r7, #20
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b087      	sub	sp, #28
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	7f1b      	ldrb	r3, [r3, #28]
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d101      	bne.n	800b2f8 <HAL_RTCEx_SetTimeStamp+0x1c>
 800b2f4:	2302      	movs	r3, #2
 800b2f6:	e03e      	b.n	800b376 <HAL_RTCEx_SetTimeStamp+0x9a>
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2202      	movs	r2, #2
 800b302:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	689a      	ldr	r2, [r3, #8]
 800b30a:	4b1e      	ldr	r3, [pc, #120]	; (800b384 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800b30c:	4013      	ands	r3, r2
 800b30e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800b310:	697a      	ldr	r2, [r7, #20]
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	4313      	orrs	r3, r2
 800b316:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	22ca      	movs	r2, #202	; 0xca
 800b31e:	625a      	str	r2, [r3, #36]	; 0x24
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2253      	movs	r2, #83	; 0x53
 800b326:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f022 0206 	bic.w	r2, r2, #6
 800b336:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	430a      	orrs	r2, r1
 800b346:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	697a      	ldr	r2, [r7, #20]
 800b34e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	689a      	ldr	r2, [r3, #8]
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b35e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	22ff      	movs	r2, #255	; 0xff
 800b366:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2201      	movs	r2, #1
 800b36c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2200      	movs	r2, #0
 800b372:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	371c      	adds	r7, #28
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	fffff7f7 	.word	0xfffff7f7

0800b388 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b088      	sub	sp, #32
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800b390:	2300      	movs	r3, #0
 800b392:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800b394:	2300      	movs	r3, #0
 800b396:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800b398:	2300      	movs	r3, #0
 800b39a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d101      	bne.n	800b3a6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e156      	b.n	800b654 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d106      	bne.n	800b3c0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f7f8 f8a2 	bl	8003504 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2202      	movs	r2, #2
 800b3c4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 f95b 	bl	800b684 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d00c      	beq.n	800b3f0 <HAL_SAI_Init+0x68>
 800b3d6:	2b02      	cmp	r3, #2
 800b3d8:	d80d      	bhi.n	800b3f6 <HAL_SAI_Init+0x6e>
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d002      	beq.n	800b3e4 <HAL_SAI_Init+0x5c>
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d003      	beq.n	800b3ea <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800b3e2:	e008      	b.n	800b3f6 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	61fb      	str	r3, [r7, #28]
      break;
 800b3e8:	e006      	b.n	800b3f8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800b3ea:	2310      	movs	r3, #16
 800b3ec:	61fb      	str	r3, [r7, #28]
      break;
 800b3ee:	e003      	b.n	800b3f8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800b3f0:	2320      	movs	r3, #32
 800b3f2:	61fb      	str	r3, [r7, #28]
      break;
 800b3f4:	e000      	b.n	800b3f8 <HAL_SAI_Init+0x70>
      break;
 800b3f6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	2b03      	cmp	r3, #3
 800b3fe:	d81e      	bhi.n	800b43e <HAL_SAI_Init+0xb6>
 800b400:	a201      	add	r2, pc, #4	; (adr r2, 800b408 <HAL_SAI_Init+0x80>)
 800b402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b406:	bf00      	nop
 800b408:	0800b419 	.word	0x0800b419
 800b40c:	0800b41f 	.word	0x0800b41f
 800b410:	0800b427 	.word	0x0800b427
 800b414:	0800b42f 	.word	0x0800b42f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800b418:	2300      	movs	r3, #0
 800b41a:	617b      	str	r3, [r7, #20]
    }
    break;
 800b41c:	e010      	b.n	800b440 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b41e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b422:	617b      	str	r3, [r7, #20]
    }
    break;
 800b424:	e00c      	b.n	800b440 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b426:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b42a:	617b      	str	r3, [r7, #20]
    }
    break;
 800b42c:	e008      	b.n	800b440 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b42e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b432:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	f043 0301 	orr.w	r3, r3, #1
 800b43a:	61fb      	str	r3, [r7, #28]
    }
    break;
 800b43c:	e000      	b.n	800b440 <HAL_SAI_Init+0xb8>
    default:
      break;
 800b43e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a85      	ldr	r2, [pc, #532]	; (800b65c <HAL_SAI_Init+0x2d4>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d004      	beq.n	800b454 <HAL_SAI_Init+0xcc>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a84      	ldr	r2, [pc, #528]	; (800b660 <HAL_SAI_Init+0x2d8>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d103      	bne.n	800b45c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800b454:	4a83      	ldr	r2, [pc, #524]	; (800b664 <HAL_SAI_Init+0x2dc>)
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	6013      	str	r3, [r2, #0]
 800b45a:	e002      	b.n	800b462 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800b45c:	4a82      	ldr	r2, [pc, #520]	; (800b668 <HAL_SAI_Init+0x2e0>)
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	69db      	ldr	r3, [r3, #28]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d04c      	beq.n	800b504 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800b46a:	2300      	movs	r3, #0
 800b46c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4a7a      	ldr	r2, [pc, #488]	; (800b65c <HAL_SAI_Init+0x2d4>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d004      	beq.n	800b482 <HAL_SAI_Init+0xfa>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4a78      	ldr	r2, [pc, #480]	; (800b660 <HAL_SAI_Init+0x2d8>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d104      	bne.n	800b48c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b482:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b486:	f7ff fa63 	bl	800a950 <HAL_RCCEx_GetPeriphCLKFreq>
 800b48a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a76      	ldr	r2, [pc, #472]	; (800b66c <HAL_SAI_Init+0x2e4>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d004      	beq.n	800b4a0 <HAL_SAI_Init+0x118>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a75      	ldr	r2, [pc, #468]	; (800b670 <HAL_SAI_Init+0x2e8>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d104      	bne.n	800b4aa <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800b4a0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b4a4:	f7ff fa54 	bl	800a950 <HAL_RCCEx_GetPeriphCLKFreq>
 800b4a8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800b4aa:	693a      	ldr	r2, [r7, #16]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	005b      	lsls	r3, r3, #1
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	69db      	ldr	r3, [r3, #28]
 800b4ba:	025b      	lsls	r3, r3, #9
 800b4bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4c0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	4a6b      	ldr	r2, [pc, #428]	; (800b674 <HAL_SAI_Init+0x2ec>)
 800b4c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ca:	08da      	lsrs	r2, r3, #3
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800b4d0:	68f9      	ldr	r1, [r7, #12]
 800b4d2:	4b68      	ldr	r3, [pc, #416]	; (800b674 <HAL_SAI_Init+0x2ec>)
 800b4d4:	fba3 2301 	umull	r2, r3, r3, r1
 800b4d8:	08da      	lsrs	r2, r3, #3
 800b4da:	4613      	mov	r3, r2
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	4413      	add	r3, r2
 800b4e0:	005b      	lsls	r3, r3, #1
 800b4e2:	1aca      	subs	r2, r1, r3
 800b4e4:	2a08      	cmp	r2, #8
 800b4e6:	d904      	bls.n	800b4f2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6a1b      	ldr	r3, [r3, #32]
 800b4ec:	1c5a      	adds	r2, r3, #1
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f6:	2b04      	cmp	r3, #4
 800b4f8:	d104      	bne.n	800b504 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6a1b      	ldr	r3, [r3, #32]
 800b4fe:	085a      	lsrs	r2, r3, #1
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d003      	beq.n	800b514 <HAL_SAI_Init+0x18c>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	2b02      	cmp	r3, #2
 800b512:	d109      	bne.n	800b528 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d101      	bne.n	800b520 <HAL_SAI_Init+0x198>
 800b51c:	2300      	movs	r3, #0
 800b51e:	e001      	b.n	800b524 <HAL_SAI_Init+0x19c>
 800b520:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b524:	61bb      	str	r3, [r7, #24]
 800b526:	e008      	b.n	800b53a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d102      	bne.n	800b536 <HAL_SAI_Init+0x1ae>
 800b530:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b534:	e000      	b.n	800b538 <HAL_SAI_Init+0x1b0>
 800b536:	2300      	movs	r3, #0
 800b538:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	6819      	ldr	r1, [r3, #0]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	4b4c      	ldr	r3, [pc, #304]	; (800b678 <HAL_SAI_Init+0x2f0>)
 800b546:	400b      	ands	r3, r1
 800b548:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	6819      	ldr	r1, [r3, #0]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	685a      	ldr	r2, [r3, #4]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b558:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b55e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b564:	431a      	orrs	r2, r3
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800b572:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b57e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6a1b      	ldr	r3, [r3, #32]
 800b584:	051b      	lsls	r3, r3, #20
 800b586:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	430a      	orrs	r2, r1
 800b58e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	6859      	ldr	r1, [r3, #4]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	4b38      	ldr	r3, [pc, #224]	; (800b67c <HAL_SAI_Init+0x2f4>)
 800b59c:	400b      	ands	r3, r1
 800b59e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	6859      	ldr	r1, [r3, #4]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	699a      	ldr	r2, [r3, #24]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ae:	431a      	orrs	r2, r3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b4:	431a      	orrs	r2, r3
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	430a      	orrs	r2, r1
 800b5bc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	6899      	ldr	r1, [r3, #8]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	4b2d      	ldr	r3, [pc, #180]	; (800b680 <HAL_SAI_Init+0x2f8>)
 800b5ca:	400b      	ands	r3, r1
 800b5cc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	6899      	ldr	r1, [r3, #8]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800b5de:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800b5e4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800b5ea:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5f0:	3b01      	subs	r3, #1
 800b5f2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b5f4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	430a      	orrs	r2, r1
 800b5fc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	68d9      	ldr	r1, [r3, #12]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	f24f 0320 	movw	r3, #61472	; 0xf020
 800b60c:	400b      	ands	r3, r1
 800b60e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	68d9      	ldr	r1, [r3, #12]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b61e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b624:	041b      	lsls	r3, r3, #16
 800b626:	431a      	orrs	r2, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b62c:	3b01      	subs	r3, #1
 800b62e:	021b      	lsls	r3, r3, #8
 800b630:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	430a      	orrs	r2, r1
 800b638:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2200      	movs	r2, #0
 800b63e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2201      	movs	r2, #1
 800b646:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b652:	2300      	movs	r3, #0
}
 800b654:	4618      	mov	r0, r3
 800b656:	3720      	adds	r7, #32
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	40015804 	.word	0x40015804
 800b660:	40015824 	.word	0x40015824
 800b664:	40015800 	.word	0x40015800
 800b668:	40015c00 	.word	0x40015c00
 800b66c:	40015c04 	.word	0x40015c04
 800b670:	40015c24 	.word	0x40015c24
 800b674:	cccccccd 	.word	0xcccccccd
 800b678:	ff05c010 	.word	0xff05c010
 800b67c:	ffff1ff0 	.word	0xffff1ff0
 800b680:	fff88000 	.word	0xfff88000

0800b684 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800b68c:	4b17      	ldr	r3, [pc, #92]	; (800b6ec <SAI_Disable+0x68>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a17      	ldr	r2, [pc, #92]	; (800b6f0 <SAI_Disable+0x6c>)
 800b692:	fba2 2303 	umull	r2, r3, r2, r3
 800b696:	0b1b      	lsrs	r3, r3, #12
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b69c:	2300      	movs	r3, #0
 800b69e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b6ae:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	1e5a      	subs	r2, r3, #1
 800b6b4:	60fa      	str	r2, [r7, #12]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d10a      	bne.n	800b6d0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800b6ca:	2303      	movs	r3, #3
 800b6cc:	72fb      	strb	r3, [r7, #11]
      break;
 800b6ce:	e006      	b.n	800b6de <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1e8      	bne.n	800b6b0 <SAI_Disable+0x2c>

  return status;
 800b6de:	7afb      	ldrb	r3, [r7, #11]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3714      	adds	r7, #20
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr
 800b6ec:	20000000 	.word	0x20000000
 800b6f0:	95cbec1b 	.word	0x95cbec1b

0800b6f4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d101      	bne.n	800b706 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	e022      	b.n	800b74c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d105      	bne.n	800b71e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f7f7 fbbb 	bl	8002e94 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2203      	movs	r2, #3
 800b722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 f814 	bl	800b754 <HAL_SD_InitCard>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d001      	beq.n	800b736 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	e00a      	b.n	800b74c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2201      	movs	r2, #1
 800b746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b74a:	2300      	movs	r3, #0
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3708      	adds	r7, #8
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b754:	b5b0      	push	{r4, r5, r7, lr}
 800b756:	b08e      	sub	sp, #56	; 0x38
 800b758:	af04      	add	r7, sp, #16
 800b75a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b75c:	2300      	movs	r3, #0
 800b75e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800b760:	2300      	movs	r3, #0
 800b762:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b764:	2300      	movs	r3, #0
 800b766:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b768:	2300      	movs	r3, #0
 800b76a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b76c:	2300      	movs	r3, #0
 800b76e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800b770:	2376      	movs	r3, #118	; 0x76
 800b772:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681d      	ldr	r5, [r3, #0]
 800b778:	466c      	mov	r4, sp
 800b77a:	f107 0314 	add.w	r3, r7, #20
 800b77e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b782:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b786:	f107 0308 	add.w	r3, r7, #8
 800b78a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b78c:	4628      	mov	r0, r5
 800b78e:	f003 f951 	bl	800ea34 <SDMMC_Init>
 800b792:	4603      	mov	r3, r0
 800b794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d001      	beq.n	800b7a4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	e056      	b.n	800b852 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	685a      	ldr	r2, [r3, #4]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b7b2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f003 f985 	bl	800eac8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	685a      	ldr	r2, [r3, #4]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7cc:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 ff00 	bl	800c5d4 <SD_PowerON>
 800b7d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7d6:	6a3b      	ldr	r3, [r7, #32]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d00b      	beq.n	800b7f4 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2201      	movs	r2, #1
 800b7e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7e8:	6a3b      	ldr	r3, [r7, #32]
 800b7ea:	431a      	orrs	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	e02e      	b.n	800b852 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fe21 	bl	800c43c <SD_InitCard>
 800b7fa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7fc:	6a3b      	ldr	r3, [r7, #32]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00b      	beq.n	800b81a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2201      	movs	r2, #1
 800b806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b80e:	6a3b      	ldr	r3, [r7, #32]
 800b810:	431a      	orrs	r2, r3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b816:	2301      	movs	r3, #1
 800b818:	e01b      	b.n	800b852 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b822:	4618      	mov	r0, r3
 800b824:	f003 f9e4 	bl	800ebf0 <SDMMC_CmdBlockLength>
 800b828:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b82a:	6a3b      	ldr	r3, [r7, #32]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d00f      	beq.n	800b850 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a09      	ldr	r2, [pc, #36]	; (800b85c <HAL_SD_InitCard+0x108>)
 800b836:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b83c:	6a3b      	ldr	r3, [r7, #32]
 800b83e:	431a      	orrs	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	e000      	b.n	800b852 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	3728      	adds	r7, #40	; 0x28
 800b856:	46bd      	mov	sp, r7
 800b858:	bdb0      	pop	{r4, r5, r7, pc}
 800b85a:	bf00      	nop
 800b85c:	004005ff 	.word	0x004005ff

0800b860 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b092      	sub	sp, #72	; 0x48
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	607a      	str	r2, [r7, #4]
 800b86c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b86e:	f7f8 fcd5 	bl	800421c <HAL_GetTick>
 800b872:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d107      	bne.n	800b892 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b886:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b88e:	2301      	movs	r3, #1
 800b890:	e1bd      	b.n	800bc0e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	f040 81b0 	bne.w	800bc00 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b8a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	441a      	add	r2, r3
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d907      	bls.n	800b8c4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e1a4      	b.n	800bc0e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2203      	movs	r2, #3
 800b8c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d002      	beq.n	800b8e2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800b8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8de:	025b      	lsls	r3, r3, #9
 800b8e0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b8e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8e6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	025b      	lsls	r3, r3, #9
 800b8ec:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b8ee:	2390      	movs	r3, #144	; 0x90
 800b8f0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b8f2:	2302      	movs	r3, #2
 800b8f4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f107 0214 	add.w	r2, r7, #20
 800b906:	4611      	mov	r1, r2
 800b908:	4618      	mov	r0, r3
 800b90a:	f003 f945 	bl	800eb98 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	2b01      	cmp	r3, #1
 800b912:	d90a      	bls.n	800b92a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2202      	movs	r2, #2
 800b918:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b920:	4618      	mov	r0, r3
 800b922:	f003 f9a9 	bl	800ec78 <SDMMC_CmdReadMultiBlock>
 800b926:	6478      	str	r0, [r7, #68]	; 0x44
 800b928:	e009      	b.n	800b93e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2201      	movs	r2, #1
 800b92e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b936:	4618      	mov	r0, r3
 800b938:	f003 f97c 	bl	800ec34 <SDMMC_CmdReadSingleBlock>
 800b93c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b93e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b940:	2b00      	cmp	r3, #0
 800b942:	d012      	beq.n	800b96a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a7a      	ldr	r2, [pc, #488]	; (800bb34 <HAL_SD_ReadBlocks+0x2d4>)
 800b94a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b952:	431a      	orrs	r2, r3
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2201      	movs	r2, #1
 800b95c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2200      	movs	r2, #0
 800b964:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b966:	2301      	movs	r3, #1
 800b968:	e151      	b.n	800bc0e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b96e:	e061      	b.n	800ba34 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d03c      	beq.n	800b9f8 <HAL_SD_ReadBlocks+0x198>
 800b97e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b980:	2b00      	cmp	r3, #0
 800b982:	d039      	beq.n	800b9f8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800b984:	2300      	movs	r3, #0
 800b986:	643b      	str	r3, [r7, #64]	; 0x40
 800b988:	e033      	b.n	800b9f2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4618      	mov	r0, r3
 800b990:	f003 f87c 	bl	800ea8c <SDMMC_ReadFIFO>
 800b994:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b99c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b9a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9a6:	3b01      	subs	r3, #1
 800b9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ac:	0a1b      	lsrs	r3, r3, #8
 800b9ae:	b2da      	uxtb	r2, r3
 800b9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b9ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c2:	0c1b      	lsrs	r3, r3, #16
 800b9c4:	b2da      	uxtb	r2, r3
 800b9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9c8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b9d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9d2:	3b01      	subs	r3, #1
 800b9d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d8:	0e1b      	lsrs	r3, r3, #24
 800b9da:	b2da      	uxtb	r2, r3
 800b9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9de:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800b9ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	643b      	str	r3, [r7, #64]	; 0x40
 800b9f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9f4:	2b07      	cmp	r3, #7
 800b9f6:	d9c8      	bls.n	800b98a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b9f8:	f7f8 fc10 	bl	800421c <HAL_GetTick>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba00:	1ad3      	subs	r3, r2, r3
 800ba02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d902      	bls.n	800ba0e <HAL_SD_ReadBlocks+0x1ae>
 800ba08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d112      	bne.n	800ba34 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a48      	ldr	r2, [pc, #288]	; (800bb34 <HAL_SD_ReadBlocks+0x2d4>)
 800ba14:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba1a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2201      	movs	r2, #1
 800ba26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800ba30:	2303      	movs	r3, #3
 800ba32:	e0ec      	b.n	800bc0e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba3a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d096      	beq.n	800b970 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d022      	beq.n	800ba96 <HAL_SD_ReadBlocks+0x236>
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d91f      	bls.n	800ba96 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d01b      	beq.n	800ba96 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4618      	mov	r0, r3
 800ba64:	f003 f96e 	bl	800ed44 <SDMMC_CmdStopTransfer>
 800ba68:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800ba6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d012      	beq.n	800ba96 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a2f      	ldr	r2, [pc, #188]	; (800bb34 <HAL_SD_ReadBlocks+0x2d4>)
 800ba76:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba7e:	431a      	orrs	r2, r3
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2201      	movs	r2, #1
 800ba88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	e0bb      	b.n	800bc0e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba9c:	f003 0308 	and.w	r3, r3, #8
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d012      	beq.n	800baca <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a22      	ldr	r2, [pc, #136]	; (800bb34 <HAL_SD_ReadBlocks+0x2d4>)
 800baaa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab0:	f043 0208 	orr.w	r2, r3, #8
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2201      	movs	r2, #1
 800babc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2200      	movs	r2, #0
 800bac4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bac6:	2301      	movs	r3, #1
 800bac8:	e0a1      	b.n	800bc0e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bad0:	f003 0302 	and.w	r3, r3, #2
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d012      	beq.n	800bafe <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a15      	ldr	r2, [pc, #84]	; (800bb34 <HAL_SD_ReadBlocks+0x2d4>)
 800bade:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae4:	f043 0202 	orr.w	r2, r3, #2
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2200      	movs	r2, #0
 800baf8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bafa:	2301      	movs	r3, #1
 800bafc:	e087      	b.n	800bc0e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb04:	f003 0320 	and.w	r3, r3, #32
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d064      	beq.n	800bbd6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a08      	ldr	r2, [pc, #32]	; (800bb34 <HAL_SD_ReadBlocks+0x2d4>)
 800bb12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb18:	f043 0220 	orr.w	r2, r3, #32
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2201      	movs	r2, #1
 800bb24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e06d      	b.n	800bc0e <HAL_SD_ReadBlocks+0x3ae>
 800bb32:	bf00      	nop
 800bb34:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f002 ffa5 	bl	800ea8c <SDMMC_ReadFIFO>
 800bb42:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800bb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb46:	b2da      	uxtb	r2, r3
 800bb48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb4a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800bb4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb4e:	3301      	adds	r3, #1
 800bb50:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800bb52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb54:	3b01      	subs	r3, #1
 800bb56:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800bb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5a:	0a1b      	lsrs	r3, r3, #8
 800bb5c:	b2da      	uxtb	r2, r3
 800bb5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb60:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800bb62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb64:	3301      	adds	r3, #1
 800bb66:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800bb68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800bb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb70:	0c1b      	lsrs	r3, r3, #16
 800bb72:	b2da      	uxtb	r2, r3
 800bb74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb76:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800bb78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800bb7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb80:	3b01      	subs	r3, #1
 800bb82:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800bb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb86:	0e1b      	lsrs	r3, r3, #24
 800bb88:	b2da      	uxtb	r2, r3
 800bb8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb8c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800bb8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb90:	3301      	adds	r3, #1
 800bb92:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800bb94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb96:	3b01      	subs	r3, #1
 800bb98:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800bb9a:	f7f8 fb3f 	bl	800421c <HAL_GetTick>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba2:	1ad3      	subs	r3, r2, r3
 800bba4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d902      	bls.n	800bbb0 <HAL_SD_ReadBlocks+0x350>
 800bbaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d112      	bne.n	800bbd6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4a18      	ldr	r2, [pc, #96]	; (800bc18 <HAL_SD_ReadBlocks+0x3b8>)
 800bbb6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	e01b      	b.n	800bc0e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d002      	beq.n	800bbea <HAL_SD_ReadBlocks+0x38a>
 800bbe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1a6      	bne.n	800bb38 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f240 523a 	movw	r2, #1338	; 0x53a
 800bbf2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	e006      	b.n	800bc0e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc04:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bc0c:	2301      	movs	r3, #1
  }
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3748      	adds	r7, #72	; 0x48
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	004005ff 	.word	0x004005ff

0800bc1c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b092      	sub	sp, #72	; 0x48
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
 800bc28:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bc2a:	f7f8 faf7 	bl	800421c <HAL_GetTick>
 800bc2e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d107      	bne.n	800bc4e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e165      	b.n	800bf1a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	f040 8158 	bne.w	800bf0c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bc62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	441a      	add	r2, r3
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d907      	bls.n	800bc80 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc74:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	e14c      	b.n	800bf1a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2203      	movs	r2, #3
 800bc84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d002      	beq.n	800bc9e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800bc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc9a:	025b      	lsls	r3, r3, #9
 800bc9c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bc9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bca2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	025b      	lsls	r3, r3, #9
 800bca8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bcaa:	2390      	movs	r3, #144	; 0x90
 800bcac:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f107 0218 	add.w	r2, r7, #24
 800bcc2:	4611      	mov	r1, r2
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f002 ff67 	bl	800eb98 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d90a      	bls.n	800bce6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2220      	movs	r2, #32
 800bcd4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f003 f80f 	bl	800ed00 <SDMMC_CmdWriteMultiBlock>
 800bce2:	6478      	str	r0, [r7, #68]	; 0x44
 800bce4:	e009      	b.n	800bcfa <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2210      	movs	r2, #16
 800bcea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f002 ffe2 	bl	800ecbc <SDMMC_CmdWriteSingleBlock>
 800bcf8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800bcfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d012      	beq.n	800bd26 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a87      	ldr	r2, [pc, #540]	; (800bf24 <HAL_SD_WriteBlocks+0x308>)
 800bd06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd0e:	431a      	orrs	r2, r3
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2201      	movs	r2, #1
 800bd18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bd22:	2301      	movs	r3, #1
 800bd24:	e0f9      	b.n	800bf1a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bd2a:	e065      	b.n	800bdf8 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d040      	beq.n	800bdbc <HAL_SD_WriteBlocks+0x1a0>
 800bd3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d03d      	beq.n	800bdbc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800bd40:	2300      	movs	r3, #0
 800bd42:	643b      	str	r3, [r7, #64]	; 0x40
 800bd44:	e037      	b.n	800bdb6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800bd46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bd4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd4e:	3301      	adds	r3, #1
 800bd50:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bd52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd54:	3b01      	subs	r3, #1
 800bd56:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800bd58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	021a      	lsls	r2, r3, #8
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	4313      	orrs	r3, r2
 800bd62:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bd64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd66:	3301      	adds	r3, #1
 800bd68:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bd6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800bd70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	041a      	lsls	r2, r3, #16
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	4313      	orrs	r3, r2
 800bd7a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bd7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd7e:	3301      	adds	r3, #1
 800bd80:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bd82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd84:	3b01      	subs	r3, #1
 800bd86:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800bd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	061a      	lsls	r2, r3, #24
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	4313      	orrs	r3, r2
 800bd92:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bd94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd96:	3301      	adds	r3, #1
 800bd98:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bd9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd9c:	3b01      	subs	r3, #1
 800bd9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f107 0214 	add.w	r2, r7, #20
 800bda8:	4611      	mov	r1, r2
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f002 fe7b 	bl	800eaa6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800bdb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	643b      	str	r3, [r7, #64]	; 0x40
 800bdb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdb8:	2b07      	cmp	r3, #7
 800bdba:	d9c4      	bls.n	800bd46 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800bdbc:	f7f8 fa2e 	bl	800421c <HAL_GetTick>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc4:	1ad3      	subs	r3, r2, r3
 800bdc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d902      	bls.n	800bdd2 <HAL_SD_WriteBlocks+0x1b6>
 800bdcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d112      	bne.n	800bdf8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a53      	ldr	r2, [pc, #332]	; (800bf24 <HAL_SD_WriteBlocks+0x308>)
 800bdd8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bde0:	431a      	orrs	r2, r3
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2201      	movs	r2, #1
 800bdea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800bdf4:	2303      	movs	r3, #3
 800bdf6:	e090      	b.n	800bf1a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdfe:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800be02:	2b00      	cmp	r3, #0
 800be04:	d092      	beq.n	800bd2c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be10:	2b00      	cmp	r3, #0
 800be12:	d022      	beq.n	800be5a <HAL_SD_WriteBlocks+0x23e>
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	2b01      	cmp	r3, #1
 800be18:	d91f      	bls.n	800be5a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be1e:	2b03      	cmp	r3, #3
 800be20:	d01b      	beq.n	800be5a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4618      	mov	r0, r3
 800be28:	f002 ff8c 	bl	800ed44 <SDMMC_CmdStopTransfer>
 800be2c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800be2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be30:	2b00      	cmp	r3, #0
 800be32:	d012      	beq.n	800be5a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a3a      	ldr	r2, [pc, #232]	; (800bf24 <HAL_SD_WriteBlocks+0x308>)
 800be3a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be42:	431a      	orrs	r2, r3
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2201      	movs	r2, #1
 800be4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2200      	movs	r2, #0
 800be54:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800be56:	2301      	movs	r3, #1
 800be58:	e05f      	b.n	800bf1a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be60:	f003 0308 	and.w	r3, r3, #8
 800be64:	2b00      	cmp	r3, #0
 800be66:	d012      	beq.n	800be8e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a2d      	ldr	r2, [pc, #180]	; (800bf24 <HAL_SD_WriteBlocks+0x308>)
 800be6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be74:	f043 0208 	orr.w	r2, r3, #8
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2201      	movs	r2, #1
 800be80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2200      	movs	r2, #0
 800be88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	e045      	b.n	800bf1a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be94:	f003 0302 	and.w	r3, r3, #2
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d012      	beq.n	800bec2 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a20      	ldr	r2, [pc, #128]	; (800bf24 <HAL_SD_WriteBlocks+0x308>)
 800bea2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea8:	f043 0202 	orr.w	r2, r3, #2
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2201      	movs	r2, #1
 800beb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2200      	movs	r2, #0
 800bebc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bebe:	2301      	movs	r3, #1
 800bec0:	e02b      	b.n	800bf1a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bec8:	f003 0310 	and.w	r3, r3, #16
 800becc:	2b00      	cmp	r3, #0
 800bece:	d012      	beq.n	800bef6 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4a13      	ldr	r2, [pc, #76]	; (800bf24 <HAL_SD_WriteBlocks+0x308>)
 800bed6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bedc:	f043 0210 	orr.w	r2, r3, #16
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2201      	movs	r2, #1
 800bee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	e011      	b.n	800bf1a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f240 523a 	movw	r2, #1338	; 0x53a
 800befe:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	e006      	b.n	800bf1a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf10:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
  }
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3748      	adds	r7, #72	; 0x48
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	004005ff 	.word	0x004005ff

0800bf28 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf36:	0f9b      	lsrs	r3, r3, #30
 800bf38:	b2da      	uxtb	r2, r3
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf42:	0e9b      	lsrs	r3, r3, #26
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	f003 030f 	and.w	r3, r3, #15
 800bf4a:	b2da      	uxtb	r2, r3
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf54:	0e1b      	lsrs	r3, r3, #24
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	f003 0303 	and.w	r3, r3, #3
 800bf5c:	b2da      	uxtb	r2, r3
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf66:	0c1b      	lsrs	r3, r3, #16
 800bf68:	b2da      	uxtb	r2, r3
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf72:	0a1b      	lsrs	r3, r3, #8
 800bf74:	b2da      	uxtb	r2, r3
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf7e:	b2da      	uxtb	r2, r3
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf88:	0d1b      	lsrs	r3, r3, #20
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf94:	0c1b      	lsrs	r3, r3, #16
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	f003 030f 	and.w	r3, r3, #15
 800bf9c:	b2da      	uxtb	r2, r3
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bfa6:	0bdb      	lsrs	r3, r3, #15
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	f003 0301 	and.w	r3, r3, #1
 800bfae:	b2da      	uxtb	r2, r3
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bfb8:	0b9b      	lsrs	r3, r3, #14
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	f003 0301 	and.w	r3, r3, #1
 800bfc0:	b2da      	uxtb	r2, r3
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bfca:	0b5b      	lsrs	r3, r3, #13
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	f003 0301 	and.w	r3, r3, #1
 800bfd2:	b2da      	uxtb	r2, r3
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bfdc:	0b1b      	lsrs	r3, r3, #12
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	f003 0301 	and.w	r3, r3, #1
 800bfe4:	b2da      	uxtb	r2, r3
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2200      	movs	r2, #0
 800bfee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d163      	bne.n	800c0c0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bffc:	009a      	lsls	r2, r3, #2
 800bffe:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c002:	4013      	ands	r3, r2
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800c008:	0f92      	lsrs	r2, r2, #30
 800c00a:	431a      	orrs	r2, r3
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c014:	0edb      	lsrs	r3, r3, #27
 800c016:	b2db      	uxtb	r3, r3
 800c018:	f003 0307 	and.w	r3, r3, #7
 800c01c:	b2da      	uxtb	r2, r3
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c026:	0e1b      	lsrs	r3, r3, #24
 800c028:	b2db      	uxtb	r3, r3
 800c02a:	f003 0307 	and.w	r3, r3, #7
 800c02e:	b2da      	uxtb	r2, r3
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c038:	0d5b      	lsrs	r3, r3, #21
 800c03a:	b2db      	uxtb	r3, r3
 800c03c:	f003 0307 	and.w	r3, r3, #7
 800c040:	b2da      	uxtb	r2, r3
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c04a:	0c9b      	lsrs	r3, r3, #18
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	f003 0307 	and.w	r3, r3, #7
 800c052:	b2da      	uxtb	r2, r3
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c05c:	0bdb      	lsrs	r3, r3, #15
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	f003 0307 	and.w	r3, r3, #7
 800c064:	b2da      	uxtb	r2, r3
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	691b      	ldr	r3, [r3, #16]
 800c06e:	1c5a      	adds	r2, r3, #1
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	7e1b      	ldrb	r3, [r3, #24]
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	f003 0307 	and.w	r3, r3, #7
 800c07e:	3302      	adds	r3, #2
 800c080:	2201      	movs	r2, #1
 800c082:	fa02 f303 	lsl.w	r3, r2, r3
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800c08a:	fb02 f203 	mul.w	r2, r2, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	7a1b      	ldrb	r3, [r3, #8]
 800c096:	b2db      	uxtb	r3, r3
 800c098:	f003 030f 	and.w	r3, r3, #15
 800c09c:	2201      	movs	r2, #1
 800c09e:	409a      	lsls	r2, r3
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800c0ac:	0a52      	lsrs	r2, r2, #9
 800c0ae:	fb02 f203 	mul.w	r2, r2, r3
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c0bc:	661a      	str	r2, [r3, #96]	; 0x60
 800c0be:	e031      	b.n	800c124 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d11d      	bne.n	800c104 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0cc:	041b      	lsls	r3, r3, #16
 800c0ce:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0d6:	0c1b      	lsrs	r3, r3, #16
 800c0d8:	431a      	orrs	r2, r3
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	691b      	ldr	r3, [r3, #16]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	029a      	lsls	r2, r3, #10
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c0f8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	661a      	str	r2, [r3, #96]	; 0x60
 800c102:	e00f      	b.n	800c124 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a58      	ldr	r2, [pc, #352]	; (800c26c <HAL_SD_GetCardCSD+0x344>)
 800c10a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c110:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2201      	movs	r2, #1
 800c11c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c120:	2301      	movs	r3, #1
 800c122:	e09d      	b.n	800c260 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c128:	0b9b      	lsrs	r3, r3, #14
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	f003 0301 	and.w	r3, r3, #1
 800c130:	b2da      	uxtb	r2, r3
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c13a:	09db      	lsrs	r3, r3, #7
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c142:	b2da      	uxtb	r2, r3
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c152:	b2da      	uxtb	r2, r3
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c15c:	0fdb      	lsrs	r3, r3, #31
 800c15e:	b2da      	uxtb	r2, r3
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c168:	0f5b      	lsrs	r3, r3, #29
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	f003 0303 	and.w	r3, r3, #3
 800c170:	b2da      	uxtb	r2, r3
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c17a:	0e9b      	lsrs	r3, r3, #26
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	f003 0307 	and.w	r3, r3, #7
 800c182:	b2da      	uxtb	r2, r3
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c18c:	0d9b      	lsrs	r3, r3, #22
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	f003 030f 	and.w	r3, r3, #15
 800c194:	b2da      	uxtb	r2, r3
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c19e:	0d5b      	lsrs	r3, r3, #21
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	f003 0301 	and.w	r3, r3, #1
 800c1a6:	b2da      	uxtb	r2, r3
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1ba:	0c1b      	lsrs	r3, r3, #16
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	f003 0301 	and.w	r3, r3, #1
 800c1c2:	b2da      	uxtb	r2, r3
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1ce:	0bdb      	lsrs	r3, r3, #15
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	f003 0301 	and.w	r3, r3, #1
 800c1d6:	b2da      	uxtb	r2, r3
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1e2:	0b9b      	lsrs	r3, r3, #14
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	f003 0301 	and.w	r3, r3, #1
 800c1ea:	b2da      	uxtb	r2, r3
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1f6:	0b5b      	lsrs	r3, r3, #13
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	f003 0301 	and.w	r3, r3, #1
 800c1fe:	b2da      	uxtb	r2, r3
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c20a:	0b1b      	lsrs	r3, r3, #12
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	f003 0301 	and.w	r3, r3, #1
 800c212:	b2da      	uxtb	r2, r3
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c21e:	0a9b      	lsrs	r3, r3, #10
 800c220:	b2db      	uxtb	r3, r3
 800c222:	f003 0303 	and.w	r3, r3, #3
 800c226:	b2da      	uxtb	r2, r3
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c232:	0a1b      	lsrs	r3, r3, #8
 800c234:	b2db      	uxtb	r3, r3
 800c236:	f003 0303 	and.w	r3, r3, #3
 800c23a:	b2da      	uxtb	r2, r3
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c246:	085b      	lsrs	r3, r3, #1
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c24e:	b2da      	uxtb	r2, r3
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	2201      	movs	r2, #1
 800c25a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	4618      	mov	r0, r3
 800c262:	370c      	adds	r7, #12
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr
 800c26c:	004005ff 	.word	0x004005ff

0800c270 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c270:	b480      	push	{r7}
 800c272:	b083      	sub	sp, #12
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c2ba:	2300      	movs	r3, #0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	370c      	adds	r7, #12
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c2c8:	b5b0      	push	{r4, r5, r7, lr}
 800c2ca:	b08e      	sub	sp, #56	; 0x38
 800c2cc:	af04      	add	r7, sp, #16
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2203      	movs	r2, #3
 800c2dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2e4:	2b03      	cmp	r3, #3
 800c2e6:	d02e      	beq.n	800c346 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2ee:	d106      	bne.n	800c2fe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	639a      	str	r2, [r3, #56]	; 0x38
 800c2fc:	e029      	b.n	800c352 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c304:	d10a      	bne.n	800c31c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 fa1a 	bl	800c740 <SD_WideBus_Enable>
 800c30c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c312:	6a3b      	ldr	r3, [r7, #32]
 800c314:	431a      	orrs	r2, r3
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	639a      	str	r2, [r3, #56]	; 0x38
 800c31a:	e01a      	b.n	800c352 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d10a      	bne.n	800c338 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fa57 	bl	800c7d6 <SD_WideBus_Disable>
 800c328:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c32e:	6a3b      	ldr	r3, [r7, #32]
 800c330:	431a      	orrs	r2, r3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	639a      	str	r2, [r3, #56]	; 0x38
 800c336:	e00c      	b.n	800c352 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c33c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	639a      	str	r2, [r3, #56]	; 0x38
 800c344:	e005      	b.n	800c352 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c34a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00b      	beq.n	800c372 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a26      	ldr	r2, [pc, #152]	; (800c3f8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800c360:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2201      	movs	r2, #1
 800c366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c36a:	2301      	movs	r3, #1
 800c36c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c370:	e01f      	b.n	800c3b2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	689b      	ldr	r3, [r3, #8]
 800c37c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	68db      	ldr	r3, [r3, #12]
 800c382:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	695b      	ldr	r3, [r3, #20]
 800c38c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	699b      	ldr	r3, [r3, #24]
 800c392:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681d      	ldr	r5, [r3, #0]
 800c398:	466c      	mov	r4, sp
 800c39a:	f107 0314 	add.w	r3, r7, #20
 800c39e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c3a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c3a6:	f107 0308 	add.w	r3, r7, #8
 800c3aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	f002 fb41 	bl	800ea34 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f002 fc18 	bl	800ebf0 <SDMMC_CmdBlockLength>
 800c3c0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c3c2:	6a3b      	ldr	r3, [r7, #32]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d00c      	beq.n	800c3e2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4a0a      	ldr	r2, [pc, #40]	; (800c3f8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800c3ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3d4:	6a3b      	ldr	r3, [r7, #32]
 800c3d6:	431a      	orrs	r2, r3
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800c3ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3728      	adds	r7, #40	; 0x28
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bdb0      	pop	{r4, r5, r7, pc}
 800c3f6:	bf00      	nop
 800c3f8:	004005ff 	.word	0x004005ff

0800c3fc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b086      	sub	sp, #24
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c404:	2300      	movs	r3, #0
 800c406:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c408:	f107 030c 	add.w	r3, r7, #12
 800c40c:	4619      	mov	r1, r3
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 f96e 	bl	800c6f0 <SD_SendStatus>
 800c414:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d005      	beq.n	800c428 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	431a      	orrs	r2, r3
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	0a5b      	lsrs	r3, r3, #9
 800c42c:	f003 030f 	and.w	r3, r3, #15
 800c430:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c432:	693b      	ldr	r3, [r7, #16]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3718      	adds	r7, #24
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c43c:	b5b0      	push	{r4, r5, r7, lr}
 800c43e:	b094      	sub	sp, #80	; 0x50
 800c440:	af04      	add	r7, sp, #16
 800c442:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c444:	2301      	movs	r3, #1
 800c446:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4618      	mov	r0, r3
 800c44e:	f002 fb4a 	bl	800eae6 <SDMMC_GetPowerState>
 800c452:	4603      	mov	r3, r0
 800c454:	2b00      	cmp	r3, #0
 800c456:	d102      	bne.n	800c45e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c458:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c45c:	e0b6      	b.n	800c5cc <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c462:	2b03      	cmp	r3, #3
 800c464:	d02f      	beq.n	800c4c6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4618      	mov	r0, r3
 800c46c:	f002 fd75 	bl	800ef5a <SDMMC_CmdSendCID>
 800c470:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c474:	2b00      	cmp	r3, #0
 800c476:	d001      	beq.n	800c47c <SD_InitCard+0x40>
    {
      return errorstate;
 800c478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c47a:	e0a7      	b.n	800c5cc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2100      	movs	r1, #0
 800c482:	4618      	mov	r0, r3
 800c484:	f002 fb75 	bl	800eb72 <SDMMC_GetResponse>
 800c488:	4602      	mov	r2, r0
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2104      	movs	r1, #4
 800c494:	4618      	mov	r0, r3
 800c496:	f002 fb6c 	bl	800eb72 <SDMMC_GetResponse>
 800c49a:	4602      	mov	r2, r0
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2108      	movs	r1, #8
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f002 fb63 	bl	800eb72 <SDMMC_GetResponse>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	210c      	movs	r1, #12
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f002 fb5a 	bl	800eb72 <SDMMC_GetResponse>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4ca:	2b03      	cmp	r3, #3
 800c4cc:	d00d      	beq.n	800c4ea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f107 020e 	add.w	r2, r7, #14
 800c4d6:	4611      	mov	r1, r2
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f002 fd7b 	bl	800efd4 <SDMMC_CmdSetRelAdd>
 800c4de:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c4e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d001      	beq.n	800c4ea <SD_InitCard+0xae>
    {
      return errorstate;
 800c4e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4e8:	e070      	b.n	800c5cc <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4ee:	2b03      	cmp	r3, #3
 800c4f0:	d036      	beq.n	800c560 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c4f2:	89fb      	ldrh	r3, [r7, #14]
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c502:	041b      	lsls	r3, r3, #16
 800c504:	4619      	mov	r1, r3
 800c506:	4610      	mov	r0, r2
 800c508:	f002 fd45 	bl	800ef96 <SDMMC_CmdSendCSD>
 800c50c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c50e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c510:	2b00      	cmp	r3, #0
 800c512:	d001      	beq.n	800c518 <SD_InitCard+0xdc>
    {
      return errorstate;
 800c514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c516:	e059      	b.n	800c5cc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2100      	movs	r1, #0
 800c51e:	4618      	mov	r0, r3
 800c520:	f002 fb27 	bl	800eb72 <SDMMC_GetResponse>
 800c524:	4602      	mov	r2, r0
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2104      	movs	r1, #4
 800c530:	4618      	mov	r0, r3
 800c532:	f002 fb1e 	bl	800eb72 <SDMMC_GetResponse>
 800c536:	4602      	mov	r2, r0
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2108      	movs	r1, #8
 800c542:	4618      	mov	r0, r3
 800c544:	f002 fb15 	bl	800eb72 <SDMMC_GetResponse>
 800c548:	4602      	mov	r2, r0
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	210c      	movs	r1, #12
 800c554:	4618      	mov	r0, r3
 800c556:	f002 fb0c 	bl	800eb72 <SDMMC_GetResponse>
 800c55a:	4602      	mov	r2, r0
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2104      	movs	r1, #4
 800c566:	4618      	mov	r0, r3
 800c568:	f002 fb03 	bl	800eb72 <SDMMC_GetResponse>
 800c56c:	4603      	mov	r3, r0
 800c56e:	0d1a      	lsrs	r2, r3, #20
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c574:	f107 0310 	add.w	r3, r7, #16
 800c578:	4619      	mov	r1, r3
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f7ff fcd4 	bl	800bf28 <HAL_SD_GetCardCSD>
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d002      	beq.n	800c58c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c586:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c58a:	e01f      	b.n	800c5cc <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6819      	ldr	r1, [r3, #0]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c594:	041b      	lsls	r3, r3, #16
 800c596:	461a      	mov	r2, r3
 800c598:	f04f 0300 	mov.w	r3, #0
 800c59c:	4608      	mov	r0, r1
 800c59e:	f002 fbf3 	bl	800ed88 <SDMMC_CmdSelDesel>
 800c5a2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d001      	beq.n	800c5ae <SD_InitCard+0x172>
  {
    return errorstate;
 800c5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5ac:	e00e      	b.n	800c5cc <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681d      	ldr	r5, [r3, #0]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	466c      	mov	r4, sp
 800c5b6:	f103 0210 	add.w	r2, r3, #16
 800c5ba:	ca07      	ldmia	r2, {r0, r1, r2}
 800c5bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c5c0:	3304      	adds	r3, #4
 800c5c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c5c4:	4628      	mov	r0, r5
 800c5c6:	f002 fa35 	bl	800ea34 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c5ca:	2300      	movs	r3, #0
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3740      	adds	r7, #64	; 0x40
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bdb0      	pop	{r4, r5, r7, pc}

0800c5d4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b086      	sub	sp, #24
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	617b      	str	r3, [r7, #20]
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f002 fbee 	bl	800edce <SDMMC_CmdGoIdleState>
 800c5f2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d001      	beq.n	800c5fe <SD_PowerON+0x2a>
  {
    return errorstate;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	e072      	b.n	800c6e4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	4618      	mov	r0, r3
 800c604:	f002 fc01 	bl	800ee0a <SDMMC_CmdOperCond>
 800c608:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d00d      	beq.n	800c62c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4618      	mov	r0, r3
 800c61c:	f002 fbd7 	bl	800edce <SDMMC_CmdGoIdleState>
 800c620:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d004      	beq.n	800c632 <SD_PowerON+0x5e>
    {
      return errorstate;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	e05b      	b.n	800c6e4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2201      	movs	r2, #1
 800c630:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c636:	2b01      	cmp	r3, #1
 800c638:	d137      	bne.n	800c6aa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	2100      	movs	r1, #0
 800c640:	4618      	mov	r0, r3
 800c642:	f002 fc01 	bl	800ee48 <SDMMC_CmdAppCommand>
 800c646:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d02d      	beq.n	800c6aa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c64e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c652:	e047      	b.n	800c6e4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2100      	movs	r1, #0
 800c65a:	4618      	mov	r0, r3
 800c65c:	f002 fbf4 	bl	800ee48 <SDMMC_CmdAppCommand>
 800c660:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d001      	beq.n	800c66c <SD_PowerON+0x98>
    {
      return errorstate;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	e03b      	b.n	800c6e4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	491e      	ldr	r1, [pc, #120]	; (800c6ec <SD_PowerON+0x118>)
 800c672:	4618      	mov	r0, r3
 800c674:	f002 fc0a 	bl	800ee8c <SDMMC_CmdAppOperCommand>
 800c678:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d002      	beq.n	800c686 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c680:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c684:	e02e      	b.n	800c6e4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	2100      	movs	r1, #0
 800c68c:	4618      	mov	r0, r3
 800c68e:	f002 fa70 	bl	800eb72 <SDMMC_GetResponse>
 800c692:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	0fdb      	lsrs	r3, r3, #31
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d101      	bne.n	800c6a0 <SD_PowerON+0xcc>
 800c69c:	2301      	movs	r3, #1
 800c69e:	e000      	b.n	800c6a2 <SD_PowerON+0xce>
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	613b      	str	r3, [r7, #16]

    count++;
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d802      	bhi.n	800c6ba <SD_PowerON+0xe6>
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d0cc      	beq.n	800c654 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d902      	bls.n	800c6ca <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c6c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c6c8:	e00c      	b.n	800c6e4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d003      	beq.n	800c6dc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	645a      	str	r2, [r3, #68]	; 0x44
 800c6da:	e002      	b.n	800c6e2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c6e2:	2300      	movs	r3, #0
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3718      	adds	r7, #24
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	c1100000 	.word	0xc1100000

0800c6f0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d102      	bne.n	800c706 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c700:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c704:	e018      	b.n	800c738 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c70e:	041b      	lsls	r3, r3, #16
 800c710:	4619      	mov	r1, r3
 800c712:	4610      	mov	r0, r2
 800c714:	f002 fc7f 	bl	800f016 <SDMMC_CmdSendStatus>
 800c718:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d001      	beq.n	800c724 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	e009      	b.n	800c738 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	2100      	movs	r1, #0
 800c72a:	4618      	mov	r0, r3
 800c72c:	f002 fa21 	bl	800eb72 <SDMMC_GetResponse>
 800c730:	4602      	mov	r2, r0
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c736:	2300      	movs	r3, #0
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3710      	adds	r7, #16
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b086      	sub	sp, #24
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c748:	2300      	movs	r3, #0
 800c74a:	60fb      	str	r3, [r7, #12]
 800c74c:	2300      	movs	r3, #0
 800c74e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	2100      	movs	r1, #0
 800c756:	4618      	mov	r0, r3
 800c758:	f002 fa0b 	bl	800eb72 <SDMMC_GetResponse>
 800c75c:	4603      	mov	r3, r0
 800c75e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c762:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c766:	d102      	bne.n	800c76e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c768:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c76c:	e02f      	b.n	800c7ce <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c76e:	f107 030c 	add.w	r3, r7, #12
 800c772:	4619      	mov	r1, r3
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f000 f879 	bl	800c86c <SD_FindSCR>
 800c77a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d001      	beq.n	800c786 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	e023      	b.n	800c7ce <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d01c      	beq.n	800c7ca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c798:	041b      	lsls	r3, r3, #16
 800c79a:	4619      	mov	r1, r3
 800c79c:	4610      	mov	r0, r2
 800c79e:	f002 fb53 	bl	800ee48 <SDMMC_CmdAppCommand>
 800c7a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d001      	beq.n	800c7ae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	e00f      	b.n	800c7ce <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	2102      	movs	r1, #2
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f002 fb8d 	bl	800eed4 <SDMMC_CmdBusWidth>
 800c7ba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d001      	beq.n	800c7c6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	e003      	b.n	800c7ce <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	e001      	b.n	800c7ce <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c7ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3718      	adds	r7, #24
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b086      	sub	sp, #24
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c7de:	2300      	movs	r3, #0
 800c7e0:	60fb      	str	r3, [r7, #12]
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2100      	movs	r1, #0
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f002 f9c0 	bl	800eb72 <SDMMC_GetResponse>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7fc:	d102      	bne.n	800c804 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c7fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c802:	e02f      	b.n	800c864 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c804:	f107 030c 	add.w	r3, r7, #12
 800c808:	4619      	mov	r1, r3
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 f82e 	bl	800c86c <SD_FindSCR>
 800c810:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d001      	beq.n	800c81c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	e023      	b.n	800c864 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c822:	2b00      	cmp	r3, #0
 800c824:	d01c      	beq.n	800c860 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c82e:	041b      	lsls	r3, r3, #16
 800c830:	4619      	mov	r1, r3
 800c832:	4610      	mov	r0, r2
 800c834:	f002 fb08 	bl	800ee48 <SDMMC_CmdAppCommand>
 800c838:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d001      	beq.n	800c844 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	e00f      	b.n	800c864 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2100      	movs	r1, #0
 800c84a:	4618      	mov	r0, r3
 800c84c:	f002 fb42 	bl	800eed4 <SDMMC_CmdBusWidth>
 800c850:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d001      	beq.n	800c85c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	e003      	b.n	800c864 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c85c:	2300      	movs	r3, #0
 800c85e:	e001      	b.n	800c864 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c860:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c864:	4618      	mov	r0, r3
 800c866:	3718      	adds	r7, #24
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c86c:	b590      	push	{r4, r7, lr}
 800c86e:	b08f      	sub	sp, #60	; 0x3c
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c876:	f7f7 fcd1 	bl	800421c <HAL_GetTick>
 800c87a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c87c:	2300      	movs	r3, #0
 800c87e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800c880:	2300      	movs	r3, #0
 800c882:	60bb      	str	r3, [r7, #8]
 800c884:	2300      	movs	r3, #0
 800c886:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2108      	movs	r1, #8
 800c892:	4618      	mov	r0, r3
 800c894:	f002 f9ac 	bl	800ebf0 <SDMMC_CmdBlockLength>
 800c898:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d001      	beq.n	800c8a4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a2:	e0b2      	b.n	800ca0a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8ac:	041b      	lsls	r3, r3, #16
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	4610      	mov	r0, r2
 800c8b2:	f002 fac9 	bl	800ee48 <SDMMC_CmdAppCommand>
 800c8b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d001      	beq.n	800c8c2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800c8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c0:	e0a3      	b.n	800ca0a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c8c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8c6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c8c8:	2308      	movs	r3, #8
 800c8ca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800c8cc:	2330      	movs	r3, #48	; 0x30
 800c8ce:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c8d0:	2302      	movs	r3, #2
 800c8d2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f107 0210 	add.w	r2, r7, #16
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f002 f956 	bl	800eb98 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f002 fb11 	bl	800ef18 <SDMMC_CmdSendSCR>
 800c8f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d02a      	beq.n	800c954 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800c8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c900:	e083      	b.n	800ca0a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d00f      	beq.n	800c930 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6819      	ldr	r1, [r3, #0]
 800c914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	f107 0208 	add.w	r2, r7, #8
 800c91c:	18d4      	adds	r4, r2, r3
 800c91e:	4608      	mov	r0, r1
 800c920:	f002 f8b4 	bl	800ea8c <SDMMC_ReadFIFO>
 800c924:	4603      	mov	r3, r0
 800c926:	6023      	str	r3, [r4, #0]
      index++;
 800c928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c92a:	3301      	adds	r3, #1
 800c92c:	637b      	str	r3, [r7, #52]	; 0x34
 800c92e:	e006      	b.n	800c93e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c936:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d012      	beq.n	800c964 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c93e:	f7f7 fc6d 	bl	800421c <HAL_GetTick>
 800c942:	4602      	mov	r2, r0
 800c944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c946:	1ad3      	subs	r3, r2, r3
 800c948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c94c:	d102      	bne.n	800c954 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c94e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c952:	e05a      	b.n	800ca0a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c95a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d0cf      	beq.n	800c902 <SD_FindSCR+0x96>
 800c962:	e000      	b.n	800c966 <SD_FindSCR+0xfa>
      break;
 800c964:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c96c:	f003 0308 	and.w	r3, r3, #8
 800c970:	2b00      	cmp	r3, #0
 800c972:	d005      	beq.n	800c980 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	2208      	movs	r2, #8
 800c97a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c97c:	2308      	movs	r3, #8
 800c97e:	e044      	b.n	800ca0a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c986:	f003 0302 	and.w	r3, r3, #2
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d005      	beq.n	800c99a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	2202      	movs	r2, #2
 800c994:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c996:	2302      	movs	r3, #2
 800c998:	e037      	b.n	800ca0a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9a0:	f003 0320 	and.w	r3, r3, #32
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d005      	beq.n	800c9b4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	2220      	movs	r2, #32
 800c9ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c9b0:	2320      	movs	r3, #32
 800c9b2:	e02a      	b.n	800ca0a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f240 523a 	movw	r2, #1338	; 0x53a
 800c9bc:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	061a      	lsls	r2, r3, #24
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	021b      	lsls	r3, r3, #8
 800c9c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9ca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	0a1b      	lsrs	r3, r3, #8
 800c9d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c9d4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	0e1b      	lsrs	r3, r3, #24
 800c9da:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9de:	601a      	str	r2, [r3, #0]
    scr++;
 800c9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e2:	3304      	adds	r3, #4
 800c9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	061a      	lsls	r2, r3, #24
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	021b      	lsls	r3, r3, #8
 800c9ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9f2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	0a1b      	lsrs	r3, r3, #8
 800c9f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c9fc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	0e1b      	lsrs	r3, r3, #24
 800ca02:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ca04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca06:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ca08:	2300      	movs	r3, #0
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	373c      	adds	r7, #60	; 0x3c
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd90      	pop	{r4, r7, pc}

0800ca12 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800ca12:	b580      	push	{r7, lr}
 800ca14:	b082      	sub	sp, #8
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	6078      	str	r0, [r7, #4]
 800ca1a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d101      	bne.n	800ca26 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ca22:	2301      	movs	r3, #1
 800ca24:	e025      	b.n	800ca72 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d106      	bne.n	800ca40 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2200      	movs	r2, #0
 800ca36:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f7f6 fd58 	bl	80034f0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2202      	movs	r2, #2
 800ca44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	3304      	adds	r3, #4
 800ca50:	4619      	mov	r1, r3
 800ca52:	4610      	mov	r0, r2
 800ca54:	f001 fec4 	bl	800e7e0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6818      	ldr	r0, [r3, #0]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	461a      	mov	r2, r3
 800ca62:	6839      	ldr	r1, [r7, #0]
 800ca64:	f001 ff2e 	bl	800e8c4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800ca70:	2300      	movs	r3, #0
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3708      	adds	r7, #8
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b084      	sub	sp, #16
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	60f8      	str	r0, [r7, #12]
 800ca82:	60b9      	str	r1, [r7, #8]
 800ca84:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	2b02      	cmp	r3, #2
 800ca90:	d101      	bne.n	800ca96 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800ca92:	2302      	movs	r3, #2
 800ca94:	e018      	b.n	800cac8 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2202      	movs	r2, #2
 800ca9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	68b9      	ldr	r1, [r7, #8]
 800caa6:	4618      	mov	r0, r3
 800caa8:	f001 ff8c 	bl	800e9c4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2b02      	cmp	r3, #2
 800cab2:	d104      	bne.n	800cabe <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2205      	movs	r2, #5
 800cab8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800cabc:	e003      	b.n	800cac6 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	2201      	movs	r2, #1
 800cac2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800cac6:	2300      	movs	r3, #0
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3710      	adds	r7, #16
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	2b02      	cmp	r3, #2
 800cae4:	d101      	bne.n	800caea <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800cae6:	2302      	movs	r3, #2
 800cae8:	e00e      	b.n	800cb08 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2202      	movs	r2, #2
 800caee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	6839      	ldr	r1, [r7, #0]
 800caf8:	4618      	mov	r0, r3
 800cafa:	f001 ff87 	bl	800ea0c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2201      	movs	r2, #1
 800cb02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800cb06:	2300      	movs	r3, #0
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3708      	adds	r7, #8
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d101      	bne.n	800cb22 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800cb1e:	2301      	movs	r3, #1
 800cb20:	e04c      	b.n	800cbbc <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb28:	b2db      	uxtb	r3, r3
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d106      	bne.n	800cb3c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2200      	movs	r2, #0
 800cb32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7f6 fa0e 	bl	8002f58 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2202      	movs	r2, #2
 800cb40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f022 0203 	bic.w	r2, r2, #3
 800cb52:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	4b19      	ldr	r3, [pc, #100]	; (800cbc4 <HAL_SPDIFRX_Init+0xb4>)
 800cb60:	4013      	ands	r3, r2
 800cb62:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800cb6c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800cb72:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800cb78:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800cb7e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800cb84:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800cb8a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800cb90:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800cb96:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800cb9c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	4313      	orrs	r3, r2
 800cba2:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	68fa      	ldr	r2, [r7, #12]
 800cbaa:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800cbba:	2300      	movs	r3, #0
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	fff88407 	.word	0xfff88407

0800cbc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d101      	bne.n	800cbda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e049      	b.n	800cc6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d106      	bne.n	800cbf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7f6 f9f4 	bl	8002fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2202      	movs	r2, #2
 800cbf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681a      	ldr	r2, [r3, #0]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	3304      	adds	r3, #4
 800cc04:	4619      	mov	r1, r3
 800cc06:	4610      	mov	r0, r2
 800cc08:	f000 fc92 	bl	800d530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2201      	movs	r2, #1
 800cc10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2201      	movs	r2, #1
 800cc18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2201      	movs	r2, #1
 800cc28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2201      	movs	r2, #1
 800cc38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2201      	movs	r2, #1
 800cc40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2201      	movs	r2, #1
 800cc48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2201      	movs	r2, #1
 800cc58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2201      	movs	r2, #1
 800cc60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2201      	movs	r2, #1
 800cc68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cc6c:	2300      	movs	r3, #0
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3708      	adds	r7, #8
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
	...

0800cc78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b085      	sub	sp, #20
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d001      	beq.n	800cc90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	e04c      	b.n	800cd2a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2202      	movs	r2, #2
 800cc94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a26      	ldr	r2, [pc, #152]	; (800cd38 <HAL_TIM_Base_Start+0xc0>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d022      	beq.n	800cce8 <HAL_TIM_Base_Start+0x70>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccaa:	d01d      	beq.n	800cce8 <HAL_TIM_Base_Start+0x70>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a22      	ldr	r2, [pc, #136]	; (800cd3c <HAL_TIM_Base_Start+0xc4>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d018      	beq.n	800cce8 <HAL_TIM_Base_Start+0x70>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4a21      	ldr	r2, [pc, #132]	; (800cd40 <HAL_TIM_Base_Start+0xc8>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d013      	beq.n	800cce8 <HAL_TIM_Base_Start+0x70>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a1f      	ldr	r2, [pc, #124]	; (800cd44 <HAL_TIM_Base_Start+0xcc>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d00e      	beq.n	800cce8 <HAL_TIM_Base_Start+0x70>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4a1e      	ldr	r2, [pc, #120]	; (800cd48 <HAL_TIM_Base_Start+0xd0>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d009      	beq.n	800cce8 <HAL_TIM_Base_Start+0x70>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4a1c      	ldr	r2, [pc, #112]	; (800cd4c <HAL_TIM_Base_Start+0xd4>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d004      	beq.n	800cce8 <HAL_TIM_Base_Start+0x70>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a1b      	ldr	r2, [pc, #108]	; (800cd50 <HAL_TIM_Base_Start+0xd8>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d115      	bne.n	800cd14 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	689a      	ldr	r2, [r3, #8]
 800ccee:	4b19      	ldr	r3, [pc, #100]	; (800cd54 <HAL_TIM_Base_Start+0xdc>)
 800ccf0:	4013      	ands	r3, r2
 800ccf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2b06      	cmp	r3, #6
 800ccf8:	d015      	beq.n	800cd26 <HAL_TIM_Base_Start+0xae>
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd00:	d011      	beq.n	800cd26 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f042 0201 	orr.w	r2, r2, #1
 800cd10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd12:	e008      	b.n	800cd26 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	681a      	ldr	r2, [r3, #0]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f042 0201 	orr.w	r2, r2, #1
 800cd22:	601a      	str	r2, [r3, #0]
 800cd24:	e000      	b.n	800cd28 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cd28:	2300      	movs	r3, #0
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3714      	adds	r7, #20
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr
 800cd36:	bf00      	nop
 800cd38:	40010000 	.word	0x40010000
 800cd3c:	40000400 	.word	0x40000400
 800cd40:	40000800 	.word	0x40000800
 800cd44:	40000c00 	.word	0x40000c00
 800cd48:	40010400 	.word	0x40010400
 800cd4c:	40014000 	.word	0x40014000
 800cd50:	40001800 	.word	0x40001800
 800cd54:	00010007 	.word	0x00010007

0800cd58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b085      	sub	sp, #20
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd66:	b2db      	uxtb	r3, r3
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d001      	beq.n	800cd70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e054      	b.n	800ce1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2202      	movs	r2, #2
 800cd74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	68da      	ldr	r2, [r3, #12]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f042 0201 	orr.w	r2, r2, #1
 800cd86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4a26      	ldr	r2, [pc, #152]	; (800ce28 <HAL_TIM_Base_Start_IT+0xd0>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d022      	beq.n	800cdd8 <HAL_TIM_Base_Start_IT+0x80>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd9a:	d01d      	beq.n	800cdd8 <HAL_TIM_Base_Start_IT+0x80>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a22      	ldr	r2, [pc, #136]	; (800ce2c <HAL_TIM_Base_Start_IT+0xd4>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d018      	beq.n	800cdd8 <HAL_TIM_Base_Start_IT+0x80>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a21      	ldr	r2, [pc, #132]	; (800ce30 <HAL_TIM_Base_Start_IT+0xd8>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d013      	beq.n	800cdd8 <HAL_TIM_Base_Start_IT+0x80>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a1f      	ldr	r2, [pc, #124]	; (800ce34 <HAL_TIM_Base_Start_IT+0xdc>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d00e      	beq.n	800cdd8 <HAL_TIM_Base_Start_IT+0x80>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	4a1e      	ldr	r2, [pc, #120]	; (800ce38 <HAL_TIM_Base_Start_IT+0xe0>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d009      	beq.n	800cdd8 <HAL_TIM_Base_Start_IT+0x80>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a1c      	ldr	r2, [pc, #112]	; (800ce3c <HAL_TIM_Base_Start_IT+0xe4>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d004      	beq.n	800cdd8 <HAL_TIM_Base_Start_IT+0x80>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4a1b      	ldr	r2, [pc, #108]	; (800ce40 <HAL_TIM_Base_Start_IT+0xe8>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d115      	bne.n	800ce04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	689a      	ldr	r2, [r3, #8]
 800cdde:	4b19      	ldr	r3, [pc, #100]	; (800ce44 <HAL_TIM_Base_Start_IT+0xec>)
 800cde0:	4013      	ands	r3, r2
 800cde2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2b06      	cmp	r3, #6
 800cde8:	d015      	beq.n	800ce16 <HAL_TIM_Base_Start_IT+0xbe>
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdf0:	d011      	beq.n	800ce16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f042 0201 	orr.w	r2, r2, #1
 800ce00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce02:	e008      	b.n	800ce16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f042 0201 	orr.w	r2, r2, #1
 800ce12:	601a      	str	r2, [r3, #0]
 800ce14:	e000      	b.n	800ce18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ce18:	2300      	movs	r3, #0
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3714      	adds	r7, #20
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr
 800ce26:	bf00      	nop
 800ce28:	40010000 	.word	0x40010000
 800ce2c:	40000400 	.word	0x40000400
 800ce30:	40000800 	.word	0x40000800
 800ce34:	40000c00 	.word	0x40000c00
 800ce38:	40010400 	.word	0x40010400
 800ce3c:	40014000 	.word	0x40014000
 800ce40:	40001800 	.word	0x40001800
 800ce44:	00010007 	.word	0x00010007

0800ce48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d101      	bne.n	800ce5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ce56:	2301      	movs	r3, #1
 800ce58:	e049      	b.n	800ceee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d106      	bne.n	800ce74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f7f6 f922 	bl	80030b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2202      	movs	r2, #2
 800ce78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681a      	ldr	r2, [r3, #0]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	3304      	adds	r3, #4
 800ce84:	4619      	mov	r1, r3
 800ce86:	4610      	mov	r0, r2
 800ce88:	f000 fb52 	bl	800d530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2201      	movs	r2, #1
 800ce90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2201      	movs	r2, #1
 800ce98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2201      	movs	r2, #1
 800cea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2201      	movs	r2, #1
 800cec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2201      	movs	r2, #1
 800cec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2201      	movs	r2, #1
 800ced0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2201      	movs	r2, #1
 800ced8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2201      	movs	r2, #1
 800cee0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2201      	movs	r2, #1
 800cee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ceec:	2300      	movs	r3, #0
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3708      	adds	r7, #8
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b082      	sub	sp, #8
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	691b      	ldr	r3, [r3, #16]
 800cf04:	f003 0302 	and.w	r3, r3, #2
 800cf08:	2b02      	cmp	r3, #2
 800cf0a:	d122      	bne.n	800cf52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	68db      	ldr	r3, [r3, #12]
 800cf12:	f003 0302 	and.w	r3, r3, #2
 800cf16:	2b02      	cmp	r3, #2
 800cf18:	d11b      	bne.n	800cf52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f06f 0202 	mvn.w	r2, #2
 800cf22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2201      	movs	r2, #1
 800cf28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	699b      	ldr	r3, [r3, #24]
 800cf30:	f003 0303 	and.w	r3, r3, #3
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d003      	beq.n	800cf40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 fadb 	bl	800d4f4 <HAL_TIM_IC_CaptureCallback>
 800cf3e:	e005      	b.n	800cf4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f000 facd 	bl	800d4e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 fade 	bl	800d508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	691b      	ldr	r3, [r3, #16]
 800cf58:	f003 0304 	and.w	r3, r3, #4
 800cf5c:	2b04      	cmp	r3, #4
 800cf5e:	d122      	bne.n	800cfa6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	68db      	ldr	r3, [r3, #12]
 800cf66:	f003 0304 	and.w	r3, r3, #4
 800cf6a:	2b04      	cmp	r3, #4
 800cf6c:	d11b      	bne.n	800cfa6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f06f 0204 	mvn.w	r2, #4
 800cf76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2202      	movs	r2, #2
 800cf7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	699b      	ldr	r3, [r3, #24]
 800cf84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d003      	beq.n	800cf94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 fab1 	bl	800d4f4 <HAL_TIM_IC_CaptureCallback>
 800cf92:	e005      	b.n	800cfa0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f000 faa3 	bl	800d4e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f000 fab4 	bl	800d508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	691b      	ldr	r3, [r3, #16]
 800cfac:	f003 0308 	and.w	r3, r3, #8
 800cfb0:	2b08      	cmp	r3, #8
 800cfb2:	d122      	bne.n	800cffa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	68db      	ldr	r3, [r3, #12]
 800cfba:	f003 0308 	and.w	r3, r3, #8
 800cfbe:	2b08      	cmp	r3, #8
 800cfc0:	d11b      	bne.n	800cffa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f06f 0208 	mvn.w	r2, #8
 800cfca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2204      	movs	r2, #4
 800cfd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	69db      	ldr	r3, [r3, #28]
 800cfd8:	f003 0303 	and.w	r3, r3, #3
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d003      	beq.n	800cfe8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f000 fa87 	bl	800d4f4 <HAL_TIM_IC_CaptureCallback>
 800cfe6:	e005      	b.n	800cff4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 fa79 	bl	800d4e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f000 fa8a 	bl	800d508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2200      	movs	r2, #0
 800cff8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	691b      	ldr	r3, [r3, #16]
 800d000:	f003 0310 	and.w	r3, r3, #16
 800d004:	2b10      	cmp	r3, #16
 800d006:	d122      	bne.n	800d04e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	68db      	ldr	r3, [r3, #12]
 800d00e:	f003 0310 	and.w	r3, r3, #16
 800d012:	2b10      	cmp	r3, #16
 800d014:	d11b      	bne.n	800d04e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f06f 0210 	mvn.w	r2, #16
 800d01e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2208      	movs	r2, #8
 800d024:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	69db      	ldr	r3, [r3, #28]
 800d02c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d030:	2b00      	cmp	r3, #0
 800d032:	d003      	beq.n	800d03c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 fa5d 	bl	800d4f4 <HAL_TIM_IC_CaptureCallback>
 800d03a:	e005      	b.n	800d048 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 fa4f 	bl	800d4e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 fa60 	bl	800d508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2200      	movs	r2, #0
 800d04c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	691b      	ldr	r3, [r3, #16]
 800d054:	f003 0301 	and.w	r3, r3, #1
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d10e      	bne.n	800d07a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	68db      	ldr	r3, [r3, #12]
 800d062:	f003 0301 	and.w	r3, r3, #1
 800d066:	2b01      	cmp	r3, #1
 800d068:	d107      	bne.n	800d07a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f06f 0201 	mvn.w	r2, #1
 800d072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f7f5 fb0b 	bl	8002690 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	691b      	ldr	r3, [r3, #16]
 800d080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d084:	2b80      	cmp	r3, #128	; 0x80
 800d086:	d10e      	bne.n	800d0a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d092:	2b80      	cmp	r3, #128	; 0x80
 800d094:	d107      	bne.n	800d0a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d09e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 fef3 	bl	800de8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	691b      	ldr	r3, [r3, #16]
 800d0ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0b4:	d10e      	bne.n	800d0d4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0c0:	2b80      	cmp	r3, #128	; 0x80
 800d0c2:	d107      	bne.n	800d0d4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d0cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 fee6 	bl	800dea0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	691b      	ldr	r3, [r3, #16]
 800d0da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0de:	2b40      	cmp	r3, #64	; 0x40
 800d0e0:	d10e      	bne.n	800d100 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0ec:	2b40      	cmp	r3, #64	; 0x40
 800d0ee:	d107      	bne.n	800d100 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d0f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f000 fa0e 	bl	800d51c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	691b      	ldr	r3, [r3, #16]
 800d106:	f003 0320 	and.w	r3, r3, #32
 800d10a:	2b20      	cmp	r3, #32
 800d10c:	d10e      	bne.n	800d12c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	68db      	ldr	r3, [r3, #12]
 800d114:	f003 0320 	and.w	r3, r3, #32
 800d118:	2b20      	cmp	r3, #32
 800d11a:	d107      	bne.n	800d12c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f06f 0220 	mvn.w	r2, #32
 800d124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 fea6 	bl	800de78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d12c:	bf00      	nop
 800d12e:	3708      	adds	r7, #8
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
 800d13a:	60f8      	str	r0, [r7, #12]
 800d13c:	60b9      	str	r1, [r7, #8]
 800d13e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d146:	2b01      	cmp	r3, #1
 800d148:	d101      	bne.n	800d14e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d14a:	2302      	movs	r3, #2
 800d14c:	e0fd      	b.n	800d34a <HAL_TIM_PWM_ConfigChannel+0x216>
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2201      	movs	r2, #1
 800d152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2b14      	cmp	r3, #20
 800d15a:	f200 80f0 	bhi.w	800d33e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800d15e:	a201      	add	r2, pc, #4	; (adr r2, 800d164 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800d160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d164:	0800d1b9 	.word	0x0800d1b9
 800d168:	0800d33f 	.word	0x0800d33f
 800d16c:	0800d33f 	.word	0x0800d33f
 800d170:	0800d33f 	.word	0x0800d33f
 800d174:	0800d1f9 	.word	0x0800d1f9
 800d178:	0800d33f 	.word	0x0800d33f
 800d17c:	0800d33f 	.word	0x0800d33f
 800d180:	0800d33f 	.word	0x0800d33f
 800d184:	0800d23b 	.word	0x0800d23b
 800d188:	0800d33f 	.word	0x0800d33f
 800d18c:	0800d33f 	.word	0x0800d33f
 800d190:	0800d33f 	.word	0x0800d33f
 800d194:	0800d27b 	.word	0x0800d27b
 800d198:	0800d33f 	.word	0x0800d33f
 800d19c:	0800d33f 	.word	0x0800d33f
 800d1a0:	0800d33f 	.word	0x0800d33f
 800d1a4:	0800d2bd 	.word	0x0800d2bd
 800d1a8:	0800d33f 	.word	0x0800d33f
 800d1ac:	0800d33f 	.word	0x0800d33f
 800d1b0:	0800d33f 	.word	0x0800d33f
 800d1b4:	0800d2fd 	.word	0x0800d2fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	68b9      	ldr	r1, [r7, #8]
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f000 fa56 	bl	800d670 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	699a      	ldr	r2, [r3, #24]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f042 0208 	orr.w	r2, r2, #8
 800d1d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	699a      	ldr	r2, [r3, #24]
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f022 0204 	bic.w	r2, r2, #4
 800d1e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	6999      	ldr	r1, [r3, #24]
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	691a      	ldr	r2, [r3, #16]
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	430a      	orrs	r2, r1
 800d1f4:	619a      	str	r2, [r3, #24]
      break;
 800d1f6:	e0a3      	b.n	800d340 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	68b9      	ldr	r1, [r7, #8]
 800d1fe:	4618      	mov	r0, r3
 800d200:	f000 faa8 	bl	800d754 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	699a      	ldr	r2, [r3, #24]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	699a      	ldr	r2, [r3, #24]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	6999      	ldr	r1, [r3, #24]
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	691b      	ldr	r3, [r3, #16]
 800d22e:	021a      	lsls	r2, r3, #8
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	430a      	orrs	r2, r1
 800d236:	619a      	str	r2, [r3, #24]
      break;
 800d238:	e082      	b.n	800d340 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	68b9      	ldr	r1, [r7, #8]
 800d240:	4618      	mov	r0, r3
 800d242:	f000 faff 	bl	800d844 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	69da      	ldr	r2, [r3, #28]
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f042 0208 	orr.w	r2, r2, #8
 800d254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	69da      	ldr	r2, [r3, #28]
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f022 0204 	bic.w	r2, r2, #4
 800d264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	69d9      	ldr	r1, [r3, #28]
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	691a      	ldr	r2, [r3, #16]
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	430a      	orrs	r2, r1
 800d276:	61da      	str	r2, [r3, #28]
      break;
 800d278:	e062      	b.n	800d340 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	68b9      	ldr	r1, [r7, #8]
 800d280:	4618      	mov	r0, r3
 800d282:	f000 fb55 	bl	800d930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	69da      	ldr	r2, [r3, #28]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	69da      	ldr	r2, [r3, #28]
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	69d9      	ldr	r1, [r3, #28]
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	691b      	ldr	r3, [r3, #16]
 800d2b0:	021a      	lsls	r2, r3, #8
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	430a      	orrs	r2, r1
 800d2b8:	61da      	str	r2, [r3, #28]
      break;
 800d2ba:	e041      	b.n	800d340 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	68b9      	ldr	r1, [r7, #8]
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f000 fb8c 	bl	800d9e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f042 0208 	orr.w	r2, r2, #8
 800d2d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f022 0204 	bic.w	r2, r2, #4
 800d2e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	691a      	ldr	r2, [r3, #16]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	430a      	orrs	r2, r1
 800d2f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d2fa:	e021      	b.n	800d340 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	68b9      	ldr	r1, [r7, #8]
 800d302:	4618      	mov	r0, r3
 800d304:	f000 fbbe 	bl	800da84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d316:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d326:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	691b      	ldr	r3, [r3, #16]
 800d332:	021a      	lsls	r2, r3, #8
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	430a      	orrs	r2, r1
 800d33a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d33c:	e000      	b.n	800d340 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800d33e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2200      	movs	r2, #0
 800d344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d348:	2300      	movs	r3, #0
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3710      	adds	r7, #16
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop

0800d354 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d364:	2b01      	cmp	r3, #1
 800d366:	d101      	bne.n	800d36c <HAL_TIM_ConfigClockSource+0x18>
 800d368:	2302      	movs	r3, #2
 800d36a:	e0b3      	b.n	800d4d4 <HAL_TIM_ConfigClockSource+0x180>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2201      	movs	r2, #1
 800d370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2202      	movs	r2, #2
 800d378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	689b      	ldr	r3, [r3, #8]
 800d382:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d384:	68fa      	ldr	r2, [r7, #12]
 800d386:	4b55      	ldr	r3, [pc, #340]	; (800d4dc <HAL_TIM_ConfigClockSource+0x188>)
 800d388:	4013      	ands	r3, r2
 800d38a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d392:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	68fa      	ldr	r2, [r7, #12]
 800d39a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d3a4:	d03e      	beq.n	800d424 <HAL_TIM_ConfigClockSource+0xd0>
 800d3a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d3aa:	f200 8087 	bhi.w	800d4bc <HAL_TIM_ConfigClockSource+0x168>
 800d3ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3b2:	f000 8085 	beq.w	800d4c0 <HAL_TIM_ConfigClockSource+0x16c>
 800d3b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3ba:	d87f      	bhi.n	800d4bc <HAL_TIM_ConfigClockSource+0x168>
 800d3bc:	2b70      	cmp	r3, #112	; 0x70
 800d3be:	d01a      	beq.n	800d3f6 <HAL_TIM_ConfigClockSource+0xa2>
 800d3c0:	2b70      	cmp	r3, #112	; 0x70
 800d3c2:	d87b      	bhi.n	800d4bc <HAL_TIM_ConfigClockSource+0x168>
 800d3c4:	2b60      	cmp	r3, #96	; 0x60
 800d3c6:	d050      	beq.n	800d46a <HAL_TIM_ConfigClockSource+0x116>
 800d3c8:	2b60      	cmp	r3, #96	; 0x60
 800d3ca:	d877      	bhi.n	800d4bc <HAL_TIM_ConfigClockSource+0x168>
 800d3cc:	2b50      	cmp	r3, #80	; 0x50
 800d3ce:	d03c      	beq.n	800d44a <HAL_TIM_ConfigClockSource+0xf6>
 800d3d0:	2b50      	cmp	r3, #80	; 0x50
 800d3d2:	d873      	bhi.n	800d4bc <HAL_TIM_ConfigClockSource+0x168>
 800d3d4:	2b40      	cmp	r3, #64	; 0x40
 800d3d6:	d058      	beq.n	800d48a <HAL_TIM_ConfigClockSource+0x136>
 800d3d8:	2b40      	cmp	r3, #64	; 0x40
 800d3da:	d86f      	bhi.n	800d4bc <HAL_TIM_ConfigClockSource+0x168>
 800d3dc:	2b30      	cmp	r3, #48	; 0x30
 800d3de:	d064      	beq.n	800d4aa <HAL_TIM_ConfigClockSource+0x156>
 800d3e0:	2b30      	cmp	r3, #48	; 0x30
 800d3e2:	d86b      	bhi.n	800d4bc <HAL_TIM_ConfigClockSource+0x168>
 800d3e4:	2b20      	cmp	r3, #32
 800d3e6:	d060      	beq.n	800d4aa <HAL_TIM_ConfigClockSource+0x156>
 800d3e8:	2b20      	cmp	r3, #32
 800d3ea:	d867      	bhi.n	800d4bc <HAL_TIM_ConfigClockSource+0x168>
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d05c      	beq.n	800d4aa <HAL_TIM_ConfigClockSource+0x156>
 800d3f0:	2b10      	cmp	r3, #16
 800d3f2:	d05a      	beq.n	800d4aa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800d3f4:	e062      	b.n	800d4bc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6818      	ldr	r0, [r3, #0]
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	6899      	ldr	r1, [r3, #8]
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	685a      	ldr	r2, [r3, #4]
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	68db      	ldr	r3, [r3, #12]
 800d406:	f000 fc0b 	bl	800dc20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	689b      	ldr	r3, [r3, #8]
 800d410:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d418:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	68fa      	ldr	r2, [r7, #12]
 800d420:	609a      	str	r2, [r3, #8]
      break;
 800d422:	e04e      	b.n	800d4c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6818      	ldr	r0, [r3, #0]
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	6899      	ldr	r1, [r3, #8]
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	685a      	ldr	r2, [r3, #4]
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	68db      	ldr	r3, [r3, #12]
 800d434:	f000 fbf4 	bl	800dc20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	689a      	ldr	r2, [r3, #8]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d446:	609a      	str	r2, [r3, #8]
      break;
 800d448:	e03b      	b.n	800d4c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6818      	ldr	r0, [r3, #0]
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	6859      	ldr	r1, [r3, #4]
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	68db      	ldr	r3, [r3, #12]
 800d456:	461a      	mov	r2, r3
 800d458:	f000 fb68 	bl	800db2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2150      	movs	r1, #80	; 0x50
 800d462:	4618      	mov	r0, r3
 800d464:	f000 fbc1 	bl	800dbea <TIM_ITRx_SetConfig>
      break;
 800d468:	e02b      	b.n	800d4c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6818      	ldr	r0, [r3, #0]
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	6859      	ldr	r1, [r3, #4]
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	68db      	ldr	r3, [r3, #12]
 800d476:	461a      	mov	r2, r3
 800d478:	f000 fb87 	bl	800db8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	2160      	movs	r1, #96	; 0x60
 800d482:	4618      	mov	r0, r3
 800d484:	f000 fbb1 	bl	800dbea <TIM_ITRx_SetConfig>
      break;
 800d488:	e01b      	b.n	800d4c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6818      	ldr	r0, [r3, #0]
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	6859      	ldr	r1, [r3, #4]
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	68db      	ldr	r3, [r3, #12]
 800d496:	461a      	mov	r2, r3
 800d498:	f000 fb48 	bl	800db2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	2140      	movs	r1, #64	; 0x40
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f000 fba1 	bl	800dbea <TIM_ITRx_SetConfig>
      break;
 800d4a8:	e00b      	b.n	800d4c2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681a      	ldr	r2, [r3, #0]
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	4610      	mov	r0, r2
 800d4b6:	f000 fb98 	bl	800dbea <TIM_ITRx_SetConfig>
        break;
 800d4ba:	e002      	b.n	800d4c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800d4bc:	bf00      	nop
 800d4be:	e000      	b.n	800d4c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800d4c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d4d2:	2300      	movs	r3, #0
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3710      	adds	r7, #16
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	fffeff88 	.word	0xfffeff88

0800d4e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b083      	sub	sp, #12
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d4e8:	bf00      	nop
 800d4ea:	370c      	adds	r7, #12
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr

0800d4f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d4fc:	bf00      	nop
 800d4fe:	370c      	adds	r7, #12
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d508:	b480      	push	{r7}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d510:	bf00      	nop
 800d512:	370c      	adds	r7, #12
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr

0800d51c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d524:	bf00      	nop
 800d526:	370c      	adds	r7, #12
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d530:	b480      	push	{r7}
 800d532:	b085      	sub	sp, #20
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	4a40      	ldr	r2, [pc, #256]	; (800d644 <TIM_Base_SetConfig+0x114>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d013      	beq.n	800d570 <TIM_Base_SetConfig+0x40>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d54e:	d00f      	beq.n	800d570 <TIM_Base_SetConfig+0x40>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	4a3d      	ldr	r2, [pc, #244]	; (800d648 <TIM_Base_SetConfig+0x118>)
 800d554:	4293      	cmp	r3, r2
 800d556:	d00b      	beq.n	800d570 <TIM_Base_SetConfig+0x40>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	4a3c      	ldr	r2, [pc, #240]	; (800d64c <TIM_Base_SetConfig+0x11c>)
 800d55c:	4293      	cmp	r3, r2
 800d55e:	d007      	beq.n	800d570 <TIM_Base_SetConfig+0x40>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	4a3b      	ldr	r2, [pc, #236]	; (800d650 <TIM_Base_SetConfig+0x120>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d003      	beq.n	800d570 <TIM_Base_SetConfig+0x40>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	4a3a      	ldr	r2, [pc, #232]	; (800d654 <TIM_Base_SetConfig+0x124>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d108      	bne.n	800d582 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	68fa      	ldr	r2, [r7, #12]
 800d57e:	4313      	orrs	r3, r2
 800d580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	4a2f      	ldr	r2, [pc, #188]	; (800d644 <TIM_Base_SetConfig+0x114>)
 800d586:	4293      	cmp	r3, r2
 800d588:	d02b      	beq.n	800d5e2 <TIM_Base_SetConfig+0xb2>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d590:	d027      	beq.n	800d5e2 <TIM_Base_SetConfig+0xb2>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	4a2c      	ldr	r2, [pc, #176]	; (800d648 <TIM_Base_SetConfig+0x118>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d023      	beq.n	800d5e2 <TIM_Base_SetConfig+0xb2>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	4a2b      	ldr	r2, [pc, #172]	; (800d64c <TIM_Base_SetConfig+0x11c>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d01f      	beq.n	800d5e2 <TIM_Base_SetConfig+0xb2>
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	4a2a      	ldr	r2, [pc, #168]	; (800d650 <TIM_Base_SetConfig+0x120>)
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d01b      	beq.n	800d5e2 <TIM_Base_SetConfig+0xb2>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	4a29      	ldr	r2, [pc, #164]	; (800d654 <TIM_Base_SetConfig+0x124>)
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d017      	beq.n	800d5e2 <TIM_Base_SetConfig+0xb2>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	4a28      	ldr	r2, [pc, #160]	; (800d658 <TIM_Base_SetConfig+0x128>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d013      	beq.n	800d5e2 <TIM_Base_SetConfig+0xb2>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	4a27      	ldr	r2, [pc, #156]	; (800d65c <TIM_Base_SetConfig+0x12c>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d00f      	beq.n	800d5e2 <TIM_Base_SetConfig+0xb2>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	4a26      	ldr	r2, [pc, #152]	; (800d660 <TIM_Base_SetConfig+0x130>)
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d00b      	beq.n	800d5e2 <TIM_Base_SetConfig+0xb2>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	4a25      	ldr	r2, [pc, #148]	; (800d664 <TIM_Base_SetConfig+0x134>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d007      	beq.n	800d5e2 <TIM_Base_SetConfig+0xb2>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	4a24      	ldr	r2, [pc, #144]	; (800d668 <TIM_Base_SetConfig+0x138>)
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d003      	beq.n	800d5e2 <TIM_Base_SetConfig+0xb2>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	4a23      	ldr	r2, [pc, #140]	; (800d66c <TIM_Base_SetConfig+0x13c>)
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d108      	bne.n	800d5f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d5e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	68db      	ldr	r3, [r3, #12]
 800d5ee:	68fa      	ldr	r2, [r7, #12]
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	695b      	ldr	r3, [r3, #20]
 800d5fe:	4313      	orrs	r3, r2
 800d600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	68fa      	ldr	r2, [r7, #12]
 800d606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	689a      	ldr	r2, [r3, #8]
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	681a      	ldr	r2, [r3, #0]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	4a0a      	ldr	r2, [pc, #40]	; (800d644 <TIM_Base_SetConfig+0x114>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d003      	beq.n	800d628 <TIM_Base_SetConfig+0xf8>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4a0c      	ldr	r2, [pc, #48]	; (800d654 <TIM_Base_SetConfig+0x124>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d103      	bne.n	800d630 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	691a      	ldr	r2, [r3, #16]
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2201      	movs	r2, #1
 800d634:	615a      	str	r2, [r3, #20]
}
 800d636:	bf00      	nop
 800d638:	3714      	adds	r7, #20
 800d63a:	46bd      	mov	sp, r7
 800d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d640:	4770      	bx	lr
 800d642:	bf00      	nop
 800d644:	40010000 	.word	0x40010000
 800d648:	40000400 	.word	0x40000400
 800d64c:	40000800 	.word	0x40000800
 800d650:	40000c00 	.word	0x40000c00
 800d654:	40010400 	.word	0x40010400
 800d658:	40014000 	.word	0x40014000
 800d65c:	40014400 	.word	0x40014400
 800d660:	40014800 	.word	0x40014800
 800d664:	40001800 	.word	0x40001800
 800d668:	40001c00 	.word	0x40001c00
 800d66c:	40002000 	.word	0x40002000

0800d670 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d670:	b480      	push	{r7}
 800d672:	b087      	sub	sp, #28
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6a1b      	ldr	r3, [r3, #32]
 800d67e:	f023 0201 	bic.w	r2, r3, #1
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6a1b      	ldr	r3, [r3, #32]
 800d68a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	699b      	ldr	r3, [r3, #24]
 800d696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d698:	68fa      	ldr	r2, [r7, #12]
 800d69a:	4b2b      	ldr	r3, [pc, #172]	; (800d748 <TIM_OC1_SetConfig+0xd8>)
 800d69c:	4013      	ands	r3, r2
 800d69e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f023 0303 	bic.w	r3, r3, #3
 800d6a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	68fa      	ldr	r2, [r7, #12]
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	f023 0302 	bic.w	r3, r3, #2
 800d6b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	697a      	ldr	r2, [r7, #20]
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	4a21      	ldr	r2, [pc, #132]	; (800d74c <TIM_OC1_SetConfig+0xdc>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d003      	beq.n	800d6d4 <TIM_OC1_SetConfig+0x64>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	4a20      	ldr	r2, [pc, #128]	; (800d750 <TIM_OC1_SetConfig+0xe0>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d10c      	bne.n	800d6ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	f023 0308 	bic.w	r3, r3, #8
 800d6da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	697a      	ldr	r2, [r7, #20]
 800d6e2:	4313      	orrs	r3, r2
 800d6e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	f023 0304 	bic.w	r3, r3, #4
 800d6ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	4a16      	ldr	r2, [pc, #88]	; (800d74c <TIM_OC1_SetConfig+0xdc>)
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d003      	beq.n	800d6fe <TIM_OC1_SetConfig+0x8e>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	4a15      	ldr	r2, [pc, #84]	; (800d750 <TIM_OC1_SetConfig+0xe0>)
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d111      	bne.n	800d722 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d70c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	695b      	ldr	r3, [r3, #20]
 800d712:	693a      	ldr	r2, [r7, #16]
 800d714:	4313      	orrs	r3, r2
 800d716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	699b      	ldr	r3, [r3, #24]
 800d71c:	693a      	ldr	r2, [r7, #16]
 800d71e:	4313      	orrs	r3, r2
 800d720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	693a      	ldr	r2, [r7, #16]
 800d726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	68fa      	ldr	r2, [r7, #12]
 800d72c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	685a      	ldr	r2, [r3, #4]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	697a      	ldr	r2, [r7, #20]
 800d73a:	621a      	str	r2, [r3, #32]
}
 800d73c:	bf00      	nop
 800d73e:	371c      	adds	r7, #28
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr
 800d748:	fffeff8f 	.word	0xfffeff8f
 800d74c:	40010000 	.word	0x40010000
 800d750:	40010400 	.word	0x40010400

0800d754 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d754:	b480      	push	{r7}
 800d756:	b087      	sub	sp, #28
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6a1b      	ldr	r3, [r3, #32]
 800d762:	f023 0210 	bic.w	r2, r3, #16
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6a1b      	ldr	r3, [r3, #32]
 800d76e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	699b      	ldr	r3, [r3, #24]
 800d77a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d77c:	68fa      	ldr	r2, [r7, #12]
 800d77e:	4b2e      	ldr	r3, [pc, #184]	; (800d838 <TIM_OC2_SetConfig+0xe4>)
 800d780:	4013      	ands	r3, r2
 800d782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d78a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	021b      	lsls	r3, r3, #8
 800d792:	68fa      	ldr	r2, [r7, #12]
 800d794:	4313      	orrs	r3, r2
 800d796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	f023 0320 	bic.w	r3, r3, #32
 800d79e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	689b      	ldr	r3, [r3, #8]
 800d7a4:	011b      	lsls	r3, r3, #4
 800d7a6:	697a      	ldr	r2, [r7, #20]
 800d7a8:	4313      	orrs	r3, r2
 800d7aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	4a23      	ldr	r2, [pc, #140]	; (800d83c <TIM_OC2_SetConfig+0xe8>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d003      	beq.n	800d7bc <TIM_OC2_SetConfig+0x68>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	4a22      	ldr	r2, [pc, #136]	; (800d840 <TIM_OC2_SetConfig+0xec>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d10d      	bne.n	800d7d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d7c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	68db      	ldr	r3, [r3, #12]
 800d7c8:	011b      	lsls	r3, r3, #4
 800d7ca:	697a      	ldr	r2, [r7, #20]
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	4a18      	ldr	r2, [pc, #96]	; (800d83c <TIM_OC2_SetConfig+0xe8>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d003      	beq.n	800d7e8 <TIM_OC2_SetConfig+0x94>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	4a17      	ldr	r2, [pc, #92]	; (800d840 <TIM_OC2_SetConfig+0xec>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d113      	bne.n	800d810 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d7ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d7f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	695b      	ldr	r3, [r3, #20]
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	693a      	ldr	r2, [r7, #16]
 800d800:	4313      	orrs	r3, r2
 800d802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	699b      	ldr	r3, [r3, #24]
 800d808:	009b      	lsls	r3, r3, #2
 800d80a:	693a      	ldr	r2, [r7, #16]
 800d80c:	4313      	orrs	r3, r2
 800d80e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	693a      	ldr	r2, [r7, #16]
 800d814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	68fa      	ldr	r2, [r7, #12]
 800d81a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	685a      	ldr	r2, [r3, #4]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	697a      	ldr	r2, [r7, #20]
 800d828:	621a      	str	r2, [r3, #32]
}
 800d82a:	bf00      	nop
 800d82c:	371c      	adds	r7, #28
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr
 800d836:	bf00      	nop
 800d838:	feff8fff 	.word	0xfeff8fff
 800d83c:	40010000 	.word	0x40010000
 800d840:	40010400 	.word	0x40010400

0800d844 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d844:	b480      	push	{r7}
 800d846:	b087      	sub	sp, #28
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6a1b      	ldr	r3, [r3, #32]
 800d852:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6a1b      	ldr	r3, [r3, #32]
 800d85e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	69db      	ldr	r3, [r3, #28]
 800d86a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d86c:	68fa      	ldr	r2, [r7, #12]
 800d86e:	4b2d      	ldr	r3, [pc, #180]	; (800d924 <TIM_OC3_SetConfig+0xe0>)
 800d870:	4013      	ands	r3, r2
 800d872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f023 0303 	bic.w	r3, r3, #3
 800d87a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	68fa      	ldr	r2, [r7, #12]
 800d882:	4313      	orrs	r3, r2
 800d884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d88c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	689b      	ldr	r3, [r3, #8]
 800d892:	021b      	lsls	r3, r3, #8
 800d894:	697a      	ldr	r2, [r7, #20]
 800d896:	4313      	orrs	r3, r2
 800d898:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	4a22      	ldr	r2, [pc, #136]	; (800d928 <TIM_OC3_SetConfig+0xe4>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d003      	beq.n	800d8aa <TIM_OC3_SetConfig+0x66>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	4a21      	ldr	r2, [pc, #132]	; (800d92c <TIM_OC3_SetConfig+0xe8>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d10d      	bne.n	800d8c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d8b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	68db      	ldr	r3, [r3, #12]
 800d8b6:	021b      	lsls	r3, r3, #8
 800d8b8:	697a      	ldr	r2, [r7, #20]
 800d8ba:	4313      	orrs	r3, r2
 800d8bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d8c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	4a17      	ldr	r2, [pc, #92]	; (800d928 <TIM_OC3_SetConfig+0xe4>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d003      	beq.n	800d8d6 <TIM_OC3_SetConfig+0x92>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	4a16      	ldr	r2, [pc, #88]	; (800d92c <TIM_OC3_SetConfig+0xe8>)
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d113      	bne.n	800d8fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d8e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	695b      	ldr	r3, [r3, #20]
 800d8ea:	011b      	lsls	r3, r3, #4
 800d8ec:	693a      	ldr	r2, [r7, #16]
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	699b      	ldr	r3, [r3, #24]
 800d8f6:	011b      	lsls	r3, r3, #4
 800d8f8:	693a      	ldr	r2, [r7, #16]
 800d8fa:	4313      	orrs	r3, r2
 800d8fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	693a      	ldr	r2, [r7, #16]
 800d902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	68fa      	ldr	r2, [r7, #12]
 800d908:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	685a      	ldr	r2, [r3, #4]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	697a      	ldr	r2, [r7, #20]
 800d916:	621a      	str	r2, [r3, #32]
}
 800d918:	bf00      	nop
 800d91a:	371c      	adds	r7, #28
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr
 800d924:	fffeff8f 	.word	0xfffeff8f
 800d928:	40010000 	.word	0x40010000
 800d92c:	40010400 	.word	0x40010400

0800d930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d930:	b480      	push	{r7}
 800d932:	b087      	sub	sp, #28
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6a1b      	ldr	r3, [r3, #32]
 800d93e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6a1b      	ldr	r3, [r3, #32]
 800d94a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	69db      	ldr	r3, [r3, #28]
 800d956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d958:	68fa      	ldr	r2, [r7, #12]
 800d95a:	4b1e      	ldr	r3, [pc, #120]	; (800d9d4 <TIM_OC4_SetConfig+0xa4>)
 800d95c:	4013      	ands	r3, r2
 800d95e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	021b      	lsls	r3, r3, #8
 800d96e:	68fa      	ldr	r2, [r7, #12]
 800d970:	4313      	orrs	r3, r2
 800d972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d97a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	689b      	ldr	r3, [r3, #8]
 800d980:	031b      	lsls	r3, r3, #12
 800d982:	693a      	ldr	r2, [r7, #16]
 800d984:	4313      	orrs	r3, r2
 800d986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	4a13      	ldr	r2, [pc, #76]	; (800d9d8 <TIM_OC4_SetConfig+0xa8>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d003      	beq.n	800d998 <TIM_OC4_SetConfig+0x68>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	4a12      	ldr	r2, [pc, #72]	; (800d9dc <TIM_OC4_SetConfig+0xac>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d109      	bne.n	800d9ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d99e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	695b      	ldr	r3, [r3, #20]
 800d9a4:	019b      	lsls	r3, r3, #6
 800d9a6:	697a      	ldr	r2, [r7, #20]
 800d9a8:	4313      	orrs	r3, r2
 800d9aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	697a      	ldr	r2, [r7, #20]
 800d9b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	68fa      	ldr	r2, [r7, #12]
 800d9b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	685a      	ldr	r2, [r3, #4]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	693a      	ldr	r2, [r7, #16]
 800d9c4:	621a      	str	r2, [r3, #32]
}
 800d9c6:	bf00      	nop
 800d9c8:	371c      	adds	r7, #28
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	feff8fff 	.word	0xfeff8fff
 800d9d8:	40010000 	.word	0x40010000
 800d9dc:	40010400 	.word	0x40010400

0800d9e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b087      	sub	sp, #28
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6a1b      	ldr	r3, [r3, #32]
 800d9ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6a1b      	ldr	r3, [r3, #32]
 800d9fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800da08:	68fa      	ldr	r2, [r7, #12]
 800da0a:	4b1b      	ldr	r3, [pc, #108]	; (800da78 <TIM_OC5_SetConfig+0x98>)
 800da0c:	4013      	ands	r3, r2
 800da0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	68fa      	ldr	r2, [r7, #12]
 800da16:	4313      	orrs	r3, r2
 800da18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800da20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	689b      	ldr	r3, [r3, #8]
 800da26:	041b      	lsls	r3, r3, #16
 800da28:	693a      	ldr	r2, [r7, #16]
 800da2a:	4313      	orrs	r3, r2
 800da2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	4a12      	ldr	r2, [pc, #72]	; (800da7c <TIM_OC5_SetConfig+0x9c>)
 800da32:	4293      	cmp	r3, r2
 800da34:	d003      	beq.n	800da3e <TIM_OC5_SetConfig+0x5e>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	4a11      	ldr	r2, [pc, #68]	; (800da80 <TIM_OC5_SetConfig+0xa0>)
 800da3a:	4293      	cmp	r3, r2
 800da3c:	d109      	bne.n	800da52 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800da44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	695b      	ldr	r3, [r3, #20]
 800da4a:	021b      	lsls	r3, r3, #8
 800da4c:	697a      	ldr	r2, [r7, #20]
 800da4e:	4313      	orrs	r3, r2
 800da50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	697a      	ldr	r2, [r7, #20]
 800da56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	68fa      	ldr	r2, [r7, #12]
 800da5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	685a      	ldr	r2, [r3, #4]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	693a      	ldr	r2, [r7, #16]
 800da6a:	621a      	str	r2, [r3, #32]
}
 800da6c:	bf00      	nop
 800da6e:	371c      	adds	r7, #28
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr
 800da78:	fffeff8f 	.word	0xfffeff8f
 800da7c:	40010000 	.word	0x40010000
 800da80:	40010400 	.word	0x40010400

0800da84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800da84:	b480      	push	{r7}
 800da86:	b087      	sub	sp, #28
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6a1b      	ldr	r3, [r3, #32]
 800da92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6a1b      	ldr	r3, [r3, #32]
 800da9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	685b      	ldr	r3, [r3, #4]
 800daa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800daac:	68fa      	ldr	r2, [r7, #12]
 800daae:	4b1c      	ldr	r3, [pc, #112]	; (800db20 <TIM_OC6_SetConfig+0x9c>)
 800dab0:	4013      	ands	r3, r2
 800dab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	021b      	lsls	r3, r3, #8
 800daba:	68fa      	ldr	r2, [r7, #12]
 800dabc:	4313      	orrs	r3, r2
 800dabe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	689b      	ldr	r3, [r3, #8]
 800dacc:	051b      	lsls	r3, r3, #20
 800dace:	693a      	ldr	r2, [r7, #16]
 800dad0:	4313      	orrs	r3, r2
 800dad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	4a13      	ldr	r2, [pc, #76]	; (800db24 <TIM_OC6_SetConfig+0xa0>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d003      	beq.n	800dae4 <TIM_OC6_SetConfig+0x60>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	4a12      	ldr	r2, [pc, #72]	; (800db28 <TIM_OC6_SetConfig+0xa4>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d109      	bne.n	800daf8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800daea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	695b      	ldr	r3, [r3, #20]
 800daf0:	029b      	lsls	r3, r3, #10
 800daf2:	697a      	ldr	r2, [r7, #20]
 800daf4:	4313      	orrs	r3, r2
 800daf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	697a      	ldr	r2, [r7, #20]
 800dafc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	68fa      	ldr	r2, [r7, #12]
 800db02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	685a      	ldr	r2, [r3, #4]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	693a      	ldr	r2, [r7, #16]
 800db10:	621a      	str	r2, [r3, #32]
}
 800db12:	bf00      	nop
 800db14:	371c      	adds	r7, #28
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr
 800db1e:	bf00      	nop
 800db20:	feff8fff 	.word	0xfeff8fff
 800db24:	40010000 	.word	0x40010000
 800db28:	40010400 	.word	0x40010400

0800db2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b087      	sub	sp, #28
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	6a1b      	ldr	r3, [r3, #32]
 800db3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	6a1b      	ldr	r3, [r3, #32]
 800db42:	f023 0201 	bic.w	r2, r3, #1
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	699b      	ldr	r3, [r3, #24]
 800db4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800db56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	011b      	lsls	r3, r3, #4
 800db5c:	693a      	ldr	r2, [r7, #16]
 800db5e:	4313      	orrs	r3, r2
 800db60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	f023 030a 	bic.w	r3, r3, #10
 800db68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800db6a:	697a      	ldr	r2, [r7, #20]
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	4313      	orrs	r3, r2
 800db70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	693a      	ldr	r2, [r7, #16]
 800db76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	697a      	ldr	r2, [r7, #20]
 800db7c:	621a      	str	r2, [r3, #32]
}
 800db7e:	bf00      	nop
 800db80:	371c      	adds	r7, #28
 800db82:	46bd      	mov	sp, r7
 800db84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db88:	4770      	bx	lr

0800db8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800db8a:	b480      	push	{r7}
 800db8c:	b087      	sub	sp, #28
 800db8e:	af00      	add	r7, sp, #0
 800db90:	60f8      	str	r0, [r7, #12]
 800db92:	60b9      	str	r1, [r7, #8]
 800db94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	6a1b      	ldr	r3, [r3, #32]
 800db9a:	f023 0210 	bic.w	r2, r3, #16
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	699b      	ldr	r3, [r3, #24]
 800dba6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	6a1b      	ldr	r3, [r3, #32]
 800dbac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dbb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	031b      	lsls	r3, r3, #12
 800dbba:	697a      	ldr	r2, [r7, #20]
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dbc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	011b      	lsls	r3, r3, #4
 800dbcc:	693a      	ldr	r2, [r7, #16]
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	697a      	ldr	r2, [r7, #20]
 800dbd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	693a      	ldr	r2, [r7, #16]
 800dbdc:	621a      	str	r2, [r3, #32]
}
 800dbde:	bf00      	nop
 800dbe0:	371c      	adds	r7, #28
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr

0800dbea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dbea:	b480      	push	{r7}
 800dbec:	b085      	sub	sp, #20
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
 800dbf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dc02:	683a      	ldr	r2, [r7, #0]
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	4313      	orrs	r3, r2
 800dc08:	f043 0307 	orr.w	r3, r3, #7
 800dc0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	68fa      	ldr	r2, [r7, #12]
 800dc12:	609a      	str	r2, [r3, #8]
}
 800dc14:	bf00      	nop
 800dc16:	3714      	adds	r7, #20
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b087      	sub	sp, #28
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	60b9      	str	r1, [r7, #8]
 800dc2a:	607a      	str	r2, [r7, #4]
 800dc2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	689b      	ldr	r3, [r3, #8]
 800dc32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dc3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	021a      	lsls	r2, r3, #8
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	431a      	orrs	r2, r3
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	4313      	orrs	r3, r2
 800dc48:	697a      	ldr	r2, [r7, #20]
 800dc4a:	4313      	orrs	r3, r2
 800dc4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	697a      	ldr	r2, [r7, #20]
 800dc52:	609a      	str	r2, [r3, #8]
}
 800dc54:	bf00      	nop
 800dc56:	371c      	adds	r7, #28
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr

0800dc60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b085      	sub	sp, #20
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	d101      	bne.n	800dc78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dc74:	2302      	movs	r3, #2
 800dc76:	e06d      	b.n	800dd54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2202      	movs	r2, #2
 800dc84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	689b      	ldr	r3, [r3, #8]
 800dc96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4a30      	ldr	r2, [pc, #192]	; (800dd60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d004      	beq.n	800dcac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	4a2f      	ldr	r2, [pc, #188]	; (800dd64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dca8:	4293      	cmp	r3, r2
 800dcaa:	d108      	bne.n	800dcbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dcb2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	68fa      	ldr	r2, [r7, #12]
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	68fa      	ldr	r2, [r7, #12]
 800dccc:	4313      	orrs	r3, r2
 800dcce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	68fa      	ldr	r2, [r7, #12]
 800dcd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4a20      	ldr	r2, [pc, #128]	; (800dd60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d022      	beq.n	800dd28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcea:	d01d      	beq.n	800dd28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a1d      	ldr	r2, [pc, #116]	; (800dd68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d018      	beq.n	800dd28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4a1c      	ldr	r2, [pc, #112]	; (800dd6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d013      	beq.n	800dd28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	4a1a      	ldr	r2, [pc, #104]	; (800dd70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d00e      	beq.n	800dd28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	4a15      	ldr	r2, [pc, #84]	; (800dd64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d009      	beq.n	800dd28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	4a16      	ldr	r2, [pc, #88]	; (800dd74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	d004      	beq.n	800dd28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	4a15      	ldr	r2, [pc, #84]	; (800dd78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d10c      	bne.n	800dd42 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	689b      	ldr	r3, [r3, #8]
 800dd34:	68ba      	ldr	r2, [r7, #8]
 800dd36:	4313      	orrs	r3, r2
 800dd38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	68ba      	ldr	r2, [r7, #8]
 800dd40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2201      	movs	r2, #1
 800dd46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd52:	2300      	movs	r3, #0
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3714      	adds	r7, #20
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr
 800dd60:	40010000 	.word	0x40010000
 800dd64:	40010400 	.word	0x40010400
 800dd68:	40000400 	.word	0x40000400
 800dd6c:	40000800 	.word	0x40000800
 800dd70:	40000c00 	.word	0x40000c00
 800dd74:	40014000 	.word	0x40014000
 800dd78:	40001800 	.word	0x40001800

0800dd7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b085      	sub	sp, #20
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dd86:	2300      	movs	r3, #0
 800dd88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd90:	2b01      	cmp	r3, #1
 800dd92:	d101      	bne.n	800dd98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dd94:	2302      	movs	r3, #2
 800dd96:	e065      	b.n	800de64 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	68db      	ldr	r3, [r3, #12]
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	689b      	ldr	r3, [r3, #8]
 800ddb8:	4313      	orrs	r3, r2
 800ddba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	691b      	ldr	r3, [r3, #16]
 800dde2:	4313      	orrs	r3, r2
 800dde4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	695b      	ldr	r3, [r3, #20]
 800ddf0:	4313      	orrs	r3, r2
 800ddf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddfe:	4313      	orrs	r3, r2
 800de00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	699b      	ldr	r3, [r3, #24]
 800de0c:	041b      	lsls	r3, r3, #16
 800de0e:	4313      	orrs	r3, r2
 800de10:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	4a16      	ldr	r2, [pc, #88]	; (800de70 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d004      	beq.n	800de26 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4a14      	ldr	r2, [pc, #80]	; (800de74 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d115      	bne.n	800de52 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de30:	051b      	lsls	r3, r3, #20
 800de32:	4313      	orrs	r3, r2
 800de34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	69db      	ldr	r3, [r3, #28]
 800de40:	4313      	orrs	r3, r2
 800de42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	6a1b      	ldr	r3, [r3, #32]
 800de4e:	4313      	orrs	r3, r2
 800de50:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	68fa      	ldr	r2, [r7, #12]
 800de58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2200      	movs	r2, #0
 800de5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800de62:	2300      	movs	r3, #0
}
 800de64:	4618      	mov	r0, r3
 800de66:	3714      	adds	r7, #20
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr
 800de70:	40010000 	.word	0x40010000
 800de74:	40010400 	.word	0x40010400

0800de78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800de78:	b480      	push	{r7}
 800de7a:	b083      	sub	sp, #12
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800de80:	bf00      	nop
 800de82:	370c      	adds	r7, #12
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr

0800de8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800de94:	bf00      	nop
 800de96:	370c      	adds	r7, #12
 800de98:	46bd      	mov	sp, r7
 800de9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9e:	4770      	bx	lr

0800dea0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dea0:	b480      	push	{r7}
 800dea2:	b083      	sub	sp, #12
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dea8:	bf00      	nop
 800deaa:	370c      	adds	r7, #12
 800deac:	46bd      	mov	sp, r7
 800deae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb2:	4770      	bx	lr

0800deb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d101      	bne.n	800dec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dec2:	2301      	movs	r3, #1
 800dec4:	e040      	b.n	800df48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800deca:	2b00      	cmp	r3, #0
 800decc:	d106      	bne.n	800dedc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2200      	movs	r2, #0
 800ded2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f7f5 f9dc 	bl	8003294 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2224      	movs	r2, #36	; 0x24
 800dee0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	681a      	ldr	r2, [r3, #0]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f022 0201 	bic.w	r2, r2, #1
 800def0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f000 f8c0 	bl	800e078 <UART_SetConfig>
 800def8:	4603      	mov	r3, r0
 800defa:	2b01      	cmp	r3, #1
 800defc:	d101      	bne.n	800df02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800defe:	2301      	movs	r3, #1
 800df00:	e022      	b.n	800df48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df06:	2b00      	cmp	r3, #0
 800df08:	d002      	beq.n	800df10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 fb16 	bl	800e53c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	685a      	ldr	r2, [r3, #4]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800df1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	689a      	ldr	r2, [r3, #8]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800df2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	681a      	ldr	r2, [r3, #0]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f042 0201 	orr.w	r2, r2, #1
 800df3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 fb9d 	bl	800e680 <UART_CheckIdleState>
 800df46:	4603      	mov	r3, r0
}
 800df48:	4618      	mov	r0, r3
 800df4a:	3708      	adds	r7, #8
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}

0800df50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b08a      	sub	sp, #40	; 0x28
 800df54:	af02      	add	r7, sp, #8
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	60b9      	str	r1, [r7, #8]
 800df5a:	603b      	str	r3, [r7, #0]
 800df5c:	4613      	mov	r3, r2
 800df5e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df64:	2b20      	cmp	r3, #32
 800df66:	f040 8081 	bne.w	800e06c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d002      	beq.n	800df76 <HAL_UART_Transmit+0x26>
 800df70:	88fb      	ldrh	r3, [r7, #6]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d101      	bne.n	800df7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800df76:	2301      	movs	r3, #1
 800df78:	e079      	b.n	800e06e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800df80:	2b01      	cmp	r3, #1
 800df82:	d101      	bne.n	800df88 <HAL_UART_Transmit+0x38>
 800df84:	2302      	movs	r3, #2
 800df86:	e072      	b.n	800e06e <HAL_UART_Transmit+0x11e>
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	2201      	movs	r2, #1
 800df8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	2200      	movs	r2, #0
 800df94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	2221      	movs	r2, #33	; 0x21
 800df9c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800df9e:	f7f6 f93d 	bl	800421c <HAL_GetTick>
 800dfa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	88fa      	ldrh	r2, [r7, #6]
 800dfa8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	88fa      	ldrh	r2, [r7, #6]
 800dfb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	689b      	ldr	r3, [r3, #8]
 800dfb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfbc:	d108      	bne.n	800dfd0 <HAL_UART_Transmit+0x80>
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	691b      	ldr	r3, [r3, #16]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d104      	bne.n	800dfd0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	61bb      	str	r3, [r7, #24]
 800dfce:	e003      	b.n	800dfd8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800dfe0:	e02c      	b.n	800e03c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	9300      	str	r3, [sp, #0]
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	2180      	movs	r1, #128	; 0x80
 800dfec:	68f8      	ldr	r0, [r7, #12]
 800dfee:	f000 fb7a 	bl	800e6e6 <UART_WaitOnFlagUntilTimeout>
 800dff2:	4603      	mov	r3, r0
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d001      	beq.n	800dffc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800dff8:	2303      	movs	r3, #3
 800dffa:	e038      	b.n	800e06e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d10b      	bne.n	800e01a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e002:	69bb      	ldr	r3, [r7, #24]
 800e004:	881b      	ldrh	r3, [r3, #0]
 800e006:	461a      	mov	r2, r3
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e010:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e012:	69bb      	ldr	r3, [r7, #24]
 800e014:	3302      	adds	r3, #2
 800e016:	61bb      	str	r3, [r7, #24]
 800e018:	e007      	b.n	800e02a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e01a:	69fb      	ldr	r3, [r7, #28]
 800e01c:	781a      	ldrb	r2, [r3, #0]
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e024:	69fb      	ldr	r3, [r7, #28]
 800e026:	3301      	adds	r3, #1
 800e028:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e030:	b29b      	uxth	r3, r3
 800e032:	3b01      	subs	r3, #1
 800e034:	b29a      	uxth	r2, r3
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e042:	b29b      	uxth	r3, r3
 800e044:	2b00      	cmp	r3, #0
 800e046:	d1cc      	bne.n	800dfe2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	9300      	str	r3, [sp, #0]
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	2200      	movs	r2, #0
 800e050:	2140      	movs	r1, #64	; 0x40
 800e052:	68f8      	ldr	r0, [r7, #12]
 800e054:	f000 fb47 	bl	800e6e6 <UART_WaitOnFlagUntilTimeout>
 800e058:	4603      	mov	r3, r0
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d001      	beq.n	800e062 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800e05e:	2303      	movs	r3, #3
 800e060:	e005      	b.n	800e06e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2220      	movs	r2, #32
 800e066:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800e068:	2300      	movs	r3, #0
 800e06a:	e000      	b.n	800e06e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800e06c:	2302      	movs	r3, #2
  }
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3720      	adds	r7, #32
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
	...

0800e078 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b088      	sub	sp, #32
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e080:	2300      	movs	r3, #0
 800e082:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	689a      	ldr	r2, [r3, #8]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	691b      	ldr	r3, [r3, #16]
 800e08c:	431a      	orrs	r2, r3
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	695b      	ldr	r3, [r3, #20]
 800e092:	431a      	orrs	r2, r3
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	69db      	ldr	r3, [r3, #28]
 800e098:	4313      	orrs	r3, r2
 800e09a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	4ba7      	ldr	r3, [pc, #668]	; (800e340 <UART_SetConfig+0x2c8>)
 800e0a4:	4013      	ands	r3, r2
 800e0a6:	687a      	ldr	r2, [r7, #4]
 800e0a8:	6812      	ldr	r2, [r2, #0]
 800e0aa:	6979      	ldr	r1, [r7, #20]
 800e0ac:	430b      	orrs	r3, r1
 800e0ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	68da      	ldr	r2, [r3, #12]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	430a      	orrs	r2, r1
 800e0c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	699b      	ldr	r3, [r3, #24]
 800e0ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6a1b      	ldr	r3, [r3, #32]
 800e0d0:	697a      	ldr	r2, [r7, #20]
 800e0d2:	4313      	orrs	r3, r2
 800e0d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	689b      	ldr	r3, [r3, #8]
 800e0dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	697a      	ldr	r2, [r7, #20]
 800e0e6:	430a      	orrs	r2, r1
 800e0e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	4a95      	ldr	r2, [pc, #596]	; (800e344 <UART_SetConfig+0x2cc>)
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d120      	bne.n	800e136 <UART_SetConfig+0xbe>
 800e0f4:	4b94      	ldr	r3, [pc, #592]	; (800e348 <UART_SetConfig+0x2d0>)
 800e0f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0fa:	f003 0303 	and.w	r3, r3, #3
 800e0fe:	2b03      	cmp	r3, #3
 800e100:	d816      	bhi.n	800e130 <UART_SetConfig+0xb8>
 800e102:	a201      	add	r2, pc, #4	; (adr r2, 800e108 <UART_SetConfig+0x90>)
 800e104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e108:	0800e119 	.word	0x0800e119
 800e10c:	0800e125 	.word	0x0800e125
 800e110:	0800e11f 	.word	0x0800e11f
 800e114:	0800e12b 	.word	0x0800e12b
 800e118:	2301      	movs	r3, #1
 800e11a:	77fb      	strb	r3, [r7, #31]
 800e11c:	e14f      	b.n	800e3be <UART_SetConfig+0x346>
 800e11e:	2302      	movs	r3, #2
 800e120:	77fb      	strb	r3, [r7, #31]
 800e122:	e14c      	b.n	800e3be <UART_SetConfig+0x346>
 800e124:	2304      	movs	r3, #4
 800e126:	77fb      	strb	r3, [r7, #31]
 800e128:	e149      	b.n	800e3be <UART_SetConfig+0x346>
 800e12a:	2308      	movs	r3, #8
 800e12c:	77fb      	strb	r3, [r7, #31]
 800e12e:	e146      	b.n	800e3be <UART_SetConfig+0x346>
 800e130:	2310      	movs	r3, #16
 800e132:	77fb      	strb	r3, [r7, #31]
 800e134:	e143      	b.n	800e3be <UART_SetConfig+0x346>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4a84      	ldr	r2, [pc, #528]	; (800e34c <UART_SetConfig+0x2d4>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d132      	bne.n	800e1a6 <UART_SetConfig+0x12e>
 800e140:	4b81      	ldr	r3, [pc, #516]	; (800e348 <UART_SetConfig+0x2d0>)
 800e142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e146:	f003 030c 	and.w	r3, r3, #12
 800e14a:	2b0c      	cmp	r3, #12
 800e14c:	d828      	bhi.n	800e1a0 <UART_SetConfig+0x128>
 800e14e:	a201      	add	r2, pc, #4	; (adr r2, 800e154 <UART_SetConfig+0xdc>)
 800e150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e154:	0800e189 	.word	0x0800e189
 800e158:	0800e1a1 	.word	0x0800e1a1
 800e15c:	0800e1a1 	.word	0x0800e1a1
 800e160:	0800e1a1 	.word	0x0800e1a1
 800e164:	0800e195 	.word	0x0800e195
 800e168:	0800e1a1 	.word	0x0800e1a1
 800e16c:	0800e1a1 	.word	0x0800e1a1
 800e170:	0800e1a1 	.word	0x0800e1a1
 800e174:	0800e18f 	.word	0x0800e18f
 800e178:	0800e1a1 	.word	0x0800e1a1
 800e17c:	0800e1a1 	.word	0x0800e1a1
 800e180:	0800e1a1 	.word	0x0800e1a1
 800e184:	0800e19b 	.word	0x0800e19b
 800e188:	2300      	movs	r3, #0
 800e18a:	77fb      	strb	r3, [r7, #31]
 800e18c:	e117      	b.n	800e3be <UART_SetConfig+0x346>
 800e18e:	2302      	movs	r3, #2
 800e190:	77fb      	strb	r3, [r7, #31]
 800e192:	e114      	b.n	800e3be <UART_SetConfig+0x346>
 800e194:	2304      	movs	r3, #4
 800e196:	77fb      	strb	r3, [r7, #31]
 800e198:	e111      	b.n	800e3be <UART_SetConfig+0x346>
 800e19a:	2308      	movs	r3, #8
 800e19c:	77fb      	strb	r3, [r7, #31]
 800e19e:	e10e      	b.n	800e3be <UART_SetConfig+0x346>
 800e1a0:	2310      	movs	r3, #16
 800e1a2:	77fb      	strb	r3, [r7, #31]
 800e1a4:	e10b      	b.n	800e3be <UART_SetConfig+0x346>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	4a69      	ldr	r2, [pc, #420]	; (800e350 <UART_SetConfig+0x2d8>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d120      	bne.n	800e1f2 <UART_SetConfig+0x17a>
 800e1b0:	4b65      	ldr	r3, [pc, #404]	; (800e348 <UART_SetConfig+0x2d0>)
 800e1b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e1ba:	2b30      	cmp	r3, #48	; 0x30
 800e1bc:	d013      	beq.n	800e1e6 <UART_SetConfig+0x16e>
 800e1be:	2b30      	cmp	r3, #48	; 0x30
 800e1c0:	d814      	bhi.n	800e1ec <UART_SetConfig+0x174>
 800e1c2:	2b20      	cmp	r3, #32
 800e1c4:	d009      	beq.n	800e1da <UART_SetConfig+0x162>
 800e1c6:	2b20      	cmp	r3, #32
 800e1c8:	d810      	bhi.n	800e1ec <UART_SetConfig+0x174>
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d002      	beq.n	800e1d4 <UART_SetConfig+0x15c>
 800e1ce:	2b10      	cmp	r3, #16
 800e1d0:	d006      	beq.n	800e1e0 <UART_SetConfig+0x168>
 800e1d2:	e00b      	b.n	800e1ec <UART_SetConfig+0x174>
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	77fb      	strb	r3, [r7, #31]
 800e1d8:	e0f1      	b.n	800e3be <UART_SetConfig+0x346>
 800e1da:	2302      	movs	r3, #2
 800e1dc:	77fb      	strb	r3, [r7, #31]
 800e1de:	e0ee      	b.n	800e3be <UART_SetConfig+0x346>
 800e1e0:	2304      	movs	r3, #4
 800e1e2:	77fb      	strb	r3, [r7, #31]
 800e1e4:	e0eb      	b.n	800e3be <UART_SetConfig+0x346>
 800e1e6:	2308      	movs	r3, #8
 800e1e8:	77fb      	strb	r3, [r7, #31]
 800e1ea:	e0e8      	b.n	800e3be <UART_SetConfig+0x346>
 800e1ec:	2310      	movs	r3, #16
 800e1ee:	77fb      	strb	r3, [r7, #31]
 800e1f0:	e0e5      	b.n	800e3be <UART_SetConfig+0x346>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	4a57      	ldr	r2, [pc, #348]	; (800e354 <UART_SetConfig+0x2dc>)
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	d120      	bne.n	800e23e <UART_SetConfig+0x1c6>
 800e1fc:	4b52      	ldr	r3, [pc, #328]	; (800e348 <UART_SetConfig+0x2d0>)
 800e1fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e202:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e206:	2bc0      	cmp	r3, #192	; 0xc0
 800e208:	d013      	beq.n	800e232 <UART_SetConfig+0x1ba>
 800e20a:	2bc0      	cmp	r3, #192	; 0xc0
 800e20c:	d814      	bhi.n	800e238 <UART_SetConfig+0x1c0>
 800e20e:	2b80      	cmp	r3, #128	; 0x80
 800e210:	d009      	beq.n	800e226 <UART_SetConfig+0x1ae>
 800e212:	2b80      	cmp	r3, #128	; 0x80
 800e214:	d810      	bhi.n	800e238 <UART_SetConfig+0x1c0>
 800e216:	2b00      	cmp	r3, #0
 800e218:	d002      	beq.n	800e220 <UART_SetConfig+0x1a8>
 800e21a:	2b40      	cmp	r3, #64	; 0x40
 800e21c:	d006      	beq.n	800e22c <UART_SetConfig+0x1b4>
 800e21e:	e00b      	b.n	800e238 <UART_SetConfig+0x1c0>
 800e220:	2300      	movs	r3, #0
 800e222:	77fb      	strb	r3, [r7, #31]
 800e224:	e0cb      	b.n	800e3be <UART_SetConfig+0x346>
 800e226:	2302      	movs	r3, #2
 800e228:	77fb      	strb	r3, [r7, #31]
 800e22a:	e0c8      	b.n	800e3be <UART_SetConfig+0x346>
 800e22c:	2304      	movs	r3, #4
 800e22e:	77fb      	strb	r3, [r7, #31]
 800e230:	e0c5      	b.n	800e3be <UART_SetConfig+0x346>
 800e232:	2308      	movs	r3, #8
 800e234:	77fb      	strb	r3, [r7, #31]
 800e236:	e0c2      	b.n	800e3be <UART_SetConfig+0x346>
 800e238:	2310      	movs	r3, #16
 800e23a:	77fb      	strb	r3, [r7, #31]
 800e23c:	e0bf      	b.n	800e3be <UART_SetConfig+0x346>
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	4a45      	ldr	r2, [pc, #276]	; (800e358 <UART_SetConfig+0x2e0>)
 800e244:	4293      	cmp	r3, r2
 800e246:	d125      	bne.n	800e294 <UART_SetConfig+0x21c>
 800e248:	4b3f      	ldr	r3, [pc, #252]	; (800e348 <UART_SetConfig+0x2d0>)
 800e24a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e24e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e256:	d017      	beq.n	800e288 <UART_SetConfig+0x210>
 800e258:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e25c:	d817      	bhi.n	800e28e <UART_SetConfig+0x216>
 800e25e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e262:	d00b      	beq.n	800e27c <UART_SetConfig+0x204>
 800e264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e268:	d811      	bhi.n	800e28e <UART_SetConfig+0x216>
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d003      	beq.n	800e276 <UART_SetConfig+0x1fe>
 800e26e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e272:	d006      	beq.n	800e282 <UART_SetConfig+0x20a>
 800e274:	e00b      	b.n	800e28e <UART_SetConfig+0x216>
 800e276:	2300      	movs	r3, #0
 800e278:	77fb      	strb	r3, [r7, #31]
 800e27a:	e0a0      	b.n	800e3be <UART_SetConfig+0x346>
 800e27c:	2302      	movs	r3, #2
 800e27e:	77fb      	strb	r3, [r7, #31]
 800e280:	e09d      	b.n	800e3be <UART_SetConfig+0x346>
 800e282:	2304      	movs	r3, #4
 800e284:	77fb      	strb	r3, [r7, #31]
 800e286:	e09a      	b.n	800e3be <UART_SetConfig+0x346>
 800e288:	2308      	movs	r3, #8
 800e28a:	77fb      	strb	r3, [r7, #31]
 800e28c:	e097      	b.n	800e3be <UART_SetConfig+0x346>
 800e28e:	2310      	movs	r3, #16
 800e290:	77fb      	strb	r3, [r7, #31]
 800e292:	e094      	b.n	800e3be <UART_SetConfig+0x346>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	4a30      	ldr	r2, [pc, #192]	; (800e35c <UART_SetConfig+0x2e4>)
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d125      	bne.n	800e2ea <UART_SetConfig+0x272>
 800e29e:	4b2a      	ldr	r3, [pc, #168]	; (800e348 <UART_SetConfig+0x2d0>)
 800e2a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e2a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e2ac:	d017      	beq.n	800e2de <UART_SetConfig+0x266>
 800e2ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e2b2:	d817      	bhi.n	800e2e4 <UART_SetConfig+0x26c>
 800e2b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e2b8:	d00b      	beq.n	800e2d2 <UART_SetConfig+0x25a>
 800e2ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e2be:	d811      	bhi.n	800e2e4 <UART_SetConfig+0x26c>
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d003      	beq.n	800e2cc <UART_SetConfig+0x254>
 800e2c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e2c8:	d006      	beq.n	800e2d8 <UART_SetConfig+0x260>
 800e2ca:	e00b      	b.n	800e2e4 <UART_SetConfig+0x26c>
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	77fb      	strb	r3, [r7, #31]
 800e2d0:	e075      	b.n	800e3be <UART_SetConfig+0x346>
 800e2d2:	2302      	movs	r3, #2
 800e2d4:	77fb      	strb	r3, [r7, #31]
 800e2d6:	e072      	b.n	800e3be <UART_SetConfig+0x346>
 800e2d8:	2304      	movs	r3, #4
 800e2da:	77fb      	strb	r3, [r7, #31]
 800e2dc:	e06f      	b.n	800e3be <UART_SetConfig+0x346>
 800e2de:	2308      	movs	r3, #8
 800e2e0:	77fb      	strb	r3, [r7, #31]
 800e2e2:	e06c      	b.n	800e3be <UART_SetConfig+0x346>
 800e2e4:	2310      	movs	r3, #16
 800e2e6:	77fb      	strb	r3, [r7, #31]
 800e2e8:	e069      	b.n	800e3be <UART_SetConfig+0x346>
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	4a1c      	ldr	r2, [pc, #112]	; (800e360 <UART_SetConfig+0x2e8>)
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d137      	bne.n	800e364 <UART_SetConfig+0x2ec>
 800e2f4:	4b14      	ldr	r3, [pc, #80]	; (800e348 <UART_SetConfig+0x2d0>)
 800e2f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2fa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e2fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e302:	d017      	beq.n	800e334 <UART_SetConfig+0x2bc>
 800e304:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e308:	d817      	bhi.n	800e33a <UART_SetConfig+0x2c2>
 800e30a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e30e:	d00b      	beq.n	800e328 <UART_SetConfig+0x2b0>
 800e310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e314:	d811      	bhi.n	800e33a <UART_SetConfig+0x2c2>
 800e316:	2b00      	cmp	r3, #0
 800e318:	d003      	beq.n	800e322 <UART_SetConfig+0x2aa>
 800e31a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e31e:	d006      	beq.n	800e32e <UART_SetConfig+0x2b6>
 800e320:	e00b      	b.n	800e33a <UART_SetConfig+0x2c2>
 800e322:	2300      	movs	r3, #0
 800e324:	77fb      	strb	r3, [r7, #31]
 800e326:	e04a      	b.n	800e3be <UART_SetConfig+0x346>
 800e328:	2302      	movs	r3, #2
 800e32a:	77fb      	strb	r3, [r7, #31]
 800e32c:	e047      	b.n	800e3be <UART_SetConfig+0x346>
 800e32e:	2304      	movs	r3, #4
 800e330:	77fb      	strb	r3, [r7, #31]
 800e332:	e044      	b.n	800e3be <UART_SetConfig+0x346>
 800e334:	2308      	movs	r3, #8
 800e336:	77fb      	strb	r3, [r7, #31]
 800e338:	e041      	b.n	800e3be <UART_SetConfig+0x346>
 800e33a:	2310      	movs	r3, #16
 800e33c:	77fb      	strb	r3, [r7, #31]
 800e33e:	e03e      	b.n	800e3be <UART_SetConfig+0x346>
 800e340:	efff69f3 	.word	0xefff69f3
 800e344:	40011000 	.word	0x40011000
 800e348:	40023800 	.word	0x40023800
 800e34c:	40004400 	.word	0x40004400
 800e350:	40004800 	.word	0x40004800
 800e354:	40004c00 	.word	0x40004c00
 800e358:	40005000 	.word	0x40005000
 800e35c:	40011400 	.word	0x40011400
 800e360:	40007800 	.word	0x40007800
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a71      	ldr	r2, [pc, #452]	; (800e530 <UART_SetConfig+0x4b8>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d125      	bne.n	800e3ba <UART_SetConfig+0x342>
 800e36e:	4b71      	ldr	r3, [pc, #452]	; (800e534 <UART_SetConfig+0x4bc>)
 800e370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e374:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e378:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e37c:	d017      	beq.n	800e3ae <UART_SetConfig+0x336>
 800e37e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e382:	d817      	bhi.n	800e3b4 <UART_SetConfig+0x33c>
 800e384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e388:	d00b      	beq.n	800e3a2 <UART_SetConfig+0x32a>
 800e38a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e38e:	d811      	bhi.n	800e3b4 <UART_SetConfig+0x33c>
 800e390:	2b00      	cmp	r3, #0
 800e392:	d003      	beq.n	800e39c <UART_SetConfig+0x324>
 800e394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e398:	d006      	beq.n	800e3a8 <UART_SetConfig+0x330>
 800e39a:	e00b      	b.n	800e3b4 <UART_SetConfig+0x33c>
 800e39c:	2300      	movs	r3, #0
 800e39e:	77fb      	strb	r3, [r7, #31]
 800e3a0:	e00d      	b.n	800e3be <UART_SetConfig+0x346>
 800e3a2:	2302      	movs	r3, #2
 800e3a4:	77fb      	strb	r3, [r7, #31]
 800e3a6:	e00a      	b.n	800e3be <UART_SetConfig+0x346>
 800e3a8:	2304      	movs	r3, #4
 800e3aa:	77fb      	strb	r3, [r7, #31]
 800e3ac:	e007      	b.n	800e3be <UART_SetConfig+0x346>
 800e3ae:	2308      	movs	r3, #8
 800e3b0:	77fb      	strb	r3, [r7, #31]
 800e3b2:	e004      	b.n	800e3be <UART_SetConfig+0x346>
 800e3b4:	2310      	movs	r3, #16
 800e3b6:	77fb      	strb	r3, [r7, #31]
 800e3b8:	e001      	b.n	800e3be <UART_SetConfig+0x346>
 800e3ba:	2310      	movs	r3, #16
 800e3bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	69db      	ldr	r3, [r3, #28]
 800e3c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e3c6:	d15b      	bne.n	800e480 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800e3c8:	7ffb      	ldrb	r3, [r7, #31]
 800e3ca:	2b08      	cmp	r3, #8
 800e3cc:	d827      	bhi.n	800e41e <UART_SetConfig+0x3a6>
 800e3ce:	a201      	add	r2, pc, #4	; (adr r2, 800e3d4 <UART_SetConfig+0x35c>)
 800e3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3d4:	0800e3f9 	.word	0x0800e3f9
 800e3d8:	0800e401 	.word	0x0800e401
 800e3dc:	0800e409 	.word	0x0800e409
 800e3e0:	0800e41f 	.word	0x0800e41f
 800e3e4:	0800e40f 	.word	0x0800e40f
 800e3e8:	0800e41f 	.word	0x0800e41f
 800e3ec:	0800e41f 	.word	0x0800e41f
 800e3f0:	0800e41f 	.word	0x0800e41f
 800e3f4:	0800e417 	.word	0x0800e417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3f8:	f7fb fe60 	bl	800a0bc <HAL_RCC_GetPCLK1Freq>
 800e3fc:	61b8      	str	r0, [r7, #24]
        break;
 800e3fe:	e013      	b.n	800e428 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e400:	f7fb fe70 	bl	800a0e4 <HAL_RCC_GetPCLK2Freq>
 800e404:	61b8      	str	r0, [r7, #24]
        break;
 800e406:	e00f      	b.n	800e428 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e408:	4b4b      	ldr	r3, [pc, #300]	; (800e538 <UART_SetConfig+0x4c0>)
 800e40a:	61bb      	str	r3, [r7, #24]
        break;
 800e40c:	e00c      	b.n	800e428 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e40e:	f7fb fd93 	bl	8009f38 <HAL_RCC_GetSysClockFreq>
 800e412:	61b8      	str	r0, [r7, #24]
        break;
 800e414:	e008      	b.n	800e428 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e41a:	61bb      	str	r3, [r7, #24]
        break;
 800e41c:	e004      	b.n	800e428 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800e41e:	2300      	movs	r3, #0
 800e420:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e422:	2301      	movs	r3, #1
 800e424:	77bb      	strb	r3, [r7, #30]
        break;
 800e426:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e428:	69bb      	ldr	r3, [r7, #24]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d074      	beq.n	800e518 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e42e:	69bb      	ldr	r3, [r7, #24]
 800e430:	005a      	lsls	r2, r3, #1
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	685b      	ldr	r3, [r3, #4]
 800e436:	085b      	lsrs	r3, r3, #1
 800e438:	441a      	add	r2, r3
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	685b      	ldr	r3, [r3, #4]
 800e43e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e442:	b29b      	uxth	r3, r3
 800e444:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	2b0f      	cmp	r3, #15
 800e44a:	d916      	bls.n	800e47a <UART_SetConfig+0x402>
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e452:	d212      	bcs.n	800e47a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	b29b      	uxth	r3, r3
 800e458:	f023 030f 	bic.w	r3, r3, #15
 800e45c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	085b      	lsrs	r3, r3, #1
 800e462:	b29b      	uxth	r3, r3
 800e464:	f003 0307 	and.w	r3, r3, #7
 800e468:	b29a      	uxth	r2, r3
 800e46a:	89fb      	ldrh	r3, [r7, #14]
 800e46c:	4313      	orrs	r3, r2
 800e46e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	89fa      	ldrh	r2, [r7, #14]
 800e476:	60da      	str	r2, [r3, #12]
 800e478:	e04e      	b.n	800e518 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800e47a:	2301      	movs	r3, #1
 800e47c:	77bb      	strb	r3, [r7, #30]
 800e47e:	e04b      	b.n	800e518 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e480:	7ffb      	ldrb	r3, [r7, #31]
 800e482:	2b08      	cmp	r3, #8
 800e484:	d827      	bhi.n	800e4d6 <UART_SetConfig+0x45e>
 800e486:	a201      	add	r2, pc, #4	; (adr r2, 800e48c <UART_SetConfig+0x414>)
 800e488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e48c:	0800e4b1 	.word	0x0800e4b1
 800e490:	0800e4b9 	.word	0x0800e4b9
 800e494:	0800e4c1 	.word	0x0800e4c1
 800e498:	0800e4d7 	.word	0x0800e4d7
 800e49c:	0800e4c7 	.word	0x0800e4c7
 800e4a0:	0800e4d7 	.word	0x0800e4d7
 800e4a4:	0800e4d7 	.word	0x0800e4d7
 800e4a8:	0800e4d7 	.word	0x0800e4d7
 800e4ac:	0800e4cf 	.word	0x0800e4cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e4b0:	f7fb fe04 	bl	800a0bc <HAL_RCC_GetPCLK1Freq>
 800e4b4:	61b8      	str	r0, [r7, #24]
        break;
 800e4b6:	e013      	b.n	800e4e0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e4b8:	f7fb fe14 	bl	800a0e4 <HAL_RCC_GetPCLK2Freq>
 800e4bc:	61b8      	str	r0, [r7, #24]
        break;
 800e4be:	e00f      	b.n	800e4e0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e4c0:	4b1d      	ldr	r3, [pc, #116]	; (800e538 <UART_SetConfig+0x4c0>)
 800e4c2:	61bb      	str	r3, [r7, #24]
        break;
 800e4c4:	e00c      	b.n	800e4e0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e4c6:	f7fb fd37 	bl	8009f38 <HAL_RCC_GetSysClockFreq>
 800e4ca:	61b8      	str	r0, [r7, #24]
        break;
 800e4cc:	e008      	b.n	800e4e0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e4ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e4d2:	61bb      	str	r3, [r7, #24]
        break;
 800e4d4:	e004      	b.n	800e4e0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e4da:	2301      	movs	r3, #1
 800e4dc:	77bb      	strb	r3, [r7, #30]
        break;
 800e4de:	bf00      	nop
    }

    if (pclk != 0U)
 800e4e0:	69bb      	ldr	r3, [r7, #24]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d018      	beq.n	800e518 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	085a      	lsrs	r2, r3, #1
 800e4ec:	69bb      	ldr	r3, [r7, #24]
 800e4ee:	441a      	add	r2, r3
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	685b      	ldr	r3, [r3, #4]
 800e4f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4f8:	b29b      	uxth	r3, r3
 800e4fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	2b0f      	cmp	r3, #15
 800e500:	d908      	bls.n	800e514 <UART_SetConfig+0x49c>
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e508:	d204      	bcs.n	800e514 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	693a      	ldr	r2, [r7, #16]
 800e510:	60da      	str	r2, [r3, #12]
 800e512:	e001      	b.n	800e518 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800e514:	2301      	movs	r3, #1
 800e516:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2200      	movs	r2, #0
 800e51c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2200      	movs	r2, #0
 800e522:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800e524:	7fbb      	ldrb	r3, [r7, #30]
}
 800e526:	4618      	mov	r0, r3
 800e528:	3720      	adds	r7, #32
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	40007c00 	.word	0x40007c00
 800e534:	40023800 	.word	0x40023800
 800e538:	00f42400 	.word	0x00f42400

0800e53c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e53c:	b480      	push	{r7}
 800e53e:	b083      	sub	sp, #12
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e548:	f003 0301 	and.w	r3, r3, #1
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d00a      	beq.n	800e566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	685b      	ldr	r3, [r3, #4]
 800e556:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	430a      	orrs	r2, r1
 800e564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e56a:	f003 0302 	and.w	r3, r3, #2
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d00a      	beq.n	800e588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	430a      	orrs	r2, r1
 800e586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e58c:	f003 0304 	and.w	r3, r3, #4
 800e590:	2b00      	cmp	r3, #0
 800e592:	d00a      	beq.n	800e5aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	430a      	orrs	r2, r1
 800e5a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ae:	f003 0308 	and.w	r3, r3, #8
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d00a      	beq.n	800e5cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	430a      	orrs	r2, r1
 800e5ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d0:	f003 0310 	and.w	r3, r3, #16
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d00a      	beq.n	800e5ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	689b      	ldr	r3, [r3, #8]
 800e5de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	430a      	orrs	r2, r1
 800e5ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5f2:	f003 0320 	and.w	r3, r3, #32
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d00a      	beq.n	800e610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	689b      	ldr	r3, [r3, #8]
 800e600:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	430a      	orrs	r2, r1
 800e60e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d01a      	beq.n	800e652 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	430a      	orrs	r2, r1
 800e630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e63a:	d10a      	bne.n	800e652 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	430a      	orrs	r2, r1
 800e650:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d00a      	beq.n	800e674 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	430a      	orrs	r2, r1
 800e672:	605a      	str	r2, [r3, #4]
  }
}
 800e674:	bf00      	nop
 800e676:	370c      	adds	r7, #12
 800e678:	46bd      	mov	sp, r7
 800e67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67e:	4770      	bx	lr

0800e680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b086      	sub	sp, #24
 800e684:	af02      	add	r7, sp, #8
 800e686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2200      	movs	r2, #0
 800e68c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e690:	f7f5 fdc4 	bl	800421c <HAL_GetTick>
 800e694:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f003 0308 	and.w	r3, r3, #8
 800e6a0:	2b08      	cmp	r3, #8
 800e6a2:	d10e      	bne.n	800e6c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e6a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e6a8:	9300      	str	r3, [sp, #0]
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f000 f817 	bl	800e6e6 <UART_WaitOnFlagUntilTimeout>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d001      	beq.n	800e6c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e6be:	2303      	movs	r3, #3
 800e6c0:	e00d      	b.n	800e6de <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2220      	movs	r2, #32
 800e6c6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2220      	movs	r2, #32
 800e6cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800e6dc:	2300      	movs	r3, #0
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3710      	adds	r7, #16
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}

0800e6e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e6e6:	b580      	push	{r7, lr}
 800e6e8:	b084      	sub	sp, #16
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	60f8      	str	r0, [r7, #12]
 800e6ee:	60b9      	str	r1, [r7, #8]
 800e6f0:	603b      	str	r3, [r7, #0]
 800e6f2:	4613      	mov	r3, r2
 800e6f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e6f6:	e05e      	b.n	800e7b6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e6f8:	69bb      	ldr	r3, [r7, #24]
 800e6fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6fe:	d05a      	beq.n	800e7b6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e700:	f7f5 fd8c 	bl	800421c <HAL_GetTick>
 800e704:	4602      	mov	r2, r0
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	1ad3      	subs	r3, r2, r3
 800e70a:	69ba      	ldr	r2, [r7, #24]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d302      	bcc.n	800e716 <UART_WaitOnFlagUntilTimeout+0x30>
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d11b      	bne.n	800e74e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	681a      	ldr	r2, [r3, #0]
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e724:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	689a      	ldr	r2, [r3, #8]
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	f022 0201 	bic.w	r2, r2, #1
 800e734:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	2220      	movs	r2, #32
 800e73a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	2220      	movs	r2, #32
 800e740:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2200      	movs	r2, #0
 800e746:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800e74a:	2303      	movs	r3, #3
 800e74c:	e043      	b.n	800e7d6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	f003 0304 	and.w	r3, r3, #4
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d02c      	beq.n	800e7b6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	69db      	ldr	r3, [r3, #28]
 800e762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e76a:	d124      	bne.n	800e7b6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e774:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e784:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	689a      	ldr	r2, [r3, #8]
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f022 0201 	bic.w	r2, r2, #1
 800e794:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	2220      	movs	r2, #32
 800e79a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2220      	movs	r2, #32
 800e7a0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2220      	movs	r2, #32
 800e7a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800e7b2:	2303      	movs	r3, #3
 800e7b4:	e00f      	b.n	800e7d6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	69da      	ldr	r2, [r3, #28]
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	4013      	ands	r3, r2
 800e7c0:	68ba      	ldr	r2, [r7, #8]
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	bf0c      	ite	eq
 800e7c6:	2301      	moveq	r3, #1
 800e7c8:	2300      	movne	r3, #0
 800e7ca:	b2db      	uxtb	r3, r3
 800e7cc:	461a      	mov	r2, r3
 800e7ce:	79fb      	ldrb	r3, [r7, #7]
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d091      	beq.n	800e6f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e7d4:	2300      	movs	r3, #0
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3710      	adds	r7, #16
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
	...

0800e7e0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b085      	sub	sp, #20
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	2b01      	cmp	r3, #1
 800e7f8:	d027      	beq.n	800e84a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800e800:	68fa      	ldr	r2, [r7, #12]
 800e802:	4b2f      	ldr	r3, [pc, #188]	; (800e8c0 <FMC_SDRAM_Init+0xe0>)
 800e804:	4013      	ands	r3, r2
 800e806:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e810:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800e816:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800e81c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800e822:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800e828:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800e82e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800e834:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800e83a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e83c:	68fa      	ldr	r2, [r7, #12]
 800e83e:	4313      	orrs	r3, r2
 800e840:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	68fa      	ldr	r2, [r7, #12]
 800e846:	601a      	str	r2, [r3, #0]
 800e848:	e032      	b.n	800e8b0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e856:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800e860:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800e866:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800e868:	68fa      	ldr	r2, [r7, #12]
 800e86a:	4313      	orrs	r3, r2
 800e86c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	685b      	ldr	r3, [r3, #4]
 800e872:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800e874:	68ba      	ldr	r2, [r7, #8]
 800e876:	4b12      	ldr	r3, [pc, #72]	; (800e8c0 <FMC_SDRAM_Init+0xe0>)
 800e878:	4013      	ands	r3, r2
 800e87a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e884:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800e88a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800e890:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800e896:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800e89c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e89e:	68ba      	ldr	r2, [r7, #8]
 800e8a0:	4313      	orrs	r3, r2
 800e8a2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	68fa      	ldr	r2, [r7, #12]
 800e8a8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	68ba      	ldr	r2, [r7, #8]
 800e8ae:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800e8b0:	2300      	movs	r3, #0
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3714      	adds	r7, #20
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop
 800e8c0:	ffff8000 	.word	0xffff8000

0800e8c4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b087      	sub	sp, #28
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	60f8      	str	r0, [r7, #12]
 800e8cc:	60b9      	str	r1, [r7, #8]
 800e8ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2b01      	cmp	r3, #1
 800e8dc:	d02e      	beq.n	800e93c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	689b      	ldr	r3, [r3, #8]
 800e8e2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e8ea:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	685b      	ldr	r3, [r3, #4]
 800e8f6:	3b01      	subs	r3, #1
 800e8f8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e8fa:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	689b      	ldr	r3, [r3, #8]
 800e900:	3b01      	subs	r3, #1
 800e902:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800e904:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	68db      	ldr	r3, [r3, #12]
 800e90a:	3b01      	subs	r3, #1
 800e90c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800e90e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	691b      	ldr	r3, [r3, #16]
 800e914:	3b01      	subs	r3, #1
 800e916:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800e918:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	695b      	ldr	r3, [r3, #20]
 800e91e:	3b01      	subs	r3, #1
 800e920:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800e922:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	699b      	ldr	r3, [r3, #24]
 800e928:	3b01      	subs	r3, #1
 800e92a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e92c:	4313      	orrs	r3, r2
 800e92e:	697a      	ldr	r2, [r7, #20]
 800e930:	4313      	orrs	r3, r2
 800e932:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	697a      	ldr	r2, [r7, #20]
 800e938:	609a      	str	r2, [r3, #8]
 800e93a:	e039      	b.n	800e9b0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	689b      	ldr	r3, [r3, #8]
 800e940:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800e942:	697a      	ldr	r2, [r7, #20]
 800e944:	4b1e      	ldr	r3, [pc, #120]	; (800e9c0 <FMC_SDRAM_Timing_Init+0xfc>)
 800e946:	4013      	ands	r3, r2
 800e948:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	68db      	ldr	r3, [r3, #12]
 800e94e:	3b01      	subs	r3, #1
 800e950:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	695b      	ldr	r3, [r3, #20]
 800e956:	3b01      	subs	r3, #1
 800e958:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800e95a:	4313      	orrs	r3, r2
 800e95c:	697a      	ldr	r2, [r7, #20]
 800e95e:	4313      	orrs	r3, r2
 800e960:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	68db      	ldr	r3, [r3, #12]
 800e966:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e96e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	685b      	ldr	r3, [r3, #4]
 800e97a:	3b01      	subs	r3, #1
 800e97c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e97e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	689b      	ldr	r3, [r3, #8]
 800e984:	3b01      	subs	r3, #1
 800e986:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800e988:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	691b      	ldr	r3, [r3, #16]
 800e98e:	3b01      	subs	r3, #1
 800e990:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800e992:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	699b      	ldr	r3, [r3, #24]
 800e998:	3b01      	subs	r3, #1
 800e99a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e99c:	4313      	orrs	r3, r2
 800e99e:	693a      	ldr	r2, [r7, #16]
 800e9a0:	4313      	orrs	r3, r2
 800e9a2:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	697a      	ldr	r2, [r7, #20]
 800e9a8:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	693a      	ldr	r2, [r7, #16]
 800e9ae:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800e9b0:	2300      	movs	r3, #0
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	371c      	adds	r7, #28
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9bc:	4770      	bx	lr
 800e9be:	bf00      	nop
 800e9c0:	ff0f0fff 	.word	0xff0f0fff

0800e9c4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800e9c4:	b480      	push	{r7}
 800e9c6:	b085      	sub	sp, #20
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	60f8      	str	r0, [r7, #12]
 800e9cc:	60b9      	str	r1, [r7, #8]
 800e9ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	691a      	ldr	r2, [r3, #16]
 800e9d4:	4b0c      	ldr	r3, [pc, #48]	; (800ea08 <FMC_SDRAM_SendCommand+0x44>)
 800e9d6:	4013      	ands	r3, r2
 800e9d8:	68ba      	ldr	r2, [r7, #8]
 800e9da:	6811      	ldr	r1, [r2, #0]
 800e9dc:	68ba      	ldr	r2, [r7, #8]
 800e9de:	6852      	ldr	r2, [r2, #4]
 800e9e0:	4311      	orrs	r1, r2
 800e9e2:	68ba      	ldr	r2, [r7, #8]
 800e9e4:	6892      	ldr	r2, [r2, #8]
 800e9e6:	3a01      	subs	r2, #1
 800e9e8:	0152      	lsls	r2, r2, #5
 800e9ea:	4311      	orrs	r1, r2
 800e9ec:	68ba      	ldr	r2, [r7, #8]
 800e9ee:	68d2      	ldr	r2, [r2, #12]
 800e9f0:	0252      	lsls	r2, r2, #9
 800e9f2:	430a      	orrs	r2, r1
 800e9f4:	431a      	orrs	r2, r3
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800e9fa:	2300      	movs	r3, #0
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3714      	adds	r7, #20
 800ea00:	46bd      	mov	sp, r7
 800ea02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea06:	4770      	bx	lr
 800ea08:	ffc00000 	.word	0xffc00000

0800ea0c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b083      	sub	sp, #12
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
 800ea14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	695a      	ldr	r2, [r3, #20]
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	005b      	lsls	r3, r3, #1
 800ea1e:	431a      	orrs	r2, r3
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800ea24:	2300      	movs	r3, #0
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	370c      	adds	r7, #12
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr
	...

0800ea34 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ea34:	b084      	sub	sp, #16
 800ea36:	b480      	push	{r7}
 800ea38:	b085      	sub	sp, #20
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
 800ea3e:	f107 001c 	add.w	r0, r7, #28
 800ea42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ea46:	2300      	movs	r3, #0
 800ea48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ea4a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ea4c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ea4e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ea50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ea52:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ea54:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ea56:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ea58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ea5a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ea5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ea5e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ea60:	68fa      	ldr	r2, [r7, #12]
 800ea62:	4313      	orrs	r3, r2
 800ea64:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	685a      	ldr	r2, [r3, #4]
 800ea6a:	4b07      	ldr	r3, [pc, #28]	; (800ea88 <SDMMC_Init+0x54>)
 800ea6c:	4013      	ands	r3, r2
 800ea6e:	68fa      	ldr	r2, [r7, #12]
 800ea70:	431a      	orrs	r2, r3
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ea76:	2300      	movs	r3, #0
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3714      	adds	r7, #20
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	b004      	add	sp, #16
 800ea84:	4770      	bx	lr
 800ea86:	bf00      	nop
 800ea88:	ffff8100 	.word	0xffff8100

0800ea8c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b083      	sub	sp, #12
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	370c      	adds	r7, #12
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr

0800eaa6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800eaa6:	b480      	push	{r7}
 800eaa8:	b083      	sub	sp, #12
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
 800eaae:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	681a      	ldr	r2, [r3, #0]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eaba:	2300      	movs	r3, #0
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	370c      	adds	r7, #12
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr

0800eac8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2203      	movs	r2, #3
 800ead4:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ead6:	2002      	movs	r0, #2
 800ead8:	f7f5 fbac 	bl	8004234 <HAL_Delay>
  
  return HAL_OK;
 800eadc:	2300      	movs	r3, #0
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3708      	adds	r7, #8
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}

0800eae6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800eae6:	b480      	push	{r7}
 800eae8:	b083      	sub	sp, #12
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	f003 0303 	and.w	r3, r3, #3
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	370c      	adds	r7, #12
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr
	...

0800eb04 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b085      	sub	sp, #20
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	681a      	ldr	r2, [r3, #0]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800eb22:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800eb28:	431a      	orrs	r2, r3
                       Command->CPSM);
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800eb2e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800eb30:	68fa      	ldr	r2, [r7, #12]
 800eb32:	4313      	orrs	r3, r2
 800eb34:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	68da      	ldr	r2, [r3, #12]
 800eb3a:	4b06      	ldr	r3, [pc, #24]	; (800eb54 <SDMMC_SendCommand+0x50>)
 800eb3c:	4013      	ands	r3, r2
 800eb3e:	68fa      	ldr	r2, [r7, #12]
 800eb40:	431a      	orrs	r2, r3
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800eb46:	2300      	movs	r3, #0
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3714      	adds	r7, #20
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr
 800eb54:	fffff000 	.word	0xfffff000

0800eb58 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b083      	sub	sp, #12
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	691b      	ldr	r3, [r3, #16]
 800eb64:	b2db      	uxtb	r3, r3
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	370c      	adds	r7, #12
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr

0800eb72 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800eb72:	b480      	push	{r7}
 800eb74:	b085      	sub	sp, #20
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]
 800eb7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	3314      	adds	r3, #20
 800eb80:	461a      	mov	r2, r3
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	4413      	add	r3, r2
 800eb86:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	681b      	ldr	r3, [r3, #0]
}  
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3714      	adds	r7, #20
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr

0800eb98 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b085      	sub	sp, #20
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800eba2:	2300      	movs	r3, #0
 800eba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	685a      	ldr	r2, [r3, #4]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ebbe:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ebc4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ebca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	4313      	orrs	r3, r2
 800ebd0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebd6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	431a      	orrs	r2, r3
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ebe2:	2300      	movs	r3, #0

}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3714      	adds	r7, #20
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b088      	sub	sp, #32
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ebfe:	2310      	movs	r3, #16
 800ec00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec02:	2340      	movs	r3, #64	; 0x40
 800ec04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec06:	2300      	movs	r3, #0
 800ec08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec10:	f107 0308 	add.w	r3, r7, #8
 800ec14:	4619      	mov	r1, r3
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f7ff ff74 	bl	800eb04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ec1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec20:	2110      	movs	r1, #16
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f000 fa46 	bl	800f0b4 <SDMMC_GetCmdResp1>
 800ec28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec2a:	69fb      	ldr	r3, [r7, #28]
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	3720      	adds	r7, #32
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}

0800ec34 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b088      	sub	sp, #32
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
 800ec3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ec42:	2311      	movs	r3, #17
 800ec44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec46:	2340      	movs	r3, #64	; 0x40
 800ec48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec54:	f107 0308 	add.w	r3, r7, #8
 800ec58:	4619      	mov	r1, r3
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f7ff ff52 	bl	800eb04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ec60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec64:	2111      	movs	r1, #17
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f000 fa24 	bl	800f0b4 <SDMMC_GetCmdResp1>
 800ec6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec6e:	69fb      	ldr	r3, [r7, #28]
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3720      	adds	r7, #32
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}

0800ec78 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b088      	sub	sp, #32
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
 800ec80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ec86:	2312      	movs	r3, #18
 800ec88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec8a:	2340      	movs	r3, #64	; 0x40
 800ec8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec98:	f107 0308 	add.w	r3, r7, #8
 800ec9c:	4619      	mov	r1, r3
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f7ff ff30 	bl	800eb04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800eca4:	f241 3288 	movw	r2, #5000	; 0x1388
 800eca8:	2112      	movs	r1, #18
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f000 fa02 	bl	800f0b4 <SDMMC_GetCmdResp1>
 800ecb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecb2:	69fb      	ldr	r3, [r7, #28]
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3720      	adds	r7, #32
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}

0800ecbc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b088      	sub	sp, #32
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ecca:	2318      	movs	r3, #24
 800eccc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ecce:	2340      	movs	r3, #64	; 0x40
 800ecd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ecd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ecdc:	f107 0308 	add.w	r3, r7, #8
 800ece0:	4619      	mov	r1, r3
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f7ff ff0e 	bl	800eb04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ece8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ecec:	2118      	movs	r1, #24
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f000 f9e0 	bl	800f0b4 <SDMMC_GetCmdResp1>
 800ecf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecf6:	69fb      	ldr	r3, [r7, #28]
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3720      	adds	r7, #32
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b088      	sub	sp, #32
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ed0e:	2319      	movs	r3, #25
 800ed10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed12:	2340      	movs	r3, #64	; 0x40
 800ed14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed16:	2300      	movs	r3, #0
 800ed18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed20:	f107 0308 	add.w	r3, r7, #8
 800ed24:	4619      	mov	r1, r3
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f7ff feec 	bl	800eb04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ed2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed30:	2119      	movs	r1, #25
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f000 f9be 	bl	800f0b4 <SDMMC_GetCmdResp1>
 800ed38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed3a:	69fb      	ldr	r3, [r7, #28]
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3720      	adds	r7, #32
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b088      	sub	sp, #32
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ed50:	230c      	movs	r3, #12
 800ed52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed54:	2340      	movs	r3, #64	; 0x40
 800ed56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed62:	f107 0308 	add.w	r3, r7, #8
 800ed66:	4619      	mov	r1, r3
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f7ff fecb 	bl	800eb04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ed6e:	4a05      	ldr	r2, [pc, #20]	; (800ed84 <SDMMC_CmdStopTransfer+0x40>)
 800ed70:	210c      	movs	r1, #12
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f000 f99e 	bl	800f0b4 <SDMMC_GetCmdResp1>
 800ed78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed7a:	69fb      	ldr	r3, [r7, #28]
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3720      	adds	r7, #32
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}
 800ed84:	05f5e100 	.word	0x05f5e100

0800ed88 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b08a      	sub	sp, #40	; 0x28
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	60f8      	str	r0, [r7, #12]
 800ed90:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ed98:	2307      	movs	r3, #7
 800ed9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed9c:	2340      	movs	r3, #64	; 0x40
 800ed9e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eda0:	2300      	movs	r3, #0
 800eda2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eda4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eda8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800edaa:	f107 0310 	add.w	r3, r7, #16
 800edae:	4619      	mov	r1, r3
 800edb0:	68f8      	ldr	r0, [r7, #12]
 800edb2:	f7ff fea7 	bl	800eb04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800edb6:	f241 3288 	movw	r2, #5000	; 0x1388
 800edba:	2107      	movs	r1, #7
 800edbc:	68f8      	ldr	r0, [r7, #12]
 800edbe:	f000 f979 	bl	800f0b4 <SDMMC_GetCmdResp1>
 800edc2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800edc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3728      	adds	r7, #40	; 0x28
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}

0800edce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800edce:	b580      	push	{r7, lr}
 800edd0:	b088      	sub	sp, #32
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800edd6:	2300      	movs	r3, #0
 800edd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800edda:	2300      	movs	r3, #0
 800eddc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800edde:	2300      	movs	r3, #0
 800ede0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ede2:	2300      	movs	r3, #0
 800ede4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ede6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800edea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800edec:	f107 0308 	add.w	r3, r7, #8
 800edf0:	4619      	mov	r1, r3
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f7ff fe86 	bl	800eb04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f000 f92f 	bl	800f05c <SDMMC_GetCmdError>
 800edfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee00:	69fb      	ldr	r3, [r7, #28]
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3720      	adds	r7, #32
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}

0800ee0a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ee0a:	b580      	push	{r7, lr}
 800ee0c:	b088      	sub	sp, #32
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ee12:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ee16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ee18:	2308      	movs	r3, #8
 800ee1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee1c:	2340      	movs	r3, #64	; 0x40
 800ee1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee20:	2300      	movs	r3, #0
 800ee22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee2a:	f107 0308 	add.w	r3, r7, #8
 800ee2e:	4619      	mov	r1, r3
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f7ff fe67 	bl	800eb04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f000 fb26 	bl	800f488 <SDMMC_GetCmdResp7>
 800ee3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee3e:	69fb      	ldr	r3, [r7, #28]
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	3720      	adds	r7, #32
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b088      	sub	sp, #32
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ee56:	2337      	movs	r3, #55	; 0x37
 800ee58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee5a:	2340      	movs	r3, #64	; 0x40
 800ee5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee68:	f107 0308 	add.w	r3, r7, #8
 800ee6c:	4619      	mov	r1, r3
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f7ff fe48 	bl	800eb04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ee74:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee78:	2137      	movs	r1, #55	; 0x37
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f000 f91a 	bl	800f0b4 <SDMMC_GetCmdResp1>
 800ee80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee82:	69fb      	ldr	r3, [r7, #28]
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	3720      	adds	r7, #32
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}

0800ee8c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b088      	sub	sp, #32
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ee96:	683a      	ldr	r2, [r7, #0]
 800ee98:	4b0d      	ldr	r3, [pc, #52]	; (800eed0 <SDMMC_CmdAppOperCommand+0x44>)
 800ee9a:	4313      	orrs	r3, r2
 800ee9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ee9e:	2329      	movs	r3, #41	; 0x29
 800eea0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eea2:	2340      	movs	r3, #64	; 0x40
 800eea4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eea6:	2300      	movs	r3, #0
 800eea8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eeaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eeae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eeb0:	f107 0308 	add.w	r3, r7, #8
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f7ff fe24 	bl	800eb04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f000 fa2f 	bl	800f320 <SDMMC_GetCmdResp3>
 800eec2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eec4:	69fb      	ldr	r3, [r7, #28]
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	3720      	adds	r7, #32
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}
 800eece:	bf00      	nop
 800eed0:	80100000 	.word	0x80100000

0800eed4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b088      	sub	sp, #32
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800eee2:	2306      	movs	r3, #6
 800eee4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eee6:	2340      	movs	r3, #64	; 0x40
 800eee8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eeea:	2300      	movs	r3, #0
 800eeec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eeee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eef2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eef4:	f107 0308 	add.w	r3, r7, #8
 800eef8:	4619      	mov	r1, r3
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f7ff fe02 	bl	800eb04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ef00:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef04:	2106      	movs	r1, #6
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f000 f8d4 	bl	800f0b4 <SDMMC_GetCmdResp1>
 800ef0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef0e:	69fb      	ldr	r3, [r7, #28]
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3720      	adds	r7, #32
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b088      	sub	sp, #32
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ef20:	2300      	movs	r3, #0
 800ef22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ef24:	2333      	movs	r3, #51	; 0x33
 800ef26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ef28:	2340      	movs	r3, #64	; 0x40
 800ef2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef36:	f107 0308 	add.w	r3, r7, #8
 800ef3a:	4619      	mov	r1, r3
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f7ff fde1 	bl	800eb04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ef42:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef46:	2133      	movs	r1, #51	; 0x33
 800ef48:	6878      	ldr	r0, [r7, #4]
 800ef4a:	f000 f8b3 	bl	800f0b4 <SDMMC_GetCmdResp1>
 800ef4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef50:	69fb      	ldr	r3, [r7, #28]
}
 800ef52:	4618      	mov	r0, r3
 800ef54:	3720      	adds	r7, #32
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}

0800ef5a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ef5a:	b580      	push	{r7, lr}
 800ef5c:	b088      	sub	sp, #32
 800ef5e:	af00      	add	r7, sp, #0
 800ef60:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ef62:	2300      	movs	r3, #0
 800ef64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ef66:	2302      	movs	r3, #2
 800ef68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ef6a:	23c0      	movs	r3, #192	; 0xc0
 800ef6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef78:	f107 0308 	add.w	r3, r7, #8
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f7ff fdc0 	bl	800eb04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f000 f983 	bl	800f290 <SDMMC_GetCmdResp2>
 800ef8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef8c:	69fb      	ldr	r3, [r7, #28]
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3720      	adds	r7, #32
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}

0800ef96 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ef96:	b580      	push	{r7, lr}
 800ef98:	b088      	sub	sp, #32
 800ef9a:	af00      	add	r7, sp, #0
 800ef9c:	6078      	str	r0, [r7, #4]
 800ef9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800efa4:	2309      	movs	r3, #9
 800efa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800efa8:	23c0      	movs	r3, #192	; 0xc0
 800efaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800efac:	2300      	movs	r3, #0
 800efae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800efb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800efb6:	f107 0308 	add.w	r3, r7, #8
 800efba:	4619      	mov	r1, r3
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f7ff fda1 	bl	800eb04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f000 f964 	bl	800f290 <SDMMC_GetCmdResp2>
 800efc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800efca:	69fb      	ldr	r3, [r7, #28]
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3720      	adds	r7, #32
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}

0800efd4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b088      	sub	sp, #32
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
 800efdc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800efde:	2300      	movs	r3, #0
 800efe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800efe2:	2303      	movs	r3, #3
 800efe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800efe6:	2340      	movs	r3, #64	; 0x40
 800efe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800efea:	2300      	movs	r3, #0
 800efec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800efee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eff2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eff4:	f107 0308 	add.w	r3, r7, #8
 800eff8:	4619      	mov	r1, r3
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f7ff fd82 	bl	800eb04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f000:	683a      	ldr	r2, [r7, #0]
 800f002:	2103      	movs	r1, #3
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f000 f9c9 	bl	800f39c <SDMMC_GetCmdResp6>
 800f00a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f00c:	69fb      	ldr	r3, [r7, #28]
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3720      	adds	r7, #32
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}

0800f016 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f016:	b580      	push	{r7, lr}
 800f018:	b088      	sub	sp, #32
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	6078      	str	r0, [r7, #4]
 800f01e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f024:	230d      	movs	r3, #13
 800f026:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f028:	2340      	movs	r3, #64	; 0x40
 800f02a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f02c:	2300      	movs	r3, #0
 800f02e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f034:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f036:	f107 0308 	add.w	r3, r7, #8
 800f03a:	4619      	mov	r1, r3
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f7ff fd61 	bl	800eb04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800f042:	f241 3288 	movw	r2, #5000	; 0x1388
 800f046:	210d      	movs	r1, #13
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f000 f833 	bl	800f0b4 <SDMMC_GetCmdResp1>
 800f04e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f050:	69fb      	ldr	r3, [r7, #28]
}
 800f052:	4618      	mov	r0, r3
 800f054:	3720      	adds	r7, #32
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
	...

0800f05c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b085      	sub	sp, #20
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f064:	4b11      	ldr	r3, [pc, #68]	; (800f0ac <SDMMC_GetCmdError+0x50>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4a11      	ldr	r2, [pc, #68]	; (800f0b0 <SDMMC_GetCmdError+0x54>)
 800f06a:	fba2 2303 	umull	r2, r3, r2, r3
 800f06e:	0a5b      	lsrs	r3, r3, #9
 800f070:	f241 3288 	movw	r2, #5000	; 0x1388
 800f074:	fb02 f303 	mul.w	r3, r2, r3
 800f078:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	1e5a      	subs	r2, r3, #1
 800f07e:	60fa      	str	r2, [r7, #12]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d102      	bne.n	800f08a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f084:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f088:	e009      	b.n	800f09e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f092:	2b00      	cmp	r3, #0
 800f094:	d0f1      	beq.n	800f07a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	22c5      	movs	r2, #197	; 0xc5
 800f09a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800f09c:	2300      	movs	r3, #0
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3714      	adds	r7, #20
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a8:	4770      	bx	lr
 800f0aa:	bf00      	nop
 800f0ac:	20000000 	.word	0x20000000
 800f0b0:	10624dd3 	.word	0x10624dd3

0800f0b4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b088      	sub	sp, #32
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	60f8      	str	r0, [r7, #12]
 800f0bc:	460b      	mov	r3, r1
 800f0be:	607a      	str	r2, [r7, #4]
 800f0c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f0c2:	4b70      	ldr	r3, [pc, #448]	; (800f284 <SDMMC_GetCmdResp1+0x1d0>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	4a70      	ldr	r2, [pc, #448]	; (800f288 <SDMMC_GetCmdResp1+0x1d4>)
 800f0c8:	fba2 2303 	umull	r2, r3, r2, r3
 800f0cc:	0a5a      	lsrs	r2, r3, #9
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	fb02 f303 	mul.w	r3, r2, r3
 800f0d4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f0d6:	69fb      	ldr	r3, [r7, #28]
 800f0d8:	1e5a      	subs	r2, r3, #1
 800f0da:	61fa      	str	r2, [r7, #28]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d102      	bne.n	800f0e6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f0e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f0e4:	e0c9      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0ea:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f0ec:	69bb      	ldr	r3, [r7, #24]
 800f0ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d0ef      	beq.n	800f0d6 <SDMMC_GetCmdResp1+0x22>
 800f0f6:	69bb      	ldr	r3, [r7, #24]
 800f0f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d1ea      	bne.n	800f0d6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f104:	f003 0304 	and.w	r3, r3, #4
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d004      	beq.n	800f116 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	2204      	movs	r2, #4
 800f110:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f112:	2304      	movs	r3, #4
 800f114:	e0b1      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f11a:	f003 0301 	and.w	r3, r3, #1
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d004      	beq.n	800f12c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	2201      	movs	r2, #1
 800f126:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f128:	2301      	movs	r3, #1
 800f12a:	e0a6      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	22c5      	movs	r2, #197	; 0xc5
 800f130:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f132:	68f8      	ldr	r0, [r7, #12]
 800f134:	f7ff fd10 	bl	800eb58 <SDMMC_GetCommandResponse>
 800f138:	4603      	mov	r3, r0
 800f13a:	461a      	mov	r2, r3
 800f13c:	7afb      	ldrb	r3, [r7, #11]
 800f13e:	4293      	cmp	r3, r2
 800f140:	d001      	beq.n	800f146 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f142:	2301      	movs	r3, #1
 800f144:	e099      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f146:	2100      	movs	r1, #0
 800f148:	68f8      	ldr	r0, [r7, #12]
 800f14a:	f7ff fd12 	bl	800eb72 <SDMMC_GetResponse>
 800f14e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f150:	697a      	ldr	r2, [r7, #20]
 800f152:	4b4e      	ldr	r3, [pc, #312]	; (800f28c <SDMMC_GetCmdResp1+0x1d8>)
 800f154:	4013      	ands	r3, r2
 800f156:	2b00      	cmp	r3, #0
 800f158:	d101      	bne.n	800f15e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f15a:	2300      	movs	r3, #0
 800f15c:	e08d      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	2b00      	cmp	r3, #0
 800f162:	da02      	bge.n	800f16a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f164:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f168:	e087      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f170:	2b00      	cmp	r3, #0
 800f172:	d001      	beq.n	800f178 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f174:	2340      	movs	r3, #64	; 0x40
 800f176:	e080      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d001      	beq.n	800f186 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f182:	2380      	movs	r3, #128	; 0x80
 800f184:	e079      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d002      	beq.n	800f196 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f190:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f194:	e071      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f196:	697b      	ldr	r3, [r7, #20]
 800f198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d002      	beq.n	800f1a6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f1a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f1a4:	e069      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d002      	beq.n	800f1b6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f1b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1b4:	e061      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d002      	beq.n	800f1c6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f1c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f1c4:	e059      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d002      	beq.n	800f1d6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f1d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f1d4:	e051      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d002      	beq.n	800f1e6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f1e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f1e4:	e049      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d002      	beq.n	800f1f6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f1f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f1f4:	e041      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d002      	beq.n	800f206 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f200:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f204:	e039      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d002      	beq.n	800f216 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f210:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f214:	e031      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d002      	beq.n	800f226 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f220:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f224:	e029      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d002      	beq.n	800f236 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f230:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f234:	e021      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d002      	beq.n	800f246 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f240:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f244:	e019      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d002      	beq.n	800f256 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f250:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f254:	e011      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d002      	beq.n	800f266 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f260:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f264:	e009      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	f003 0308 	and.w	r3, r3, #8
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d002      	beq.n	800f276 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f270:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f274:	e001      	b.n	800f27a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3720      	adds	r7, #32
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
 800f282:	bf00      	nop
 800f284:	20000000 	.word	0x20000000
 800f288:	10624dd3 	.word	0x10624dd3
 800f28c:	fdffe008 	.word	0xfdffe008

0800f290 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f290:	b480      	push	{r7}
 800f292:	b085      	sub	sp, #20
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f298:	4b1f      	ldr	r3, [pc, #124]	; (800f318 <SDMMC_GetCmdResp2+0x88>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	4a1f      	ldr	r2, [pc, #124]	; (800f31c <SDMMC_GetCmdResp2+0x8c>)
 800f29e:	fba2 2303 	umull	r2, r3, r2, r3
 800f2a2:	0a5b      	lsrs	r3, r3, #9
 800f2a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2a8:	fb02 f303 	mul.w	r3, r2, r3
 800f2ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	1e5a      	subs	r2, r3, #1
 800f2b2:	60fa      	str	r2, [r7, #12]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d102      	bne.n	800f2be <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f2b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f2bc:	e026      	b.n	800f30c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d0ef      	beq.n	800f2ae <SDMMC_GetCmdResp2+0x1e>
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d1ea      	bne.n	800f2ae <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2dc:	f003 0304 	and.w	r3, r3, #4
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d004      	beq.n	800f2ee <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2204      	movs	r2, #4
 800f2e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f2ea:	2304      	movs	r3, #4
 800f2ec:	e00e      	b.n	800f30c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2f2:	f003 0301 	and.w	r3, r3, #1
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d004      	beq.n	800f304 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2201      	movs	r2, #1
 800f2fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f300:	2301      	movs	r3, #1
 800f302:	e003      	b.n	800f30c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	22c5      	movs	r2, #197	; 0xc5
 800f308:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f30a:	2300      	movs	r3, #0
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3714      	adds	r7, #20
 800f310:	46bd      	mov	sp, r7
 800f312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f316:	4770      	bx	lr
 800f318:	20000000 	.word	0x20000000
 800f31c:	10624dd3 	.word	0x10624dd3

0800f320 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f320:	b480      	push	{r7}
 800f322:	b085      	sub	sp, #20
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f328:	4b1a      	ldr	r3, [pc, #104]	; (800f394 <SDMMC_GetCmdResp3+0x74>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	4a1a      	ldr	r2, [pc, #104]	; (800f398 <SDMMC_GetCmdResp3+0x78>)
 800f32e:	fba2 2303 	umull	r2, r3, r2, r3
 800f332:	0a5b      	lsrs	r3, r3, #9
 800f334:	f241 3288 	movw	r2, #5000	; 0x1388
 800f338:	fb02 f303 	mul.w	r3, r2, r3
 800f33c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	1e5a      	subs	r2, r3, #1
 800f342:	60fa      	str	r2, [r7, #12]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d102      	bne.n	800f34e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f348:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f34c:	e01b      	b.n	800f386 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f352:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f354:	68bb      	ldr	r3, [r7, #8]
 800f356:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d0ef      	beq.n	800f33e <SDMMC_GetCmdResp3+0x1e>
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f364:	2b00      	cmp	r3, #0
 800f366:	d1ea      	bne.n	800f33e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f36c:	f003 0304 	and.w	r3, r3, #4
 800f370:	2b00      	cmp	r3, #0
 800f372:	d004      	beq.n	800f37e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2204      	movs	r2, #4
 800f378:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f37a:	2304      	movs	r3, #4
 800f37c:	e003      	b.n	800f386 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	22c5      	movs	r2, #197	; 0xc5
 800f382:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f384:	2300      	movs	r3, #0
}
 800f386:	4618      	mov	r0, r3
 800f388:	3714      	adds	r7, #20
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr
 800f392:	bf00      	nop
 800f394:	20000000 	.word	0x20000000
 800f398:	10624dd3 	.word	0x10624dd3

0800f39c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b088      	sub	sp, #32
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	60f8      	str	r0, [r7, #12]
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	607a      	str	r2, [r7, #4]
 800f3a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f3aa:	4b35      	ldr	r3, [pc, #212]	; (800f480 <SDMMC_GetCmdResp6+0xe4>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	4a35      	ldr	r2, [pc, #212]	; (800f484 <SDMMC_GetCmdResp6+0xe8>)
 800f3b0:	fba2 2303 	umull	r2, r3, r2, r3
 800f3b4:	0a5b      	lsrs	r3, r3, #9
 800f3b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800f3ba:	fb02 f303 	mul.w	r3, r2, r3
 800f3be:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f3c0:	69fb      	ldr	r3, [r7, #28]
 800f3c2:	1e5a      	subs	r2, r3, #1
 800f3c4:	61fa      	str	r2, [r7, #28]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d102      	bne.n	800f3d0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f3ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f3ce:	e052      	b.n	800f476 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3d4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f3d6:	69bb      	ldr	r3, [r7, #24]
 800f3d8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d0ef      	beq.n	800f3c0 <SDMMC_GetCmdResp6+0x24>
 800f3e0:	69bb      	ldr	r3, [r7, #24]
 800f3e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d1ea      	bne.n	800f3c0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3ee:	f003 0304 	and.w	r3, r3, #4
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d004      	beq.n	800f400 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	2204      	movs	r2, #4
 800f3fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f3fc:	2304      	movs	r3, #4
 800f3fe:	e03a      	b.n	800f476 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f404:	f003 0301 	and.w	r3, r3, #1
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d004      	beq.n	800f416 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2201      	movs	r2, #1
 800f410:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f412:	2301      	movs	r3, #1
 800f414:	e02f      	b.n	800f476 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f416:	68f8      	ldr	r0, [r7, #12]
 800f418:	f7ff fb9e 	bl	800eb58 <SDMMC_GetCommandResponse>
 800f41c:	4603      	mov	r3, r0
 800f41e:	461a      	mov	r2, r3
 800f420:	7afb      	ldrb	r3, [r7, #11]
 800f422:	4293      	cmp	r3, r2
 800f424:	d001      	beq.n	800f42a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f426:	2301      	movs	r3, #1
 800f428:	e025      	b.n	800f476 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	22c5      	movs	r2, #197	; 0xc5
 800f42e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f430:	2100      	movs	r1, #0
 800f432:	68f8      	ldr	r0, [r7, #12]
 800f434:	f7ff fb9d 	bl	800eb72 <SDMMC_GetResponse>
 800f438:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f440:	2b00      	cmp	r3, #0
 800f442:	d106      	bne.n	800f452 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	0c1b      	lsrs	r3, r3, #16
 800f448:	b29a      	uxth	r2, r3
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800f44e:	2300      	movs	r3, #0
 800f450:	e011      	b.n	800f476 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d002      	beq.n	800f462 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f45c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f460:	e009      	b.n	800f476 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d002      	beq.n	800f472 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f46c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f470:	e001      	b.n	800f476 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f472:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f476:	4618      	mov	r0, r3
 800f478:	3720      	adds	r7, #32
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	20000000 	.word	0x20000000
 800f484:	10624dd3 	.word	0x10624dd3

0800f488 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800f488:	b480      	push	{r7}
 800f48a:	b085      	sub	sp, #20
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f490:	4b22      	ldr	r3, [pc, #136]	; (800f51c <SDMMC_GetCmdResp7+0x94>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	4a22      	ldr	r2, [pc, #136]	; (800f520 <SDMMC_GetCmdResp7+0x98>)
 800f496:	fba2 2303 	umull	r2, r3, r2, r3
 800f49a:	0a5b      	lsrs	r3, r3, #9
 800f49c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f4a0:	fb02 f303 	mul.w	r3, r2, r3
 800f4a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	1e5a      	subs	r2, r3, #1
 800f4aa:	60fa      	str	r2, [r7, #12]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d102      	bne.n	800f4b6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f4b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f4b4:	e02c      	b.n	800f510 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d0ef      	beq.n	800f4a6 <SDMMC_GetCmdResp7+0x1e>
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d1ea      	bne.n	800f4a6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4d4:	f003 0304 	and.w	r3, r3, #4
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d004      	beq.n	800f4e6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2204      	movs	r2, #4
 800f4e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f4e2:	2304      	movs	r3, #4
 800f4e4:	e014      	b.n	800f510 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4ea:	f003 0301 	and.w	r3, r3, #1
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d004      	beq.n	800f4fc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2201      	movs	r2, #1
 800f4f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	e009      	b.n	800f510 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f504:	2b00      	cmp	r3, #0
 800f506:	d002      	beq.n	800f50e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2240      	movs	r2, #64	; 0x40
 800f50c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f50e:	2300      	movs	r3, #0
  
}
 800f510:	4618      	mov	r0, r3
 800f512:	3714      	adds	r7, #20
 800f514:	46bd      	mov	sp, r7
 800f516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51a:	4770      	bx	lr
 800f51c:	20000000 	.word	0x20000000
 800f520:	10624dd3 	.word	0x10624dd3

0800f524 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f524:	b480      	push	{r7}
 800f526:	b083      	sub	sp, #12
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	689b      	ldr	r3, [r3, #8]
 800f530:	f043 0201 	orr.w	r2, r3, #1
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f538:	2300      	movs	r3, #0
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	370c      	adds	r7, #12
 800f53e:	46bd      	mov	sp, r7
 800f540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f544:	4770      	bx	lr

0800f546 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f546:	b480      	push	{r7}
 800f548:	b083      	sub	sp, #12
 800f54a:	af00      	add	r7, sp, #0
 800f54c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	689b      	ldr	r3, [r3, #8]
 800f552:	f023 0201 	bic.w	r2, r3, #1
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f55a:	2300      	movs	r3, #0
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	370c      	adds	r7, #12
 800f560:	46bd      	mov	sp, r7
 800f562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f566:	4770      	bx	lr

0800f568 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f568:	b480      	push	{r7}
 800f56a:	b085      	sub	sp, #20
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f572:	2300      	movs	r3, #0
 800f574:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	019b      	lsls	r3, r3, #6
 800f57a:	f043 0220 	orr.w	r2, r3, #32
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	3301      	adds	r3, #1
 800f586:	60fb      	str	r3, [r7, #12]
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	4a09      	ldr	r2, [pc, #36]	; (800f5b0 <USB_FlushTxFifo+0x48>)
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d901      	bls.n	800f594 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f590:	2303      	movs	r3, #3
 800f592:	e006      	b.n	800f5a2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	691b      	ldr	r3, [r3, #16]
 800f598:	f003 0320 	and.w	r3, r3, #32
 800f59c:	2b20      	cmp	r3, #32
 800f59e:	d0f0      	beq.n	800f582 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f5a0:	2300      	movs	r3, #0
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3714      	adds	r7, #20
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ac:	4770      	bx	lr
 800f5ae:	bf00      	nop
 800f5b0:	00030d40 	.word	0x00030d40

0800f5b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b085      	sub	sp, #20
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2210      	movs	r2, #16
 800f5c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	3301      	adds	r3, #1
 800f5ca:	60fb      	str	r3, [r7, #12]
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	4a09      	ldr	r2, [pc, #36]	; (800f5f4 <USB_FlushRxFifo+0x40>)
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d901      	bls.n	800f5d8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f5d4:	2303      	movs	r3, #3
 800f5d6:	e006      	b.n	800f5e6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	691b      	ldr	r3, [r3, #16]
 800f5dc:	f003 0310 	and.w	r3, r3, #16
 800f5e0:	2b10      	cmp	r3, #16
 800f5e2:	d0f0      	beq.n	800f5c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f5e4:	2300      	movs	r3, #0
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3714      	adds	r7, #20
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f0:	4770      	bx	lr
 800f5f2:	bf00      	nop
 800f5f4:	00030d40 	.word	0x00030d40

0800f5f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b089      	sub	sp, #36	; 0x24
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	60f8      	str	r0, [r7, #12]
 800f600:	60b9      	str	r1, [r7, #8]
 800f602:	4611      	mov	r1, r2
 800f604:	461a      	mov	r2, r3
 800f606:	460b      	mov	r3, r1
 800f608:	71fb      	strb	r3, [r7, #7]
 800f60a:	4613      	mov	r3, r2
 800f60c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800f616:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d11a      	bne.n	800f654 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f61e:	88bb      	ldrh	r3, [r7, #4]
 800f620:	3303      	adds	r3, #3
 800f622:	089b      	lsrs	r3, r3, #2
 800f624:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f626:	2300      	movs	r3, #0
 800f628:	61bb      	str	r3, [r7, #24]
 800f62a:	e00f      	b.n	800f64c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f62c:	79fb      	ldrb	r3, [r7, #7]
 800f62e:	031a      	lsls	r2, r3, #12
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	4413      	add	r3, r2
 800f634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f638:	461a      	mov	r2, r3
 800f63a:	69fb      	ldr	r3, [r7, #28]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f640:	69fb      	ldr	r3, [r7, #28]
 800f642:	3304      	adds	r3, #4
 800f644:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f646:	69bb      	ldr	r3, [r7, #24]
 800f648:	3301      	adds	r3, #1
 800f64a:	61bb      	str	r3, [r7, #24]
 800f64c:	69ba      	ldr	r2, [r7, #24]
 800f64e:	693b      	ldr	r3, [r7, #16]
 800f650:	429a      	cmp	r2, r3
 800f652:	d3eb      	bcc.n	800f62c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f654:	2300      	movs	r3, #0
}
 800f656:	4618      	mov	r0, r3
 800f658:	3724      	adds	r7, #36	; 0x24
 800f65a:	46bd      	mov	sp, r7
 800f65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f660:	4770      	bx	lr

0800f662 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f662:	b480      	push	{r7}
 800f664:	b089      	sub	sp, #36	; 0x24
 800f666:	af00      	add	r7, sp, #0
 800f668:	60f8      	str	r0, [r7, #12]
 800f66a:	60b9      	str	r1, [r7, #8]
 800f66c:	4613      	mov	r3, r2
 800f66e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f678:	88fb      	ldrh	r3, [r7, #6]
 800f67a:	3303      	adds	r3, #3
 800f67c:	089b      	lsrs	r3, r3, #2
 800f67e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800f680:	2300      	movs	r3, #0
 800f682:	61bb      	str	r3, [r7, #24]
 800f684:	e00b      	b.n	800f69e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f68c:	681a      	ldr	r2, [r3, #0]
 800f68e:	69fb      	ldr	r3, [r7, #28]
 800f690:	601a      	str	r2, [r3, #0]
    pDest++;
 800f692:	69fb      	ldr	r3, [r7, #28]
 800f694:	3304      	adds	r3, #4
 800f696:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f698:	69bb      	ldr	r3, [r7, #24]
 800f69a:	3301      	adds	r3, #1
 800f69c:	61bb      	str	r3, [r7, #24]
 800f69e:	69ba      	ldr	r2, [r7, #24]
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d3ef      	bcc.n	800f686 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800f6a6:	69fb      	ldr	r3, [r7, #28]
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3724      	adds	r7, #36	; 0x24
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr

0800f6b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b085      	sub	sp, #20
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	695b      	ldr	r3, [r3, #20]
 800f6c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	699b      	ldr	r3, [r3, #24]
 800f6c6:	68fa      	ldr	r2, [r7, #12]
 800f6c8:	4013      	ands	r3, r2
 800f6ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3714      	adds	r7, #20
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d8:	4770      	bx	lr

0800f6da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f6da:	b480      	push	{r7}
 800f6dc:	b083      	sub	sp, #12
 800f6de:	af00      	add	r7, sp, #0
 800f6e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	695b      	ldr	r3, [r3, #20]
 800f6e6:	f003 0301 	and.w	r3, r3, #1
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	370c      	adds	r7, #12
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f4:	4770      	bx	lr

0800f6f6 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800f6f6:	b480      	push	{r7}
 800f6f8:	b085      	sub	sp, #20
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	6078      	str	r0, [r7, #4]
 800f6fe:	460b      	mov	r3, r1
 800f700:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	68fa      	ldr	r2, [r7, #12]
 800f710:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f714:	f023 0303 	bic.w	r3, r3, #3
 800f718:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f720:	681a      	ldr	r2, [r3, #0]
 800f722:	78fb      	ldrb	r3, [r7, #3]
 800f724:	f003 0303 	and.w	r3, r3, #3
 800f728:	68f9      	ldr	r1, [r7, #12]
 800f72a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f72e:	4313      	orrs	r3, r2
 800f730:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800f732:	78fb      	ldrb	r3, [r7, #3]
 800f734:	2b01      	cmp	r3, #1
 800f736:	d107      	bne.n	800f748 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f73e:	461a      	mov	r2, r3
 800f740:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f744:	6053      	str	r3, [r2, #4]
 800f746:	e009      	b.n	800f75c <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800f748:	78fb      	ldrb	r3, [r7, #3]
 800f74a:	2b02      	cmp	r3, #2
 800f74c:	d106      	bne.n	800f75c <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f754:	461a      	mov	r2, r3
 800f756:	f241 7370 	movw	r3, #6000	; 0x1770
 800f75a:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800f75c:	2300      	movs	r3, #0
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3714      	adds	r7, #20
 800f762:	46bd      	mov	sp, r7
 800f764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f768:	4770      	bx	lr

0800f76a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800f76a:	b580      	push	{r7, lr}
 800f76c:	b084      	sub	sp, #16
 800f76e:	af00      	add	r7, sp, #0
 800f770:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800f776:	2300      	movs	r3, #0
 800f778:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800f78a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	68fa      	ldr	r2, [r7, #12]
 800f790:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f798:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800f79a:	2064      	movs	r0, #100	; 0x64
 800f79c:	f7f4 fd4a 	bl	8004234 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	68fa      	ldr	r2, [r7, #12]
 800f7a4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f7a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f7ac:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800f7ae:	200a      	movs	r0, #10
 800f7b0:	f7f4 fd40 	bl	8004234 <HAL_Delay>

  return HAL_OK;
 800f7b4:	2300      	movs	r3, #0
}
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	3710      	adds	r7, #16
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}

0800f7be <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800f7be:	b480      	push	{r7}
 800f7c0:	b085      	sub	sp, #20
 800f7c2:	af00      	add	r7, sp, #0
 800f7c4:	6078      	str	r0, [r7, #4]
 800f7c6:	460b      	mov	r3, r1
 800f7c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800f7e2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d109      	bne.n	800f802 <USB_DriveVbus+0x44>
 800f7ee:	78fb      	ldrb	r3, [r7, #3]
 800f7f0:	2b01      	cmp	r3, #1
 800f7f2:	d106      	bne.n	800f802 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	68fa      	ldr	r2, [r7, #12]
 800f7f8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f7fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f800:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f80c:	d109      	bne.n	800f822 <USB_DriveVbus+0x64>
 800f80e:	78fb      	ldrb	r3, [r7, #3]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d106      	bne.n	800f822 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	68fa      	ldr	r2, [r7, #12]
 800f818:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f81c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f820:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800f822:	2300      	movs	r3, #0
}
 800f824:	4618      	mov	r0, r3
 800f826:	3714      	adds	r7, #20
 800f828:	46bd      	mov	sp, r7
 800f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82e:	4770      	bx	lr

0800f830 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f830:	b480      	push	{r7}
 800f832:	b085      	sub	sp, #20
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800f83c:	2300      	movs	r3, #0
 800f83e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	0c5b      	lsrs	r3, r3, #17
 800f84e:	f003 0303 	and.w	r3, r3, #3
}
 800f852:	4618      	mov	r0, r3
 800f854:	3714      	adds	r7, #20
 800f856:	46bd      	mov	sp, r7
 800f858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85c:	4770      	bx	lr
	...

0800f860 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b088      	sub	sp, #32
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
 800f868:	4608      	mov	r0, r1
 800f86a:	4611      	mov	r1, r2
 800f86c:	461a      	mov	r2, r3
 800f86e:	4603      	mov	r3, r0
 800f870:	70fb      	strb	r3, [r7, #3]
 800f872:	460b      	mov	r3, r1
 800f874:	70bb      	strb	r3, [r7, #2]
 800f876:	4613      	mov	r3, r2
 800f878:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800f87a:	2300      	movs	r3, #0
 800f87c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800f882:	78fb      	ldrb	r3, [r7, #3]
 800f884:	015a      	lsls	r2, r3, #5
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	4413      	add	r3, r2
 800f88a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f88e:	461a      	mov	r2, r3
 800f890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f894:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800f896:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f89a:	2b03      	cmp	r3, #3
 800f89c:	d87e      	bhi.n	800f99c <USB_HC_Init+0x13c>
 800f89e:	a201      	add	r2, pc, #4	; (adr r2, 800f8a4 <USB_HC_Init+0x44>)
 800f8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8a4:	0800f8b5 	.word	0x0800f8b5
 800f8a8:	0800f95f 	.word	0x0800f95f
 800f8ac:	0800f8b5 	.word	0x0800f8b5
 800f8b0:	0800f921 	.word	0x0800f921
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800f8b4:	78fb      	ldrb	r3, [r7, #3]
 800f8b6:	015a      	lsls	r2, r3, #5
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	4413      	add	r3, r2
 800f8bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f8c0:	461a      	mov	r2, r3
 800f8c2:	f240 439d 	movw	r3, #1181	; 0x49d
 800f8c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800f8c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	da10      	bge.n	800f8f2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800f8d0:	78fb      	ldrb	r3, [r7, #3]
 800f8d2:	015a      	lsls	r2, r3, #5
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	4413      	add	r3, r2
 800f8d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f8dc:	68db      	ldr	r3, [r3, #12]
 800f8de:	78fa      	ldrb	r2, [r7, #3]
 800f8e0:	0151      	lsls	r1, r2, #5
 800f8e2:	693a      	ldr	r2, [r7, #16]
 800f8e4:	440a      	add	r2, r1
 800f8e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f8ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f8ee:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800f8f0:	e057      	b.n	800f9a2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d051      	beq.n	800f9a2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800f8fe:	78fb      	ldrb	r3, [r7, #3]
 800f900:	015a      	lsls	r2, r3, #5
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	4413      	add	r3, r2
 800f906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f90a:	68db      	ldr	r3, [r3, #12]
 800f90c:	78fa      	ldrb	r2, [r7, #3]
 800f90e:	0151      	lsls	r1, r2, #5
 800f910:	693a      	ldr	r2, [r7, #16]
 800f912:	440a      	add	r2, r1
 800f914:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f918:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800f91c:	60d3      	str	r3, [r2, #12]
      break;
 800f91e:	e040      	b.n	800f9a2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800f920:	78fb      	ldrb	r3, [r7, #3]
 800f922:	015a      	lsls	r2, r3, #5
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	4413      	add	r3, r2
 800f928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f92c:	461a      	mov	r2, r3
 800f92e:	f240 639d 	movw	r3, #1693	; 0x69d
 800f932:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800f934:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	da34      	bge.n	800f9a6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800f93c:	78fb      	ldrb	r3, [r7, #3]
 800f93e:	015a      	lsls	r2, r3, #5
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	4413      	add	r3, r2
 800f944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f948:	68db      	ldr	r3, [r3, #12]
 800f94a:	78fa      	ldrb	r2, [r7, #3]
 800f94c:	0151      	lsls	r1, r2, #5
 800f94e:	693a      	ldr	r2, [r7, #16]
 800f950:	440a      	add	r2, r1
 800f952:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f95a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800f95c:	e023      	b.n	800f9a6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800f95e:	78fb      	ldrb	r3, [r7, #3]
 800f960:	015a      	lsls	r2, r3, #5
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	4413      	add	r3, r2
 800f966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f96a:	461a      	mov	r2, r3
 800f96c:	f240 2325 	movw	r3, #549	; 0x225
 800f970:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800f972:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f976:	2b00      	cmp	r3, #0
 800f978:	da17      	bge.n	800f9aa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800f97a:	78fb      	ldrb	r3, [r7, #3]
 800f97c:	015a      	lsls	r2, r3, #5
 800f97e:	693b      	ldr	r3, [r7, #16]
 800f980:	4413      	add	r3, r2
 800f982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f986:	68db      	ldr	r3, [r3, #12]
 800f988:	78fa      	ldrb	r2, [r7, #3]
 800f98a:	0151      	lsls	r1, r2, #5
 800f98c:	693a      	ldr	r2, [r7, #16]
 800f98e:	440a      	add	r2, r1
 800f990:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f994:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800f998:	60d3      	str	r3, [r2, #12]
      }
      break;
 800f99a:	e006      	b.n	800f9aa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800f99c:	2301      	movs	r3, #1
 800f99e:	77fb      	strb	r3, [r7, #31]
      break;
 800f9a0:	e004      	b.n	800f9ac <USB_HC_Init+0x14c>
      break;
 800f9a2:	bf00      	nop
 800f9a4:	e002      	b.n	800f9ac <USB_HC_Init+0x14c>
      break;
 800f9a6:	bf00      	nop
 800f9a8:	e000      	b.n	800f9ac <USB_HC_Init+0x14c>
      break;
 800f9aa:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800f9ac:	693b      	ldr	r3, [r7, #16]
 800f9ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f9b2:	699a      	ldr	r2, [r3, #24]
 800f9b4:	78fb      	ldrb	r3, [r7, #3]
 800f9b6:	f003 030f 	and.w	r3, r3, #15
 800f9ba:	2101      	movs	r1, #1
 800f9bc:	fa01 f303 	lsl.w	r3, r1, r3
 800f9c0:	6939      	ldr	r1, [r7, #16]
 800f9c2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f9c6:	4313      	orrs	r3, r2
 800f9c8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	699b      	ldr	r3, [r3, #24]
 800f9ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800f9d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	da03      	bge.n	800f9e6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800f9de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f9e2:	61bb      	str	r3, [r7, #24]
 800f9e4:	e001      	b.n	800f9ea <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f7ff ff20 	bl	800f830 <USB_GetHostSpeed>
 800f9f0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800f9f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f9f6:	2b02      	cmp	r3, #2
 800f9f8:	d106      	bne.n	800fa08 <USB_HC_Init+0x1a8>
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	2b02      	cmp	r3, #2
 800f9fe:	d003      	beq.n	800fa08 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800fa00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fa04:	617b      	str	r3, [r7, #20]
 800fa06:	e001      	b.n	800fa0c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800fa0c:	787b      	ldrb	r3, [r7, #1]
 800fa0e:	059b      	lsls	r3, r3, #22
 800fa10:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800fa14:	78bb      	ldrb	r3, [r7, #2]
 800fa16:	02db      	lsls	r3, r3, #11
 800fa18:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800fa1c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800fa1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa22:	049b      	lsls	r3, r3, #18
 800fa24:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800fa28:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800fa2a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fa2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800fa30:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800fa32:	69bb      	ldr	r3, [r7, #24]
 800fa34:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800fa36:	78fb      	ldrb	r3, [r7, #3]
 800fa38:	0159      	lsls	r1, r3, #5
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	440b      	add	r3, r1
 800fa3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa42:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800fa48:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800fa4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa4e:	2b03      	cmp	r3, #3
 800fa50:	d10f      	bne.n	800fa72 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800fa52:	78fb      	ldrb	r3, [r7, #3]
 800fa54:	015a      	lsls	r2, r3, #5
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	4413      	add	r3, r2
 800fa5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	78fa      	ldrb	r2, [r7, #3]
 800fa62:	0151      	lsls	r1, r2, #5
 800fa64:	693a      	ldr	r2, [r7, #16]
 800fa66:	440a      	add	r2, r1
 800fa68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fa6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fa70:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800fa72:	7ffb      	ldrb	r3, [r7, #31]
}
 800fa74:	4618      	mov	r0, r3
 800fa76:	3720      	adds	r7, #32
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}

0800fa7c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b08c      	sub	sp, #48	; 0x30
 800fa80:	af02      	add	r7, sp, #8
 800fa82:	60f8      	str	r0, [r7, #12]
 800fa84:	60b9      	str	r1, [r7, #8]
 800fa86:	4613      	mov	r3, r2
 800fa88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	785b      	ldrb	r3, [r3, #1]
 800fa92:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800fa94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fa98:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d02d      	beq.n	800fb02 <USB_HC_StartXfer+0x86>
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	791b      	ldrb	r3, [r3, #4]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d129      	bne.n	800fb02 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800faae:	79fb      	ldrb	r3, [r7, #7]
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d117      	bne.n	800fae4 <USB_HC_StartXfer+0x68>
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	79db      	ldrb	r3, [r3, #7]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d003      	beq.n	800fac4 <USB_HC_StartXfer+0x48>
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	79db      	ldrb	r3, [r3, #7]
 800fac0:	2b02      	cmp	r3, #2
 800fac2:	d10f      	bne.n	800fae4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800fac4:	69fb      	ldr	r3, [r7, #28]
 800fac6:	015a      	lsls	r2, r3, #5
 800fac8:	6a3b      	ldr	r3, [r7, #32]
 800faca:	4413      	add	r3, r2
 800facc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fad0:	68db      	ldr	r3, [r3, #12]
 800fad2:	69fa      	ldr	r2, [r7, #28]
 800fad4:	0151      	lsls	r1, r2, #5
 800fad6:	6a3a      	ldr	r2, [r7, #32]
 800fad8:	440a      	add	r2, r1
 800fada:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fae2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800fae4:	79fb      	ldrb	r3, [r7, #7]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d10b      	bne.n	800fb02 <USB_HC_StartXfer+0x86>
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	795b      	ldrb	r3, [r3, #5]
 800faee:	2b01      	cmp	r3, #1
 800faf0:	d107      	bne.n	800fb02 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	785b      	ldrb	r3, [r3, #1]
 800faf6:	4619      	mov	r1, r3
 800faf8:	68f8      	ldr	r0, [r7, #12]
 800fafa:	f000 fa2f 	bl	800ff5c <USB_DoPing>
      return HAL_OK;
 800fafe:	2300      	movs	r3, #0
 800fb00:	e0f8      	b.n	800fcf4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	695b      	ldr	r3, [r3, #20]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d018      	beq.n	800fb3c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	695b      	ldr	r3, [r3, #20]
 800fb0e:	68ba      	ldr	r2, [r7, #8]
 800fb10:	8912      	ldrh	r2, [r2, #8]
 800fb12:	4413      	add	r3, r2
 800fb14:	3b01      	subs	r3, #1
 800fb16:	68ba      	ldr	r2, [r7, #8]
 800fb18:	8912      	ldrh	r2, [r2, #8]
 800fb1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb1e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800fb20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fb22:	8b7b      	ldrh	r3, [r7, #26]
 800fb24:	429a      	cmp	r2, r3
 800fb26:	d90b      	bls.n	800fb40 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800fb28:	8b7b      	ldrh	r3, [r7, #26]
 800fb2a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800fb2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fb2e:	68ba      	ldr	r2, [r7, #8]
 800fb30:	8912      	ldrh	r2, [r2, #8]
 800fb32:	fb02 f203 	mul.w	r2, r2, r3
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	611a      	str	r2, [r3, #16]
 800fb3a:	e001      	b.n	800fb40 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	78db      	ldrb	r3, [r3, #3]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d007      	beq.n	800fb58 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800fb48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fb4a:	68ba      	ldr	r2, [r7, #8]
 800fb4c:	8912      	ldrh	r2, [r2, #8]
 800fb4e:	fb02 f203 	mul.w	r2, r2, r3
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	611a      	str	r2, [r3, #16]
 800fb56:	e003      	b.n	800fb60 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	695a      	ldr	r2, [r3, #20]
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	691b      	ldr	r3, [r3, #16]
 800fb64:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800fb68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fb6a:	04d9      	lsls	r1, r3, #19
 800fb6c:	4b63      	ldr	r3, [pc, #396]	; (800fcfc <USB_HC_StartXfer+0x280>)
 800fb6e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800fb70:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	7a9b      	ldrb	r3, [r3, #10]
 800fb76:	075b      	lsls	r3, r3, #29
 800fb78:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800fb7c:	69f9      	ldr	r1, [r7, #28]
 800fb7e:	0148      	lsls	r0, r1, #5
 800fb80:	6a39      	ldr	r1, [r7, #32]
 800fb82:	4401      	add	r1, r0
 800fb84:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800fb88:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800fb8a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800fb8c:	79fb      	ldrb	r3, [r7, #7]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d009      	beq.n	800fba6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	68d9      	ldr	r1, [r3, #12]
 800fb96:	69fb      	ldr	r3, [r7, #28]
 800fb98:	015a      	lsls	r2, r3, #5
 800fb9a:	6a3b      	ldr	r3, [r7, #32]
 800fb9c:	4413      	add	r3, r2
 800fb9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fba2:	460a      	mov	r2, r1
 800fba4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800fba6:	6a3b      	ldr	r3, [r7, #32]
 800fba8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fbac:	689b      	ldr	r3, [r3, #8]
 800fbae:	f003 0301 	and.w	r3, r3, #1
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	bf0c      	ite	eq
 800fbb6:	2301      	moveq	r3, #1
 800fbb8:	2300      	movne	r3, #0
 800fbba:	b2db      	uxtb	r3, r3
 800fbbc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800fbbe:	69fb      	ldr	r3, [r7, #28]
 800fbc0:	015a      	lsls	r2, r3, #5
 800fbc2:	6a3b      	ldr	r3, [r7, #32]
 800fbc4:	4413      	add	r3, r2
 800fbc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	69fa      	ldr	r2, [r7, #28]
 800fbce:	0151      	lsls	r1, r2, #5
 800fbd0:	6a3a      	ldr	r2, [r7, #32]
 800fbd2:	440a      	add	r2, r1
 800fbd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fbd8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fbdc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800fbde:	69fb      	ldr	r3, [r7, #28]
 800fbe0:	015a      	lsls	r2, r3, #5
 800fbe2:	6a3b      	ldr	r3, [r7, #32]
 800fbe4:	4413      	add	r3, r2
 800fbe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fbea:	681a      	ldr	r2, [r3, #0]
 800fbec:	7e7b      	ldrb	r3, [r7, #25]
 800fbee:	075b      	lsls	r3, r3, #29
 800fbf0:	69f9      	ldr	r1, [r7, #28]
 800fbf2:	0148      	lsls	r0, r1, #5
 800fbf4:	6a39      	ldr	r1, [r7, #32]
 800fbf6:	4401      	add	r1, r0
 800fbf8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800fc00:	69fb      	ldr	r3, [r7, #28]
 800fc02:	015a      	lsls	r2, r3, #5
 800fc04:	6a3b      	ldr	r3, [r7, #32]
 800fc06:	4413      	add	r3, r2
 800fc08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800fc10:	693b      	ldr	r3, [r7, #16]
 800fc12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fc16:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	78db      	ldrb	r3, [r3, #3]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d004      	beq.n	800fc2a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc26:	613b      	str	r3, [r7, #16]
 800fc28:	e003      	b.n	800fc32 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800fc2a:	693b      	ldr	r3, [r7, #16]
 800fc2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fc30:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800fc32:	693b      	ldr	r3, [r7, #16]
 800fc34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fc38:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800fc3a:	69fb      	ldr	r3, [r7, #28]
 800fc3c:	015a      	lsls	r2, r3, #5
 800fc3e:	6a3b      	ldr	r3, [r7, #32]
 800fc40:	4413      	add	r3, r2
 800fc42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc46:	461a      	mov	r2, r3
 800fc48:	693b      	ldr	r3, [r7, #16]
 800fc4a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800fc4c:	79fb      	ldrb	r3, [r7, #7]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d001      	beq.n	800fc56 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800fc52:	2300      	movs	r3, #0
 800fc54:	e04e      	b.n	800fcf4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	78db      	ldrb	r3, [r3, #3]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d149      	bne.n	800fcf2 <USB_HC_StartXfer+0x276>
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	695b      	ldr	r3, [r3, #20]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d045      	beq.n	800fcf2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	79db      	ldrb	r3, [r3, #7]
 800fc6a:	2b03      	cmp	r3, #3
 800fc6c:	d830      	bhi.n	800fcd0 <USB_HC_StartXfer+0x254>
 800fc6e:	a201      	add	r2, pc, #4	; (adr r2, 800fc74 <USB_HC_StartXfer+0x1f8>)
 800fc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc74:	0800fc85 	.word	0x0800fc85
 800fc78:	0800fca9 	.word	0x0800fca9
 800fc7c:	0800fc85 	.word	0x0800fc85
 800fc80:	0800fca9 	.word	0x0800fca9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	695b      	ldr	r3, [r3, #20]
 800fc88:	3303      	adds	r3, #3
 800fc8a:	089b      	lsrs	r3, r3, #2
 800fc8c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800fc8e:	8afa      	ldrh	r2, [r7, #22]
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc94:	b29b      	uxth	r3, r3
 800fc96:	429a      	cmp	r2, r3
 800fc98:	d91c      	bls.n	800fcd4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	699b      	ldr	r3, [r3, #24]
 800fc9e:	f043 0220 	orr.w	r2, r3, #32
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	619a      	str	r2, [r3, #24]
        }
        break;
 800fca6:	e015      	b.n	800fcd4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	695b      	ldr	r3, [r3, #20]
 800fcac:	3303      	adds	r3, #3
 800fcae:	089b      	lsrs	r3, r3, #2
 800fcb0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800fcb2:	8afa      	ldrh	r2, [r7, #22]
 800fcb4:	6a3b      	ldr	r3, [r7, #32]
 800fcb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fcba:	691b      	ldr	r3, [r3, #16]
 800fcbc:	b29b      	uxth	r3, r3
 800fcbe:	429a      	cmp	r2, r3
 800fcc0:	d90a      	bls.n	800fcd8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	699b      	ldr	r3, [r3, #24]
 800fcc6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	619a      	str	r2, [r3, #24]
        }
        break;
 800fcce:	e003      	b.n	800fcd8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800fcd0:	bf00      	nop
 800fcd2:	e002      	b.n	800fcda <USB_HC_StartXfer+0x25e>
        break;
 800fcd4:	bf00      	nop
 800fcd6:	e000      	b.n	800fcda <USB_HC_StartXfer+0x25e>
        break;
 800fcd8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	68d9      	ldr	r1, [r3, #12]
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	785a      	ldrb	r2, [r3, #1]
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	695b      	ldr	r3, [r3, #20]
 800fce6:	b29b      	uxth	r3, r3
 800fce8:	2000      	movs	r0, #0
 800fcea:	9000      	str	r0, [sp, #0]
 800fcec:	68f8      	ldr	r0, [r7, #12]
 800fcee:	f7ff fc83 	bl	800f5f8 <USB_WritePacket>
  }

  return HAL_OK;
 800fcf2:	2300      	movs	r3, #0
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3728      	adds	r7, #40	; 0x28
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}
 800fcfc:	1ff80000 	.word	0x1ff80000

0800fd00 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fd00:	b480      	push	{r7}
 800fd02:	b085      	sub	sp, #20
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fd12:	695b      	ldr	r3, [r3, #20]
 800fd14:	b29b      	uxth	r3, r3
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3714      	adds	r7, #20
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd20:	4770      	bx	lr

0800fd22 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800fd22:	b480      	push	{r7}
 800fd24:	b089      	sub	sp, #36	; 0x24
 800fd26:	af00      	add	r7, sp, #0
 800fd28:	6078      	str	r0, [r7, #4]
 800fd2a:	460b      	mov	r3, r1
 800fd2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800fd32:	78fb      	ldrb	r3, [r7, #3]
 800fd34:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800fd36:	2300      	movs	r3, #0
 800fd38:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	015a      	lsls	r2, r3, #5
 800fd3e:	69bb      	ldr	r3, [r7, #24]
 800fd40:	4413      	add	r3, r2
 800fd42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	0c9b      	lsrs	r3, r3, #18
 800fd4a:	f003 0303 	and.w	r3, r3, #3
 800fd4e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800fd50:	697b      	ldr	r3, [r7, #20]
 800fd52:	015a      	lsls	r2, r3, #5
 800fd54:	69bb      	ldr	r3, [r7, #24]
 800fd56:	4413      	add	r3, r2
 800fd58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	0fdb      	lsrs	r3, r3, #31
 800fd60:	f003 0301 	and.w	r3, r3, #1
 800fd64:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	689b      	ldr	r3, [r3, #8]
 800fd6a:	f003 0320 	and.w	r3, r3, #32
 800fd6e:	2b20      	cmp	r3, #32
 800fd70:	d104      	bne.n	800fd7c <USB_HC_Halt+0x5a>
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d101      	bne.n	800fd7c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800fd78:	2300      	movs	r3, #0
 800fd7a:	e0e8      	b.n	800ff4e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800fd7c:	693b      	ldr	r3, [r7, #16]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d002      	beq.n	800fd88 <USB_HC_Halt+0x66>
 800fd82:	693b      	ldr	r3, [r7, #16]
 800fd84:	2b02      	cmp	r3, #2
 800fd86:	d173      	bne.n	800fe70 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	015a      	lsls	r2, r3, #5
 800fd8c:	69bb      	ldr	r3, [r7, #24]
 800fd8e:	4413      	add	r3, r2
 800fd90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	697a      	ldr	r2, [r7, #20]
 800fd98:	0151      	lsls	r1, r2, #5
 800fd9a:	69ba      	ldr	r2, [r7, #24]
 800fd9c:	440a      	add	r2, r1
 800fd9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fda2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fda6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	689b      	ldr	r3, [r3, #8]
 800fdac:	f003 0320 	and.w	r3, r3, #32
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	f040 80cb 	bne.w	800ff4c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d143      	bne.n	800fe4a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	015a      	lsls	r2, r3, #5
 800fdc6:	69bb      	ldr	r3, [r7, #24]
 800fdc8:	4413      	add	r3, r2
 800fdca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	697a      	ldr	r2, [r7, #20]
 800fdd2:	0151      	lsls	r1, r2, #5
 800fdd4:	69ba      	ldr	r2, [r7, #24]
 800fdd6:	440a      	add	r2, r1
 800fdd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fde0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	015a      	lsls	r2, r3, #5
 800fde6:	69bb      	ldr	r3, [r7, #24]
 800fde8:	4413      	add	r3, r2
 800fdea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	697a      	ldr	r2, [r7, #20]
 800fdf2:	0151      	lsls	r1, r2, #5
 800fdf4:	69ba      	ldr	r2, [r7, #24]
 800fdf6:	440a      	add	r2, r1
 800fdf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fdfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fe00:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	015a      	lsls	r2, r3, #5
 800fe06:	69bb      	ldr	r3, [r7, #24]
 800fe08:	4413      	add	r3, r2
 800fe0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	697a      	ldr	r2, [r7, #20]
 800fe12:	0151      	lsls	r1, r2, #5
 800fe14:	69ba      	ldr	r2, [r7, #24]
 800fe16:	440a      	add	r2, r1
 800fe18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fe1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fe20:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800fe22:	69fb      	ldr	r3, [r7, #28]
 800fe24:	3301      	adds	r3, #1
 800fe26:	61fb      	str	r3, [r7, #28]
 800fe28:	69fb      	ldr	r3, [r7, #28]
 800fe2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fe2e:	d81d      	bhi.n	800fe6c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	015a      	lsls	r2, r3, #5
 800fe34:	69bb      	ldr	r3, [r7, #24]
 800fe36:	4413      	add	r3, r2
 800fe38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fe42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe46:	d0ec      	beq.n	800fe22 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800fe48:	e080      	b.n	800ff4c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	015a      	lsls	r2, r3, #5
 800fe4e:	69bb      	ldr	r3, [r7, #24]
 800fe50:	4413      	add	r3, r2
 800fe52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	697a      	ldr	r2, [r7, #20]
 800fe5a:	0151      	lsls	r1, r2, #5
 800fe5c:	69ba      	ldr	r2, [r7, #24]
 800fe5e:	440a      	add	r2, r1
 800fe60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fe64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fe68:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800fe6a:	e06f      	b.n	800ff4c <USB_HC_Halt+0x22a>
            break;
 800fe6c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800fe6e:	e06d      	b.n	800ff4c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800fe70:	697b      	ldr	r3, [r7, #20]
 800fe72:	015a      	lsls	r2, r3, #5
 800fe74:	69bb      	ldr	r3, [r7, #24]
 800fe76:	4413      	add	r3, r2
 800fe78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	697a      	ldr	r2, [r7, #20]
 800fe80:	0151      	lsls	r1, r2, #5
 800fe82:	69ba      	ldr	r2, [r7, #24]
 800fe84:	440a      	add	r2, r1
 800fe86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fe8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe8e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800fe90:	69bb      	ldr	r3, [r7, #24]
 800fe92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fe96:	691b      	ldr	r3, [r3, #16]
 800fe98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d143      	bne.n	800ff28 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	015a      	lsls	r2, r3, #5
 800fea4:	69bb      	ldr	r3, [r7, #24]
 800fea6:	4413      	add	r3, r2
 800fea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	697a      	ldr	r2, [r7, #20]
 800feb0:	0151      	lsls	r1, r2, #5
 800feb2:	69ba      	ldr	r2, [r7, #24]
 800feb4:	440a      	add	r2, r1
 800feb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800feba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800febe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	015a      	lsls	r2, r3, #5
 800fec4:	69bb      	ldr	r3, [r7, #24]
 800fec6:	4413      	add	r3, r2
 800fec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	697a      	ldr	r2, [r7, #20]
 800fed0:	0151      	lsls	r1, r2, #5
 800fed2:	69ba      	ldr	r2, [r7, #24]
 800fed4:	440a      	add	r2, r1
 800fed6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800feda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fede:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800fee0:	697b      	ldr	r3, [r7, #20]
 800fee2:	015a      	lsls	r2, r3, #5
 800fee4:	69bb      	ldr	r3, [r7, #24]
 800fee6:	4413      	add	r3, r2
 800fee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	697a      	ldr	r2, [r7, #20]
 800fef0:	0151      	lsls	r1, r2, #5
 800fef2:	69ba      	ldr	r2, [r7, #24]
 800fef4:	440a      	add	r2, r1
 800fef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fefa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fefe:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800ff00:	69fb      	ldr	r3, [r7, #28]
 800ff02:	3301      	adds	r3, #1
 800ff04:	61fb      	str	r3, [r7, #28]
 800ff06:	69fb      	ldr	r3, [r7, #28]
 800ff08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ff0c:	d81d      	bhi.n	800ff4a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	015a      	lsls	r2, r3, #5
 800ff12:	69bb      	ldr	r3, [r7, #24]
 800ff14:	4413      	add	r3, r2
 800ff16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ff24:	d0ec      	beq.n	800ff00 <USB_HC_Halt+0x1de>
 800ff26:	e011      	b.n	800ff4c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	015a      	lsls	r2, r3, #5
 800ff2c:	69bb      	ldr	r3, [r7, #24]
 800ff2e:	4413      	add	r3, r2
 800ff30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	697a      	ldr	r2, [r7, #20]
 800ff38:	0151      	lsls	r1, r2, #5
 800ff3a:	69ba      	ldr	r2, [r7, #24]
 800ff3c:	440a      	add	r2, r1
 800ff3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ff42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ff46:	6013      	str	r3, [r2, #0]
 800ff48:	e000      	b.n	800ff4c <USB_HC_Halt+0x22a>
          break;
 800ff4a:	bf00      	nop
    }
  }

  return HAL_OK;
 800ff4c:	2300      	movs	r3, #0
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	3724      	adds	r7, #36	; 0x24
 800ff52:	46bd      	mov	sp, r7
 800ff54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff58:	4770      	bx	lr
	...

0800ff5c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	b087      	sub	sp, #28
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
 800ff64:	460b      	mov	r3, r1
 800ff66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ff6c:	78fb      	ldrb	r3, [r7, #3]
 800ff6e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ff70:	2301      	movs	r3, #1
 800ff72:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	04da      	lsls	r2, r3, #19
 800ff78:	4b15      	ldr	r3, [pc, #84]	; (800ffd0 <USB_DoPing+0x74>)
 800ff7a:	4013      	ands	r3, r2
 800ff7c:	693a      	ldr	r2, [r7, #16]
 800ff7e:	0151      	lsls	r1, r2, #5
 800ff80:	697a      	ldr	r2, [r7, #20]
 800ff82:	440a      	add	r2, r1
 800ff84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ff88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ff8c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	015a      	lsls	r2, r3, #5
 800ff92:	697b      	ldr	r3, [r7, #20]
 800ff94:	4413      	add	r3, r2
 800ff96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ffa4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ffac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ffae:	693b      	ldr	r3, [r7, #16]
 800ffb0:	015a      	lsls	r2, r3, #5
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	4413      	add	r3, r2
 800ffb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ffba:	461a      	mov	r2, r3
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ffc0:	2300      	movs	r3, #0
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	371c      	adds	r7, #28
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffcc:	4770      	bx	lr
 800ffce:	bf00      	nop
 800ffd0:	1ff80000 	.word	0x1ff80000

0800ffd4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b086      	sub	sp, #24
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f7ff faae 	bl	800f546 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800ffea:	2110      	movs	r1, #16
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f7ff fabb 	bl	800f568 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f7ff fade 	bl	800f5b4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800fff8:	2300      	movs	r3, #0
 800fffa:	613b      	str	r3, [r7, #16]
 800fffc:	e01f      	b.n	801003e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	015a      	lsls	r2, r3, #5
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	4413      	add	r3, r2
 8010006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010014:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801001c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801001e:	68bb      	ldr	r3, [r7, #8]
 8010020:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010024:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	015a      	lsls	r2, r3, #5
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	4413      	add	r3, r2
 801002e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010032:	461a      	mov	r2, r3
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8010038:	693b      	ldr	r3, [r7, #16]
 801003a:	3301      	adds	r3, #1
 801003c:	613b      	str	r3, [r7, #16]
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	2b0f      	cmp	r3, #15
 8010042:	d9dc      	bls.n	800fffe <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8010044:	2300      	movs	r3, #0
 8010046:	613b      	str	r3, [r7, #16]
 8010048:	e034      	b.n	80100b4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	015a      	lsls	r2, r3, #5
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	4413      	add	r3, r2
 8010052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010060:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010068:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010070:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8010072:	693b      	ldr	r3, [r7, #16]
 8010074:	015a      	lsls	r2, r3, #5
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	4413      	add	r3, r2
 801007a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801007e:	461a      	mov	r2, r3
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8010084:	697b      	ldr	r3, [r7, #20]
 8010086:	3301      	adds	r3, #1
 8010088:	617b      	str	r3, [r7, #20]
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010090:	d80c      	bhi.n	80100ac <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010092:	693b      	ldr	r3, [r7, #16]
 8010094:	015a      	lsls	r2, r3, #5
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	4413      	add	r3, r2
 801009a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80100a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80100a8:	d0ec      	beq.n	8010084 <USB_StopHost+0xb0>
 80100aa:	e000      	b.n	80100ae <USB_StopHost+0xda>
        break;
 80100ac:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80100ae:	693b      	ldr	r3, [r7, #16]
 80100b0:	3301      	adds	r3, #1
 80100b2:	613b      	str	r3, [r7, #16]
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	2b0f      	cmp	r3, #15
 80100b8:	d9c7      	bls.n	801004a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80100c0:	461a      	mov	r2, r3
 80100c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80100c6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80100ce:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	f7ff fa27 	bl	800f524 <USB_EnableGlobalInt>

  return HAL_OK;
 80100d6:	2300      	movs	r3, #0
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3718      	adds	r7, #24
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}

080100e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80100e4:	4904      	ldr	r1, [pc, #16]	; (80100f8 <MX_FATFS_Init+0x18>)
 80100e6:	4805      	ldr	r0, [pc, #20]	; (80100fc <MX_FATFS_Init+0x1c>)
 80100e8:	f001 fbf2 	bl	80118d0 <FATFS_LinkDriver>
 80100ec:	4603      	mov	r3, r0
 80100ee:	461a      	mov	r2, r3
 80100f0:	4b03      	ldr	r3, [pc, #12]	; (8010100 <MX_FATFS_Init+0x20>)
 80100f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80100f4:	bf00      	nop
 80100f6:	bd80      	pop	{r7, pc}
 80100f8:	20040864 	.word	0x20040864
 80100fc:	08016bd8 	.word	0x08016bd8
 8010100:	20040860 	.word	0x20040860

08010104 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801010a:	2300      	movs	r3, #0
 801010c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801010e:	f000 f879 	bl	8010204 <BSP_SD_IsDetected>
 8010112:	4603      	mov	r3, r0
 8010114:	2b01      	cmp	r3, #1
 8010116:	d001      	beq.n	801011c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010118:	2302      	movs	r3, #2
 801011a:	e012      	b.n	8010142 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 801011c:	480b      	ldr	r0, [pc, #44]	; (801014c <BSP_SD_Init+0x48>)
 801011e:	f7fb fae9 	bl	800b6f4 <HAL_SD_Init>
 8010122:	4603      	mov	r3, r0
 8010124:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010126:	79fb      	ldrb	r3, [r7, #7]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d109      	bne.n	8010140 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801012c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010130:	4806      	ldr	r0, [pc, #24]	; (801014c <BSP_SD_Init+0x48>)
 8010132:	f7fc f8c9 	bl	800c2c8 <HAL_SD_ConfigWideBusOperation>
 8010136:	4603      	mov	r3, r0
 8010138:	2b00      	cmp	r3, #0
 801013a:	d001      	beq.n	8010140 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801013c:	2301      	movs	r3, #1
 801013e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010140:	79fb      	ldrb	r3, [r7, #7]
}
 8010142:	4618      	mov	r0, r3
 8010144:	3708      	adds	r7, #8
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}
 801014a:	bf00      	nop
 801014c:	20000684 	.word	0x20000684

08010150 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b088      	sub	sp, #32
 8010154:	af02      	add	r7, sp, #8
 8010156:	60f8      	str	r0, [r7, #12]
 8010158:	60b9      	str	r1, [r7, #8]
 801015a:	607a      	str	r2, [r7, #4]
 801015c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801015e:	2300      	movs	r3, #0
 8010160:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	9300      	str	r3, [sp, #0]
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	68ba      	ldr	r2, [r7, #8]
 801016a:	68f9      	ldr	r1, [r7, #12]
 801016c:	4806      	ldr	r0, [pc, #24]	; (8010188 <BSP_SD_ReadBlocks+0x38>)
 801016e:	f7fb fb77 	bl	800b860 <HAL_SD_ReadBlocks>
 8010172:	4603      	mov	r3, r0
 8010174:	2b00      	cmp	r3, #0
 8010176:	d001      	beq.n	801017c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010178:	2301      	movs	r3, #1
 801017a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801017c:	7dfb      	ldrb	r3, [r7, #23]
}
 801017e:	4618      	mov	r0, r3
 8010180:	3718      	adds	r7, #24
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}
 8010186:	bf00      	nop
 8010188:	20000684 	.word	0x20000684

0801018c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b088      	sub	sp, #32
 8010190:	af02      	add	r7, sp, #8
 8010192:	60f8      	str	r0, [r7, #12]
 8010194:	60b9      	str	r1, [r7, #8]
 8010196:	607a      	str	r2, [r7, #4]
 8010198:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801019a:	2300      	movs	r3, #0
 801019c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	9300      	str	r3, [sp, #0]
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	68ba      	ldr	r2, [r7, #8]
 80101a6:	68f9      	ldr	r1, [r7, #12]
 80101a8:	4806      	ldr	r0, [pc, #24]	; (80101c4 <BSP_SD_WriteBlocks+0x38>)
 80101aa:	f7fb fd37 	bl	800bc1c <HAL_SD_WriteBlocks>
 80101ae:	4603      	mov	r3, r0
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d001      	beq.n	80101b8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80101b4:	2301      	movs	r3, #1
 80101b6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80101b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3718      	adds	r7, #24
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
 80101c2:	bf00      	nop
 80101c4:	20000684 	.word	0x20000684

080101c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80101cc:	4805      	ldr	r0, [pc, #20]	; (80101e4 <BSP_SD_GetCardState+0x1c>)
 80101ce:	f7fc f915 	bl	800c3fc <HAL_SD_GetCardState>
 80101d2:	4603      	mov	r3, r0
 80101d4:	2b04      	cmp	r3, #4
 80101d6:	bf14      	ite	ne
 80101d8:	2301      	movne	r3, #1
 80101da:	2300      	moveq	r3, #0
 80101dc:	b2db      	uxtb	r3, r3
}
 80101de:	4618      	mov	r0, r3
 80101e0:	bd80      	pop	{r7, pc}
 80101e2:	bf00      	nop
 80101e4:	20000684 	.word	0x20000684

080101e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80101f0:	6879      	ldr	r1, [r7, #4]
 80101f2:	4803      	ldr	r0, [pc, #12]	; (8010200 <BSP_SD_GetCardInfo+0x18>)
 80101f4:	f7fc f83c 	bl	800c270 <HAL_SD_GetCardInfo>
}
 80101f8:	bf00      	nop
 80101fa:	3708      	adds	r7, #8
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}
 8010200:	20000684 	.word	0x20000684

08010204 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b082      	sub	sp, #8
 8010208:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801020a:	2301      	movs	r3, #1
 801020c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801020e:	f000 f80b 	bl	8010228 <BSP_PlatformIsDetected>
 8010212:	4603      	mov	r3, r0
 8010214:	2b00      	cmp	r3, #0
 8010216:	d101      	bne.n	801021c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010218:	2300      	movs	r3, #0
 801021a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801021c:	79fb      	ldrb	r3, [r7, #7]
 801021e:	b2db      	uxtb	r3, r3
}
 8010220:	4618      	mov	r0, r3
 8010222:	3708      	adds	r7, #8
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}

08010228 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010228:	b580      	push	{r7, lr}
 801022a:	b082      	sub	sp, #8
 801022c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801022e:	2301      	movs	r3, #1
 8010230:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010232:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010236:	4806      	ldr	r0, [pc, #24]	; (8010250 <BSP_PlatformIsDetected+0x28>)
 8010238:	f7f5 fe8c 	bl	8005f54 <HAL_GPIO_ReadPin>
 801023c:	4603      	mov	r3, r0
 801023e:	2b00      	cmp	r3, #0
 8010240:	d001      	beq.n	8010246 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010242:	2300      	movs	r3, #0
 8010244:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010246:	79fb      	ldrb	r3, [r7, #7]
}
 8010248:	4618      	mov	r0, r3
 801024a:	3708      	adds	r7, #8
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	40020800 	.word	0x40020800

08010254 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b082      	sub	sp, #8
 8010258:	af00      	add	r7, sp, #0
 801025a:	4603      	mov	r3, r0
 801025c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801025e:	4b0b      	ldr	r3, [pc, #44]	; (801028c <SD_CheckStatus+0x38>)
 8010260:	2201      	movs	r2, #1
 8010262:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010264:	f7ff ffb0 	bl	80101c8 <BSP_SD_GetCardState>
 8010268:	4603      	mov	r3, r0
 801026a:	2b00      	cmp	r3, #0
 801026c:	d107      	bne.n	801027e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801026e:	4b07      	ldr	r3, [pc, #28]	; (801028c <SD_CheckStatus+0x38>)
 8010270:	781b      	ldrb	r3, [r3, #0]
 8010272:	b2db      	uxtb	r3, r3
 8010274:	f023 0301 	bic.w	r3, r3, #1
 8010278:	b2da      	uxtb	r2, r3
 801027a:	4b04      	ldr	r3, [pc, #16]	; (801028c <SD_CheckStatus+0x38>)
 801027c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801027e:	4b03      	ldr	r3, [pc, #12]	; (801028c <SD_CheckStatus+0x38>)
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	b2db      	uxtb	r3, r3
}
 8010284:	4618      	mov	r0, r3
 8010286:	3708      	adds	r7, #8
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}
 801028c:	20000015 	.word	0x20000015

08010290 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	af00      	add	r7, sp, #0
 8010296:	4603      	mov	r3, r0
 8010298:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801029a:	4b0b      	ldr	r3, [pc, #44]	; (80102c8 <SD_initialize+0x38>)
 801029c:	2201      	movs	r2, #1
 801029e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80102a0:	f7ff ff30 	bl	8010104 <BSP_SD_Init>
 80102a4:	4603      	mov	r3, r0
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d107      	bne.n	80102ba <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80102aa:	79fb      	ldrb	r3, [r7, #7]
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7ff ffd1 	bl	8010254 <SD_CheckStatus>
 80102b2:	4603      	mov	r3, r0
 80102b4:	461a      	mov	r2, r3
 80102b6:	4b04      	ldr	r3, [pc, #16]	; (80102c8 <SD_initialize+0x38>)
 80102b8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80102ba:	4b03      	ldr	r3, [pc, #12]	; (80102c8 <SD_initialize+0x38>)
 80102bc:	781b      	ldrb	r3, [r3, #0]
 80102be:	b2db      	uxtb	r3, r3
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	3708      	adds	r7, #8
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}
 80102c8:	20000015 	.word	0x20000015

080102cc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b082      	sub	sp, #8
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	4603      	mov	r3, r0
 80102d4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80102d6:	79fb      	ldrb	r3, [r7, #7]
 80102d8:	4618      	mov	r0, r3
 80102da:	f7ff ffbb 	bl	8010254 <SD_CheckStatus>
 80102de:	4603      	mov	r3, r0
}
 80102e0:	4618      	mov	r0, r3
 80102e2:	3708      	adds	r7, #8
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}

080102e8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b086      	sub	sp, #24
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	60b9      	str	r1, [r7, #8]
 80102f0:	607a      	str	r2, [r7, #4]
 80102f2:	603b      	str	r3, [r7, #0]
 80102f4:	4603      	mov	r3, r0
 80102f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80102f8:	2301      	movs	r3, #1
 80102fa:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80102fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010300:	683a      	ldr	r2, [r7, #0]
 8010302:	6879      	ldr	r1, [r7, #4]
 8010304:	68b8      	ldr	r0, [r7, #8]
 8010306:	f7ff ff23 	bl	8010150 <BSP_SD_ReadBlocks>
 801030a:	4603      	mov	r3, r0
 801030c:	2b00      	cmp	r3, #0
 801030e:	d107      	bne.n	8010320 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010310:	bf00      	nop
 8010312:	f7ff ff59 	bl	80101c8 <BSP_SD_GetCardState>
 8010316:	4603      	mov	r3, r0
 8010318:	2b00      	cmp	r3, #0
 801031a:	d1fa      	bne.n	8010312 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 801031c:	2300      	movs	r3, #0
 801031e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010320:	7dfb      	ldrb	r3, [r7, #23]
}
 8010322:	4618      	mov	r0, r3
 8010324:	3718      	adds	r7, #24
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}

0801032a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801032a:	b580      	push	{r7, lr}
 801032c:	b086      	sub	sp, #24
 801032e:	af00      	add	r7, sp, #0
 8010330:	60b9      	str	r1, [r7, #8]
 8010332:	607a      	str	r2, [r7, #4]
 8010334:	603b      	str	r3, [r7, #0]
 8010336:	4603      	mov	r3, r0
 8010338:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801033a:	2301      	movs	r3, #1
 801033c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 801033e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010342:	683a      	ldr	r2, [r7, #0]
 8010344:	6879      	ldr	r1, [r7, #4]
 8010346:	68b8      	ldr	r0, [r7, #8]
 8010348:	f7ff ff20 	bl	801018c <BSP_SD_WriteBlocks>
 801034c:	4603      	mov	r3, r0
 801034e:	2b00      	cmp	r3, #0
 8010350:	d107      	bne.n	8010362 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8010352:	bf00      	nop
 8010354:	f7ff ff38 	bl	80101c8 <BSP_SD_GetCardState>
 8010358:	4603      	mov	r3, r0
 801035a:	2b00      	cmp	r3, #0
 801035c:	d1fa      	bne.n	8010354 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 801035e:	2300      	movs	r3, #0
 8010360:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010362:	7dfb      	ldrb	r3, [r7, #23]
}
 8010364:	4618      	mov	r0, r3
 8010366:	3718      	adds	r7, #24
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}

0801036c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b08c      	sub	sp, #48	; 0x30
 8010370:	af00      	add	r7, sp, #0
 8010372:	4603      	mov	r3, r0
 8010374:	603a      	str	r2, [r7, #0]
 8010376:	71fb      	strb	r3, [r7, #7]
 8010378:	460b      	mov	r3, r1
 801037a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801037c:	2301      	movs	r3, #1
 801037e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010382:	4b25      	ldr	r3, [pc, #148]	; (8010418 <SD_ioctl+0xac>)
 8010384:	781b      	ldrb	r3, [r3, #0]
 8010386:	b2db      	uxtb	r3, r3
 8010388:	f003 0301 	and.w	r3, r3, #1
 801038c:	2b00      	cmp	r3, #0
 801038e:	d001      	beq.n	8010394 <SD_ioctl+0x28>
 8010390:	2303      	movs	r3, #3
 8010392:	e03c      	b.n	801040e <SD_ioctl+0xa2>

  switch (cmd)
 8010394:	79bb      	ldrb	r3, [r7, #6]
 8010396:	2b03      	cmp	r3, #3
 8010398:	d834      	bhi.n	8010404 <SD_ioctl+0x98>
 801039a:	a201      	add	r2, pc, #4	; (adr r2, 80103a0 <SD_ioctl+0x34>)
 801039c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103a0:	080103b1 	.word	0x080103b1
 80103a4:	080103b9 	.word	0x080103b9
 80103a8:	080103d1 	.word	0x080103d1
 80103ac:	080103eb 	.word	0x080103eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80103b0:	2300      	movs	r3, #0
 80103b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80103b6:	e028      	b.n	801040a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80103b8:	f107 030c 	add.w	r3, r7, #12
 80103bc:	4618      	mov	r0, r3
 80103be:	f7ff ff13 	bl	80101e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80103c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80103c8:	2300      	movs	r3, #0
 80103ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80103ce:	e01c      	b.n	801040a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80103d0:	f107 030c 	add.w	r3, r7, #12
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7ff ff07 	bl	80101e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80103da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103dc:	b29a      	uxth	r2, r3
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80103e2:	2300      	movs	r3, #0
 80103e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80103e8:	e00f      	b.n	801040a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80103ea:	f107 030c 	add.w	r3, r7, #12
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7ff fefa 	bl	80101e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80103f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103f6:	0a5a      	lsrs	r2, r3, #9
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80103fc:	2300      	movs	r3, #0
 80103fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010402:	e002      	b.n	801040a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010404:	2304      	movs	r3, #4
 8010406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801040a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801040e:	4618      	mov	r0, r3
 8010410:	3730      	adds	r7, #48	; 0x30
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}
 8010416:	bf00      	nop
 8010418:	20000015 	.word	0x20000015

0801041c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 801041c:	b480      	push	{r7}
 801041e:	b085      	sub	sp, #20
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8010424:	2300      	movs	r3, #0
 8010426:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010428:	2300      	movs	r3, #0
 801042a:	60fb      	str	r3, [r7, #12]
 801042c:	e009      	b.n	8010442 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 801042e:	687a      	ldr	r2, [r7, #4]
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	33e0      	adds	r3, #224	; 0xe0
 8010434:	009b      	lsls	r3, r3, #2
 8010436:	4413      	add	r3, r2
 8010438:	2200      	movs	r2, #0
 801043a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	3301      	adds	r3, #1
 8010440:	60fb      	str	r3, [r7, #12]
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2b0e      	cmp	r3, #14
 8010446:	d9f2      	bls.n	801042e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010448:	2300      	movs	r3, #0
 801044a:	60fb      	str	r3, [r7, #12]
 801044c:	e009      	b.n	8010462 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 801044e:	687a      	ldr	r2, [r7, #4]
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	4413      	add	r3, r2
 8010454:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010458:	2200      	movs	r2, #0
 801045a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	3301      	adds	r3, #1
 8010460:	60fb      	str	r3, [r7, #12]
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010468:	d3f1      	bcc.n	801044e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2200      	movs	r2, #0
 801046e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2200      	movs	r2, #0
 8010474:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2201      	movs	r2, #1
 801047a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2200      	movs	r2, #0
 8010480:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2201      	movs	r2, #1
 8010488:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	2240      	movs	r2, #64	; 0x40
 801048e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2200      	movs	r2, #0
 8010494:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2200      	movs	r2, #0
 801049a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2201      	movs	r2, #1
 80104a2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2200      	movs	r2, #0
 80104aa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2200      	movs	r2, #0
 80104b2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80104b6:	2300      	movs	r3, #0
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3714      	adds	r7, #20
 80104bc:	46bd      	mov	sp, r7
 80104be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c2:	4770      	bx	lr

080104c4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b082      	sub	sp, #8
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f001 fc8d 	bl	8011dec <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80104d2:	2101      	movs	r1, #1
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f001 fd74 	bl	8011fc2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80104da:	2300      	movs	r3, #0
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3708      	adds	r7, #8
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}

080104e4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b088      	sub	sp, #32
 80104e8:	af04      	add	r7, sp, #16
 80104ea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80104ec:	2302      	movs	r3, #2
 80104ee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80104f0:	2300      	movs	r3, #0
 80104f2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80104fa:	b2db      	uxtb	r3, r3
 80104fc:	2b01      	cmp	r3, #1
 80104fe:	d102      	bne.n	8010506 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2203      	movs	r2, #3
 8010504:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	781b      	ldrb	r3, [r3, #0]
 801050a:	b2db      	uxtb	r3, r3
 801050c:	2b0b      	cmp	r3, #11
 801050e:	f200 81b3 	bhi.w	8010878 <USBH_Process+0x394>
 8010512:	a201      	add	r2, pc, #4	; (adr r2, 8010518 <USBH_Process+0x34>)
 8010514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010518:	08010549 	.word	0x08010549
 801051c:	0801057b 	.word	0x0801057b
 8010520:	080105e3 	.word	0x080105e3
 8010524:	08010813 	.word	0x08010813
 8010528:	08010879 	.word	0x08010879
 801052c:	08010687 	.word	0x08010687
 8010530:	080107b9 	.word	0x080107b9
 8010534:	080106bd 	.word	0x080106bd
 8010538:	080106dd 	.word	0x080106dd
 801053c:	080106fd 	.word	0x080106fd
 8010540:	0801072b 	.word	0x0801072b
 8010544:	080107fb 	.word	0x080107fb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 801054e:	b2db      	uxtb	r3, r3
 8010550:	2b00      	cmp	r3, #0
 8010552:	f000 8193 	beq.w	801087c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2201      	movs	r2, #1
 801055a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 801055c:	20c8      	movs	r0, #200	; 0xc8
 801055e:	f001 fd47 	bl	8011ff0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f001 fc9f 	bl	8011ea6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2200      	movs	r2, #0
 801056c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2200      	movs	r2, #0
 8010574:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8010578:	e180      	b.n	801087c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8010580:	2b01      	cmp	r3, #1
 8010582:	d107      	bne.n	8010594 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2200      	movs	r2, #0
 8010588:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2202      	movs	r2, #2
 8010590:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8010592:	e182      	b.n	801089a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801059a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801059e:	d914      	bls.n	80105ca <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80105a6:	3301      	adds	r3, #1
 80105a8:	b2da      	uxtb	r2, r3
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80105b6:	2b03      	cmp	r3, #3
 80105b8:	d903      	bls.n	80105c2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	220d      	movs	r2, #13
 80105be:	701a      	strb	r2, [r3, #0]
      break;
 80105c0:	e16b      	b.n	801089a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2200      	movs	r2, #0
 80105c6:	701a      	strb	r2, [r3, #0]
      break;
 80105c8:	e167      	b.n	801089a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80105d0:	f103 020a 	add.w	r2, r3, #10
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80105da:	200a      	movs	r0, #10
 80105dc:	f001 fd08 	bl	8011ff0 <USBH_Delay>
      break;
 80105e0:	e15b      	b.n	801089a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d005      	beq.n	80105f8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80105f2:	2104      	movs	r1, #4
 80105f4:	6878      	ldr	r0, [r7, #4]
 80105f6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80105f8:	2064      	movs	r0, #100	; 0x64
 80105fa:	f001 fcf9 	bl	8011ff0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80105fe:	6878      	ldr	r0, [r7, #4]
 8010600:	f001 fc2a 	bl	8011e58 <USBH_LL_GetSpeed>
 8010604:	4603      	mov	r3, r0
 8010606:	461a      	mov	r2, r3
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	2205      	movs	r2, #5
 8010612:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8010614:	2100      	movs	r1, #0
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f001 f8aa 	bl	8011770 <USBH_AllocPipe>
 801061c:	4603      	mov	r3, r0
 801061e:	461a      	mov	r2, r3
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8010624:	2180      	movs	r1, #128	; 0x80
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f001 f8a2 	bl	8011770 <USBH_AllocPipe>
 801062c:	4603      	mov	r3, r0
 801062e:	461a      	mov	r2, r3
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	7919      	ldrb	r1, [r3, #4]
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8010644:	687a      	ldr	r2, [r7, #4]
 8010646:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8010648:	b292      	uxth	r2, r2
 801064a:	9202      	str	r2, [sp, #8]
 801064c:	2200      	movs	r2, #0
 801064e:	9201      	str	r2, [sp, #4]
 8010650:	9300      	str	r3, [sp, #0]
 8010652:	4603      	mov	r3, r0
 8010654:	2280      	movs	r2, #128	; 0x80
 8010656:	6878      	ldr	r0, [r7, #4]
 8010658:	f001 f86b 	bl	8011732 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	7959      	ldrb	r1, [r3, #5]
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801066c:	687a      	ldr	r2, [r7, #4]
 801066e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8010670:	b292      	uxth	r2, r2
 8010672:	9202      	str	r2, [sp, #8]
 8010674:	2200      	movs	r2, #0
 8010676:	9201      	str	r2, [sp, #4]
 8010678:	9300      	str	r3, [sp, #0]
 801067a:	4603      	mov	r3, r0
 801067c:	2200      	movs	r2, #0
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	f001 f857 	bl	8011732 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8010684:	e109      	b.n	801089a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f000 f90c 	bl	80108a4 <USBH_HandleEnum>
 801068c:	4603      	mov	r3, r0
 801068e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8010690:	7bbb      	ldrb	r3, [r7, #14]
 8010692:	b2db      	uxtb	r3, r3
 8010694:	2b00      	cmp	r3, #0
 8010696:	f040 80f3 	bne.w	8010880 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2200      	movs	r2, #0
 801069e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80106a8:	2b01      	cmp	r3, #1
 80106aa:	d103      	bne.n	80106b4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2208      	movs	r2, #8
 80106b0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80106b2:	e0e5      	b.n	8010880 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2207      	movs	r2, #7
 80106b8:	701a      	strb	r2, [r3, #0]
      break;
 80106ba:	e0e1      	b.n	8010880 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	f000 80de 	beq.w	8010884 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80106ce:	2101      	movs	r1, #1
 80106d0:	6878      	ldr	r0, [r7, #4]
 80106d2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2208      	movs	r2, #8
 80106d8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80106da:	e0d3      	b.n	8010884 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80106e2:	b29b      	uxth	r3, r3
 80106e4:	4619      	mov	r1, r3
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f000 fc11 	bl	8010f0e <USBH_SetCfg>
 80106ec:	4603      	mov	r3, r0
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	f040 80ca 	bne.w	8010888 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2209      	movs	r2, #9
 80106f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80106fa:	e0c5      	b.n	8010888 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8010702:	f003 0320 	and.w	r3, r3, #32
 8010706:	2b00      	cmp	r3, #0
 8010708:	d00b      	beq.n	8010722 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 801070a:	2101      	movs	r1, #1
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f000 fc21 	bl	8010f54 <USBH_SetFeature>
 8010712:	4603      	mov	r3, r0
 8010714:	2b00      	cmp	r3, #0
 8010716:	f040 80b9 	bne.w	801088c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	220a      	movs	r2, #10
 801071e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8010720:	e0b4      	b.n	801088c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	220a      	movs	r2, #10
 8010726:	701a      	strb	r2, [r3, #0]
      break;
 8010728:	e0b0      	b.n	801088c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8010730:	2b00      	cmp	r3, #0
 8010732:	f000 80ad 	beq.w	8010890 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2200      	movs	r2, #0
 801073a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 801073e:	2300      	movs	r3, #0
 8010740:	73fb      	strb	r3, [r7, #15]
 8010742:	e016      	b.n	8010772 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8010744:	7bfa      	ldrb	r2, [r7, #15]
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	32de      	adds	r2, #222	; 0xde
 801074a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801074e:	791a      	ldrb	r2, [r3, #4]
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8010756:	429a      	cmp	r2, r3
 8010758:	d108      	bne.n	801076c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 801075a:	7bfa      	ldrb	r2, [r7, #15]
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	32de      	adds	r2, #222	; 0xde
 8010760:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 801076a:	e005      	b.n	8010778 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 801076c:	7bfb      	ldrb	r3, [r7, #15]
 801076e:	3301      	adds	r3, #1
 8010770:	73fb      	strb	r3, [r7, #15]
 8010772:	7bfb      	ldrb	r3, [r7, #15]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d0e5      	beq.n	8010744 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801077e:	2b00      	cmp	r3, #0
 8010780:	d016      	beq.n	80107b0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010788:	689b      	ldr	r3, [r3, #8]
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	4798      	blx	r3
 801078e:	4603      	mov	r3, r0
 8010790:	2b00      	cmp	r3, #0
 8010792:	d109      	bne.n	80107a8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2206      	movs	r2, #6
 8010798:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80107a0:	2103      	movs	r1, #3
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80107a6:	e073      	b.n	8010890 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	220d      	movs	r2, #13
 80107ac:	701a      	strb	r2, [r3, #0]
      break;
 80107ae:	e06f      	b.n	8010890 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	220d      	movs	r2, #13
 80107b4:	701a      	strb	r2, [r3, #0]
      break;
 80107b6:	e06b      	b.n	8010890 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d017      	beq.n	80107f2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80107c8:	691b      	ldr	r3, [r3, #16]
 80107ca:	6878      	ldr	r0, [r7, #4]
 80107cc:	4798      	blx	r3
 80107ce:	4603      	mov	r3, r0
 80107d0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80107d2:	7bbb      	ldrb	r3, [r7, #14]
 80107d4:	b2db      	uxtb	r3, r3
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d103      	bne.n	80107e2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	220b      	movs	r2, #11
 80107de:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80107e0:	e058      	b.n	8010894 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80107e2:	7bbb      	ldrb	r3, [r7, #14]
 80107e4:	b2db      	uxtb	r3, r3
 80107e6:	2b02      	cmp	r3, #2
 80107e8:	d154      	bne.n	8010894 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	220d      	movs	r2, #13
 80107ee:	701a      	strb	r2, [r3, #0]
      break;
 80107f0:	e050      	b.n	8010894 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	220d      	movs	r2, #13
 80107f6:	701a      	strb	r2, [r3, #0]
      break;
 80107f8:	e04c      	b.n	8010894 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010800:	2b00      	cmp	r3, #0
 8010802:	d049      	beq.n	8010898 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801080a:	695b      	ldr	r3, [r3, #20]
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	4798      	blx	r3
      }
      break;
 8010810:	e042      	b.n	8010898 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2200      	movs	r2, #0
 8010816:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f7ff fdfe 	bl	801041c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010826:	2b00      	cmp	r3, #0
 8010828:	d009      	beq.n	801083e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010830:	68db      	ldr	r3, [r3, #12]
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2200      	movs	r2, #0
 801083a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010844:	2b00      	cmp	r3, #0
 8010846:	d005      	beq.n	8010854 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801084e:	2105      	movs	r1, #5
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 801085a:	b2db      	uxtb	r3, r3
 801085c:	2b01      	cmp	r3, #1
 801085e:	d107      	bne.n	8010870 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2200      	movs	r2, #0
 8010864:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f7ff fe2b 	bl	80104c4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 801086e:	e014      	b.n	801089a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8010870:	6878      	ldr	r0, [r7, #4]
 8010872:	f001 fabb 	bl	8011dec <USBH_LL_Start>
      break;
 8010876:	e010      	b.n	801089a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8010878:	bf00      	nop
 801087a:	e00e      	b.n	801089a <USBH_Process+0x3b6>
      break;
 801087c:	bf00      	nop
 801087e:	e00c      	b.n	801089a <USBH_Process+0x3b6>
      break;
 8010880:	bf00      	nop
 8010882:	e00a      	b.n	801089a <USBH_Process+0x3b6>
    break;
 8010884:	bf00      	nop
 8010886:	e008      	b.n	801089a <USBH_Process+0x3b6>
      break;
 8010888:	bf00      	nop
 801088a:	e006      	b.n	801089a <USBH_Process+0x3b6>
      break;
 801088c:	bf00      	nop
 801088e:	e004      	b.n	801089a <USBH_Process+0x3b6>
      break;
 8010890:	bf00      	nop
 8010892:	e002      	b.n	801089a <USBH_Process+0x3b6>
      break;
 8010894:	bf00      	nop
 8010896:	e000      	b.n	801089a <USBH_Process+0x3b6>
      break;
 8010898:	bf00      	nop
  }
  return USBH_OK;
 801089a:	2300      	movs	r3, #0
}
 801089c:	4618      	mov	r0, r3
 801089e:	3710      	adds	r7, #16
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}

080108a4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b088      	sub	sp, #32
 80108a8:	af04      	add	r7, sp, #16
 80108aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80108ac:	2301      	movs	r3, #1
 80108ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80108b0:	2301      	movs	r3, #1
 80108b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	785b      	ldrb	r3, [r3, #1]
 80108b8:	2b07      	cmp	r3, #7
 80108ba:	f200 81c1 	bhi.w	8010c40 <USBH_HandleEnum+0x39c>
 80108be:	a201      	add	r2, pc, #4	; (adr r2, 80108c4 <USBH_HandleEnum+0x20>)
 80108c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108c4:	080108e5 	.word	0x080108e5
 80108c8:	080109a3 	.word	0x080109a3
 80108cc:	08010a0d 	.word	0x08010a0d
 80108d0:	08010a9b 	.word	0x08010a9b
 80108d4:	08010b05 	.word	0x08010b05
 80108d8:	08010b75 	.word	0x08010b75
 80108dc:	08010bbb 	.word	0x08010bbb
 80108e0:	08010c01 	.word	0x08010c01
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80108e4:	2108      	movs	r1, #8
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	f000 fa41 	bl	8010d6e <USBH_Get_DevDesc>
 80108ec:	4603      	mov	r3, r0
 80108ee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80108f0:	7bbb      	ldrb	r3, [r7, #14]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d130      	bne.n	8010958 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2201      	movs	r2, #1
 8010904:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	7919      	ldrb	r1, [r3, #4]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8010916:	687a      	ldr	r2, [r7, #4]
 8010918:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801091a:	b292      	uxth	r2, r2
 801091c:	9202      	str	r2, [sp, #8]
 801091e:	2200      	movs	r2, #0
 8010920:	9201      	str	r2, [sp, #4]
 8010922:	9300      	str	r3, [sp, #0]
 8010924:	4603      	mov	r3, r0
 8010926:	2280      	movs	r2, #128	; 0x80
 8010928:	6878      	ldr	r0, [r7, #4]
 801092a:	f000 ff02 	bl	8011732 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	7959      	ldrb	r1, [r3, #5]
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 801093e:	687a      	ldr	r2, [r7, #4]
 8010940:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010942:	b292      	uxth	r2, r2
 8010944:	9202      	str	r2, [sp, #8]
 8010946:	2200      	movs	r2, #0
 8010948:	9201      	str	r2, [sp, #4]
 801094a:	9300      	str	r3, [sp, #0]
 801094c:	4603      	mov	r3, r0
 801094e:	2200      	movs	r2, #0
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f000 feee 	bl	8011732 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8010956:	e175      	b.n	8010c44 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010958:	7bbb      	ldrb	r3, [r7, #14]
 801095a:	2b03      	cmp	r3, #3
 801095c:	f040 8172 	bne.w	8010c44 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010966:	3301      	adds	r3, #1
 8010968:	b2da      	uxtb	r2, r3
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010976:	2b03      	cmp	r3, #3
 8010978:	d903      	bls.n	8010982 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	220d      	movs	r2, #13
 801097e:	701a      	strb	r2, [r3, #0]
      break;
 8010980:	e160      	b.n	8010c44 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	795b      	ldrb	r3, [r3, #5]
 8010986:	4619      	mov	r1, r3
 8010988:	6878      	ldr	r0, [r7, #4]
 801098a:	f000 ff12 	bl	80117b2 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	791b      	ldrb	r3, [r3, #4]
 8010992:	4619      	mov	r1, r3
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f000 ff0c 	bl	80117b2 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	2200      	movs	r2, #0
 801099e:	701a      	strb	r2, [r3, #0]
      break;
 80109a0:	e150      	b.n	8010c44 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80109a2:	2112      	movs	r1, #18
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f000 f9e2 	bl	8010d6e <USBH_Get_DevDesc>
 80109aa:	4603      	mov	r3, r0
 80109ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80109ae:	7bbb      	ldrb	r3, [r7, #14]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d103      	bne.n	80109bc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2202      	movs	r2, #2
 80109b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80109ba:	e145      	b.n	8010c48 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80109bc:	7bbb      	ldrb	r3, [r7, #14]
 80109be:	2b03      	cmp	r3, #3
 80109c0:	f040 8142 	bne.w	8010c48 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80109ca:	3301      	adds	r3, #1
 80109cc:	b2da      	uxtb	r2, r3
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80109da:	2b03      	cmp	r3, #3
 80109dc:	d903      	bls.n	80109e6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	220d      	movs	r2, #13
 80109e2:	701a      	strb	r2, [r3, #0]
      break;
 80109e4:	e130      	b.n	8010c48 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	795b      	ldrb	r3, [r3, #5]
 80109ea:	4619      	mov	r1, r3
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f000 fee0 	bl	80117b2 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	791b      	ldrb	r3, [r3, #4]
 80109f6:	4619      	mov	r1, r3
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f000 feda 	bl	80117b2 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2200      	movs	r2, #0
 8010a02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2200      	movs	r2, #0
 8010a08:	701a      	strb	r2, [r3, #0]
      break;
 8010a0a:	e11d      	b.n	8010c48 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8010a0c:	2101      	movs	r1, #1
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f000 fa59 	bl	8010ec6 <USBH_SetAddress>
 8010a14:	4603      	mov	r3, r0
 8010a16:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010a18:	7bbb      	ldrb	r3, [r7, #14]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d132      	bne.n	8010a84 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8010a1e:	2002      	movs	r0, #2
 8010a20:	f001 fae6 	bl	8011ff0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2201      	movs	r2, #1
 8010a28:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2203      	movs	r2, #3
 8010a30:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	7919      	ldrb	r1, [r3, #4]
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8010a42:	687a      	ldr	r2, [r7, #4]
 8010a44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8010a46:	b292      	uxth	r2, r2
 8010a48:	9202      	str	r2, [sp, #8]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	9201      	str	r2, [sp, #4]
 8010a4e:	9300      	str	r3, [sp, #0]
 8010a50:	4603      	mov	r3, r0
 8010a52:	2280      	movs	r2, #128	; 0x80
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	f000 fe6c 	bl	8011732 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	7959      	ldrb	r1, [r3, #5]
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8010a6a:	687a      	ldr	r2, [r7, #4]
 8010a6c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010a6e:	b292      	uxth	r2, r2
 8010a70:	9202      	str	r2, [sp, #8]
 8010a72:	2200      	movs	r2, #0
 8010a74:	9201      	str	r2, [sp, #4]
 8010a76:	9300      	str	r3, [sp, #0]
 8010a78:	4603      	mov	r3, r0
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f000 fe58 	bl	8011732 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8010a82:	e0e3      	b.n	8010c4c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010a84:	7bbb      	ldrb	r3, [r7, #14]
 8010a86:	2b03      	cmp	r3, #3
 8010a88:	f040 80e0 	bne.w	8010c4c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	220d      	movs	r2, #13
 8010a90:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2200      	movs	r2, #0
 8010a96:	705a      	strb	r2, [r3, #1]
      break;
 8010a98:	e0d8      	b.n	8010c4c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8010a9a:	2109      	movs	r1, #9
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f000 f98e 	bl	8010dbe <USBH_Get_CfgDesc>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010aa6:	7bbb      	ldrb	r3, [r7, #14]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d103      	bne.n	8010ab4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2204      	movs	r2, #4
 8010ab0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010ab2:	e0cd      	b.n	8010c50 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010ab4:	7bbb      	ldrb	r3, [r7, #14]
 8010ab6:	2b03      	cmp	r3, #3
 8010ab8:	f040 80ca 	bne.w	8010c50 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	b2da      	uxtb	r2, r3
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010ad2:	2b03      	cmp	r3, #3
 8010ad4:	d903      	bls.n	8010ade <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	220d      	movs	r2, #13
 8010ada:	701a      	strb	r2, [r3, #0]
      break;
 8010adc:	e0b8      	b.n	8010c50 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	795b      	ldrb	r3, [r3, #5]
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f000 fe64 	bl	80117b2 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	791b      	ldrb	r3, [r3, #4]
 8010aee:	4619      	mov	r1, r3
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f000 fe5e 	bl	80117b2 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2200      	movs	r2, #0
 8010afa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2200      	movs	r2, #0
 8010b00:	701a      	strb	r2, [r3, #0]
      break;
 8010b02:	e0a5      	b.n	8010c50 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8010b0a:	4619      	mov	r1, r3
 8010b0c:	6878      	ldr	r0, [r7, #4]
 8010b0e:	f000 f956 	bl	8010dbe <USBH_Get_CfgDesc>
 8010b12:	4603      	mov	r3, r0
 8010b14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010b16:	7bbb      	ldrb	r3, [r7, #14]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d103      	bne.n	8010b24 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2205      	movs	r2, #5
 8010b20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010b22:	e097      	b.n	8010c54 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010b24:	7bbb      	ldrb	r3, [r7, #14]
 8010b26:	2b03      	cmp	r3, #3
 8010b28:	f040 8094 	bne.w	8010c54 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010b32:	3301      	adds	r3, #1
 8010b34:	b2da      	uxtb	r2, r3
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010b42:	2b03      	cmp	r3, #3
 8010b44:	d903      	bls.n	8010b4e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	220d      	movs	r2, #13
 8010b4a:	701a      	strb	r2, [r3, #0]
      break;
 8010b4c:	e082      	b.n	8010c54 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	795b      	ldrb	r3, [r3, #5]
 8010b52:	4619      	mov	r1, r3
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f000 fe2c 	bl	80117b2 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	791b      	ldrb	r3, [r3, #4]
 8010b5e:	4619      	mov	r1, r3
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f000 fe26 	bl	80117b2 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2200      	movs	r2, #0
 8010b6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2200      	movs	r2, #0
 8010b70:	701a      	strb	r2, [r3, #0]
      break;
 8010b72:	e06f      	b.n	8010c54 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d019      	beq.n	8010bb2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010b8a:	23ff      	movs	r3, #255	; 0xff
 8010b8c:	6878      	ldr	r0, [r7, #4]
 8010b8e:	f000 f93a 	bl	8010e06 <USBH_Get_StringDesc>
 8010b92:	4603      	mov	r3, r0
 8010b94:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010b96:	7bbb      	ldrb	r3, [r7, #14]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d103      	bne.n	8010ba4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2206      	movs	r2, #6
 8010ba0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8010ba2:	e059      	b.n	8010c58 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010ba4:	7bbb      	ldrb	r3, [r7, #14]
 8010ba6:	2b03      	cmp	r3, #3
 8010ba8:	d156      	bne.n	8010c58 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2206      	movs	r2, #6
 8010bae:	705a      	strb	r2, [r3, #1]
      break;
 8010bb0:	e052      	b.n	8010c58 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2206      	movs	r2, #6
 8010bb6:	705a      	strb	r2, [r3, #1]
      break;
 8010bb8:	e04e      	b.n	8010c58 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d019      	beq.n	8010bf8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8010bd0:	23ff      	movs	r3, #255	; 0xff
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f000 f917 	bl	8010e06 <USBH_Get_StringDesc>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010bdc:	7bbb      	ldrb	r3, [r7, #14]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d103      	bne.n	8010bea <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2207      	movs	r2, #7
 8010be6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8010be8:	e038      	b.n	8010c5c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010bea:	7bbb      	ldrb	r3, [r7, #14]
 8010bec:	2b03      	cmp	r3, #3
 8010bee:	d135      	bne.n	8010c5c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2207      	movs	r2, #7
 8010bf4:	705a      	strb	r2, [r3, #1]
      break;
 8010bf6:	e031      	b.n	8010c5c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2207      	movs	r2, #7
 8010bfc:	705a      	strb	r2, [r3, #1]
      break;
 8010bfe:	e02d      	b.n	8010c5c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d017      	beq.n	8010c3a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8010c16:	23ff      	movs	r3, #255	; 0xff
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f000 f8f4 	bl	8010e06 <USBH_Get_StringDesc>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010c22:	7bbb      	ldrb	r3, [r7, #14]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d102      	bne.n	8010c2e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8010c28:	2300      	movs	r3, #0
 8010c2a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8010c2c:	e018      	b.n	8010c60 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010c2e:	7bbb      	ldrb	r3, [r7, #14]
 8010c30:	2b03      	cmp	r3, #3
 8010c32:	d115      	bne.n	8010c60 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8010c34:	2300      	movs	r3, #0
 8010c36:	73fb      	strb	r3, [r7, #15]
      break;
 8010c38:	e012      	b.n	8010c60 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8010c3e:	e00f      	b.n	8010c60 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8010c40:	bf00      	nop
 8010c42:	e00e      	b.n	8010c62 <USBH_HandleEnum+0x3be>
      break;
 8010c44:	bf00      	nop
 8010c46:	e00c      	b.n	8010c62 <USBH_HandleEnum+0x3be>
      break;
 8010c48:	bf00      	nop
 8010c4a:	e00a      	b.n	8010c62 <USBH_HandleEnum+0x3be>
      break;
 8010c4c:	bf00      	nop
 8010c4e:	e008      	b.n	8010c62 <USBH_HandleEnum+0x3be>
      break;
 8010c50:	bf00      	nop
 8010c52:	e006      	b.n	8010c62 <USBH_HandleEnum+0x3be>
      break;
 8010c54:	bf00      	nop
 8010c56:	e004      	b.n	8010c62 <USBH_HandleEnum+0x3be>
      break;
 8010c58:	bf00      	nop
 8010c5a:	e002      	b.n	8010c62 <USBH_HandleEnum+0x3be>
      break;
 8010c5c:	bf00      	nop
 8010c5e:	e000      	b.n	8010c62 <USBH_HandleEnum+0x3be>
      break;
 8010c60:	bf00      	nop
  }
  return Status;
 8010c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c64:	4618      	mov	r0, r3
 8010c66:	3710      	adds	r7, #16
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd80      	pop	{r7, pc}

08010c6c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b082      	sub	sp, #8
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010c7a:	1c5a      	adds	r2, r3, #1
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	f000 f804 	bl	8010c90 <USBH_HandleSof>
}
 8010c88:	bf00      	nop
 8010c8a:	3708      	adds	r7, #8
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}

08010c90 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b082      	sub	sp, #8
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	781b      	ldrb	r3, [r3, #0]
 8010c9c:	b2db      	uxtb	r3, r3
 8010c9e:	2b0b      	cmp	r3, #11
 8010ca0:	d10a      	bne.n	8010cb8 <USBH_HandleSof+0x28>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d005      	beq.n	8010cb8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010cb2:	699b      	ldr	r3, [r3, #24]
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	4798      	blx	r3
  }
}
 8010cb8:	bf00      	nop
 8010cba:	3708      	adds	r7, #8
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}

08010cc0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8010cc0:	b480      	push	{r7}
 8010cc2:	b083      	sub	sp, #12
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2201      	movs	r2, #1
 8010ccc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8010cd0:	bf00      	nop
}
 8010cd2:	370c      	adds	r7, #12
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cda:	4770      	bx	lr

08010cdc <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8010cdc:	b480      	push	{r7}
 8010cde:	b083      	sub	sp, #12
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8010cec:	bf00      	nop
}
 8010cee:	370c      	adds	r7, #12
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf6:	4770      	bx	lr

08010cf8 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8010cf8:	b480      	push	{r7}
 8010cfa:	b083      	sub	sp, #12
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2201      	movs	r2, #1
 8010d04:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	2200      	movs	r2, #0
 8010d14:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8010d18:	2300      	movs	r3, #0
}
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	370c      	adds	r7, #12
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d24:	4770      	bx	lr

08010d26 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8010d26:	b580      	push	{r7, lr}
 8010d28:	b082      	sub	sp, #8
 8010d2a:	af00      	add	r7, sp, #0
 8010d2c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	2201      	movs	r2, #1
 8010d32:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2200      	movs	r2, #0
 8010d3a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	2200      	movs	r2, #0
 8010d42:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f001 f86b 	bl	8011e22 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	791b      	ldrb	r3, [r3, #4]
 8010d50:	4619      	mov	r1, r3
 8010d52:	6878      	ldr	r0, [r7, #4]
 8010d54:	f000 fd2d 	bl	80117b2 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	795b      	ldrb	r3, [r3, #5]
 8010d5c:	4619      	mov	r1, r3
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f000 fd27 	bl	80117b2 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8010d64:	2300      	movs	r3, #0
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	3708      	adds	r7, #8
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}

08010d6e <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8010d6e:	b580      	push	{r7, lr}
 8010d70:	b086      	sub	sp, #24
 8010d72:	af02      	add	r7, sp, #8
 8010d74:	6078      	str	r0, [r7, #4]
 8010d76:	460b      	mov	r3, r1
 8010d78:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8010d80:	78fb      	ldrb	r3, [r7, #3]
 8010d82:	b29b      	uxth	r3, r3
 8010d84:	9300      	str	r3, [sp, #0]
 8010d86:	4613      	mov	r3, r2
 8010d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010d8c:	2100      	movs	r1, #0
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f000 f864 	bl	8010e5c <USBH_GetDescriptor>
 8010d94:	4603      	mov	r3, r0
 8010d96:	73fb      	strb	r3, [r7, #15]
 8010d98:	7bfb      	ldrb	r3, [r7, #15]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d10a      	bne.n	8010db4 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f203 3026 	addw	r0, r3, #806	; 0x326
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010daa:	78fa      	ldrb	r2, [r7, #3]
 8010dac:	b292      	uxth	r2, r2
 8010dae:	4619      	mov	r1, r3
 8010db0:	f000 f8f4 	bl	8010f9c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8010db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	3710      	adds	r7, #16
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}

08010dbe <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8010dbe:	b580      	push	{r7, lr}
 8010dc0:	b086      	sub	sp, #24
 8010dc2:	af02      	add	r7, sp, #8
 8010dc4:	6078      	str	r0, [r7, #4]
 8010dc6:	460b      	mov	r3, r1
 8010dc8:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	331c      	adds	r3, #28
 8010dce:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8010dd0:	887b      	ldrh	r3, [r7, #2]
 8010dd2:	9300      	str	r3, [sp, #0]
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010dda:	2100      	movs	r1, #0
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f000 f83d 	bl	8010e5c <USBH_GetDescriptor>
 8010de2:	4603      	mov	r3, r0
 8010de4:	72fb      	strb	r3, [r7, #11]
 8010de6:	7afb      	ldrb	r3, [r7, #11]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d107      	bne.n	8010dfc <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8010df2:	887a      	ldrh	r2, [r7, #2]
 8010df4:	68f9      	ldr	r1, [r7, #12]
 8010df6:	4618      	mov	r0, r3
 8010df8:	f000 f940 	bl	801107c <USBH_ParseCfgDesc>
  }

  return status;
 8010dfc:	7afb      	ldrb	r3, [r7, #11]
}
 8010dfe:	4618      	mov	r0, r3
 8010e00:	3710      	adds	r7, #16
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd80      	pop	{r7, pc}

08010e06 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8010e06:	b580      	push	{r7, lr}
 8010e08:	b088      	sub	sp, #32
 8010e0a:	af02      	add	r7, sp, #8
 8010e0c:	60f8      	str	r0, [r7, #12]
 8010e0e:	607a      	str	r2, [r7, #4]
 8010e10:	461a      	mov	r2, r3
 8010e12:	460b      	mov	r3, r1
 8010e14:	72fb      	strb	r3, [r7, #11]
 8010e16:	4613      	mov	r3, r2
 8010e18:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8010e1a:	7afb      	ldrb	r3, [r7, #11]
 8010e1c:	b29b      	uxth	r3, r3
 8010e1e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8010e22:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8010e2a:	893b      	ldrh	r3, [r7, #8]
 8010e2c:	9300      	str	r3, [sp, #0]
 8010e2e:	460b      	mov	r3, r1
 8010e30:	2100      	movs	r1, #0
 8010e32:	68f8      	ldr	r0, [r7, #12]
 8010e34:	f000 f812 	bl	8010e5c <USBH_GetDescriptor>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	75fb      	strb	r3, [r7, #23]
 8010e3c:	7dfb      	ldrb	r3, [r7, #23]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d107      	bne.n	8010e52 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010e48:	893a      	ldrh	r2, [r7, #8]
 8010e4a:	6879      	ldr	r1, [r7, #4]
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f000 fa13 	bl	8011278 <USBH_ParseStringDesc>
  }

  return status;
 8010e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	3718      	adds	r7, #24
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}

08010e5c <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b084      	sub	sp, #16
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	60f8      	str	r0, [r7, #12]
 8010e64:	607b      	str	r3, [r7, #4]
 8010e66:	460b      	mov	r3, r1
 8010e68:	72fb      	strb	r3, [r7, #11]
 8010e6a:	4613      	mov	r3, r2
 8010e6c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	789b      	ldrb	r3, [r3, #2]
 8010e72:	2b01      	cmp	r3, #1
 8010e74:	d11c      	bne.n	8010eb0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8010e76:	7afb      	ldrb	r3, [r7, #11]
 8010e78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010e7c:	b2da      	uxtb	r2, r3
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	2206      	movs	r2, #6
 8010e86:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	893a      	ldrh	r2, [r7, #8]
 8010e8c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8010e8e:	893b      	ldrh	r3, [r7, #8]
 8010e90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010e94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010e98:	d104      	bne.n	8010ea4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	f240 4209 	movw	r2, #1033	; 0x409
 8010ea0:	829a      	strh	r2, [r3, #20]
 8010ea2:	e002      	b.n	8010eaa <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	8b3a      	ldrh	r2, [r7, #24]
 8010eae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8010eb0:	8b3b      	ldrh	r3, [r7, #24]
 8010eb2:	461a      	mov	r2, r3
 8010eb4:	6879      	ldr	r1, [r7, #4]
 8010eb6:	68f8      	ldr	r0, [r7, #12]
 8010eb8:	f000 fa2c 	bl	8011314 <USBH_CtlReq>
 8010ebc:	4603      	mov	r3, r0
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	3710      	adds	r7, #16
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd80      	pop	{r7, pc}

08010ec6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8010ec6:	b580      	push	{r7, lr}
 8010ec8:	b082      	sub	sp, #8
 8010eca:	af00      	add	r7, sp, #0
 8010ecc:	6078      	str	r0, [r7, #4]
 8010ece:	460b      	mov	r3, r1
 8010ed0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	789b      	ldrb	r3, [r3, #2]
 8010ed6:	2b01      	cmp	r3, #1
 8010ed8:	d10f      	bne.n	8010efa <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	2200      	movs	r2, #0
 8010ede:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2205      	movs	r2, #5
 8010ee4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8010ee6:	78fb      	ldrb	r3, [r7, #3]
 8010ee8:	b29a      	uxth	r2, r3
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8010efa:	2200      	movs	r2, #0
 8010efc:	2100      	movs	r1, #0
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f000 fa08 	bl	8011314 <USBH_CtlReq>
 8010f04:	4603      	mov	r3, r0
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3708      	adds	r7, #8
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}

08010f0e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8010f0e:	b580      	push	{r7, lr}
 8010f10:	b082      	sub	sp, #8
 8010f12:	af00      	add	r7, sp, #0
 8010f14:	6078      	str	r0, [r7, #4]
 8010f16:	460b      	mov	r3, r1
 8010f18:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	789b      	ldrb	r3, [r3, #2]
 8010f1e:	2b01      	cmp	r3, #1
 8010f20:	d10e      	bne.n	8010f40 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2200      	movs	r2, #0
 8010f26:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2209      	movs	r2, #9
 8010f2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	887a      	ldrh	r2, [r7, #2]
 8010f32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2200      	movs	r2, #0
 8010f38:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8010f40:	2200      	movs	r2, #0
 8010f42:	2100      	movs	r1, #0
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f000 f9e5 	bl	8011314 <USBH_CtlReq>
 8010f4a:	4603      	mov	r3, r0
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3708      	adds	r7, #8
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b082      	sub	sp, #8
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
 8010f5c:	460b      	mov	r3, r1
 8010f5e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	789b      	ldrb	r3, [r3, #2]
 8010f64:	2b01      	cmp	r3, #1
 8010f66:	d10f      	bne.n	8010f88 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2203      	movs	r2, #3
 8010f72:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8010f74:	78fb      	ldrb	r3, [r7, #3]
 8010f76:	b29a      	uxth	r2, r3
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2200      	movs	r2, #0
 8010f80:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	2200      	movs	r2, #0
 8010f86:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8010f88:	2200      	movs	r2, #0
 8010f8a:	2100      	movs	r1, #0
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f000 f9c1 	bl	8011314 <USBH_CtlReq>
 8010f92:	4603      	mov	r3, r0
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	3708      	adds	r7, #8
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}

08010f9c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8010f9c:	b480      	push	{r7}
 8010f9e:	b085      	sub	sp, #20
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	60f8      	str	r0, [r7, #12]
 8010fa4:	60b9      	str	r1, [r7, #8]
 8010fa6:	4613      	mov	r3, r2
 8010fa8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	781a      	ldrb	r2, [r3, #0]
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	785a      	ldrb	r2, [r3, #1]
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	3302      	adds	r3, #2
 8010fbe:	781b      	ldrb	r3, [r3, #0]
 8010fc0:	b29a      	uxth	r2, r3
 8010fc2:	68bb      	ldr	r3, [r7, #8]
 8010fc4:	3303      	adds	r3, #3
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	b29b      	uxth	r3, r3
 8010fca:	021b      	lsls	r3, r3, #8
 8010fcc:	b29b      	uxth	r3, r3
 8010fce:	4313      	orrs	r3, r2
 8010fd0:	b29a      	uxth	r2, r3
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	791a      	ldrb	r2, [r3, #4]
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8010fde:	68bb      	ldr	r3, [r7, #8]
 8010fe0:	795a      	ldrb	r2, [r3, #5]
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8010fe6:	68bb      	ldr	r3, [r7, #8]
 8010fe8:	799a      	ldrb	r2, [r3, #6]
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	79da      	ldrb	r2, [r3, #7]
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8010ff6:	88fb      	ldrh	r3, [r7, #6]
 8010ff8:	2b08      	cmp	r3, #8
 8010ffa:	d939      	bls.n	8011070 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	3308      	adds	r3, #8
 8011000:	781b      	ldrb	r3, [r3, #0]
 8011002:	b29a      	uxth	r2, r3
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	3309      	adds	r3, #9
 8011008:	781b      	ldrb	r3, [r3, #0]
 801100a:	b29b      	uxth	r3, r3
 801100c:	021b      	lsls	r3, r3, #8
 801100e:	b29b      	uxth	r3, r3
 8011010:	4313      	orrs	r3, r2
 8011012:	b29a      	uxth	r2, r3
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	330a      	adds	r3, #10
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	b29a      	uxth	r2, r3
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	330b      	adds	r3, #11
 8011024:	781b      	ldrb	r3, [r3, #0]
 8011026:	b29b      	uxth	r3, r3
 8011028:	021b      	lsls	r3, r3, #8
 801102a:	b29b      	uxth	r3, r3
 801102c:	4313      	orrs	r3, r2
 801102e:	b29a      	uxth	r2, r3
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8011034:	68bb      	ldr	r3, [r7, #8]
 8011036:	330c      	adds	r3, #12
 8011038:	781b      	ldrb	r3, [r3, #0]
 801103a:	b29a      	uxth	r2, r3
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	330d      	adds	r3, #13
 8011040:	781b      	ldrb	r3, [r3, #0]
 8011042:	b29b      	uxth	r3, r3
 8011044:	021b      	lsls	r3, r3, #8
 8011046:	b29b      	uxth	r3, r3
 8011048:	4313      	orrs	r3, r2
 801104a:	b29a      	uxth	r2, r3
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8011050:	68bb      	ldr	r3, [r7, #8]
 8011052:	7b9a      	ldrb	r2, [r3, #14]
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	7bda      	ldrb	r2, [r3, #15]
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	7c1a      	ldrb	r2, [r3, #16]
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	7c5a      	ldrb	r2, [r3, #17]
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	745a      	strb	r2, [r3, #17]
  }
}
 8011070:	bf00      	nop
 8011072:	3714      	adds	r7, #20
 8011074:	46bd      	mov	sp, r7
 8011076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107a:	4770      	bx	lr

0801107c <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b08a      	sub	sp, #40	; 0x28
 8011080:	af00      	add	r7, sp, #0
 8011082:	60f8      	str	r0, [r7, #12]
 8011084:	60b9      	str	r1, [r7, #8]
 8011086:	4613      	mov	r3, r2
 8011088:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 801108a:	68bb      	ldr	r3, [r7, #8]
 801108c:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 801108e:	2300      	movs	r3, #0
 8011090:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8011094:	2300      	movs	r3, #0
 8011096:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 801109a:	68bb      	ldr	r3, [r7, #8]
 801109c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	781a      	ldrb	r2, [r3, #0]
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	785a      	ldrb	r2, [r3, #1]
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80110ae:	68bb      	ldr	r3, [r7, #8]
 80110b0:	3302      	adds	r3, #2
 80110b2:	781b      	ldrb	r3, [r3, #0]
 80110b4:	b29a      	uxth	r2, r3
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	3303      	adds	r3, #3
 80110ba:	781b      	ldrb	r3, [r3, #0]
 80110bc:	b29b      	uxth	r3, r3
 80110be:	021b      	lsls	r3, r3, #8
 80110c0:	b29b      	uxth	r3, r3
 80110c2:	4313      	orrs	r3, r2
 80110c4:	b29a      	uxth	r2, r3
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	791a      	ldrb	r2, [r3, #4]
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	795a      	ldrb	r2, [r3, #5]
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80110da:	68bb      	ldr	r3, [r7, #8]
 80110dc:	799a      	ldrb	r2, [r3, #6]
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80110e2:	68bb      	ldr	r3, [r7, #8]
 80110e4:	79da      	ldrb	r2, [r3, #7]
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80110ea:	68bb      	ldr	r3, [r7, #8]
 80110ec:	7a1a      	ldrb	r2, [r3, #8]
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80110f2:	88fb      	ldrh	r3, [r7, #6]
 80110f4:	2b09      	cmp	r3, #9
 80110f6:	d95f      	bls.n	80111b8 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80110f8:	2309      	movs	r3, #9
 80110fa:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80110fc:	2300      	movs	r3, #0
 80110fe:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011100:	e051      	b.n	80111a6 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011102:	f107 0316 	add.w	r3, r7, #22
 8011106:	4619      	mov	r1, r3
 8011108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801110a:	f000 f8e8 	bl	80112de <USBH_GetNextDesc>
 801110e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8011110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011112:	785b      	ldrb	r3, [r3, #1]
 8011114:	2b04      	cmp	r3, #4
 8011116:	d146      	bne.n	80111a6 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8011118:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801111c:	221a      	movs	r2, #26
 801111e:	fb02 f303 	mul.w	r3, r2, r3
 8011122:	3308      	adds	r3, #8
 8011124:	68fa      	ldr	r2, [r7, #12]
 8011126:	4413      	add	r3, r2
 8011128:	3302      	adds	r3, #2
 801112a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 801112c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801112e:	69f8      	ldr	r0, [r7, #28]
 8011130:	f000 f846 	bl	80111c0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8011134:	2300      	movs	r3, #0
 8011136:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 801113a:	2300      	movs	r3, #0
 801113c:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801113e:	e022      	b.n	8011186 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011140:	f107 0316 	add.w	r3, r7, #22
 8011144:	4619      	mov	r1, r3
 8011146:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011148:	f000 f8c9 	bl	80112de <USBH_GetNextDesc>
 801114c:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 801114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011150:	785b      	ldrb	r3, [r3, #1]
 8011152:	2b05      	cmp	r3, #5
 8011154:	d117      	bne.n	8011186 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8011156:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801115a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801115e:	3201      	adds	r2, #1
 8011160:	00d2      	lsls	r2, r2, #3
 8011162:	211a      	movs	r1, #26
 8011164:	fb01 f303 	mul.w	r3, r1, r3
 8011168:	4413      	add	r3, r2
 801116a:	3308      	adds	r3, #8
 801116c:	68fa      	ldr	r2, [r7, #12]
 801116e:	4413      	add	r3, r2
 8011170:	3304      	adds	r3, #4
 8011172:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8011174:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011176:	69b8      	ldr	r0, [r7, #24]
 8011178:	f000 f851 	bl	801121e <USBH_ParseEPDesc>
            ep_ix++;
 801117c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011180:	3301      	adds	r3, #1
 8011182:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011186:	69fb      	ldr	r3, [r7, #28]
 8011188:	791b      	ldrb	r3, [r3, #4]
 801118a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801118e:	429a      	cmp	r2, r3
 8011190:	d204      	bcs.n	801119c <USBH_ParseCfgDesc+0x120>
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	885a      	ldrh	r2, [r3, #2]
 8011196:	8afb      	ldrh	r3, [r7, #22]
 8011198:	429a      	cmp	r2, r3
 801119a:	d8d1      	bhi.n	8011140 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 801119c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80111a0:	3301      	adds	r3, #1
 80111a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80111a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80111aa:	2b01      	cmp	r3, #1
 80111ac:	d804      	bhi.n	80111b8 <USBH_ParseCfgDesc+0x13c>
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	885a      	ldrh	r2, [r3, #2]
 80111b2:	8afb      	ldrh	r3, [r7, #22]
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d8a4      	bhi.n	8011102 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80111b8:	bf00      	nop
 80111ba:	3728      	adds	r7, #40	; 0x28
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}

080111c0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80111c0:	b480      	push	{r7}
 80111c2:	b083      	sub	sp, #12
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
 80111c8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	781a      	ldrb	r2, [r3, #0]
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	785a      	ldrb	r2, [r3, #1]
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80111da:	683b      	ldr	r3, [r7, #0]
 80111dc:	789a      	ldrb	r2, [r3, #2]
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	78da      	ldrb	r2, [r3, #3]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	791a      	ldrb	r2, [r3, #4]
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	795a      	ldrb	r2, [r3, #5]
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80111fa:	683b      	ldr	r3, [r7, #0]
 80111fc:	799a      	ldrb	r2, [r3, #6]
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8011202:	683b      	ldr	r3, [r7, #0]
 8011204:	79da      	ldrb	r2, [r3, #7]
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	7a1a      	ldrb	r2, [r3, #8]
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	721a      	strb	r2, [r3, #8]
}
 8011212:	bf00      	nop
 8011214:	370c      	adds	r7, #12
 8011216:	46bd      	mov	sp, r7
 8011218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121c:	4770      	bx	lr

0801121e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 801121e:	b480      	push	{r7}
 8011220:	b083      	sub	sp, #12
 8011222:	af00      	add	r7, sp, #0
 8011224:	6078      	str	r0, [r7, #4]
 8011226:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	781a      	ldrb	r2, [r3, #0]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	785a      	ldrb	r2, [r3, #1]
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	789a      	ldrb	r2, [r3, #2]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8011240:	683b      	ldr	r3, [r7, #0]
 8011242:	78da      	ldrb	r2, [r3, #3]
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	3304      	adds	r3, #4
 801124c:	781b      	ldrb	r3, [r3, #0]
 801124e:	b29a      	uxth	r2, r3
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	3305      	adds	r3, #5
 8011254:	781b      	ldrb	r3, [r3, #0]
 8011256:	b29b      	uxth	r3, r3
 8011258:	021b      	lsls	r3, r3, #8
 801125a:	b29b      	uxth	r3, r3
 801125c:	4313      	orrs	r3, r2
 801125e:	b29a      	uxth	r2, r3
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	799a      	ldrb	r2, [r3, #6]
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	719a      	strb	r2, [r3, #6]
}
 801126c:	bf00      	nop
 801126e:	370c      	adds	r7, #12
 8011270:	46bd      	mov	sp, r7
 8011272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011276:	4770      	bx	lr

08011278 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8011278:	b480      	push	{r7}
 801127a:	b087      	sub	sp, #28
 801127c:	af00      	add	r7, sp, #0
 801127e:	60f8      	str	r0, [r7, #12]
 8011280:	60b9      	str	r1, [r7, #8]
 8011282:	4613      	mov	r3, r2
 8011284:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	3301      	adds	r3, #1
 801128a:	781b      	ldrb	r3, [r3, #0]
 801128c:	2b03      	cmp	r3, #3
 801128e:	d120      	bne.n	80112d2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	781b      	ldrb	r3, [r3, #0]
 8011294:	1e9a      	subs	r2, r3, #2
 8011296:	88fb      	ldrh	r3, [r7, #6]
 8011298:	4293      	cmp	r3, r2
 801129a:	bf28      	it	cs
 801129c:	4613      	movcs	r3, r2
 801129e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	3302      	adds	r3, #2
 80112a4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80112a6:	2300      	movs	r3, #0
 80112a8:	82fb      	strh	r3, [r7, #22]
 80112aa:	e00b      	b.n	80112c4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80112ac:	8afb      	ldrh	r3, [r7, #22]
 80112ae:	68fa      	ldr	r2, [r7, #12]
 80112b0:	4413      	add	r3, r2
 80112b2:	781a      	ldrb	r2, [r3, #0]
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80112b8:	68bb      	ldr	r3, [r7, #8]
 80112ba:	3301      	adds	r3, #1
 80112bc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80112be:	8afb      	ldrh	r3, [r7, #22]
 80112c0:	3302      	adds	r3, #2
 80112c2:	82fb      	strh	r3, [r7, #22]
 80112c4:	8afa      	ldrh	r2, [r7, #22]
 80112c6:	8abb      	ldrh	r3, [r7, #20]
 80112c8:	429a      	cmp	r2, r3
 80112ca:	d3ef      	bcc.n	80112ac <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	2200      	movs	r2, #0
 80112d0:	701a      	strb	r2, [r3, #0]
  }
}
 80112d2:	bf00      	nop
 80112d4:	371c      	adds	r7, #28
 80112d6:	46bd      	mov	sp, r7
 80112d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112dc:	4770      	bx	lr

080112de <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80112de:	b480      	push	{r7}
 80112e0:	b085      	sub	sp, #20
 80112e2:	af00      	add	r7, sp, #0
 80112e4:	6078      	str	r0, [r7, #4]
 80112e6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	881a      	ldrh	r2, [r3, #0]
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	781b      	ldrb	r3, [r3, #0]
 80112f0:	b29b      	uxth	r3, r3
 80112f2:	4413      	add	r3, r2
 80112f4:	b29a      	uxth	r2, r3
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	781b      	ldrb	r3, [r3, #0]
 80112fe:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	4413      	add	r3, r2
 8011304:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011306:	68fb      	ldr	r3, [r7, #12]
}
 8011308:	4618      	mov	r0, r3
 801130a:	3714      	adds	r7, #20
 801130c:	46bd      	mov	sp, r7
 801130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011312:	4770      	bx	lr

08011314 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b086      	sub	sp, #24
 8011318:	af00      	add	r7, sp, #0
 801131a:	60f8      	str	r0, [r7, #12]
 801131c:	60b9      	str	r1, [r7, #8]
 801131e:	4613      	mov	r3, r2
 8011320:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8011322:	2301      	movs	r3, #1
 8011324:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	789b      	ldrb	r3, [r3, #2]
 801132a:	2b01      	cmp	r3, #1
 801132c:	d002      	beq.n	8011334 <USBH_CtlReq+0x20>
 801132e:	2b02      	cmp	r3, #2
 8011330:	d00f      	beq.n	8011352 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8011332:	e027      	b.n	8011384 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	68ba      	ldr	r2, [r7, #8]
 8011338:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	88fa      	ldrh	r2, [r7, #6]
 801133e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	2201      	movs	r2, #1
 8011344:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	2202      	movs	r2, #2
 801134a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801134c:	2301      	movs	r3, #1
 801134e:	75fb      	strb	r3, [r7, #23]
      break;
 8011350:	e018      	b.n	8011384 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8011352:	68f8      	ldr	r0, [r7, #12]
 8011354:	f000 f81c 	bl	8011390 <USBH_HandleControl>
 8011358:	4603      	mov	r3, r0
 801135a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 801135c:	7dfb      	ldrb	r3, [r7, #23]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d002      	beq.n	8011368 <USBH_CtlReq+0x54>
 8011362:	7dfb      	ldrb	r3, [r7, #23]
 8011364:	2b03      	cmp	r3, #3
 8011366:	d106      	bne.n	8011376 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	2201      	movs	r2, #1
 801136c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	2200      	movs	r2, #0
 8011372:	761a      	strb	r2, [r3, #24]
      break;
 8011374:	e005      	b.n	8011382 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8011376:	7dfb      	ldrb	r3, [r7, #23]
 8011378:	2b02      	cmp	r3, #2
 801137a:	d102      	bne.n	8011382 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	2201      	movs	r2, #1
 8011380:	709a      	strb	r2, [r3, #2]
      break;
 8011382:	bf00      	nop
  }
  return status;
 8011384:	7dfb      	ldrb	r3, [r7, #23]
}
 8011386:	4618      	mov	r0, r3
 8011388:	3718      	adds	r7, #24
 801138a:	46bd      	mov	sp, r7
 801138c:	bd80      	pop	{r7, pc}
	...

08011390 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b086      	sub	sp, #24
 8011394:	af02      	add	r7, sp, #8
 8011396:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8011398:	2301      	movs	r3, #1
 801139a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801139c:	2300      	movs	r3, #0
 801139e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	7e1b      	ldrb	r3, [r3, #24]
 80113a4:	3b01      	subs	r3, #1
 80113a6:	2b0a      	cmp	r3, #10
 80113a8:	f200 8156 	bhi.w	8011658 <USBH_HandleControl+0x2c8>
 80113ac:	a201      	add	r2, pc, #4	; (adr r2, 80113b4 <USBH_HandleControl+0x24>)
 80113ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113b2:	bf00      	nop
 80113b4:	080113e1 	.word	0x080113e1
 80113b8:	080113fb 	.word	0x080113fb
 80113bc:	08011465 	.word	0x08011465
 80113c0:	0801148b 	.word	0x0801148b
 80113c4:	080114c3 	.word	0x080114c3
 80113c8:	080114ed 	.word	0x080114ed
 80113cc:	0801153f 	.word	0x0801153f
 80113d0:	08011561 	.word	0x08011561
 80113d4:	0801159d 	.word	0x0801159d
 80113d8:	080115c3 	.word	0x080115c3
 80113dc:	08011601 	.word	0x08011601
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f103 0110 	add.w	r1, r3, #16
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	795b      	ldrb	r3, [r3, #5]
 80113ea:	461a      	mov	r2, r3
 80113ec:	6878      	ldr	r0, [r7, #4]
 80113ee:	f000 f943 	bl	8011678 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	2202      	movs	r2, #2
 80113f6:	761a      	strb	r2, [r3, #24]
      break;
 80113f8:	e139      	b.n	801166e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	795b      	ldrb	r3, [r3, #5]
 80113fe:	4619      	mov	r1, r3
 8011400:	6878      	ldr	r0, [r7, #4]
 8011402:	f000 fdcb 	bl	8011f9c <USBH_LL_GetURBState>
 8011406:	4603      	mov	r3, r0
 8011408:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 801140a:	7bbb      	ldrb	r3, [r7, #14]
 801140c:	2b01      	cmp	r3, #1
 801140e:	d11e      	bne.n	801144e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	7c1b      	ldrb	r3, [r3, #16]
 8011414:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011418:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	8adb      	ldrh	r3, [r3, #22]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d00a      	beq.n	8011438 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8011422:	7b7b      	ldrb	r3, [r7, #13]
 8011424:	2b80      	cmp	r3, #128	; 0x80
 8011426:	d103      	bne.n	8011430 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	2203      	movs	r2, #3
 801142c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801142e:	e115      	b.n	801165c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	2205      	movs	r2, #5
 8011434:	761a      	strb	r2, [r3, #24]
      break;
 8011436:	e111      	b.n	801165c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8011438:	7b7b      	ldrb	r3, [r7, #13]
 801143a:	2b80      	cmp	r3, #128	; 0x80
 801143c:	d103      	bne.n	8011446 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	2209      	movs	r2, #9
 8011442:	761a      	strb	r2, [r3, #24]
      break;
 8011444:	e10a      	b.n	801165c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	2207      	movs	r2, #7
 801144a:	761a      	strb	r2, [r3, #24]
      break;
 801144c:	e106      	b.n	801165c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801144e:	7bbb      	ldrb	r3, [r7, #14]
 8011450:	2b04      	cmp	r3, #4
 8011452:	d003      	beq.n	801145c <USBH_HandleControl+0xcc>
 8011454:	7bbb      	ldrb	r3, [r7, #14]
 8011456:	2b02      	cmp	r3, #2
 8011458:	f040 8100 	bne.w	801165c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	220b      	movs	r2, #11
 8011460:	761a      	strb	r2, [r3, #24]
      break;
 8011462:	e0fb      	b.n	801165c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801146a:	b29a      	uxth	r2, r3
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	6899      	ldr	r1, [r3, #8]
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	899a      	ldrh	r2, [r3, #12]
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	791b      	ldrb	r3, [r3, #4]
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f000 f93a 	bl	80116f6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	2204      	movs	r2, #4
 8011486:	761a      	strb	r2, [r3, #24]
      break;
 8011488:	e0f1      	b.n	801166e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	791b      	ldrb	r3, [r3, #4]
 801148e:	4619      	mov	r1, r3
 8011490:	6878      	ldr	r0, [r7, #4]
 8011492:	f000 fd83 	bl	8011f9c <USBH_LL_GetURBState>
 8011496:	4603      	mov	r3, r0
 8011498:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801149a:	7bbb      	ldrb	r3, [r7, #14]
 801149c:	2b01      	cmp	r3, #1
 801149e:	d102      	bne.n	80114a6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	2209      	movs	r2, #9
 80114a4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80114a6:	7bbb      	ldrb	r3, [r7, #14]
 80114a8:	2b05      	cmp	r3, #5
 80114aa:	d102      	bne.n	80114b2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80114ac:	2303      	movs	r3, #3
 80114ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80114b0:	e0d6      	b.n	8011660 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80114b2:	7bbb      	ldrb	r3, [r7, #14]
 80114b4:	2b04      	cmp	r3, #4
 80114b6:	f040 80d3 	bne.w	8011660 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	220b      	movs	r2, #11
 80114be:	761a      	strb	r2, [r3, #24]
      break;
 80114c0:	e0ce      	b.n	8011660 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6899      	ldr	r1, [r3, #8]
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	899a      	ldrh	r2, [r3, #12]
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	795b      	ldrb	r3, [r3, #5]
 80114ce:	2001      	movs	r0, #1
 80114d0:	9000      	str	r0, [sp, #0]
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f000 f8ea 	bl	80116ac <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80114de:	b29a      	uxth	r2, r3
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	2206      	movs	r2, #6
 80114e8:	761a      	strb	r2, [r3, #24]
      break;
 80114ea:	e0c0      	b.n	801166e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	795b      	ldrb	r3, [r3, #5]
 80114f0:	4619      	mov	r1, r3
 80114f2:	6878      	ldr	r0, [r7, #4]
 80114f4:	f000 fd52 	bl	8011f9c <USBH_LL_GetURBState>
 80114f8:	4603      	mov	r3, r0
 80114fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80114fc:	7bbb      	ldrb	r3, [r7, #14]
 80114fe:	2b01      	cmp	r3, #1
 8011500:	d103      	bne.n	801150a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	2207      	movs	r2, #7
 8011506:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8011508:	e0ac      	b.n	8011664 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 801150a:	7bbb      	ldrb	r3, [r7, #14]
 801150c:	2b05      	cmp	r3, #5
 801150e:	d105      	bne.n	801151c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	220c      	movs	r2, #12
 8011514:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8011516:	2303      	movs	r3, #3
 8011518:	73fb      	strb	r3, [r7, #15]
      break;
 801151a:	e0a3      	b.n	8011664 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 801151c:	7bbb      	ldrb	r3, [r7, #14]
 801151e:	2b02      	cmp	r3, #2
 8011520:	d103      	bne.n	801152a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	2205      	movs	r2, #5
 8011526:	761a      	strb	r2, [r3, #24]
      break;
 8011528:	e09c      	b.n	8011664 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 801152a:	7bbb      	ldrb	r3, [r7, #14]
 801152c:	2b04      	cmp	r3, #4
 801152e:	f040 8099 	bne.w	8011664 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	220b      	movs	r2, #11
 8011536:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8011538:	2302      	movs	r3, #2
 801153a:	73fb      	strb	r3, [r7, #15]
      break;
 801153c:	e092      	b.n	8011664 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	791b      	ldrb	r3, [r3, #4]
 8011542:	2200      	movs	r2, #0
 8011544:	2100      	movs	r1, #0
 8011546:	6878      	ldr	r0, [r7, #4]
 8011548:	f000 f8d5 	bl	80116f6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011552:	b29a      	uxth	r2, r3
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2208      	movs	r2, #8
 801155c:	761a      	strb	r2, [r3, #24]

      break;
 801155e:	e086      	b.n	801166e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	791b      	ldrb	r3, [r3, #4]
 8011564:	4619      	mov	r1, r3
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	f000 fd18 	bl	8011f9c <USBH_LL_GetURBState>
 801156c:	4603      	mov	r3, r0
 801156e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8011570:	7bbb      	ldrb	r3, [r7, #14]
 8011572:	2b01      	cmp	r3, #1
 8011574:	d105      	bne.n	8011582 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	220d      	movs	r2, #13
 801157a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 801157c:	2300      	movs	r3, #0
 801157e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8011580:	e072      	b.n	8011668 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8011582:	7bbb      	ldrb	r3, [r7, #14]
 8011584:	2b04      	cmp	r3, #4
 8011586:	d103      	bne.n	8011590 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	220b      	movs	r2, #11
 801158c:	761a      	strb	r2, [r3, #24]
      break;
 801158e:	e06b      	b.n	8011668 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8011590:	7bbb      	ldrb	r3, [r7, #14]
 8011592:	2b05      	cmp	r3, #5
 8011594:	d168      	bne.n	8011668 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8011596:	2303      	movs	r3, #3
 8011598:	73fb      	strb	r3, [r7, #15]
      break;
 801159a:	e065      	b.n	8011668 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	795b      	ldrb	r3, [r3, #5]
 80115a0:	2201      	movs	r2, #1
 80115a2:	9200      	str	r2, [sp, #0]
 80115a4:	2200      	movs	r2, #0
 80115a6:	2100      	movs	r1, #0
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f000 f87f 	bl	80116ac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80115b4:	b29a      	uxth	r2, r3
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	220a      	movs	r2, #10
 80115be:	761a      	strb	r2, [r3, #24]
      break;
 80115c0:	e055      	b.n	801166e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	795b      	ldrb	r3, [r3, #5]
 80115c6:	4619      	mov	r1, r3
 80115c8:	6878      	ldr	r0, [r7, #4]
 80115ca:	f000 fce7 	bl	8011f9c <USBH_LL_GetURBState>
 80115ce:	4603      	mov	r3, r0
 80115d0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80115d2:	7bbb      	ldrb	r3, [r7, #14]
 80115d4:	2b01      	cmp	r3, #1
 80115d6:	d105      	bne.n	80115e4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80115d8:	2300      	movs	r3, #0
 80115da:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	220d      	movs	r2, #13
 80115e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80115e2:	e043      	b.n	801166c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80115e4:	7bbb      	ldrb	r3, [r7, #14]
 80115e6:	2b02      	cmp	r3, #2
 80115e8:	d103      	bne.n	80115f2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	2209      	movs	r2, #9
 80115ee:	761a      	strb	r2, [r3, #24]
      break;
 80115f0:	e03c      	b.n	801166c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80115f2:	7bbb      	ldrb	r3, [r7, #14]
 80115f4:	2b04      	cmp	r3, #4
 80115f6:	d139      	bne.n	801166c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	220b      	movs	r2, #11
 80115fc:	761a      	strb	r2, [r3, #24]
      break;
 80115fe:	e035      	b.n	801166c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	7e5b      	ldrb	r3, [r3, #25]
 8011604:	3301      	adds	r3, #1
 8011606:	b2da      	uxtb	r2, r3
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	765a      	strb	r2, [r3, #25]
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	7e5b      	ldrb	r3, [r3, #25]
 8011610:	2b02      	cmp	r3, #2
 8011612:	d806      	bhi.n	8011622 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2201      	movs	r2, #1
 8011618:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	2201      	movs	r2, #1
 801161e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8011620:	e025      	b.n	801166e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011628:	2106      	movs	r1, #6
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2200      	movs	r2, #0
 8011632:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	795b      	ldrb	r3, [r3, #5]
 8011638:	4619      	mov	r1, r3
 801163a:	6878      	ldr	r0, [r7, #4]
 801163c:	f000 f8b9 	bl	80117b2 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	791b      	ldrb	r3, [r3, #4]
 8011644:	4619      	mov	r1, r3
 8011646:	6878      	ldr	r0, [r7, #4]
 8011648:	f000 f8b3 	bl	80117b2 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	2200      	movs	r2, #0
 8011650:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8011652:	2302      	movs	r3, #2
 8011654:	73fb      	strb	r3, [r7, #15]
      break;
 8011656:	e00a      	b.n	801166e <USBH_HandleControl+0x2de>

    default:
      break;
 8011658:	bf00      	nop
 801165a:	e008      	b.n	801166e <USBH_HandleControl+0x2de>
      break;
 801165c:	bf00      	nop
 801165e:	e006      	b.n	801166e <USBH_HandleControl+0x2de>
      break;
 8011660:	bf00      	nop
 8011662:	e004      	b.n	801166e <USBH_HandleControl+0x2de>
      break;
 8011664:	bf00      	nop
 8011666:	e002      	b.n	801166e <USBH_HandleControl+0x2de>
      break;
 8011668:	bf00      	nop
 801166a:	e000      	b.n	801166e <USBH_HandleControl+0x2de>
      break;
 801166c:	bf00      	nop
  }

  return status;
 801166e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011670:	4618      	mov	r0, r3
 8011672:	3710      	adds	r7, #16
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}

08011678 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b088      	sub	sp, #32
 801167c:	af04      	add	r7, sp, #16
 801167e:	60f8      	str	r0, [r7, #12]
 8011680:	60b9      	str	r1, [r7, #8]
 8011682:	4613      	mov	r3, r2
 8011684:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8011686:	79f9      	ldrb	r1, [r7, #7]
 8011688:	2300      	movs	r3, #0
 801168a:	9303      	str	r3, [sp, #12]
 801168c:	2308      	movs	r3, #8
 801168e:	9302      	str	r3, [sp, #8]
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	9301      	str	r3, [sp, #4]
 8011694:	2300      	movs	r3, #0
 8011696:	9300      	str	r3, [sp, #0]
 8011698:	2300      	movs	r3, #0
 801169a:	2200      	movs	r2, #0
 801169c:	68f8      	ldr	r0, [r7, #12]
 801169e:	f000 fc4c 	bl	8011f3a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80116a2:	2300      	movs	r3, #0
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	3710      	adds	r7, #16
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}

080116ac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b088      	sub	sp, #32
 80116b0:	af04      	add	r7, sp, #16
 80116b2:	60f8      	str	r0, [r7, #12]
 80116b4:	60b9      	str	r1, [r7, #8]
 80116b6:	4611      	mov	r1, r2
 80116b8:	461a      	mov	r2, r3
 80116ba:	460b      	mov	r3, r1
 80116bc:	80fb      	strh	r3, [r7, #6]
 80116be:	4613      	mov	r3, r2
 80116c0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d001      	beq.n	80116d0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80116cc:	2300      	movs	r3, #0
 80116ce:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80116d0:	7979      	ldrb	r1, [r7, #5]
 80116d2:	7e3b      	ldrb	r3, [r7, #24]
 80116d4:	9303      	str	r3, [sp, #12]
 80116d6:	88fb      	ldrh	r3, [r7, #6]
 80116d8:	9302      	str	r3, [sp, #8]
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	9301      	str	r3, [sp, #4]
 80116de:	2301      	movs	r3, #1
 80116e0:	9300      	str	r3, [sp, #0]
 80116e2:	2300      	movs	r3, #0
 80116e4:	2200      	movs	r2, #0
 80116e6:	68f8      	ldr	r0, [r7, #12]
 80116e8:	f000 fc27 	bl	8011f3a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80116ec:	2300      	movs	r3, #0
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3710      	adds	r7, #16
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}

080116f6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80116f6:	b580      	push	{r7, lr}
 80116f8:	b088      	sub	sp, #32
 80116fa:	af04      	add	r7, sp, #16
 80116fc:	60f8      	str	r0, [r7, #12]
 80116fe:	60b9      	str	r1, [r7, #8]
 8011700:	4611      	mov	r1, r2
 8011702:	461a      	mov	r2, r3
 8011704:	460b      	mov	r3, r1
 8011706:	80fb      	strh	r3, [r7, #6]
 8011708:	4613      	mov	r3, r2
 801170a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801170c:	7979      	ldrb	r1, [r7, #5]
 801170e:	2300      	movs	r3, #0
 8011710:	9303      	str	r3, [sp, #12]
 8011712:	88fb      	ldrh	r3, [r7, #6]
 8011714:	9302      	str	r3, [sp, #8]
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	9301      	str	r3, [sp, #4]
 801171a:	2301      	movs	r3, #1
 801171c:	9300      	str	r3, [sp, #0]
 801171e:	2300      	movs	r3, #0
 8011720:	2201      	movs	r2, #1
 8011722:	68f8      	ldr	r0, [r7, #12]
 8011724:	f000 fc09 	bl	8011f3a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8011728:	2300      	movs	r3, #0

}
 801172a:	4618      	mov	r0, r3
 801172c:	3710      	adds	r7, #16
 801172e:	46bd      	mov	sp, r7
 8011730:	bd80      	pop	{r7, pc}

08011732 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011732:	b580      	push	{r7, lr}
 8011734:	b086      	sub	sp, #24
 8011736:	af04      	add	r7, sp, #16
 8011738:	6078      	str	r0, [r7, #4]
 801173a:	4608      	mov	r0, r1
 801173c:	4611      	mov	r1, r2
 801173e:	461a      	mov	r2, r3
 8011740:	4603      	mov	r3, r0
 8011742:	70fb      	strb	r3, [r7, #3]
 8011744:	460b      	mov	r3, r1
 8011746:	70bb      	strb	r3, [r7, #2]
 8011748:	4613      	mov	r3, r2
 801174a:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801174c:	7878      	ldrb	r0, [r7, #1]
 801174e:	78ba      	ldrb	r2, [r7, #2]
 8011750:	78f9      	ldrb	r1, [r7, #3]
 8011752:	8b3b      	ldrh	r3, [r7, #24]
 8011754:	9302      	str	r3, [sp, #8]
 8011756:	7d3b      	ldrb	r3, [r7, #20]
 8011758:	9301      	str	r3, [sp, #4]
 801175a:	7c3b      	ldrb	r3, [r7, #16]
 801175c:	9300      	str	r3, [sp, #0]
 801175e:	4603      	mov	r3, r0
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	f000 fbbb 	bl	8011edc <USBH_LL_OpenPipe>

  return USBH_OK;
 8011766:	2300      	movs	r3, #0
}
 8011768:	4618      	mov	r0, r3
 801176a:	3708      	adds	r7, #8
 801176c:	46bd      	mov	sp, r7
 801176e:	bd80      	pop	{r7, pc}

08011770 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b084      	sub	sp, #16
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	460b      	mov	r3, r1
 801177a:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f000 f836 	bl	80117ee <USBH_GetFreePipe>
 8011782:	4603      	mov	r3, r0
 8011784:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8011786:	89fb      	ldrh	r3, [r7, #14]
 8011788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801178c:	4293      	cmp	r3, r2
 801178e:	d00a      	beq.n	80117a6 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8011790:	78fa      	ldrb	r2, [r7, #3]
 8011792:	89fb      	ldrh	r3, [r7, #14]
 8011794:	f003 030f 	and.w	r3, r3, #15
 8011798:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801179c:	6879      	ldr	r1, [r7, #4]
 801179e:	33e0      	adds	r3, #224	; 0xe0
 80117a0:	009b      	lsls	r3, r3, #2
 80117a2:	440b      	add	r3, r1
 80117a4:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80117a6:	89fb      	ldrh	r3, [r7, #14]
 80117a8:	b2db      	uxtb	r3, r3
}
 80117aa:	4618      	mov	r0, r3
 80117ac:	3710      	adds	r7, #16
 80117ae:	46bd      	mov	sp, r7
 80117b0:	bd80      	pop	{r7, pc}

080117b2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80117b2:	b480      	push	{r7}
 80117b4:	b083      	sub	sp, #12
 80117b6:	af00      	add	r7, sp, #0
 80117b8:	6078      	str	r0, [r7, #4]
 80117ba:	460b      	mov	r3, r1
 80117bc:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80117be:	78fb      	ldrb	r3, [r7, #3]
 80117c0:	2b0a      	cmp	r3, #10
 80117c2:	d80d      	bhi.n	80117e0 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80117c4:	78fb      	ldrb	r3, [r7, #3]
 80117c6:	687a      	ldr	r2, [r7, #4]
 80117c8:	33e0      	adds	r3, #224	; 0xe0
 80117ca:	009b      	lsls	r3, r3, #2
 80117cc:	4413      	add	r3, r2
 80117ce:	685a      	ldr	r2, [r3, #4]
 80117d0:	78fb      	ldrb	r3, [r7, #3]
 80117d2:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80117d6:	6879      	ldr	r1, [r7, #4]
 80117d8:	33e0      	adds	r3, #224	; 0xe0
 80117da:	009b      	lsls	r3, r3, #2
 80117dc:	440b      	add	r3, r1
 80117de:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80117e0:	2300      	movs	r3, #0
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	370c      	adds	r7, #12
 80117e6:	46bd      	mov	sp, r7
 80117e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ec:	4770      	bx	lr

080117ee <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80117ee:	b480      	push	{r7}
 80117f0:	b085      	sub	sp, #20
 80117f2:	af00      	add	r7, sp, #0
 80117f4:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80117f6:	2300      	movs	r3, #0
 80117f8:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80117fa:	2300      	movs	r3, #0
 80117fc:	73fb      	strb	r3, [r7, #15]
 80117fe:	e00f      	b.n	8011820 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8011800:	7bfb      	ldrb	r3, [r7, #15]
 8011802:	687a      	ldr	r2, [r7, #4]
 8011804:	33e0      	adds	r3, #224	; 0xe0
 8011806:	009b      	lsls	r3, r3, #2
 8011808:	4413      	add	r3, r2
 801180a:	685b      	ldr	r3, [r3, #4]
 801180c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011810:	2b00      	cmp	r3, #0
 8011812:	d102      	bne.n	801181a <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8011814:	7bfb      	ldrb	r3, [r7, #15]
 8011816:	b29b      	uxth	r3, r3
 8011818:	e007      	b.n	801182a <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 801181a:	7bfb      	ldrb	r3, [r7, #15]
 801181c:	3301      	adds	r3, #1
 801181e:	73fb      	strb	r3, [r7, #15]
 8011820:	7bfb      	ldrb	r3, [r7, #15]
 8011822:	2b0a      	cmp	r3, #10
 8011824:	d9ec      	bls.n	8011800 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8011826:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 801182a:	4618      	mov	r0, r3
 801182c:	3714      	adds	r7, #20
 801182e:	46bd      	mov	sp, r7
 8011830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011834:	4770      	bx	lr
	...

08011838 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011838:	b480      	push	{r7}
 801183a:	b087      	sub	sp, #28
 801183c:	af00      	add	r7, sp, #0
 801183e:	60f8      	str	r0, [r7, #12]
 8011840:	60b9      	str	r1, [r7, #8]
 8011842:	4613      	mov	r3, r2
 8011844:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011846:	2301      	movs	r3, #1
 8011848:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801184a:	2300      	movs	r3, #0
 801184c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801184e:	4b1f      	ldr	r3, [pc, #124]	; (80118cc <FATFS_LinkDriverEx+0x94>)
 8011850:	7a5b      	ldrb	r3, [r3, #9]
 8011852:	b2db      	uxtb	r3, r3
 8011854:	2b00      	cmp	r3, #0
 8011856:	d131      	bne.n	80118bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011858:	4b1c      	ldr	r3, [pc, #112]	; (80118cc <FATFS_LinkDriverEx+0x94>)
 801185a:	7a5b      	ldrb	r3, [r3, #9]
 801185c:	b2db      	uxtb	r3, r3
 801185e:	461a      	mov	r2, r3
 8011860:	4b1a      	ldr	r3, [pc, #104]	; (80118cc <FATFS_LinkDriverEx+0x94>)
 8011862:	2100      	movs	r1, #0
 8011864:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011866:	4b19      	ldr	r3, [pc, #100]	; (80118cc <FATFS_LinkDriverEx+0x94>)
 8011868:	7a5b      	ldrb	r3, [r3, #9]
 801186a:	b2db      	uxtb	r3, r3
 801186c:	4a17      	ldr	r2, [pc, #92]	; (80118cc <FATFS_LinkDriverEx+0x94>)
 801186e:	009b      	lsls	r3, r3, #2
 8011870:	4413      	add	r3, r2
 8011872:	68fa      	ldr	r2, [r7, #12]
 8011874:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011876:	4b15      	ldr	r3, [pc, #84]	; (80118cc <FATFS_LinkDriverEx+0x94>)
 8011878:	7a5b      	ldrb	r3, [r3, #9]
 801187a:	b2db      	uxtb	r3, r3
 801187c:	461a      	mov	r2, r3
 801187e:	4b13      	ldr	r3, [pc, #76]	; (80118cc <FATFS_LinkDriverEx+0x94>)
 8011880:	4413      	add	r3, r2
 8011882:	79fa      	ldrb	r2, [r7, #7]
 8011884:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011886:	4b11      	ldr	r3, [pc, #68]	; (80118cc <FATFS_LinkDriverEx+0x94>)
 8011888:	7a5b      	ldrb	r3, [r3, #9]
 801188a:	b2db      	uxtb	r3, r3
 801188c:	1c5a      	adds	r2, r3, #1
 801188e:	b2d1      	uxtb	r1, r2
 8011890:	4a0e      	ldr	r2, [pc, #56]	; (80118cc <FATFS_LinkDriverEx+0x94>)
 8011892:	7251      	strb	r1, [r2, #9]
 8011894:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011896:	7dbb      	ldrb	r3, [r7, #22]
 8011898:	3330      	adds	r3, #48	; 0x30
 801189a:	b2da      	uxtb	r2, r3
 801189c:	68bb      	ldr	r3, [r7, #8]
 801189e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	3301      	adds	r3, #1
 80118a4:	223a      	movs	r2, #58	; 0x3a
 80118a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	3302      	adds	r3, #2
 80118ac:	222f      	movs	r2, #47	; 0x2f
 80118ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	3303      	adds	r3, #3
 80118b4:	2200      	movs	r2, #0
 80118b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80118b8:	2300      	movs	r3, #0
 80118ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80118bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80118be:	4618      	mov	r0, r3
 80118c0:	371c      	adds	r7, #28
 80118c2:	46bd      	mov	sp, r7
 80118c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c8:	4770      	bx	lr
 80118ca:	bf00      	nop
 80118cc:	2000023c 	.word	0x2000023c

080118d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b082      	sub	sp, #8
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
 80118d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80118da:	2200      	movs	r2, #0
 80118dc:	6839      	ldr	r1, [r7, #0]
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f7ff ffaa 	bl	8011838 <FATFS_LinkDriverEx>
 80118e4:	4603      	mov	r3, r0
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	3708      	adds	r7, #8
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}

080118ee <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80118ee:	b480      	push	{r7}
 80118f0:	b085      	sub	sp, #20
 80118f2:	af00      	add	r7, sp, #0
 80118f4:	6078      	str	r0, [r7, #4]
 80118f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	685b      	ldr	r3, [r3, #4]
 80118fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	68fa      	ldr	r2, [r7, #12]
 8011902:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	689a      	ldr	r2, [r3, #8]
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	689b      	ldr	r3, [r3, #8]
 8011910:	683a      	ldr	r2, [r7, #0]
 8011912:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	683a      	ldr	r2, [r7, #0]
 8011918:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	687a      	ldr	r2, [r7, #4]
 801191e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	1c5a      	adds	r2, r3, #1
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	601a      	str	r2, [r3, #0]
}
 801192a:	bf00      	nop
 801192c:	3714      	adds	r7, #20
 801192e:	46bd      	mov	sp, r7
 8011930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011934:	4770      	bx	lr

08011936 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011936:	b480      	push	{r7}
 8011938:	b085      	sub	sp, #20
 801193a:	af00      	add	r7, sp, #0
 801193c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	691b      	ldr	r3, [r3, #16]
 8011942:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	685b      	ldr	r3, [r3, #4]
 8011948:	687a      	ldr	r2, [r7, #4]
 801194a:	6892      	ldr	r2, [r2, #8]
 801194c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	689b      	ldr	r3, [r3, #8]
 8011952:	687a      	ldr	r2, [r7, #4]
 8011954:	6852      	ldr	r2, [r2, #4]
 8011956:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	685b      	ldr	r3, [r3, #4]
 801195c:	687a      	ldr	r2, [r7, #4]
 801195e:	429a      	cmp	r2, r3
 8011960:	d103      	bne.n	801196a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	689a      	ldr	r2, [r3, #8]
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2200      	movs	r2, #0
 801196e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	1e5a      	subs	r2, r3, #1
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	681b      	ldr	r3, [r3, #0]
}
 801197e:	4618      	mov	r0, r3
 8011980:	3714      	adds	r7, #20
 8011982:	46bd      	mov	sp, r7
 8011984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011988:	4770      	bx	lr
	...

0801198c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b086      	sub	sp, #24
 8011990:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011992:	2300      	movs	r3, #0
 8011994:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011996:	4b4f      	ldr	r3, [pc, #316]	; (8011ad4 <xTaskIncrementTick+0x148>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	2b00      	cmp	r3, #0
 801199c:	f040 808a 	bne.w	8011ab4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80119a0:	4b4d      	ldr	r3, [pc, #308]	; (8011ad8 <xTaskIncrementTick+0x14c>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	3301      	adds	r3, #1
 80119a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80119a8:	4a4b      	ldr	r2, [pc, #300]	; (8011ad8 <xTaskIncrementTick+0x14c>)
 80119aa:	693b      	ldr	r3, [r7, #16]
 80119ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80119ae:	693b      	ldr	r3, [r7, #16]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d122      	bne.n	80119fa <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80119b4:	4b49      	ldr	r3, [pc, #292]	; (8011adc <xTaskIncrementTick+0x150>)
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d00c      	beq.n	80119d8 <xTaskIncrementTick+0x4c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80119be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119c2:	b672      	cpsid	i
 80119c4:	f383 8811 	msr	BASEPRI, r3
 80119c8:	f3bf 8f6f 	isb	sy
 80119cc:	f3bf 8f4f 	dsb	sy
 80119d0:	b662      	cpsie	i
 80119d2:	603b      	str	r3, [r7, #0]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80119d4:	bf00      	nop
 80119d6:	e7fe      	b.n	80119d6 <xTaskIncrementTick+0x4a>
 80119d8:	4b40      	ldr	r3, [pc, #256]	; (8011adc <xTaskIncrementTick+0x150>)
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	60fb      	str	r3, [r7, #12]
 80119de:	4b40      	ldr	r3, [pc, #256]	; (8011ae0 <xTaskIncrementTick+0x154>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	4a3e      	ldr	r2, [pc, #248]	; (8011adc <xTaskIncrementTick+0x150>)
 80119e4:	6013      	str	r3, [r2, #0]
 80119e6:	4a3e      	ldr	r2, [pc, #248]	; (8011ae0 <xTaskIncrementTick+0x154>)
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	6013      	str	r3, [r2, #0]
 80119ec:	4b3d      	ldr	r3, [pc, #244]	; (8011ae4 <xTaskIncrementTick+0x158>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	3301      	adds	r3, #1
 80119f2:	4a3c      	ldr	r2, [pc, #240]	; (8011ae4 <xTaskIncrementTick+0x158>)
 80119f4:	6013      	str	r3, [r2, #0]
 80119f6:	f000 f905 	bl	8011c04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80119fa:	4b3b      	ldr	r3, [pc, #236]	; (8011ae8 <xTaskIncrementTick+0x15c>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	693a      	ldr	r2, [r7, #16]
 8011a00:	429a      	cmp	r2, r3
 8011a02:	d348      	bcc.n	8011a96 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a04:	4b35      	ldr	r3, [pc, #212]	; (8011adc <xTaskIncrementTick+0x150>)
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d104      	bne.n	8011a18 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a0e:	4b36      	ldr	r3, [pc, #216]	; (8011ae8 <xTaskIncrementTick+0x15c>)
 8011a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a14:	601a      	str	r2, [r3, #0]
					break;
 8011a16:	e03e      	b.n	8011a96 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a18:	4b30      	ldr	r3, [pc, #192]	; (8011adc <xTaskIncrementTick+0x150>)
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	68db      	ldr	r3, [r3, #12]
 8011a1e:	68db      	ldr	r3, [r3, #12]
 8011a20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	685b      	ldr	r3, [r3, #4]
 8011a26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011a28:	693a      	ldr	r2, [r7, #16]
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	429a      	cmp	r2, r3
 8011a2e:	d203      	bcs.n	8011a38 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011a30:	4a2d      	ldr	r2, [pc, #180]	; (8011ae8 <xTaskIncrementTick+0x15c>)
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011a36:	e02e      	b.n	8011a96 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011a38:	68bb      	ldr	r3, [r7, #8]
 8011a3a:	3304      	adds	r3, #4
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f7ff ff7a 	bl	8011936 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011a42:	68bb      	ldr	r3, [r7, #8]
 8011a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d004      	beq.n	8011a54 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	3318      	adds	r3, #24
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f7ff ff71 	bl	8011936 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a58:	2201      	movs	r2, #1
 8011a5a:	409a      	lsls	r2, r3
 8011a5c:	4b23      	ldr	r3, [pc, #140]	; (8011aec <xTaskIncrementTick+0x160>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	4313      	orrs	r3, r2
 8011a62:	4a22      	ldr	r2, [pc, #136]	; (8011aec <xTaskIncrementTick+0x160>)
 8011a64:	6013      	str	r3, [r2, #0]
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a6a:	4613      	mov	r3, r2
 8011a6c:	009b      	lsls	r3, r3, #2
 8011a6e:	4413      	add	r3, r2
 8011a70:	009b      	lsls	r3, r3, #2
 8011a72:	4a1f      	ldr	r2, [pc, #124]	; (8011af0 <xTaskIncrementTick+0x164>)
 8011a74:	441a      	add	r2, r3
 8011a76:	68bb      	ldr	r3, [r7, #8]
 8011a78:	3304      	adds	r3, #4
 8011a7a:	4619      	mov	r1, r3
 8011a7c:	4610      	mov	r0, r2
 8011a7e:	f7ff ff36 	bl	80118ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a86:	4b1b      	ldr	r3, [pc, #108]	; (8011af4 <xTaskIncrementTick+0x168>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d3b9      	bcc.n	8011a04 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8011a90:	2301      	movs	r3, #1
 8011a92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a94:	e7b6      	b.n	8011a04 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011a96:	4b17      	ldr	r3, [pc, #92]	; (8011af4 <xTaskIncrementTick+0x168>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a9c:	4914      	ldr	r1, [pc, #80]	; (8011af0 <xTaskIncrementTick+0x164>)
 8011a9e:	4613      	mov	r3, r2
 8011aa0:	009b      	lsls	r3, r3, #2
 8011aa2:	4413      	add	r3, r2
 8011aa4:	009b      	lsls	r3, r3, #2
 8011aa6:	440b      	add	r3, r1
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	2b01      	cmp	r3, #1
 8011aac:	d907      	bls.n	8011abe <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8011aae:	2301      	movs	r3, #1
 8011ab0:	617b      	str	r3, [r7, #20]
 8011ab2:	e004      	b.n	8011abe <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011ab4:	4b10      	ldr	r3, [pc, #64]	; (8011af8 <xTaskIncrementTick+0x16c>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	3301      	adds	r3, #1
 8011aba:	4a0f      	ldr	r2, [pc, #60]	; (8011af8 <xTaskIncrementTick+0x16c>)
 8011abc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011abe:	4b0f      	ldr	r3, [pc, #60]	; (8011afc <xTaskIncrementTick+0x170>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d001      	beq.n	8011aca <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011aca:	697b      	ldr	r3, [r7, #20]
}
 8011acc:	4618      	mov	r0, r3
 8011ace:	3718      	adds	r7, #24
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}
 8011ad4:	200002f8 	.word	0x200002f8
 8011ad8:	200002e0 	.word	0x200002e0
 8011adc:	200002d8 	.word	0x200002d8
 8011ae0:	200002dc 	.word	0x200002dc
 8011ae4:	200002f0 	.word	0x200002f0
 8011ae8:	200002f4 	.word	0x200002f4
 8011aec:	200002e4 	.word	0x200002e4
 8011af0:	2000024c 	.word	0x2000024c
 8011af4:	20000248 	.word	0x20000248
 8011af8:	200002e8 	.word	0x200002e8
 8011afc:	200002ec 	.word	0x200002ec

08011b00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b088      	sub	sp, #32
 8011b04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011b06:	4b3a      	ldr	r3, [pc, #232]	; (8011bf0 <vTaskSwitchContext+0xf0>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d003      	beq.n	8011b16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011b0e:	4b39      	ldr	r3, [pc, #228]	; (8011bf4 <vTaskSwitchContext+0xf4>)
 8011b10:	2201      	movs	r2, #1
 8011b12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011b14:	e068      	b.n	8011be8 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8011b16:	4b37      	ldr	r3, [pc, #220]	; (8011bf4 <vTaskSwitchContext+0xf4>)
 8011b18:	2200      	movs	r2, #0
 8011b1a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011b1c:	4b36      	ldr	r3, [pc, #216]	; (8011bf8 <vTaskSwitchContext+0xf8>)
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b22:	61fb      	str	r3, [r7, #28]
 8011b24:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8011b28:	61bb      	str	r3, [r7, #24]
 8011b2a:	69fb      	ldr	r3, [r7, #28]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	69ba      	ldr	r2, [r7, #24]
 8011b30:	429a      	cmp	r2, r3
 8011b32:	d111      	bne.n	8011b58 <vTaskSwitchContext+0x58>
 8011b34:	69fb      	ldr	r3, [r7, #28]
 8011b36:	3304      	adds	r3, #4
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	69ba      	ldr	r2, [r7, #24]
 8011b3c:	429a      	cmp	r2, r3
 8011b3e:	d10b      	bne.n	8011b58 <vTaskSwitchContext+0x58>
 8011b40:	69fb      	ldr	r3, [r7, #28]
 8011b42:	3308      	adds	r3, #8
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	69ba      	ldr	r2, [r7, #24]
 8011b48:	429a      	cmp	r2, r3
 8011b4a:	d105      	bne.n	8011b58 <vTaskSwitchContext+0x58>
 8011b4c:	69fb      	ldr	r3, [r7, #28]
 8011b4e:	330c      	adds	r3, #12
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	69ba      	ldr	r2, [r7, #24]
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d008      	beq.n	8011b6a <vTaskSwitchContext+0x6a>
 8011b58:	4b27      	ldr	r3, [pc, #156]	; (8011bf8 <vTaskSwitchContext+0xf8>)
 8011b5a:	681a      	ldr	r2, [r3, #0]
 8011b5c:	4b26      	ldr	r3, [pc, #152]	; (8011bf8 <vTaskSwitchContext+0xf8>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	3334      	adds	r3, #52	; 0x34
 8011b62:	4619      	mov	r1, r3
 8011b64:	4610      	mov	r0, r2
 8011b66:	f7ef f9bb 	bl	8000ee0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b6a:	4b24      	ldr	r3, [pc, #144]	; (8011bfc <vTaskSwitchContext+0xfc>)
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	fab3 f383 	clz	r3, r3
 8011b76:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011b78:	7afb      	ldrb	r3, [r7, #11]
 8011b7a:	f1c3 031f 	rsb	r3, r3, #31
 8011b7e:	617b      	str	r3, [r7, #20]
 8011b80:	491f      	ldr	r1, [pc, #124]	; (8011c00 <vTaskSwitchContext+0x100>)
 8011b82:	697a      	ldr	r2, [r7, #20]
 8011b84:	4613      	mov	r3, r2
 8011b86:	009b      	lsls	r3, r3, #2
 8011b88:	4413      	add	r3, r2
 8011b8a:	009b      	lsls	r3, r3, #2
 8011b8c:	440b      	add	r3, r1
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d10c      	bne.n	8011bae <vTaskSwitchContext+0xae>
	__asm volatile
 8011b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b98:	b672      	cpsid	i
 8011b9a:	f383 8811 	msr	BASEPRI, r3
 8011b9e:	f3bf 8f6f 	isb	sy
 8011ba2:	f3bf 8f4f 	dsb	sy
 8011ba6:	b662      	cpsie	i
 8011ba8:	607b      	str	r3, [r7, #4]
}
 8011baa:	bf00      	nop
 8011bac:	e7fe      	b.n	8011bac <vTaskSwitchContext+0xac>
 8011bae:	697a      	ldr	r2, [r7, #20]
 8011bb0:	4613      	mov	r3, r2
 8011bb2:	009b      	lsls	r3, r3, #2
 8011bb4:	4413      	add	r3, r2
 8011bb6:	009b      	lsls	r3, r3, #2
 8011bb8:	4a11      	ldr	r2, [pc, #68]	; (8011c00 <vTaskSwitchContext+0x100>)
 8011bba:	4413      	add	r3, r2
 8011bbc:	613b      	str	r3, [r7, #16]
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	685b      	ldr	r3, [r3, #4]
 8011bc2:	685a      	ldr	r2, [r3, #4]
 8011bc4:	693b      	ldr	r3, [r7, #16]
 8011bc6:	605a      	str	r2, [r3, #4]
 8011bc8:	693b      	ldr	r3, [r7, #16]
 8011bca:	685a      	ldr	r2, [r3, #4]
 8011bcc:	693b      	ldr	r3, [r7, #16]
 8011bce:	3308      	adds	r3, #8
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	d104      	bne.n	8011bde <vTaskSwitchContext+0xde>
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	685b      	ldr	r3, [r3, #4]
 8011bd8:	685a      	ldr	r2, [r3, #4]
 8011bda:	693b      	ldr	r3, [r7, #16]
 8011bdc:	605a      	str	r2, [r3, #4]
 8011bde:	693b      	ldr	r3, [r7, #16]
 8011be0:	685b      	ldr	r3, [r3, #4]
 8011be2:	68db      	ldr	r3, [r3, #12]
 8011be4:	4a04      	ldr	r2, [pc, #16]	; (8011bf8 <vTaskSwitchContext+0xf8>)
 8011be6:	6013      	str	r3, [r2, #0]
}
 8011be8:	bf00      	nop
 8011bea:	3720      	adds	r7, #32
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bd80      	pop	{r7, pc}
 8011bf0:	200002f8 	.word	0x200002f8
 8011bf4:	200002ec 	.word	0x200002ec
 8011bf8:	20000248 	.word	0x20000248
 8011bfc:	200002e4 	.word	0x200002e4
 8011c00:	2000024c 	.word	0x2000024c

08011c04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011c04:	b480      	push	{r7}
 8011c06:	b083      	sub	sp, #12
 8011c08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011c0a:	4b0c      	ldr	r3, [pc, #48]	; (8011c3c <prvResetNextTaskUnblockTime+0x38>)
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d104      	bne.n	8011c1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011c14:	4b0a      	ldr	r3, [pc, #40]	; (8011c40 <prvResetNextTaskUnblockTime+0x3c>)
 8011c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011c1c:	e008      	b.n	8011c30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c1e:	4b07      	ldr	r3, [pc, #28]	; (8011c3c <prvResetNextTaskUnblockTime+0x38>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	68db      	ldr	r3, [r3, #12]
 8011c24:	68db      	ldr	r3, [r3, #12]
 8011c26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	685b      	ldr	r3, [r3, #4]
 8011c2c:	4a04      	ldr	r2, [pc, #16]	; (8011c40 <prvResetNextTaskUnblockTime+0x3c>)
 8011c2e:	6013      	str	r3, [r2, #0]
}
 8011c30:	bf00      	nop
 8011c32:	370c      	adds	r7, #12
 8011c34:	46bd      	mov	sp, r7
 8011c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3a:	4770      	bx	lr
 8011c3c:	200002d8 	.word	0x200002d8
 8011c40:	200002f4 	.word	0x200002f4
	...

08011c50 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011c50:	4b07      	ldr	r3, [pc, #28]	; (8011c70 <pxCurrentTCBConst2>)
 8011c52:	6819      	ldr	r1, [r3, #0]
 8011c54:	6808      	ldr	r0, [r1, #0]
 8011c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c5a:	f380 8809 	msr	PSP, r0
 8011c5e:	f3bf 8f6f 	isb	sy
 8011c62:	f04f 0000 	mov.w	r0, #0
 8011c66:	f380 8811 	msr	BASEPRI, r0
 8011c6a:	4770      	bx	lr
 8011c6c:	f3af 8000 	nop.w

08011c70 <pxCurrentTCBConst2>:
 8011c70:	20000248 	.word	0x20000248
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011c74:	bf00      	nop
 8011c76:	bf00      	nop
	...

08011c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011c80:	f3ef 8009 	mrs	r0, PSP
 8011c84:	f3bf 8f6f 	isb	sy
 8011c88:	4b15      	ldr	r3, [pc, #84]	; (8011ce0 <pxCurrentTCBConst>)
 8011c8a:	681a      	ldr	r2, [r3, #0]
 8011c8c:	f01e 0f10 	tst.w	lr, #16
 8011c90:	bf08      	it	eq
 8011c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c9a:	6010      	str	r0, [r2, #0]
 8011c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011ca4:	b672      	cpsid	i
 8011ca6:	f380 8811 	msr	BASEPRI, r0
 8011caa:	f3bf 8f4f 	dsb	sy
 8011cae:	f3bf 8f6f 	isb	sy
 8011cb2:	b662      	cpsie	i
 8011cb4:	f7ff ff24 	bl	8011b00 <vTaskSwitchContext>
 8011cb8:	f04f 0000 	mov.w	r0, #0
 8011cbc:	f380 8811 	msr	BASEPRI, r0
 8011cc0:	bc09      	pop	{r0, r3}
 8011cc2:	6819      	ldr	r1, [r3, #0]
 8011cc4:	6808      	ldr	r0, [r1, #0]
 8011cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cca:	f01e 0f10 	tst.w	lr, #16
 8011cce:	bf08      	it	eq
 8011cd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011cd4:	f380 8809 	msr	PSP, r0
 8011cd8:	f3bf 8f6f 	isb	sy
 8011cdc:	4770      	bx	lr
 8011cde:	bf00      	nop

08011ce0 <pxCurrentTCBConst>:
 8011ce0:	20000248 	.word	0x20000248
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011ce4:	bf00      	nop
 8011ce6:	bf00      	nop

08011ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b082      	sub	sp, #8
 8011cec:	af00      	add	r7, sp, #0
	__asm volatile
 8011cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf2:	b672      	cpsid	i
 8011cf4:	f383 8811 	msr	BASEPRI, r3
 8011cf8:	f3bf 8f6f 	isb	sy
 8011cfc:	f3bf 8f4f 	dsb	sy
 8011d00:	b662      	cpsie	i
 8011d02:	607b      	str	r3, [r7, #4]
}
 8011d04:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011d06:	f7ff fe41 	bl	801198c <xTaskIncrementTick>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d003      	beq.n	8011d18 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011d10:	4b06      	ldr	r3, [pc, #24]	; (8011d2c <SysTick_Handler+0x44>)
 8011d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d16:	601a      	str	r2, [r3, #0]
 8011d18:	2300      	movs	r3, #0
 8011d1a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011d22:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011d24:	bf00      	nop
 8011d26:	3708      	adds	r7, #8
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}
 8011d2c:	e000ed04 	.word	0xe000ed04

08011d30 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8011d34:	4802      	ldr	r0, [pc, #8]	; (8011d40 <MX_USB_HOST_Process+0x10>)
 8011d36:	f7fe fbd5 	bl	80104e4 <USBH_Process>
}
 8011d3a:	bf00      	nop
 8011d3c:	bd80      	pop	{r7, pc}
 8011d3e:	bf00      	nop
 8011d40:	20040cc8 	.word	0x20040cc8

08011d44 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b082      	sub	sp, #8
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011d52:	4618      	mov	r0, r3
 8011d54:	f7fe ff8a 	bl	8010c6c <USBH_LL_IncTimer>
}
 8011d58:	bf00      	nop
 8011d5a:	3708      	adds	r7, #8
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	bd80      	pop	{r7, pc}

08011d60 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b082      	sub	sp, #8
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f7fe ffc2 	bl	8010cf8 <USBH_LL_Connect>
}
 8011d74:	bf00      	nop
 8011d76:	3708      	adds	r7, #8
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	bd80      	pop	{r7, pc}

08011d7c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b082      	sub	sp, #8
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f7fe ffcb 	bl	8010d26 <USBH_LL_Disconnect>
}
 8011d90:	bf00      	nop
 8011d92:	3708      	adds	r7, #8
 8011d94:	46bd      	mov	sp, r7
 8011d96:	bd80      	pop	{r7, pc}

08011d98 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011d98:	b480      	push	{r7}
 8011d9a:	b083      	sub	sp, #12
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
 8011da0:	460b      	mov	r3, r1
 8011da2:	70fb      	strb	r3, [r7, #3]
 8011da4:	4613      	mov	r3, r2
 8011da6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8011da8:	bf00      	nop
 8011daa:	370c      	adds	r7, #12
 8011dac:	46bd      	mov	sp, r7
 8011dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db2:	4770      	bx	lr

08011db4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b082      	sub	sp, #8
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f7fe ff7c 	bl	8010cc0 <USBH_LL_PortEnabled>
}
 8011dc8:	bf00      	nop
 8011dca:	3708      	adds	r7, #8
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}

08011dd0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b082      	sub	sp, #8
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011dde:	4618      	mov	r0, r3
 8011de0:	f7fe ff7c 	bl	8010cdc <USBH_LL_PortDisabled>
}
 8011de4:	bf00      	nop
 8011de6:	3708      	adds	r7, #8
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}

08011dec <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b084      	sub	sp, #16
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011df4:	2300      	movs	r3, #0
 8011df6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7f4 fbfe 	bl	8006604 <HAL_HCD_Start>
 8011e08:	4603      	mov	r3, r0
 8011e0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011e0c:	7bfb      	ldrb	r3, [r7, #15]
 8011e0e:	4618      	mov	r0, r3
 8011e10:	f000 f8fa 	bl	8012008 <USBH_Get_USB_Status>
 8011e14:	4603      	mov	r3, r0
 8011e16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011e18:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	3710      	adds	r7, #16
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd80      	pop	{r7, pc}

08011e22 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011e22:	b580      	push	{r7, lr}
 8011e24:	b084      	sub	sp, #16
 8011e26:	af00      	add	r7, sp, #0
 8011e28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011e2e:	2300      	movs	r3, #0
 8011e30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f7f4 fc06 	bl	800664a <HAL_HCD_Stop>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011e42:	7bfb      	ldrb	r3, [r7, #15]
 8011e44:	4618      	mov	r0, r3
 8011e46:	f000 f8df 	bl	8012008 <USBH_Get_USB_Status>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011e4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e50:	4618      	mov	r0, r3
 8011e52:	3710      	adds	r7, #16
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}

08011e58 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b084      	sub	sp, #16
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011e60:	2301      	movs	r3, #1
 8011e62:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f7f4 fc2c 	bl	80066c8 <HAL_HCD_GetCurrentSpeed>
 8011e70:	4603      	mov	r3, r0
 8011e72:	2b02      	cmp	r3, #2
 8011e74:	d00c      	beq.n	8011e90 <USBH_LL_GetSpeed+0x38>
 8011e76:	2b02      	cmp	r3, #2
 8011e78:	d80d      	bhi.n	8011e96 <USBH_LL_GetSpeed+0x3e>
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d002      	beq.n	8011e84 <USBH_LL_GetSpeed+0x2c>
 8011e7e:	2b01      	cmp	r3, #1
 8011e80:	d003      	beq.n	8011e8a <USBH_LL_GetSpeed+0x32>
 8011e82:	e008      	b.n	8011e96 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011e84:	2300      	movs	r3, #0
 8011e86:	73fb      	strb	r3, [r7, #15]
    break;
 8011e88:	e008      	b.n	8011e9c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8011e8a:	2301      	movs	r3, #1
 8011e8c:	73fb      	strb	r3, [r7, #15]
    break;
 8011e8e:	e005      	b.n	8011e9c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011e90:	2302      	movs	r3, #2
 8011e92:	73fb      	strb	r3, [r7, #15]
    break;
 8011e94:	e002      	b.n	8011e9c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8011e96:	2301      	movs	r3, #1
 8011e98:	73fb      	strb	r3, [r7, #15]
    break;
 8011e9a:	bf00      	nop
  }
  return  speed;
 8011e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	3710      	adds	r7, #16
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	bd80      	pop	{r7, pc}

08011ea6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011ea6:	b580      	push	{r7, lr}
 8011ea8:	b084      	sub	sp, #16
 8011eaa:	af00      	add	r7, sp, #0
 8011eac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f7f4 fbe1 	bl	8006684 <HAL_HCD_ResetPort>
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011ec6:	7bfb      	ldrb	r3, [r7, #15]
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f000 f89d 	bl	8012008 <USBH_Get_USB_Status>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ed2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3710      	adds	r7, #16
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}

08011edc <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011edc:	b590      	push	{r4, r7, lr}
 8011ede:	b089      	sub	sp, #36	; 0x24
 8011ee0:	af04      	add	r7, sp, #16
 8011ee2:	6078      	str	r0, [r7, #4]
 8011ee4:	4608      	mov	r0, r1
 8011ee6:	4611      	mov	r1, r2
 8011ee8:	461a      	mov	r2, r3
 8011eea:	4603      	mov	r3, r0
 8011eec:	70fb      	strb	r3, [r7, #3]
 8011eee:	460b      	mov	r3, r1
 8011ef0:	70bb      	strb	r3, [r7, #2]
 8011ef2:	4613      	mov	r3, r2
 8011ef4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011efa:	2300      	movs	r3, #0
 8011efc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011f04:	787c      	ldrb	r4, [r7, #1]
 8011f06:	78ba      	ldrb	r2, [r7, #2]
 8011f08:	78f9      	ldrb	r1, [r7, #3]
 8011f0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011f0c:	9302      	str	r3, [sp, #8]
 8011f0e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011f12:	9301      	str	r3, [sp, #4]
 8011f14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011f18:	9300      	str	r3, [sp, #0]
 8011f1a:	4623      	mov	r3, r4
 8011f1c:	f7f4 f889 	bl	8006032 <HAL_HCD_HC_Init>
 8011f20:	4603      	mov	r3, r0
 8011f22:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011f24:	7bfb      	ldrb	r3, [r7, #15]
 8011f26:	4618      	mov	r0, r3
 8011f28:	f000 f86e 	bl	8012008 <USBH_Get_USB_Status>
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f30:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f32:	4618      	mov	r0, r3
 8011f34:	3714      	adds	r7, #20
 8011f36:	46bd      	mov	sp, r7
 8011f38:	bd90      	pop	{r4, r7, pc}

08011f3a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8011f3a:	b590      	push	{r4, r7, lr}
 8011f3c:	b089      	sub	sp, #36	; 0x24
 8011f3e:	af04      	add	r7, sp, #16
 8011f40:	6078      	str	r0, [r7, #4]
 8011f42:	4608      	mov	r0, r1
 8011f44:	4611      	mov	r1, r2
 8011f46:	461a      	mov	r2, r3
 8011f48:	4603      	mov	r3, r0
 8011f4a:	70fb      	strb	r3, [r7, #3]
 8011f4c:	460b      	mov	r3, r1
 8011f4e:	70bb      	strb	r3, [r7, #2]
 8011f50:	4613      	mov	r3, r2
 8011f52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f54:	2300      	movs	r3, #0
 8011f56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011f58:	2300      	movs	r3, #0
 8011f5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011f62:	787c      	ldrb	r4, [r7, #1]
 8011f64:	78ba      	ldrb	r2, [r7, #2]
 8011f66:	78f9      	ldrb	r1, [r7, #3]
 8011f68:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011f6c:	9303      	str	r3, [sp, #12]
 8011f6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011f70:	9302      	str	r3, [sp, #8]
 8011f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f74:	9301      	str	r3, [sp, #4]
 8011f76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011f7a:	9300      	str	r3, [sp, #0]
 8011f7c:	4623      	mov	r3, r4
 8011f7e:	f7f4 f8e7 	bl	8006150 <HAL_HCD_HC_SubmitRequest>
 8011f82:	4603      	mov	r3, r0
 8011f84:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011f86:	7bfb      	ldrb	r3, [r7, #15]
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f000 f83d 	bl	8012008 <USBH_Get_USB_Status>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f92:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	3714      	adds	r7, #20
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd90      	pop	{r4, r7, pc}

08011f9c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b082      	sub	sp, #8
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
 8011fa4:	460b      	mov	r3, r1
 8011fa6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011fae:	78fa      	ldrb	r2, [r7, #3]
 8011fb0:	4611      	mov	r1, r2
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f7f4 fb74 	bl	80066a0 <HAL_HCD_HC_GetURBState>
 8011fb8:	4603      	mov	r3, r0
}
 8011fba:	4618      	mov	r0, r3
 8011fbc:	3708      	adds	r7, #8
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}

08011fc2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8011fc2:	b580      	push	{r7, lr}
 8011fc4:	b082      	sub	sp, #8
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	6078      	str	r0, [r7, #4]
 8011fca:	460b      	mov	r3, r1
 8011fcc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011fd4:	2b01      	cmp	r3, #1
 8011fd6:	d103      	bne.n	8011fe0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011fd8:	78fb      	ldrb	r3, [r7, #3]
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f000 f840 	bl	8012060 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011fe0:	20c8      	movs	r0, #200	; 0xc8
 8011fe2:	f7f2 f927 	bl	8004234 <HAL_Delay>
  return USBH_OK;
 8011fe6:	2300      	movs	r3, #0
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3708      	adds	r7, #8
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}

08011ff0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b082      	sub	sp, #8
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	f7f2 f91b 	bl	8004234 <HAL_Delay>
}
 8011ffe:	bf00      	nop
 8012000:	3708      	adds	r7, #8
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}
	...

08012008 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012008:	b480      	push	{r7}
 801200a:	b085      	sub	sp, #20
 801200c:	af00      	add	r7, sp, #0
 801200e:	4603      	mov	r3, r0
 8012010:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012012:	2300      	movs	r3, #0
 8012014:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012016:	79fb      	ldrb	r3, [r7, #7]
 8012018:	2b03      	cmp	r3, #3
 801201a:	d817      	bhi.n	801204c <USBH_Get_USB_Status+0x44>
 801201c:	a201      	add	r2, pc, #4	; (adr r2, 8012024 <USBH_Get_USB_Status+0x1c>)
 801201e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012022:	bf00      	nop
 8012024:	08012035 	.word	0x08012035
 8012028:	0801203b 	.word	0x0801203b
 801202c:	08012041 	.word	0x08012041
 8012030:	08012047 	.word	0x08012047
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8012034:	2300      	movs	r3, #0
 8012036:	73fb      	strb	r3, [r7, #15]
    break;
 8012038:	e00b      	b.n	8012052 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801203a:	2302      	movs	r3, #2
 801203c:	73fb      	strb	r3, [r7, #15]
    break;
 801203e:	e008      	b.n	8012052 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8012040:	2301      	movs	r3, #1
 8012042:	73fb      	strb	r3, [r7, #15]
    break;
 8012044:	e005      	b.n	8012052 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8012046:	2302      	movs	r3, #2
 8012048:	73fb      	strb	r3, [r7, #15]
    break;
 801204a:	e002      	b.n	8012052 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801204c:	2302      	movs	r3, #2
 801204e:	73fb      	strb	r3, [r7, #15]
    break;
 8012050:	bf00      	nop
  }
  return usb_status;
 8012052:	7bfb      	ldrb	r3, [r7, #15]
}
 8012054:	4618      	mov	r0, r3
 8012056:	3714      	adds	r7, #20
 8012058:	46bd      	mov	sp, r7
 801205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205e:	4770      	bx	lr

08012060 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b084      	sub	sp, #16
 8012064:	af00      	add	r7, sp, #0
 8012066:	4603      	mov	r3, r0
 8012068:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801206a:	79fb      	ldrb	r3, [r7, #7]
 801206c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801206e:	79fb      	ldrb	r3, [r7, #7]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d102      	bne.n	801207a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8012074:	2301      	movs	r3, #1
 8012076:	73fb      	strb	r3, [r7, #15]
 8012078:	e001      	b.n	801207e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801207a:	2300      	movs	r3, #0
 801207c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801207e:	7bfb      	ldrb	r3, [r7, #15]
 8012080:	461a      	mov	r2, r3
 8012082:	2120      	movs	r1, #32
 8012084:	4803      	ldr	r0, [pc, #12]	; (8012094 <MX_DriverVbusFS+0x34>)
 8012086:	f7f3 ff7d 	bl	8005f84 <HAL_GPIO_WritePin>
}
 801208a:	bf00      	nop
 801208c:	3710      	adds	r7, #16
 801208e:	46bd      	mov	sp, r7
 8012090:	bd80      	pop	{r7, pc}
 8012092:	bf00      	nop
 8012094:	40020c00 	.word	0x40020c00

08012098 <ai_tonecrafter_data_weights_get>:
#include "tonecrafter_data.h"

ai_handle ai_tonecrafter_data_weights_get(void)
{
 8012098:	b480      	push	{r7}
 801209a:	af00      	add	r7, sp, #0
    0x6f, 0x97, 0xbc, 0x2f, 0xdc, 0x92, 0x3c, 0xa1, 0x2e,
    0x98, 0x3d, 0x92, 0x6b, 0xbd, 0x3d, 0x79, 0x19, 0xeb,
    0xbd, 0x2a, 0xc8, 0x23, 0xbe, 0xa6, 0x4d, 0xa2, 0xbb
  };

  return AI_HANDLE_PTR(s_tonecrafter_weights);
 801209c:	4b02      	ldr	r3, [pc, #8]	; (80120a8 <ai_tonecrafter_data_weights_get+0x10>)

}
 801209e:	4618      	mov	r0, r3
 80120a0:	46bd      	mov	sp, r7
 80120a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a6:	4770      	bx	lr
 80120a8:	08016bec 	.word	0x08016bec

080120ac <__errno>:
 80120ac:	4b01      	ldr	r3, [pc, #4]	; (80120b4 <__errno+0x8>)
 80120ae:	6818      	ldr	r0, [r3, #0]
 80120b0:	4770      	bx	lr
 80120b2:	bf00      	nop
 80120b4:	20000018 	.word	0x20000018

080120b8 <__libc_init_array>:
 80120b8:	b570      	push	{r4, r5, r6, lr}
 80120ba:	4d0d      	ldr	r5, [pc, #52]	; (80120f0 <__libc_init_array+0x38>)
 80120bc:	4c0d      	ldr	r4, [pc, #52]	; (80120f4 <__libc_init_array+0x3c>)
 80120be:	1b64      	subs	r4, r4, r5
 80120c0:	10a4      	asrs	r4, r4, #2
 80120c2:	2600      	movs	r6, #0
 80120c4:	42a6      	cmp	r6, r4
 80120c6:	d109      	bne.n	80120dc <__libc_init_array+0x24>
 80120c8:	4d0b      	ldr	r5, [pc, #44]	; (80120f8 <__libc_init_array+0x40>)
 80120ca:	4c0c      	ldr	r4, [pc, #48]	; (80120fc <__libc_init_array+0x44>)
 80120cc:	f002 ffa0 	bl	8015010 <_init>
 80120d0:	1b64      	subs	r4, r4, r5
 80120d2:	10a4      	asrs	r4, r4, #2
 80120d4:	2600      	movs	r6, #0
 80120d6:	42a6      	cmp	r6, r4
 80120d8:	d105      	bne.n	80120e6 <__libc_init_array+0x2e>
 80120da:	bd70      	pop	{r4, r5, r6, pc}
 80120dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80120e0:	4798      	blx	r3
 80120e2:	3601      	adds	r6, #1
 80120e4:	e7ee      	b.n	80120c4 <__libc_init_array+0xc>
 80120e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80120ea:	4798      	blx	r3
 80120ec:	3601      	adds	r6, #1
 80120ee:	e7f2      	b.n	80120d6 <__libc_init_array+0x1e>
 80120f0:	0801a0b8 	.word	0x0801a0b8
 80120f4:	0801a0b8 	.word	0x0801a0b8
 80120f8:	0801a0b8 	.word	0x0801a0b8
 80120fc:	0801a0bc 	.word	0x0801a0bc

08012100 <malloc>:
 8012100:	4b02      	ldr	r3, [pc, #8]	; (801210c <malloc+0xc>)
 8012102:	4601      	mov	r1, r0
 8012104:	6818      	ldr	r0, [r3, #0]
 8012106:	f000 b869 	b.w	80121dc <_malloc_r>
 801210a:	bf00      	nop
 801210c:	20000018 	.word	0x20000018

08012110 <memcpy>:
 8012110:	440a      	add	r2, r1
 8012112:	4291      	cmp	r1, r2
 8012114:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012118:	d100      	bne.n	801211c <memcpy+0xc>
 801211a:	4770      	bx	lr
 801211c:	b510      	push	{r4, lr}
 801211e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012122:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012126:	4291      	cmp	r1, r2
 8012128:	d1f9      	bne.n	801211e <memcpy+0xe>
 801212a:	bd10      	pop	{r4, pc}

0801212c <memset>:
 801212c:	4402      	add	r2, r0
 801212e:	4603      	mov	r3, r0
 8012130:	4293      	cmp	r3, r2
 8012132:	d100      	bne.n	8012136 <memset+0xa>
 8012134:	4770      	bx	lr
 8012136:	f803 1b01 	strb.w	r1, [r3], #1
 801213a:	e7f9      	b.n	8012130 <memset+0x4>

0801213c <_free_r>:
 801213c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801213e:	2900      	cmp	r1, #0
 8012140:	d048      	beq.n	80121d4 <_free_r+0x98>
 8012142:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012146:	9001      	str	r0, [sp, #4]
 8012148:	2b00      	cmp	r3, #0
 801214a:	f1a1 0404 	sub.w	r4, r1, #4
 801214e:	bfb8      	it	lt
 8012150:	18e4      	addlt	r4, r4, r3
 8012152:	f001 ff67 	bl	8014024 <__malloc_lock>
 8012156:	4a20      	ldr	r2, [pc, #128]	; (80121d8 <_free_r+0x9c>)
 8012158:	9801      	ldr	r0, [sp, #4]
 801215a:	6813      	ldr	r3, [r2, #0]
 801215c:	4615      	mov	r5, r2
 801215e:	b933      	cbnz	r3, 801216e <_free_r+0x32>
 8012160:	6063      	str	r3, [r4, #4]
 8012162:	6014      	str	r4, [r2, #0]
 8012164:	b003      	add	sp, #12
 8012166:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801216a:	f001 bf61 	b.w	8014030 <__malloc_unlock>
 801216e:	42a3      	cmp	r3, r4
 8012170:	d90b      	bls.n	801218a <_free_r+0x4e>
 8012172:	6821      	ldr	r1, [r4, #0]
 8012174:	1862      	adds	r2, r4, r1
 8012176:	4293      	cmp	r3, r2
 8012178:	bf04      	itt	eq
 801217a:	681a      	ldreq	r2, [r3, #0]
 801217c:	685b      	ldreq	r3, [r3, #4]
 801217e:	6063      	str	r3, [r4, #4]
 8012180:	bf04      	itt	eq
 8012182:	1852      	addeq	r2, r2, r1
 8012184:	6022      	streq	r2, [r4, #0]
 8012186:	602c      	str	r4, [r5, #0]
 8012188:	e7ec      	b.n	8012164 <_free_r+0x28>
 801218a:	461a      	mov	r2, r3
 801218c:	685b      	ldr	r3, [r3, #4]
 801218e:	b10b      	cbz	r3, 8012194 <_free_r+0x58>
 8012190:	42a3      	cmp	r3, r4
 8012192:	d9fa      	bls.n	801218a <_free_r+0x4e>
 8012194:	6811      	ldr	r1, [r2, #0]
 8012196:	1855      	adds	r5, r2, r1
 8012198:	42a5      	cmp	r5, r4
 801219a:	d10b      	bne.n	80121b4 <_free_r+0x78>
 801219c:	6824      	ldr	r4, [r4, #0]
 801219e:	4421      	add	r1, r4
 80121a0:	1854      	adds	r4, r2, r1
 80121a2:	42a3      	cmp	r3, r4
 80121a4:	6011      	str	r1, [r2, #0]
 80121a6:	d1dd      	bne.n	8012164 <_free_r+0x28>
 80121a8:	681c      	ldr	r4, [r3, #0]
 80121aa:	685b      	ldr	r3, [r3, #4]
 80121ac:	6053      	str	r3, [r2, #4]
 80121ae:	4421      	add	r1, r4
 80121b0:	6011      	str	r1, [r2, #0]
 80121b2:	e7d7      	b.n	8012164 <_free_r+0x28>
 80121b4:	d902      	bls.n	80121bc <_free_r+0x80>
 80121b6:	230c      	movs	r3, #12
 80121b8:	6003      	str	r3, [r0, #0]
 80121ba:	e7d3      	b.n	8012164 <_free_r+0x28>
 80121bc:	6825      	ldr	r5, [r4, #0]
 80121be:	1961      	adds	r1, r4, r5
 80121c0:	428b      	cmp	r3, r1
 80121c2:	bf04      	itt	eq
 80121c4:	6819      	ldreq	r1, [r3, #0]
 80121c6:	685b      	ldreq	r3, [r3, #4]
 80121c8:	6063      	str	r3, [r4, #4]
 80121ca:	bf04      	itt	eq
 80121cc:	1949      	addeq	r1, r1, r5
 80121ce:	6021      	streq	r1, [r4, #0]
 80121d0:	6054      	str	r4, [r2, #4]
 80121d2:	e7c7      	b.n	8012164 <_free_r+0x28>
 80121d4:	b003      	add	sp, #12
 80121d6:	bd30      	pop	{r4, r5, pc}
 80121d8:	200002fc 	.word	0x200002fc

080121dc <_malloc_r>:
 80121dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121de:	1ccd      	adds	r5, r1, #3
 80121e0:	f025 0503 	bic.w	r5, r5, #3
 80121e4:	3508      	adds	r5, #8
 80121e6:	2d0c      	cmp	r5, #12
 80121e8:	bf38      	it	cc
 80121ea:	250c      	movcc	r5, #12
 80121ec:	2d00      	cmp	r5, #0
 80121ee:	4606      	mov	r6, r0
 80121f0:	db01      	blt.n	80121f6 <_malloc_r+0x1a>
 80121f2:	42a9      	cmp	r1, r5
 80121f4:	d903      	bls.n	80121fe <_malloc_r+0x22>
 80121f6:	230c      	movs	r3, #12
 80121f8:	6033      	str	r3, [r6, #0]
 80121fa:	2000      	movs	r0, #0
 80121fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121fe:	f001 ff11 	bl	8014024 <__malloc_lock>
 8012202:	4921      	ldr	r1, [pc, #132]	; (8012288 <_malloc_r+0xac>)
 8012204:	680a      	ldr	r2, [r1, #0]
 8012206:	4614      	mov	r4, r2
 8012208:	b99c      	cbnz	r4, 8012232 <_malloc_r+0x56>
 801220a:	4f20      	ldr	r7, [pc, #128]	; (801228c <_malloc_r+0xb0>)
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	b923      	cbnz	r3, 801221a <_malloc_r+0x3e>
 8012210:	4621      	mov	r1, r4
 8012212:	4630      	mov	r0, r6
 8012214:	f000 fd4a 	bl	8012cac <_sbrk_r>
 8012218:	6038      	str	r0, [r7, #0]
 801221a:	4629      	mov	r1, r5
 801221c:	4630      	mov	r0, r6
 801221e:	f000 fd45 	bl	8012cac <_sbrk_r>
 8012222:	1c43      	adds	r3, r0, #1
 8012224:	d123      	bne.n	801226e <_malloc_r+0x92>
 8012226:	230c      	movs	r3, #12
 8012228:	6033      	str	r3, [r6, #0]
 801222a:	4630      	mov	r0, r6
 801222c:	f001 ff00 	bl	8014030 <__malloc_unlock>
 8012230:	e7e3      	b.n	80121fa <_malloc_r+0x1e>
 8012232:	6823      	ldr	r3, [r4, #0]
 8012234:	1b5b      	subs	r3, r3, r5
 8012236:	d417      	bmi.n	8012268 <_malloc_r+0x8c>
 8012238:	2b0b      	cmp	r3, #11
 801223a:	d903      	bls.n	8012244 <_malloc_r+0x68>
 801223c:	6023      	str	r3, [r4, #0]
 801223e:	441c      	add	r4, r3
 8012240:	6025      	str	r5, [r4, #0]
 8012242:	e004      	b.n	801224e <_malloc_r+0x72>
 8012244:	6863      	ldr	r3, [r4, #4]
 8012246:	42a2      	cmp	r2, r4
 8012248:	bf0c      	ite	eq
 801224a:	600b      	streq	r3, [r1, #0]
 801224c:	6053      	strne	r3, [r2, #4]
 801224e:	4630      	mov	r0, r6
 8012250:	f001 feee 	bl	8014030 <__malloc_unlock>
 8012254:	f104 000b 	add.w	r0, r4, #11
 8012258:	1d23      	adds	r3, r4, #4
 801225a:	f020 0007 	bic.w	r0, r0, #7
 801225e:	1ac2      	subs	r2, r0, r3
 8012260:	d0cc      	beq.n	80121fc <_malloc_r+0x20>
 8012262:	1a1b      	subs	r3, r3, r0
 8012264:	50a3      	str	r3, [r4, r2]
 8012266:	e7c9      	b.n	80121fc <_malloc_r+0x20>
 8012268:	4622      	mov	r2, r4
 801226a:	6864      	ldr	r4, [r4, #4]
 801226c:	e7cc      	b.n	8012208 <_malloc_r+0x2c>
 801226e:	1cc4      	adds	r4, r0, #3
 8012270:	f024 0403 	bic.w	r4, r4, #3
 8012274:	42a0      	cmp	r0, r4
 8012276:	d0e3      	beq.n	8012240 <_malloc_r+0x64>
 8012278:	1a21      	subs	r1, r4, r0
 801227a:	4630      	mov	r0, r6
 801227c:	f000 fd16 	bl	8012cac <_sbrk_r>
 8012280:	3001      	adds	r0, #1
 8012282:	d1dd      	bne.n	8012240 <_malloc_r+0x64>
 8012284:	e7cf      	b.n	8012226 <_malloc_r+0x4a>
 8012286:	bf00      	nop
 8012288:	200002fc 	.word	0x200002fc
 801228c:	20000300 	.word	0x20000300

08012290 <__cvt>:
 8012290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012294:	ec55 4b10 	vmov	r4, r5, d0
 8012298:	2d00      	cmp	r5, #0
 801229a:	460e      	mov	r6, r1
 801229c:	4619      	mov	r1, r3
 801229e:	462b      	mov	r3, r5
 80122a0:	bfbb      	ittet	lt
 80122a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80122a6:	461d      	movlt	r5, r3
 80122a8:	2300      	movge	r3, #0
 80122aa:	232d      	movlt	r3, #45	; 0x2d
 80122ac:	700b      	strb	r3, [r1, #0]
 80122ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80122b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80122b4:	4691      	mov	r9, r2
 80122b6:	f023 0820 	bic.w	r8, r3, #32
 80122ba:	bfbc      	itt	lt
 80122bc:	4622      	movlt	r2, r4
 80122be:	4614      	movlt	r4, r2
 80122c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80122c4:	d005      	beq.n	80122d2 <__cvt+0x42>
 80122c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80122ca:	d100      	bne.n	80122ce <__cvt+0x3e>
 80122cc:	3601      	adds	r6, #1
 80122ce:	2102      	movs	r1, #2
 80122d0:	e000      	b.n	80122d4 <__cvt+0x44>
 80122d2:	2103      	movs	r1, #3
 80122d4:	ab03      	add	r3, sp, #12
 80122d6:	9301      	str	r3, [sp, #4]
 80122d8:	ab02      	add	r3, sp, #8
 80122da:	9300      	str	r3, [sp, #0]
 80122dc:	ec45 4b10 	vmov	d0, r4, r5
 80122e0:	4653      	mov	r3, sl
 80122e2:	4632      	mov	r2, r6
 80122e4:	f000 fe7c 	bl	8012fe0 <_dtoa_r>
 80122e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80122ec:	4607      	mov	r7, r0
 80122ee:	d102      	bne.n	80122f6 <__cvt+0x66>
 80122f0:	f019 0f01 	tst.w	r9, #1
 80122f4:	d022      	beq.n	801233c <__cvt+0xac>
 80122f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80122fa:	eb07 0906 	add.w	r9, r7, r6
 80122fe:	d110      	bne.n	8012322 <__cvt+0x92>
 8012300:	783b      	ldrb	r3, [r7, #0]
 8012302:	2b30      	cmp	r3, #48	; 0x30
 8012304:	d10a      	bne.n	801231c <__cvt+0x8c>
 8012306:	2200      	movs	r2, #0
 8012308:	2300      	movs	r3, #0
 801230a:	4620      	mov	r0, r4
 801230c:	4629      	mov	r1, r5
 801230e:	f7ee fbfb 	bl	8000b08 <__aeabi_dcmpeq>
 8012312:	b918      	cbnz	r0, 801231c <__cvt+0x8c>
 8012314:	f1c6 0601 	rsb	r6, r6, #1
 8012318:	f8ca 6000 	str.w	r6, [sl]
 801231c:	f8da 3000 	ldr.w	r3, [sl]
 8012320:	4499      	add	r9, r3
 8012322:	2200      	movs	r2, #0
 8012324:	2300      	movs	r3, #0
 8012326:	4620      	mov	r0, r4
 8012328:	4629      	mov	r1, r5
 801232a:	f7ee fbed 	bl	8000b08 <__aeabi_dcmpeq>
 801232e:	b108      	cbz	r0, 8012334 <__cvt+0xa4>
 8012330:	f8cd 900c 	str.w	r9, [sp, #12]
 8012334:	2230      	movs	r2, #48	; 0x30
 8012336:	9b03      	ldr	r3, [sp, #12]
 8012338:	454b      	cmp	r3, r9
 801233a:	d307      	bcc.n	801234c <__cvt+0xbc>
 801233c:	9b03      	ldr	r3, [sp, #12]
 801233e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012340:	1bdb      	subs	r3, r3, r7
 8012342:	4638      	mov	r0, r7
 8012344:	6013      	str	r3, [r2, #0]
 8012346:	b004      	add	sp, #16
 8012348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801234c:	1c59      	adds	r1, r3, #1
 801234e:	9103      	str	r1, [sp, #12]
 8012350:	701a      	strb	r2, [r3, #0]
 8012352:	e7f0      	b.n	8012336 <__cvt+0xa6>

08012354 <__exponent>:
 8012354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012356:	4603      	mov	r3, r0
 8012358:	2900      	cmp	r1, #0
 801235a:	bfb8      	it	lt
 801235c:	4249      	neglt	r1, r1
 801235e:	f803 2b02 	strb.w	r2, [r3], #2
 8012362:	bfb4      	ite	lt
 8012364:	222d      	movlt	r2, #45	; 0x2d
 8012366:	222b      	movge	r2, #43	; 0x2b
 8012368:	2909      	cmp	r1, #9
 801236a:	7042      	strb	r2, [r0, #1]
 801236c:	dd2a      	ble.n	80123c4 <__exponent+0x70>
 801236e:	f10d 0407 	add.w	r4, sp, #7
 8012372:	46a4      	mov	ip, r4
 8012374:	270a      	movs	r7, #10
 8012376:	46a6      	mov	lr, r4
 8012378:	460a      	mov	r2, r1
 801237a:	fb91 f6f7 	sdiv	r6, r1, r7
 801237e:	fb07 1516 	mls	r5, r7, r6, r1
 8012382:	3530      	adds	r5, #48	; 0x30
 8012384:	2a63      	cmp	r2, #99	; 0x63
 8012386:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801238a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801238e:	4631      	mov	r1, r6
 8012390:	dcf1      	bgt.n	8012376 <__exponent+0x22>
 8012392:	3130      	adds	r1, #48	; 0x30
 8012394:	f1ae 0502 	sub.w	r5, lr, #2
 8012398:	f804 1c01 	strb.w	r1, [r4, #-1]
 801239c:	1c44      	adds	r4, r0, #1
 801239e:	4629      	mov	r1, r5
 80123a0:	4561      	cmp	r1, ip
 80123a2:	d30a      	bcc.n	80123ba <__exponent+0x66>
 80123a4:	f10d 0209 	add.w	r2, sp, #9
 80123a8:	eba2 020e 	sub.w	r2, r2, lr
 80123ac:	4565      	cmp	r5, ip
 80123ae:	bf88      	it	hi
 80123b0:	2200      	movhi	r2, #0
 80123b2:	4413      	add	r3, r2
 80123b4:	1a18      	subs	r0, r3, r0
 80123b6:	b003      	add	sp, #12
 80123b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80123be:	f804 2f01 	strb.w	r2, [r4, #1]!
 80123c2:	e7ed      	b.n	80123a0 <__exponent+0x4c>
 80123c4:	2330      	movs	r3, #48	; 0x30
 80123c6:	3130      	adds	r1, #48	; 0x30
 80123c8:	7083      	strb	r3, [r0, #2]
 80123ca:	70c1      	strb	r1, [r0, #3]
 80123cc:	1d03      	adds	r3, r0, #4
 80123ce:	e7f1      	b.n	80123b4 <__exponent+0x60>

080123d0 <_printf_float>:
 80123d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123d4:	ed2d 8b02 	vpush	{d8}
 80123d8:	b08d      	sub	sp, #52	; 0x34
 80123da:	460c      	mov	r4, r1
 80123dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80123e0:	4616      	mov	r6, r2
 80123e2:	461f      	mov	r7, r3
 80123e4:	4605      	mov	r5, r0
 80123e6:	f001 fdb1 	bl	8013f4c <_localeconv_r>
 80123ea:	f8d0 a000 	ldr.w	sl, [r0]
 80123ee:	4650      	mov	r0, sl
 80123f0:	f7ed ff0e 	bl	8000210 <strlen>
 80123f4:	2300      	movs	r3, #0
 80123f6:	930a      	str	r3, [sp, #40]	; 0x28
 80123f8:	6823      	ldr	r3, [r4, #0]
 80123fa:	9305      	str	r3, [sp, #20]
 80123fc:	f8d8 3000 	ldr.w	r3, [r8]
 8012400:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012404:	3307      	adds	r3, #7
 8012406:	f023 0307 	bic.w	r3, r3, #7
 801240a:	f103 0208 	add.w	r2, r3, #8
 801240e:	f8c8 2000 	str.w	r2, [r8]
 8012412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012416:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801241a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801241e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012422:	9307      	str	r3, [sp, #28]
 8012424:	f8cd 8018 	str.w	r8, [sp, #24]
 8012428:	ee08 0a10 	vmov	s16, r0
 801242c:	4b9f      	ldr	r3, [pc, #636]	; (80126ac <_printf_float+0x2dc>)
 801242e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012436:	f7ee fb99 	bl	8000b6c <__aeabi_dcmpun>
 801243a:	bb88      	cbnz	r0, 80124a0 <_printf_float+0xd0>
 801243c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012440:	4b9a      	ldr	r3, [pc, #616]	; (80126ac <_printf_float+0x2dc>)
 8012442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012446:	f7ee fb73 	bl	8000b30 <__aeabi_dcmple>
 801244a:	bb48      	cbnz	r0, 80124a0 <_printf_float+0xd0>
 801244c:	2200      	movs	r2, #0
 801244e:	2300      	movs	r3, #0
 8012450:	4640      	mov	r0, r8
 8012452:	4649      	mov	r1, r9
 8012454:	f7ee fb62 	bl	8000b1c <__aeabi_dcmplt>
 8012458:	b110      	cbz	r0, 8012460 <_printf_float+0x90>
 801245a:	232d      	movs	r3, #45	; 0x2d
 801245c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012460:	4b93      	ldr	r3, [pc, #588]	; (80126b0 <_printf_float+0x2e0>)
 8012462:	4894      	ldr	r0, [pc, #592]	; (80126b4 <_printf_float+0x2e4>)
 8012464:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012468:	bf94      	ite	ls
 801246a:	4698      	movls	r8, r3
 801246c:	4680      	movhi	r8, r0
 801246e:	2303      	movs	r3, #3
 8012470:	6123      	str	r3, [r4, #16]
 8012472:	9b05      	ldr	r3, [sp, #20]
 8012474:	f023 0204 	bic.w	r2, r3, #4
 8012478:	6022      	str	r2, [r4, #0]
 801247a:	f04f 0900 	mov.w	r9, #0
 801247e:	9700      	str	r7, [sp, #0]
 8012480:	4633      	mov	r3, r6
 8012482:	aa0b      	add	r2, sp, #44	; 0x2c
 8012484:	4621      	mov	r1, r4
 8012486:	4628      	mov	r0, r5
 8012488:	f000 f9d8 	bl	801283c <_printf_common>
 801248c:	3001      	adds	r0, #1
 801248e:	f040 8090 	bne.w	80125b2 <_printf_float+0x1e2>
 8012492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012496:	b00d      	add	sp, #52	; 0x34
 8012498:	ecbd 8b02 	vpop	{d8}
 801249c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124a0:	4642      	mov	r2, r8
 80124a2:	464b      	mov	r3, r9
 80124a4:	4640      	mov	r0, r8
 80124a6:	4649      	mov	r1, r9
 80124a8:	f7ee fb60 	bl	8000b6c <__aeabi_dcmpun>
 80124ac:	b140      	cbz	r0, 80124c0 <_printf_float+0xf0>
 80124ae:	464b      	mov	r3, r9
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	bfbc      	itt	lt
 80124b4:	232d      	movlt	r3, #45	; 0x2d
 80124b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80124ba:	487f      	ldr	r0, [pc, #508]	; (80126b8 <_printf_float+0x2e8>)
 80124bc:	4b7f      	ldr	r3, [pc, #508]	; (80126bc <_printf_float+0x2ec>)
 80124be:	e7d1      	b.n	8012464 <_printf_float+0x94>
 80124c0:	6863      	ldr	r3, [r4, #4]
 80124c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80124c6:	9206      	str	r2, [sp, #24]
 80124c8:	1c5a      	adds	r2, r3, #1
 80124ca:	d13f      	bne.n	801254c <_printf_float+0x17c>
 80124cc:	2306      	movs	r3, #6
 80124ce:	6063      	str	r3, [r4, #4]
 80124d0:	9b05      	ldr	r3, [sp, #20]
 80124d2:	6861      	ldr	r1, [r4, #4]
 80124d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80124d8:	2300      	movs	r3, #0
 80124da:	9303      	str	r3, [sp, #12]
 80124dc:	ab0a      	add	r3, sp, #40	; 0x28
 80124de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80124e2:	ab09      	add	r3, sp, #36	; 0x24
 80124e4:	ec49 8b10 	vmov	d0, r8, r9
 80124e8:	9300      	str	r3, [sp, #0]
 80124ea:	6022      	str	r2, [r4, #0]
 80124ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80124f0:	4628      	mov	r0, r5
 80124f2:	f7ff fecd 	bl	8012290 <__cvt>
 80124f6:	9b06      	ldr	r3, [sp, #24]
 80124f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80124fa:	2b47      	cmp	r3, #71	; 0x47
 80124fc:	4680      	mov	r8, r0
 80124fe:	d108      	bne.n	8012512 <_printf_float+0x142>
 8012500:	1cc8      	adds	r0, r1, #3
 8012502:	db02      	blt.n	801250a <_printf_float+0x13a>
 8012504:	6863      	ldr	r3, [r4, #4]
 8012506:	4299      	cmp	r1, r3
 8012508:	dd41      	ble.n	801258e <_printf_float+0x1be>
 801250a:	f1ab 0b02 	sub.w	fp, fp, #2
 801250e:	fa5f fb8b 	uxtb.w	fp, fp
 8012512:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012516:	d820      	bhi.n	801255a <_printf_float+0x18a>
 8012518:	3901      	subs	r1, #1
 801251a:	465a      	mov	r2, fp
 801251c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012520:	9109      	str	r1, [sp, #36]	; 0x24
 8012522:	f7ff ff17 	bl	8012354 <__exponent>
 8012526:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012528:	1813      	adds	r3, r2, r0
 801252a:	2a01      	cmp	r2, #1
 801252c:	4681      	mov	r9, r0
 801252e:	6123      	str	r3, [r4, #16]
 8012530:	dc02      	bgt.n	8012538 <_printf_float+0x168>
 8012532:	6822      	ldr	r2, [r4, #0]
 8012534:	07d2      	lsls	r2, r2, #31
 8012536:	d501      	bpl.n	801253c <_printf_float+0x16c>
 8012538:	3301      	adds	r3, #1
 801253a:	6123      	str	r3, [r4, #16]
 801253c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012540:	2b00      	cmp	r3, #0
 8012542:	d09c      	beq.n	801247e <_printf_float+0xae>
 8012544:	232d      	movs	r3, #45	; 0x2d
 8012546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801254a:	e798      	b.n	801247e <_printf_float+0xae>
 801254c:	9a06      	ldr	r2, [sp, #24]
 801254e:	2a47      	cmp	r2, #71	; 0x47
 8012550:	d1be      	bne.n	80124d0 <_printf_float+0x100>
 8012552:	2b00      	cmp	r3, #0
 8012554:	d1bc      	bne.n	80124d0 <_printf_float+0x100>
 8012556:	2301      	movs	r3, #1
 8012558:	e7b9      	b.n	80124ce <_printf_float+0xfe>
 801255a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801255e:	d118      	bne.n	8012592 <_printf_float+0x1c2>
 8012560:	2900      	cmp	r1, #0
 8012562:	6863      	ldr	r3, [r4, #4]
 8012564:	dd0b      	ble.n	801257e <_printf_float+0x1ae>
 8012566:	6121      	str	r1, [r4, #16]
 8012568:	b913      	cbnz	r3, 8012570 <_printf_float+0x1a0>
 801256a:	6822      	ldr	r2, [r4, #0]
 801256c:	07d0      	lsls	r0, r2, #31
 801256e:	d502      	bpl.n	8012576 <_printf_float+0x1a6>
 8012570:	3301      	adds	r3, #1
 8012572:	440b      	add	r3, r1
 8012574:	6123      	str	r3, [r4, #16]
 8012576:	65a1      	str	r1, [r4, #88]	; 0x58
 8012578:	f04f 0900 	mov.w	r9, #0
 801257c:	e7de      	b.n	801253c <_printf_float+0x16c>
 801257e:	b913      	cbnz	r3, 8012586 <_printf_float+0x1b6>
 8012580:	6822      	ldr	r2, [r4, #0]
 8012582:	07d2      	lsls	r2, r2, #31
 8012584:	d501      	bpl.n	801258a <_printf_float+0x1ba>
 8012586:	3302      	adds	r3, #2
 8012588:	e7f4      	b.n	8012574 <_printf_float+0x1a4>
 801258a:	2301      	movs	r3, #1
 801258c:	e7f2      	b.n	8012574 <_printf_float+0x1a4>
 801258e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012594:	4299      	cmp	r1, r3
 8012596:	db05      	blt.n	80125a4 <_printf_float+0x1d4>
 8012598:	6823      	ldr	r3, [r4, #0]
 801259a:	6121      	str	r1, [r4, #16]
 801259c:	07d8      	lsls	r0, r3, #31
 801259e:	d5ea      	bpl.n	8012576 <_printf_float+0x1a6>
 80125a0:	1c4b      	adds	r3, r1, #1
 80125a2:	e7e7      	b.n	8012574 <_printf_float+0x1a4>
 80125a4:	2900      	cmp	r1, #0
 80125a6:	bfd4      	ite	le
 80125a8:	f1c1 0202 	rsble	r2, r1, #2
 80125ac:	2201      	movgt	r2, #1
 80125ae:	4413      	add	r3, r2
 80125b0:	e7e0      	b.n	8012574 <_printf_float+0x1a4>
 80125b2:	6823      	ldr	r3, [r4, #0]
 80125b4:	055a      	lsls	r2, r3, #21
 80125b6:	d407      	bmi.n	80125c8 <_printf_float+0x1f8>
 80125b8:	6923      	ldr	r3, [r4, #16]
 80125ba:	4642      	mov	r2, r8
 80125bc:	4631      	mov	r1, r6
 80125be:	4628      	mov	r0, r5
 80125c0:	47b8      	blx	r7
 80125c2:	3001      	adds	r0, #1
 80125c4:	d12c      	bne.n	8012620 <_printf_float+0x250>
 80125c6:	e764      	b.n	8012492 <_printf_float+0xc2>
 80125c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80125cc:	f240 80e0 	bls.w	8012790 <_printf_float+0x3c0>
 80125d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80125d4:	2200      	movs	r2, #0
 80125d6:	2300      	movs	r3, #0
 80125d8:	f7ee fa96 	bl	8000b08 <__aeabi_dcmpeq>
 80125dc:	2800      	cmp	r0, #0
 80125de:	d034      	beq.n	801264a <_printf_float+0x27a>
 80125e0:	4a37      	ldr	r2, [pc, #220]	; (80126c0 <_printf_float+0x2f0>)
 80125e2:	2301      	movs	r3, #1
 80125e4:	4631      	mov	r1, r6
 80125e6:	4628      	mov	r0, r5
 80125e8:	47b8      	blx	r7
 80125ea:	3001      	adds	r0, #1
 80125ec:	f43f af51 	beq.w	8012492 <_printf_float+0xc2>
 80125f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80125f4:	429a      	cmp	r2, r3
 80125f6:	db02      	blt.n	80125fe <_printf_float+0x22e>
 80125f8:	6823      	ldr	r3, [r4, #0]
 80125fa:	07d8      	lsls	r0, r3, #31
 80125fc:	d510      	bpl.n	8012620 <_printf_float+0x250>
 80125fe:	ee18 3a10 	vmov	r3, s16
 8012602:	4652      	mov	r2, sl
 8012604:	4631      	mov	r1, r6
 8012606:	4628      	mov	r0, r5
 8012608:	47b8      	blx	r7
 801260a:	3001      	adds	r0, #1
 801260c:	f43f af41 	beq.w	8012492 <_printf_float+0xc2>
 8012610:	f04f 0800 	mov.w	r8, #0
 8012614:	f104 091a 	add.w	r9, r4, #26
 8012618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801261a:	3b01      	subs	r3, #1
 801261c:	4543      	cmp	r3, r8
 801261e:	dc09      	bgt.n	8012634 <_printf_float+0x264>
 8012620:	6823      	ldr	r3, [r4, #0]
 8012622:	079b      	lsls	r3, r3, #30
 8012624:	f100 8105 	bmi.w	8012832 <_printf_float+0x462>
 8012628:	68e0      	ldr	r0, [r4, #12]
 801262a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801262c:	4298      	cmp	r0, r3
 801262e:	bfb8      	it	lt
 8012630:	4618      	movlt	r0, r3
 8012632:	e730      	b.n	8012496 <_printf_float+0xc6>
 8012634:	2301      	movs	r3, #1
 8012636:	464a      	mov	r2, r9
 8012638:	4631      	mov	r1, r6
 801263a:	4628      	mov	r0, r5
 801263c:	47b8      	blx	r7
 801263e:	3001      	adds	r0, #1
 8012640:	f43f af27 	beq.w	8012492 <_printf_float+0xc2>
 8012644:	f108 0801 	add.w	r8, r8, #1
 8012648:	e7e6      	b.n	8012618 <_printf_float+0x248>
 801264a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801264c:	2b00      	cmp	r3, #0
 801264e:	dc39      	bgt.n	80126c4 <_printf_float+0x2f4>
 8012650:	4a1b      	ldr	r2, [pc, #108]	; (80126c0 <_printf_float+0x2f0>)
 8012652:	2301      	movs	r3, #1
 8012654:	4631      	mov	r1, r6
 8012656:	4628      	mov	r0, r5
 8012658:	47b8      	blx	r7
 801265a:	3001      	adds	r0, #1
 801265c:	f43f af19 	beq.w	8012492 <_printf_float+0xc2>
 8012660:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012664:	4313      	orrs	r3, r2
 8012666:	d102      	bne.n	801266e <_printf_float+0x29e>
 8012668:	6823      	ldr	r3, [r4, #0]
 801266a:	07d9      	lsls	r1, r3, #31
 801266c:	d5d8      	bpl.n	8012620 <_printf_float+0x250>
 801266e:	ee18 3a10 	vmov	r3, s16
 8012672:	4652      	mov	r2, sl
 8012674:	4631      	mov	r1, r6
 8012676:	4628      	mov	r0, r5
 8012678:	47b8      	blx	r7
 801267a:	3001      	adds	r0, #1
 801267c:	f43f af09 	beq.w	8012492 <_printf_float+0xc2>
 8012680:	f04f 0900 	mov.w	r9, #0
 8012684:	f104 0a1a 	add.w	sl, r4, #26
 8012688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801268a:	425b      	negs	r3, r3
 801268c:	454b      	cmp	r3, r9
 801268e:	dc01      	bgt.n	8012694 <_printf_float+0x2c4>
 8012690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012692:	e792      	b.n	80125ba <_printf_float+0x1ea>
 8012694:	2301      	movs	r3, #1
 8012696:	4652      	mov	r2, sl
 8012698:	4631      	mov	r1, r6
 801269a:	4628      	mov	r0, r5
 801269c:	47b8      	blx	r7
 801269e:	3001      	adds	r0, #1
 80126a0:	f43f aef7 	beq.w	8012492 <_printf_float+0xc2>
 80126a4:	f109 0901 	add.w	r9, r9, #1
 80126a8:	e7ee      	b.n	8012688 <_printf_float+0x2b8>
 80126aa:	bf00      	nop
 80126ac:	7fefffff 	.word	0x7fefffff
 80126b0:	08019cd4 	.word	0x08019cd4
 80126b4:	08019cd8 	.word	0x08019cd8
 80126b8:	08019ce0 	.word	0x08019ce0
 80126bc:	08019cdc 	.word	0x08019cdc
 80126c0:	08019ce4 	.word	0x08019ce4
 80126c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80126c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80126c8:	429a      	cmp	r2, r3
 80126ca:	bfa8      	it	ge
 80126cc:	461a      	movge	r2, r3
 80126ce:	2a00      	cmp	r2, #0
 80126d0:	4691      	mov	r9, r2
 80126d2:	dc37      	bgt.n	8012744 <_printf_float+0x374>
 80126d4:	f04f 0b00 	mov.w	fp, #0
 80126d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80126dc:	f104 021a 	add.w	r2, r4, #26
 80126e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80126e2:	9305      	str	r3, [sp, #20]
 80126e4:	eba3 0309 	sub.w	r3, r3, r9
 80126e8:	455b      	cmp	r3, fp
 80126ea:	dc33      	bgt.n	8012754 <_printf_float+0x384>
 80126ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80126f0:	429a      	cmp	r2, r3
 80126f2:	db3b      	blt.n	801276c <_printf_float+0x39c>
 80126f4:	6823      	ldr	r3, [r4, #0]
 80126f6:	07da      	lsls	r2, r3, #31
 80126f8:	d438      	bmi.n	801276c <_printf_float+0x39c>
 80126fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80126fc:	9b05      	ldr	r3, [sp, #20]
 80126fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012700:	1ad3      	subs	r3, r2, r3
 8012702:	eba2 0901 	sub.w	r9, r2, r1
 8012706:	4599      	cmp	r9, r3
 8012708:	bfa8      	it	ge
 801270a:	4699      	movge	r9, r3
 801270c:	f1b9 0f00 	cmp.w	r9, #0
 8012710:	dc35      	bgt.n	801277e <_printf_float+0x3ae>
 8012712:	f04f 0800 	mov.w	r8, #0
 8012716:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801271a:	f104 0a1a 	add.w	sl, r4, #26
 801271e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012722:	1a9b      	subs	r3, r3, r2
 8012724:	eba3 0309 	sub.w	r3, r3, r9
 8012728:	4543      	cmp	r3, r8
 801272a:	f77f af79 	ble.w	8012620 <_printf_float+0x250>
 801272e:	2301      	movs	r3, #1
 8012730:	4652      	mov	r2, sl
 8012732:	4631      	mov	r1, r6
 8012734:	4628      	mov	r0, r5
 8012736:	47b8      	blx	r7
 8012738:	3001      	adds	r0, #1
 801273a:	f43f aeaa 	beq.w	8012492 <_printf_float+0xc2>
 801273e:	f108 0801 	add.w	r8, r8, #1
 8012742:	e7ec      	b.n	801271e <_printf_float+0x34e>
 8012744:	4613      	mov	r3, r2
 8012746:	4631      	mov	r1, r6
 8012748:	4642      	mov	r2, r8
 801274a:	4628      	mov	r0, r5
 801274c:	47b8      	blx	r7
 801274e:	3001      	adds	r0, #1
 8012750:	d1c0      	bne.n	80126d4 <_printf_float+0x304>
 8012752:	e69e      	b.n	8012492 <_printf_float+0xc2>
 8012754:	2301      	movs	r3, #1
 8012756:	4631      	mov	r1, r6
 8012758:	4628      	mov	r0, r5
 801275a:	9205      	str	r2, [sp, #20]
 801275c:	47b8      	blx	r7
 801275e:	3001      	adds	r0, #1
 8012760:	f43f ae97 	beq.w	8012492 <_printf_float+0xc2>
 8012764:	9a05      	ldr	r2, [sp, #20]
 8012766:	f10b 0b01 	add.w	fp, fp, #1
 801276a:	e7b9      	b.n	80126e0 <_printf_float+0x310>
 801276c:	ee18 3a10 	vmov	r3, s16
 8012770:	4652      	mov	r2, sl
 8012772:	4631      	mov	r1, r6
 8012774:	4628      	mov	r0, r5
 8012776:	47b8      	blx	r7
 8012778:	3001      	adds	r0, #1
 801277a:	d1be      	bne.n	80126fa <_printf_float+0x32a>
 801277c:	e689      	b.n	8012492 <_printf_float+0xc2>
 801277e:	9a05      	ldr	r2, [sp, #20]
 8012780:	464b      	mov	r3, r9
 8012782:	4442      	add	r2, r8
 8012784:	4631      	mov	r1, r6
 8012786:	4628      	mov	r0, r5
 8012788:	47b8      	blx	r7
 801278a:	3001      	adds	r0, #1
 801278c:	d1c1      	bne.n	8012712 <_printf_float+0x342>
 801278e:	e680      	b.n	8012492 <_printf_float+0xc2>
 8012790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012792:	2a01      	cmp	r2, #1
 8012794:	dc01      	bgt.n	801279a <_printf_float+0x3ca>
 8012796:	07db      	lsls	r3, r3, #31
 8012798:	d538      	bpl.n	801280c <_printf_float+0x43c>
 801279a:	2301      	movs	r3, #1
 801279c:	4642      	mov	r2, r8
 801279e:	4631      	mov	r1, r6
 80127a0:	4628      	mov	r0, r5
 80127a2:	47b8      	blx	r7
 80127a4:	3001      	adds	r0, #1
 80127a6:	f43f ae74 	beq.w	8012492 <_printf_float+0xc2>
 80127aa:	ee18 3a10 	vmov	r3, s16
 80127ae:	4652      	mov	r2, sl
 80127b0:	4631      	mov	r1, r6
 80127b2:	4628      	mov	r0, r5
 80127b4:	47b8      	blx	r7
 80127b6:	3001      	adds	r0, #1
 80127b8:	f43f ae6b 	beq.w	8012492 <_printf_float+0xc2>
 80127bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80127c0:	2200      	movs	r2, #0
 80127c2:	2300      	movs	r3, #0
 80127c4:	f7ee f9a0 	bl	8000b08 <__aeabi_dcmpeq>
 80127c8:	b9d8      	cbnz	r0, 8012802 <_printf_float+0x432>
 80127ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127cc:	f108 0201 	add.w	r2, r8, #1
 80127d0:	3b01      	subs	r3, #1
 80127d2:	4631      	mov	r1, r6
 80127d4:	4628      	mov	r0, r5
 80127d6:	47b8      	blx	r7
 80127d8:	3001      	adds	r0, #1
 80127da:	d10e      	bne.n	80127fa <_printf_float+0x42a>
 80127dc:	e659      	b.n	8012492 <_printf_float+0xc2>
 80127de:	2301      	movs	r3, #1
 80127e0:	4652      	mov	r2, sl
 80127e2:	4631      	mov	r1, r6
 80127e4:	4628      	mov	r0, r5
 80127e6:	47b8      	blx	r7
 80127e8:	3001      	adds	r0, #1
 80127ea:	f43f ae52 	beq.w	8012492 <_printf_float+0xc2>
 80127ee:	f108 0801 	add.w	r8, r8, #1
 80127f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127f4:	3b01      	subs	r3, #1
 80127f6:	4543      	cmp	r3, r8
 80127f8:	dcf1      	bgt.n	80127de <_printf_float+0x40e>
 80127fa:	464b      	mov	r3, r9
 80127fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012800:	e6dc      	b.n	80125bc <_printf_float+0x1ec>
 8012802:	f04f 0800 	mov.w	r8, #0
 8012806:	f104 0a1a 	add.w	sl, r4, #26
 801280a:	e7f2      	b.n	80127f2 <_printf_float+0x422>
 801280c:	2301      	movs	r3, #1
 801280e:	4642      	mov	r2, r8
 8012810:	e7df      	b.n	80127d2 <_printf_float+0x402>
 8012812:	2301      	movs	r3, #1
 8012814:	464a      	mov	r2, r9
 8012816:	4631      	mov	r1, r6
 8012818:	4628      	mov	r0, r5
 801281a:	47b8      	blx	r7
 801281c:	3001      	adds	r0, #1
 801281e:	f43f ae38 	beq.w	8012492 <_printf_float+0xc2>
 8012822:	f108 0801 	add.w	r8, r8, #1
 8012826:	68e3      	ldr	r3, [r4, #12]
 8012828:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801282a:	1a5b      	subs	r3, r3, r1
 801282c:	4543      	cmp	r3, r8
 801282e:	dcf0      	bgt.n	8012812 <_printf_float+0x442>
 8012830:	e6fa      	b.n	8012628 <_printf_float+0x258>
 8012832:	f04f 0800 	mov.w	r8, #0
 8012836:	f104 0919 	add.w	r9, r4, #25
 801283a:	e7f4      	b.n	8012826 <_printf_float+0x456>

0801283c <_printf_common>:
 801283c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012840:	4616      	mov	r6, r2
 8012842:	4699      	mov	r9, r3
 8012844:	688a      	ldr	r2, [r1, #8]
 8012846:	690b      	ldr	r3, [r1, #16]
 8012848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801284c:	4293      	cmp	r3, r2
 801284e:	bfb8      	it	lt
 8012850:	4613      	movlt	r3, r2
 8012852:	6033      	str	r3, [r6, #0]
 8012854:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012858:	4607      	mov	r7, r0
 801285a:	460c      	mov	r4, r1
 801285c:	b10a      	cbz	r2, 8012862 <_printf_common+0x26>
 801285e:	3301      	adds	r3, #1
 8012860:	6033      	str	r3, [r6, #0]
 8012862:	6823      	ldr	r3, [r4, #0]
 8012864:	0699      	lsls	r1, r3, #26
 8012866:	bf42      	ittt	mi
 8012868:	6833      	ldrmi	r3, [r6, #0]
 801286a:	3302      	addmi	r3, #2
 801286c:	6033      	strmi	r3, [r6, #0]
 801286e:	6825      	ldr	r5, [r4, #0]
 8012870:	f015 0506 	ands.w	r5, r5, #6
 8012874:	d106      	bne.n	8012884 <_printf_common+0x48>
 8012876:	f104 0a19 	add.w	sl, r4, #25
 801287a:	68e3      	ldr	r3, [r4, #12]
 801287c:	6832      	ldr	r2, [r6, #0]
 801287e:	1a9b      	subs	r3, r3, r2
 8012880:	42ab      	cmp	r3, r5
 8012882:	dc26      	bgt.n	80128d2 <_printf_common+0x96>
 8012884:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012888:	1e13      	subs	r3, r2, #0
 801288a:	6822      	ldr	r2, [r4, #0]
 801288c:	bf18      	it	ne
 801288e:	2301      	movne	r3, #1
 8012890:	0692      	lsls	r2, r2, #26
 8012892:	d42b      	bmi.n	80128ec <_printf_common+0xb0>
 8012894:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012898:	4649      	mov	r1, r9
 801289a:	4638      	mov	r0, r7
 801289c:	47c0      	blx	r8
 801289e:	3001      	adds	r0, #1
 80128a0:	d01e      	beq.n	80128e0 <_printf_common+0xa4>
 80128a2:	6823      	ldr	r3, [r4, #0]
 80128a4:	68e5      	ldr	r5, [r4, #12]
 80128a6:	6832      	ldr	r2, [r6, #0]
 80128a8:	f003 0306 	and.w	r3, r3, #6
 80128ac:	2b04      	cmp	r3, #4
 80128ae:	bf08      	it	eq
 80128b0:	1aad      	subeq	r5, r5, r2
 80128b2:	68a3      	ldr	r3, [r4, #8]
 80128b4:	6922      	ldr	r2, [r4, #16]
 80128b6:	bf0c      	ite	eq
 80128b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80128bc:	2500      	movne	r5, #0
 80128be:	4293      	cmp	r3, r2
 80128c0:	bfc4      	itt	gt
 80128c2:	1a9b      	subgt	r3, r3, r2
 80128c4:	18ed      	addgt	r5, r5, r3
 80128c6:	2600      	movs	r6, #0
 80128c8:	341a      	adds	r4, #26
 80128ca:	42b5      	cmp	r5, r6
 80128cc:	d11a      	bne.n	8012904 <_printf_common+0xc8>
 80128ce:	2000      	movs	r0, #0
 80128d0:	e008      	b.n	80128e4 <_printf_common+0xa8>
 80128d2:	2301      	movs	r3, #1
 80128d4:	4652      	mov	r2, sl
 80128d6:	4649      	mov	r1, r9
 80128d8:	4638      	mov	r0, r7
 80128da:	47c0      	blx	r8
 80128dc:	3001      	adds	r0, #1
 80128de:	d103      	bne.n	80128e8 <_printf_common+0xac>
 80128e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128e8:	3501      	adds	r5, #1
 80128ea:	e7c6      	b.n	801287a <_printf_common+0x3e>
 80128ec:	18e1      	adds	r1, r4, r3
 80128ee:	1c5a      	adds	r2, r3, #1
 80128f0:	2030      	movs	r0, #48	; 0x30
 80128f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80128f6:	4422      	add	r2, r4
 80128f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80128fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012900:	3302      	adds	r3, #2
 8012902:	e7c7      	b.n	8012894 <_printf_common+0x58>
 8012904:	2301      	movs	r3, #1
 8012906:	4622      	mov	r2, r4
 8012908:	4649      	mov	r1, r9
 801290a:	4638      	mov	r0, r7
 801290c:	47c0      	blx	r8
 801290e:	3001      	adds	r0, #1
 8012910:	d0e6      	beq.n	80128e0 <_printf_common+0xa4>
 8012912:	3601      	adds	r6, #1
 8012914:	e7d9      	b.n	80128ca <_printf_common+0x8e>
	...

08012918 <_printf_i>:
 8012918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801291c:	460c      	mov	r4, r1
 801291e:	4691      	mov	r9, r2
 8012920:	7e27      	ldrb	r7, [r4, #24]
 8012922:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012924:	2f78      	cmp	r7, #120	; 0x78
 8012926:	4680      	mov	r8, r0
 8012928:	469a      	mov	sl, r3
 801292a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801292e:	d807      	bhi.n	8012940 <_printf_i+0x28>
 8012930:	2f62      	cmp	r7, #98	; 0x62
 8012932:	d80a      	bhi.n	801294a <_printf_i+0x32>
 8012934:	2f00      	cmp	r7, #0
 8012936:	f000 80d8 	beq.w	8012aea <_printf_i+0x1d2>
 801293a:	2f58      	cmp	r7, #88	; 0x58
 801293c:	f000 80a3 	beq.w	8012a86 <_printf_i+0x16e>
 8012940:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012944:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012948:	e03a      	b.n	80129c0 <_printf_i+0xa8>
 801294a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801294e:	2b15      	cmp	r3, #21
 8012950:	d8f6      	bhi.n	8012940 <_printf_i+0x28>
 8012952:	a001      	add	r0, pc, #4	; (adr r0, 8012958 <_printf_i+0x40>)
 8012954:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012958:	080129b1 	.word	0x080129b1
 801295c:	080129c5 	.word	0x080129c5
 8012960:	08012941 	.word	0x08012941
 8012964:	08012941 	.word	0x08012941
 8012968:	08012941 	.word	0x08012941
 801296c:	08012941 	.word	0x08012941
 8012970:	080129c5 	.word	0x080129c5
 8012974:	08012941 	.word	0x08012941
 8012978:	08012941 	.word	0x08012941
 801297c:	08012941 	.word	0x08012941
 8012980:	08012941 	.word	0x08012941
 8012984:	08012ad1 	.word	0x08012ad1
 8012988:	080129f5 	.word	0x080129f5
 801298c:	08012ab3 	.word	0x08012ab3
 8012990:	08012941 	.word	0x08012941
 8012994:	08012941 	.word	0x08012941
 8012998:	08012af3 	.word	0x08012af3
 801299c:	08012941 	.word	0x08012941
 80129a0:	080129f5 	.word	0x080129f5
 80129a4:	08012941 	.word	0x08012941
 80129a8:	08012941 	.word	0x08012941
 80129ac:	08012abb 	.word	0x08012abb
 80129b0:	680b      	ldr	r3, [r1, #0]
 80129b2:	1d1a      	adds	r2, r3, #4
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	600a      	str	r2, [r1, #0]
 80129b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80129bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80129c0:	2301      	movs	r3, #1
 80129c2:	e0a3      	b.n	8012b0c <_printf_i+0x1f4>
 80129c4:	6825      	ldr	r5, [r4, #0]
 80129c6:	6808      	ldr	r0, [r1, #0]
 80129c8:	062e      	lsls	r6, r5, #24
 80129ca:	f100 0304 	add.w	r3, r0, #4
 80129ce:	d50a      	bpl.n	80129e6 <_printf_i+0xce>
 80129d0:	6805      	ldr	r5, [r0, #0]
 80129d2:	600b      	str	r3, [r1, #0]
 80129d4:	2d00      	cmp	r5, #0
 80129d6:	da03      	bge.n	80129e0 <_printf_i+0xc8>
 80129d8:	232d      	movs	r3, #45	; 0x2d
 80129da:	426d      	negs	r5, r5
 80129dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129e0:	485e      	ldr	r0, [pc, #376]	; (8012b5c <_printf_i+0x244>)
 80129e2:	230a      	movs	r3, #10
 80129e4:	e019      	b.n	8012a1a <_printf_i+0x102>
 80129e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80129ea:	6805      	ldr	r5, [r0, #0]
 80129ec:	600b      	str	r3, [r1, #0]
 80129ee:	bf18      	it	ne
 80129f0:	b22d      	sxthne	r5, r5
 80129f2:	e7ef      	b.n	80129d4 <_printf_i+0xbc>
 80129f4:	680b      	ldr	r3, [r1, #0]
 80129f6:	6825      	ldr	r5, [r4, #0]
 80129f8:	1d18      	adds	r0, r3, #4
 80129fa:	6008      	str	r0, [r1, #0]
 80129fc:	0628      	lsls	r0, r5, #24
 80129fe:	d501      	bpl.n	8012a04 <_printf_i+0xec>
 8012a00:	681d      	ldr	r5, [r3, #0]
 8012a02:	e002      	b.n	8012a0a <_printf_i+0xf2>
 8012a04:	0669      	lsls	r1, r5, #25
 8012a06:	d5fb      	bpl.n	8012a00 <_printf_i+0xe8>
 8012a08:	881d      	ldrh	r5, [r3, #0]
 8012a0a:	4854      	ldr	r0, [pc, #336]	; (8012b5c <_printf_i+0x244>)
 8012a0c:	2f6f      	cmp	r7, #111	; 0x6f
 8012a0e:	bf0c      	ite	eq
 8012a10:	2308      	moveq	r3, #8
 8012a12:	230a      	movne	r3, #10
 8012a14:	2100      	movs	r1, #0
 8012a16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012a1a:	6866      	ldr	r6, [r4, #4]
 8012a1c:	60a6      	str	r6, [r4, #8]
 8012a1e:	2e00      	cmp	r6, #0
 8012a20:	bfa2      	ittt	ge
 8012a22:	6821      	ldrge	r1, [r4, #0]
 8012a24:	f021 0104 	bicge.w	r1, r1, #4
 8012a28:	6021      	strge	r1, [r4, #0]
 8012a2a:	b90d      	cbnz	r5, 8012a30 <_printf_i+0x118>
 8012a2c:	2e00      	cmp	r6, #0
 8012a2e:	d04d      	beq.n	8012acc <_printf_i+0x1b4>
 8012a30:	4616      	mov	r6, r2
 8012a32:	fbb5 f1f3 	udiv	r1, r5, r3
 8012a36:	fb03 5711 	mls	r7, r3, r1, r5
 8012a3a:	5dc7      	ldrb	r7, [r0, r7]
 8012a3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012a40:	462f      	mov	r7, r5
 8012a42:	42bb      	cmp	r3, r7
 8012a44:	460d      	mov	r5, r1
 8012a46:	d9f4      	bls.n	8012a32 <_printf_i+0x11a>
 8012a48:	2b08      	cmp	r3, #8
 8012a4a:	d10b      	bne.n	8012a64 <_printf_i+0x14c>
 8012a4c:	6823      	ldr	r3, [r4, #0]
 8012a4e:	07df      	lsls	r7, r3, #31
 8012a50:	d508      	bpl.n	8012a64 <_printf_i+0x14c>
 8012a52:	6923      	ldr	r3, [r4, #16]
 8012a54:	6861      	ldr	r1, [r4, #4]
 8012a56:	4299      	cmp	r1, r3
 8012a58:	bfde      	ittt	le
 8012a5a:	2330      	movle	r3, #48	; 0x30
 8012a5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012a60:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8012a64:	1b92      	subs	r2, r2, r6
 8012a66:	6122      	str	r2, [r4, #16]
 8012a68:	f8cd a000 	str.w	sl, [sp]
 8012a6c:	464b      	mov	r3, r9
 8012a6e:	aa03      	add	r2, sp, #12
 8012a70:	4621      	mov	r1, r4
 8012a72:	4640      	mov	r0, r8
 8012a74:	f7ff fee2 	bl	801283c <_printf_common>
 8012a78:	3001      	adds	r0, #1
 8012a7a:	d14c      	bne.n	8012b16 <_printf_i+0x1fe>
 8012a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a80:	b004      	add	sp, #16
 8012a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a86:	4835      	ldr	r0, [pc, #212]	; (8012b5c <_printf_i+0x244>)
 8012a88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012a8c:	6823      	ldr	r3, [r4, #0]
 8012a8e:	680e      	ldr	r6, [r1, #0]
 8012a90:	061f      	lsls	r7, r3, #24
 8012a92:	f856 5b04 	ldr.w	r5, [r6], #4
 8012a96:	600e      	str	r6, [r1, #0]
 8012a98:	d514      	bpl.n	8012ac4 <_printf_i+0x1ac>
 8012a9a:	07d9      	lsls	r1, r3, #31
 8012a9c:	bf44      	itt	mi
 8012a9e:	f043 0320 	orrmi.w	r3, r3, #32
 8012aa2:	6023      	strmi	r3, [r4, #0]
 8012aa4:	b91d      	cbnz	r5, 8012aae <_printf_i+0x196>
 8012aa6:	6823      	ldr	r3, [r4, #0]
 8012aa8:	f023 0320 	bic.w	r3, r3, #32
 8012aac:	6023      	str	r3, [r4, #0]
 8012aae:	2310      	movs	r3, #16
 8012ab0:	e7b0      	b.n	8012a14 <_printf_i+0xfc>
 8012ab2:	6823      	ldr	r3, [r4, #0]
 8012ab4:	f043 0320 	orr.w	r3, r3, #32
 8012ab8:	6023      	str	r3, [r4, #0]
 8012aba:	2378      	movs	r3, #120	; 0x78
 8012abc:	4828      	ldr	r0, [pc, #160]	; (8012b60 <_printf_i+0x248>)
 8012abe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012ac2:	e7e3      	b.n	8012a8c <_printf_i+0x174>
 8012ac4:	065e      	lsls	r6, r3, #25
 8012ac6:	bf48      	it	mi
 8012ac8:	b2ad      	uxthmi	r5, r5
 8012aca:	e7e6      	b.n	8012a9a <_printf_i+0x182>
 8012acc:	4616      	mov	r6, r2
 8012ace:	e7bb      	b.n	8012a48 <_printf_i+0x130>
 8012ad0:	680b      	ldr	r3, [r1, #0]
 8012ad2:	6826      	ldr	r6, [r4, #0]
 8012ad4:	6960      	ldr	r0, [r4, #20]
 8012ad6:	1d1d      	adds	r5, r3, #4
 8012ad8:	600d      	str	r5, [r1, #0]
 8012ada:	0635      	lsls	r5, r6, #24
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	d501      	bpl.n	8012ae4 <_printf_i+0x1cc>
 8012ae0:	6018      	str	r0, [r3, #0]
 8012ae2:	e002      	b.n	8012aea <_printf_i+0x1d2>
 8012ae4:	0671      	lsls	r1, r6, #25
 8012ae6:	d5fb      	bpl.n	8012ae0 <_printf_i+0x1c8>
 8012ae8:	8018      	strh	r0, [r3, #0]
 8012aea:	2300      	movs	r3, #0
 8012aec:	6123      	str	r3, [r4, #16]
 8012aee:	4616      	mov	r6, r2
 8012af0:	e7ba      	b.n	8012a68 <_printf_i+0x150>
 8012af2:	680b      	ldr	r3, [r1, #0]
 8012af4:	1d1a      	adds	r2, r3, #4
 8012af6:	600a      	str	r2, [r1, #0]
 8012af8:	681e      	ldr	r6, [r3, #0]
 8012afa:	6862      	ldr	r2, [r4, #4]
 8012afc:	2100      	movs	r1, #0
 8012afe:	4630      	mov	r0, r6
 8012b00:	f7ed fb8e 	bl	8000220 <memchr>
 8012b04:	b108      	cbz	r0, 8012b0a <_printf_i+0x1f2>
 8012b06:	1b80      	subs	r0, r0, r6
 8012b08:	6060      	str	r0, [r4, #4]
 8012b0a:	6863      	ldr	r3, [r4, #4]
 8012b0c:	6123      	str	r3, [r4, #16]
 8012b0e:	2300      	movs	r3, #0
 8012b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b14:	e7a8      	b.n	8012a68 <_printf_i+0x150>
 8012b16:	6923      	ldr	r3, [r4, #16]
 8012b18:	4632      	mov	r2, r6
 8012b1a:	4649      	mov	r1, r9
 8012b1c:	4640      	mov	r0, r8
 8012b1e:	47d0      	blx	sl
 8012b20:	3001      	adds	r0, #1
 8012b22:	d0ab      	beq.n	8012a7c <_printf_i+0x164>
 8012b24:	6823      	ldr	r3, [r4, #0]
 8012b26:	079b      	lsls	r3, r3, #30
 8012b28:	d413      	bmi.n	8012b52 <_printf_i+0x23a>
 8012b2a:	68e0      	ldr	r0, [r4, #12]
 8012b2c:	9b03      	ldr	r3, [sp, #12]
 8012b2e:	4298      	cmp	r0, r3
 8012b30:	bfb8      	it	lt
 8012b32:	4618      	movlt	r0, r3
 8012b34:	e7a4      	b.n	8012a80 <_printf_i+0x168>
 8012b36:	2301      	movs	r3, #1
 8012b38:	4632      	mov	r2, r6
 8012b3a:	4649      	mov	r1, r9
 8012b3c:	4640      	mov	r0, r8
 8012b3e:	47d0      	blx	sl
 8012b40:	3001      	adds	r0, #1
 8012b42:	d09b      	beq.n	8012a7c <_printf_i+0x164>
 8012b44:	3501      	adds	r5, #1
 8012b46:	68e3      	ldr	r3, [r4, #12]
 8012b48:	9903      	ldr	r1, [sp, #12]
 8012b4a:	1a5b      	subs	r3, r3, r1
 8012b4c:	42ab      	cmp	r3, r5
 8012b4e:	dcf2      	bgt.n	8012b36 <_printf_i+0x21e>
 8012b50:	e7eb      	b.n	8012b2a <_printf_i+0x212>
 8012b52:	2500      	movs	r5, #0
 8012b54:	f104 0619 	add.w	r6, r4, #25
 8012b58:	e7f5      	b.n	8012b46 <_printf_i+0x22e>
 8012b5a:	bf00      	nop
 8012b5c:	08019ce6 	.word	0x08019ce6
 8012b60:	08019cf7 	.word	0x08019cf7

08012b64 <iprintf>:
 8012b64:	b40f      	push	{r0, r1, r2, r3}
 8012b66:	4b0a      	ldr	r3, [pc, #40]	; (8012b90 <iprintf+0x2c>)
 8012b68:	b513      	push	{r0, r1, r4, lr}
 8012b6a:	681c      	ldr	r4, [r3, #0]
 8012b6c:	b124      	cbz	r4, 8012b78 <iprintf+0x14>
 8012b6e:	69a3      	ldr	r3, [r4, #24]
 8012b70:	b913      	cbnz	r3, 8012b78 <iprintf+0x14>
 8012b72:	4620      	mov	r0, r4
 8012b74:	f001 f93a 	bl	8013dec <__sinit>
 8012b78:	ab05      	add	r3, sp, #20
 8012b7a:	9a04      	ldr	r2, [sp, #16]
 8012b7c:	68a1      	ldr	r1, [r4, #8]
 8012b7e:	9301      	str	r3, [sp, #4]
 8012b80:	4620      	mov	r0, r4
 8012b82:	f001 ff6d 	bl	8014a60 <_vfiprintf_r>
 8012b86:	b002      	add	sp, #8
 8012b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b8c:	b004      	add	sp, #16
 8012b8e:	4770      	bx	lr
 8012b90:	20000018 	.word	0x20000018

08012b94 <putchar>:
 8012b94:	4b09      	ldr	r3, [pc, #36]	; (8012bbc <putchar+0x28>)
 8012b96:	b513      	push	{r0, r1, r4, lr}
 8012b98:	681c      	ldr	r4, [r3, #0]
 8012b9a:	4601      	mov	r1, r0
 8012b9c:	b134      	cbz	r4, 8012bac <putchar+0x18>
 8012b9e:	69a3      	ldr	r3, [r4, #24]
 8012ba0:	b923      	cbnz	r3, 8012bac <putchar+0x18>
 8012ba2:	9001      	str	r0, [sp, #4]
 8012ba4:	4620      	mov	r0, r4
 8012ba6:	f001 f921 	bl	8013dec <__sinit>
 8012baa:	9901      	ldr	r1, [sp, #4]
 8012bac:	68a2      	ldr	r2, [r4, #8]
 8012bae:	4620      	mov	r0, r4
 8012bb0:	b002      	add	sp, #8
 8012bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bb6:	f002 b883 	b.w	8014cc0 <_putc_r>
 8012bba:	bf00      	nop
 8012bbc:	20000018 	.word	0x20000018

08012bc0 <_puts_r>:
 8012bc0:	b570      	push	{r4, r5, r6, lr}
 8012bc2:	460e      	mov	r6, r1
 8012bc4:	4605      	mov	r5, r0
 8012bc6:	b118      	cbz	r0, 8012bd0 <_puts_r+0x10>
 8012bc8:	6983      	ldr	r3, [r0, #24]
 8012bca:	b90b      	cbnz	r3, 8012bd0 <_puts_r+0x10>
 8012bcc:	f001 f90e 	bl	8013dec <__sinit>
 8012bd0:	69ab      	ldr	r3, [r5, #24]
 8012bd2:	68ac      	ldr	r4, [r5, #8]
 8012bd4:	b913      	cbnz	r3, 8012bdc <_puts_r+0x1c>
 8012bd6:	4628      	mov	r0, r5
 8012bd8:	f001 f908 	bl	8013dec <__sinit>
 8012bdc:	4b2c      	ldr	r3, [pc, #176]	; (8012c90 <_puts_r+0xd0>)
 8012bde:	429c      	cmp	r4, r3
 8012be0:	d120      	bne.n	8012c24 <_puts_r+0x64>
 8012be2:	686c      	ldr	r4, [r5, #4]
 8012be4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012be6:	07db      	lsls	r3, r3, #31
 8012be8:	d405      	bmi.n	8012bf6 <_puts_r+0x36>
 8012bea:	89a3      	ldrh	r3, [r4, #12]
 8012bec:	0598      	lsls	r0, r3, #22
 8012bee:	d402      	bmi.n	8012bf6 <_puts_r+0x36>
 8012bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012bf2:	f001 f9b0 	bl	8013f56 <__retarget_lock_acquire_recursive>
 8012bf6:	89a3      	ldrh	r3, [r4, #12]
 8012bf8:	0719      	lsls	r1, r3, #28
 8012bfa:	d51d      	bpl.n	8012c38 <_puts_r+0x78>
 8012bfc:	6923      	ldr	r3, [r4, #16]
 8012bfe:	b1db      	cbz	r3, 8012c38 <_puts_r+0x78>
 8012c00:	3e01      	subs	r6, #1
 8012c02:	68a3      	ldr	r3, [r4, #8]
 8012c04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012c08:	3b01      	subs	r3, #1
 8012c0a:	60a3      	str	r3, [r4, #8]
 8012c0c:	bb39      	cbnz	r1, 8012c5e <_puts_r+0x9e>
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	da38      	bge.n	8012c84 <_puts_r+0xc4>
 8012c12:	4622      	mov	r2, r4
 8012c14:	210a      	movs	r1, #10
 8012c16:	4628      	mov	r0, r5
 8012c18:	f000 f878 	bl	8012d0c <__swbuf_r>
 8012c1c:	3001      	adds	r0, #1
 8012c1e:	d011      	beq.n	8012c44 <_puts_r+0x84>
 8012c20:	250a      	movs	r5, #10
 8012c22:	e011      	b.n	8012c48 <_puts_r+0x88>
 8012c24:	4b1b      	ldr	r3, [pc, #108]	; (8012c94 <_puts_r+0xd4>)
 8012c26:	429c      	cmp	r4, r3
 8012c28:	d101      	bne.n	8012c2e <_puts_r+0x6e>
 8012c2a:	68ac      	ldr	r4, [r5, #8]
 8012c2c:	e7da      	b.n	8012be4 <_puts_r+0x24>
 8012c2e:	4b1a      	ldr	r3, [pc, #104]	; (8012c98 <_puts_r+0xd8>)
 8012c30:	429c      	cmp	r4, r3
 8012c32:	bf08      	it	eq
 8012c34:	68ec      	ldreq	r4, [r5, #12]
 8012c36:	e7d5      	b.n	8012be4 <_puts_r+0x24>
 8012c38:	4621      	mov	r1, r4
 8012c3a:	4628      	mov	r0, r5
 8012c3c:	f000 f8b8 	bl	8012db0 <__swsetup_r>
 8012c40:	2800      	cmp	r0, #0
 8012c42:	d0dd      	beq.n	8012c00 <_puts_r+0x40>
 8012c44:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8012c48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012c4a:	07da      	lsls	r2, r3, #31
 8012c4c:	d405      	bmi.n	8012c5a <_puts_r+0x9a>
 8012c4e:	89a3      	ldrh	r3, [r4, #12]
 8012c50:	059b      	lsls	r3, r3, #22
 8012c52:	d402      	bmi.n	8012c5a <_puts_r+0x9a>
 8012c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012c56:	f001 f97f 	bl	8013f58 <__retarget_lock_release_recursive>
 8012c5a:	4628      	mov	r0, r5
 8012c5c:	bd70      	pop	{r4, r5, r6, pc}
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	da04      	bge.n	8012c6c <_puts_r+0xac>
 8012c62:	69a2      	ldr	r2, [r4, #24]
 8012c64:	429a      	cmp	r2, r3
 8012c66:	dc06      	bgt.n	8012c76 <_puts_r+0xb6>
 8012c68:	290a      	cmp	r1, #10
 8012c6a:	d004      	beq.n	8012c76 <_puts_r+0xb6>
 8012c6c:	6823      	ldr	r3, [r4, #0]
 8012c6e:	1c5a      	adds	r2, r3, #1
 8012c70:	6022      	str	r2, [r4, #0]
 8012c72:	7019      	strb	r1, [r3, #0]
 8012c74:	e7c5      	b.n	8012c02 <_puts_r+0x42>
 8012c76:	4622      	mov	r2, r4
 8012c78:	4628      	mov	r0, r5
 8012c7a:	f000 f847 	bl	8012d0c <__swbuf_r>
 8012c7e:	3001      	adds	r0, #1
 8012c80:	d1bf      	bne.n	8012c02 <_puts_r+0x42>
 8012c82:	e7df      	b.n	8012c44 <_puts_r+0x84>
 8012c84:	6823      	ldr	r3, [r4, #0]
 8012c86:	250a      	movs	r5, #10
 8012c88:	1c5a      	adds	r2, r3, #1
 8012c8a:	6022      	str	r2, [r4, #0]
 8012c8c:	701d      	strb	r5, [r3, #0]
 8012c8e:	e7db      	b.n	8012c48 <_puts_r+0x88>
 8012c90:	08019df8 	.word	0x08019df8
 8012c94:	08019e18 	.word	0x08019e18
 8012c98:	08019dd8 	.word	0x08019dd8

08012c9c <puts>:
 8012c9c:	4b02      	ldr	r3, [pc, #8]	; (8012ca8 <puts+0xc>)
 8012c9e:	4601      	mov	r1, r0
 8012ca0:	6818      	ldr	r0, [r3, #0]
 8012ca2:	f7ff bf8d 	b.w	8012bc0 <_puts_r>
 8012ca6:	bf00      	nop
 8012ca8:	20000018 	.word	0x20000018

08012cac <_sbrk_r>:
 8012cac:	b538      	push	{r3, r4, r5, lr}
 8012cae:	4d06      	ldr	r5, [pc, #24]	; (8012cc8 <_sbrk_r+0x1c>)
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	4604      	mov	r4, r0
 8012cb4:	4608      	mov	r0, r1
 8012cb6:	602b      	str	r3, [r5, #0]
 8012cb8:	f7f0 fe7e 	bl	80039b8 <_sbrk>
 8012cbc:	1c43      	adds	r3, r0, #1
 8012cbe:	d102      	bne.n	8012cc6 <_sbrk_r+0x1a>
 8012cc0:	682b      	ldr	r3, [r5, #0]
 8012cc2:	b103      	cbz	r3, 8012cc6 <_sbrk_r+0x1a>
 8012cc4:	6023      	str	r3, [r4, #0]
 8012cc6:	bd38      	pop	{r3, r4, r5, pc}
 8012cc8:	200413b0 	.word	0x200413b0

08012ccc <siprintf>:
 8012ccc:	b40e      	push	{r1, r2, r3}
 8012cce:	b500      	push	{lr}
 8012cd0:	b09c      	sub	sp, #112	; 0x70
 8012cd2:	ab1d      	add	r3, sp, #116	; 0x74
 8012cd4:	9002      	str	r0, [sp, #8]
 8012cd6:	9006      	str	r0, [sp, #24]
 8012cd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012cdc:	4809      	ldr	r0, [pc, #36]	; (8012d04 <siprintf+0x38>)
 8012cde:	9107      	str	r1, [sp, #28]
 8012ce0:	9104      	str	r1, [sp, #16]
 8012ce2:	4909      	ldr	r1, [pc, #36]	; (8012d08 <siprintf+0x3c>)
 8012ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ce8:	9105      	str	r1, [sp, #20]
 8012cea:	6800      	ldr	r0, [r0, #0]
 8012cec:	9301      	str	r3, [sp, #4]
 8012cee:	a902      	add	r1, sp, #8
 8012cf0:	f001 fd8c 	bl	801480c <_svfiprintf_r>
 8012cf4:	9b02      	ldr	r3, [sp, #8]
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	701a      	strb	r2, [r3, #0]
 8012cfa:	b01c      	add	sp, #112	; 0x70
 8012cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d00:	b003      	add	sp, #12
 8012d02:	4770      	bx	lr
 8012d04:	20000018 	.word	0x20000018
 8012d08:	ffff0208 	.word	0xffff0208

08012d0c <__swbuf_r>:
 8012d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d0e:	460e      	mov	r6, r1
 8012d10:	4614      	mov	r4, r2
 8012d12:	4605      	mov	r5, r0
 8012d14:	b118      	cbz	r0, 8012d1e <__swbuf_r+0x12>
 8012d16:	6983      	ldr	r3, [r0, #24]
 8012d18:	b90b      	cbnz	r3, 8012d1e <__swbuf_r+0x12>
 8012d1a:	f001 f867 	bl	8013dec <__sinit>
 8012d1e:	4b21      	ldr	r3, [pc, #132]	; (8012da4 <__swbuf_r+0x98>)
 8012d20:	429c      	cmp	r4, r3
 8012d22:	d12b      	bne.n	8012d7c <__swbuf_r+0x70>
 8012d24:	686c      	ldr	r4, [r5, #4]
 8012d26:	69a3      	ldr	r3, [r4, #24]
 8012d28:	60a3      	str	r3, [r4, #8]
 8012d2a:	89a3      	ldrh	r3, [r4, #12]
 8012d2c:	071a      	lsls	r2, r3, #28
 8012d2e:	d52f      	bpl.n	8012d90 <__swbuf_r+0x84>
 8012d30:	6923      	ldr	r3, [r4, #16]
 8012d32:	b36b      	cbz	r3, 8012d90 <__swbuf_r+0x84>
 8012d34:	6923      	ldr	r3, [r4, #16]
 8012d36:	6820      	ldr	r0, [r4, #0]
 8012d38:	1ac0      	subs	r0, r0, r3
 8012d3a:	6963      	ldr	r3, [r4, #20]
 8012d3c:	b2f6      	uxtb	r6, r6
 8012d3e:	4283      	cmp	r3, r0
 8012d40:	4637      	mov	r7, r6
 8012d42:	dc04      	bgt.n	8012d4e <__swbuf_r+0x42>
 8012d44:	4621      	mov	r1, r4
 8012d46:	4628      	mov	r0, r5
 8012d48:	f000 ffbc 	bl	8013cc4 <_fflush_r>
 8012d4c:	bb30      	cbnz	r0, 8012d9c <__swbuf_r+0x90>
 8012d4e:	68a3      	ldr	r3, [r4, #8]
 8012d50:	3b01      	subs	r3, #1
 8012d52:	60a3      	str	r3, [r4, #8]
 8012d54:	6823      	ldr	r3, [r4, #0]
 8012d56:	1c5a      	adds	r2, r3, #1
 8012d58:	6022      	str	r2, [r4, #0]
 8012d5a:	701e      	strb	r6, [r3, #0]
 8012d5c:	6963      	ldr	r3, [r4, #20]
 8012d5e:	3001      	adds	r0, #1
 8012d60:	4283      	cmp	r3, r0
 8012d62:	d004      	beq.n	8012d6e <__swbuf_r+0x62>
 8012d64:	89a3      	ldrh	r3, [r4, #12]
 8012d66:	07db      	lsls	r3, r3, #31
 8012d68:	d506      	bpl.n	8012d78 <__swbuf_r+0x6c>
 8012d6a:	2e0a      	cmp	r6, #10
 8012d6c:	d104      	bne.n	8012d78 <__swbuf_r+0x6c>
 8012d6e:	4621      	mov	r1, r4
 8012d70:	4628      	mov	r0, r5
 8012d72:	f000 ffa7 	bl	8013cc4 <_fflush_r>
 8012d76:	b988      	cbnz	r0, 8012d9c <__swbuf_r+0x90>
 8012d78:	4638      	mov	r0, r7
 8012d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d7c:	4b0a      	ldr	r3, [pc, #40]	; (8012da8 <__swbuf_r+0x9c>)
 8012d7e:	429c      	cmp	r4, r3
 8012d80:	d101      	bne.n	8012d86 <__swbuf_r+0x7a>
 8012d82:	68ac      	ldr	r4, [r5, #8]
 8012d84:	e7cf      	b.n	8012d26 <__swbuf_r+0x1a>
 8012d86:	4b09      	ldr	r3, [pc, #36]	; (8012dac <__swbuf_r+0xa0>)
 8012d88:	429c      	cmp	r4, r3
 8012d8a:	bf08      	it	eq
 8012d8c:	68ec      	ldreq	r4, [r5, #12]
 8012d8e:	e7ca      	b.n	8012d26 <__swbuf_r+0x1a>
 8012d90:	4621      	mov	r1, r4
 8012d92:	4628      	mov	r0, r5
 8012d94:	f000 f80c 	bl	8012db0 <__swsetup_r>
 8012d98:	2800      	cmp	r0, #0
 8012d9a:	d0cb      	beq.n	8012d34 <__swbuf_r+0x28>
 8012d9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012da0:	e7ea      	b.n	8012d78 <__swbuf_r+0x6c>
 8012da2:	bf00      	nop
 8012da4:	08019df8 	.word	0x08019df8
 8012da8:	08019e18 	.word	0x08019e18
 8012dac:	08019dd8 	.word	0x08019dd8

08012db0 <__swsetup_r>:
 8012db0:	4b32      	ldr	r3, [pc, #200]	; (8012e7c <__swsetup_r+0xcc>)
 8012db2:	b570      	push	{r4, r5, r6, lr}
 8012db4:	681d      	ldr	r5, [r3, #0]
 8012db6:	4606      	mov	r6, r0
 8012db8:	460c      	mov	r4, r1
 8012dba:	b125      	cbz	r5, 8012dc6 <__swsetup_r+0x16>
 8012dbc:	69ab      	ldr	r3, [r5, #24]
 8012dbe:	b913      	cbnz	r3, 8012dc6 <__swsetup_r+0x16>
 8012dc0:	4628      	mov	r0, r5
 8012dc2:	f001 f813 	bl	8013dec <__sinit>
 8012dc6:	4b2e      	ldr	r3, [pc, #184]	; (8012e80 <__swsetup_r+0xd0>)
 8012dc8:	429c      	cmp	r4, r3
 8012dca:	d10f      	bne.n	8012dec <__swsetup_r+0x3c>
 8012dcc:	686c      	ldr	r4, [r5, #4]
 8012dce:	89a3      	ldrh	r3, [r4, #12]
 8012dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012dd4:	0719      	lsls	r1, r3, #28
 8012dd6:	d42c      	bmi.n	8012e32 <__swsetup_r+0x82>
 8012dd8:	06dd      	lsls	r5, r3, #27
 8012dda:	d411      	bmi.n	8012e00 <__swsetup_r+0x50>
 8012ddc:	2309      	movs	r3, #9
 8012dde:	6033      	str	r3, [r6, #0]
 8012de0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012de4:	81a3      	strh	r3, [r4, #12]
 8012de6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012dea:	e03e      	b.n	8012e6a <__swsetup_r+0xba>
 8012dec:	4b25      	ldr	r3, [pc, #148]	; (8012e84 <__swsetup_r+0xd4>)
 8012dee:	429c      	cmp	r4, r3
 8012df0:	d101      	bne.n	8012df6 <__swsetup_r+0x46>
 8012df2:	68ac      	ldr	r4, [r5, #8]
 8012df4:	e7eb      	b.n	8012dce <__swsetup_r+0x1e>
 8012df6:	4b24      	ldr	r3, [pc, #144]	; (8012e88 <__swsetup_r+0xd8>)
 8012df8:	429c      	cmp	r4, r3
 8012dfa:	bf08      	it	eq
 8012dfc:	68ec      	ldreq	r4, [r5, #12]
 8012dfe:	e7e6      	b.n	8012dce <__swsetup_r+0x1e>
 8012e00:	0758      	lsls	r0, r3, #29
 8012e02:	d512      	bpl.n	8012e2a <__swsetup_r+0x7a>
 8012e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012e06:	b141      	cbz	r1, 8012e1a <__swsetup_r+0x6a>
 8012e08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012e0c:	4299      	cmp	r1, r3
 8012e0e:	d002      	beq.n	8012e16 <__swsetup_r+0x66>
 8012e10:	4630      	mov	r0, r6
 8012e12:	f7ff f993 	bl	801213c <_free_r>
 8012e16:	2300      	movs	r3, #0
 8012e18:	6363      	str	r3, [r4, #52]	; 0x34
 8012e1a:	89a3      	ldrh	r3, [r4, #12]
 8012e1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012e20:	81a3      	strh	r3, [r4, #12]
 8012e22:	2300      	movs	r3, #0
 8012e24:	6063      	str	r3, [r4, #4]
 8012e26:	6923      	ldr	r3, [r4, #16]
 8012e28:	6023      	str	r3, [r4, #0]
 8012e2a:	89a3      	ldrh	r3, [r4, #12]
 8012e2c:	f043 0308 	orr.w	r3, r3, #8
 8012e30:	81a3      	strh	r3, [r4, #12]
 8012e32:	6923      	ldr	r3, [r4, #16]
 8012e34:	b94b      	cbnz	r3, 8012e4a <__swsetup_r+0x9a>
 8012e36:	89a3      	ldrh	r3, [r4, #12]
 8012e38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e40:	d003      	beq.n	8012e4a <__swsetup_r+0x9a>
 8012e42:	4621      	mov	r1, r4
 8012e44:	4630      	mov	r0, r6
 8012e46:	f001 f8ad 	bl	8013fa4 <__smakebuf_r>
 8012e4a:	89a0      	ldrh	r0, [r4, #12]
 8012e4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012e50:	f010 0301 	ands.w	r3, r0, #1
 8012e54:	d00a      	beq.n	8012e6c <__swsetup_r+0xbc>
 8012e56:	2300      	movs	r3, #0
 8012e58:	60a3      	str	r3, [r4, #8]
 8012e5a:	6963      	ldr	r3, [r4, #20]
 8012e5c:	425b      	negs	r3, r3
 8012e5e:	61a3      	str	r3, [r4, #24]
 8012e60:	6923      	ldr	r3, [r4, #16]
 8012e62:	b943      	cbnz	r3, 8012e76 <__swsetup_r+0xc6>
 8012e64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012e68:	d1ba      	bne.n	8012de0 <__swsetup_r+0x30>
 8012e6a:	bd70      	pop	{r4, r5, r6, pc}
 8012e6c:	0781      	lsls	r1, r0, #30
 8012e6e:	bf58      	it	pl
 8012e70:	6963      	ldrpl	r3, [r4, #20]
 8012e72:	60a3      	str	r3, [r4, #8]
 8012e74:	e7f4      	b.n	8012e60 <__swsetup_r+0xb0>
 8012e76:	2000      	movs	r0, #0
 8012e78:	e7f7      	b.n	8012e6a <__swsetup_r+0xba>
 8012e7a:	bf00      	nop
 8012e7c:	20000018 	.word	0x20000018
 8012e80:	08019df8 	.word	0x08019df8
 8012e84:	08019e18 	.word	0x08019e18
 8012e88:	08019dd8 	.word	0x08019dd8

08012e8c <__assert_func>:
 8012e8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012e8e:	4614      	mov	r4, r2
 8012e90:	461a      	mov	r2, r3
 8012e92:	4b09      	ldr	r3, [pc, #36]	; (8012eb8 <__assert_func+0x2c>)
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	4605      	mov	r5, r0
 8012e98:	68d8      	ldr	r0, [r3, #12]
 8012e9a:	b14c      	cbz	r4, 8012eb0 <__assert_func+0x24>
 8012e9c:	4b07      	ldr	r3, [pc, #28]	; (8012ebc <__assert_func+0x30>)
 8012e9e:	9100      	str	r1, [sp, #0]
 8012ea0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012ea4:	4906      	ldr	r1, [pc, #24]	; (8012ec0 <__assert_func+0x34>)
 8012ea6:	462b      	mov	r3, r5
 8012ea8:	f001 f81e 	bl	8013ee8 <fiprintf>
 8012eac:	f001 ffa6 	bl	8014dfc <abort>
 8012eb0:	4b04      	ldr	r3, [pc, #16]	; (8012ec4 <__assert_func+0x38>)
 8012eb2:	461c      	mov	r4, r3
 8012eb4:	e7f3      	b.n	8012e9e <__assert_func+0x12>
 8012eb6:	bf00      	nop
 8012eb8:	20000018 	.word	0x20000018
 8012ebc:	08019d08 	.word	0x08019d08
 8012ec0:	08019d15 	.word	0x08019d15
 8012ec4:	08019d43 	.word	0x08019d43

08012ec8 <quorem>:
 8012ec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ecc:	6903      	ldr	r3, [r0, #16]
 8012ece:	690c      	ldr	r4, [r1, #16]
 8012ed0:	42a3      	cmp	r3, r4
 8012ed2:	4607      	mov	r7, r0
 8012ed4:	f2c0 8081 	blt.w	8012fda <quorem+0x112>
 8012ed8:	3c01      	subs	r4, #1
 8012eda:	f101 0814 	add.w	r8, r1, #20
 8012ede:	f100 0514 	add.w	r5, r0, #20
 8012ee2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012ee6:	9301      	str	r3, [sp, #4]
 8012ee8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012eec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012ef0:	3301      	adds	r3, #1
 8012ef2:	429a      	cmp	r2, r3
 8012ef4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012ef8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012efc:	fbb2 f6f3 	udiv	r6, r2, r3
 8012f00:	d331      	bcc.n	8012f66 <quorem+0x9e>
 8012f02:	f04f 0e00 	mov.w	lr, #0
 8012f06:	4640      	mov	r0, r8
 8012f08:	46ac      	mov	ip, r5
 8012f0a:	46f2      	mov	sl, lr
 8012f0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8012f10:	b293      	uxth	r3, r2
 8012f12:	fb06 e303 	mla	r3, r6, r3, lr
 8012f16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012f1a:	b29b      	uxth	r3, r3
 8012f1c:	ebaa 0303 	sub.w	r3, sl, r3
 8012f20:	0c12      	lsrs	r2, r2, #16
 8012f22:	f8dc a000 	ldr.w	sl, [ip]
 8012f26:	fb06 e202 	mla	r2, r6, r2, lr
 8012f2a:	fa13 f38a 	uxtah	r3, r3, sl
 8012f2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012f32:	fa1f fa82 	uxth.w	sl, r2
 8012f36:	f8dc 2000 	ldr.w	r2, [ip]
 8012f3a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8012f3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012f42:	b29b      	uxth	r3, r3
 8012f44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012f48:	4581      	cmp	r9, r0
 8012f4a:	f84c 3b04 	str.w	r3, [ip], #4
 8012f4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012f52:	d2db      	bcs.n	8012f0c <quorem+0x44>
 8012f54:	f855 300b 	ldr.w	r3, [r5, fp]
 8012f58:	b92b      	cbnz	r3, 8012f66 <quorem+0x9e>
 8012f5a:	9b01      	ldr	r3, [sp, #4]
 8012f5c:	3b04      	subs	r3, #4
 8012f5e:	429d      	cmp	r5, r3
 8012f60:	461a      	mov	r2, r3
 8012f62:	d32e      	bcc.n	8012fc2 <quorem+0xfa>
 8012f64:	613c      	str	r4, [r7, #16]
 8012f66:	4638      	mov	r0, r7
 8012f68:	f001 fae6 	bl	8014538 <__mcmp>
 8012f6c:	2800      	cmp	r0, #0
 8012f6e:	db24      	blt.n	8012fba <quorem+0xf2>
 8012f70:	3601      	adds	r6, #1
 8012f72:	4628      	mov	r0, r5
 8012f74:	f04f 0c00 	mov.w	ip, #0
 8012f78:	f858 2b04 	ldr.w	r2, [r8], #4
 8012f7c:	f8d0 e000 	ldr.w	lr, [r0]
 8012f80:	b293      	uxth	r3, r2
 8012f82:	ebac 0303 	sub.w	r3, ip, r3
 8012f86:	0c12      	lsrs	r2, r2, #16
 8012f88:	fa13 f38e 	uxtah	r3, r3, lr
 8012f8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012f90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012f94:	b29b      	uxth	r3, r3
 8012f96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012f9a:	45c1      	cmp	r9, r8
 8012f9c:	f840 3b04 	str.w	r3, [r0], #4
 8012fa0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012fa4:	d2e8      	bcs.n	8012f78 <quorem+0xb0>
 8012fa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012faa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012fae:	b922      	cbnz	r2, 8012fba <quorem+0xf2>
 8012fb0:	3b04      	subs	r3, #4
 8012fb2:	429d      	cmp	r5, r3
 8012fb4:	461a      	mov	r2, r3
 8012fb6:	d30a      	bcc.n	8012fce <quorem+0x106>
 8012fb8:	613c      	str	r4, [r7, #16]
 8012fba:	4630      	mov	r0, r6
 8012fbc:	b003      	add	sp, #12
 8012fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fc2:	6812      	ldr	r2, [r2, #0]
 8012fc4:	3b04      	subs	r3, #4
 8012fc6:	2a00      	cmp	r2, #0
 8012fc8:	d1cc      	bne.n	8012f64 <quorem+0x9c>
 8012fca:	3c01      	subs	r4, #1
 8012fcc:	e7c7      	b.n	8012f5e <quorem+0x96>
 8012fce:	6812      	ldr	r2, [r2, #0]
 8012fd0:	3b04      	subs	r3, #4
 8012fd2:	2a00      	cmp	r2, #0
 8012fd4:	d1f0      	bne.n	8012fb8 <quorem+0xf0>
 8012fd6:	3c01      	subs	r4, #1
 8012fd8:	e7eb      	b.n	8012fb2 <quorem+0xea>
 8012fda:	2000      	movs	r0, #0
 8012fdc:	e7ee      	b.n	8012fbc <quorem+0xf4>
	...

08012fe0 <_dtoa_r>:
 8012fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fe4:	ed2d 8b02 	vpush	{d8}
 8012fe8:	ec57 6b10 	vmov	r6, r7, d0
 8012fec:	b095      	sub	sp, #84	; 0x54
 8012fee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012ff0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012ff4:	9105      	str	r1, [sp, #20]
 8012ff6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012ffa:	4604      	mov	r4, r0
 8012ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8012ffe:	930f      	str	r3, [sp, #60]	; 0x3c
 8013000:	b975      	cbnz	r5, 8013020 <_dtoa_r+0x40>
 8013002:	2010      	movs	r0, #16
 8013004:	f7ff f87c 	bl	8012100 <malloc>
 8013008:	4602      	mov	r2, r0
 801300a:	6260      	str	r0, [r4, #36]	; 0x24
 801300c:	b920      	cbnz	r0, 8013018 <_dtoa_r+0x38>
 801300e:	4bb2      	ldr	r3, [pc, #712]	; (80132d8 <_dtoa_r+0x2f8>)
 8013010:	21ea      	movs	r1, #234	; 0xea
 8013012:	48b2      	ldr	r0, [pc, #712]	; (80132dc <_dtoa_r+0x2fc>)
 8013014:	f7ff ff3a 	bl	8012e8c <__assert_func>
 8013018:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801301c:	6005      	str	r5, [r0, #0]
 801301e:	60c5      	str	r5, [r0, #12]
 8013020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013022:	6819      	ldr	r1, [r3, #0]
 8013024:	b151      	cbz	r1, 801303c <_dtoa_r+0x5c>
 8013026:	685a      	ldr	r2, [r3, #4]
 8013028:	604a      	str	r2, [r1, #4]
 801302a:	2301      	movs	r3, #1
 801302c:	4093      	lsls	r3, r2
 801302e:	608b      	str	r3, [r1, #8]
 8013030:	4620      	mov	r0, r4
 8013032:	f001 f843 	bl	80140bc <_Bfree>
 8013036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013038:	2200      	movs	r2, #0
 801303a:	601a      	str	r2, [r3, #0]
 801303c:	1e3b      	subs	r3, r7, #0
 801303e:	bfb9      	ittee	lt
 8013040:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013044:	9303      	strlt	r3, [sp, #12]
 8013046:	2300      	movge	r3, #0
 8013048:	f8c8 3000 	strge.w	r3, [r8]
 801304c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013050:	4ba3      	ldr	r3, [pc, #652]	; (80132e0 <_dtoa_r+0x300>)
 8013052:	bfbc      	itt	lt
 8013054:	2201      	movlt	r2, #1
 8013056:	f8c8 2000 	strlt.w	r2, [r8]
 801305a:	ea33 0309 	bics.w	r3, r3, r9
 801305e:	d11b      	bne.n	8013098 <_dtoa_r+0xb8>
 8013060:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013062:	f242 730f 	movw	r3, #9999	; 0x270f
 8013066:	6013      	str	r3, [r2, #0]
 8013068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801306c:	4333      	orrs	r3, r6
 801306e:	f000 857a 	beq.w	8013b66 <_dtoa_r+0xb86>
 8013072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013074:	b963      	cbnz	r3, 8013090 <_dtoa_r+0xb0>
 8013076:	4b9b      	ldr	r3, [pc, #620]	; (80132e4 <_dtoa_r+0x304>)
 8013078:	e024      	b.n	80130c4 <_dtoa_r+0xe4>
 801307a:	4b9b      	ldr	r3, [pc, #620]	; (80132e8 <_dtoa_r+0x308>)
 801307c:	9300      	str	r3, [sp, #0]
 801307e:	3308      	adds	r3, #8
 8013080:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013082:	6013      	str	r3, [r2, #0]
 8013084:	9800      	ldr	r0, [sp, #0]
 8013086:	b015      	add	sp, #84	; 0x54
 8013088:	ecbd 8b02 	vpop	{d8}
 801308c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013090:	4b94      	ldr	r3, [pc, #592]	; (80132e4 <_dtoa_r+0x304>)
 8013092:	9300      	str	r3, [sp, #0]
 8013094:	3303      	adds	r3, #3
 8013096:	e7f3      	b.n	8013080 <_dtoa_r+0xa0>
 8013098:	ed9d 7b02 	vldr	d7, [sp, #8]
 801309c:	2200      	movs	r2, #0
 801309e:	ec51 0b17 	vmov	r0, r1, d7
 80130a2:	2300      	movs	r3, #0
 80130a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80130a8:	f7ed fd2e 	bl	8000b08 <__aeabi_dcmpeq>
 80130ac:	4680      	mov	r8, r0
 80130ae:	b158      	cbz	r0, 80130c8 <_dtoa_r+0xe8>
 80130b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80130b2:	2301      	movs	r3, #1
 80130b4:	6013      	str	r3, [r2, #0]
 80130b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	f000 8551 	beq.w	8013b60 <_dtoa_r+0xb80>
 80130be:	488b      	ldr	r0, [pc, #556]	; (80132ec <_dtoa_r+0x30c>)
 80130c0:	6018      	str	r0, [r3, #0]
 80130c2:	1e43      	subs	r3, r0, #1
 80130c4:	9300      	str	r3, [sp, #0]
 80130c6:	e7dd      	b.n	8013084 <_dtoa_r+0xa4>
 80130c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80130cc:	aa12      	add	r2, sp, #72	; 0x48
 80130ce:	a913      	add	r1, sp, #76	; 0x4c
 80130d0:	4620      	mov	r0, r4
 80130d2:	f001 fad5 	bl	8014680 <__d2b>
 80130d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80130da:	4683      	mov	fp, r0
 80130dc:	2d00      	cmp	r5, #0
 80130de:	d07c      	beq.n	80131da <_dtoa_r+0x1fa>
 80130e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80130e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80130ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80130ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80130f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80130f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80130fa:	4b7d      	ldr	r3, [pc, #500]	; (80132f0 <_dtoa_r+0x310>)
 80130fc:	2200      	movs	r2, #0
 80130fe:	4630      	mov	r0, r6
 8013100:	4639      	mov	r1, r7
 8013102:	f7ed f8e1 	bl	80002c8 <__aeabi_dsub>
 8013106:	a36e      	add	r3, pc, #440	; (adr r3, 80132c0 <_dtoa_r+0x2e0>)
 8013108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801310c:	f7ed fa94 	bl	8000638 <__aeabi_dmul>
 8013110:	a36d      	add	r3, pc, #436	; (adr r3, 80132c8 <_dtoa_r+0x2e8>)
 8013112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013116:	f7ed f8d9 	bl	80002cc <__adddf3>
 801311a:	4606      	mov	r6, r0
 801311c:	4628      	mov	r0, r5
 801311e:	460f      	mov	r7, r1
 8013120:	f7ed fa20 	bl	8000564 <__aeabi_i2d>
 8013124:	a36a      	add	r3, pc, #424	; (adr r3, 80132d0 <_dtoa_r+0x2f0>)
 8013126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801312a:	f7ed fa85 	bl	8000638 <__aeabi_dmul>
 801312e:	4602      	mov	r2, r0
 8013130:	460b      	mov	r3, r1
 8013132:	4630      	mov	r0, r6
 8013134:	4639      	mov	r1, r7
 8013136:	f7ed f8c9 	bl	80002cc <__adddf3>
 801313a:	4606      	mov	r6, r0
 801313c:	460f      	mov	r7, r1
 801313e:	f7ed fd2b 	bl	8000b98 <__aeabi_d2iz>
 8013142:	2200      	movs	r2, #0
 8013144:	4682      	mov	sl, r0
 8013146:	2300      	movs	r3, #0
 8013148:	4630      	mov	r0, r6
 801314a:	4639      	mov	r1, r7
 801314c:	f7ed fce6 	bl	8000b1c <__aeabi_dcmplt>
 8013150:	b148      	cbz	r0, 8013166 <_dtoa_r+0x186>
 8013152:	4650      	mov	r0, sl
 8013154:	f7ed fa06 	bl	8000564 <__aeabi_i2d>
 8013158:	4632      	mov	r2, r6
 801315a:	463b      	mov	r3, r7
 801315c:	f7ed fcd4 	bl	8000b08 <__aeabi_dcmpeq>
 8013160:	b908      	cbnz	r0, 8013166 <_dtoa_r+0x186>
 8013162:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013166:	f1ba 0f16 	cmp.w	sl, #22
 801316a:	d854      	bhi.n	8013216 <_dtoa_r+0x236>
 801316c:	4b61      	ldr	r3, [pc, #388]	; (80132f4 <_dtoa_r+0x314>)
 801316e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013176:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801317a:	f7ed fccf 	bl	8000b1c <__aeabi_dcmplt>
 801317e:	2800      	cmp	r0, #0
 8013180:	d04b      	beq.n	801321a <_dtoa_r+0x23a>
 8013182:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013186:	2300      	movs	r3, #0
 8013188:	930e      	str	r3, [sp, #56]	; 0x38
 801318a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801318c:	1b5d      	subs	r5, r3, r5
 801318e:	1e6b      	subs	r3, r5, #1
 8013190:	9304      	str	r3, [sp, #16]
 8013192:	bf43      	ittte	mi
 8013194:	2300      	movmi	r3, #0
 8013196:	f1c5 0801 	rsbmi	r8, r5, #1
 801319a:	9304      	strmi	r3, [sp, #16]
 801319c:	f04f 0800 	movpl.w	r8, #0
 80131a0:	f1ba 0f00 	cmp.w	sl, #0
 80131a4:	db3b      	blt.n	801321e <_dtoa_r+0x23e>
 80131a6:	9b04      	ldr	r3, [sp, #16]
 80131a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80131ac:	4453      	add	r3, sl
 80131ae:	9304      	str	r3, [sp, #16]
 80131b0:	2300      	movs	r3, #0
 80131b2:	9306      	str	r3, [sp, #24]
 80131b4:	9b05      	ldr	r3, [sp, #20]
 80131b6:	2b09      	cmp	r3, #9
 80131b8:	d869      	bhi.n	801328e <_dtoa_r+0x2ae>
 80131ba:	2b05      	cmp	r3, #5
 80131bc:	bfc4      	itt	gt
 80131be:	3b04      	subgt	r3, #4
 80131c0:	9305      	strgt	r3, [sp, #20]
 80131c2:	9b05      	ldr	r3, [sp, #20]
 80131c4:	f1a3 0302 	sub.w	r3, r3, #2
 80131c8:	bfcc      	ite	gt
 80131ca:	2500      	movgt	r5, #0
 80131cc:	2501      	movle	r5, #1
 80131ce:	2b03      	cmp	r3, #3
 80131d0:	d869      	bhi.n	80132a6 <_dtoa_r+0x2c6>
 80131d2:	e8df f003 	tbb	[pc, r3]
 80131d6:	4e2c      	.short	0x4e2c
 80131d8:	5a4c      	.short	0x5a4c
 80131da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80131de:	441d      	add	r5, r3
 80131e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80131e4:	2b20      	cmp	r3, #32
 80131e6:	bfc1      	itttt	gt
 80131e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80131ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80131f0:	fa09 f303 	lslgt.w	r3, r9, r3
 80131f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80131f8:	bfda      	itte	le
 80131fa:	f1c3 0320 	rsble	r3, r3, #32
 80131fe:	fa06 f003 	lslle.w	r0, r6, r3
 8013202:	4318      	orrgt	r0, r3
 8013204:	f7ed f99e 	bl	8000544 <__aeabi_ui2d>
 8013208:	2301      	movs	r3, #1
 801320a:	4606      	mov	r6, r0
 801320c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013210:	3d01      	subs	r5, #1
 8013212:	9310      	str	r3, [sp, #64]	; 0x40
 8013214:	e771      	b.n	80130fa <_dtoa_r+0x11a>
 8013216:	2301      	movs	r3, #1
 8013218:	e7b6      	b.n	8013188 <_dtoa_r+0x1a8>
 801321a:	900e      	str	r0, [sp, #56]	; 0x38
 801321c:	e7b5      	b.n	801318a <_dtoa_r+0x1aa>
 801321e:	f1ca 0300 	rsb	r3, sl, #0
 8013222:	9306      	str	r3, [sp, #24]
 8013224:	2300      	movs	r3, #0
 8013226:	eba8 080a 	sub.w	r8, r8, sl
 801322a:	930d      	str	r3, [sp, #52]	; 0x34
 801322c:	e7c2      	b.n	80131b4 <_dtoa_r+0x1d4>
 801322e:	2300      	movs	r3, #0
 8013230:	9308      	str	r3, [sp, #32]
 8013232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013234:	2b00      	cmp	r3, #0
 8013236:	dc39      	bgt.n	80132ac <_dtoa_r+0x2cc>
 8013238:	f04f 0901 	mov.w	r9, #1
 801323c:	f8cd 9004 	str.w	r9, [sp, #4]
 8013240:	464b      	mov	r3, r9
 8013242:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013246:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013248:	2200      	movs	r2, #0
 801324a:	6042      	str	r2, [r0, #4]
 801324c:	2204      	movs	r2, #4
 801324e:	f102 0614 	add.w	r6, r2, #20
 8013252:	429e      	cmp	r6, r3
 8013254:	6841      	ldr	r1, [r0, #4]
 8013256:	d92f      	bls.n	80132b8 <_dtoa_r+0x2d8>
 8013258:	4620      	mov	r0, r4
 801325a:	f000 feef 	bl	801403c <_Balloc>
 801325e:	9000      	str	r0, [sp, #0]
 8013260:	2800      	cmp	r0, #0
 8013262:	d14b      	bne.n	80132fc <_dtoa_r+0x31c>
 8013264:	4b24      	ldr	r3, [pc, #144]	; (80132f8 <_dtoa_r+0x318>)
 8013266:	4602      	mov	r2, r0
 8013268:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801326c:	e6d1      	b.n	8013012 <_dtoa_r+0x32>
 801326e:	2301      	movs	r3, #1
 8013270:	e7de      	b.n	8013230 <_dtoa_r+0x250>
 8013272:	2300      	movs	r3, #0
 8013274:	9308      	str	r3, [sp, #32]
 8013276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013278:	eb0a 0903 	add.w	r9, sl, r3
 801327c:	f109 0301 	add.w	r3, r9, #1
 8013280:	2b01      	cmp	r3, #1
 8013282:	9301      	str	r3, [sp, #4]
 8013284:	bfb8      	it	lt
 8013286:	2301      	movlt	r3, #1
 8013288:	e7dd      	b.n	8013246 <_dtoa_r+0x266>
 801328a:	2301      	movs	r3, #1
 801328c:	e7f2      	b.n	8013274 <_dtoa_r+0x294>
 801328e:	2501      	movs	r5, #1
 8013290:	2300      	movs	r3, #0
 8013292:	9305      	str	r3, [sp, #20]
 8013294:	9508      	str	r5, [sp, #32]
 8013296:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801329a:	2200      	movs	r2, #0
 801329c:	f8cd 9004 	str.w	r9, [sp, #4]
 80132a0:	2312      	movs	r3, #18
 80132a2:	9209      	str	r2, [sp, #36]	; 0x24
 80132a4:	e7cf      	b.n	8013246 <_dtoa_r+0x266>
 80132a6:	2301      	movs	r3, #1
 80132a8:	9308      	str	r3, [sp, #32]
 80132aa:	e7f4      	b.n	8013296 <_dtoa_r+0x2b6>
 80132ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80132b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80132b4:	464b      	mov	r3, r9
 80132b6:	e7c6      	b.n	8013246 <_dtoa_r+0x266>
 80132b8:	3101      	adds	r1, #1
 80132ba:	6041      	str	r1, [r0, #4]
 80132bc:	0052      	lsls	r2, r2, #1
 80132be:	e7c6      	b.n	801324e <_dtoa_r+0x26e>
 80132c0:	636f4361 	.word	0x636f4361
 80132c4:	3fd287a7 	.word	0x3fd287a7
 80132c8:	8b60c8b3 	.word	0x8b60c8b3
 80132cc:	3fc68a28 	.word	0x3fc68a28
 80132d0:	509f79fb 	.word	0x509f79fb
 80132d4:	3fd34413 	.word	0x3fd34413
 80132d8:	08019d51 	.word	0x08019d51
 80132dc:	08019d68 	.word	0x08019d68
 80132e0:	7ff00000 	.word	0x7ff00000
 80132e4:	08019d4d 	.word	0x08019d4d
 80132e8:	08019d44 	.word	0x08019d44
 80132ec:	08019ce5 	.word	0x08019ce5
 80132f0:	3ff80000 	.word	0x3ff80000
 80132f4:	08019ec0 	.word	0x08019ec0
 80132f8:	08019dc7 	.word	0x08019dc7
 80132fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132fe:	9a00      	ldr	r2, [sp, #0]
 8013300:	601a      	str	r2, [r3, #0]
 8013302:	9b01      	ldr	r3, [sp, #4]
 8013304:	2b0e      	cmp	r3, #14
 8013306:	f200 80ad 	bhi.w	8013464 <_dtoa_r+0x484>
 801330a:	2d00      	cmp	r5, #0
 801330c:	f000 80aa 	beq.w	8013464 <_dtoa_r+0x484>
 8013310:	f1ba 0f00 	cmp.w	sl, #0
 8013314:	dd36      	ble.n	8013384 <_dtoa_r+0x3a4>
 8013316:	4ac3      	ldr	r2, [pc, #780]	; (8013624 <_dtoa_r+0x644>)
 8013318:	f00a 030f 	and.w	r3, sl, #15
 801331c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013320:	ed93 7b00 	vldr	d7, [r3]
 8013324:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013328:	ea4f 172a 	mov.w	r7, sl, asr #4
 801332c:	eeb0 8a47 	vmov.f32	s16, s14
 8013330:	eef0 8a67 	vmov.f32	s17, s15
 8013334:	d016      	beq.n	8013364 <_dtoa_r+0x384>
 8013336:	4bbc      	ldr	r3, [pc, #752]	; (8013628 <_dtoa_r+0x648>)
 8013338:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801333c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013340:	f7ed faa4 	bl	800088c <__aeabi_ddiv>
 8013344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013348:	f007 070f 	and.w	r7, r7, #15
 801334c:	2503      	movs	r5, #3
 801334e:	4eb6      	ldr	r6, [pc, #728]	; (8013628 <_dtoa_r+0x648>)
 8013350:	b957      	cbnz	r7, 8013368 <_dtoa_r+0x388>
 8013352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013356:	ec53 2b18 	vmov	r2, r3, d8
 801335a:	f7ed fa97 	bl	800088c <__aeabi_ddiv>
 801335e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013362:	e029      	b.n	80133b8 <_dtoa_r+0x3d8>
 8013364:	2502      	movs	r5, #2
 8013366:	e7f2      	b.n	801334e <_dtoa_r+0x36e>
 8013368:	07f9      	lsls	r1, r7, #31
 801336a:	d508      	bpl.n	801337e <_dtoa_r+0x39e>
 801336c:	ec51 0b18 	vmov	r0, r1, d8
 8013370:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013374:	f7ed f960 	bl	8000638 <__aeabi_dmul>
 8013378:	ec41 0b18 	vmov	d8, r0, r1
 801337c:	3501      	adds	r5, #1
 801337e:	107f      	asrs	r7, r7, #1
 8013380:	3608      	adds	r6, #8
 8013382:	e7e5      	b.n	8013350 <_dtoa_r+0x370>
 8013384:	f000 80a6 	beq.w	80134d4 <_dtoa_r+0x4f4>
 8013388:	f1ca 0600 	rsb	r6, sl, #0
 801338c:	4ba5      	ldr	r3, [pc, #660]	; (8013624 <_dtoa_r+0x644>)
 801338e:	4fa6      	ldr	r7, [pc, #664]	; (8013628 <_dtoa_r+0x648>)
 8013390:	f006 020f 	and.w	r2, r6, #15
 8013394:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801339c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80133a0:	f7ed f94a 	bl	8000638 <__aeabi_dmul>
 80133a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80133a8:	1136      	asrs	r6, r6, #4
 80133aa:	2300      	movs	r3, #0
 80133ac:	2502      	movs	r5, #2
 80133ae:	2e00      	cmp	r6, #0
 80133b0:	f040 8085 	bne.w	80134be <_dtoa_r+0x4de>
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d1d2      	bne.n	801335e <_dtoa_r+0x37e>
 80133b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	f000 808c 	beq.w	80134d8 <_dtoa_r+0x4f8>
 80133c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80133c4:	4b99      	ldr	r3, [pc, #612]	; (801362c <_dtoa_r+0x64c>)
 80133c6:	2200      	movs	r2, #0
 80133c8:	4630      	mov	r0, r6
 80133ca:	4639      	mov	r1, r7
 80133cc:	f7ed fba6 	bl	8000b1c <__aeabi_dcmplt>
 80133d0:	2800      	cmp	r0, #0
 80133d2:	f000 8081 	beq.w	80134d8 <_dtoa_r+0x4f8>
 80133d6:	9b01      	ldr	r3, [sp, #4]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d07d      	beq.n	80134d8 <_dtoa_r+0x4f8>
 80133dc:	f1b9 0f00 	cmp.w	r9, #0
 80133e0:	dd3c      	ble.n	801345c <_dtoa_r+0x47c>
 80133e2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80133e6:	9307      	str	r3, [sp, #28]
 80133e8:	2200      	movs	r2, #0
 80133ea:	4b91      	ldr	r3, [pc, #580]	; (8013630 <_dtoa_r+0x650>)
 80133ec:	4630      	mov	r0, r6
 80133ee:	4639      	mov	r1, r7
 80133f0:	f7ed f922 	bl	8000638 <__aeabi_dmul>
 80133f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80133f8:	3501      	adds	r5, #1
 80133fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80133fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013402:	4628      	mov	r0, r5
 8013404:	f7ed f8ae 	bl	8000564 <__aeabi_i2d>
 8013408:	4632      	mov	r2, r6
 801340a:	463b      	mov	r3, r7
 801340c:	f7ed f914 	bl	8000638 <__aeabi_dmul>
 8013410:	4b88      	ldr	r3, [pc, #544]	; (8013634 <_dtoa_r+0x654>)
 8013412:	2200      	movs	r2, #0
 8013414:	f7ec ff5a 	bl	80002cc <__adddf3>
 8013418:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801341c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013420:	9303      	str	r3, [sp, #12]
 8013422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013424:	2b00      	cmp	r3, #0
 8013426:	d15c      	bne.n	80134e2 <_dtoa_r+0x502>
 8013428:	4b83      	ldr	r3, [pc, #524]	; (8013638 <_dtoa_r+0x658>)
 801342a:	2200      	movs	r2, #0
 801342c:	4630      	mov	r0, r6
 801342e:	4639      	mov	r1, r7
 8013430:	f7ec ff4a 	bl	80002c8 <__aeabi_dsub>
 8013434:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013438:	4606      	mov	r6, r0
 801343a:	460f      	mov	r7, r1
 801343c:	f7ed fb8c 	bl	8000b58 <__aeabi_dcmpgt>
 8013440:	2800      	cmp	r0, #0
 8013442:	f040 8296 	bne.w	8013972 <_dtoa_r+0x992>
 8013446:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801344a:	4630      	mov	r0, r6
 801344c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013450:	4639      	mov	r1, r7
 8013452:	f7ed fb63 	bl	8000b1c <__aeabi_dcmplt>
 8013456:	2800      	cmp	r0, #0
 8013458:	f040 8288 	bne.w	801396c <_dtoa_r+0x98c>
 801345c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013460:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013464:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013466:	2b00      	cmp	r3, #0
 8013468:	f2c0 8158 	blt.w	801371c <_dtoa_r+0x73c>
 801346c:	f1ba 0f0e 	cmp.w	sl, #14
 8013470:	f300 8154 	bgt.w	801371c <_dtoa_r+0x73c>
 8013474:	4b6b      	ldr	r3, [pc, #428]	; (8013624 <_dtoa_r+0x644>)
 8013476:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801347a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801347e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013480:	2b00      	cmp	r3, #0
 8013482:	f280 80e3 	bge.w	801364c <_dtoa_r+0x66c>
 8013486:	9b01      	ldr	r3, [sp, #4]
 8013488:	2b00      	cmp	r3, #0
 801348a:	f300 80df 	bgt.w	801364c <_dtoa_r+0x66c>
 801348e:	f040 826d 	bne.w	801396c <_dtoa_r+0x98c>
 8013492:	4b69      	ldr	r3, [pc, #420]	; (8013638 <_dtoa_r+0x658>)
 8013494:	2200      	movs	r2, #0
 8013496:	4640      	mov	r0, r8
 8013498:	4649      	mov	r1, r9
 801349a:	f7ed f8cd 	bl	8000638 <__aeabi_dmul>
 801349e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80134a2:	f7ed fb4f 	bl	8000b44 <__aeabi_dcmpge>
 80134a6:	9e01      	ldr	r6, [sp, #4]
 80134a8:	4637      	mov	r7, r6
 80134aa:	2800      	cmp	r0, #0
 80134ac:	f040 8243 	bne.w	8013936 <_dtoa_r+0x956>
 80134b0:	9d00      	ldr	r5, [sp, #0]
 80134b2:	2331      	movs	r3, #49	; 0x31
 80134b4:	f805 3b01 	strb.w	r3, [r5], #1
 80134b8:	f10a 0a01 	add.w	sl, sl, #1
 80134bc:	e23f      	b.n	801393e <_dtoa_r+0x95e>
 80134be:	07f2      	lsls	r2, r6, #31
 80134c0:	d505      	bpl.n	80134ce <_dtoa_r+0x4ee>
 80134c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80134c6:	f7ed f8b7 	bl	8000638 <__aeabi_dmul>
 80134ca:	3501      	adds	r5, #1
 80134cc:	2301      	movs	r3, #1
 80134ce:	1076      	asrs	r6, r6, #1
 80134d0:	3708      	adds	r7, #8
 80134d2:	e76c      	b.n	80133ae <_dtoa_r+0x3ce>
 80134d4:	2502      	movs	r5, #2
 80134d6:	e76f      	b.n	80133b8 <_dtoa_r+0x3d8>
 80134d8:	9b01      	ldr	r3, [sp, #4]
 80134da:	f8cd a01c 	str.w	sl, [sp, #28]
 80134de:	930c      	str	r3, [sp, #48]	; 0x30
 80134e0:	e78d      	b.n	80133fe <_dtoa_r+0x41e>
 80134e2:	9900      	ldr	r1, [sp, #0]
 80134e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80134e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80134e8:	4b4e      	ldr	r3, [pc, #312]	; (8013624 <_dtoa_r+0x644>)
 80134ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80134ee:	4401      	add	r1, r0
 80134f0:	9102      	str	r1, [sp, #8]
 80134f2:	9908      	ldr	r1, [sp, #32]
 80134f4:	eeb0 8a47 	vmov.f32	s16, s14
 80134f8:	eef0 8a67 	vmov.f32	s17, s15
 80134fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013500:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013504:	2900      	cmp	r1, #0
 8013506:	d045      	beq.n	8013594 <_dtoa_r+0x5b4>
 8013508:	494c      	ldr	r1, [pc, #304]	; (801363c <_dtoa_r+0x65c>)
 801350a:	2000      	movs	r0, #0
 801350c:	f7ed f9be 	bl	800088c <__aeabi_ddiv>
 8013510:	ec53 2b18 	vmov	r2, r3, d8
 8013514:	f7ec fed8 	bl	80002c8 <__aeabi_dsub>
 8013518:	9d00      	ldr	r5, [sp, #0]
 801351a:	ec41 0b18 	vmov	d8, r0, r1
 801351e:	4639      	mov	r1, r7
 8013520:	4630      	mov	r0, r6
 8013522:	f7ed fb39 	bl	8000b98 <__aeabi_d2iz>
 8013526:	900c      	str	r0, [sp, #48]	; 0x30
 8013528:	f7ed f81c 	bl	8000564 <__aeabi_i2d>
 801352c:	4602      	mov	r2, r0
 801352e:	460b      	mov	r3, r1
 8013530:	4630      	mov	r0, r6
 8013532:	4639      	mov	r1, r7
 8013534:	f7ec fec8 	bl	80002c8 <__aeabi_dsub>
 8013538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801353a:	3330      	adds	r3, #48	; 0x30
 801353c:	f805 3b01 	strb.w	r3, [r5], #1
 8013540:	ec53 2b18 	vmov	r2, r3, d8
 8013544:	4606      	mov	r6, r0
 8013546:	460f      	mov	r7, r1
 8013548:	f7ed fae8 	bl	8000b1c <__aeabi_dcmplt>
 801354c:	2800      	cmp	r0, #0
 801354e:	d165      	bne.n	801361c <_dtoa_r+0x63c>
 8013550:	4632      	mov	r2, r6
 8013552:	463b      	mov	r3, r7
 8013554:	4935      	ldr	r1, [pc, #212]	; (801362c <_dtoa_r+0x64c>)
 8013556:	2000      	movs	r0, #0
 8013558:	f7ec feb6 	bl	80002c8 <__aeabi_dsub>
 801355c:	ec53 2b18 	vmov	r2, r3, d8
 8013560:	f7ed fadc 	bl	8000b1c <__aeabi_dcmplt>
 8013564:	2800      	cmp	r0, #0
 8013566:	f040 80b9 	bne.w	80136dc <_dtoa_r+0x6fc>
 801356a:	9b02      	ldr	r3, [sp, #8]
 801356c:	429d      	cmp	r5, r3
 801356e:	f43f af75 	beq.w	801345c <_dtoa_r+0x47c>
 8013572:	4b2f      	ldr	r3, [pc, #188]	; (8013630 <_dtoa_r+0x650>)
 8013574:	ec51 0b18 	vmov	r0, r1, d8
 8013578:	2200      	movs	r2, #0
 801357a:	f7ed f85d 	bl	8000638 <__aeabi_dmul>
 801357e:	4b2c      	ldr	r3, [pc, #176]	; (8013630 <_dtoa_r+0x650>)
 8013580:	ec41 0b18 	vmov	d8, r0, r1
 8013584:	2200      	movs	r2, #0
 8013586:	4630      	mov	r0, r6
 8013588:	4639      	mov	r1, r7
 801358a:	f7ed f855 	bl	8000638 <__aeabi_dmul>
 801358e:	4606      	mov	r6, r0
 8013590:	460f      	mov	r7, r1
 8013592:	e7c4      	b.n	801351e <_dtoa_r+0x53e>
 8013594:	ec51 0b17 	vmov	r0, r1, d7
 8013598:	f7ed f84e 	bl	8000638 <__aeabi_dmul>
 801359c:	9b02      	ldr	r3, [sp, #8]
 801359e:	9d00      	ldr	r5, [sp, #0]
 80135a0:	930c      	str	r3, [sp, #48]	; 0x30
 80135a2:	ec41 0b18 	vmov	d8, r0, r1
 80135a6:	4639      	mov	r1, r7
 80135a8:	4630      	mov	r0, r6
 80135aa:	f7ed faf5 	bl	8000b98 <__aeabi_d2iz>
 80135ae:	9011      	str	r0, [sp, #68]	; 0x44
 80135b0:	f7ec ffd8 	bl	8000564 <__aeabi_i2d>
 80135b4:	4602      	mov	r2, r0
 80135b6:	460b      	mov	r3, r1
 80135b8:	4630      	mov	r0, r6
 80135ba:	4639      	mov	r1, r7
 80135bc:	f7ec fe84 	bl	80002c8 <__aeabi_dsub>
 80135c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80135c2:	3330      	adds	r3, #48	; 0x30
 80135c4:	f805 3b01 	strb.w	r3, [r5], #1
 80135c8:	9b02      	ldr	r3, [sp, #8]
 80135ca:	429d      	cmp	r5, r3
 80135cc:	4606      	mov	r6, r0
 80135ce:	460f      	mov	r7, r1
 80135d0:	f04f 0200 	mov.w	r2, #0
 80135d4:	d134      	bne.n	8013640 <_dtoa_r+0x660>
 80135d6:	4b19      	ldr	r3, [pc, #100]	; (801363c <_dtoa_r+0x65c>)
 80135d8:	ec51 0b18 	vmov	r0, r1, d8
 80135dc:	f7ec fe76 	bl	80002cc <__adddf3>
 80135e0:	4602      	mov	r2, r0
 80135e2:	460b      	mov	r3, r1
 80135e4:	4630      	mov	r0, r6
 80135e6:	4639      	mov	r1, r7
 80135e8:	f7ed fab6 	bl	8000b58 <__aeabi_dcmpgt>
 80135ec:	2800      	cmp	r0, #0
 80135ee:	d175      	bne.n	80136dc <_dtoa_r+0x6fc>
 80135f0:	ec53 2b18 	vmov	r2, r3, d8
 80135f4:	4911      	ldr	r1, [pc, #68]	; (801363c <_dtoa_r+0x65c>)
 80135f6:	2000      	movs	r0, #0
 80135f8:	f7ec fe66 	bl	80002c8 <__aeabi_dsub>
 80135fc:	4602      	mov	r2, r0
 80135fe:	460b      	mov	r3, r1
 8013600:	4630      	mov	r0, r6
 8013602:	4639      	mov	r1, r7
 8013604:	f7ed fa8a 	bl	8000b1c <__aeabi_dcmplt>
 8013608:	2800      	cmp	r0, #0
 801360a:	f43f af27 	beq.w	801345c <_dtoa_r+0x47c>
 801360e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013610:	1e6b      	subs	r3, r5, #1
 8013612:	930c      	str	r3, [sp, #48]	; 0x30
 8013614:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013618:	2b30      	cmp	r3, #48	; 0x30
 801361a:	d0f8      	beq.n	801360e <_dtoa_r+0x62e>
 801361c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013620:	e04a      	b.n	80136b8 <_dtoa_r+0x6d8>
 8013622:	bf00      	nop
 8013624:	08019ec0 	.word	0x08019ec0
 8013628:	08019e98 	.word	0x08019e98
 801362c:	3ff00000 	.word	0x3ff00000
 8013630:	40240000 	.word	0x40240000
 8013634:	401c0000 	.word	0x401c0000
 8013638:	40140000 	.word	0x40140000
 801363c:	3fe00000 	.word	0x3fe00000
 8013640:	4baf      	ldr	r3, [pc, #700]	; (8013900 <_dtoa_r+0x920>)
 8013642:	f7ec fff9 	bl	8000638 <__aeabi_dmul>
 8013646:	4606      	mov	r6, r0
 8013648:	460f      	mov	r7, r1
 801364a:	e7ac      	b.n	80135a6 <_dtoa_r+0x5c6>
 801364c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013650:	9d00      	ldr	r5, [sp, #0]
 8013652:	4642      	mov	r2, r8
 8013654:	464b      	mov	r3, r9
 8013656:	4630      	mov	r0, r6
 8013658:	4639      	mov	r1, r7
 801365a:	f7ed f917 	bl	800088c <__aeabi_ddiv>
 801365e:	f7ed fa9b 	bl	8000b98 <__aeabi_d2iz>
 8013662:	9002      	str	r0, [sp, #8]
 8013664:	f7ec ff7e 	bl	8000564 <__aeabi_i2d>
 8013668:	4642      	mov	r2, r8
 801366a:	464b      	mov	r3, r9
 801366c:	f7ec ffe4 	bl	8000638 <__aeabi_dmul>
 8013670:	4602      	mov	r2, r0
 8013672:	460b      	mov	r3, r1
 8013674:	4630      	mov	r0, r6
 8013676:	4639      	mov	r1, r7
 8013678:	f7ec fe26 	bl	80002c8 <__aeabi_dsub>
 801367c:	9e02      	ldr	r6, [sp, #8]
 801367e:	9f01      	ldr	r7, [sp, #4]
 8013680:	3630      	adds	r6, #48	; 0x30
 8013682:	f805 6b01 	strb.w	r6, [r5], #1
 8013686:	9e00      	ldr	r6, [sp, #0]
 8013688:	1bae      	subs	r6, r5, r6
 801368a:	42b7      	cmp	r7, r6
 801368c:	4602      	mov	r2, r0
 801368e:	460b      	mov	r3, r1
 8013690:	d137      	bne.n	8013702 <_dtoa_r+0x722>
 8013692:	f7ec fe1b 	bl	80002cc <__adddf3>
 8013696:	4642      	mov	r2, r8
 8013698:	464b      	mov	r3, r9
 801369a:	4606      	mov	r6, r0
 801369c:	460f      	mov	r7, r1
 801369e:	f7ed fa5b 	bl	8000b58 <__aeabi_dcmpgt>
 80136a2:	b9c8      	cbnz	r0, 80136d8 <_dtoa_r+0x6f8>
 80136a4:	4642      	mov	r2, r8
 80136a6:	464b      	mov	r3, r9
 80136a8:	4630      	mov	r0, r6
 80136aa:	4639      	mov	r1, r7
 80136ac:	f7ed fa2c 	bl	8000b08 <__aeabi_dcmpeq>
 80136b0:	b110      	cbz	r0, 80136b8 <_dtoa_r+0x6d8>
 80136b2:	9b02      	ldr	r3, [sp, #8]
 80136b4:	07d9      	lsls	r1, r3, #31
 80136b6:	d40f      	bmi.n	80136d8 <_dtoa_r+0x6f8>
 80136b8:	4620      	mov	r0, r4
 80136ba:	4659      	mov	r1, fp
 80136bc:	f000 fcfe 	bl	80140bc <_Bfree>
 80136c0:	2300      	movs	r3, #0
 80136c2:	702b      	strb	r3, [r5, #0]
 80136c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80136c6:	f10a 0001 	add.w	r0, sl, #1
 80136ca:	6018      	str	r0, [r3, #0]
 80136cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	f43f acd8 	beq.w	8013084 <_dtoa_r+0xa4>
 80136d4:	601d      	str	r5, [r3, #0]
 80136d6:	e4d5      	b.n	8013084 <_dtoa_r+0xa4>
 80136d8:	f8cd a01c 	str.w	sl, [sp, #28]
 80136dc:	462b      	mov	r3, r5
 80136de:	461d      	mov	r5, r3
 80136e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80136e4:	2a39      	cmp	r2, #57	; 0x39
 80136e6:	d108      	bne.n	80136fa <_dtoa_r+0x71a>
 80136e8:	9a00      	ldr	r2, [sp, #0]
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d1f7      	bne.n	80136de <_dtoa_r+0x6fe>
 80136ee:	9a07      	ldr	r2, [sp, #28]
 80136f0:	9900      	ldr	r1, [sp, #0]
 80136f2:	3201      	adds	r2, #1
 80136f4:	9207      	str	r2, [sp, #28]
 80136f6:	2230      	movs	r2, #48	; 0x30
 80136f8:	700a      	strb	r2, [r1, #0]
 80136fa:	781a      	ldrb	r2, [r3, #0]
 80136fc:	3201      	adds	r2, #1
 80136fe:	701a      	strb	r2, [r3, #0]
 8013700:	e78c      	b.n	801361c <_dtoa_r+0x63c>
 8013702:	4b7f      	ldr	r3, [pc, #508]	; (8013900 <_dtoa_r+0x920>)
 8013704:	2200      	movs	r2, #0
 8013706:	f7ec ff97 	bl	8000638 <__aeabi_dmul>
 801370a:	2200      	movs	r2, #0
 801370c:	2300      	movs	r3, #0
 801370e:	4606      	mov	r6, r0
 8013710:	460f      	mov	r7, r1
 8013712:	f7ed f9f9 	bl	8000b08 <__aeabi_dcmpeq>
 8013716:	2800      	cmp	r0, #0
 8013718:	d09b      	beq.n	8013652 <_dtoa_r+0x672>
 801371a:	e7cd      	b.n	80136b8 <_dtoa_r+0x6d8>
 801371c:	9a08      	ldr	r2, [sp, #32]
 801371e:	2a00      	cmp	r2, #0
 8013720:	f000 80c4 	beq.w	80138ac <_dtoa_r+0x8cc>
 8013724:	9a05      	ldr	r2, [sp, #20]
 8013726:	2a01      	cmp	r2, #1
 8013728:	f300 80a8 	bgt.w	801387c <_dtoa_r+0x89c>
 801372c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801372e:	2a00      	cmp	r2, #0
 8013730:	f000 80a0 	beq.w	8013874 <_dtoa_r+0x894>
 8013734:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013738:	9e06      	ldr	r6, [sp, #24]
 801373a:	4645      	mov	r5, r8
 801373c:	9a04      	ldr	r2, [sp, #16]
 801373e:	2101      	movs	r1, #1
 8013740:	441a      	add	r2, r3
 8013742:	4620      	mov	r0, r4
 8013744:	4498      	add	r8, r3
 8013746:	9204      	str	r2, [sp, #16]
 8013748:	f000 fd74 	bl	8014234 <__i2b>
 801374c:	4607      	mov	r7, r0
 801374e:	2d00      	cmp	r5, #0
 8013750:	dd0b      	ble.n	801376a <_dtoa_r+0x78a>
 8013752:	9b04      	ldr	r3, [sp, #16]
 8013754:	2b00      	cmp	r3, #0
 8013756:	dd08      	ble.n	801376a <_dtoa_r+0x78a>
 8013758:	42ab      	cmp	r3, r5
 801375a:	9a04      	ldr	r2, [sp, #16]
 801375c:	bfa8      	it	ge
 801375e:	462b      	movge	r3, r5
 8013760:	eba8 0803 	sub.w	r8, r8, r3
 8013764:	1aed      	subs	r5, r5, r3
 8013766:	1ad3      	subs	r3, r2, r3
 8013768:	9304      	str	r3, [sp, #16]
 801376a:	9b06      	ldr	r3, [sp, #24]
 801376c:	b1fb      	cbz	r3, 80137ae <_dtoa_r+0x7ce>
 801376e:	9b08      	ldr	r3, [sp, #32]
 8013770:	2b00      	cmp	r3, #0
 8013772:	f000 809f 	beq.w	80138b4 <_dtoa_r+0x8d4>
 8013776:	2e00      	cmp	r6, #0
 8013778:	dd11      	ble.n	801379e <_dtoa_r+0x7be>
 801377a:	4639      	mov	r1, r7
 801377c:	4632      	mov	r2, r6
 801377e:	4620      	mov	r0, r4
 8013780:	f000 fe14 	bl	80143ac <__pow5mult>
 8013784:	465a      	mov	r2, fp
 8013786:	4601      	mov	r1, r0
 8013788:	4607      	mov	r7, r0
 801378a:	4620      	mov	r0, r4
 801378c:	f000 fd68 	bl	8014260 <__multiply>
 8013790:	4659      	mov	r1, fp
 8013792:	9007      	str	r0, [sp, #28]
 8013794:	4620      	mov	r0, r4
 8013796:	f000 fc91 	bl	80140bc <_Bfree>
 801379a:	9b07      	ldr	r3, [sp, #28]
 801379c:	469b      	mov	fp, r3
 801379e:	9b06      	ldr	r3, [sp, #24]
 80137a0:	1b9a      	subs	r2, r3, r6
 80137a2:	d004      	beq.n	80137ae <_dtoa_r+0x7ce>
 80137a4:	4659      	mov	r1, fp
 80137a6:	4620      	mov	r0, r4
 80137a8:	f000 fe00 	bl	80143ac <__pow5mult>
 80137ac:	4683      	mov	fp, r0
 80137ae:	2101      	movs	r1, #1
 80137b0:	4620      	mov	r0, r4
 80137b2:	f000 fd3f 	bl	8014234 <__i2b>
 80137b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	4606      	mov	r6, r0
 80137bc:	dd7c      	ble.n	80138b8 <_dtoa_r+0x8d8>
 80137be:	461a      	mov	r2, r3
 80137c0:	4601      	mov	r1, r0
 80137c2:	4620      	mov	r0, r4
 80137c4:	f000 fdf2 	bl	80143ac <__pow5mult>
 80137c8:	9b05      	ldr	r3, [sp, #20]
 80137ca:	2b01      	cmp	r3, #1
 80137cc:	4606      	mov	r6, r0
 80137ce:	dd76      	ble.n	80138be <_dtoa_r+0x8de>
 80137d0:	2300      	movs	r3, #0
 80137d2:	9306      	str	r3, [sp, #24]
 80137d4:	6933      	ldr	r3, [r6, #16]
 80137d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80137da:	6918      	ldr	r0, [r3, #16]
 80137dc:	f000 fcda 	bl	8014194 <__hi0bits>
 80137e0:	f1c0 0020 	rsb	r0, r0, #32
 80137e4:	9b04      	ldr	r3, [sp, #16]
 80137e6:	4418      	add	r0, r3
 80137e8:	f010 001f 	ands.w	r0, r0, #31
 80137ec:	f000 8086 	beq.w	80138fc <_dtoa_r+0x91c>
 80137f0:	f1c0 0320 	rsb	r3, r0, #32
 80137f4:	2b04      	cmp	r3, #4
 80137f6:	dd7f      	ble.n	80138f8 <_dtoa_r+0x918>
 80137f8:	f1c0 001c 	rsb	r0, r0, #28
 80137fc:	9b04      	ldr	r3, [sp, #16]
 80137fe:	4403      	add	r3, r0
 8013800:	4480      	add	r8, r0
 8013802:	4405      	add	r5, r0
 8013804:	9304      	str	r3, [sp, #16]
 8013806:	f1b8 0f00 	cmp.w	r8, #0
 801380a:	dd05      	ble.n	8013818 <_dtoa_r+0x838>
 801380c:	4659      	mov	r1, fp
 801380e:	4642      	mov	r2, r8
 8013810:	4620      	mov	r0, r4
 8013812:	f000 fe25 	bl	8014460 <__lshift>
 8013816:	4683      	mov	fp, r0
 8013818:	9b04      	ldr	r3, [sp, #16]
 801381a:	2b00      	cmp	r3, #0
 801381c:	dd05      	ble.n	801382a <_dtoa_r+0x84a>
 801381e:	4631      	mov	r1, r6
 8013820:	461a      	mov	r2, r3
 8013822:	4620      	mov	r0, r4
 8013824:	f000 fe1c 	bl	8014460 <__lshift>
 8013828:	4606      	mov	r6, r0
 801382a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801382c:	2b00      	cmp	r3, #0
 801382e:	d069      	beq.n	8013904 <_dtoa_r+0x924>
 8013830:	4631      	mov	r1, r6
 8013832:	4658      	mov	r0, fp
 8013834:	f000 fe80 	bl	8014538 <__mcmp>
 8013838:	2800      	cmp	r0, #0
 801383a:	da63      	bge.n	8013904 <_dtoa_r+0x924>
 801383c:	2300      	movs	r3, #0
 801383e:	4659      	mov	r1, fp
 8013840:	220a      	movs	r2, #10
 8013842:	4620      	mov	r0, r4
 8013844:	f000 fc5c 	bl	8014100 <__multadd>
 8013848:	9b08      	ldr	r3, [sp, #32]
 801384a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801384e:	4683      	mov	fp, r0
 8013850:	2b00      	cmp	r3, #0
 8013852:	f000 818f 	beq.w	8013b74 <_dtoa_r+0xb94>
 8013856:	4639      	mov	r1, r7
 8013858:	2300      	movs	r3, #0
 801385a:	220a      	movs	r2, #10
 801385c:	4620      	mov	r0, r4
 801385e:	f000 fc4f 	bl	8014100 <__multadd>
 8013862:	f1b9 0f00 	cmp.w	r9, #0
 8013866:	4607      	mov	r7, r0
 8013868:	f300 808e 	bgt.w	8013988 <_dtoa_r+0x9a8>
 801386c:	9b05      	ldr	r3, [sp, #20]
 801386e:	2b02      	cmp	r3, #2
 8013870:	dc50      	bgt.n	8013914 <_dtoa_r+0x934>
 8013872:	e089      	b.n	8013988 <_dtoa_r+0x9a8>
 8013874:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013876:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801387a:	e75d      	b.n	8013738 <_dtoa_r+0x758>
 801387c:	9b01      	ldr	r3, [sp, #4]
 801387e:	1e5e      	subs	r6, r3, #1
 8013880:	9b06      	ldr	r3, [sp, #24]
 8013882:	42b3      	cmp	r3, r6
 8013884:	bfbf      	itttt	lt
 8013886:	9b06      	ldrlt	r3, [sp, #24]
 8013888:	9606      	strlt	r6, [sp, #24]
 801388a:	1af2      	sublt	r2, r6, r3
 801388c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801388e:	bfb6      	itet	lt
 8013890:	189b      	addlt	r3, r3, r2
 8013892:	1b9e      	subge	r6, r3, r6
 8013894:	930d      	strlt	r3, [sp, #52]	; 0x34
 8013896:	9b01      	ldr	r3, [sp, #4]
 8013898:	bfb8      	it	lt
 801389a:	2600      	movlt	r6, #0
 801389c:	2b00      	cmp	r3, #0
 801389e:	bfb5      	itete	lt
 80138a0:	eba8 0503 	sublt.w	r5, r8, r3
 80138a4:	9b01      	ldrge	r3, [sp, #4]
 80138a6:	2300      	movlt	r3, #0
 80138a8:	4645      	movge	r5, r8
 80138aa:	e747      	b.n	801373c <_dtoa_r+0x75c>
 80138ac:	9e06      	ldr	r6, [sp, #24]
 80138ae:	9f08      	ldr	r7, [sp, #32]
 80138b0:	4645      	mov	r5, r8
 80138b2:	e74c      	b.n	801374e <_dtoa_r+0x76e>
 80138b4:	9a06      	ldr	r2, [sp, #24]
 80138b6:	e775      	b.n	80137a4 <_dtoa_r+0x7c4>
 80138b8:	9b05      	ldr	r3, [sp, #20]
 80138ba:	2b01      	cmp	r3, #1
 80138bc:	dc18      	bgt.n	80138f0 <_dtoa_r+0x910>
 80138be:	9b02      	ldr	r3, [sp, #8]
 80138c0:	b9b3      	cbnz	r3, 80138f0 <_dtoa_r+0x910>
 80138c2:	9b03      	ldr	r3, [sp, #12]
 80138c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80138c8:	b9a3      	cbnz	r3, 80138f4 <_dtoa_r+0x914>
 80138ca:	9b03      	ldr	r3, [sp, #12]
 80138cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80138d0:	0d1b      	lsrs	r3, r3, #20
 80138d2:	051b      	lsls	r3, r3, #20
 80138d4:	b12b      	cbz	r3, 80138e2 <_dtoa_r+0x902>
 80138d6:	9b04      	ldr	r3, [sp, #16]
 80138d8:	3301      	adds	r3, #1
 80138da:	9304      	str	r3, [sp, #16]
 80138dc:	f108 0801 	add.w	r8, r8, #1
 80138e0:	2301      	movs	r3, #1
 80138e2:	9306      	str	r3, [sp, #24]
 80138e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	f47f af74 	bne.w	80137d4 <_dtoa_r+0x7f4>
 80138ec:	2001      	movs	r0, #1
 80138ee:	e779      	b.n	80137e4 <_dtoa_r+0x804>
 80138f0:	2300      	movs	r3, #0
 80138f2:	e7f6      	b.n	80138e2 <_dtoa_r+0x902>
 80138f4:	9b02      	ldr	r3, [sp, #8]
 80138f6:	e7f4      	b.n	80138e2 <_dtoa_r+0x902>
 80138f8:	d085      	beq.n	8013806 <_dtoa_r+0x826>
 80138fa:	4618      	mov	r0, r3
 80138fc:	301c      	adds	r0, #28
 80138fe:	e77d      	b.n	80137fc <_dtoa_r+0x81c>
 8013900:	40240000 	.word	0x40240000
 8013904:	9b01      	ldr	r3, [sp, #4]
 8013906:	2b00      	cmp	r3, #0
 8013908:	dc38      	bgt.n	801397c <_dtoa_r+0x99c>
 801390a:	9b05      	ldr	r3, [sp, #20]
 801390c:	2b02      	cmp	r3, #2
 801390e:	dd35      	ble.n	801397c <_dtoa_r+0x99c>
 8013910:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013914:	f1b9 0f00 	cmp.w	r9, #0
 8013918:	d10d      	bne.n	8013936 <_dtoa_r+0x956>
 801391a:	4631      	mov	r1, r6
 801391c:	464b      	mov	r3, r9
 801391e:	2205      	movs	r2, #5
 8013920:	4620      	mov	r0, r4
 8013922:	f000 fbed 	bl	8014100 <__multadd>
 8013926:	4601      	mov	r1, r0
 8013928:	4606      	mov	r6, r0
 801392a:	4658      	mov	r0, fp
 801392c:	f000 fe04 	bl	8014538 <__mcmp>
 8013930:	2800      	cmp	r0, #0
 8013932:	f73f adbd 	bgt.w	80134b0 <_dtoa_r+0x4d0>
 8013936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013938:	9d00      	ldr	r5, [sp, #0]
 801393a:	ea6f 0a03 	mvn.w	sl, r3
 801393e:	f04f 0800 	mov.w	r8, #0
 8013942:	4631      	mov	r1, r6
 8013944:	4620      	mov	r0, r4
 8013946:	f000 fbb9 	bl	80140bc <_Bfree>
 801394a:	2f00      	cmp	r7, #0
 801394c:	f43f aeb4 	beq.w	80136b8 <_dtoa_r+0x6d8>
 8013950:	f1b8 0f00 	cmp.w	r8, #0
 8013954:	d005      	beq.n	8013962 <_dtoa_r+0x982>
 8013956:	45b8      	cmp	r8, r7
 8013958:	d003      	beq.n	8013962 <_dtoa_r+0x982>
 801395a:	4641      	mov	r1, r8
 801395c:	4620      	mov	r0, r4
 801395e:	f000 fbad 	bl	80140bc <_Bfree>
 8013962:	4639      	mov	r1, r7
 8013964:	4620      	mov	r0, r4
 8013966:	f000 fba9 	bl	80140bc <_Bfree>
 801396a:	e6a5      	b.n	80136b8 <_dtoa_r+0x6d8>
 801396c:	2600      	movs	r6, #0
 801396e:	4637      	mov	r7, r6
 8013970:	e7e1      	b.n	8013936 <_dtoa_r+0x956>
 8013972:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013974:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013978:	4637      	mov	r7, r6
 801397a:	e599      	b.n	80134b0 <_dtoa_r+0x4d0>
 801397c:	9b08      	ldr	r3, [sp, #32]
 801397e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013982:	2b00      	cmp	r3, #0
 8013984:	f000 80fd 	beq.w	8013b82 <_dtoa_r+0xba2>
 8013988:	2d00      	cmp	r5, #0
 801398a:	dd05      	ble.n	8013998 <_dtoa_r+0x9b8>
 801398c:	4639      	mov	r1, r7
 801398e:	462a      	mov	r2, r5
 8013990:	4620      	mov	r0, r4
 8013992:	f000 fd65 	bl	8014460 <__lshift>
 8013996:	4607      	mov	r7, r0
 8013998:	9b06      	ldr	r3, [sp, #24]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d05c      	beq.n	8013a58 <_dtoa_r+0xa78>
 801399e:	6879      	ldr	r1, [r7, #4]
 80139a0:	4620      	mov	r0, r4
 80139a2:	f000 fb4b 	bl	801403c <_Balloc>
 80139a6:	4605      	mov	r5, r0
 80139a8:	b928      	cbnz	r0, 80139b6 <_dtoa_r+0x9d6>
 80139aa:	4b80      	ldr	r3, [pc, #512]	; (8013bac <_dtoa_r+0xbcc>)
 80139ac:	4602      	mov	r2, r0
 80139ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80139b2:	f7ff bb2e 	b.w	8013012 <_dtoa_r+0x32>
 80139b6:	693a      	ldr	r2, [r7, #16]
 80139b8:	3202      	adds	r2, #2
 80139ba:	0092      	lsls	r2, r2, #2
 80139bc:	f107 010c 	add.w	r1, r7, #12
 80139c0:	300c      	adds	r0, #12
 80139c2:	f7fe fba5 	bl	8012110 <memcpy>
 80139c6:	2201      	movs	r2, #1
 80139c8:	4629      	mov	r1, r5
 80139ca:	4620      	mov	r0, r4
 80139cc:	f000 fd48 	bl	8014460 <__lshift>
 80139d0:	9b00      	ldr	r3, [sp, #0]
 80139d2:	3301      	adds	r3, #1
 80139d4:	9301      	str	r3, [sp, #4]
 80139d6:	9b00      	ldr	r3, [sp, #0]
 80139d8:	444b      	add	r3, r9
 80139da:	9307      	str	r3, [sp, #28]
 80139dc:	9b02      	ldr	r3, [sp, #8]
 80139de:	f003 0301 	and.w	r3, r3, #1
 80139e2:	46b8      	mov	r8, r7
 80139e4:	9306      	str	r3, [sp, #24]
 80139e6:	4607      	mov	r7, r0
 80139e8:	9b01      	ldr	r3, [sp, #4]
 80139ea:	4631      	mov	r1, r6
 80139ec:	3b01      	subs	r3, #1
 80139ee:	4658      	mov	r0, fp
 80139f0:	9302      	str	r3, [sp, #8]
 80139f2:	f7ff fa69 	bl	8012ec8 <quorem>
 80139f6:	4603      	mov	r3, r0
 80139f8:	3330      	adds	r3, #48	; 0x30
 80139fa:	9004      	str	r0, [sp, #16]
 80139fc:	4641      	mov	r1, r8
 80139fe:	4658      	mov	r0, fp
 8013a00:	9308      	str	r3, [sp, #32]
 8013a02:	f000 fd99 	bl	8014538 <__mcmp>
 8013a06:	463a      	mov	r2, r7
 8013a08:	4681      	mov	r9, r0
 8013a0a:	4631      	mov	r1, r6
 8013a0c:	4620      	mov	r0, r4
 8013a0e:	f000 fdaf 	bl	8014570 <__mdiff>
 8013a12:	68c2      	ldr	r2, [r0, #12]
 8013a14:	9b08      	ldr	r3, [sp, #32]
 8013a16:	4605      	mov	r5, r0
 8013a18:	bb02      	cbnz	r2, 8013a5c <_dtoa_r+0xa7c>
 8013a1a:	4601      	mov	r1, r0
 8013a1c:	4658      	mov	r0, fp
 8013a1e:	f000 fd8b 	bl	8014538 <__mcmp>
 8013a22:	9b08      	ldr	r3, [sp, #32]
 8013a24:	4602      	mov	r2, r0
 8013a26:	4629      	mov	r1, r5
 8013a28:	4620      	mov	r0, r4
 8013a2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8013a2e:	f000 fb45 	bl	80140bc <_Bfree>
 8013a32:	9b05      	ldr	r3, [sp, #20]
 8013a34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a36:	9d01      	ldr	r5, [sp, #4]
 8013a38:	ea43 0102 	orr.w	r1, r3, r2
 8013a3c:	9b06      	ldr	r3, [sp, #24]
 8013a3e:	430b      	orrs	r3, r1
 8013a40:	9b08      	ldr	r3, [sp, #32]
 8013a42:	d10d      	bne.n	8013a60 <_dtoa_r+0xa80>
 8013a44:	2b39      	cmp	r3, #57	; 0x39
 8013a46:	d029      	beq.n	8013a9c <_dtoa_r+0xabc>
 8013a48:	f1b9 0f00 	cmp.w	r9, #0
 8013a4c:	dd01      	ble.n	8013a52 <_dtoa_r+0xa72>
 8013a4e:	9b04      	ldr	r3, [sp, #16]
 8013a50:	3331      	adds	r3, #49	; 0x31
 8013a52:	9a02      	ldr	r2, [sp, #8]
 8013a54:	7013      	strb	r3, [r2, #0]
 8013a56:	e774      	b.n	8013942 <_dtoa_r+0x962>
 8013a58:	4638      	mov	r0, r7
 8013a5a:	e7b9      	b.n	80139d0 <_dtoa_r+0x9f0>
 8013a5c:	2201      	movs	r2, #1
 8013a5e:	e7e2      	b.n	8013a26 <_dtoa_r+0xa46>
 8013a60:	f1b9 0f00 	cmp.w	r9, #0
 8013a64:	db06      	blt.n	8013a74 <_dtoa_r+0xa94>
 8013a66:	9905      	ldr	r1, [sp, #20]
 8013a68:	ea41 0909 	orr.w	r9, r1, r9
 8013a6c:	9906      	ldr	r1, [sp, #24]
 8013a6e:	ea59 0101 	orrs.w	r1, r9, r1
 8013a72:	d120      	bne.n	8013ab6 <_dtoa_r+0xad6>
 8013a74:	2a00      	cmp	r2, #0
 8013a76:	ddec      	ble.n	8013a52 <_dtoa_r+0xa72>
 8013a78:	4659      	mov	r1, fp
 8013a7a:	2201      	movs	r2, #1
 8013a7c:	4620      	mov	r0, r4
 8013a7e:	9301      	str	r3, [sp, #4]
 8013a80:	f000 fcee 	bl	8014460 <__lshift>
 8013a84:	4631      	mov	r1, r6
 8013a86:	4683      	mov	fp, r0
 8013a88:	f000 fd56 	bl	8014538 <__mcmp>
 8013a8c:	2800      	cmp	r0, #0
 8013a8e:	9b01      	ldr	r3, [sp, #4]
 8013a90:	dc02      	bgt.n	8013a98 <_dtoa_r+0xab8>
 8013a92:	d1de      	bne.n	8013a52 <_dtoa_r+0xa72>
 8013a94:	07da      	lsls	r2, r3, #31
 8013a96:	d5dc      	bpl.n	8013a52 <_dtoa_r+0xa72>
 8013a98:	2b39      	cmp	r3, #57	; 0x39
 8013a9a:	d1d8      	bne.n	8013a4e <_dtoa_r+0xa6e>
 8013a9c:	9a02      	ldr	r2, [sp, #8]
 8013a9e:	2339      	movs	r3, #57	; 0x39
 8013aa0:	7013      	strb	r3, [r2, #0]
 8013aa2:	462b      	mov	r3, r5
 8013aa4:	461d      	mov	r5, r3
 8013aa6:	3b01      	subs	r3, #1
 8013aa8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013aac:	2a39      	cmp	r2, #57	; 0x39
 8013aae:	d050      	beq.n	8013b52 <_dtoa_r+0xb72>
 8013ab0:	3201      	adds	r2, #1
 8013ab2:	701a      	strb	r2, [r3, #0]
 8013ab4:	e745      	b.n	8013942 <_dtoa_r+0x962>
 8013ab6:	2a00      	cmp	r2, #0
 8013ab8:	dd03      	ble.n	8013ac2 <_dtoa_r+0xae2>
 8013aba:	2b39      	cmp	r3, #57	; 0x39
 8013abc:	d0ee      	beq.n	8013a9c <_dtoa_r+0xabc>
 8013abe:	3301      	adds	r3, #1
 8013ac0:	e7c7      	b.n	8013a52 <_dtoa_r+0xa72>
 8013ac2:	9a01      	ldr	r2, [sp, #4]
 8013ac4:	9907      	ldr	r1, [sp, #28]
 8013ac6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013aca:	428a      	cmp	r2, r1
 8013acc:	d02a      	beq.n	8013b24 <_dtoa_r+0xb44>
 8013ace:	4659      	mov	r1, fp
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	220a      	movs	r2, #10
 8013ad4:	4620      	mov	r0, r4
 8013ad6:	f000 fb13 	bl	8014100 <__multadd>
 8013ada:	45b8      	cmp	r8, r7
 8013adc:	4683      	mov	fp, r0
 8013ade:	f04f 0300 	mov.w	r3, #0
 8013ae2:	f04f 020a 	mov.w	r2, #10
 8013ae6:	4641      	mov	r1, r8
 8013ae8:	4620      	mov	r0, r4
 8013aea:	d107      	bne.n	8013afc <_dtoa_r+0xb1c>
 8013aec:	f000 fb08 	bl	8014100 <__multadd>
 8013af0:	4680      	mov	r8, r0
 8013af2:	4607      	mov	r7, r0
 8013af4:	9b01      	ldr	r3, [sp, #4]
 8013af6:	3301      	adds	r3, #1
 8013af8:	9301      	str	r3, [sp, #4]
 8013afa:	e775      	b.n	80139e8 <_dtoa_r+0xa08>
 8013afc:	f000 fb00 	bl	8014100 <__multadd>
 8013b00:	4639      	mov	r1, r7
 8013b02:	4680      	mov	r8, r0
 8013b04:	2300      	movs	r3, #0
 8013b06:	220a      	movs	r2, #10
 8013b08:	4620      	mov	r0, r4
 8013b0a:	f000 faf9 	bl	8014100 <__multadd>
 8013b0e:	4607      	mov	r7, r0
 8013b10:	e7f0      	b.n	8013af4 <_dtoa_r+0xb14>
 8013b12:	f1b9 0f00 	cmp.w	r9, #0
 8013b16:	9a00      	ldr	r2, [sp, #0]
 8013b18:	bfcc      	ite	gt
 8013b1a:	464d      	movgt	r5, r9
 8013b1c:	2501      	movle	r5, #1
 8013b1e:	4415      	add	r5, r2
 8013b20:	f04f 0800 	mov.w	r8, #0
 8013b24:	4659      	mov	r1, fp
 8013b26:	2201      	movs	r2, #1
 8013b28:	4620      	mov	r0, r4
 8013b2a:	9301      	str	r3, [sp, #4]
 8013b2c:	f000 fc98 	bl	8014460 <__lshift>
 8013b30:	4631      	mov	r1, r6
 8013b32:	4683      	mov	fp, r0
 8013b34:	f000 fd00 	bl	8014538 <__mcmp>
 8013b38:	2800      	cmp	r0, #0
 8013b3a:	dcb2      	bgt.n	8013aa2 <_dtoa_r+0xac2>
 8013b3c:	d102      	bne.n	8013b44 <_dtoa_r+0xb64>
 8013b3e:	9b01      	ldr	r3, [sp, #4]
 8013b40:	07db      	lsls	r3, r3, #31
 8013b42:	d4ae      	bmi.n	8013aa2 <_dtoa_r+0xac2>
 8013b44:	462b      	mov	r3, r5
 8013b46:	461d      	mov	r5, r3
 8013b48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013b4c:	2a30      	cmp	r2, #48	; 0x30
 8013b4e:	d0fa      	beq.n	8013b46 <_dtoa_r+0xb66>
 8013b50:	e6f7      	b.n	8013942 <_dtoa_r+0x962>
 8013b52:	9a00      	ldr	r2, [sp, #0]
 8013b54:	429a      	cmp	r2, r3
 8013b56:	d1a5      	bne.n	8013aa4 <_dtoa_r+0xac4>
 8013b58:	f10a 0a01 	add.w	sl, sl, #1
 8013b5c:	2331      	movs	r3, #49	; 0x31
 8013b5e:	e779      	b.n	8013a54 <_dtoa_r+0xa74>
 8013b60:	4b13      	ldr	r3, [pc, #76]	; (8013bb0 <_dtoa_r+0xbd0>)
 8013b62:	f7ff baaf 	b.w	80130c4 <_dtoa_r+0xe4>
 8013b66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	f47f aa86 	bne.w	801307a <_dtoa_r+0x9a>
 8013b6e:	4b11      	ldr	r3, [pc, #68]	; (8013bb4 <_dtoa_r+0xbd4>)
 8013b70:	f7ff baa8 	b.w	80130c4 <_dtoa_r+0xe4>
 8013b74:	f1b9 0f00 	cmp.w	r9, #0
 8013b78:	dc03      	bgt.n	8013b82 <_dtoa_r+0xba2>
 8013b7a:	9b05      	ldr	r3, [sp, #20]
 8013b7c:	2b02      	cmp	r3, #2
 8013b7e:	f73f aec9 	bgt.w	8013914 <_dtoa_r+0x934>
 8013b82:	9d00      	ldr	r5, [sp, #0]
 8013b84:	4631      	mov	r1, r6
 8013b86:	4658      	mov	r0, fp
 8013b88:	f7ff f99e 	bl	8012ec8 <quorem>
 8013b8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013b90:	f805 3b01 	strb.w	r3, [r5], #1
 8013b94:	9a00      	ldr	r2, [sp, #0]
 8013b96:	1aaa      	subs	r2, r5, r2
 8013b98:	4591      	cmp	r9, r2
 8013b9a:	ddba      	ble.n	8013b12 <_dtoa_r+0xb32>
 8013b9c:	4659      	mov	r1, fp
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	220a      	movs	r2, #10
 8013ba2:	4620      	mov	r0, r4
 8013ba4:	f000 faac 	bl	8014100 <__multadd>
 8013ba8:	4683      	mov	fp, r0
 8013baa:	e7eb      	b.n	8013b84 <_dtoa_r+0xba4>
 8013bac:	08019dc7 	.word	0x08019dc7
 8013bb0:	08019ce4 	.word	0x08019ce4
 8013bb4:	08019d44 	.word	0x08019d44

08013bb8 <__sflush_r>:
 8013bb8:	898a      	ldrh	r2, [r1, #12]
 8013bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bbe:	4605      	mov	r5, r0
 8013bc0:	0710      	lsls	r0, r2, #28
 8013bc2:	460c      	mov	r4, r1
 8013bc4:	d458      	bmi.n	8013c78 <__sflush_r+0xc0>
 8013bc6:	684b      	ldr	r3, [r1, #4]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	dc05      	bgt.n	8013bd8 <__sflush_r+0x20>
 8013bcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	dc02      	bgt.n	8013bd8 <__sflush_r+0x20>
 8013bd2:	2000      	movs	r0, #0
 8013bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013bda:	2e00      	cmp	r6, #0
 8013bdc:	d0f9      	beq.n	8013bd2 <__sflush_r+0x1a>
 8013bde:	2300      	movs	r3, #0
 8013be0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013be4:	682f      	ldr	r7, [r5, #0]
 8013be6:	602b      	str	r3, [r5, #0]
 8013be8:	d032      	beq.n	8013c50 <__sflush_r+0x98>
 8013bea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013bec:	89a3      	ldrh	r3, [r4, #12]
 8013bee:	075a      	lsls	r2, r3, #29
 8013bf0:	d505      	bpl.n	8013bfe <__sflush_r+0x46>
 8013bf2:	6863      	ldr	r3, [r4, #4]
 8013bf4:	1ac0      	subs	r0, r0, r3
 8013bf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013bf8:	b10b      	cbz	r3, 8013bfe <__sflush_r+0x46>
 8013bfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013bfc:	1ac0      	subs	r0, r0, r3
 8013bfe:	2300      	movs	r3, #0
 8013c00:	4602      	mov	r2, r0
 8013c02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013c04:	6a21      	ldr	r1, [r4, #32]
 8013c06:	4628      	mov	r0, r5
 8013c08:	47b0      	blx	r6
 8013c0a:	1c43      	adds	r3, r0, #1
 8013c0c:	89a3      	ldrh	r3, [r4, #12]
 8013c0e:	d106      	bne.n	8013c1e <__sflush_r+0x66>
 8013c10:	6829      	ldr	r1, [r5, #0]
 8013c12:	291d      	cmp	r1, #29
 8013c14:	d82c      	bhi.n	8013c70 <__sflush_r+0xb8>
 8013c16:	4a2a      	ldr	r2, [pc, #168]	; (8013cc0 <__sflush_r+0x108>)
 8013c18:	40ca      	lsrs	r2, r1
 8013c1a:	07d6      	lsls	r6, r2, #31
 8013c1c:	d528      	bpl.n	8013c70 <__sflush_r+0xb8>
 8013c1e:	2200      	movs	r2, #0
 8013c20:	6062      	str	r2, [r4, #4]
 8013c22:	04d9      	lsls	r1, r3, #19
 8013c24:	6922      	ldr	r2, [r4, #16]
 8013c26:	6022      	str	r2, [r4, #0]
 8013c28:	d504      	bpl.n	8013c34 <__sflush_r+0x7c>
 8013c2a:	1c42      	adds	r2, r0, #1
 8013c2c:	d101      	bne.n	8013c32 <__sflush_r+0x7a>
 8013c2e:	682b      	ldr	r3, [r5, #0]
 8013c30:	b903      	cbnz	r3, 8013c34 <__sflush_r+0x7c>
 8013c32:	6560      	str	r0, [r4, #84]	; 0x54
 8013c34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c36:	602f      	str	r7, [r5, #0]
 8013c38:	2900      	cmp	r1, #0
 8013c3a:	d0ca      	beq.n	8013bd2 <__sflush_r+0x1a>
 8013c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c40:	4299      	cmp	r1, r3
 8013c42:	d002      	beq.n	8013c4a <__sflush_r+0x92>
 8013c44:	4628      	mov	r0, r5
 8013c46:	f7fe fa79 	bl	801213c <_free_r>
 8013c4a:	2000      	movs	r0, #0
 8013c4c:	6360      	str	r0, [r4, #52]	; 0x34
 8013c4e:	e7c1      	b.n	8013bd4 <__sflush_r+0x1c>
 8013c50:	6a21      	ldr	r1, [r4, #32]
 8013c52:	2301      	movs	r3, #1
 8013c54:	4628      	mov	r0, r5
 8013c56:	47b0      	blx	r6
 8013c58:	1c41      	adds	r1, r0, #1
 8013c5a:	d1c7      	bne.n	8013bec <__sflush_r+0x34>
 8013c5c:	682b      	ldr	r3, [r5, #0]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d0c4      	beq.n	8013bec <__sflush_r+0x34>
 8013c62:	2b1d      	cmp	r3, #29
 8013c64:	d001      	beq.n	8013c6a <__sflush_r+0xb2>
 8013c66:	2b16      	cmp	r3, #22
 8013c68:	d101      	bne.n	8013c6e <__sflush_r+0xb6>
 8013c6a:	602f      	str	r7, [r5, #0]
 8013c6c:	e7b1      	b.n	8013bd2 <__sflush_r+0x1a>
 8013c6e:	89a3      	ldrh	r3, [r4, #12]
 8013c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c74:	81a3      	strh	r3, [r4, #12]
 8013c76:	e7ad      	b.n	8013bd4 <__sflush_r+0x1c>
 8013c78:	690f      	ldr	r7, [r1, #16]
 8013c7a:	2f00      	cmp	r7, #0
 8013c7c:	d0a9      	beq.n	8013bd2 <__sflush_r+0x1a>
 8013c7e:	0793      	lsls	r3, r2, #30
 8013c80:	680e      	ldr	r6, [r1, #0]
 8013c82:	bf08      	it	eq
 8013c84:	694b      	ldreq	r3, [r1, #20]
 8013c86:	600f      	str	r7, [r1, #0]
 8013c88:	bf18      	it	ne
 8013c8a:	2300      	movne	r3, #0
 8013c8c:	eba6 0807 	sub.w	r8, r6, r7
 8013c90:	608b      	str	r3, [r1, #8]
 8013c92:	f1b8 0f00 	cmp.w	r8, #0
 8013c96:	dd9c      	ble.n	8013bd2 <__sflush_r+0x1a>
 8013c98:	6a21      	ldr	r1, [r4, #32]
 8013c9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013c9c:	4643      	mov	r3, r8
 8013c9e:	463a      	mov	r2, r7
 8013ca0:	4628      	mov	r0, r5
 8013ca2:	47b0      	blx	r6
 8013ca4:	2800      	cmp	r0, #0
 8013ca6:	dc06      	bgt.n	8013cb6 <__sflush_r+0xfe>
 8013ca8:	89a3      	ldrh	r3, [r4, #12]
 8013caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013cae:	81a3      	strh	r3, [r4, #12]
 8013cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013cb4:	e78e      	b.n	8013bd4 <__sflush_r+0x1c>
 8013cb6:	4407      	add	r7, r0
 8013cb8:	eba8 0800 	sub.w	r8, r8, r0
 8013cbc:	e7e9      	b.n	8013c92 <__sflush_r+0xda>
 8013cbe:	bf00      	nop
 8013cc0:	20400001 	.word	0x20400001

08013cc4 <_fflush_r>:
 8013cc4:	b538      	push	{r3, r4, r5, lr}
 8013cc6:	690b      	ldr	r3, [r1, #16]
 8013cc8:	4605      	mov	r5, r0
 8013cca:	460c      	mov	r4, r1
 8013ccc:	b913      	cbnz	r3, 8013cd4 <_fflush_r+0x10>
 8013cce:	2500      	movs	r5, #0
 8013cd0:	4628      	mov	r0, r5
 8013cd2:	bd38      	pop	{r3, r4, r5, pc}
 8013cd4:	b118      	cbz	r0, 8013cde <_fflush_r+0x1a>
 8013cd6:	6983      	ldr	r3, [r0, #24]
 8013cd8:	b90b      	cbnz	r3, 8013cde <_fflush_r+0x1a>
 8013cda:	f000 f887 	bl	8013dec <__sinit>
 8013cde:	4b14      	ldr	r3, [pc, #80]	; (8013d30 <_fflush_r+0x6c>)
 8013ce0:	429c      	cmp	r4, r3
 8013ce2:	d11b      	bne.n	8013d1c <_fflush_r+0x58>
 8013ce4:	686c      	ldr	r4, [r5, #4]
 8013ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d0ef      	beq.n	8013cce <_fflush_r+0xa>
 8013cee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013cf0:	07d0      	lsls	r0, r2, #31
 8013cf2:	d404      	bmi.n	8013cfe <_fflush_r+0x3a>
 8013cf4:	0599      	lsls	r1, r3, #22
 8013cf6:	d402      	bmi.n	8013cfe <_fflush_r+0x3a>
 8013cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013cfa:	f000 f92c 	bl	8013f56 <__retarget_lock_acquire_recursive>
 8013cfe:	4628      	mov	r0, r5
 8013d00:	4621      	mov	r1, r4
 8013d02:	f7ff ff59 	bl	8013bb8 <__sflush_r>
 8013d06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013d08:	07da      	lsls	r2, r3, #31
 8013d0a:	4605      	mov	r5, r0
 8013d0c:	d4e0      	bmi.n	8013cd0 <_fflush_r+0xc>
 8013d0e:	89a3      	ldrh	r3, [r4, #12]
 8013d10:	059b      	lsls	r3, r3, #22
 8013d12:	d4dd      	bmi.n	8013cd0 <_fflush_r+0xc>
 8013d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013d16:	f000 f91f 	bl	8013f58 <__retarget_lock_release_recursive>
 8013d1a:	e7d9      	b.n	8013cd0 <_fflush_r+0xc>
 8013d1c:	4b05      	ldr	r3, [pc, #20]	; (8013d34 <_fflush_r+0x70>)
 8013d1e:	429c      	cmp	r4, r3
 8013d20:	d101      	bne.n	8013d26 <_fflush_r+0x62>
 8013d22:	68ac      	ldr	r4, [r5, #8]
 8013d24:	e7df      	b.n	8013ce6 <_fflush_r+0x22>
 8013d26:	4b04      	ldr	r3, [pc, #16]	; (8013d38 <_fflush_r+0x74>)
 8013d28:	429c      	cmp	r4, r3
 8013d2a:	bf08      	it	eq
 8013d2c:	68ec      	ldreq	r4, [r5, #12]
 8013d2e:	e7da      	b.n	8013ce6 <_fflush_r+0x22>
 8013d30:	08019df8 	.word	0x08019df8
 8013d34:	08019e18 	.word	0x08019e18
 8013d38:	08019dd8 	.word	0x08019dd8

08013d3c <std>:
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	b510      	push	{r4, lr}
 8013d40:	4604      	mov	r4, r0
 8013d42:	e9c0 3300 	strd	r3, r3, [r0]
 8013d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013d4a:	6083      	str	r3, [r0, #8]
 8013d4c:	8181      	strh	r1, [r0, #12]
 8013d4e:	6643      	str	r3, [r0, #100]	; 0x64
 8013d50:	81c2      	strh	r2, [r0, #14]
 8013d52:	6183      	str	r3, [r0, #24]
 8013d54:	4619      	mov	r1, r3
 8013d56:	2208      	movs	r2, #8
 8013d58:	305c      	adds	r0, #92	; 0x5c
 8013d5a:	f7fe f9e7 	bl	801212c <memset>
 8013d5e:	4b05      	ldr	r3, [pc, #20]	; (8013d74 <std+0x38>)
 8013d60:	6263      	str	r3, [r4, #36]	; 0x24
 8013d62:	4b05      	ldr	r3, [pc, #20]	; (8013d78 <std+0x3c>)
 8013d64:	62a3      	str	r3, [r4, #40]	; 0x28
 8013d66:	4b05      	ldr	r3, [pc, #20]	; (8013d7c <std+0x40>)
 8013d68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013d6a:	4b05      	ldr	r3, [pc, #20]	; (8013d80 <std+0x44>)
 8013d6c:	6224      	str	r4, [r4, #32]
 8013d6e:	6323      	str	r3, [r4, #48]	; 0x30
 8013d70:	bd10      	pop	{r4, pc}
 8013d72:	bf00      	nop
 8013d74:	08014d51 	.word	0x08014d51
 8013d78:	08014d73 	.word	0x08014d73
 8013d7c:	08014dab 	.word	0x08014dab
 8013d80:	08014dcf 	.word	0x08014dcf

08013d84 <_cleanup_r>:
 8013d84:	4901      	ldr	r1, [pc, #4]	; (8013d8c <_cleanup_r+0x8>)
 8013d86:	f000 b8c1 	b.w	8013f0c <_fwalk_reent>
 8013d8a:	bf00      	nop
 8013d8c:	08013cc5 	.word	0x08013cc5

08013d90 <__sfmoreglue>:
 8013d90:	b570      	push	{r4, r5, r6, lr}
 8013d92:	1e4a      	subs	r2, r1, #1
 8013d94:	2568      	movs	r5, #104	; 0x68
 8013d96:	4355      	muls	r5, r2
 8013d98:	460e      	mov	r6, r1
 8013d9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013d9e:	f7fe fa1d 	bl	80121dc <_malloc_r>
 8013da2:	4604      	mov	r4, r0
 8013da4:	b140      	cbz	r0, 8013db8 <__sfmoreglue+0x28>
 8013da6:	2100      	movs	r1, #0
 8013da8:	e9c0 1600 	strd	r1, r6, [r0]
 8013dac:	300c      	adds	r0, #12
 8013dae:	60a0      	str	r0, [r4, #8]
 8013db0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013db4:	f7fe f9ba 	bl	801212c <memset>
 8013db8:	4620      	mov	r0, r4
 8013dba:	bd70      	pop	{r4, r5, r6, pc}

08013dbc <__sfp_lock_acquire>:
 8013dbc:	4801      	ldr	r0, [pc, #4]	; (8013dc4 <__sfp_lock_acquire+0x8>)
 8013dbe:	f000 b8ca 	b.w	8013f56 <__retarget_lock_acquire_recursive>
 8013dc2:	bf00      	nop
 8013dc4:	200413ac 	.word	0x200413ac

08013dc8 <__sfp_lock_release>:
 8013dc8:	4801      	ldr	r0, [pc, #4]	; (8013dd0 <__sfp_lock_release+0x8>)
 8013dca:	f000 b8c5 	b.w	8013f58 <__retarget_lock_release_recursive>
 8013dce:	bf00      	nop
 8013dd0:	200413ac 	.word	0x200413ac

08013dd4 <__sinit_lock_acquire>:
 8013dd4:	4801      	ldr	r0, [pc, #4]	; (8013ddc <__sinit_lock_acquire+0x8>)
 8013dd6:	f000 b8be 	b.w	8013f56 <__retarget_lock_acquire_recursive>
 8013dda:	bf00      	nop
 8013ddc:	200413a7 	.word	0x200413a7

08013de0 <__sinit_lock_release>:
 8013de0:	4801      	ldr	r0, [pc, #4]	; (8013de8 <__sinit_lock_release+0x8>)
 8013de2:	f000 b8b9 	b.w	8013f58 <__retarget_lock_release_recursive>
 8013de6:	bf00      	nop
 8013de8:	200413a7 	.word	0x200413a7

08013dec <__sinit>:
 8013dec:	b510      	push	{r4, lr}
 8013dee:	4604      	mov	r4, r0
 8013df0:	f7ff fff0 	bl	8013dd4 <__sinit_lock_acquire>
 8013df4:	69a3      	ldr	r3, [r4, #24]
 8013df6:	b11b      	cbz	r3, 8013e00 <__sinit+0x14>
 8013df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013dfc:	f7ff bff0 	b.w	8013de0 <__sinit_lock_release>
 8013e00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013e04:	6523      	str	r3, [r4, #80]	; 0x50
 8013e06:	4b13      	ldr	r3, [pc, #76]	; (8013e54 <__sinit+0x68>)
 8013e08:	4a13      	ldr	r2, [pc, #76]	; (8013e58 <__sinit+0x6c>)
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8013e0e:	42a3      	cmp	r3, r4
 8013e10:	bf04      	itt	eq
 8013e12:	2301      	moveq	r3, #1
 8013e14:	61a3      	streq	r3, [r4, #24]
 8013e16:	4620      	mov	r0, r4
 8013e18:	f000 f820 	bl	8013e5c <__sfp>
 8013e1c:	6060      	str	r0, [r4, #4]
 8013e1e:	4620      	mov	r0, r4
 8013e20:	f000 f81c 	bl	8013e5c <__sfp>
 8013e24:	60a0      	str	r0, [r4, #8]
 8013e26:	4620      	mov	r0, r4
 8013e28:	f000 f818 	bl	8013e5c <__sfp>
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	60e0      	str	r0, [r4, #12]
 8013e30:	2104      	movs	r1, #4
 8013e32:	6860      	ldr	r0, [r4, #4]
 8013e34:	f7ff ff82 	bl	8013d3c <std>
 8013e38:	68a0      	ldr	r0, [r4, #8]
 8013e3a:	2201      	movs	r2, #1
 8013e3c:	2109      	movs	r1, #9
 8013e3e:	f7ff ff7d 	bl	8013d3c <std>
 8013e42:	68e0      	ldr	r0, [r4, #12]
 8013e44:	2202      	movs	r2, #2
 8013e46:	2112      	movs	r1, #18
 8013e48:	f7ff ff78 	bl	8013d3c <std>
 8013e4c:	2301      	movs	r3, #1
 8013e4e:	61a3      	str	r3, [r4, #24]
 8013e50:	e7d2      	b.n	8013df8 <__sinit+0xc>
 8013e52:	bf00      	nop
 8013e54:	08019cd0 	.word	0x08019cd0
 8013e58:	08013d85 	.word	0x08013d85

08013e5c <__sfp>:
 8013e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e5e:	4607      	mov	r7, r0
 8013e60:	f7ff ffac 	bl	8013dbc <__sfp_lock_acquire>
 8013e64:	4b1e      	ldr	r3, [pc, #120]	; (8013ee0 <__sfp+0x84>)
 8013e66:	681e      	ldr	r6, [r3, #0]
 8013e68:	69b3      	ldr	r3, [r6, #24]
 8013e6a:	b913      	cbnz	r3, 8013e72 <__sfp+0x16>
 8013e6c:	4630      	mov	r0, r6
 8013e6e:	f7ff ffbd 	bl	8013dec <__sinit>
 8013e72:	3648      	adds	r6, #72	; 0x48
 8013e74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013e78:	3b01      	subs	r3, #1
 8013e7a:	d503      	bpl.n	8013e84 <__sfp+0x28>
 8013e7c:	6833      	ldr	r3, [r6, #0]
 8013e7e:	b30b      	cbz	r3, 8013ec4 <__sfp+0x68>
 8013e80:	6836      	ldr	r6, [r6, #0]
 8013e82:	e7f7      	b.n	8013e74 <__sfp+0x18>
 8013e84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013e88:	b9d5      	cbnz	r5, 8013ec0 <__sfp+0x64>
 8013e8a:	4b16      	ldr	r3, [pc, #88]	; (8013ee4 <__sfp+0x88>)
 8013e8c:	60e3      	str	r3, [r4, #12]
 8013e8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013e92:	6665      	str	r5, [r4, #100]	; 0x64
 8013e94:	f000 f85e 	bl	8013f54 <__retarget_lock_init_recursive>
 8013e98:	f7ff ff96 	bl	8013dc8 <__sfp_lock_release>
 8013e9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013ea0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013ea4:	6025      	str	r5, [r4, #0]
 8013ea6:	61a5      	str	r5, [r4, #24]
 8013ea8:	2208      	movs	r2, #8
 8013eaa:	4629      	mov	r1, r5
 8013eac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013eb0:	f7fe f93c 	bl	801212c <memset>
 8013eb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013eb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013ebc:	4620      	mov	r0, r4
 8013ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ec0:	3468      	adds	r4, #104	; 0x68
 8013ec2:	e7d9      	b.n	8013e78 <__sfp+0x1c>
 8013ec4:	2104      	movs	r1, #4
 8013ec6:	4638      	mov	r0, r7
 8013ec8:	f7ff ff62 	bl	8013d90 <__sfmoreglue>
 8013ecc:	4604      	mov	r4, r0
 8013ece:	6030      	str	r0, [r6, #0]
 8013ed0:	2800      	cmp	r0, #0
 8013ed2:	d1d5      	bne.n	8013e80 <__sfp+0x24>
 8013ed4:	f7ff ff78 	bl	8013dc8 <__sfp_lock_release>
 8013ed8:	230c      	movs	r3, #12
 8013eda:	603b      	str	r3, [r7, #0]
 8013edc:	e7ee      	b.n	8013ebc <__sfp+0x60>
 8013ede:	bf00      	nop
 8013ee0:	08019cd0 	.word	0x08019cd0
 8013ee4:	ffff0001 	.word	0xffff0001

08013ee8 <fiprintf>:
 8013ee8:	b40e      	push	{r1, r2, r3}
 8013eea:	b503      	push	{r0, r1, lr}
 8013eec:	4601      	mov	r1, r0
 8013eee:	ab03      	add	r3, sp, #12
 8013ef0:	4805      	ldr	r0, [pc, #20]	; (8013f08 <fiprintf+0x20>)
 8013ef2:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ef6:	6800      	ldr	r0, [r0, #0]
 8013ef8:	9301      	str	r3, [sp, #4]
 8013efa:	f000 fdb1 	bl	8014a60 <_vfiprintf_r>
 8013efe:	b002      	add	sp, #8
 8013f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8013f04:	b003      	add	sp, #12
 8013f06:	4770      	bx	lr
 8013f08:	20000018 	.word	0x20000018

08013f0c <_fwalk_reent>:
 8013f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f10:	4606      	mov	r6, r0
 8013f12:	4688      	mov	r8, r1
 8013f14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013f18:	2700      	movs	r7, #0
 8013f1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013f1e:	f1b9 0901 	subs.w	r9, r9, #1
 8013f22:	d505      	bpl.n	8013f30 <_fwalk_reent+0x24>
 8013f24:	6824      	ldr	r4, [r4, #0]
 8013f26:	2c00      	cmp	r4, #0
 8013f28:	d1f7      	bne.n	8013f1a <_fwalk_reent+0xe>
 8013f2a:	4638      	mov	r0, r7
 8013f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f30:	89ab      	ldrh	r3, [r5, #12]
 8013f32:	2b01      	cmp	r3, #1
 8013f34:	d907      	bls.n	8013f46 <_fwalk_reent+0x3a>
 8013f36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013f3a:	3301      	adds	r3, #1
 8013f3c:	d003      	beq.n	8013f46 <_fwalk_reent+0x3a>
 8013f3e:	4629      	mov	r1, r5
 8013f40:	4630      	mov	r0, r6
 8013f42:	47c0      	blx	r8
 8013f44:	4307      	orrs	r7, r0
 8013f46:	3568      	adds	r5, #104	; 0x68
 8013f48:	e7e9      	b.n	8013f1e <_fwalk_reent+0x12>
	...

08013f4c <_localeconv_r>:
 8013f4c:	4800      	ldr	r0, [pc, #0]	; (8013f50 <_localeconv_r+0x4>)
 8013f4e:	4770      	bx	lr
 8013f50:	2000016c 	.word	0x2000016c

08013f54 <__retarget_lock_init_recursive>:
 8013f54:	4770      	bx	lr

08013f56 <__retarget_lock_acquire_recursive>:
 8013f56:	4770      	bx	lr

08013f58 <__retarget_lock_release_recursive>:
 8013f58:	4770      	bx	lr

08013f5a <__swhatbuf_r>:
 8013f5a:	b570      	push	{r4, r5, r6, lr}
 8013f5c:	460e      	mov	r6, r1
 8013f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f62:	2900      	cmp	r1, #0
 8013f64:	b096      	sub	sp, #88	; 0x58
 8013f66:	4614      	mov	r4, r2
 8013f68:	461d      	mov	r5, r3
 8013f6a:	da07      	bge.n	8013f7c <__swhatbuf_r+0x22>
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	602b      	str	r3, [r5, #0]
 8013f70:	89b3      	ldrh	r3, [r6, #12]
 8013f72:	061a      	lsls	r2, r3, #24
 8013f74:	d410      	bmi.n	8013f98 <__swhatbuf_r+0x3e>
 8013f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013f7a:	e00e      	b.n	8013f9a <__swhatbuf_r+0x40>
 8013f7c:	466a      	mov	r2, sp
 8013f7e:	f000 ff55 	bl	8014e2c <_fstat_r>
 8013f82:	2800      	cmp	r0, #0
 8013f84:	dbf2      	blt.n	8013f6c <__swhatbuf_r+0x12>
 8013f86:	9a01      	ldr	r2, [sp, #4]
 8013f88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013f8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013f90:	425a      	negs	r2, r3
 8013f92:	415a      	adcs	r2, r3
 8013f94:	602a      	str	r2, [r5, #0]
 8013f96:	e7ee      	b.n	8013f76 <__swhatbuf_r+0x1c>
 8013f98:	2340      	movs	r3, #64	; 0x40
 8013f9a:	2000      	movs	r0, #0
 8013f9c:	6023      	str	r3, [r4, #0]
 8013f9e:	b016      	add	sp, #88	; 0x58
 8013fa0:	bd70      	pop	{r4, r5, r6, pc}
	...

08013fa4 <__smakebuf_r>:
 8013fa4:	898b      	ldrh	r3, [r1, #12]
 8013fa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013fa8:	079d      	lsls	r5, r3, #30
 8013faa:	4606      	mov	r6, r0
 8013fac:	460c      	mov	r4, r1
 8013fae:	d507      	bpl.n	8013fc0 <__smakebuf_r+0x1c>
 8013fb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013fb4:	6023      	str	r3, [r4, #0]
 8013fb6:	6123      	str	r3, [r4, #16]
 8013fb8:	2301      	movs	r3, #1
 8013fba:	6163      	str	r3, [r4, #20]
 8013fbc:	b002      	add	sp, #8
 8013fbe:	bd70      	pop	{r4, r5, r6, pc}
 8013fc0:	ab01      	add	r3, sp, #4
 8013fc2:	466a      	mov	r2, sp
 8013fc4:	f7ff ffc9 	bl	8013f5a <__swhatbuf_r>
 8013fc8:	9900      	ldr	r1, [sp, #0]
 8013fca:	4605      	mov	r5, r0
 8013fcc:	4630      	mov	r0, r6
 8013fce:	f7fe f905 	bl	80121dc <_malloc_r>
 8013fd2:	b948      	cbnz	r0, 8013fe8 <__smakebuf_r+0x44>
 8013fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013fd8:	059a      	lsls	r2, r3, #22
 8013fda:	d4ef      	bmi.n	8013fbc <__smakebuf_r+0x18>
 8013fdc:	f023 0303 	bic.w	r3, r3, #3
 8013fe0:	f043 0302 	orr.w	r3, r3, #2
 8013fe4:	81a3      	strh	r3, [r4, #12]
 8013fe6:	e7e3      	b.n	8013fb0 <__smakebuf_r+0xc>
 8013fe8:	4b0d      	ldr	r3, [pc, #52]	; (8014020 <__smakebuf_r+0x7c>)
 8013fea:	62b3      	str	r3, [r6, #40]	; 0x28
 8013fec:	89a3      	ldrh	r3, [r4, #12]
 8013fee:	6020      	str	r0, [r4, #0]
 8013ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ff4:	81a3      	strh	r3, [r4, #12]
 8013ff6:	9b00      	ldr	r3, [sp, #0]
 8013ff8:	6163      	str	r3, [r4, #20]
 8013ffa:	9b01      	ldr	r3, [sp, #4]
 8013ffc:	6120      	str	r0, [r4, #16]
 8013ffe:	b15b      	cbz	r3, 8014018 <__smakebuf_r+0x74>
 8014000:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014004:	4630      	mov	r0, r6
 8014006:	f000 ff23 	bl	8014e50 <_isatty_r>
 801400a:	b128      	cbz	r0, 8014018 <__smakebuf_r+0x74>
 801400c:	89a3      	ldrh	r3, [r4, #12]
 801400e:	f023 0303 	bic.w	r3, r3, #3
 8014012:	f043 0301 	orr.w	r3, r3, #1
 8014016:	81a3      	strh	r3, [r4, #12]
 8014018:	89a0      	ldrh	r0, [r4, #12]
 801401a:	4305      	orrs	r5, r0
 801401c:	81a5      	strh	r5, [r4, #12]
 801401e:	e7cd      	b.n	8013fbc <__smakebuf_r+0x18>
 8014020:	08013d85 	.word	0x08013d85

08014024 <__malloc_lock>:
 8014024:	4801      	ldr	r0, [pc, #4]	; (801402c <__malloc_lock+0x8>)
 8014026:	f7ff bf96 	b.w	8013f56 <__retarget_lock_acquire_recursive>
 801402a:	bf00      	nop
 801402c:	200413a8 	.word	0x200413a8

08014030 <__malloc_unlock>:
 8014030:	4801      	ldr	r0, [pc, #4]	; (8014038 <__malloc_unlock+0x8>)
 8014032:	f7ff bf91 	b.w	8013f58 <__retarget_lock_release_recursive>
 8014036:	bf00      	nop
 8014038:	200413a8 	.word	0x200413a8

0801403c <_Balloc>:
 801403c:	b570      	push	{r4, r5, r6, lr}
 801403e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014040:	4604      	mov	r4, r0
 8014042:	460d      	mov	r5, r1
 8014044:	b976      	cbnz	r6, 8014064 <_Balloc+0x28>
 8014046:	2010      	movs	r0, #16
 8014048:	f7fe f85a 	bl	8012100 <malloc>
 801404c:	4602      	mov	r2, r0
 801404e:	6260      	str	r0, [r4, #36]	; 0x24
 8014050:	b920      	cbnz	r0, 801405c <_Balloc+0x20>
 8014052:	4b18      	ldr	r3, [pc, #96]	; (80140b4 <_Balloc+0x78>)
 8014054:	4818      	ldr	r0, [pc, #96]	; (80140b8 <_Balloc+0x7c>)
 8014056:	2166      	movs	r1, #102	; 0x66
 8014058:	f7fe ff18 	bl	8012e8c <__assert_func>
 801405c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014060:	6006      	str	r6, [r0, #0]
 8014062:	60c6      	str	r6, [r0, #12]
 8014064:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014066:	68f3      	ldr	r3, [r6, #12]
 8014068:	b183      	cbz	r3, 801408c <_Balloc+0x50>
 801406a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801406c:	68db      	ldr	r3, [r3, #12]
 801406e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014072:	b9b8      	cbnz	r0, 80140a4 <_Balloc+0x68>
 8014074:	2101      	movs	r1, #1
 8014076:	fa01 f605 	lsl.w	r6, r1, r5
 801407a:	1d72      	adds	r2, r6, #5
 801407c:	0092      	lsls	r2, r2, #2
 801407e:	4620      	mov	r0, r4
 8014080:	f000 fb5a 	bl	8014738 <_calloc_r>
 8014084:	b160      	cbz	r0, 80140a0 <_Balloc+0x64>
 8014086:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801408a:	e00e      	b.n	80140aa <_Balloc+0x6e>
 801408c:	2221      	movs	r2, #33	; 0x21
 801408e:	2104      	movs	r1, #4
 8014090:	4620      	mov	r0, r4
 8014092:	f000 fb51 	bl	8014738 <_calloc_r>
 8014096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014098:	60f0      	str	r0, [r6, #12]
 801409a:	68db      	ldr	r3, [r3, #12]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d1e4      	bne.n	801406a <_Balloc+0x2e>
 80140a0:	2000      	movs	r0, #0
 80140a2:	bd70      	pop	{r4, r5, r6, pc}
 80140a4:	6802      	ldr	r2, [r0, #0]
 80140a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80140aa:	2300      	movs	r3, #0
 80140ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80140b0:	e7f7      	b.n	80140a2 <_Balloc+0x66>
 80140b2:	bf00      	nop
 80140b4:	08019d51 	.word	0x08019d51
 80140b8:	08019e38 	.word	0x08019e38

080140bc <_Bfree>:
 80140bc:	b570      	push	{r4, r5, r6, lr}
 80140be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80140c0:	4605      	mov	r5, r0
 80140c2:	460c      	mov	r4, r1
 80140c4:	b976      	cbnz	r6, 80140e4 <_Bfree+0x28>
 80140c6:	2010      	movs	r0, #16
 80140c8:	f7fe f81a 	bl	8012100 <malloc>
 80140cc:	4602      	mov	r2, r0
 80140ce:	6268      	str	r0, [r5, #36]	; 0x24
 80140d0:	b920      	cbnz	r0, 80140dc <_Bfree+0x20>
 80140d2:	4b09      	ldr	r3, [pc, #36]	; (80140f8 <_Bfree+0x3c>)
 80140d4:	4809      	ldr	r0, [pc, #36]	; (80140fc <_Bfree+0x40>)
 80140d6:	218a      	movs	r1, #138	; 0x8a
 80140d8:	f7fe fed8 	bl	8012e8c <__assert_func>
 80140dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80140e0:	6006      	str	r6, [r0, #0]
 80140e2:	60c6      	str	r6, [r0, #12]
 80140e4:	b13c      	cbz	r4, 80140f6 <_Bfree+0x3a>
 80140e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80140e8:	6862      	ldr	r2, [r4, #4]
 80140ea:	68db      	ldr	r3, [r3, #12]
 80140ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80140f0:	6021      	str	r1, [r4, #0]
 80140f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80140f6:	bd70      	pop	{r4, r5, r6, pc}
 80140f8:	08019d51 	.word	0x08019d51
 80140fc:	08019e38 	.word	0x08019e38

08014100 <__multadd>:
 8014100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014104:	690e      	ldr	r6, [r1, #16]
 8014106:	4607      	mov	r7, r0
 8014108:	4698      	mov	r8, r3
 801410a:	460c      	mov	r4, r1
 801410c:	f101 0014 	add.w	r0, r1, #20
 8014110:	2300      	movs	r3, #0
 8014112:	6805      	ldr	r5, [r0, #0]
 8014114:	b2a9      	uxth	r1, r5
 8014116:	fb02 8101 	mla	r1, r2, r1, r8
 801411a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801411e:	0c2d      	lsrs	r5, r5, #16
 8014120:	fb02 c505 	mla	r5, r2, r5, ip
 8014124:	b289      	uxth	r1, r1
 8014126:	3301      	adds	r3, #1
 8014128:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801412c:	429e      	cmp	r6, r3
 801412e:	f840 1b04 	str.w	r1, [r0], #4
 8014132:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8014136:	dcec      	bgt.n	8014112 <__multadd+0x12>
 8014138:	f1b8 0f00 	cmp.w	r8, #0
 801413c:	d022      	beq.n	8014184 <__multadd+0x84>
 801413e:	68a3      	ldr	r3, [r4, #8]
 8014140:	42b3      	cmp	r3, r6
 8014142:	dc19      	bgt.n	8014178 <__multadd+0x78>
 8014144:	6861      	ldr	r1, [r4, #4]
 8014146:	4638      	mov	r0, r7
 8014148:	3101      	adds	r1, #1
 801414a:	f7ff ff77 	bl	801403c <_Balloc>
 801414e:	4605      	mov	r5, r0
 8014150:	b928      	cbnz	r0, 801415e <__multadd+0x5e>
 8014152:	4602      	mov	r2, r0
 8014154:	4b0d      	ldr	r3, [pc, #52]	; (801418c <__multadd+0x8c>)
 8014156:	480e      	ldr	r0, [pc, #56]	; (8014190 <__multadd+0x90>)
 8014158:	21b5      	movs	r1, #181	; 0xb5
 801415a:	f7fe fe97 	bl	8012e8c <__assert_func>
 801415e:	6922      	ldr	r2, [r4, #16]
 8014160:	3202      	adds	r2, #2
 8014162:	f104 010c 	add.w	r1, r4, #12
 8014166:	0092      	lsls	r2, r2, #2
 8014168:	300c      	adds	r0, #12
 801416a:	f7fd ffd1 	bl	8012110 <memcpy>
 801416e:	4621      	mov	r1, r4
 8014170:	4638      	mov	r0, r7
 8014172:	f7ff ffa3 	bl	80140bc <_Bfree>
 8014176:	462c      	mov	r4, r5
 8014178:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801417c:	3601      	adds	r6, #1
 801417e:	f8c3 8014 	str.w	r8, [r3, #20]
 8014182:	6126      	str	r6, [r4, #16]
 8014184:	4620      	mov	r0, r4
 8014186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801418a:	bf00      	nop
 801418c:	08019dc7 	.word	0x08019dc7
 8014190:	08019e38 	.word	0x08019e38

08014194 <__hi0bits>:
 8014194:	0c03      	lsrs	r3, r0, #16
 8014196:	041b      	lsls	r3, r3, #16
 8014198:	b9d3      	cbnz	r3, 80141d0 <__hi0bits+0x3c>
 801419a:	0400      	lsls	r0, r0, #16
 801419c:	2310      	movs	r3, #16
 801419e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80141a2:	bf04      	itt	eq
 80141a4:	0200      	lsleq	r0, r0, #8
 80141a6:	3308      	addeq	r3, #8
 80141a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80141ac:	bf04      	itt	eq
 80141ae:	0100      	lsleq	r0, r0, #4
 80141b0:	3304      	addeq	r3, #4
 80141b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80141b6:	bf04      	itt	eq
 80141b8:	0080      	lsleq	r0, r0, #2
 80141ba:	3302      	addeq	r3, #2
 80141bc:	2800      	cmp	r0, #0
 80141be:	db05      	blt.n	80141cc <__hi0bits+0x38>
 80141c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80141c4:	f103 0301 	add.w	r3, r3, #1
 80141c8:	bf08      	it	eq
 80141ca:	2320      	moveq	r3, #32
 80141cc:	4618      	mov	r0, r3
 80141ce:	4770      	bx	lr
 80141d0:	2300      	movs	r3, #0
 80141d2:	e7e4      	b.n	801419e <__hi0bits+0xa>

080141d4 <__lo0bits>:
 80141d4:	6803      	ldr	r3, [r0, #0]
 80141d6:	f013 0207 	ands.w	r2, r3, #7
 80141da:	4601      	mov	r1, r0
 80141dc:	d00b      	beq.n	80141f6 <__lo0bits+0x22>
 80141de:	07da      	lsls	r2, r3, #31
 80141e0:	d424      	bmi.n	801422c <__lo0bits+0x58>
 80141e2:	0798      	lsls	r0, r3, #30
 80141e4:	bf49      	itett	mi
 80141e6:	085b      	lsrmi	r3, r3, #1
 80141e8:	089b      	lsrpl	r3, r3, #2
 80141ea:	2001      	movmi	r0, #1
 80141ec:	600b      	strmi	r3, [r1, #0]
 80141ee:	bf5c      	itt	pl
 80141f0:	600b      	strpl	r3, [r1, #0]
 80141f2:	2002      	movpl	r0, #2
 80141f4:	4770      	bx	lr
 80141f6:	b298      	uxth	r0, r3
 80141f8:	b9b0      	cbnz	r0, 8014228 <__lo0bits+0x54>
 80141fa:	0c1b      	lsrs	r3, r3, #16
 80141fc:	2010      	movs	r0, #16
 80141fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014202:	bf04      	itt	eq
 8014204:	0a1b      	lsreq	r3, r3, #8
 8014206:	3008      	addeq	r0, #8
 8014208:	071a      	lsls	r2, r3, #28
 801420a:	bf04      	itt	eq
 801420c:	091b      	lsreq	r3, r3, #4
 801420e:	3004      	addeq	r0, #4
 8014210:	079a      	lsls	r2, r3, #30
 8014212:	bf04      	itt	eq
 8014214:	089b      	lsreq	r3, r3, #2
 8014216:	3002      	addeq	r0, #2
 8014218:	07da      	lsls	r2, r3, #31
 801421a:	d403      	bmi.n	8014224 <__lo0bits+0x50>
 801421c:	085b      	lsrs	r3, r3, #1
 801421e:	f100 0001 	add.w	r0, r0, #1
 8014222:	d005      	beq.n	8014230 <__lo0bits+0x5c>
 8014224:	600b      	str	r3, [r1, #0]
 8014226:	4770      	bx	lr
 8014228:	4610      	mov	r0, r2
 801422a:	e7e8      	b.n	80141fe <__lo0bits+0x2a>
 801422c:	2000      	movs	r0, #0
 801422e:	4770      	bx	lr
 8014230:	2020      	movs	r0, #32
 8014232:	4770      	bx	lr

08014234 <__i2b>:
 8014234:	b510      	push	{r4, lr}
 8014236:	460c      	mov	r4, r1
 8014238:	2101      	movs	r1, #1
 801423a:	f7ff feff 	bl	801403c <_Balloc>
 801423e:	4602      	mov	r2, r0
 8014240:	b928      	cbnz	r0, 801424e <__i2b+0x1a>
 8014242:	4b05      	ldr	r3, [pc, #20]	; (8014258 <__i2b+0x24>)
 8014244:	4805      	ldr	r0, [pc, #20]	; (801425c <__i2b+0x28>)
 8014246:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801424a:	f7fe fe1f 	bl	8012e8c <__assert_func>
 801424e:	2301      	movs	r3, #1
 8014250:	6144      	str	r4, [r0, #20]
 8014252:	6103      	str	r3, [r0, #16]
 8014254:	bd10      	pop	{r4, pc}
 8014256:	bf00      	nop
 8014258:	08019dc7 	.word	0x08019dc7
 801425c:	08019e38 	.word	0x08019e38

08014260 <__multiply>:
 8014260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014264:	4614      	mov	r4, r2
 8014266:	690a      	ldr	r2, [r1, #16]
 8014268:	6923      	ldr	r3, [r4, #16]
 801426a:	429a      	cmp	r2, r3
 801426c:	bfb8      	it	lt
 801426e:	460b      	movlt	r3, r1
 8014270:	460d      	mov	r5, r1
 8014272:	bfbc      	itt	lt
 8014274:	4625      	movlt	r5, r4
 8014276:	461c      	movlt	r4, r3
 8014278:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801427c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014280:	68ab      	ldr	r3, [r5, #8]
 8014282:	6869      	ldr	r1, [r5, #4]
 8014284:	eb0a 0709 	add.w	r7, sl, r9
 8014288:	42bb      	cmp	r3, r7
 801428a:	b085      	sub	sp, #20
 801428c:	bfb8      	it	lt
 801428e:	3101      	addlt	r1, #1
 8014290:	f7ff fed4 	bl	801403c <_Balloc>
 8014294:	b930      	cbnz	r0, 80142a4 <__multiply+0x44>
 8014296:	4602      	mov	r2, r0
 8014298:	4b42      	ldr	r3, [pc, #264]	; (80143a4 <__multiply+0x144>)
 801429a:	4843      	ldr	r0, [pc, #268]	; (80143a8 <__multiply+0x148>)
 801429c:	f240 115d 	movw	r1, #349	; 0x15d
 80142a0:	f7fe fdf4 	bl	8012e8c <__assert_func>
 80142a4:	f100 0614 	add.w	r6, r0, #20
 80142a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80142ac:	4633      	mov	r3, r6
 80142ae:	2200      	movs	r2, #0
 80142b0:	4543      	cmp	r3, r8
 80142b2:	d31e      	bcc.n	80142f2 <__multiply+0x92>
 80142b4:	f105 0c14 	add.w	ip, r5, #20
 80142b8:	f104 0314 	add.w	r3, r4, #20
 80142bc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80142c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80142c4:	9202      	str	r2, [sp, #8]
 80142c6:	ebac 0205 	sub.w	r2, ip, r5
 80142ca:	3a15      	subs	r2, #21
 80142cc:	f022 0203 	bic.w	r2, r2, #3
 80142d0:	3204      	adds	r2, #4
 80142d2:	f105 0115 	add.w	r1, r5, #21
 80142d6:	458c      	cmp	ip, r1
 80142d8:	bf38      	it	cc
 80142da:	2204      	movcc	r2, #4
 80142dc:	9201      	str	r2, [sp, #4]
 80142de:	9a02      	ldr	r2, [sp, #8]
 80142e0:	9303      	str	r3, [sp, #12]
 80142e2:	429a      	cmp	r2, r3
 80142e4:	d808      	bhi.n	80142f8 <__multiply+0x98>
 80142e6:	2f00      	cmp	r7, #0
 80142e8:	dc55      	bgt.n	8014396 <__multiply+0x136>
 80142ea:	6107      	str	r7, [r0, #16]
 80142ec:	b005      	add	sp, #20
 80142ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142f2:	f843 2b04 	str.w	r2, [r3], #4
 80142f6:	e7db      	b.n	80142b0 <__multiply+0x50>
 80142f8:	f8b3 a000 	ldrh.w	sl, [r3]
 80142fc:	f1ba 0f00 	cmp.w	sl, #0
 8014300:	d020      	beq.n	8014344 <__multiply+0xe4>
 8014302:	f105 0e14 	add.w	lr, r5, #20
 8014306:	46b1      	mov	r9, r6
 8014308:	2200      	movs	r2, #0
 801430a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801430e:	f8d9 b000 	ldr.w	fp, [r9]
 8014312:	b2a1      	uxth	r1, r4
 8014314:	fa1f fb8b 	uxth.w	fp, fp
 8014318:	fb0a b101 	mla	r1, sl, r1, fp
 801431c:	4411      	add	r1, r2
 801431e:	f8d9 2000 	ldr.w	r2, [r9]
 8014322:	0c24      	lsrs	r4, r4, #16
 8014324:	0c12      	lsrs	r2, r2, #16
 8014326:	fb0a 2404 	mla	r4, sl, r4, r2
 801432a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801432e:	b289      	uxth	r1, r1
 8014330:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014334:	45f4      	cmp	ip, lr
 8014336:	f849 1b04 	str.w	r1, [r9], #4
 801433a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801433e:	d8e4      	bhi.n	801430a <__multiply+0xaa>
 8014340:	9901      	ldr	r1, [sp, #4]
 8014342:	5072      	str	r2, [r6, r1]
 8014344:	9a03      	ldr	r2, [sp, #12]
 8014346:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801434a:	3304      	adds	r3, #4
 801434c:	f1b9 0f00 	cmp.w	r9, #0
 8014350:	d01f      	beq.n	8014392 <__multiply+0x132>
 8014352:	6834      	ldr	r4, [r6, #0]
 8014354:	f105 0114 	add.w	r1, r5, #20
 8014358:	46b6      	mov	lr, r6
 801435a:	f04f 0a00 	mov.w	sl, #0
 801435e:	880a      	ldrh	r2, [r1, #0]
 8014360:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014364:	fb09 b202 	mla	r2, r9, r2, fp
 8014368:	4492      	add	sl, r2
 801436a:	b2a4      	uxth	r4, r4
 801436c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014370:	f84e 4b04 	str.w	r4, [lr], #4
 8014374:	f851 4b04 	ldr.w	r4, [r1], #4
 8014378:	f8be 2000 	ldrh.w	r2, [lr]
 801437c:	0c24      	lsrs	r4, r4, #16
 801437e:	fb09 2404 	mla	r4, r9, r4, r2
 8014382:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014386:	458c      	cmp	ip, r1
 8014388:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801438c:	d8e7      	bhi.n	801435e <__multiply+0xfe>
 801438e:	9a01      	ldr	r2, [sp, #4]
 8014390:	50b4      	str	r4, [r6, r2]
 8014392:	3604      	adds	r6, #4
 8014394:	e7a3      	b.n	80142de <__multiply+0x7e>
 8014396:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801439a:	2b00      	cmp	r3, #0
 801439c:	d1a5      	bne.n	80142ea <__multiply+0x8a>
 801439e:	3f01      	subs	r7, #1
 80143a0:	e7a1      	b.n	80142e6 <__multiply+0x86>
 80143a2:	bf00      	nop
 80143a4:	08019dc7 	.word	0x08019dc7
 80143a8:	08019e38 	.word	0x08019e38

080143ac <__pow5mult>:
 80143ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143b0:	4615      	mov	r5, r2
 80143b2:	f012 0203 	ands.w	r2, r2, #3
 80143b6:	4606      	mov	r6, r0
 80143b8:	460f      	mov	r7, r1
 80143ba:	d007      	beq.n	80143cc <__pow5mult+0x20>
 80143bc:	4c25      	ldr	r4, [pc, #148]	; (8014454 <__pow5mult+0xa8>)
 80143be:	3a01      	subs	r2, #1
 80143c0:	2300      	movs	r3, #0
 80143c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80143c6:	f7ff fe9b 	bl	8014100 <__multadd>
 80143ca:	4607      	mov	r7, r0
 80143cc:	10ad      	asrs	r5, r5, #2
 80143ce:	d03d      	beq.n	801444c <__pow5mult+0xa0>
 80143d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80143d2:	b97c      	cbnz	r4, 80143f4 <__pow5mult+0x48>
 80143d4:	2010      	movs	r0, #16
 80143d6:	f7fd fe93 	bl	8012100 <malloc>
 80143da:	4602      	mov	r2, r0
 80143dc:	6270      	str	r0, [r6, #36]	; 0x24
 80143de:	b928      	cbnz	r0, 80143ec <__pow5mult+0x40>
 80143e0:	4b1d      	ldr	r3, [pc, #116]	; (8014458 <__pow5mult+0xac>)
 80143e2:	481e      	ldr	r0, [pc, #120]	; (801445c <__pow5mult+0xb0>)
 80143e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80143e8:	f7fe fd50 	bl	8012e8c <__assert_func>
 80143ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80143f0:	6004      	str	r4, [r0, #0]
 80143f2:	60c4      	str	r4, [r0, #12]
 80143f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80143f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80143fc:	b94c      	cbnz	r4, 8014412 <__pow5mult+0x66>
 80143fe:	f240 2171 	movw	r1, #625	; 0x271
 8014402:	4630      	mov	r0, r6
 8014404:	f7ff ff16 	bl	8014234 <__i2b>
 8014408:	2300      	movs	r3, #0
 801440a:	f8c8 0008 	str.w	r0, [r8, #8]
 801440e:	4604      	mov	r4, r0
 8014410:	6003      	str	r3, [r0, #0]
 8014412:	f04f 0900 	mov.w	r9, #0
 8014416:	07eb      	lsls	r3, r5, #31
 8014418:	d50a      	bpl.n	8014430 <__pow5mult+0x84>
 801441a:	4639      	mov	r1, r7
 801441c:	4622      	mov	r2, r4
 801441e:	4630      	mov	r0, r6
 8014420:	f7ff ff1e 	bl	8014260 <__multiply>
 8014424:	4639      	mov	r1, r7
 8014426:	4680      	mov	r8, r0
 8014428:	4630      	mov	r0, r6
 801442a:	f7ff fe47 	bl	80140bc <_Bfree>
 801442e:	4647      	mov	r7, r8
 8014430:	106d      	asrs	r5, r5, #1
 8014432:	d00b      	beq.n	801444c <__pow5mult+0xa0>
 8014434:	6820      	ldr	r0, [r4, #0]
 8014436:	b938      	cbnz	r0, 8014448 <__pow5mult+0x9c>
 8014438:	4622      	mov	r2, r4
 801443a:	4621      	mov	r1, r4
 801443c:	4630      	mov	r0, r6
 801443e:	f7ff ff0f 	bl	8014260 <__multiply>
 8014442:	6020      	str	r0, [r4, #0]
 8014444:	f8c0 9000 	str.w	r9, [r0]
 8014448:	4604      	mov	r4, r0
 801444a:	e7e4      	b.n	8014416 <__pow5mult+0x6a>
 801444c:	4638      	mov	r0, r7
 801444e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014452:	bf00      	nop
 8014454:	08019f88 	.word	0x08019f88
 8014458:	08019d51 	.word	0x08019d51
 801445c:	08019e38 	.word	0x08019e38

08014460 <__lshift>:
 8014460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014464:	460c      	mov	r4, r1
 8014466:	6849      	ldr	r1, [r1, #4]
 8014468:	6923      	ldr	r3, [r4, #16]
 801446a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801446e:	68a3      	ldr	r3, [r4, #8]
 8014470:	4607      	mov	r7, r0
 8014472:	4691      	mov	r9, r2
 8014474:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014478:	f108 0601 	add.w	r6, r8, #1
 801447c:	42b3      	cmp	r3, r6
 801447e:	db0b      	blt.n	8014498 <__lshift+0x38>
 8014480:	4638      	mov	r0, r7
 8014482:	f7ff fddb 	bl	801403c <_Balloc>
 8014486:	4605      	mov	r5, r0
 8014488:	b948      	cbnz	r0, 801449e <__lshift+0x3e>
 801448a:	4602      	mov	r2, r0
 801448c:	4b28      	ldr	r3, [pc, #160]	; (8014530 <__lshift+0xd0>)
 801448e:	4829      	ldr	r0, [pc, #164]	; (8014534 <__lshift+0xd4>)
 8014490:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014494:	f7fe fcfa 	bl	8012e8c <__assert_func>
 8014498:	3101      	adds	r1, #1
 801449a:	005b      	lsls	r3, r3, #1
 801449c:	e7ee      	b.n	801447c <__lshift+0x1c>
 801449e:	2300      	movs	r3, #0
 80144a0:	f100 0114 	add.w	r1, r0, #20
 80144a4:	f100 0210 	add.w	r2, r0, #16
 80144a8:	4618      	mov	r0, r3
 80144aa:	4553      	cmp	r3, sl
 80144ac:	db33      	blt.n	8014516 <__lshift+0xb6>
 80144ae:	6920      	ldr	r0, [r4, #16]
 80144b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80144b4:	f104 0314 	add.w	r3, r4, #20
 80144b8:	f019 091f 	ands.w	r9, r9, #31
 80144bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80144c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80144c4:	d02b      	beq.n	801451e <__lshift+0xbe>
 80144c6:	f1c9 0e20 	rsb	lr, r9, #32
 80144ca:	468a      	mov	sl, r1
 80144cc:	2200      	movs	r2, #0
 80144ce:	6818      	ldr	r0, [r3, #0]
 80144d0:	fa00 f009 	lsl.w	r0, r0, r9
 80144d4:	4302      	orrs	r2, r0
 80144d6:	f84a 2b04 	str.w	r2, [sl], #4
 80144da:	f853 2b04 	ldr.w	r2, [r3], #4
 80144de:	459c      	cmp	ip, r3
 80144e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80144e4:	d8f3      	bhi.n	80144ce <__lshift+0x6e>
 80144e6:	ebac 0304 	sub.w	r3, ip, r4
 80144ea:	3b15      	subs	r3, #21
 80144ec:	f023 0303 	bic.w	r3, r3, #3
 80144f0:	3304      	adds	r3, #4
 80144f2:	f104 0015 	add.w	r0, r4, #21
 80144f6:	4584      	cmp	ip, r0
 80144f8:	bf38      	it	cc
 80144fa:	2304      	movcc	r3, #4
 80144fc:	50ca      	str	r2, [r1, r3]
 80144fe:	b10a      	cbz	r2, 8014504 <__lshift+0xa4>
 8014500:	f108 0602 	add.w	r6, r8, #2
 8014504:	3e01      	subs	r6, #1
 8014506:	4638      	mov	r0, r7
 8014508:	612e      	str	r6, [r5, #16]
 801450a:	4621      	mov	r1, r4
 801450c:	f7ff fdd6 	bl	80140bc <_Bfree>
 8014510:	4628      	mov	r0, r5
 8014512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014516:	f842 0f04 	str.w	r0, [r2, #4]!
 801451a:	3301      	adds	r3, #1
 801451c:	e7c5      	b.n	80144aa <__lshift+0x4a>
 801451e:	3904      	subs	r1, #4
 8014520:	f853 2b04 	ldr.w	r2, [r3], #4
 8014524:	f841 2f04 	str.w	r2, [r1, #4]!
 8014528:	459c      	cmp	ip, r3
 801452a:	d8f9      	bhi.n	8014520 <__lshift+0xc0>
 801452c:	e7ea      	b.n	8014504 <__lshift+0xa4>
 801452e:	bf00      	nop
 8014530:	08019dc7 	.word	0x08019dc7
 8014534:	08019e38 	.word	0x08019e38

08014538 <__mcmp>:
 8014538:	b530      	push	{r4, r5, lr}
 801453a:	6902      	ldr	r2, [r0, #16]
 801453c:	690c      	ldr	r4, [r1, #16]
 801453e:	1b12      	subs	r2, r2, r4
 8014540:	d10e      	bne.n	8014560 <__mcmp+0x28>
 8014542:	f100 0314 	add.w	r3, r0, #20
 8014546:	3114      	adds	r1, #20
 8014548:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801454c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014550:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014554:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014558:	42a5      	cmp	r5, r4
 801455a:	d003      	beq.n	8014564 <__mcmp+0x2c>
 801455c:	d305      	bcc.n	801456a <__mcmp+0x32>
 801455e:	2201      	movs	r2, #1
 8014560:	4610      	mov	r0, r2
 8014562:	bd30      	pop	{r4, r5, pc}
 8014564:	4283      	cmp	r3, r0
 8014566:	d3f3      	bcc.n	8014550 <__mcmp+0x18>
 8014568:	e7fa      	b.n	8014560 <__mcmp+0x28>
 801456a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801456e:	e7f7      	b.n	8014560 <__mcmp+0x28>

08014570 <__mdiff>:
 8014570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014574:	460c      	mov	r4, r1
 8014576:	4606      	mov	r6, r0
 8014578:	4611      	mov	r1, r2
 801457a:	4620      	mov	r0, r4
 801457c:	4617      	mov	r7, r2
 801457e:	f7ff ffdb 	bl	8014538 <__mcmp>
 8014582:	1e05      	subs	r5, r0, #0
 8014584:	d110      	bne.n	80145a8 <__mdiff+0x38>
 8014586:	4629      	mov	r1, r5
 8014588:	4630      	mov	r0, r6
 801458a:	f7ff fd57 	bl	801403c <_Balloc>
 801458e:	b930      	cbnz	r0, 801459e <__mdiff+0x2e>
 8014590:	4b39      	ldr	r3, [pc, #228]	; (8014678 <__mdiff+0x108>)
 8014592:	4602      	mov	r2, r0
 8014594:	f240 2132 	movw	r1, #562	; 0x232
 8014598:	4838      	ldr	r0, [pc, #224]	; (801467c <__mdiff+0x10c>)
 801459a:	f7fe fc77 	bl	8012e8c <__assert_func>
 801459e:	2301      	movs	r3, #1
 80145a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80145a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145a8:	bfa4      	itt	ge
 80145aa:	463b      	movge	r3, r7
 80145ac:	4627      	movge	r7, r4
 80145ae:	4630      	mov	r0, r6
 80145b0:	6879      	ldr	r1, [r7, #4]
 80145b2:	bfa6      	itte	ge
 80145b4:	461c      	movge	r4, r3
 80145b6:	2500      	movge	r5, #0
 80145b8:	2501      	movlt	r5, #1
 80145ba:	f7ff fd3f 	bl	801403c <_Balloc>
 80145be:	b920      	cbnz	r0, 80145ca <__mdiff+0x5a>
 80145c0:	4b2d      	ldr	r3, [pc, #180]	; (8014678 <__mdiff+0x108>)
 80145c2:	4602      	mov	r2, r0
 80145c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80145c8:	e7e6      	b.n	8014598 <__mdiff+0x28>
 80145ca:	693e      	ldr	r6, [r7, #16]
 80145cc:	60c5      	str	r5, [r0, #12]
 80145ce:	6925      	ldr	r5, [r4, #16]
 80145d0:	f107 0114 	add.w	r1, r7, #20
 80145d4:	f104 0914 	add.w	r9, r4, #20
 80145d8:	f100 0e14 	add.w	lr, r0, #20
 80145dc:	f107 0210 	add.w	r2, r7, #16
 80145e0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80145e4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80145e8:	46f2      	mov	sl, lr
 80145ea:	2700      	movs	r7, #0
 80145ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80145f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80145f4:	fa1f f883 	uxth.w	r8, r3
 80145f8:	fa17 f78b 	uxtah	r7, r7, fp
 80145fc:	0c1b      	lsrs	r3, r3, #16
 80145fe:	eba7 0808 	sub.w	r8, r7, r8
 8014602:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014606:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801460a:	fa1f f888 	uxth.w	r8, r8
 801460e:	141f      	asrs	r7, r3, #16
 8014610:	454d      	cmp	r5, r9
 8014612:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014616:	f84a 3b04 	str.w	r3, [sl], #4
 801461a:	d8e7      	bhi.n	80145ec <__mdiff+0x7c>
 801461c:	1b2b      	subs	r3, r5, r4
 801461e:	3b15      	subs	r3, #21
 8014620:	f023 0303 	bic.w	r3, r3, #3
 8014624:	3304      	adds	r3, #4
 8014626:	3415      	adds	r4, #21
 8014628:	42a5      	cmp	r5, r4
 801462a:	bf38      	it	cc
 801462c:	2304      	movcc	r3, #4
 801462e:	4419      	add	r1, r3
 8014630:	4473      	add	r3, lr
 8014632:	469e      	mov	lr, r3
 8014634:	460d      	mov	r5, r1
 8014636:	4565      	cmp	r5, ip
 8014638:	d30e      	bcc.n	8014658 <__mdiff+0xe8>
 801463a:	f10c 0203 	add.w	r2, ip, #3
 801463e:	1a52      	subs	r2, r2, r1
 8014640:	f022 0203 	bic.w	r2, r2, #3
 8014644:	3903      	subs	r1, #3
 8014646:	458c      	cmp	ip, r1
 8014648:	bf38      	it	cc
 801464a:	2200      	movcc	r2, #0
 801464c:	441a      	add	r2, r3
 801464e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014652:	b17b      	cbz	r3, 8014674 <__mdiff+0x104>
 8014654:	6106      	str	r6, [r0, #16]
 8014656:	e7a5      	b.n	80145a4 <__mdiff+0x34>
 8014658:	f855 8b04 	ldr.w	r8, [r5], #4
 801465c:	fa17 f488 	uxtah	r4, r7, r8
 8014660:	1422      	asrs	r2, r4, #16
 8014662:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8014666:	b2a4      	uxth	r4, r4
 8014668:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801466c:	f84e 4b04 	str.w	r4, [lr], #4
 8014670:	1417      	asrs	r7, r2, #16
 8014672:	e7e0      	b.n	8014636 <__mdiff+0xc6>
 8014674:	3e01      	subs	r6, #1
 8014676:	e7ea      	b.n	801464e <__mdiff+0xde>
 8014678:	08019dc7 	.word	0x08019dc7
 801467c:	08019e38 	.word	0x08019e38

08014680 <__d2b>:
 8014680:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014684:	4689      	mov	r9, r1
 8014686:	2101      	movs	r1, #1
 8014688:	ec57 6b10 	vmov	r6, r7, d0
 801468c:	4690      	mov	r8, r2
 801468e:	f7ff fcd5 	bl	801403c <_Balloc>
 8014692:	4604      	mov	r4, r0
 8014694:	b930      	cbnz	r0, 80146a4 <__d2b+0x24>
 8014696:	4602      	mov	r2, r0
 8014698:	4b25      	ldr	r3, [pc, #148]	; (8014730 <__d2b+0xb0>)
 801469a:	4826      	ldr	r0, [pc, #152]	; (8014734 <__d2b+0xb4>)
 801469c:	f240 310a 	movw	r1, #778	; 0x30a
 80146a0:	f7fe fbf4 	bl	8012e8c <__assert_func>
 80146a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80146a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80146ac:	bb35      	cbnz	r5, 80146fc <__d2b+0x7c>
 80146ae:	2e00      	cmp	r6, #0
 80146b0:	9301      	str	r3, [sp, #4]
 80146b2:	d028      	beq.n	8014706 <__d2b+0x86>
 80146b4:	4668      	mov	r0, sp
 80146b6:	9600      	str	r6, [sp, #0]
 80146b8:	f7ff fd8c 	bl	80141d4 <__lo0bits>
 80146bc:	9900      	ldr	r1, [sp, #0]
 80146be:	b300      	cbz	r0, 8014702 <__d2b+0x82>
 80146c0:	9a01      	ldr	r2, [sp, #4]
 80146c2:	f1c0 0320 	rsb	r3, r0, #32
 80146c6:	fa02 f303 	lsl.w	r3, r2, r3
 80146ca:	430b      	orrs	r3, r1
 80146cc:	40c2      	lsrs	r2, r0
 80146ce:	6163      	str	r3, [r4, #20]
 80146d0:	9201      	str	r2, [sp, #4]
 80146d2:	9b01      	ldr	r3, [sp, #4]
 80146d4:	61a3      	str	r3, [r4, #24]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	bf14      	ite	ne
 80146da:	2202      	movne	r2, #2
 80146dc:	2201      	moveq	r2, #1
 80146de:	6122      	str	r2, [r4, #16]
 80146e0:	b1d5      	cbz	r5, 8014718 <__d2b+0x98>
 80146e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80146e6:	4405      	add	r5, r0
 80146e8:	f8c9 5000 	str.w	r5, [r9]
 80146ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80146f0:	f8c8 0000 	str.w	r0, [r8]
 80146f4:	4620      	mov	r0, r4
 80146f6:	b003      	add	sp, #12
 80146f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014700:	e7d5      	b.n	80146ae <__d2b+0x2e>
 8014702:	6161      	str	r1, [r4, #20]
 8014704:	e7e5      	b.n	80146d2 <__d2b+0x52>
 8014706:	a801      	add	r0, sp, #4
 8014708:	f7ff fd64 	bl	80141d4 <__lo0bits>
 801470c:	9b01      	ldr	r3, [sp, #4]
 801470e:	6163      	str	r3, [r4, #20]
 8014710:	2201      	movs	r2, #1
 8014712:	6122      	str	r2, [r4, #16]
 8014714:	3020      	adds	r0, #32
 8014716:	e7e3      	b.n	80146e0 <__d2b+0x60>
 8014718:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801471c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014720:	f8c9 0000 	str.w	r0, [r9]
 8014724:	6918      	ldr	r0, [r3, #16]
 8014726:	f7ff fd35 	bl	8014194 <__hi0bits>
 801472a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801472e:	e7df      	b.n	80146f0 <__d2b+0x70>
 8014730:	08019dc7 	.word	0x08019dc7
 8014734:	08019e38 	.word	0x08019e38

08014738 <_calloc_r>:
 8014738:	b513      	push	{r0, r1, r4, lr}
 801473a:	434a      	muls	r2, r1
 801473c:	4611      	mov	r1, r2
 801473e:	9201      	str	r2, [sp, #4]
 8014740:	f7fd fd4c 	bl	80121dc <_malloc_r>
 8014744:	4604      	mov	r4, r0
 8014746:	b118      	cbz	r0, 8014750 <_calloc_r+0x18>
 8014748:	9a01      	ldr	r2, [sp, #4]
 801474a:	2100      	movs	r1, #0
 801474c:	f7fd fcee 	bl	801212c <memset>
 8014750:	4620      	mov	r0, r4
 8014752:	b002      	add	sp, #8
 8014754:	bd10      	pop	{r4, pc}

08014756 <__ssputs_r>:
 8014756:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801475a:	688e      	ldr	r6, [r1, #8]
 801475c:	429e      	cmp	r6, r3
 801475e:	4682      	mov	sl, r0
 8014760:	460c      	mov	r4, r1
 8014762:	4690      	mov	r8, r2
 8014764:	461f      	mov	r7, r3
 8014766:	d838      	bhi.n	80147da <__ssputs_r+0x84>
 8014768:	898a      	ldrh	r2, [r1, #12]
 801476a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801476e:	d032      	beq.n	80147d6 <__ssputs_r+0x80>
 8014770:	6825      	ldr	r5, [r4, #0]
 8014772:	6909      	ldr	r1, [r1, #16]
 8014774:	eba5 0901 	sub.w	r9, r5, r1
 8014778:	6965      	ldr	r5, [r4, #20]
 801477a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801477e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014782:	3301      	adds	r3, #1
 8014784:	444b      	add	r3, r9
 8014786:	106d      	asrs	r5, r5, #1
 8014788:	429d      	cmp	r5, r3
 801478a:	bf38      	it	cc
 801478c:	461d      	movcc	r5, r3
 801478e:	0553      	lsls	r3, r2, #21
 8014790:	d531      	bpl.n	80147f6 <__ssputs_r+0xa0>
 8014792:	4629      	mov	r1, r5
 8014794:	f7fd fd22 	bl	80121dc <_malloc_r>
 8014798:	4606      	mov	r6, r0
 801479a:	b950      	cbnz	r0, 80147b2 <__ssputs_r+0x5c>
 801479c:	230c      	movs	r3, #12
 801479e:	f8ca 3000 	str.w	r3, [sl]
 80147a2:	89a3      	ldrh	r3, [r4, #12]
 80147a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147a8:	81a3      	strh	r3, [r4, #12]
 80147aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80147ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147b2:	6921      	ldr	r1, [r4, #16]
 80147b4:	464a      	mov	r2, r9
 80147b6:	f7fd fcab 	bl	8012110 <memcpy>
 80147ba:	89a3      	ldrh	r3, [r4, #12]
 80147bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80147c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80147c4:	81a3      	strh	r3, [r4, #12]
 80147c6:	6126      	str	r6, [r4, #16]
 80147c8:	6165      	str	r5, [r4, #20]
 80147ca:	444e      	add	r6, r9
 80147cc:	eba5 0509 	sub.w	r5, r5, r9
 80147d0:	6026      	str	r6, [r4, #0]
 80147d2:	60a5      	str	r5, [r4, #8]
 80147d4:	463e      	mov	r6, r7
 80147d6:	42be      	cmp	r6, r7
 80147d8:	d900      	bls.n	80147dc <__ssputs_r+0x86>
 80147da:	463e      	mov	r6, r7
 80147dc:	4632      	mov	r2, r6
 80147de:	6820      	ldr	r0, [r4, #0]
 80147e0:	4641      	mov	r1, r8
 80147e2:	f000 fb69 	bl	8014eb8 <memmove>
 80147e6:	68a3      	ldr	r3, [r4, #8]
 80147e8:	6822      	ldr	r2, [r4, #0]
 80147ea:	1b9b      	subs	r3, r3, r6
 80147ec:	4432      	add	r2, r6
 80147ee:	60a3      	str	r3, [r4, #8]
 80147f0:	6022      	str	r2, [r4, #0]
 80147f2:	2000      	movs	r0, #0
 80147f4:	e7db      	b.n	80147ae <__ssputs_r+0x58>
 80147f6:	462a      	mov	r2, r5
 80147f8:	f000 fb78 	bl	8014eec <_realloc_r>
 80147fc:	4606      	mov	r6, r0
 80147fe:	2800      	cmp	r0, #0
 8014800:	d1e1      	bne.n	80147c6 <__ssputs_r+0x70>
 8014802:	6921      	ldr	r1, [r4, #16]
 8014804:	4650      	mov	r0, sl
 8014806:	f7fd fc99 	bl	801213c <_free_r>
 801480a:	e7c7      	b.n	801479c <__ssputs_r+0x46>

0801480c <_svfiprintf_r>:
 801480c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014810:	4698      	mov	r8, r3
 8014812:	898b      	ldrh	r3, [r1, #12]
 8014814:	061b      	lsls	r3, r3, #24
 8014816:	b09d      	sub	sp, #116	; 0x74
 8014818:	4607      	mov	r7, r0
 801481a:	460d      	mov	r5, r1
 801481c:	4614      	mov	r4, r2
 801481e:	d50e      	bpl.n	801483e <_svfiprintf_r+0x32>
 8014820:	690b      	ldr	r3, [r1, #16]
 8014822:	b963      	cbnz	r3, 801483e <_svfiprintf_r+0x32>
 8014824:	2140      	movs	r1, #64	; 0x40
 8014826:	f7fd fcd9 	bl	80121dc <_malloc_r>
 801482a:	6028      	str	r0, [r5, #0]
 801482c:	6128      	str	r0, [r5, #16]
 801482e:	b920      	cbnz	r0, 801483a <_svfiprintf_r+0x2e>
 8014830:	230c      	movs	r3, #12
 8014832:	603b      	str	r3, [r7, #0]
 8014834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014838:	e0d1      	b.n	80149de <_svfiprintf_r+0x1d2>
 801483a:	2340      	movs	r3, #64	; 0x40
 801483c:	616b      	str	r3, [r5, #20]
 801483e:	2300      	movs	r3, #0
 8014840:	9309      	str	r3, [sp, #36]	; 0x24
 8014842:	2320      	movs	r3, #32
 8014844:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014848:	f8cd 800c 	str.w	r8, [sp, #12]
 801484c:	2330      	movs	r3, #48	; 0x30
 801484e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80149f8 <_svfiprintf_r+0x1ec>
 8014852:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014856:	f04f 0901 	mov.w	r9, #1
 801485a:	4623      	mov	r3, r4
 801485c:	469a      	mov	sl, r3
 801485e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014862:	b10a      	cbz	r2, 8014868 <_svfiprintf_r+0x5c>
 8014864:	2a25      	cmp	r2, #37	; 0x25
 8014866:	d1f9      	bne.n	801485c <_svfiprintf_r+0x50>
 8014868:	ebba 0b04 	subs.w	fp, sl, r4
 801486c:	d00b      	beq.n	8014886 <_svfiprintf_r+0x7a>
 801486e:	465b      	mov	r3, fp
 8014870:	4622      	mov	r2, r4
 8014872:	4629      	mov	r1, r5
 8014874:	4638      	mov	r0, r7
 8014876:	f7ff ff6e 	bl	8014756 <__ssputs_r>
 801487a:	3001      	adds	r0, #1
 801487c:	f000 80aa 	beq.w	80149d4 <_svfiprintf_r+0x1c8>
 8014880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014882:	445a      	add	r2, fp
 8014884:	9209      	str	r2, [sp, #36]	; 0x24
 8014886:	f89a 3000 	ldrb.w	r3, [sl]
 801488a:	2b00      	cmp	r3, #0
 801488c:	f000 80a2 	beq.w	80149d4 <_svfiprintf_r+0x1c8>
 8014890:	2300      	movs	r3, #0
 8014892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801489a:	f10a 0a01 	add.w	sl, sl, #1
 801489e:	9304      	str	r3, [sp, #16]
 80148a0:	9307      	str	r3, [sp, #28]
 80148a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80148a6:	931a      	str	r3, [sp, #104]	; 0x68
 80148a8:	4654      	mov	r4, sl
 80148aa:	2205      	movs	r2, #5
 80148ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148b0:	4851      	ldr	r0, [pc, #324]	; (80149f8 <_svfiprintf_r+0x1ec>)
 80148b2:	f7eb fcb5 	bl	8000220 <memchr>
 80148b6:	9a04      	ldr	r2, [sp, #16]
 80148b8:	b9d8      	cbnz	r0, 80148f2 <_svfiprintf_r+0xe6>
 80148ba:	06d0      	lsls	r0, r2, #27
 80148bc:	bf44      	itt	mi
 80148be:	2320      	movmi	r3, #32
 80148c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80148c4:	0711      	lsls	r1, r2, #28
 80148c6:	bf44      	itt	mi
 80148c8:	232b      	movmi	r3, #43	; 0x2b
 80148ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80148ce:	f89a 3000 	ldrb.w	r3, [sl]
 80148d2:	2b2a      	cmp	r3, #42	; 0x2a
 80148d4:	d015      	beq.n	8014902 <_svfiprintf_r+0xf6>
 80148d6:	9a07      	ldr	r2, [sp, #28]
 80148d8:	4654      	mov	r4, sl
 80148da:	2000      	movs	r0, #0
 80148dc:	f04f 0c0a 	mov.w	ip, #10
 80148e0:	4621      	mov	r1, r4
 80148e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80148e6:	3b30      	subs	r3, #48	; 0x30
 80148e8:	2b09      	cmp	r3, #9
 80148ea:	d94e      	bls.n	801498a <_svfiprintf_r+0x17e>
 80148ec:	b1b0      	cbz	r0, 801491c <_svfiprintf_r+0x110>
 80148ee:	9207      	str	r2, [sp, #28]
 80148f0:	e014      	b.n	801491c <_svfiprintf_r+0x110>
 80148f2:	eba0 0308 	sub.w	r3, r0, r8
 80148f6:	fa09 f303 	lsl.w	r3, r9, r3
 80148fa:	4313      	orrs	r3, r2
 80148fc:	9304      	str	r3, [sp, #16]
 80148fe:	46a2      	mov	sl, r4
 8014900:	e7d2      	b.n	80148a8 <_svfiprintf_r+0x9c>
 8014902:	9b03      	ldr	r3, [sp, #12]
 8014904:	1d19      	adds	r1, r3, #4
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	9103      	str	r1, [sp, #12]
 801490a:	2b00      	cmp	r3, #0
 801490c:	bfbb      	ittet	lt
 801490e:	425b      	neglt	r3, r3
 8014910:	f042 0202 	orrlt.w	r2, r2, #2
 8014914:	9307      	strge	r3, [sp, #28]
 8014916:	9307      	strlt	r3, [sp, #28]
 8014918:	bfb8      	it	lt
 801491a:	9204      	strlt	r2, [sp, #16]
 801491c:	7823      	ldrb	r3, [r4, #0]
 801491e:	2b2e      	cmp	r3, #46	; 0x2e
 8014920:	d10c      	bne.n	801493c <_svfiprintf_r+0x130>
 8014922:	7863      	ldrb	r3, [r4, #1]
 8014924:	2b2a      	cmp	r3, #42	; 0x2a
 8014926:	d135      	bne.n	8014994 <_svfiprintf_r+0x188>
 8014928:	9b03      	ldr	r3, [sp, #12]
 801492a:	1d1a      	adds	r2, r3, #4
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	9203      	str	r2, [sp, #12]
 8014930:	2b00      	cmp	r3, #0
 8014932:	bfb8      	it	lt
 8014934:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014938:	3402      	adds	r4, #2
 801493a:	9305      	str	r3, [sp, #20]
 801493c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014a08 <_svfiprintf_r+0x1fc>
 8014940:	7821      	ldrb	r1, [r4, #0]
 8014942:	2203      	movs	r2, #3
 8014944:	4650      	mov	r0, sl
 8014946:	f7eb fc6b 	bl	8000220 <memchr>
 801494a:	b140      	cbz	r0, 801495e <_svfiprintf_r+0x152>
 801494c:	2340      	movs	r3, #64	; 0x40
 801494e:	eba0 000a 	sub.w	r0, r0, sl
 8014952:	fa03 f000 	lsl.w	r0, r3, r0
 8014956:	9b04      	ldr	r3, [sp, #16]
 8014958:	4303      	orrs	r3, r0
 801495a:	3401      	adds	r4, #1
 801495c:	9304      	str	r3, [sp, #16]
 801495e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014962:	4826      	ldr	r0, [pc, #152]	; (80149fc <_svfiprintf_r+0x1f0>)
 8014964:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014968:	2206      	movs	r2, #6
 801496a:	f7eb fc59 	bl	8000220 <memchr>
 801496e:	2800      	cmp	r0, #0
 8014970:	d038      	beq.n	80149e4 <_svfiprintf_r+0x1d8>
 8014972:	4b23      	ldr	r3, [pc, #140]	; (8014a00 <_svfiprintf_r+0x1f4>)
 8014974:	bb1b      	cbnz	r3, 80149be <_svfiprintf_r+0x1b2>
 8014976:	9b03      	ldr	r3, [sp, #12]
 8014978:	3307      	adds	r3, #7
 801497a:	f023 0307 	bic.w	r3, r3, #7
 801497e:	3308      	adds	r3, #8
 8014980:	9303      	str	r3, [sp, #12]
 8014982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014984:	4433      	add	r3, r6
 8014986:	9309      	str	r3, [sp, #36]	; 0x24
 8014988:	e767      	b.n	801485a <_svfiprintf_r+0x4e>
 801498a:	fb0c 3202 	mla	r2, ip, r2, r3
 801498e:	460c      	mov	r4, r1
 8014990:	2001      	movs	r0, #1
 8014992:	e7a5      	b.n	80148e0 <_svfiprintf_r+0xd4>
 8014994:	2300      	movs	r3, #0
 8014996:	3401      	adds	r4, #1
 8014998:	9305      	str	r3, [sp, #20]
 801499a:	4619      	mov	r1, r3
 801499c:	f04f 0c0a 	mov.w	ip, #10
 80149a0:	4620      	mov	r0, r4
 80149a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80149a6:	3a30      	subs	r2, #48	; 0x30
 80149a8:	2a09      	cmp	r2, #9
 80149aa:	d903      	bls.n	80149b4 <_svfiprintf_r+0x1a8>
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d0c5      	beq.n	801493c <_svfiprintf_r+0x130>
 80149b0:	9105      	str	r1, [sp, #20]
 80149b2:	e7c3      	b.n	801493c <_svfiprintf_r+0x130>
 80149b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80149b8:	4604      	mov	r4, r0
 80149ba:	2301      	movs	r3, #1
 80149bc:	e7f0      	b.n	80149a0 <_svfiprintf_r+0x194>
 80149be:	ab03      	add	r3, sp, #12
 80149c0:	9300      	str	r3, [sp, #0]
 80149c2:	462a      	mov	r2, r5
 80149c4:	4b0f      	ldr	r3, [pc, #60]	; (8014a04 <_svfiprintf_r+0x1f8>)
 80149c6:	a904      	add	r1, sp, #16
 80149c8:	4638      	mov	r0, r7
 80149ca:	f7fd fd01 	bl	80123d0 <_printf_float>
 80149ce:	1c42      	adds	r2, r0, #1
 80149d0:	4606      	mov	r6, r0
 80149d2:	d1d6      	bne.n	8014982 <_svfiprintf_r+0x176>
 80149d4:	89ab      	ldrh	r3, [r5, #12]
 80149d6:	065b      	lsls	r3, r3, #25
 80149d8:	f53f af2c 	bmi.w	8014834 <_svfiprintf_r+0x28>
 80149dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80149de:	b01d      	add	sp, #116	; 0x74
 80149e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149e4:	ab03      	add	r3, sp, #12
 80149e6:	9300      	str	r3, [sp, #0]
 80149e8:	462a      	mov	r2, r5
 80149ea:	4b06      	ldr	r3, [pc, #24]	; (8014a04 <_svfiprintf_r+0x1f8>)
 80149ec:	a904      	add	r1, sp, #16
 80149ee:	4638      	mov	r0, r7
 80149f0:	f7fd ff92 	bl	8012918 <_printf_i>
 80149f4:	e7eb      	b.n	80149ce <_svfiprintf_r+0x1c2>
 80149f6:	bf00      	nop
 80149f8:	08019f94 	.word	0x08019f94
 80149fc:	08019f9e 	.word	0x08019f9e
 8014a00:	080123d1 	.word	0x080123d1
 8014a04:	08014757 	.word	0x08014757
 8014a08:	08019f9a 	.word	0x08019f9a

08014a0c <__sfputc_r>:
 8014a0c:	6893      	ldr	r3, [r2, #8]
 8014a0e:	3b01      	subs	r3, #1
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	b410      	push	{r4}
 8014a14:	6093      	str	r3, [r2, #8]
 8014a16:	da08      	bge.n	8014a2a <__sfputc_r+0x1e>
 8014a18:	6994      	ldr	r4, [r2, #24]
 8014a1a:	42a3      	cmp	r3, r4
 8014a1c:	db01      	blt.n	8014a22 <__sfputc_r+0x16>
 8014a1e:	290a      	cmp	r1, #10
 8014a20:	d103      	bne.n	8014a2a <__sfputc_r+0x1e>
 8014a22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a26:	f7fe b971 	b.w	8012d0c <__swbuf_r>
 8014a2a:	6813      	ldr	r3, [r2, #0]
 8014a2c:	1c58      	adds	r0, r3, #1
 8014a2e:	6010      	str	r0, [r2, #0]
 8014a30:	7019      	strb	r1, [r3, #0]
 8014a32:	4608      	mov	r0, r1
 8014a34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a38:	4770      	bx	lr

08014a3a <__sfputs_r>:
 8014a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a3c:	4606      	mov	r6, r0
 8014a3e:	460f      	mov	r7, r1
 8014a40:	4614      	mov	r4, r2
 8014a42:	18d5      	adds	r5, r2, r3
 8014a44:	42ac      	cmp	r4, r5
 8014a46:	d101      	bne.n	8014a4c <__sfputs_r+0x12>
 8014a48:	2000      	movs	r0, #0
 8014a4a:	e007      	b.n	8014a5c <__sfputs_r+0x22>
 8014a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a50:	463a      	mov	r2, r7
 8014a52:	4630      	mov	r0, r6
 8014a54:	f7ff ffda 	bl	8014a0c <__sfputc_r>
 8014a58:	1c43      	adds	r3, r0, #1
 8014a5a:	d1f3      	bne.n	8014a44 <__sfputs_r+0xa>
 8014a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014a60 <_vfiprintf_r>:
 8014a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a64:	460d      	mov	r5, r1
 8014a66:	b09d      	sub	sp, #116	; 0x74
 8014a68:	4614      	mov	r4, r2
 8014a6a:	4698      	mov	r8, r3
 8014a6c:	4606      	mov	r6, r0
 8014a6e:	b118      	cbz	r0, 8014a78 <_vfiprintf_r+0x18>
 8014a70:	6983      	ldr	r3, [r0, #24]
 8014a72:	b90b      	cbnz	r3, 8014a78 <_vfiprintf_r+0x18>
 8014a74:	f7ff f9ba 	bl	8013dec <__sinit>
 8014a78:	4b89      	ldr	r3, [pc, #548]	; (8014ca0 <_vfiprintf_r+0x240>)
 8014a7a:	429d      	cmp	r5, r3
 8014a7c:	d11b      	bne.n	8014ab6 <_vfiprintf_r+0x56>
 8014a7e:	6875      	ldr	r5, [r6, #4]
 8014a80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a82:	07d9      	lsls	r1, r3, #31
 8014a84:	d405      	bmi.n	8014a92 <_vfiprintf_r+0x32>
 8014a86:	89ab      	ldrh	r3, [r5, #12]
 8014a88:	059a      	lsls	r2, r3, #22
 8014a8a:	d402      	bmi.n	8014a92 <_vfiprintf_r+0x32>
 8014a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a8e:	f7ff fa62 	bl	8013f56 <__retarget_lock_acquire_recursive>
 8014a92:	89ab      	ldrh	r3, [r5, #12]
 8014a94:	071b      	lsls	r3, r3, #28
 8014a96:	d501      	bpl.n	8014a9c <_vfiprintf_r+0x3c>
 8014a98:	692b      	ldr	r3, [r5, #16]
 8014a9a:	b9eb      	cbnz	r3, 8014ad8 <_vfiprintf_r+0x78>
 8014a9c:	4629      	mov	r1, r5
 8014a9e:	4630      	mov	r0, r6
 8014aa0:	f7fe f986 	bl	8012db0 <__swsetup_r>
 8014aa4:	b1c0      	cbz	r0, 8014ad8 <_vfiprintf_r+0x78>
 8014aa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014aa8:	07dc      	lsls	r4, r3, #31
 8014aaa:	d50e      	bpl.n	8014aca <_vfiprintf_r+0x6a>
 8014aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ab0:	b01d      	add	sp, #116	; 0x74
 8014ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ab6:	4b7b      	ldr	r3, [pc, #492]	; (8014ca4 <_vfiprintf_r+0x244>)
 8014ab8:	429d      	cmp	r5, r3
 8014aba:	d101      	bne.n	8014ac0 <_vfiprintf_r+0x60>
 8014abc:	68b5      	ldr	r5, [r6, #8]
 8014abe:	e7df      	b.n	8014a80 <_vfiprintf_r+0x20>
 8014ac0:	4b79      	ldr	r3, [pc, #484]	; (8014ca8 <_vfiprintf_r+0x248>)
 8014ac2:	429d      	cmp	r5, r3
 8014ac4:	bf08      	it	eq
 8014ac6:	68f5      	ldreq	r5, [r6, #12]
 8014ac8:	e7da      	b.n	8014a80 <_vfiprintf_r+0x20>
 8014aca:	89ab      	ldrh	r3, [r5, #12]
 8014acc:	0598      	lsls	r0, r3, #22
 8014ace:	d4ed      	bmi.n	8014aac <_vfiprintf_r+0x4c>
 8014ad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014ad2:	f7ff fa41 	bl	8013f58 <__retarget_lock_release_recursive>
 8014ad6:	e7e9      	b.n	8014aac <_vfiprintf_r+0x4c>
 8014ad8:	2300      	movs	r3, #0
 8014ada:	9309      	str	r3, [sp, #36]	; 0x24
 8014adc:	2320      	movs	r3, #32
 8014ade:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014ae2:	f8cd 800c 	str.w	r8, [sp, #12]
 8014ae6:	2330      	movs	r3, #48	; 0x30
 8014ae8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014cac <_vfiprintf_r+0x24c>
 8014aec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014af0:	f04f 0901 	mov.w	r9, #1
 8014af4:	4623      	mov	r3, r4
 8014af6:	469a      	mov	sl, r3
 8014af8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014afc:	b10a      	cbz	r2, 8014b02 <_vfiprintf_r+0xa2>
 8014afe:	2a25      	cmp	r2, #37	; 0x25
 8014b00:	d1f9      	bne.n	8014af6 <_vfiprintf_r+0x96>
 8014b02:	ebba 0b04 	subs.w	fp, sl, r4
 8014b06:	d00b      	beq.n	8014b20 <_vfiprintf_r+0xc0>
 8014b08:	465b      	mov	r3, fp
 8014b0a:	4622      	mov	r2, r4
 8014b0c:	4629      	mov	r1, r5
 8014b0e:	4630      	mov	r0, r6
 8014b10:	f7ff ff93 	bl	8014a3a <__sfputs_r>
 8014b14:	3001      	adds	r0, #1
 8014b16:	f000 80aa 	beq.w	8014c6e <_vfiprintf_r+0x20e>
 8014b1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b1c:	445a      	add	r2, fp
 8014b1e:	9209      	str	r2, [sp, #36]	; 0x24
 8014b20:	f89a 3000 	ldrb.w	r3, [sl]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	f000 80a2 	beq.w	8014c6e <_vfiprintf_r+0x20e>
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014b30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b34:	f10a 0a01 	add.w	sl, sl, #1
 8014b38:	9304      	str	r3, [sp, #16]
 8014b3a:	9307      	str	r3, [sp, #28]
 8014b3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014b40:	931a      	str	r3, [sp, #104]	; 0x68
 8014b42:	4654      	mov	r4, sl
 8014b44:	2205      	movs	r2, #5
 8014b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b4a:	4858      	ldr	r0, [pc, #352]	; (8014cac <_vfiprintf_r+0x24c>)
 8014b4c:	f7eb fb68 	bl	8000220 <memchr>
 8014b50:	9a04      	ldr	r2, [sp, #16]
 8014b52:	b9d8      	cbnz	r0, 8014b8c <_vfiprintf_r+0x12c>
 8014b54:	06d1      	lsls	r1, r2, #27
 8014b56:	bf44      	itt	mi
 8014b58:	2320      	movmi	r3, #32
 8014b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b5e:	0713      	lsls	r3, r2, #28
 8014b60:	bf44      	itt	mi
 8014b62:	232b      	movmi	r3, #43	; 0x2b
 8014b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b68:	f89a 3000 	ldrb.w	r3, [sl]
 8014b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8014b6e:	d015      	beq.n	8014b9c <_vfiprintf_r+0x13c>
 8014b70:	9a07      	ldr	r2, [sp, #28]
 8014b72:	4654      	mov	r4, sl
 8014b74:	2000      	movs	r0, #0
 8014b76:	f04f 0c0a 	mov.w	ip, #10
 8014b7a:	4621      	mov	r1, r4
 8014b7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b80:	3b30      	subs	r3, #48	; 0x30
 8014b82:	2b09      	cmp	r3, #9
 8014b84:	d94e      	bls.n	8014c24 <_vfiprintf_r+0x1c4>
 8014b86:	b1b0      	cbz	r0, 8014bb6 <_vfiprintf_r+0x156>
 8014b88:	9207      	str	r2, [sp, #28]
 8014b8a:	e014      	b.n	8014bb6 <_vfiprintf_r+0x156>
 8014b8c:	eba0 0308 	sub.w	r3, r0, r8
 8014b90:	fa09 f303 	lsl.w	r3, r9, r3
 8014b94:	4313      	orrs	r3, r2
 8014b96:	9304      	str	r3, [sp, #16]
 8014b98:	46a2      	mov	sl, r4
 8014b9a:	e7d2      	b.n	8014b42 <_vfiprintf_r+0xe2>
 8014b9c:	9b03      	ldr	r3, [sp, #12]
 8014b9e:	1d19      	adds	r1, r3, #4
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	9103      	str	r1, [sp, #12]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	bfbb      	ittet	lt
 8014ba8:	425b      	neglt	r3, r3
 8014baa:	f042 0202 	orrlt.w	r2, r2, #2
 8014bae:	9307      	strge	r3, [sp, #28]
 8014bb0:	9307      	strlt	r3, [sp, #28]
 8014bb2:	bfb8      	it	lt
 8014bb4:	9204      	strlt	r2, [sp, #16]
 8014bb6:	7823      	ldrb	r3, [r4, #0]
 8014bb8:	2b2e      	cmp	r3, #46	; 0x2e
 8014bba:	d10c      	bne.n	8014bd6 <_vfiprintf_r+0x176>
 8014bbc:	7863      	ldrb	r3, [r4, #1]
 8014bbe:	2b2a      	cmp	r3, #42	; 0x2a
 8014bc0:	d135      	bne.n	8014c2e <_vfiprintf_r+0x1ce>
 8014bc2:	9b03      	ldr	r3, [sp, #12]
 8014bc4:	1d1a      	adds	r2, r3, #4
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	9203      	str	r2, [sp, #12]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	bfb8      	it	lt
 8014bce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014bd2:	3402      	adds	r4, #2
 8014bd4:	9305      	str	r3, [sp, #20]
 8014bd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014cbc <_vfiprintf_r+0x25c>
 8014bda:	7821      	ldrb	r1, [r4, #0]
 8014bdc:	2203      	movs	r2, #3
 8014bde:	4650      	mov	r0, sl
 8014be0:	f7eb fb1e 	bl	8000220 <memchr>
 8014be4:	b140      	cbz	r0, 8014bf8 <_vfiprintf_r+0x198>
 8014be6:	2340      	movs	r3, #64	; 0x40
 8014be8:	eba0 000a 	sub.w	r0, r0, sl
 8014bec:	fa03 f000 	lsl.w	r0, r3, r0
 8014bf0:	9b04      	ldr	r3, [sp, #16]
 8014bf2:	4303      	orrs	r3, r0
 8014bf4:	3401      	adds	r4, #1
 8014bf6:	9304      	str	r3, [sp, #16]
 8014bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bfc:	482c      	ldr	r0, [pc, #176]	; (8014cb0 <_vfiprintf_r+0x250>)
 8014bfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014c02:	2206      	movs	r2, #6
 8014c04:	f7eb fb0c 	bl	8000220 <memchr>
 8014c08:	2800      	cmp	r0, #0
 8014c0a:	d03f      	beq.n	8014c8c <_vfiprintf_r+0x22c>
 8014c0c:	4b29      	ldr	r3, [pc, #164]	; (8014cb4 <_vfiprintf_r+0x254>)
 8014c0e:	bb1b      	cbnz	r3, 8014c58 <_vfiprintf_r+0x1f8>
 8014c10:	9b03      	ldr	r3, [sp, #12]
 8014c12:	3307      	adds	r3, #7
 8014c14:	f023 0307 	bic.w	r3, r3, #7
 8014c18:	3308      	adds	r3, #8
 8014c1a:	9303      	str	r3, [sp, #12]
 8014c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c1e:	443b      	add	r3, r7
 8014c20:	9309      	str	r3, [sp, #36]	; 0x24
 8014c22:	e767      	b.n	8014af4 <_vfiprintf_r+0x94>
 8014c24:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c28:	460c      	mov	r4, r1
 8014c2a:	2001      	movs	r0, #1
 8014c2c:	e7a5      	b.n	8014b7a <_vfiprintf_r+0x11a>
 8014c2e:	2300      	movs	r3, #0
 8014c30:	3401      	adds	r4, #1
 8014c32:	9305      	str	r3, [sp, #20]
 8014c34:	4619      	mov	r1, r3
 8014c36:	f04f 0c0a 	mov.w	ip, #10
 8014c3a:	4620      	mov	r0, r4
 8014c3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c40:	3a30      	subs	r2, #48	; 0x30
 8014c42:	2a09      	cmp	r2, #9
 8014c44:	d903      	bls.n	8014c4e <_vfiprintf_r+0x1ee>
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d0c5      	beq.n	8014bd6 <_vfiprintf_r+0x176>
 8014c4a:	9105      	str	r1, [sp, #20]
 8014c4c:	e7c3      	b.n	8014bd6 <_vfiprintf_r+0x176>
 8014c4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c52:	4604      	mov	r4, r0
 8014c54:	2301      	movs	r3, #1
 8014c56:	e7f0      	b.n	8014c3a <_vfiprintf_r+0x1da>
 8014c58:	ab03      	add	r3, sp, #12
 8014c5a:	9300      	str	r3, [sp, #0]
 8014c5c:	462a      	mov	r2, r5
 8014c5e:	4b16      	ldr	r3, [pc, #88]	; (8014cb8 <_vfiprintf_r+0x258>)
 8014c60:	a904      	add	r1, sp, #16
 8014c62:	4630      	mov	r0, r6
 8014c64:	f7fd fbb4 	bl	80123d0 <_printf_float>
 8014c68:	4607      	mov	r7, r0
 8014c6a:	1c78      	adds	r0, r7, #1
 8014c6c:	d1d6      	bne.n	8014c1c <_vfiprintf_r+0x1bc>
 8014c6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c70:	07d9      	lsls	r1, r3, #31
 8014c72:	d405      	bmi.n	8014c80 <_vfiprintf_r+0x220>
 8014c74:	89ab      	ldrh	r3, [r5, #12]
 8014c76:	059a      	lsls	r2, r3, #22
 8014c78:	d402      	bmi.n	8014c80 <_vfiprintf_r+0x220>
 8014c7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c7c:	f7ff f96c 	bl	8013f58 <__retarget_lock_release_recursive>
 8014c80:	89ab      	ldrh	r3, [r5, #12]
 8014c82:	065b      	lsls	r3, r3, #25
 8014c84:	f53f af12 	bmi.w	8014aac <_vfiprintf_r+0x4c>
 8014c88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c8a:	e711      	b.n	8014ab0 <_vfiprintf_r+0x50>
 8014c8c:	ab03      	add	r3, sp, #12
 8014c8e:	9300      	str	r3, [sp, #0]
 8014c90:	462a      	mov	r2, r5
 8014c92:	4b09      	ldr	r3, [pc, #36]	; (8014cb8 <_vfiprintf_r+0x258>)
 8014c94:	a904      	add	r1, sp, #16
 8014c96:	4630      	mov	r0, r6
 8014c98:	f7fd fe3e 	bl	8012918 <_printf_i>
 8014c9c:	e7e4      	b.n	8014c68 <_vfiprintf_r+0x208>
 8014c9e:	bf00      	nop
 8014ca0:	08019df8 	.word	0x08019df8
 8014ca4:	08019e18 	.word	0x08019e18
 8014ca8:	08019dd8 	.word	0x08019dd8
 8014cac:	08019f94 	.word	0x08019f94
 8014cb0:	08019f9e 	.word	0x08019f9e
 8014cb4:	080123d1 	.word	0x080123d1
 8014cb8:	08014a3b 	.word	0x08014a3b
 8014cbc:	08019f9a 	.word	0x08019f9a

08014cc0 <_putc_r>:
 8014cc0:	b570      	push	{r4, r5, r6, lr}
 8014cc2:	460d      	mov	r5, r1
 8014cc4:	4614      	mov	r4, r2
 8014cc6:	4606      	mov	r6, r0
 8014cc8:	b118      	cbz	r0, 8014cd2 <_putc_r+0x12>
 8014cca:	6983      	ldr	r3, [r0, #24]
 8014ccc:	b90b      	cbnz	r3, 8014cd2 <_putc_r+0x12>
 8014cce:	f7ff f88d 	bl	8013dec <__sinit>
 8014cd2:	4b1c      	ldr	r3, [pc, #112]	; (8014d44 <_putc_r+0x84>)
 8014cd4:	429c      	cmp	r4, r3
 8014cd6:	d124      	bne.n	8014d22 <_putc_r+0x62>
 8014cd8:	6874      	ldr	r4, [r6, #4]
 8014cda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014cdc:	07d8      	lsls	r0, r3, #31
 8014cde:	d405      	bmi.n	8014cec <_putc_r+0x2c>
 8014ce0:	89a3      	ldrh	r3, [r4, #12]
 8014ce2:	0599      	lsls	r1, r3, #22
 8014ce4:	d402      	bmi.n	8014cec <_putc_r+0x2c>
 8014ce6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ce8:	f7ff f935 	bl	8013f56 <__retarget_lock_acquire_recursive>
 8014cec:	68a3      	ldr	r3, [r4, #8]
 8014cee:	3b01      	subs	r3, #1
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	60a3      	str	r3, [r4, #8]
 8014cf4:	da05      	bge.n	8014d02 <_putc_r+0x42>
 8014cf6:	69a2      	ldr	r2, [r4, #24]
 8014cf8:	4293      	cmp	r3, r2
 8014cfa:	db1c      	blt.n	8014d36 <_putc_r+0x76>
 8014cfc:	b2eb      	uxtb	r3, r5
 8014cfe:	2b0a      	cmp	r3, #10
 8014d00:	d019      	beq.n	8014d36 <_putc_r+0x76>
 8014d02:	6823      	ldr	r3, [r4, #0]
 8014d04:	1c5a      	adds	r2, r3, #1
 8014d06:	6022      	str	r2, [r4, #0]
 8014d08:	701d      	strb	r5, [r3, #0]
 8014d0a:	b2ed      	uxtb	r5, r5
 8014d0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014d0e:	07da      	lsls	r2, r3, #31
 8014d10:	d405      	bmi.n	8014d1e <_putc_r+0x5e>
 8014d12:	89a3      	ldrh	r3, [r4, #12]
 8014d14:	059b      	lsls	r3, r3, #22
 8014d16:	d402      	bmi.n	8014d1e <_putc_r+0x5e>
 8014d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014d1a:	f7ff f91d 	bl	8013f58 <__retarget_lock_release_recursive>
 8014d1e:	4628      	mov	r0, r5
 8014d20:	bd70      	pop	{r4, r5, r6, pc}
 8014d22:	4b09      	ldr	r3, [pc, #36]	; (8014d48 <_putc_r+0x88>)
 8014d24:	429c      	cmp	r4, r3
 8014d26:	d101      	bne.n	8014d2c <_putc_r+0x6c>
 8014d28:	68b4      	ldr	r4, [r6, #8]
 8014d2a:	e7d6      	b.n	8014cda <_putc_r+0x1a>
 8014d2c:	4b07      	ldr	r3, [pc, #28]	; (8014d4c <_putc_r+0x8c>)
 8014d2e:	429c      	cmp	r4, r3
 8014d30:	bf08      	it	eq
 8014d32:	68f4      	ldreq	r4, [r6, #12]
 8014d34:	e7d1      	b.n	8014cda <_putc_r+0x1a>
 8014d36:	4629      	mov	r1, r5
 8014d38:	4622      	mov	r2, r4
 8014d3a:	4630      	mov	r0, r6
 8014d3c:	f7fd ffe6 	bl	8012d0c <__swbuf_r>
 8014d40:	4605      	mov	r5, r0
 8014d42:	e7e3      	b.n	8014d0c <_putc_r+0x4c>
 8014d44:	08019df8 	.word	0x08019df8
 8014d48:	08019e18 	.word	0x08019e18
 8014d4c:	08019dd8 	.word	0x08019dd8

08014d50 <__sread>:
 8014d50:	b510      	push	{r4, lr}
 8014d52:	460c      	mov	r4, r1
 8014d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d58:	f000 f8ee 	bl	8014f38 <_read_r>
 8014d5c:	2800      	cmp	r0, #0
 8014d5e:	bfab      	itete	ge
 8014d60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014d62:	89a3      	ldrhlt	r3, [r4, #12]
 8014d64:	181b      	addge	r3, r3, r0
 8014d66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014d6a:	bfac      	ite	ge
 8014d6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8014d6e:	81a3      	strhlt	r3, [r4, #12]
 8014d70:	bd10      	pop	{r4, pc}

08014d72 <__swrite>:
 8014d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d76:	461f      	mov	r7, r3
 8014d78:	898b      	ldrh	r3, [r1, #12]
 8014d7a:	05db      	lsls	r3, r3, #23
 8014d7c:	4605      	mov	r5, r0
 8014d7e:	460c      	mov	r4, r1
 8014d80:	4616      	mov	r6, r2
 8014d82:	d505      	bpl.n	8014d90 <__swrite+0x1e>
 8014d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d88:	2302      	movs	r3, #2
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	f000 f870 	bl	8014e70 <_lseek_r>
 8014d90:	89a3      	ldrh	r3, [r4, #12]
 8014d92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014d9a:	81a3      	strh	r3, [r4, #12]
 8014d9c:	4632      	mov	r2, r6
 8014d9e:	463b      	mov	r3, r7
 8014da0:	4628      	mov	r0, r5
 8014da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014da6:	f000 b817 	b.w	8014dd8 <_write_r>

08014daa <__sseek>:
 8014daa:	b510      	push	{r4, lr}
 8014dac:	460c      	mov	r4, r1
 8014dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014db2:	f000 f85d 	bl	8014e70 <_lseek_r>
 8014db6:	1c43      	adds	r3, r0, #1
 8014db8:	89a3      	ldrh	r3, [r4, #12]
 8014dba:	bf15      	itete	ne
 8014dbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8014dbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014dc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014dc6:	81a3      	strheq	r3, [r4, #12]
 8014dc8:	bf18      	it	ne
 8014dca:	81a3      	strhne	r3, [r4, #12]
 8014dcc:	bd10      	pop	{r4, pc}

08014dce <__sclose>:
 8014dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014dd2:	f000 b81b 	b.w	8014e0c <_close_r>
	...

08014dd8 <_write_r>:
 8014dd8:	b538      	push	{r3, r4, r5, lr}
 8014dda:	4d07      	ldr	r5, [pc, #28]	; (8014df8 <_write_r+0x20>)
 8014ddc:	4604      	mov	r4, r0
 8014dde:	4608      	mov	r0, r1
 8014de0:	4611      	mov	r1, r2
 8014de2:	2200      	movs	r2, #0
 8014de4:	602a      	str	r2, [r5, #0]
 8014de6:	461a      	mov	r2, r3
 8014de8:	f7ee fd95 	bl	8003916 <_write>
 8014dec:	1c43      	adds	r3, r0, #1
 8014dee:	d102      	bne.n	8014df6 <_write_r+0x1e>
 8014df0:	682b      	ldr	r3, [r5, #0]
 8014df2:	b103      	cbz	r3, 8014df6 <_write_r+0x1e>
 8014df4:	6023      	str	r3, [r4, #0]
 8014df6:	bd38      	pop	{r3, r4, r5, pc}
 8014df8:	200413b0 	.word	0x200413b0

08014dfc <abort>:
 8014dfc:	b508      	push	{r3, lr}
 8014dfe:	2006      	movs	r0, #6
 8014e00:	f000 f8d4 	bl	8014fac <raise>
 8014e04:	2001      	movs	r0, #1
 8014e06:	f7ee fd5f 	bl	80038c8 <_exit>
	...

08014e0c <_close_r>:
 8014e0c:	b538      	push	{r3, r4, r5, lr}
 8014e0e:	4d06      	ldr	r5, [pc, #24]	; (8014e28 <_close_r+0x1c>)
 8014e10:	2300      	movs	r3, #0
 8014e12:	4604      	mov	r4, r0
 8014e14:	4608      	mov	r0, r1
 8014e16:	602b      	str	r3, [r5, #0]
 8014e18:	f7ee fd99 	bl	800394e <_close>
 8014e1c:	1c43      	adds	r3, r0, #1
 8014e1e:	d102      	bne.n	8014e26 <_close_r+0x1a>
 8014e20:	682b      	ldr	r3, [r5, #0]
 8014e22:	b103      	cbz	r3, 8014e26 <_close_r+0x1a>
 8014e24:	6023      	str	r3, [r4, #0]
 8014e26:	bd38      	pop	{r3, r4, r5, pc}
 8014e28:	200413b0 	.word	0x200413b0

08014e2c <_fstat_r>:
 8014e2c:	b538      	push	{r3, r4, r5, lr}
 8014e2e:	4d07      	ldr	r5, [pc, #28]	; (8014e4c <_fstat_r+0x20>)
 8014e30:	2300      	movs	r3, #0
 8014e32:	4604      	mov	r4, r0
 8014e34:	4608      	mov	r0, r1
 8014e36:	4611      	mov	r1, r2
 8014e38:	602b      	str	r3, [r5, #0]
 8014e3a:	f7ee fd94 	bl	8003966 <_fstat>
 8014e3e:	1c43      	adds	r3, r0, #1
 8014e40:	d102      	bne.n	8014e48 <_fstat_r+0x1c>
 8014e42:	682b      	ldr	r3, [r5, #0]
 8014e44:	b103      	cbz	r3, 8014e48 <_fstat_r+0x1c>
 8014e46:	6023      	str	r3, [r4, #0]
 8014e48:	bd38      	pop	{r3, r4, r5, pc}
 8014e4a:	bf00      	nop
 8014e4c:	200413b0 	.word	0x200413b0

08014e50 <_isatty_r>:
 8014e50:	b538      	push	{r3, r4, r5, lr}
 8014e52:	4d06      	ldr	r5, [pc, #24]	; (8014e6c <_isatty_r+0x1c>)
 8014e54:	2300      	movs	r3, #0
 8014e56:	4604      	mov	r4, r0
 8014e58:	4608      	mov	r0, r1
 8014e5a:	602b      	str	r3, [r5, #0]
 8014e5c:	f7ee fd93 	bl	8003986 <_isatty>
 8014e60:	1c43      	adds	r3, r0, #1
 8014e62:	d102      	bne.n	8014e6a <_isatty_r+0x1a>
 8014e64:	682b      	ldr	r3, [r5, #0]
 8014e66:	b103      	cbz	r3, 8014e6a <_isatty_r+0x1a>
 8014e68:	6023      	str	r3, [r4, #0]
 8014e6a:	bd38      	pop	{r3, r4, r5, pc}
 8014e6c:	200413b0 	.word	0x200413b0

08014e70 <_lseek_r>:
 8014e70:	b538      	push	{r3, r4, r5, lr}
 8014e72:	4d07      	ldr	r5, [pc, #28]	; (8014e90 <_lseek_r+0x20>)
 8014e74:	4604      	mov	r4, r0
 8014e76:	4608      	mov	r0, r1
 8014e78:	4611      	mov	r1, r2
 8014e7a:	2200      	movs	r2, #0
 8014e7c:	602a      	str	r2, [r5, #0]
 8014e7e:	461a      	mov	r2, r3
 8014e80:	f7ee fd8c 	bl	800399c <_lseek>
 8014e84:	1c43      	adds	r3, r0, #1
 8014e86:	d102      	bne.n	8014e8e <_lseek_r+0x1e>
 8014e88:	682b      	ldr	r3, [r5, #0]
 8014e8a:	b103      	cbz	r3, 8014e8e <_lseek_r+0x1e>
 8014e8c:	6023      	str	r3, [r4, #0]
 8014e8e:	bd38      	pop	{r3, r4, r5, pc}
 8014e90:	200413b0 	.word	0x200413b0

08014e94 <__ascii_mbtowc>:
 8014e94:	b082      	sub	sp, #8
 8014e96:	b901      	cbnz	r1, 8014e9a <__ascii_mbtowc+0x6>
 8014e98:	a901      	add	r1, sp, #4
 8014e9a:	b142      	cbz	r2, 8014eae <__ascii_mbtowc+0x1a>
 8014e9c:	b14b      	cbz	r3, 8014eb2 <__ascii_mbtowc+0x1e>
 8014e9e:	7813      	ldrb	r3, [r2, #0]
 8014ea0:	600b      	str	r3, [r1, #0]
 8014ea2:	7812      	ldrb	r2, [r2, #0]
 8014ea4:	1e10      	subs	r0, r2, #0
 8014ea6:	bf18      	it	ne
 8014ea8:	2001      	movne	r0, #1
 8014eaa:	b002      	add	sp, #8
 8014eac:	4770      	bx	lr
 8014eae:	4610      	mov	r0, r2
 8014eb0:	e7fb      	b.n	8014eaa <__ascii_mbtowc+0x16>
 8014eb2:	f06f 0001 	mvn.w	r0, #1
 8014eb6:	e7f8      	b.n	8014eaa <__ascii_mbtowc+0x16>

08014eb8 <memmove>:
 8014eb8:	4288      	cmp	r0, r1
 8014eba:	b510      	push	{r4, lr}
 8014ebc:	eb01 0402 	add.w	r4, r1, r2
 8014ec0:	d902      	bls.n	8014ec8 <memmove+0x10>
 8014ec2:	4284      	cmp	r4, r0
 8014ec4:	4623      	mov	r3, r4
 8014ec6:	d807      	bhi.n	8014ed8 <memmove+0x20>
 8014ec8:	1e43      	subs	r3, r0, #1
 8014eca:	42a1      	cmp	r1, r4
 8014ecc:	d008      	beq.n	8014ee0 <memmove+0x28>
 8014ece:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014ed2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014ed6:	e7f8      	b.n	8014eca <memmove+0x12>
 8014ed8:	4402      	add	r2, r0
 8014eda:	4601      	mov	r1, r0
 8014edc:	428a      	cmp	r2, r1
 8014ede:	d100      	bne.n	8014ee2 <memmove+0x2a>
 8014ee0:	bd10      	pop	{r4, pc}
 8014ee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ee6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014eea:	e7f7      	b.n	8014edc <memmove+0x24>

08014eec <_realloc_r>:
 8014eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014eee:	4607      	mov	r7, r0
 8014ef0:	4614      	mov	r4, r2
 8014ef2:	460e      	mov	r6, r1
 8014ef4:	b921      	cbnz	r1, 8014f00 <_realloc_r+0x14>
 8014ef6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014efa:	4611      	mov	r1, r2
 8014efc:	f7fd b96e 	b.w	80121dc <_malloc_r>
 8014f00:	b922      	cbnz	r2, 8014f0c <_realloc_r+0x20>
 8014f02:	f7fd f91b 	bl	801213c <_free_r>
 8014f06:	4625      	mov	r5, r4
 8014f08:	4628      	mov	r0, r5
 8014f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f0c:	f000 f877 	bl	8014ffe <_malloc_usable_size_r>
 8014f10:	42a0      	cmp	r0, r4
 8014f12:	d20f      	bcs.n	8014f34 <_realloc_r+0x48>
 8014f14:	4621      	mov	r1, r4
 8014f16:	4638      	mov	r0, r7
 8014f18:	f7fd f960 	bl	80121dc <_malloc_r>
 8014f1c:	4605      	mov	r5, r0
 8014f1e:	2800      	cmp	r0, #0
 8014f20:	d0f2      	beq.n	8014f08 <_realloc_r+0x1c>
 8014f22:	4631      	mov	r1, r6
 8014f24:	4622      	mov	r2, r4
 8014f26:	f7fd f8f3 	bl	8012110 <memcpy>
 8014f2a:	4631      	mov	r1, r6
 8014f2c:	4638      	mov	r0, r7
 8014f2e:	f7fd f905 	bl	801213c <_free_r>
 8014f32:	e7e9      	b.n	8014f08 <_realloc_r+0x1c>
 8014f34:	4635      	mov	r5, r6
 8014f36:	e7e7      	b.n	8014f08 <_realloc_r+0x1c>

08014f38 <_read_r>:
 8014f38:	b538      	push	{r3, r4, r5, lr}
 8014f3a:	4d07      	ldr	r5, [pc, #28]	; (8014f58 <_read_r+0x20>)
 8014f3c:	4604      	mov	r4, r0
 8014f3e:	4608      	mov	r0, r1
 8014f40:	4611      	mov	r1, r2
 8014f42:	2200      	movs	r2, #0
 8014f44:	602a      	str	r2, [r5, #0]
 8014f46:	461a      	mov	r2, r3
 8014f48:	f7ee fcc8 	bl	80038dc <_read>
 8014f4c:	1c43      	adds	r3, r0, #1
 8014f4e:	d102      	bne.n	8014f56 <_read_r+0x1e>
 8014f50:	682b      	ldr	r3, [r5, #0]
 8014f52:	b103      	cbz	r3, 8014f56 <_read_r+0x1e>
 8014f54:	6023      	str	r3, [r4, #0]
 8014f56:	bd38      	pop	{r3, r4, r5, pc}
 8014f58:	200413b0 	.word	0x200413b0

08014f5c <_raise_r>:
 8014f5c:	291f      	cmp	r1, #31
 8014f5e:	b538      	push	{r3, r4, r5, lr}
 8014f60:	4604      	mov	r4, r0
 8014f62:	460d      	mov	r5, r1
 8014f64:	d904      	bls.n	8014f70 <_raise_r+0x14>
 8014f66:	2316      	movs	r3, #22
 8014f68:	6003      	str	r3, [r0, #0]
 8014f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f6e:	bd38      	pop	{r3, r4, r5, pc}
 8014f70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014f72:	b112      	cbz	r2, 8014f7a <_raise_r+0x1e>
 8014f74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014f78:	b94b      	cbnz	r3, 8014f8e <_raise_r+0x32>
 8014f7a:	4620      	mov	r0, r4
 8014f7c:	f000 f830 	bl	8014fe0 <_getpid_r>
 8014f80:	462a      	mov	r2, r5
 8014f82:	4601      	mov	r1, r0
 8014f84:	4620      	mov	r0, r4
 8014f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f8a:	f000 b817 	b.w	8014fbc <_kill_r>
 8014f8e:	2b01      	cmp	r3, #1
 8014f90:	d00a      	beq.n	8014fa8 <_raise_r+0x4c>
 8014f92:	1c59      	adds	r1, r3, #1
 8014f94:	d103      	bne.n	8014f9e <_raise_r+0x42>
 8014f96:	2316      	movs	r3, #22
 8014f98:	6003      	str	r3, [r0, #0]
 8014f9a:	2001      	movs	r0, #1
 8014f9c:	e7e7      	b.n	8014f6e <_raise_r+0x12>
 8014f9e:	2400      	movs	r4, #0
 8014fa0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014fa4:	4628      	mov	r0, r5
 8014fa6:	4798      	blx	r3
 8014fa8:	2000      	movs	r0, #0
 8014faa:	e7e0      	b.n	8014f6e <_raise_r+0x12>

08014fac <raise>:
 8014fac:	4b02      	ldr	r3, [pc, #8]	; (8014fb8 <raise+0xc>)
 8014fae:	4601      	mov	r1, r0
 8014fb0:	6818      	ldr	r0, [r3, #0]
 8014fb2:	f7ff bfd3 	b.w	8014f5c <_raise_r>
 8014fb6:	bf00      	nop
 8014fb8:	20000018 	.word	0x20000018

08014fbc <_kill_r>:
 8014fbc:	b538      	push	{r3, r4, r5, lr}
 8014fbe:	4d07      	ldr	r5, [pc, #28]	; (8014fdc <_kill_r+0x20>)
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	4604      	mov	r4, r0
 8014fc4:	4608      	mov	r0, r1
 8014fc6:	4611      	mov	r1, r2
 8014fc8:	602b      	str	r3, [r5, #0]
 8014fca:	f7ee fc6d 	bl	80038a8 <_kill>
 8014fce:	1c43      	adds	r3, r0, #1
 8014fd0:	d102      	bne.n	8014fd8 <_kill_r+0x1c>
 8014fd2:	682b      	ldr	r3, [r5, #0]
 8014fd4:	b103      	cbz	r3, 8014fd8 <_kill_r+0x1c>
 8014fd6:	6023      	str	r3, [r4, #0]
 8014fd8:	bd38      	pop	{r3, r4, r5, pc}
 8014fda:	bf00      	nop
 8014fdc:	200413b0 	.word	0x200413b0

08014fe0 <_getpid_r>:
 8014fe0:	f7ee bc5a 	b.w	8003898 <_getpid>

08014fe4 <__ascii_wctomb>:
 8014fe4:	b149      	cbz	r1, 8014ffa <__ascii_wctomb+0x16>
 8014fe6:	2aff      	cmp	r2, #255	; 0xff
 8014fe8:	bf85      	ittet	hi
 8014fea:	238a      	movhi	r3, #138	; 0x8a
 8014fec:	6003      	strhi	r3, [r0, #0]
 8014fee:	700a      	strbls	r2, [r1, #0]
 8014ff0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8014ff4:	bf98      	it	ls
 8014ff6:	2001      	movls	r0, #1
 8014ff8:	4770      	bx	lr
 8014ffa:	4608      	mov	r0, r1
 8014ffc:	4770      	bx	lr

08014ffe <_malloc_usable_size_r>:
 8014ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015002:	1f18      	subs	r0, r3, #4
 8015004:	2b00      	cmp	r3, #0
 8015006:	bfbc      	itt	lt
 8015008:	580b      	ldrlt	r3, [r1, r0]
 801500a:	18c0      	addlt	r0, r0, r3
 801500c:	4770      	bx	lr
	...

08015010 <_init>:
 8015010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015012:	bf00      	nop
 8015014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015016:	bc08      	pop	{r3}
 8015018:	469e      	mov	lr, r3
 801501a:	4770      	bx	lr

0801501c <_fini>:
 801501c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801501e:	bf00      	nop
 8015020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015022:	bc08      	pop	{r3}
 8015024:	469e      	mov	lr, r3
 8015026:	4770      	bx	lr
