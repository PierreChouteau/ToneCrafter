
test-cubeai-from-cubemx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000160b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000360c  08016288  08016288  00026288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019894  08019894  00030954  2**0
                  CONTENTS
  4 .ARM          00000008  08019894  08019894  00029894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801989c  0801989c  00030954  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801989c  0801989c  0002989c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080198a0  080198a0  000298a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000954  20000000  080198a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d4  20000954  0801a1f8  00030954  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20001d28  0801a1f8  00031d28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030954  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a55a  00000000  00000000  00030984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ee4  00000000  00000000  0006aede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002938  00000000  00000000  00071dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002668  00000000  00000000  00074700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034eb4  00000000  00000000  00076d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035d67  00000000  00000000  000abc1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012d8f5  00000000  00000000  000e1983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  0020f278  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c324  00000000  00000000  0020f348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0021b66c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0021b738  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000954 	.word	0x20000954
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016270 	.word	0x08016270

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000958 	.word	0x20000958
 800020c:	08016270 	.word	0x08016270

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f84:	f3bf 8f4f 	dsb	sy
}
 8000f88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f8a:	f3bf 8f6f 	isb	sy
}
 8000f8e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <SCB_EnableICache+0x48>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f98:	f3bf 8f4f 	dsb	sy
}
 8000f9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f9e:	f3bf 8f6f 	isb	sy
}
 8000fa2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <SCB_EnableICache+0x48>)
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <SCB_EnableICache+0x48>)
 8000faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb0:	f3bf 8f4f 	dsb	sy
}
 8000fb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fb6:	f3bf 8f6f 	isb	sy
}
 8000fba:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <SCB_EnableDCache+0x84>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000fda:	f3bf 8f4f 	dsb	sy
}
 8000fde:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <SCB_EnableDCache+0x84>)
 8000fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fe6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	0b5b      	lsrs	r3, r3, #13
 8000fec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ff0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	08db      	lsrs	r3, r3, #3
 8000ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ffa:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	015a      	lsls	r2, r3, #5
 8001000:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001004:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800100a:	4911      	ldr	r1, [pc, #68]	; (8001050 <SCB_EnableDCache+0x84>)
 800100c:	4313      	orrs	r3, r2
 800100e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1e5a      	subs	r2, r3, #1
 8001016:	60ba      	str	r2, [r7, #8]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1ef      	bne.n	8000ffc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	60fa      	str	r2, [r7, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1e5      	bne.n	8000ff2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001026:	f3bf 8f4f 	dsb	sy
}
 800102a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <SCB_EnableDCache+0x84>)
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	4a07      	ldr	r2, [pc, #28]	; (8001050 <SCB_EnableDCache+0x84>)
 8001032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001036:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001038:	f3bf 8f4f 	dsb	sy
}
 800103c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800103e:	f3bf 8f6f 	isb	sy
}
 8001042:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00
 8001054:	00000000 	.word	0x00000000

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	f5ad 6db6 	sub.w	sp, sp, #1456	; 0x5b0
 800105e:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  char buf[50];
  int buf_len = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_TONECRAFTER_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_TONECRAFTER_OUT_1_SIZE_BYTES];

  // Pointer to our model
  ai_handle tonecrafter = AI_HANDLE_NULL;
 8001066:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]

  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  ai_buffer ai_input[AI_TONECRAFTER_IN_NUM] = AI_TONECRAFTER_IN;
 800106e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001072:	4ab5      	ldr	r2, [pc, #724]	; (8001348 <main+0x2f0>)
 8001074:	461c      	mov	r4, r3
 8001076:	4615      	mov	r5, r2
 8001078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800107c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001080:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_TONECRAFTER_OUT_NUM] = AI_TONECRAFTER_OUT;
 8001084:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001088:	4ab0      	ldr	r2, [pc, #704]	; (800134c <main+0x2f4>)
 800108a:	461c      	mov	r4, r3
 800108c:	4615      	mov	r5, r2
 800108e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001092:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001096:	e884 0003 	stmia.w	r4, {r0, r1}

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {
 800109a:	463b      	mov	r3, r7
 800109c:	4aac      	ldr	r2, [pc, #688]	; (8001350 <main+0x2f8>)
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	463b      	mov	r3, r7
 80010a2:	2201      	movs	r2, #1
 80010a4:	809a      	strh	r2, [r3, #4]
 80010a6:	463b      	mov	r3, r7
 80010a8:	2201      	movs	r2, #1
 80010aa:	80da      	strh	r2, [r3, #6]
 80010ac:	463b      	mov	r3, r7
 80010ae:	2201      	movs	r2, #1
 80010b0:	811a      	strh	r2, [r3, #8]
 80010b2:	463b      	mov	r3, r7
 80010b4:	f243 02e4 	movw	r2, #12516	; 0x30e4
 80010b8:	60da      	str	r2, [r3, #12]
    AI_TONECRAFTER_DATA_WEIGHTS(ai_tonecrafter_data_weights_get()),
 80010ba:	f00e ffd3 	bl	8010064 <ai_tonecrafter_data_weights_get>
 80010be:	4602      	mov	r2, r0
  ai_network_params ai_params = {
 80010c0:	463b      	mov	r3, r7
 80010c2:	611a      	str	r2, [r3, #16]
 80010c4:	463b      	mov	r3, r7
 80010c6:	2200      	movs	r2, #0
 80010c8:	615a      	str	r2, [r3, #20]
 80010ca:	463b      	mov	r3, r7
 80010cc:	4aa1      	ldr	r2, [pc, #644]	; (8001354 <main+0x2fc>)
 80010ce:	619a      	str	r2, [r3, #24]
 80010d0:	463b      	mov	r3, r7
 80010d2:	2201      	movs	r2, #1
 80010d4:	839a      	strh	r2, [r3, #28]
 80010d6:	463b      	mov	r3, r7
 80010d8:	2201      	movs	r2, #1
 80010da:	83da      	strh	r2, [r3, #30]
 80010dc:	463b      	mov	r3, r7
 80010de:	2201      	movs	r2, #1
 80010e0:	841a      	strh	r2, [r3, #32]
 80010e2:	463b      	mov	r3, r7
 80010e4:	f44f 7244 	mov.w	r2, #784	; 0x310
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24
 80010ea:	463b      	mov	r3, r7
 80010ec:	f507 7212 	add.w	r2, r7, #584	; 0x248
 80010f0:	629a      	str	r2, [r3, #40]	; 0x28
 80010f2:	463b      	mov	r3, r7
 80010f4:	2200      	movs	r2, #0
 80010f6:	62da      	str	r2, [r3, #44]	; 0x2c
    AI_TONECRAFTER_DATA_ACTIVATIONS(activations)
  };


  // Set pointers wrapper structs to our data buffers
  ai_input[0].n_batches = 1;
 80010f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010fc:	2201      	movs	r2, #1
 80010fe:	809a      	strh	r2, [r3, #4]
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001100:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001104:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001108:	611a      	str	r2, [r3, #16]
  ai_output[0].n_batches = 1;
 800110a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800110e:	2201      	movs	r2, #1
 8001110:	809a      	strh	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001112:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001116:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800111a:	611a      	str	r2, [r3, #16]

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800111c:	f7ff ff30 	bl	8000f80 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001120:	f7ff ff54 	bl	8000fcc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001124:	f002 fa6f 	bl	8003606 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001128:	f000 f926 	bl	8001378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112c:	f001 f8da 	bl	80022e4 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001130:	f000 f9e2 	bl	80014f8 <MX_ADC3_Init>
  MX_CRC_Init();
 8001134:	f000 fa32 	bl	800159c <MX_CRC_Init>
  MX_DCMI_Init();
 8001138:	f000 fa52 	bl	80015e0 <MX_DCMI_Init>
  MX_DMA2D_Init();
 800113c:	f000 fa84 	bl	8001648 <MX_DMA2D_Init>
  // MX_ETH_Init();
  MX_FMC_Init();
 8001140:	f001 f880 	bl	8002244 <MX_FMC_Init>
  MX_I2C1_Init();
 8001144:	f000 fab2 	bl	80016ac <MX_I2C1_Init>
  MX_I2C3_Init();
 8001148:	f000 faf0 	bl	800172c <MX_I2C3_Init>
  MX_LTDC_Init();
 800114c:	f000 fb2e 	bl	80017ac <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001150:	f000 fbae 	bl	80018b0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001154:	f000 fbd8 	bl	8001908 <MX_RTC_Init>
  MX_SAI2_Init();
 8001158:	f000 fc7c 	bl	8001a54 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 800115c:	f000 fd22 	bl	8001ba4 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001160:	f000 fd40 	bl	8001be4 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 8001164:	f000 fd6e 	bl	8001c44 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001168:	f000 fe18 	bl	8001d9c <MX_TIM2_Init>
  MX_TIM3_Init();
 800116c:	f000 fe8c 	bl	8001e88 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001170:	f000 ff02 	bl	8001f78 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001174:	f000 ff78 	bl	8002068 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001178:	f000 ffca 	bl	8002110 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800117c:	f001 f802 	bl	8002184 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001180:	f001 f830 	bl	80021e4 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001184:	f00c fa10 	bl	800d5a8 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001188:	f00e fafc 	bl	800f784 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

    // Start timer/counter
    HAL_TIM_Base_Start(&htim12);
 800118c:	4872      	ldr	r0, [pc, #456]	; (8001358 <main+0x300>)
 800118e:	f009 f869 	bl	800a264 <HAL_TIM_Base_Start>

    // Greetings!
    buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 8001192:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 8001196:	4971      	ldr	r1, [pc, #452]	; (800135c <main+0x304>)
 8001198:	4618      	mov	r0, r3
 800119a:	f012 fc15 	bl	80139c8 <siprintf>
 800119e:	f8c7 05a0 	str.w	r0, [r7, #1440]	; 0x5a0
    HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 80011a2:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	f207 515c 	addw	r1, r7, #1372	; 0x55c
 80011ac:	2364      	movs	r3, #100	; 0x64
 80011ae:	486c      	ldr	r0, [pc, #432]	; (8001360 <main+0x308>)
 80011b0:	f009 fff2 	bl	800b198 <HAL_UART_Transmit>

    // Create instance of neural network
    ai_err = ai_tonecrafter_create(&tonecrafter, AI_TONECRAFTER_DATA_CONFIG);
 80011b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f00e feec 	bl	800ff98 <ai_tonecrafter_create>
 80011c0:	4603      	mov	r3, r0
 80011c2:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    if (ai_err.type != AI_ERROR_NONE)
 80011c6:	f897 3558 	ldrb.w	r3, [r7, #1368]	; 0x558
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d011      	beq.n	80011f2 <main+0x19a>
    {
      buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 80011ce:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 80011d2:	4964      	ldr	r1, [pc, #400]	; (8001364 <main+0x30c>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f012 fbf7 	bl	80139c8 <siprintf>
 80011da:	f8c7 05a0 	str.w	r0, [r7, #1440]	; 0x5a0
      HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 80011de:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	f207 515c 	addw	r1, r7, #1372	; 0x55c
 80011e8:	2364      	movs	r3, #100	; 0x64
 80011ea:	485d      	ldr	r0, [pc, #372]	; (8001360 <main+0x308>)
 80011ec:	f009 ffd4 	bl	800b198 <HAL_UART_Transmit>
      while(1);
 80011f0:	e7fe      	b.n	80011f0 <main+0x198>
    }

    // Initialize neural network
    if (!ai_tonecrafter_init(tonecrafter, &ai_params))
 80011f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	463a      	mov	r2, r7
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f00e fee1 	bl	800ffc4 <ai_tonecrafter_init>
 8001202:	4603      	mov	r3, r0
 8001204:	f083 0301 	eor.w	r3, r3, #1
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d011      	beq.n	8001232 <main+0x1da>
    {
      buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 800120e:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 8001212:	4955      	ldr	r1, [pc, #340]	; (8001368 <main+0x310>)
 8001214:	4618      	mov	r0, r3
 8001216:	f012 fbd7 	bl	80139c8 <siprintf>
 800121a:	f8c7 05a0 	str.w	r0, [r7, #1440]	; 0x5a0
      HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 800121e:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8001222:	b29a      	uxth	r2, r3
 8001224:	f207 515c 	addw	r1, r7, #1372	; 0x55c
 8001228:	2364      	movs	r3, #100	; 0x64
 800122a:	484d      	ldr	r0, [pc, #308]	; (8001360 <main+0x308>)
 800122c:	f009 ffb4 	bl	800b198 <HAL_UART_Transmit>
      while(1);
 8001230:	e7fe      	b.n	8001230 <main+0x1d8>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001232:	f00e facd 	bl	800f7d0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    LED_Toggle();
 8001236:	f001 fa27 	bl	8002688 <LED_Toggle>
    HAL_Delay(500);
 800123a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800123e:	f002 fa3f 	bl	80036c0 <HAL_Delay>

      // Fill input buffer (use test value)
  	for (uint32_t i = 0; i < AI_TONECRAFTER_IN_1_SIZE; i++)
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8001248:	e020      	b.n	800128c <main+0x234>
  	{
  	  ((ai_float *)in_data)[i] = (ai_float)test;
 800124a:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001254:	4413      	add	r3, r2
 8001256:	4a45      	ldr	r2, [pc, #276]	; (800136c <main+0x314>)
 8001258:	6812      	ldr	r2, [r2, #0]
 800125a:	601a      	str	r2, [r3, #0]
  	  test += 0.1;
 800125c:	4b43      	ldr	r3, [pc, #268]	; (800136c <main+0x314>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f991 	bl	8000588 <__aeabi_f2d>
 8001266:	a336      	add	r3, pc, #216	; (adr r3, 8001340 <main+0x2e8>)
 8001268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126c:	f7ff f82e 	bl	80002cc <__adddf3>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4610      	mov	r0, r2
 8001276:	4619      	mov	r1, r3
 8001278:	f7ff fcb6 	bl	8000be8 <__aeabi_d2f>
 800127c:	4603      	mov	r3, r0
 800127e:	4a3b      	ldr	r2, [pc, #236]	; (800136c <main+0x314>)
 8001280:	6013      	str	r3, [r2, #0]
  	for (uint32_t i = 0; i < AI_TONECRAFTER_IN_1_SIZE; i++)
 8001282:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001286:	3301      	adds	r3, #1
 8001288:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800128c:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001290:	2b77      	cmp	r3, #119	; 0x77
 8001292:	d9da      	bls.n	800124a <main+0x1f2>
  	}

  	// Get current timestamp
  	timestamp = htim12.Instance->CNT;
 8001294:	4b30      	ldr	r3, [pc, #192]	; (8001358 <main+0x300>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129a:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c

	// Perform inference
	nbatch = ai_tonecrafter_run(tonecrafter, &ai_input[0], &ai_output[0]);
 800129e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80012a8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80012ac:	4618      	mov	r0, r3
 80012ae:	f00e fec8 	bl	8010042 <ai_tonecrafter_run>
 80012b2:	f8c7 0598 	str.w	r0, [r7, #1432]	; 0x598
	if (nbatch != 1) {
 80012b6:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d010      	beq.n	80012e0 <main+0x288>
	  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 80012be:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 80012c2:	492b      	ldr	r1, [pc, #172]	; (8001370 <main+0x318>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f012 fb7f 	bl	80139c8 <siprintf>
 80012ca:	f8c7 05a0 	str.w	r0, [r7, #1440]	; 0x5a0
	  HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 80012ce:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	f207 515c 	addw	r1, r7, #1372	; 0x55c
 80012d8:	2364      	movs	r3, #100	; 0x64
 80012da:	4821      	ldr	r0, [pc, #132]	; (8001360 <main+0x308>)
 80012dc:	f009 ff5c 	bl	800b198 <HAL_UART_Transmit>
	}

	// Read output (predicted y) of neural network
	y_val = ((float *)out_data)[0];
 80012e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f207 5294 	addw	r2, r7, #1428	; 0x594
 80012ea:	6013      	str	r3, [r2, #0]
	y_val1 = ((float *)out_data)[2];
 80012ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 80012f6:	6013      	str	r3, [r2, #0]

	// Print output of neural network along with inference time (microseconds)
	buf_len = sprintf(buf, "Output: %f | Duration: %lu\r\n", y_val, htim12.Instance->CNT - timestamp);
 80012f8:	f207 5394 	addw	r3, r7, #1428	; 0x594
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	f7ff f943 	bl	8000588 <__aeabi_f2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4914      	ldr	r1, [pc, #80]	; (8001358 <main+0x300>)
 8001308:	6809      	ldr	r1, [r1, #0]
 800130a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800130c:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 8001310:	1a41      	subs	r1, r0, r1
 8001312:	f207 505c 	addw	r0, r7, #1372	; 0x55c
 8001316:	9100      	str	r1, [sp, #0]
 8001318:	4916      	ldr	r1, [pc, #88]	; (8001374 <main+0x31c>)
 800131a:	f012 fb55 	bl	80139c8 <siprintf>
 800131e:	f8c7 05a0 	str.w	r0, [r7, #1440]	; 0x5a0
	HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 8001322:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8001326:	b29a      	uxth	r2, r3
 8001328:	f207 515c 	addw	r1, r7, #1372	; 0x55c
 800132c:	2364      	movs	r3, #100	; 0x64
 800132e:	480c      	ldr	r0, [pc, #48]	; (8001360 <main+0x308>)
 8001330:	f009 ff32 	bl	800b198 <HAL_UART_Transmit>

	// Wait before doing it again
	HAL_Delay(500);
 8001334:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001338:	f002 f9c2 	bl	80036c0 <HAL_Delay>
    MX_USB_HOST_Process();
 800133c:	e779      	b.n	8001232 <main+0x1da>
 800133e:	bf00      	nop
 8001340:	9999999a 	.word	0x9999999a
 8001344:	3fb99999 	.word	0x3fb99999
 8001348:	08016334 	.word	0x08016334
 800134c:	0801634c 	.word	0x0801634c
 8001350:	40040440 	.word	0x40040440
 8001354:	00040440 	.word	0x00040440
 8001358:	200010bc 	.word	0x200010bc
 800135c:	08016288 	.word	0x08016288
 8001360:	20000fac 	.word	0x20000fac
 8001364:	080162a4 	.word	0x080162a4
 8001368:	080162cc 	.word	0x080162cc
 800136c:	20000eb8 	.word	0x20000eb8
 8001370:	080162f0 	.word	0x080162f0
 8001374:	08016314 	.word	0x08016314

08001378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b0b4      	sub	sp, #208	; 0xd0
 800137c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001382:	2230      	movs	r2, #48	; 0x30
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f011 fdf2 	bl	8012f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800138c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	2284      	movs	r2, #132	; 0x84
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f011 fde3 	bl	8012f70 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013aa:	f005 fc85 	bl	8006cb8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	4b4f      	ldr	r3, [pc, #316]	; (80014ec <SystemClock_Config+0x174>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a4e      	ldr	r2, [pc, #312]	; (80014ec <SystemClock_Config+0x174>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b4c      	ldr	r3, [pc, #304]	; (80014ec <SystemClock_Config+0x174>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c6:	4b4a      	ldr	r3, [pc, #296]	; (80014f0 <SystemClock_Config+0x178>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a49      	ldr	r2, [pc, #292]	; (80014f0 <SystemClock_Config+0x178>)
 80013cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b47      	ldr	r3, [pc, #284]	; (80014f0 <SystemClock_Config+0x178>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80013de:	2309      	movs	r3, #9
 80013e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013ec:	2301      	movs	r3, #1
 80013ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f2:	2302      	movs	r3, #2
 80013f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001400:	2319      	movs	r3, #25
 8001402:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001406:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800140a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800140e:	2302      	movs	r3, #2
 8001410:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001414:	2309      	movs	r3, #9
 8001416:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800141a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800141e:	4618      	mov	r0, r3
 8001420:	f005 fd6c 	bl	8006efc <HAL_RCC_OscConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800142a:	f001 f937 	bl	800269c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800142e:	f005 fc53 	bl	8006cd8 <HAL_PWREx_EnableOverDrive>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001438:	f001 f930 	bl	800269c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143c:	230f      	movs	r3, #15
 800143e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001442:	2302      	movs	r3, #2
 8001444:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001448:	2300      	movs	r3, #0
 800144a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800144e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001452:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800145e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001462:	2106      	movs	r1, #6
 8001464:	4618      	mov	r0, r3
 8001466:	f005 ffed 	bl	8007444 <HAL_RCC_ClockConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001470:	f001 f914 	bl	800269c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001474:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <SystemClock_Config+0x17c>)
 8001476:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001478:	2364      	movs	r3, #100	; 0x64
 800147a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800147c:	2302      	movs	r3, #2
 800147e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001480:	2302      	movs	r3, #2
 8001482:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001484:	2302      	movs	r3, #2
 8001486:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001488:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800148c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800148e:	2305      	movs	r3, #5
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001492:	2302      	movs	r3, #2
 8001494:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001496:	2303      	movs	r3, #3
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800149a:	2301      	movs	r3, #1
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800149e:	2301      	movs	r3, #1
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80014a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014a6:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ac:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80014ae:	2300      	movs	r3, #0
 80014b0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014b2:	2300      	movs	r3, #0
 80014b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80014b6:	2300      	movs	r3, #0
 80014b8:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80014be:	2300      	movs	r3, #0
 80014c0:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80014c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80014c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	4618      	mov	r0, r3
 80014d6:	f006 f98b 	bl	80077f0 <HAL_RCCEx_PeriphCLKConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 80014e0:	f001 f8dc 	bl	800269c <Error_Handler>
  }
}
 80014e4:	bf00      	nop
 80014e6:	37d0      	adds	r7, #208	; 0xd0
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40007000 	.word	0x40007000
 80014f4:	01b14868 	.word	0x01b14868

080014f8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014fe:	463b      	mov	r3, r7
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <MX_ADC3_Init+0x98>)
 800150c:	4a21      	ldr	r2, [pc, #132]	; (8001594 <MX_ADC3_Init+0x9c>)
 800150e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <MX_ADC3_Init+0x98>)
 8001512:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001516:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <MX_ADC3_Init+0x98>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <MX_ADC3_Init+0x98>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_ADC3_Init+0x98>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <MX_ADC3_Init+0x98>)
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <MX_ADC3_Init+0x98>)
 8001534:	2200      	movs	r2, #0
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MX_ADC3_Init+0x98>)
 800153a:	4a17      	ldr	r2, [pc, #92]	; (8001598 <MX_ADC3_Init+0xa0>)
 800153c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_ADC3_Init+0x98>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_ADC3_Init+0x98>)
 8001546:	2201      	movs	r2, #1
 8001548:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_ADC3_Init+0x98>)
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_ADC3_Init+0x98>)
 8001554:	2201      	movs	r2, #1
 8001556:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <MX_ADC3_Init+0x98>)
 800155a:	f002 f8d5 	bl	8003708 <HAL_ADC_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001564:	f001 f89a 	bl	800269c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001568:	2304      	movs	r3, #4
 800156a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800156c:	2301      	movs	r3, #1
 800156e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001574:	463b      	mov	r3, r7
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_ADC3_Init+0x98>)
 800157a:	f002 f909 	bl	8003790 <HAL_ADC_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001584:	f001 f88a 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000e20 	.word	0x20000e20
 8001594:	40012200 	.word	0x40012200
 8001598:	0f000001 	.word	0x0f000001

0800159c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80015a0:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <MX_CRC_Init+0x3c>)
 80015a2:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <MX_CRC_Init+0x40>)
 80015a4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_CRC_Init+0x3c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <MX_CRC_Init+0x3c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_CRC_Init+0x3c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <MX_CRC_Init+0x3c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_CRC_Init+0x3c>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80015c4:	4804      	ldr	r0, [pc, #16]	; (80015d8 <MX_CRC_Init+0x3c>)
 80015c6:	f002 fc39 	bl	8003e3c <HAL_CRC_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80015d0:	f001 f864 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000c38 	.word	0x20000c38
 80015dc:	40023000 	.word	0x40023000

080015e0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80015e4:	4b16      	ldr	r3, [pc, #88]	; (8001640 <MX_DCMI_Init+0x60>)
 80015e6:	4a17      	ldr	r2, [pc, #92]	; (8001644 <MX_DCMI_Init+0x64>)
 80015e8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <MX_DCMI_Init+0x60>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <MX_DCMI_Init+0x60>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_DCMI_Init+0x60>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80015fc:	4b10      	ldr	r3, [pc, #64]	; (8001640 <MX_DCMI_Init+0x60>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_DCMI_Init+0x60>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001608:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <MX_DCMI_Init+0x60>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_DCMI_Init+0x60>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <MX_DCMI_Init+0x60>)
 8001616:	2200      	movs	r2, #0
 8001618:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_DCMI_Init+0x60>)
 800161c:	2200      	movs	r2, #0
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <MX_DCMI_Init+0x60>)
 8001622:	2200      	movs	r2, #0
 8001624:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_DCMI_Init+0x60>)
 8001628:	2200      	movs	r2, #0
 800162a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <MX_DCMI_Init+0x60>)
 800162e:	f002 fcef 	bl	8004010 <HAL_DCMI_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001638:	f001 f830 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000e68 	.word	0x20000e68
 8001644:	50050000 	.word	0x50050000

08001648 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <MX_DMA2D_Init+0x5c>)
 800164e:	4a16      	ldr	r2, [pc, #88]	; (80016a8 <MX_DMA2D_Init+0x60>)
 8001650:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <MX_DMA2D_Init+0x5c>)
 8001654:	2200      	movs	r2, #0
 8001656:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <MX_DMA2D_Init+0x5c>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_DMA2D_Init+0x5c>)
 8001660:	2200      	movs	r2, #0
 8001662:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_DMA2D_Init+0x5c>)
 8001666:	2200      	movs	r2, #0
 8001668:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_DMA2D_Init+0x5c>)
 800166c:	2200      	movs	r2, #0
 800166e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_DMA2D_Init+0x5c>)
 8001672:	2200      	movs	r2, #0
 8001674:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <MX_DMA2D_Init+0x5c>)
 8001678:	2200      	movs	r2, #0
 800167a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800167c:	4809      	ldr	r0, [pc, #36]	; (80016a4 <MX_DMA2D_Init+0x5c>)
 800167e:	f002 fd41 	bl	8004104 <HAL_DMA2D_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001688:	f001 f808 	bl	800269c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800168c:	2101      	movs	r1, #1
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_DMA2D_Init+0x5c>)
 8001690:	f002 fe92 	bl	80043b8 <HAL_DMA2D_ConfigLayer>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800169a:	f000 ffff 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20001030 	.word	0x20001030
 80016a8:	4002b000 	.word	0x4002b000

080016ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <MX_I2C1_Init+0x74>)
 80016b2:	4a1c      	ldr	r2, [pc, #112]	; (8001724 <MX_I2C1_Init+0x78>)
 80016b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <MX_I2C1_Init+0x74>)
 80016b8:	4a1b      	ldr	r2, [pc, #108]	; (8001728 <MX_I2C1_Init+0x7c>)
 80016ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016bc:	4b18      	ldr	r3, [pc, #96]	; (8001720 <MX_I2C1_Init+0x74>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <MX_I2C1_Init+0x74>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c8:	4b15      	ldr	r3, [pc, #84]	; (8001720 <MX_I2C1_Init+0x74>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <MX_I2C1_Init+0x74>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <MX_I2C1_Init+0x74>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_I2C1_Init+0x74>)
 80016dc:	2200      	movs	r2, #0
 80016de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <MX_I2C1_Init+0x74>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016e6:	480e      	ldr	r0, [pc, #56]	; (8001720 <MX_I2C1_Init+0x74>)
 80016e8:	f004 fe54 	bl	8006394 <HAL_I2C_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016f2:	f000 ffd3 	bl	800269c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016f6:	2100      	movs	r1, #0
 80016f8:	4809      	ldr	r0, [pc, #36]	; (8001720 <MX_I2C1_Init+0x74>)
 80016fa:	f004 fedb 	bl	80064b4 <HAL_I2CEx_ConfigAnalogFilter>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001704:	f000 ffca 	bl	800269c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001708:	2100      	movs	r1, #0
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_I2C1_Init+0x74>)
 800170c:	f004 ff1d 	bl	800654a <HAL_I2CEx_ConfigDigitalFilter>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001716:	f000 ffc1 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000bec 	.word	0x20000bec
 8001724:	40005400 	.word	0x40005400
 8001728:	00c0eaff 	.word	0x00c0eaff

0800172c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <MX_I2C3_Init+0x74>)
 8001732:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <MX_I2C3_Init+0x78>)
 8001734:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MX_I2C3_Init+0x74>)
 8001738:	4a1b      	ldr	r2, [pc, #108]	; (80017a8 <MX_I2C3_Init+0x7c>)
 800173a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <MX_I2C3_Init+0x74>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <MX_I2C3_Init+0x74>)
 8001744:	2201      	movs	r2, #1
 8001746:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <MX_I2C3_Init+0x74>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <MX_I2C3_Init+0x74>)
 8001750:	2200      	movs	r2, #0
 8001752:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <MX_I2C3_Init+0x74>)
 8001756:	2200      	movs	r2, #0
 8001758:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <MX_I2C3_Init+0x74>)
 800175c:	2200      	movs	r2, #0
 800175e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <MX_I2C3_Init+0x74>)
 8001762:	2200      	movs	r2, #0
 8001764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001766:	480e      	ldr	r0, [pc, #56]	; (80017a0 <MX_I2C3_Init+0x74>)
 8001768:	f004 fe14 	bl	8006394 <HAL_I2C_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001772:	f000 ff93 	bl	800269c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001776:	2100      	movs	r1, #0
 8001778:	4809      	ldr	r0, [pc, #36]	; (80017a0 <MX_I2C3_Init+0x74>)
 800177a:	f004 fe9b 	bl	80064b4 <HAL_I2CEx_ConfigAnalogFilter>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001784:	f000 ff8a 	bl	800269c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001788:	2100      	movs	r1, #0
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_I2C3_Init+0x74>)
 800178c:	f004 fedd 	bl	800654a <HAL_I2CEx_ConfigDigitalFilter>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001796:	f000 ff81 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000a84 	.word	0x20000a84
 80017a4:	40005c00 	.word	0x40005c00
 80017a8:	00c0eaff 	.word	0x00c0eaff

080017ac <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08e      	sub	sp, #56	; 0x38
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	2234      	movs	r2, #52	; 0x34
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f011 fbd9 	bl	8012f70 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80017be:	4b3a      	ldr	r3, [pc, #232]	; (80018a8 <MX_LTDC_Init+0xfc>)
 80017c0:	4a3a      	ldr	r2, [pc, #232]	; (80018ac <MX_LTDC_Init+0x100>)
 80017c2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80017c4:	4b38      	ldr	r3, [pc, #224]	; (80018a8 <MX_LTDC_Init+0xfc>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80017ca:	4b37      	ldr	r3, [pc, #220]	; (80018a8 <MX_LTDC_Init+0xfc>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80017d0:	4b35      	ldr	r3, [pc, #212]	; (80018a8 <MX_LTDC_Init+0xfc>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80017d6:	4b34      	ldr	r3, [pc, #208]	; (80018a8 <MX_LTDC_Init+0xfc>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80017dc:	4b32      	ldr	r3, [pc, #200]	; (80018a8 <MX_LTDC_Init+0xfc>)
 80017de:	2228      	movs	r2, #40	; 0x28
 80017e0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80017e2:	4b31      	ldr	r3, [pc, #196]	; (80018a8 <MX_LTDC_Init+0xfc>)
 80017e4:	2209      	movs	r2, #9
 80017e6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80017e8:	4b2f      	ldr	r3, [pc, #188]	; (80018a8 <MX_LTDC_Init+0xfc>)
 80017ea:	2235      	movs	r2, #53	; 0x35
 80017ec:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80017ee:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <MX_LTDC_Init+0xfc>)
 80017f0:	220b      	movs	r2, #11
 80017f2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80017f4:	4b2c      	ldr	r3, [pc, #176]	; (80018a8 <MX_LTDC_Init+0xfc>)
 80017f6:	f240 2215 	movw	r2, #533	; 0x215
 80017fa:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80017fc:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <MX_LTDC_Init+0xfc>)
 80017fe:	f240 121b 	movw	r2, #283	; 0x11b
 8001802:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001804:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <MX_LTDC_Init+0xfc>)
 8001806:	f240 2235 	movw	r2, #565	; 0x235
 800180a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800180c:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <MX_LTDC_Init+0xfc>)
 800180e:	f240 121d 	movw	r2, #285	; 0x11d
 8001812:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001814:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <MX_LTDC_Init+0xfc>)
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800181c:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <MX_LTDC_Init+0xfc>)
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001824:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <MX_LTDC_Init+0xfc>)
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800182c:	481e      	ldr	r0, [pc, #120]	; (80018a8 <MX_LTDC_Init+0xfc>)
 800182e:	f004 fed9 	bl	80065e4 <HAL_LTDC_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001838:	f000 ff30 	bl	800269c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001840:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001844:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800184a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800184e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001850:	2302      	movs	r3, #2
 8001852:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001854:	23ff      	movs	r3, #255	; 0xff
 8001856:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800185c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001860:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001862:	2307      	movs	r3, #7
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001866:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800186c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001872:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001876:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	2200      	movs	r2, #0
 800188e:	4619      	mov	r1, r3
 8001890:	4805      	ldr	r0, [pc, #20]	; (80018a8 <MX_LTDC_Init+0xfc>)
 8001892:	f005 f839 	bl	8006908 <HAL_LTDC_ConfigLayer>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800189c:	f000 fefe 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	3738      	adds	r7, #56	; 0x38
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000d78 	.word	0x20000d78
 80018ac:	40016800 	.word	0x40016800

080018b0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <MX_QUADSPI_Init+0x50>)
 80018b6:	4a13      	ldr	r2, [pc, #76]	; (8001904 <MX_QUADSPI_Init+0x54>)
 80018b8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <MX_QUADSPI_Init+0x50>)
 80018bc:	2201      	movs	r2, #1
 80018be:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <MX_QUADSPI_Init+0x50>)
 80018c2:	2204      	movs	r2, #4
 80018c4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <MX_QUADSPI_Init+0x50>)
 80018c8:	2210      	movs	r2, #16
 80018ca:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <MX_QUADSPI_Init+0x50>)
 80018ce:	2218      	movs	r2, #24
 80018d0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80018d2:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <MX_QUADSPI_Init+0x50>)
 80018d4:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80018d8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <MX_QUADSPI_Init+0x50>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <MX_QUADSPI_Init+0x50>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <MX_QUADSPI_Init+0x50>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <MX_QUADSPI_Init+0x50>)
 80018ee:	f005 fa43 	bl	8006d78 <HAL_QSPI_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80018f8:	f000 fed0 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20001184 	.word	0x20001184
 8001904:	a0001000 	.word	0xa0001000

08001908 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b092      	sub	sp, #72	; 0x48
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800190e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]
 800191e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001920:	2300      	movs	r3, #0
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001924:	463b      	mov	r3, r7
 8001926:	222c      	movs	r2, #44	; 0x2c
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f011 fb20 	bl	8012f70 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001930:	4b46      	ldr	r3, [pc, #280]	; (8001a4c <MX_RTC_Init+0x144>)
 8001932:	4a47      	ldr	r2, [pc, #284]	; (8001a50 <MX_RTC_Init+0x148>)
 8001934:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001936:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <MX_RTC_Init+0x144>)
 8001938:	2200      	movs	r2, #0
 800193a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800193c:	4b43      	ldr	r3, [pc, #268]	; (8001a4c <MX_RTC_Init+0x144>)
 800193e:	227f      	movs	r2, #127	; 0x7f
 8001940:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001942:	4b42      	ldr	r3, [pc, #264]	; (8001a4c <MX_RTC_Init+0x144>)
 8001944:	22ff      	movs	r2, #255	; 0xff
 8001946:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001948:	4b40      	ldr	r3, [pc, #256]	; (8001a4c <MX_RTC_Init+0x144>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800194e:	4b3f      	ldr	r3, [pc, #252]	; (8001a4c <MX_RTC_Init+0x144>)
 8001950:	2200      	movs	r2, #0
 8001952:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001954:	4b3d      	ldr	r3, [pc, #244]	; (8001a4c <MX_RTC_Init+0x144>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800195a:	483c      	ldr	r0, [pc, #240]	; (8001a4c <MX_RTC_Init+0x144>)
 800195c:	f006 fc7c 	bl	8008258 <HAL_RTC_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001966:	f000 fe99 	bl	800269c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001970:	2300      	movs	r3, #0
 8001972:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001976:	2300      	movs	r3, #0
 8001978:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800197c:	2300      	movs	r3, #0
 800197e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001980:	2300      	movs	r3, #0
 8001982:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001984:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001988:	2201      	movs	r2, #1
 800198a:	4619      	mov	r1, r3
 800198c:	482f      	ldr	r0, [pc, #188]	; (8001a4c <MX_RTC_Init+0x144>)
 800198e:	f006 fcf5 	bl	800837c <HAL_RTC_SetTime>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001998:	f000 fe80 	bl	800269c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800199c:	2301      	movs	r3, #1
 800199e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80019a2:	2301      	movs	r3, #1
 80019a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80019a8:	2301      	movs	r3, #1
 80019aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b8:	2201      	movs	r2, #1
 80019ba:	4619      	mov	r1, r3
 80019bc:	4823      	ldr	r0, [pc, #140]	; (8001a4c <MX_RTC_Init+0x144>)
 80019be:	f006 fd9b 	bl	80084f8 <HAL_RTC_SetDate>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80019c8:	f000 fe68 	bl	800269c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80019d8:	2300      	movs	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80019f0:	2301      	movs	r3, #1
 80019f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80019f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80019fc:	463b      	mov	r3, r7
 80019fe:	2201      	movs	r2, #1
 8001a00:	4619      	mov	r1, r3
 8001a02:	4812      	ldr	r0, [pc, #72]	; (8001a4c <MX_RTC_Init+0x144>)
 8001a04:	f006 fe20 	bl	8008648 <HAL_RTC_SetAlarm>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001a0e:	f000 fe45 	bl	800269c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001a12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a18:	463b      	mov	r3, r7
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480b      	ldr	r0, [pc, #44]	; (8001a4c <MX_RTC_Init+0x144>)
 8001a20:	f006 fe12 	bl	8008648 <HAL_RTC_SetAlarm>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001a2a:	f000 fe37 	bl	800269c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001a2e:	2202      	movs	r2, #2
 8001a30:	2100      	movs	r1, #0
 8001a32:	4806      	ldr	r0, [pc, #24]	; (8001a4c <MX_RTC_Init+0x144>)
 8001a34:	f006 ff92 	bl	800895c <HAL_RTCEx_SetTimeStamp>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001a3e:	f000 fe2d 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	3748      	adds	r7, #72	; 0x48
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000f40 	.word	0x20000f40
 8001a50:	40002800 	.word	0x40002800

08001a54 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001a58:	4b4d      	ldr	r3, [pc, #308]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001a5a:	4a4e      	ldr	r2, [pc, #312]	; (8001b94 <MX_SAI2_Init+0x140>)
 8001a5c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001a5e:	4b4c      	ldr	r3, [pc, #304]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001a64:	4b4a      	ldr	r3, [pc, #296]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001a6a:	4b49      	ldr	r3, [pc, #292]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001a6c:	2240      	movs	r2, #64	; 0x40
 8001a6e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001a70:	4b47      	ldr	r3, [pc, #284]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001a76:	4b46      	ldr	r3, [pc, #280]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001a7c:	4b44      	ldr	r3, [pc, #272]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001a82:	4b43      	ldr	r3, [pc, #268]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001a88:	4b41      	ldr	r3, [pc, #260]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001a8e:	4b40      	ldr	r3, [pc, #256]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001a94:	4b3e      	ldr	r3, [pc, #248]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001a96:	4a40      	ldr	r2, [pc, #256]	; (8001b98 <MX_SAI2_Init+0x144>)
 8001a98:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001a9a:	4b3d      	ldr	r3, [pc, #244]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001aa0:	4b3b      	ldr	r3, [pc, #236]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001aa6:	4b3a      	ldr	r3, [pc, #232]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001aac:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001ab2:	4b37      	ldr	r3, [pc, #220]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001ab4:	2208      	movs	r2, #8
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001ab8:	4b35      	ldr	r3, [pc, #212]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001abe:	4b34      	ldr	r3, [pc, #208]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001ac4:	4b32      	ldr	r3, [pc, #200]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001aca:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001ad0:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001ad6:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001adc:	4b2c      	ldr	r3, [pc, #176]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001ae8:	4829      	ldr	r0, [pc, #164]	; (8001b90 <MX_SAI2_Init+0x13c>)
 8001aea:	f006 ff8d 	bl	8008a08 <HAL_SAI_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001af4:	f000 fdd2 	bl	800269c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001af8:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001afa:	4a29      	ldr	r2, [pc, #164]	; (8001ba0 <MX_SAI2_Init+0x14c>)
 8001afc:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001afe:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b06:	2203      	movs	r2, #3
 8001b08:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001b0a:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b0c:	2240      	movs	r2, #64	; 0x40
 8001b0e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b10:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001b16:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b22:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b28:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b34:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b40:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b48:	2208      	movs	r2, #8
 8001b4a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b58:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001b64:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001b70:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001b7c:	4807      	ldr	r0, [pc, #28]	; (8001b9c <MX_SAI2_Init+0x148>)
 8001b7e:	f006 ff43 	bl	8008a08 <HAL_SAI_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001b88:	f000 fd88 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000b68 	.word	0x20000b68
 8001b94:	40015c04 	.word	0x40015c04
 8001b98:	0002ee00 	.word	0x0002ee00
 8001b9c:	20000a00 	.word	0x20000a00
 8001ba0:	40015c24 	.word	0x40015c24

08001ba4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <MX_SDMMC1_SD_Init+0x38>)
 8001baa:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <MX_SDMMC1_SD_Init+0x3c>)
 8001bac:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <MX_SDMMC1_SD_Init+0x38>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <MX_SDMMC1_SD_Init+0x38>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <MX_SDMMC1_SD_Init+0x38>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <MX_SDMMC1_SD_Init+0x38>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <MX_SDMMC1_SD_Init+0x38>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <MX_SDMMC1_SD_Init+0x38>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	20000c5c 	.word	0x20000c5c
 8001be0:	40012c00 	.word	0x40012c00

08001be4 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001be8:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <MX_SPDIFRX_Init+0x5c>)
 8001bea:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001bee:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <MX_SPDIFRX_Init+0x5c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <MX_SPDIFRX_Init+0x5c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001bfc:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <MX_SPDIFRX_Init+0x5c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <MX_SPDIFRX_Init+0x5c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <MX_SPDIFRX_Init+0x5c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <MX_SPDIFRX_Init+0x5c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001c14:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <MX_SPDIFRX_Init+0x5c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <MX_SPDIFRX_Init+0x5c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001c20:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <MX_SPDIFRX_Init+0x5c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <MX_SPDIFRX_Init+0x5c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001c2c:	4804      	ldr	r0, [pc, #16]	; (8001c40 <MX_SPDIFRX_Init+0x5c>)
 8001c2e:	f008 fa65 	bl	800a0fc <HAL_SPDIFRX_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001c38:	f000 fd30 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000b1c 	.word	0x20000b1c

08001c44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b09a      	sub	sp, #104	; 0x68
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
 8001c74:	615a      	str	r2, [r3, #20]
 8001c76:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	222c      	movs	r2, #44	; 0x2c
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f011 f976 	bl	8012f70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c84:	4b43      	ldr	r3, [pc, #268]	; (8001d94 <MX_TIM1_Init+0x150>)
 8001c86:	4a44      	ldr	r2, [pc, #272]	; (8001d98 <MX_TIM1_Init+0x154>)
 8001c88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c8a:	4b42      	ldr	r3, [pc, #264]	; (8001d94 <MX_TIM1_Init+0x150>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c90:	4b40      	ldr	r3, [pc, #256]	; (8001d94 <MX_TIM1_Init+0x150>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c96:	4b3f      	ldr	r3, [pc, #252]	; (8001d94 <MX_TIM1_Init+0x150>)
 8001c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9e:	4b3d      	ldr	r3, [pc, #244]	; (8001d94 <MX_TIM1_Init+0x150>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ca4:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <MX_TIM1_Init+0x150>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001caa:	4b3a      	ldr	r3, [pc, #232]	; (8001d94 <MX_TIM1_Init+0x150>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cb0:	4838      	ldr	r0, [pc, #224]	; (8001d94 <MX_TIM1_Init+0x150>)
 8001cb2:	f008 fa7f 	bl	800a1b4 <HAL_TIM_Base_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001cbc:	f000 fcee 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cc6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4831      	ldr	r0, [pc, #196]	; (8001d94 <MX_TIM1_Init+0x150>)
 8001cce:	f008 fcab 	bl	800a628 <HAL_TIM_ConfigClockSource>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001cd8:	f000 fce0 	bl	800269c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cdc:	482d      	ldr	r0, [pc, #180]	; (8001d94 <MX_TIM1_Init+0x150>)
 8001cde:	f008 fb31 	bl	800a344 <HAL_TIM_PWM_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001ce8:	f000 fcd8 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cf8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4825      	ldr	r0, [pc, #148]	; (8001d94 <MX_TIM1_Init+0x150>)
 8001d00:	f009 f8f0 	bl	800aee4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001d0a:	f000 fcc7 	bl	800269c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d0e:	2360      	movs	r3, #96	; 0x60
 8001d10:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d16:	2300      	movs	r3, #0
 8001d18:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d2e:	2200      	movs	r2, #0
 8001d30:	4619      	mov	r1, r3
 8001d32:	4818      	ldr	r0, [pc, #96]	; (8001d94 <MX_TIM1_Init+0x150>)
 8001d34:	f008 fb68 	bl	800a408 <HAL_TIM_PWM_ConfigChannel>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001d3e:	f000 fcad 	bl	800269c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d5a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	4619      	mov	r1, r3
 8001d76:	4807      	ldr	r0, [pc, #28]	; (8001d94 <MX_TIM1_Init+0x150>)
 8001d78:	f009 f942 	bl	800b000 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001d82:	f000 fc8b 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d86:	4803      	ldr	r0, [pc, #12]	; (8001d94 <MX_TIM1_Init+0x150>)
 8001d88:	f001 f944 	bl	8003014 <HAL_TIM_MspPostInit>

}
 8001d8c:	bf00      	nop
 8001d8e:	3768      	adds	r7, #104	; 0x68
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000f60 	.word	0x20000f60
 8001d98:	40010000 	.word	0x40010000

08001d9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08e      	sub	sp, #56	; 0x38
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
 8001dc8:	611a      	str	r2, [r3, #16]
 8001dca:	615a      	str	r2, [r3, #20]
 8001dcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dce:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001dd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001dd6:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ddc:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001de2:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001de4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001de8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dea:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df0:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001df6:	4823      	ldr	r0, [pc, #140]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001df8:	f008 f9dc 	bl	800a1b4 <HAL_TIM_Base_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001e02:	f000 fc4b 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e10:	4619      	mov	r1, r3
 8001e12:	481c      	ldr	r0, [pc, #112]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001e14:	f008 fc08 	bl	800a628 <HAL_TIM_ConfigClockSource>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001e1e:	f000 fc3d 	bl	800269c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e22:	4818      	ldr	r0, [pc, #96]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001e24:	f008 fa8e 	bl	800a344 <HAL_TIM_PWM_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001e2e:	f000 fc35 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e3a:	f107 031c 	add.w	r3, r7, #28
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4810      	ldr	r0, [pc, #64]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001e42:	f009 f84f 	bl	800aee4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001e4c:	f000 fc26 	bl	800269c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e50:	2360      	movs	r3, #96	; 0x60
 8001e52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e60:	463b      	mov	r3, r7
 8001e62:	2200      	movs	r2, #0
 8001e64:	4619      	mov	r1, r3
 8001e66:	4807      	ldr	r0, [pc, #28]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001e68:	f008 face 	bl	800a408 <HAL_TIM_PWM_ConfigChannel>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001e72:	f000 fc13 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e76:	4803      	ldr	r0, [pc, #12]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001e78:	f001 f8cc 	bl	8003014 <HAL_TIM_MspPostInit>

}
 8001e7c:	bf00      	nop
 8001e7e:	3738      	adds	r7, #56	; 0x38
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20001070 	.word	0x20001070

08001e88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08e      	sub	sp, #56	; 0x38
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9c:	f107 031c 	add.w	r3, r7, #28
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
 8001eb4:	611a      	str	r2, [r3, #16]
 8001eb6:	615a      	str	r2, [r3, #20]
 8001eb8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eba:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <MX_TIM3_Init+0xe8>)
 8001ebc:	4a2d      	ldr	r2, [pc, #180]	; (8001f74 <MX_TIM3_Init+0xec>)
 8001ebe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ec0:	4b2b      	ldr	r3, [pc, #172]	; (8001f70 <MX_TIM3_Init+0xe8>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec6:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <MX_TIM3_Init+0xe8>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ecc:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <MX_TIM3_Init+0xe8>)
 8001ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed4:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <MX_TIM3_Init+0xe8>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eda:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <MX_TIM3_Init+0xe8>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ee0:	4823      	ldr	r0, [pc, #140]	; (8001f70 <MX_TIM3_Init+0xe8>)
 8001ee2:	f008 f967 	bl	800a1b4 <HAL_TIM_Base_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001eec:	f000 fbd6 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ef6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001efa:	4619      	mov	r1, r3
 8001efc:	481c      	ldr	r0, [pc, #112]	; (8001f70 <MX_TIM3_Init+0xe8>)
 8001efe:	f008 fb93 	bl	800a628 <HAL_TIM_ConfigClockSource>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001f08:	f000 fbc8 	bl	800269c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f0c:	4818      	ldr	r0, [pc, #96]	; (8001f70 <MX_TIM3_Init+0xe8>)
 8001f0e:	f008 fa19 	bl	800a344 <HAL_TIM_PWM_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001f18:	f000 fbc0 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4811      	ldr	r0, [pc, #68]	; (8001f70 <MX_TIM3_Init+0xe8>)
 8001f2c:	f008 ffda 	bl	800aee4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001f36:	f000 fbb1 	bl	800269c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f3a:	2360      	movs	r3, #96	; 0x60
 8001f3c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f4a:	463b      	mov	r3, r7
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4807      	ldr	r0, [pc, #28]	; (8001f70 <MX_TIM3_Init+0xe8>)
 8001f52:	f008 fa59 	bl	800a408 <HAL_TIM_PWM_ConfigChannel>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001f5c:	f000 fb9e 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f60:	4803      	ldr	r0, [pc, #12]	; (8001f70 <MX_TIM3_Init+0xe8>)
 8001f62:	f001 f857 	bl	8003014 <HAL_TIM_MspPostInit>

}
 8001f66:	bf00      	nop
 8001f68:	3738      	adds	r7, #56	; 0x38
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000d2c 	.word	0x20000d2c
 8001f74:	40000400 	.word	0x40000400

08001f78 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08e      	sub	sp, #56	; 0x38
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f8c:	f107 031c 	add.w	r3, r7, #28
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f98:	463b      	mov	r3, r7
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]
 8001fa4:	611a      	str	r2, [r3, #16]
 8001fa6:	615a      	str	r2, [r3, #20]
 8001fa8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001faa:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <MX_TIM5_Init+0xe8>)
 8001fac:	4a2d      	ldr	r2, [pc, #180]	; (8002064 <MX_TIM5_Init+0xec>)
 8001fae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001fb0:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <MX_TIM5_Init+0xe8>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb6:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <MX_TIM5_Init+0xe8>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001fbc:	4b28      	ldr	r3, [pc, #160]	; (8002060 <MX_TIM5_Init+0xe8>)
 8001fbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fc2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc4:	4b26      	ldr	r3, [pc, #152]	; (8002060 <MX_TIM5_Init+0xe8>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fca:	4b25      	ldr	r3, [pc, #148]	; (8002060 <MX_TIM5_Init+0xe8>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001fd0:	4823      	ldr	r0, [pc, #140]	; (8002060 <MX_TIM5_Init+0xe8>)
 8001fd2:	f008 f8ef 	bl	800a1b4 <HAL_TIM_Base_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001fdc:	f000 fb5e 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001fe6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fea:	4619      	mov	r1, r3
 8001fec:	481c      	ldr	r0, [pc, #112]	; (8002060 <MX_TIM5_Init+0xe8>)
 8001fee:	f008 fb1b 	bl	800a628 <HAL_TIM_ConfigClockSource>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001ff8:	f000 fb50 	bl	800269c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001ffc:	4818      	ldr	r0, [pc, #96]	; (8002060 <MX_TIM5_Init+0xe8>)
 8001ffe:	f008 f9a1 	bl	800a344 <HAL_TIM_PWM_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002008:	f000 fb48 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800200c:	2300      	movs	r3, #0
 800200e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002010:	2300      	movs	r3, #0
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002014:	f107 031c 	add.w	r3, r7, #28
 8002018:	4619      	mov	r1, r3
 800201a:	4811      	ldr	r0, [pc, #68]	; (8002060 <MX_TIM5_Init+0xe8>)
 800201c:	f008 ff62 	bl	800aee4 <HAL_TIMEx_MasterConfigSynchronization>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002026:	f000 fb39 	bl	800269c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800202a:	2360      	movs	r3, #96	; 0x60
 800202c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800203a:	463b      	mov	r3, r7
 800203c:	220c      	movs	r2, #12
 800203e:	4619      	mov	r1, r3
 8002040:	4807      	ldr	r0, [pc, #28]	; (8002060 <MX_TIM5_Init+0xe8>)
 8002042:	f008 f9e1 	bl	800a408 <HAL_TIM_PWM_ConfigChannel>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800204c:	f000 fb26 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002050:	4803      	ldr	r0, [pc, #12]	; (8002060 <MX_TIM5_Init+0xe8>)
 8002052:	f000 ffdf 	bl	8003014 <HAL_TIM_MspPostInit>

}
 8002056:	bf00      	nop
 8002058:	3738      	adds	r7, #56	; 0x38
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000ce0 	.word	0x20000ce0
 8002064:	40000c00 	.word	0x40000c00

08002068 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800206e:	f107 0310 	add.w	r3, r7, #16
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002086:	4b20      	ldr	r3, [pc, #128]	; (8002108 <MX_TIM8_Init+0xa0>)
 8002088:	4a20      	ldr	r2, [pc, #128]	; (800210c <MX_TIM8_Init+0xa4>)
 800208a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800208c:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <MX_TIM8_Init+0xa0>)
 800208e:	2200      	movs	r2, #0
 8002090:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002092:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <MX_TIM8_Init+0xa0>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <MX_TIM8_Init+0xa0>)
 800209a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800209e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <MX_TIM8_Init+0xa0>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <MX_TIM8_Init+0xa0>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ac:	4b16      	ldr	r3, [pc, #88]	; (8002108 <MX_TIM8_Init+0xa0>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80020b2:	4815      	ldr	r0, [pc, #84]	; (8002108 <MX_TIM8_Init+0xa0>)
 80020b4:	f008 f87e 	bl	800a1b4 <HAL_TIM_Base_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80020be:	f000 faed 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	4619      	mov	r1, r3
 80020ce:	480e      	ldr	r0, [pc, #56]	; (8002108 <MX_TIM8_Init+0xa0>)
 80020d0:	f008 faaa 	bl	800a628 <HAL_TIM_ConfigClockSource>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80020da:	f000 fadf 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	4619      	mov	r1, r3
 80020ee:	4806      	ldr	r0, [pc, #24]	; (8002108 <MX_TIM8_Init+0xa0>)
 80020f0:	f008 fef8 	bl	800aee4 <HAL_TIMEx_MasterConfigSynchronization>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80020fa:	f000 facf 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80020fe:	bf00      	nop
 8002100:	3720      	adds	r7, #32
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000ad0 	.word	0x20000ad0
 800210c:	40010400 	.word	0x40010400

08002110 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002116:	463b      	mov	r3, r7
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002122:	4b16      	ldr	r3, [pc, #88]	; (800217c <MX_TIM12_Init+0x6c>)
 8002124:	4a16      	ldr	r2, [pc, #88]	; (8002180 <MX_TIM12_Init+0x70>)
 8002126:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 80 - 1;
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <MX_TIM12_Init+0x6c>)
 800212a:	224f      	movs	r2, #79	; 0x4f
 800212c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <MX_TIM12_Init+0x6c>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <MX_TIM12_Init+0x6c>)
 8002136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800213a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <MX_TIM12_Init+0x6c>)
 800213e:	2200      	movs	r2, #0
 8002140:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <MX_TIM12_Init+0x6c>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002148:	480c      	ldr	r0, [pc, #48]	; (800217c <MX_TIM12_Init+0x6c>)
 800214a:	f008 f833 	bl	800a1b4 <HAL_TIM_Base_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8002154:	f000 faa2 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800215c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800215e:	463b      	mov	r3, r7
 8002160:	4619      	mov	r1, r3
 8002162:	4806      	ldr	r0, [pc, #24]	; (800217c <MX_TIM12_Init+0x6c>)
 8002164:	f008 fa60 	bl	800a628 <HAL_TIM_ConfigClockSource>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 800216e:	f000 fa95 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	200010bc 	.word	0x200010bc
 8002180:	40001800 	.word	0x40001800

08002184 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002188:	4b14      	ldr	r3, [pc, #80]	; (80021dc <MX_USART1_UART_Init+0x58>)
 800218a:	4a15      	ldr	r2, [pc, #84]	; (80021e0 <MX_USART1_UART_Init+0x5c>)
 800218c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800218e:	4b13      	ldr	r3, [pc, #76]	; (80021dc <MX_USART1_UART_Init+0x58>)
 8002190:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002194:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <MX_USART1_UART_Init+0x58>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <MX_USART1_UART_Init+0x58>)
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <MX_USART1_UART_Init+0x58>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021a8:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <MX_USART1_UART_Init+0x58>)
 80021aa:	220c      	movs	r2, #12
 80021ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <MX_USART1_UART_Init+0x58>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b4:	4b09      	ldr	r3, [pc, #36]	; (80021dc <MX_USART1_UART_Init+0x58>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <MX_USART1_UART_Init+0x58>)
 80021bc:	2200      	movs	r2, #0
 80021be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <MX_USART1_UART_Init+0x58>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021c6:	4805      	ldr	r0, [pc, #20]	; (80021dc <MX_USART1_UART_Init+0x58>)
 80021c8:	f008 ff98 	bl	800b0fc <HAL_UART_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80021d2:	f000 fa63 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000ebc 	.word	0x20000ebc
 80021e0:	40011000 	.word	0x40011000

080021e4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80021e8:	4b14      	ldr	r3, [pc, #80]	; (800223c <MX_USART6_UART_Init+0x58>)
 80021ea:	4a15      	ldr	r2, [pc, #84]	; (8002240 <MX_USART6_UART_Init+0x5c>)
 80021ec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80021ee:	4b13      	ldr	r3, [pc, #76]	; (800223c <MX_USART6_UART_Init+0x58>)
 80021f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021f4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <MX_USART6_UART_Init+0x58>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <MX_USART6_UART_Init+0x58>)
 80021fe:	2200      	movs	r2, #0
 8002200:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <MX_USART6_UART_Init+0x58>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <MX_USART6_UART_Init+0x58>)
 800220a:	220c      	movs	r2, #12
 800220c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800220e:	4b0b      	ldr	r3, [pc, #44]	; (800223c <MX_USART6_UART_Init+0x58>)
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <MX_USART6_UART_Init+0x58>)
 8002216:	2200      	movs	r2, #0
 8002218:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800221a:	4b08      	ldr	r3, [pc, #32]	; (800223c <MX_USART6_UART_Init+0x58>)
 800221c:	2200      	movs	r2, #0
 800221e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <MX_USART6_UART_Init+0x58>)
 8002222:	2200      	movs	r2, #0
 8002224:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002226:	4805      	ldr	r0, [pc, #20]	; (800223c <MX_USART6_UART_Init+0x58>)
 8002228:	f008 ff68 	bl	800b0fc <HAL_UART_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002232:	f000 fa33 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000fac 	.word	0x20000fac
 8002240:	40011400 	.word	0x40011400

08002244 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
 8002258:	615a      	str	r2, [r3, #20]
 800225a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800225c:	4b1f      	ldr	r3, [pc, #124]	; (80022dc <MX_FMC_Init+0x98>)
 800225e:	4a20      	ldr	r2, [pc, #128]	; (80022e0 <MX_FMC_Init+0x9c>)
 8002260:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002262:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <MX_FMC_Init+0x98>)
 8002264:	2200      	movs	r2, #0
 8002266:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002268:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <MX_FMC_Init+0x98>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800226e:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <MX_FMC_Init+0x98>)
 8002270:	2204      	movs	r2, #4
 8002272:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002274:	4b19      	ldr	r3, [pc, #100]	; (80022dc <MX_FMC_Init+0x98>)
 8002276:	2210      	movs	r2, #16
 8002278:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800227a:	4b18      	ldr	r3, [pc, #96]	; (80022dc <MX_FMC_Init+0x98>)
 800227c:	2240      	movs	r2, #64	; 0x40
 800227e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002280:	4b16      	ldr	r3, [pc, #88]	; (80022dc <MX_FMC_Init+0x98>)
 8002282:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002286:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002288:	4b14      	ldr	r3, [pc, #80]	; (80022dc <MX_FMC_Init+0x98>)
 800228a:	2200      	movs	r2, #0
 800228c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <MX_FMC_Init+0x98>)
 8002290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002294:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <MX_FMC_Init+0x98>)
 8002298:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800229c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <MX_FMC_Init+0x98>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80022a4:	2302      	movs	r3, #2
 80022a6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80022a8:	2307      	movs	r3, #7
 80022aa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80022ac:	2304      	movs	r3, #4
 80022ae:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80022b0:	2307      	movs	r3, #7
 80022b2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80022b4:	2303      	movs	r3, #3
 80022b6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80022b8:	2302      	movs	r3, #2
 80022ba:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80022bc:	2302      	movs	r3, #2
 80022be:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	4619      	mov	r1, r3
 80022c4:	4805      	ldr	r0, [pc, #20]	; (80022dc <MX_FMC_Init+0x98>)
 80022c6:	f007 fee4 	bl	800a092 <HAL_SDRAM_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80022d0:	f000 f9e4 	bl	800269c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80022d4:	bf00      	nop
 80022d6:	3720      	adds	r7, #32
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20001108 	.word	0x20001108
 80022e0:	a0000140 	.word	0xa0000140

080022e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b090      	sub	sp, #64	; 0x40
 80022e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
 80022f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022fa:	4baf      	ldr	r3, [pc, #700]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4aae      	ldr	r2, [pc, #696]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 8002300:	f043 0310 	orr.w	r3, r3, #16
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4bac      	ldr	r3, [pc, #688]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002310:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002312:	4ba9      	ldr	r3, [pc, #676]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4aa8      	ldr	r2, [pc, #672]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 8002318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4ba6      	ldr	r3, [pc, #664]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800232a:	4ba3      	ldr	r3, [pc, #652]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4aa2      	ldr	r2, [pc, #648]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 8002330:	f043 0302 	orr.w	r3, r3, #2
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4ba0      	ldr	r3, [pc, #640]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	623b      	str	r3, [r7, #32]
 8002340:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002342:	4b9d      	ldr	r3, [pc, #628]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a9c      	ldr	r2, [pc, #624]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 8002348:	f043 0308 	orr.w	r3, r3, #8
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b9a      	ldr	r3, [pc, #616]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	61fb      	str	r3, [r7, #28]
 8002358:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800235a:	4b97      	ldr	r3, [pc, #604]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a96      	ldr	r2, [pc, #600]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 8002360:	f043 0304 	orr.w	r3, r3, #4
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b94      	ldr	r3, [pc, #592]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002372:	4b91      	ldr	r3, [pc, #580]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a90      	ldr	r2, [pc, #576]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b8e      	ldr	r3, [pc, #568]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800238a:	4b8b      	ldr	r3, [pc, #556]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a8a      	ldr	r2, [pc, #552]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 8002390:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b88      	ldr	r3, [pc, #544]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80023a2:	4b85      	ldr	r3, [pc, #532]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a84      	ldr	r2, [pc, #528]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 80023a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b82      	ldr	r3, [pc, #520]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80023ba:	4b7f      	ldr	r3, [pc, #508]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a7e      	ldr	r2, [pc, #504]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 80023c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b7c      	ldr	r3, [pc, #496]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023d2:	4b79      	ldr	r3, [pc, #484]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a78      	ldr	r2, [pc, #480]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 80023d8:	f043 0320 	orr.w	r3, r3, #32
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b76      	ldr	r3, [pc, #472]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0320 	and.w	r3, r3, #32
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ea:	4b73      	ldr	r3, [pc, #460]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a72      	ldr	r2, [pc, #456]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 80023f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b70      	ldr	r3, [pc, #448]	; (80025b8 <MX_GPIO_Init+0x2d4>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002402:	2201      	movs	r2, #1
 8002404:	2120      	movs	r1, #32
 8002406:	486d      	ldr	r0, [pc, #436]	; (80025bc <MX_GPIO_Init+0x2d8>)
 8002408:	f002 fa2c 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 800240c:	2200      	movs	r2, #0
 800240e:	210e      	movs	r1, #14
 8002410:	486b      	ldr	r0, [pc, #428]	; (80025c0 <MX_GPIO_Init+0x2dc>)
 8002412:	f002 fa27 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002416:	2201      	movs	r2, #1
 8002418:	2108      	movs	r1, #8
 800241a:	486a      	ldr	r0, [pc, #424]	; (80025c4 <MX_GPIO_Init+0x2e0>)
 800241c:	f002 fa22 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002420:	2201      	movs	r2, #1
 8002422:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002426:	4866      	ldr	r0, [pc, #408]	; (80025c0 <MX_GPIO_Init+0x2dc>)
 8002428:	f002 fa1c 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800242c:	2200      	movs	r2, #0
 800242e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002432:	4865      	ldr	r0, [pc, #404]	; (80025c8 <MX_GPIO_Init+0x2e4>)
 8002434:	f002 fa16 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002438:	2200      	movs	r2, #0
 800243a:	21c8      	movs	r1, #200	; 0xc8
 800243c:	4863      	ldr	r0, [pc, #396]	; (80025cc <MX_GPIO_Init+0x2e8>)
 800243e:	f002 fa11 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002442:	2308      	movs	r3, #8
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002446:	2300      	movs	r3, #0
 8002448:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800244e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002452:	4619      	mov	r1, r3
 8002454:	485e      	ldr	r0, [pc, #376]	; (80025d0 <MX_GPIO_Init+0x2ec>)
 8002456:	f002 f841 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800245a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002468:	2303      	movs	r3, #3
 800246a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800246c:	230a      	movs	r3, #10
 800246e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002470:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002474:	4619      	mov	r1, r3
 8002476:	4857      	ldr	r0, [pc, #348]	; (80025d4 <MX_GPIO_Init+0x2f0>)
 8002478:	f002 f830 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800247c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002482:	2300      	movs	r3, #0
 8002484:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800248a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800248e:	4619      	mov	r1, r3
 8002490:	4851      	ldr	r0, [pc, #324]	; (80025d8 <MX_GPIO_Init+0x2f4>)
 8002492:	f002 f823 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002496:	2340      	movs	r3, #64	; 0x40
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800249a:	4b50      	ldr	r3, [pc, #320]	; (80025dc <MX_GPIO_Init+0x2f8>)
 800249c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80024a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a6:	4619      	mov	r1, r3
 80024a8:	4844      	ldr	r0, [pc, #272]	; (80025bc <MX_GPIO_Init+0x2d8>)
 80024aa:	f002 f817 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80024ae:	2320      	movs	r3, #32
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b2:	2301      	movs	r3, #1
 80024b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ba:	2300      	movs	r3, #0
 80024bc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80024be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c2:	4619      	mov	r1, r3
 80024c4:	483d      	ldr	r0, [pc, #244]	; (80025bc <MX_GPIO_Init+0x2d8>)
 80024c6:	f002 f809 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 80024ca:	f241 030e 	movw	r3, #4110	; 0x100e
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d0:	2301      	movs	r3, #1
 80024d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d8:	2300      	movs	r3, #0
 80024da:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80024dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e0:	4619      	mov	r1, r3
 80024e2:	4837      	ldr	r0, [pc, #220]	; (80025c0 <MX_GPIO_Init+0x2dc>)
 80024e4:	f001 fffa 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80024e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ee:	2300      	movs	r3, #0
 80024f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80024f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024fa:	4619      	mov	r1, r3
 80024fc:	4838      	ldr	r0, [pc, #224]	; (80025e0 <MX_GPIO_Init+0x2fc>)
 80024fe:	f001 ffed 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002502:	2308      	movs	r3, #8
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002506:	2301      	movs	r3, #1
 8002508:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250e:	2300      	movs	r3, #0
 8002510:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002512:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002516:	4619      	mov	r1, r3
 8002518:	482a      	ldr	r0, [pc, #168]	; (80025c4 <MX_GPIO_Init+0x2e0>)
 800251a:	f001 ffdf 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800251e:	2310      	movs	r3, #16
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002522:	2300      	movs	r3, #0
 8002524:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800252a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800252e:	4619      	mov	r1, r3
 8002530:	4822      	ldr	r0, [pc, #136]	; (80025bc <MX_GPIO_Init+0x2d8>)
 8002532:	f001 ffd3 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002536:	f248 0304 	movw	r3, #32772	; 0x8004
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800253c:	2300      	movs	r3, #0
 800253e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002544:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002548:	4619      	mov	r1, r3
 800254a:	481f      	ldr	r0, [pc, #124]	; (80025c8 <MX_GPIO_Init+0x2e4>)
 800254c:	f001 ffc6 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002556:	2301      	movs	r3, #1
 8002558:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	2300      	movs	r3, #0
 8002560:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002562:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002566:	4619      	mov	r1, r3
 8002568:	4817      	ldr	r0, [pc, #92]	; (80025c8 <MX_GPIO_Init+0x2e4>)
 800256a:	f001 ffb7 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800256e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002574:	4b19      	ldr	r3, [pc, #100]	; (80025dc <MX_GPIO_Init+0x2f8>)
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800257c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002580:	4619      	mov	r1, r3
 8002582:	480f      	ldr	r0, [pc, #60]	; (80025c0 <MX_GPIO_Init+0x2dc>)
 8002584:	f001 ffaa 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002588:	2310      	movs	r3, #16
 800258a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002594:	2303      	movs	r3, #3
 8002596:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002598:	230a      	movs	r3, #10
 800259a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800259c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025a0:	4619      	mov	r1, r3
 80025a2:	4809      	ldr	r0, [pc, #36]	; (80025c8 <MX_GPIO_Init+0x2e4>)
 80025a4:	f001 ff9a 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80025a8:	23c8      	movs	r3, #200	; 0xc8
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ac:	2301      	movs	r3, #1
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	637b      	str	r3, [r7, #52]	; 0x34
 80025b4:	e016      	b.n	80025e4 <MX_GPIO_Init+0x300>
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020c00 	.word	0x40020c00
 80025c0:	40022000 	.word	0x40022000
 80025c4:	40022800 	.word	0x40022800
 80025c8:	40021c00 	.word	0x40021c00
 80025cc:	40021800 	.word	0x40021800
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40020400 	.word	0x40020400
 80025d8:	40022400 	.word	0x40022400
 80025dc:	10120000 	.word	0x10120000
 80025e0:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e4:	2300      	movs	r3, #0
 80025e6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ec:	4619      	mov	r1, r3
 80025ee:	4822      	ldr	r0, [pc, #136]	; (8002678 <MX_GPIO_Init+0x394>)
 80025f0:	f001 ff74 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80025f4:	2305      	movs	r3, #5
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002600:	2303      	movs	r3, #3
 8002602:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002604:	230a      	movs	r3, #10
 8002606:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002608:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800260c:	4619      	mov	r1, r3
 800260e:	481b      	ldr	r0, [pc, #108]	; (800267c <MX_GPIO_Init+0x398>)
 8002610:	f001 ff64 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002614:	2304      	movs	r3, #4
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002618:	2300      	movs	r3, #0
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002620:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002624:	4619      	mov	r1, r3
 8002626:	4814      	ldr	r0, [pc, #80]	; (8002678 <MX_GPIO_Init+0x394>)
 8002628:	f001 ff58 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800262c:	2328      	movs	r3, #40	; 0x28
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002630:	2302      	movs	r3, #2
 8002632:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002638:	2303      	movs	r3, #3
 800263a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800263c:	230a      	movs	r3, #10
 800263e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002640:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002644:	4619      	mov	r1, r3
 8002646:	480e      	ldr	r0, [pc, #56]	; (8002680 <MX_GPIO_Init+0x39c>)
 8002648:	f001 ff48 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800264c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	2300      	movs	r3, #0
 800265c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800265e:	2305      	movs	r3, #5
 8002660:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002662:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002666:	4619      	mov	r1, r3
 8002668:	4806      	ldr	r0, [pc, #24]	; (8002684 <MX_GPIO_Init+0x3a0>)
 800266a:	f001 ff37 	bl	80044dc <HAL_GPIO_Init>

}
 800266e:	bf00      	nop
 8002670:	3740      	adds	r7, #64	; 0x40
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40021800 	.word	0x40021800
 800267c:	40020800 	.word	0x40020800
 8002680:	40020000 	.word	0x40020000
 8002684:	40020400 	.word	0x40020400

08002688 <LED_Toggle>:
void LED_Off(){

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
}

void LED_Toggle(){
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 800268c:	2102      	movs	r1, #2
 800268e:	4802      	ldr	r0, [pc, #8]	; (8002698 <LED_Toggle+0x10>)
 8002690:	f002 f901 	bl	8004896 <HAL_GPIO_TogglePin>
}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40022000 	.word	0x40022000

0800269c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80026a0:	b672      	cpsid	i
}
 80026a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026a4:	e7fe      	b.n	80026a4 <Error_Handler+0x8>
	...

080026a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80026ae:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <HAL_MspInit+0x44>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4a0e      	ldr	r2, [pc, #56]	; (80026ec <HAL_MspInit+0x44>)
 80026b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ba:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <HAL_MspInit+0x44>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	607b      	str	r3, [r7, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_MspInit+0x44>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	4a08      	ldr	r2, [pc, #32]	; (80026ec <HAL_MspInit+0x44>)
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d0:	6453      	str	r3, [r2, #68]	; 0x44
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_MspInit+0x44>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800

080026f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a21      	ldr	r2, [pc, #132]	; (8002794 <HAL_ADC_MspInit+0xa4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d13c      	bne.n	800278c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002712:	4b21      	ldr	r3, [pc, #132]	; (8002798 <HAL_ADC_MspInit+0xa8>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	4a20      	ldr	r2, [pc, #128]	; (8002798 <HAL_ADC_MspInit+0xa8>)
 8002718:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800271c:	6453      	str	r3, [r2, #68]	; 0x44
 800271e:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <HAL_ADC_MspInit+0xa8>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800272a:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <HAL_ADC_MspInit+0xa8>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a1a      	ldr	r2, [pc, #104]	; (8002798 <HAL_ADC_MspInit+0xa8>)
 8002730:	f043 0320 	orr.w	r3, r3, #32
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b18      	ldr	r3, [pc, #96]	; (8002798 <HAL_ADC_MspInit+0xa8>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_ADC_MspInit+0xa8>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a14      	ldr	r2, [pc, #80]	; (8002798 <HAL_ADC_MspInit+0xa8>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_ADC_MspInit+0xa8>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800275a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800275e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002760:	2303      	movs	r3, #3
 8002762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	4619      	mov	r1, r3
 800276e:	480b      	ldr	r0, [pc, #44]	; (800279c <HAL_ADC_MspInit+0xac>)
 8002770:	f001 feb4 	bl	80044dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002774:	2301      	movs	r3, #1
 8002776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002778:	2303      	movs	r3, #3
 800277a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	4619      	mov	r1, r3
 8002786:	4806      	ldr	r0, [pc, #24]	; (80027a0 <HAL_ADC_MspInit+0xb0>)
 8002788:	f001 fea8 	bl	80044dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800278c:	bf00      	nop
 800278e:	3728      	adds	r7, #40	; 0x28
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40012200 	.word	0x40012200
 8002798:	40023800 	.word	0x40023800
 800279c:	40021400 	.word	0x40021400
 80027a0:	40020000 	.word	0x40020000

080027a4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <HAL_CRC_MspInit+0x38>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d10b      	bne.n	80027ce <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <HAL_CRC_MspInit+0x3c>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <HAL_CRC_MspInit+0x3c>)
 80027bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <HAL_CRC_MspInit+0x3c>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40023000 	.word	0x40023000
 80027e0:	40023800 	.word	0x40023800

080027e4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08e      	sub	sp, #56	; 0x38
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a50      	ldr	r2, [pc, #320]	; (8002944 <HAL_DCMI_MspInit+0x160>)
 8002802:	4293      	cmp	r3, r2
 8002804:	f040 809a 	bne.w	800293c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002808:	4b4f      	ldr	r3, [pc, #316]	; (8002948 <HAL_DCMI_MspInit+0x164>)
 800280a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280c:	4a4e      	ldr	r2, [pc, #312]	; (8002948 <HAL_DCMI_MspInit+0x164>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6353      	str	r3, [r2, #52]	; 0x34
 8002814:	4b4c      	ldr	r3, [pc, #304]	; (8002948 <HAL_DCMI_MspInit+0x164>)
 8002816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	623b      	str	r3, [r7, #32]
 800281e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002820:	4b49      	ldr	r3, [pc, #292]	; (8002948 <HAL_DCMI_MspInit+0x164>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	4a48      	ldr	r2, [pc, #288]	; (8002948 <HAL_DCMI_MspInit+0x164>)
 8002826:	f043 0310 	orr.w	r3, r3, #16
 800282a:	6313      	str	r3, [r2, #48]	; 0x30
 800282c:	4b46      	ldr	r3, [pc, #280]	; (8002948 <HAL_DCMI_MspInit+0x164>)
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002838:	4b43      	ldr	r3, [pc, #268]	; (8002948 <HAL_DCMI_MspInit+0x164>)
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	4a42      	ldr	r2, [pc, #264]	; (8002948 <HAL_DCMI_MspInit+0x164>)
 800283e:	f043 0308 	orr.w	r3, r3, #8
 8002842:	6313      	str	r3, [r2, #48]	; 0x30
 8002844:	4b40      	ldr	r3, [pc, #256]	; (8002948 <HAL_DCMI_MspInit+0x164>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002850:	4b3d      	ldr	r3, [pc, #244]	; (8002948 <HAL_DCMI_MspInit+0x164>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	4a3c      	ldr	r2, [pc, #240]	; (8002948 <HAL_DCMI_MspInit+0x164>)
 8002856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800285a:	6313      	str	r3, [r2, #48]	; 0x30
 800285c:	4b3a      	ldr	r3, [pc, #232]	; (8002948 <HAL_DCMI_MspInit+0x164>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002868:	4b37      	ldr	r3, [pc, #220]	; (8002948 <HAL_DCMI_MspInit+0x164>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	4a36      	ldr	r2, [pc, #216]	; (8002948 <HAL_DCMI_MspInit+0x164>)
 800286e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002872:	6313      	str	r3, [r2, #48]	; 0x30
 8002874:	4b34      	ldr	r3, [pc, #208]	; (8002948 <HAL_DCMI_MspInit+0x164>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002880:	4b31      	ldr	r3, [pc, #196]	; (8002948 <HAL_DCMI_MspInit+0x164>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	4a30      	ldr	r2, [pc, #192]	; (8002948 <HAL_DCMI_MspInit+0x164>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6313      	str	r3, [r2, #48]	; 0x30
 800288c:	4b2e      	ldr	r3, [pc, #184]	; (8002948 <HAL_DCMI_MspInit+0x164>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002898:	2360      	movs	r3, #96	; 0x60
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a4:	2300      	movs	r3, #0
 80028a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028a8:	230d      	movs	r3, #13
 80028aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b0:	4619      	mov	r1, r3
 80028b2:	4826      	ldr	r0, [pc, #152]	; (800294c <HAL_DCMI_MspInit+0x168>)
 80028b4:	f001 fe12 	bl	80044dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80028b8:	2308      	movs	r3, #8
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028c8:	230d      	movs	r3, #13
 80028ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80028cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d0:	4619      	mov	r1, r3
 80028d2:	481f      	ldr	r0, [pc, #124]	; (8002950 <HAL_DCMI_MspInit+0x16c>)
 80028d4:	f001 fe02 	bl	80044dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80028d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028de:	2302      	movs	r3, #2
 80028e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e6:	2300      	movs	r3, #0
 80028e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028ea:	230d      	movs	r3, #13
 80028ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80028ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f2:	4619      	mov	r1, r3
 80028f4:	4817      	ldr	r0, [pc, #92]	; (8002954 <HAL_DCMI_MspInit+0x170>)
 80028f6:	f001 fdf1 	bl	80044dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80028fa:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002908:	2300      	movs	r3, #0
 800290a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800290c:	230d      	movs	r3, #13
 800290e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002914:	4619      	mov	r1, r3
 8002916:	4810      	ldr	r0, [pc, #64]	; (8002958 <HAL_DCMI_MspInit+0x174>)
 8002918:	f001 fde0 	bl	80044dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800291c:	2350      	movs	r3, #80	; 0x50
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002928:	2300      	movs	r3, #0
 800292a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800292c:	230d      	movs	r3, #13
 800292e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002934:	4619      	mov	r1, r3
 8002936:	4809      	ldr	r0, [pc, #36]	; (800295c <HAL_DCMI_MspInit+0x178>)
 8002938:	f001 fdd0 	bl	80044dc <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800293c:	bf00      	nop
 800293e:	3738      	adds	r7, #56	; 0x38
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	50050000 	.word	0x50050000
 8002948:	40023800 	.word	0x40023800
 800294c:	40021000 	.word	0x40021000
 8002950:	40020c00 	.word	0x40020c00
 8002954:	40021800 	.word	0x40021800
 8002958:	40021c00 	.word	0x40021c00
 800295c:	40020000 	.word	0x40020000

08002960 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0d      	ldr	r2, [pc, #52]	; (80029a4 <HAL_DMA2D_MspInit+0x44>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d113      	bne.n	800299a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <HAL_DMA2D_MspInit+0x48>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	4a0c      	ldr	r2, [pc, #48]	; (80029a8 <HAL_DMA2D_MspInit+0x48>)
 8002978:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800297c:	6313      	str	r3, [r2, #48]	; 0x30
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <HAL_DMA2D_MspInit+0x48>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800298a:	2200      	movs	r2, #0
 800298c:	2100      	movs	r1, #0
 800298e:	205a      	movs	r0, #90	; 0x5a
 8002990:	f001 fa1d 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002994:	205a      	movs	r0, #90	; 0x5a
 8002996:	f001 fa36 	bl	8003e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	4002b000 	.word	0x4002b000
 80029a8:	40023800 	.word	0x40023800

080029ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08c      	sub	sp, #48	; 0x30
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 031c 	add.w	r3, r7, #28
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a2f      	ldr	r2, [pc, #188]	; (8002a88 <HAL_I2C_MspInit+0xdc>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d129      	bne.n	8002a22 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ce:	4b2f      	ldr	r3, [pc, #188]	; (8002a8c <HAL_I2C_MspInit+0xe0>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	4a2e      	ldr	r2, [pc, #184]	; (8002a8c <HAL_I2C_MspInit+0xe0>)
 80029d4:	f043 0302 	orr.w	r3, r3, #2
 80029d8:	6313      	str	r3, [r2, #48]	; 0x30
 80029da:	4b2c      	ldr	r3, [pc, #176]	; (8002a8c <HAL_I2C_MspInit+0xe0>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	61bb      	str	r3, [r7, #24]
 80029e4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80029e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ec:	2312      	movs	r3, #18
 80029ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029f0:	2301      	movs	r3, #1
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f4:	2300      	movs	r3, #0
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029f8:	2304      	movs	r3, #4
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fc:	f107 031c 	add.w	r3, r7, #28
 8002a00:	4619      	mov	r1, r3
 8002a02:	4823      	ldr	r0, [pc, #140]	; (8002a90 <HAL_I2C_MspInit+0xe4>)
 8002a04:	f001 fd6a 	bl	80044dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a08:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <HAL_I2C_MspInit+0xe0>)
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	4a1f      	ldr	r2, [pc, #124]	; (8002a8c <HAL_I2C_MspInit+0xe0>)
 8002a0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a12:	6413      	str	r3, [r2, #64]	; 0x40
 8002a14:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <HAL_I2C_MspInit+0xe0>)
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a20:	e02d      	b.n	8002a7e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1b      	ldr	r2, [pc, #108]	; (8002a94 <HAL_I2C_MspInit+0xe8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d128      	bne.n	8002a7e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a2c:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <HAL_I2C_MspInit+0xe0>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	4a16      	ldr	r2, [pc, #88]	; (8002a8c <HAL_I2C_MspInit+0xe0>)
 8002a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a36:	6313      	str	r3, [r2, #48]	; 0x30
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <HAL_I2C_MspInit+0xe0>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002a44:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a4a:	2312      	movs	r3, #18
 8002a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a52:	2303      	movs	r3, #3
 8002a54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a56:	2304      	movs	r3, #4
 8002a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a5a:	f107 031c 	add.w	r3, r7, #28
 8002a5e:	4619      	mov	r1, r3
 8002a60:	480d      	ldr	r0, [pc, #52]	; (8002a98 <HAL_I2C_MspInit+0xec>)
 8002a62:	f001 fd3b 	bl	80044dc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_I2C_MspInit+0xe0>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	4a08      	ldr	r2, [pc, #32]	; (8002a8c <HAL_I2C_MspInit+0xe0>)
 8002a6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a70:	6413      	str	r3, [r2, #64]	; 0x40
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_I2C_MspInit+0xe0>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
}
 8002a7e:	bf00      	nop
 8002a80:	3730      	adds	r7, #48	; 0x30
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40005400 	.word	0x40005400
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40020400 	.word	0x40020400
 8002a94:	40005c00 	.word	0x40005c00
 8002a98:	40021c00 	.word	0x40021c00

08002a9c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08e      	sub	sp, #56	; 0x38
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a55      	ldr	r2, [pc, #340]	; (8002c10 <HAL_LTDC_MspInit+0x174>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	f040 80a3 	bne.w	8002c06 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002ac0:	4b54      	ldr	r3, [pc, #336]	; (8002c14 <HAL_LTDC_MspInit+0x178>)
 8002ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac4:	4a53      	ldr	r2, [pc, #332]	; (8002c14 <HAL_LTDC_MspInit+0x178>)
 8002ac6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aca:	6453      	str	r3, [r2, #68]	; 0x44
 8002acc:	4b51      	ldr	r3, [pc, #324]	; (8002c14 <HAL_LTDC_MspInit+0x178>)
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ad4:	623b      	str	r3, [r7, #32]
 8002ad6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ad8:	4b4e      	ldr	r3, [pc, #312]	; (8002c14 <HAL_LTDC_MspInit+0x178>)
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	4a4d      	ldr	r2, [pc, #308]	; (8002c14 <HAL_LTDC_MspInit+0x178>)
 8002ade:	f043 0310 	orr.w	r3, r3, #16
 8002ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae4:	4b4b      	ldr	r3, [pc, #300]	; (8002c14 <HAL_LTDC_MspInit+0x178>)
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002af0:	4b48      	ldr	r3, [pc, #288]	; (8002c14 <HAL_LTDC_MspInit+0x178>)
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	4a47      	ldr	r2, [pc, #284]	; (8002c14 <HAL_LTDC_MspInit+0x178>)
 8002af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002afa:	6313      	str	r3, [r2, #48]	; 0x30
 8002afc:	4b45      	ldr	r3, [pc, #276]	; (8002c14 <HAL_LTDC_MspInit+0x178>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002b08:	4b42      	ldr	r3, [pc, #264]	; (8002c14 <HAL_LTDC_MspInit+0x178>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	4a41      	ldr	r2, [pc, #260]	; (8002c14 <HAL_LTDC_MspInit+0x178>)
 8002b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b12:	6313      	str	r3, [r2, #48]	; 0x30
 8002b14:	4b3f      	ldr	r3, [pc, #252]	; (8002c14 <HAL_LTDC_MspInit+0x178>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b20:	4b3c      	ldr	r3, [pc, #240]	; (8002c14 <HAL_LTDC_MspInit+0x178>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	4a3b      	ldr	r2, [pc, #236]	; (8002c14 <HAL_LTDC_MspInit+0x178>)
 8002b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2c:	4b39      	ldr	r3, [pc, #228]	; (8002c14 <HAL_LTDC_MspInit+0x178>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b38:	4b36      	ldr	r3, [pc, #216]	; (8002c14 <HAL_LTDC_MspInit+0x178>)
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	4a35      	ldr	r2, [pc, #212]	; (8002c14 <HAL_LTDC_MspInit+0x178>)
 8002b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b42:	6313      	str	r3, [r2, #48]	; 0x30
 8002b44:	4b33      	ldr	r3, [pc, #204]	; (8002c14 <HAL_LTDC_MspInit+0x178>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002b50:	2310      	movs	r3, #16
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b60:	230e      	movs	r3, #14
 8002b62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b68:	4619      	mov	r1, r3
 8002b6a:	482b      	ldr	r0, [pc, #172]	; (8002c18 <HAL_LTDC_MspInit+0x17c>)
 8002b6c:	f001 fcb6 	bl	80044dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002b70:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b76:	2302      	movs	r3, #2
 8002b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b82:	230e      	movs	r3, #14
 8002b84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4823      	ldr	r0, [pc, #140]	; (8002c1c <HAL_LTDC_MspInit+0x180>)
 8002b8e:	f001 fca5 	bl	80044dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002b92:	23f7      	movs	r3, #247	; 0xf7
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b96:	2302      	movs	r3, #2
 8002b98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ba2:	230e      	movs	r3, #14
 8002ba4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002baa:	4619      	mov	r1, r3
 8002bac:	481c      	ldr	r0, [pc, #112]	; (8002c20 <HAL_LTDC_MspInit+0x184>)
 8002bae:	f001 fc95 	bl	80044dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002bc4:	2309      	movs	r3, #9
 8002bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4815      	ldr	r0, [pc, #84]	; (8002c24 <HAL_LTDC_MspInit+0x188>)
 8002bd0:	f001 fc84 	bl	80044dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002bd4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be2:	2300      	movs	r3, #0
 8002be4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002be6:	230e      	movs	r3, #14
 8002be8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bee:	4619      	mov	r1, r3
 8002bf0:	480d      	ldr	r0, [pc, #52]	; (8002c28 <HAL_LTDC_MspInit+0x18c>)
 8002bf2:	f001 fc73 	bl	80044dc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	2058      	movs	r0, #88	; 0x58
 8002bfc:	f001 f8e7 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002c00:	2058      	movs	r0, #88	; 0x58
 8002c02:	f001 f900 	bl	8003e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002c06:	bf00      	nop
 8002c08:	3738      	adds	r7, #56	; 0x38
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40016800 	.word	0x40016800
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40022400 	.word	0x40022400
 8002c20:	40022800 	.word	0x40022800
 8002c24:	40021800 	.word	0x40021800
 8002c28:	40022000 	.word	0x40022000

08002c2c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08c      	sub	sp, #48	; 0x30
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c34:	f107 031c 	add.w	r3, r7, #28
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a3b      	ldr	r2, [pc, #236]	; (8002d38 <HAL_QSPI_MspInit+0x10c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d170      	bne.n	8002d30 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002c4e:	4b3b      	ldr	r3, [pc, #236]	; (8002d3c <HAL_QSPI_MspInit+0x110>)
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	4a3a      	ldr	r2, [pc, #232]	; (8002d3c <HAL_QSPI_MspInit+0x110>)
 8002c54:	f043 0302 	orr.w	r3, r3, #2
 8002c58:	6393      	str	r3, [r2, #56]	; 0x38
 8002c5a:	4b38      	ldr	r3, [pc, #224]	; (8002d3c <HAL_QSPI_MspInit+0x110>)
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	61bb      	str	r3, [r7, #24]
 8002c64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c66:	4b35      	ldr	r3, [pc, #212]	; (8002d3c <HAL_QSPI_MspInit+0x110>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	4a34      	ldr	r2, [pc, #208]	; (8002d3c <HAL_QSPI_MspInit+0x110>)
 8002c6c:	f043 0310 	orr.w	r3, r3, #16
 8002c70:	6313      	str	r3, [r2, #48]	; 0x30
 8002c72:	4b32      	ldr	r3, [pc, #200]	; (8002d3c <HAL_QSPI_MspInit+0x110>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c7e:	4b2f      	ldr	r3, [pc, #188]	; (8002d3c <HAL_QSPI_MspInit+0x110>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	4a2e      	ldr	r2, [pc, #184]	; (8002d3c <HAL_QSPI_MspInit+0x110>)
 8002c84:	f043 0302 	orr.w	r3, r3, #2
 8002c88:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8a:	4b2c      	ldr	r3, [pc, #176]	; (8002d3c <HAL_QSPI_MspInit+0x110>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c96:	4b29      	ldr	r3, [pc, #164]	; (8002d3c <HAL_QSPI_MspInit+0x110>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	4a28      	ldr	r2, [pc, #160]	; (8002d3c <HAL_QSPI_MspInit+0x110>)
 8002c9c:	f043 0308 	orr.w	r3, r3, #8
 8002ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca2:	4b26      	ldr	r3, [pc, #152]	; (8002d3c <HAL_QSPI_MspInit+0x110>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002cae:	2304      	movs	r3, #4
 8002cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002cbe:	2309      	movs	r3, #9
 8002cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002cc2:	f107 031c 	add.w	r3, r7, #28
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	481d      	ldr	r0, [pc, #116]	; (8002d40 <HAL_QSPI_MspInit+0x114>)
 8002cca:	f001 fc07 	bl	80044dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002cce:	2340      	movs	r3, #64	; 0x40
 8002cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002cde:	230a      	movs	r3, #10
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002ce2:	f107 031c 	add.w	r3, r7, #28
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4816      	ldr	r0, [pc, #88]	; (8002d44 <HAL_QSPI_MspInit+0x118>)
 8002cea:	f001 fbf7 	bl	80044dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cee:	2304      	movs	r3, #4
 8002cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002cfe:	2309      	movs	r3, #9
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d02:	f107 031c 	add.w	r3, r7, #28
 8002d06:	4619      	mov	r1, r3
 8002d08:	480e      	ldr	r0, [pc, #56]	; (8002d44 <HAL_QSPI_MspInit+0x118>)
 8002d0a:	f001 fbe7 	bl	80044dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002d0e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d14:	2302      	movs	r3, #2
 8002d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002d20:	2309      	movs	r3, #9
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d24:	f107 031c 	add.w	r3, r7, #28
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4807      	ldr	r0, [pc, #28]	; (8002d48 <HAL_QSPI_MspInit+0x11c>)
 8002d2c:	f001 fbd6 	bl	80044dc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002d30:	bf00      	nop
 8002d32:	3730      	adds	r7, #48	; 0x30
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	a0001000 	.word	0xa0001000
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40020400 	.word	0x40020400
 8002d48:	40020c00 	.word	0x40020c00

08002d4c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a07      	ldr	r2, [pc, #28]	; (8002d78 <HAL_RTC_MspInit+0x2c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d105      	bne.n	8002d6a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d5e:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <HAL_RTC_MspInit+0x30>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	4a06      	ldr	r2, [pc, #24]	; (8002d7c <HAL_RTC_MspInit+0x30>)
 8002d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d68:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40002800 	.word	0x40002800
 8002d7c:	40023800 	.word	0x40023800

08002d80 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	; 0x28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d88:	f107 0314 	add.w	r3, r7, #20
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a25      	ldr	r2, [pc, #148]	; (8002e34 <HAL_SD_MspInit+0xb4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d144      	bne.n	8002e2c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002da2:	4b25      	ldr	r3, [pc, #148]	; (8002e38 <HAL_SD_MspInit+0xb8>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	4a24      	ldr	r2, [pc, #144]	; (8002e38 <HAL_SD_MspInit+0xb8>)
 8002da8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dac:	6453      	str	r3, [r2, #68]	; 0x44
 8002dae:	4b22      	ldr	r3, [pc, #136]	; (8002e38 <HAL_SD_MspInit+0xb8>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dba:	4b1f      	ldr	r3, [pc, #124]	; (8002e38 <HAL_SD_MspInit+0xb8>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	4a1e      	ldr	r2, [pc, #120]	; (8002e38 <HAL_SD_MspInit+0xb8>)
 8002dc0:	f043 0304 	orr.w	r3, r3, #4
 8002dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc6:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <HAL_SD_MspInit+0xb8>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dd2:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <HAL_SD_MspInit+0xb8>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4a18      	ldr	r2, [pc, #96]	; (8002e38 <HAL_SD_MspInit+0xb8>)
 8002dd8:	f043 0308 	orr.w	r3, r3, #8
 8002ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dde:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <HAL_SD_MspInit+0xb8>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002dea:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002dee:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df0:	2302      	movs	r3, #2
 8002df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002dfc:	230c      	movs	r3, #12
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	4619      	mov	r1, r3
 8002e06:	480d      	ldr	r0, [pc, #52]	; (8002e3c <HAL_SD_MspInit+0xbc>)
 8002e08:	f001 fb68 	bl	80044dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002e0c:	2304      	movs	r3, #4
 8002e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e10:	2302      	movs	r3, #2
 8002e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002e1c:	230c      	movs	r3, #12
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002e20:	f107 0314 	add.w	r3, r7, #20
 8002e24:	4619      	mov	r1, r3
 8002e26:	4806      	ldr	r0, [pc, #24]	; (8002e40 <HAL_SD_MspInit+0xc0>)
 8002e28:	f001 fb58 	bl	80044dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002e2c:	bf00      	nop
 8002e2e:	3728      	adds	r7, #40	; 0x28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40012c00 	.word	0x40012c00
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40020800 	.word	0x40020800
 8002e40:	40020c00 	.word	0x40020c00

08002e44 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08a      	sub	sp, #40	; 0x28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4c:	f107 0314 	add.w	r3, r7, #20
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002e64:	d127      	bne.n	8002eb6 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002e66:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	4a15      	ldr	r2, [pc, #84]	; (8002ec0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e70:	6413      	str	r3, [r2, #64]	; 0x40
 8002e72:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	4a0f      	ldr	r2, [pc, #60]	; (8002ec0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e84:	f043 0308 	orr.w	r3, r3, #8
 8002e88:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002ea6:	2308      	movs	r3, #8
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002eaa:	f107 0314 	add.w	r3, r7, #20
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4804      	ldr	r0, [pc, #16]	; (8002ec4 <HAL_SPDIFRX_MspInit+0x80>)
 8002eb2:	f001 fb13 	bl	80044dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002eb6:	bf00      	nop
 8002eb8:	3728      	adds	r7, #40	; 0x28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40020c00 	.word	0x40020c00

08002ec8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08e      	sub	sp, #56	; 0x38
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a44      	ldr	r2, [pc, #272]	; (8002ff8 <HAL_TIM_Base_MspInit+0x130>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d10c      	bne.n	8002f04 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002eea:	4b44      	ldr	r3, [pc, #272]	; (8002ffc <HAL_TIM_Base_MspInit+0x134>)
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	4a43      	ldr	r2, [pc, #268]	; (8002ffc <HAL_TIM_Base_MspInit+0x134>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ef6:	4b41      	ldr	r3, [pc, #260]	; (8002ffc <HAL_TIM_Base_MspInit+0x134>)
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	623b      	str	r3, [r7, #32]
 8002f00:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002f02:	e074      	b.n	8002fee <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0c:	d10c      	bne.n	8002f28 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f0e:	4b3b      	ldr	r3, [pc, #236]	; (8002ffc <HAL_TIM_Base_MspInit+0x134>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	4a3a      	ldr	r2, [pc, #232]	; (8002ffc <HAL_TIM_Base_MspInit+0x134>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1a:	4b38      	ldr	r3, [pc, #224]	; (8002ffc <HAL_TIM_Base_MspInit+0x134>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	61fb      	str	r3, [r7, #28]
 8002f24:	69fb      	ldr	r3, [r7, #28]
}
 8002f26:	e062      	b.n	8002fee <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM3)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a34      	ldr	r2, [pc, #208]	; (8003000 <HAL_TIM_Base_MspInit+0x138>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d10c      	bne.n	8002f4c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f32:	4b32      	ldr	r3, [pc, #200]	; (8002ffc <HAL_TIM_Base_MspInit+0x134>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a31      	ldr	r2, [pc, #196]	; (8002ffc <HAL_TIM_Base_MspInit+0x134>)
 8002f38:	f043 0302 	orr.w	r3, r3, #2
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b2f      	ldr	r3, [pc, #188]	; (8002ffc <HAL_TIM_Base_MspInit+0x134>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	61bb      	str	r3, [r7, #24]
 8002f48:	69bb      	ldr	r3, [r7, #24]
}
 8002f4a:	e050      	b.n	8002fee <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM5)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a2c      	ldr	r2, [pc, #176]	; (8003004 <HAL_TIM_Base_MspInit+0x13c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d10c      	bne.n	8002f70 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f56:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <HAL_TIM_Base_MspInit+0x134>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	4a28      	ldr	r2, [pc, #160]	; (8002ffc <HAL_TIM_Base_MspInit+0x134>)
 8002f5c:	f043 0308 	orr.w	r3, r3, #8
 8002f60:	6413      	str	r3, [r2, #64]	; 0x40
 8002f62:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <HAL_TIM_Base_MspInit+0x134>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	697b      	ldr	r3, [r7, #20]
}
 8002f6e:	e03e      	b.n	8002fee <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM8)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a24      	ldr	r2, [pc, #144]	; (8003008 <HAL_TIM_Base_MspInit+0x140>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d10c      	bne.n	8002f94 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f7a:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <HAL_TIM_Base_MspInit+0x134>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	4a1f      	ldr	r2, [pc, #124]	; (8002ffc <HAL_TIM_Base_MspInit+0x134>)
 8002f80:	f043 0302 	orr.w	r3, r3, #2
 8002f84:	6453      	str	r3, [r2, #68]	; 0x44
 8002f86:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <HAL_TIM_Base_MspInit+0x134>)
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	693b      	ldr	r3, [r7, #16]
}
 8002f92:	e02c      	b.n	8002fee <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM12)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1c      	ldr	r2, [pc, #112]	; (800300c <HAL_TIM_Base_MspInit+0x144>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d127      	bne.n	8002fee <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002f9e:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <HAL_TIM_Base_MspInit+0x134>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	4a16      	ldr	r2, [pc, #88]	; (8002ffc <HAL_TIM_Base_MspInit+0x134>)
 8002fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002faa:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <HAL_TIM_Base_MspInit+0x134>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fb6:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <HAL_TIM_Base_MspInit+0x134>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	4a10      	ldr	r2, [pc, #64]	; (8002ffc <HAL_TIM_Base_MspInit+0x134>)
 8002fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <HAL_TIM_Base_MspInit+0x134>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002fce:	2340      	movs	r3, #64	; 0x40
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002fde:	2309      	movs	r3, #9
 8002fe0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4809      	ldr	r0, [pc, #36]	; (8003010 <HAL_TIM_Base_MspInit+0x148>)
 8002fea:	f001 fa77 	bl	80044dc <HAL_GPIO_Init>
}
 8002fee:	bf00      	nop
 8002ff0:	3738      	adds	r7, #56	; 0x38
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40010000 	.word	0x40010000
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40000400 	.word	0x40000400
 8003004:	40000c00 	.word	0x40000c00
 8003008:	40010400 	.word	0x40010400
 800300c:	40001800 	.word	0x40001800
 8003010:	40021c00 	.word	0x40021c00

08003014 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08c      	sub	sp, #48	; 0x30
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	f107 031c 	add.w	r3, r7, #28
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a45      	ldr	r2, [pc, #276]	; (8003148 <HAL_TIM_MspPostInit+0x134>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d11d      	bne.n	8003072 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003036:	4b45      	ldr	r3, [pc, #276]	; (800314c <HAL_TIM_MspPostInit+0x138>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	4a44      	ldr	r2, [pc, #272]	; (800314c <HAL_TIM_MspPostInit+0x138>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	6313      	str	r3, [r2, #48]	; 0x30
 8003042:	4b42      	ldr	r3, [pc, #264]	; (800314c <HAL_TIM_MspPostInit+0x138>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	61bb      	str	r3, [r7, #24]
 800304c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800304e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003054:	2302      	movs	r3, #2
 8003056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	2300      	movs	r3, #0
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305c:	2300      	movs	r3, #0
 800305e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003060:	2301      	movs	r3, #1
 8003062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003064:	f107 031c 	add.w	r3, r7, #28
 8003068:	4619      	mov	r1, r3
 800306a:	4839      	ldr	r0, [pc, #228]	; (8003150 <HAL_TIM_MspPostInit+0x13c>)
 800306c:	f001 fa36 	bl	80044dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003070:	e065      	b.n	800313e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM2)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307a:	d11d      	bne.n	80030b8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800307c:	4b33      	ldr	r3, [pc, #204]	; (800314c <HAL_TIM_MspPostInit+0x138>)
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	4a32      	ldr	r2, [pc, #200]	; (800314c <HAL_TIM_MspPostInit+0x138>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	6313      	str	r3, [r2, #48]	; 0x30
 8003088:	4b30      	ldr	r3, [pc, #192]	; (800314c <HAL_TIM_MspPostInit+0x138>)
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309a:	2302      	movs	r3, #2
 800309c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a2:	2300      	movs	r3, #0
 80030a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030a6:	2301      	movs	r3, #1
 80030a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80030aa:	f107 031c 	add.w	r3, r7, #28
 80030ae:	4619      	mov	r1, r3
 80030b0:	4827      	ldr	r0, [pc, #156]	; (8003150 <HAL_TIM_MspPostInit+0x13c>)
 80030b2:	f001 fa13 	bl	80044dc <HAL_GPIO_Init>
}
 80030b6:	e042      	b.n	800313e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a25      	ldr	r2, [pc, #148]	; (8003154 <HAL_TIM_MspPostInit+0x140>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d11c      	bne.n	80030fc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c2:	4b22      	ldr	r3, [pc, #136]	; (800314c <HAL_TIM_MspPostInit+0x138>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	4a21      	ldr	r2, [pc, #132]	; (800314c <HAL_TIM_MspPostInit+0x138>)
 80030c8:	f043 0302 	orr.w	r3, r3, #2
 80030cc:	6313      	str	r3, [r2, #48]	; 0x30
 80030ce:	4b1f      	ldr	r3, [pc, #124]	; (800314c <HAL_TIM_MspPostInit+0x138>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80030da:	2310      	movs	r3, #16
 80030dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030de:	2302      	movs	r3, #2
 80030e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e6:	2300      	movs	r3, #0
 80030e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030ea:	2302      	movs	r3, #2
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80030ee:	f107 031c 	add.w	r3, r7, #28
 80030f2:	4619      	mov	r1, r3
 80030f4:	4818      	ldr	r0, [pc, #96]	; (8003158 <HAL_TIM_MspPostInit+0x144>)
 80030f6:	f001 f9f1 	bl	80044dc <HAL_GPIO_Init>
}
 80030fa:	e020      	b.n	800313e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a16      	ldr	r2, [pc, #88]	; (800315c <HAL_TIM_MspPostInit+0x148>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d11b      	bne.n	800313e <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_TIM_MspPostInit+0x138>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4a10      	ldr	r2, [pc, #64]	; (800314c <HAL_TIM_MspPostInit+0x138>)
 800310c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <HAL_TIM_MspPostInit+0x138>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800311e:	2301      	movs	r3, #1
 8003120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003122:	2302      	movs	r3, #2
 8003124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003126:	2300      	movs	r3, #0
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312a:	2300      	movs	r3, #0
 800312c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800312e:	2302      	movs	r3, #2
 8003130:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003132:	f107 031c 	add.w	r3, r7, #28
 8003136:	4619      	mov	r1, r3
 8003138:	4809      	ldr	r0, [pc, #36]	; (8003160 <HAL_TIM_MspPostInit+0x14c>)
 800313a:	f001 f9cf 	bl	80044dc <HAL_GPIO_Init>
}
 800313e:	bf00      	nop
 8003140:	3730      	adds	r7, #48	; 0x30
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40010000 	.word	0x40010000
 800314c:	40023800 	.word	0x40023800
 8003150:	40020000 	.word	0x40020000
 8003154:	40000400 	.word	0x40000400
 8003158:	40020400 	.word	0x40020400
 800315c:	40000c00 	.word	0x40000c00
 8003160:	40022000 	.word	0x40022000

08003164 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08c      	sub	sp, #48	; 0x30
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316c:	f107 031c 	add.w	r3, r7, #28
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a3c      	ldr	r2, [pc, #240]	; (8003274 <HAL_UART_MspInit+0x110>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d145      	bne.n	8003212 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003186:	4b3c      	ldr	r3, [pc, #240]	; (8003278 <HAL_UART_MspInit+0x114>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	4a3b      	ldr	r2, [pc, #236]	; (8003278 <HAL_UART_MspInit+0x114>)
 800318c:	f043 0310 	orr.w	r3, r3, #16
 8003190:	6453      	str	r3, [r2, #68]	; 0x44
 8003192:	4b39      	ldr	r3, [pc, #228]	; (8003278 <HAL_UART_MspInit+0x114>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	f003 0310 	and.w	r3, r3, #16
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800319e:	4b36      	ldr	r3, [pc, #216]	; (8003278 <HAL_UART_MspInit+0x114>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	4a35      	ldr	r2, [pc, #212]	; (8003278 <HAL_UART_MspInit+0x114>)
 80031a4:	f043 0302 	orr.w	r3, r3, #2
 80031a8:	6313      	str	r3, [r2, #48]	; 0x30
 80031aa:	4b33      	ldr	r3, [pc, #204]	; (8003278 <HAL_UART_MspInit+0x114>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b6:	4b30      	ldr	r3, [pc, #192]	; (8003278 <HAL_UART_MspInit+0x114>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	4a2f      	ldr	r2, [pc, #188]	; (8003278 <HAL_UART_MspInit+0x114>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	6313      	str	r3, [r2, #48]	; 0x30
 80031c2:	4b2d      	ldr	r3, [pc, #180]	; (8003278 <HAL_UART_MspInit+0x114>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80031ce:	2380      	movs	r3, #128	; 0x80
 80031d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d2:	2302      	movs	r3, #2
 80031d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031da:	2300      	movs	r3, #0
 80031dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031de:	2307      	movs	r3, #7
 80031e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80031e2:	f107 031c 	add.w	r3, r7, #28
 80031e6:	4619      	mov	r1, r3
 80031e8:	4824      	ldr	r0, [pc, #144]	; (800327c <HAL_UART_MspInit+0x118>)
 80031ea:	f001 f977 	bl	80044dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80031ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f4:	2302      	movs	r3, #2
 80031f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fc:	2300      	movs	r3, #0
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003200:	2307      	movs	r3, #7
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003204:	f107 031c 	add.w	r3, r7, #28
 8003208:	4619      	mov	r1, r3
 800320a:	481d      	ldr	r0, [pc, #116]	; (8003280 <HAL_UART_MspInit+0x11c>)
 800320c:	f001 f966 	bl	80044dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003210:	e02c      	b.n	800326c <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1b      	ldr	r2, [pc, #108]	; (8003284 <HAL_UART_MspInit+0x120>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d127      	bne.n	800326c <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 800321c:	4b16      	ldr	r3, [pc, #88]	; (8003278 <HAL_UART_MspInit+0x114>)
 800321e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003220:	4a15      	ldr	r2, [pc, #84]	; (8003278 <HAL_UART_MspInit+0x114>)
 8003222:	f043 0320 	orr.w	r3, r3, #32
 8003226:	6453      	str	r3, [r2, #68]	; 0x44
 8003228:	4b13      	ldr	r3, [pc, #76]	; (8003278 <HAL_UART_MspInit+0x114>)
 800322a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003234:	4b10      	ldr	r3, [pc, #64]	; (8003278 <HAL_UART_MspInit+0x114>)
 8003236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003238:	4a0f      	ldr	r2, [pc, #60]	; (8003278 <HAL_UART_MspInit+0x114>)
 800323a:	f043 0304 	orr.w	r3, r3, #4
 800323e:	6313      	str	r3, [r2, #48]	; 0x30
 8003240:	4b0d      	ldr	r3, [pc, #52]	; (8003278 <HAL_UART_MspInit+0x114>)
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800324c:	23c0      	movs	r3, #192	; 0xc0
 800324e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003250:	2302      	movs	r3, #2
 8003252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003254:	2300      	movs	r3, #0
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003258:	2303      	movs	r3, #3
 800325a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800325c:	2308      	movs	r3, #8
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003260:	f107 031c 	add.w	r3, r7, #28
 8003264:	4619      	mov	r1, r3
 8003266:	4808      	ldr	r0, [pc, #32]	; (8003288 <HAL_UART_MspInit+0x124>)
 8003268:	f001 f938 	bl	80044dc <HAL_GPIO_Init>
}
 800326c:	bf00      	nop
 800326e:	3730      	adds	r7, #48	; 0x30
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40011000 	.word	0x40011000
 8003278:	40023800 	.word	0x40023800
 800327c:	40020400 	.word	0x40020400
 8003280:	40020000 	.word	0x40020000
 8003284:	40011400 	.word	0x40011400
 8003288:	40020800 	.word	0x40020800

0800328c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003292:	1d3b      	adds	r3, r7, #4
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	609a      	str	r2, [r3, #8]
 800329c:	60da      	str	r2, [r3, #12]
 800329e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80032a0:	4b3a      	ldr	r3, [pc, #232]	; (800338c <HAL_FMC_MspInit+0x100>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d16d      	bne.n	8003384 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80032a8:	4b38      	ldr	r3, [pc, #224]	; (800338c <HAL_FMC_MspInit+0x100>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80032ae:	4b38      	ldr	r3, [pc, #224]	; (8003390 <HAL_FMC_MspInit+0x104>)
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	4a37      	ldr	r2, [pc, #220]	; (8003390 <HAL_FMC_MspInit+0x104>)
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	6393      	str	r3, [r2, #56]	; 0x38
 80032ba:	4b35      	ldr	r3, [pc, #212]	; (8003390 <HAL_FMC_MspInit+0x104>)
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80032c6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80032ca:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032cc:	2302      	movs	r3, #2
 80032ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d4:	2303      	movs	r3, #3
 80032d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032d8:	230c      	movs	r3, #12
 80032da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032dc:	1d3b      	adds	r3, r7, #4
 80032de:	4619      	mov	r1, r3
 80032e0:	482c      	ldr	r0, [pc, #176]	; (8003394 <HAL_FMC_MspInit+0x108>)
 80032e2:	f001 f8fb 	bl	80044dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80032e6:	f248 1333 	movw	r3, #33075	; 0x8133
 80032ea:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ec:	2302      	movs	r3, #2
 80032ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f4:	2303      	movs	r3, #3
 80032f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032f8:	230c      	movs	r3, #12
 80032fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80032fc:	1d3b      	adds	r3, r7, #4
 80032fe:	4619      	mov	r1, r3
 8003300:	4825      	ldr	r0, [pc, #148]	; (8003398 <HAL_FMC_MspInit+0x10c>)
 8003302:	f001 f8eb 	bl	80044dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003306:	f24c 7303 	movw	r3, #50947	; 0xc703
 800330a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003314:	2303      	movs	r3, #3
 8003316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003318:	230c      	movs	r3, #12
 800331a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800331c:	1d3b      	adds	r3, r7, #4
 800331e:	4619      	mov	r1, r3
 8003320:	481e      	ldr	r0, [pc, #120]	; (800339c <HAL_FMC_MspInit+0x110>)
 8003322:	f001 f8db 	bl	80044dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003326:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800332a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332c:	2302      	movs	r3, #2
 800332e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003334:	2303      	movs	r3, #3
 8003336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003338:	230c      	movs	r3, #12
 800333a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800333c:	1d3b      	adds	r3, r7, #4
 800333e:	4619      	mov	r1, r3
 8003340:	4817      	ldr	r0, [pc, #92]	; (80033a0 <HAL_FMC_MspInit+0x114>)
 8003342:	f001 f8cb 	bl	80044dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003346:	2328      	movs	r3, #40	; 0x28
 8003348:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334a:	2302      	movs	r3, #2
 800334c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003352:	2303      	movs	r3, #3
 8003354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003356:	230c      	movs	r3, #12
 8003358:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	4619      	mov	r1, r3
 800335e:	4811      	ldr	r0, [pc, #68]	; (80033a4 <HAL_FMC_MspInit+0x118>)
 8003360:	f001 f8bc 	bl	80044dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003364:	2308      	movs	r3, #8
 8003366:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003368:	2302      	movs	r3, #2
 800336a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003370:	2303      	movs	r3, #3
 8003372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003374:	230c      	movs	r3, #12
 8003376:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003378:	1d3b      	adds	r3, r7, #4
 800337a:	4619      	mov	r1, r3
 800337c:	480a      	ldr	r0, [pc, #40]	; (80033a8 <HAL_FMC_MspInit+0x11c>)
 800337e:	f001 f8ad 	bl	80044dc <HAL_GPIO_Init>
 8003382:	e000      	b.n	8003386 <HAL_FMC_MspInit+0xfa>
    return;
 8003384:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20000970 	.word	0x20000970
 8003390:	40023800 	.word	0x40023800
 8003394:	40021000 	.word	0x40021000
 8003398:	40021800 	.word	0x40021800
 800339c:	40020c00 	.word	0x40020c00
 80033a0:	40021400 	.word	0x40021400
 80033a4:	40021c00 	.word	0x40021c00
 80033a8:	40020800 	.word	0x40020800

080033ac <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80033b4:	f7ff ff6a 	bl	800328c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80033b8:	bf00      	nop
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	; 0x28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a2b      	ldr	r2, [pc, #172]	; (800347c <HAL_SAI_MspInit+0xbc>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d124      	bne.n	800341c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80033d2:	4b2b      	ldr	r3, [pc, #172]	; (8003480 <HAL_SAI_MspInit+0xc0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10b      	bne.n	80033f2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80033da:	4b2a      	ldr	r3, [pc, #168]	; (8003484 <HAL_SAI_MspInit+0xc4>)
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	4a29      	ldr	r2, [pc, #164]	; (8003484 <HAL_SAI_MspInit+0xc4>)
 80033e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033e4:	6453      	str	r3, [r2, #68]	; 0x44
 80033e6:	4b27      	ldr	r3, [pc, #156]	; (8003484 <HAL_SAI_MspInit+0xc4>)
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80033f2:	4b23      	ldr	r3, [pc, #140]	; (8003480 <HAL_SAI_MspInit+0xc0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3301      	adds	r3, #1
 80033f8:	4a21      	ldr	r2, [pc, #132]	; (8003480 <HAL_SAI_MspInit+0xc0>)
 80033fa:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80033fc:	23f0      	movs	r3, #240	; 0xf0
 80033fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003400:	2302      	movs	r3, #2
 8003402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003404:	2300      	movs	r3, #0
 8003406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003408:	2300      	movs	r3, #0
 800340a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800340c:	230a      	movs	r3, #10
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003410:	f107 0314 	add.w	r3, r7, #20
 8003414:	4619      	mov	r1, r3
 8003416:	481c      	ldr	r0, [pc, #112]	; (8003488 <HAL_SAI_MspInit+0xc8>)
 8003418:	f001 f860 	bl	80044dc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1a      	ldr	r2, [pc, #104]	; (800348c <HAL_SAI_MspInit+0xcc>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d125      	bne.n	8003472 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003426:	4b16      	ldr	r3, [pc, #88]	; (8003480 <HAL_SAI_MspInit+0xc0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10b      	bne.n	8003446 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800342e:	4b15      	ldr	r3, [pc, #84]	; (8003484 <HAL_SAI_MspInit+0xc4>)
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	4a14      	ldr	r2, [pc, #80]	; (8003484 <HAL_SAI_MspInit+0xc4>)
 8003434:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003438:	6453      	str	r3, [r2, #68]	; 0x44
 800343a:	4b12      	ldr	r3, [pc, #72]	; (8003484 <HAL_SAI_MspInit+0xc4>)
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003446:	4b0e      	ldr	r3, [pc, #56]	; (8003480 <HAL_SAI_MspInit+0xc0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	3301      	adds	r3, #1
 800344c:	4a0c      	ldr	r2, [pc, #48]	; (8003480 <HAL_SAI_MspInit+0xc0>)
 800344e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003456:	2302      	movs	r3, #2
 8003458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345e:	2300      	movs	r3, #0
 8003460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003462:	230a      	movs	r3, #10
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003466:	f107 0314 	add.w	r3, r7, #20
 800346a:	4619      	mov	r1, r3
 800346c:	4808      	ldr	r0, [pc, #32]	; (8003490 <HAL_SAI_MspInit+0xd0>)
 800346e:	f001 f835 	bl	80044dc <HAL_GPIO_Init>

    }
}
 8003472:	bf00      	nop
 8003474:	3728      	adds	r7, #40	; 0x28
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40015c04 	.word	0x40015c04
 8003480:	20000974 	.word	0x20000974
 8003484:	40023800 	.word	0x40023800
 8003488:	40022000 	.word	0x40022000
 800348c:	40015c24 	.word	0x40015c24
 8003490:	40021800 	.word	0x40021800

08003494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003498:	e7fe      	b.n	8003498 <NMI_Handler+0x4>

0800349a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800349a:	b480      	push	{r7}
 800349c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800349e:	e7fe      	b.n	800349e <HardFault_Handler+0x4>

080034a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034a4:	e7fe      	b.n	80034a4 <MemManage_Handler+0x4>

080034a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034a6:	b480      	push	{r7}
 80034a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034aa:	e7fe      	b.n	80034aa <BusFault_Handler+0x4>

080034ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034b0:	e7fe      	b.n	80034b0 <UsageFault_Handler+0x4>

080034b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034b2:	b480      	push	{r7}
 80034b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034b6:	bf00      	nop
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034ce:	b480      	push	{r7}
 80034d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034d2:	bf00      	nop
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034e0:	f000 f8ce 	bl	8003680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034e4:	bf00      	nop
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80034ec:	4802      	ldr	r0, [pc, #8]	; (80034f8 <OTG_FS_IRQHandler+0x10>)
 80034ee:	f001 fc57 	bl	8004da0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20001a14 	.word	0x20001a14

080034fc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003500:	4802      	ldr	r0, [pc, #8]	; (800350c <LTDC_IRQHandler+0x10>)
 8003502:	f003 f93f 	bl	8006784 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003506:	bf00      	nop
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000d78 	.word	0x20000d78

08003510 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003514:	4802      	ldr	r0, [pc, #8]	; (8003520 <DMA2D_IRQHandler+0x10>)
 8003516:	f000 fe3f 	bl	8004198 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800351a:	bf00      	nop
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20001030 	.word	0x20001030

08003524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800352c:	4a14      	ldr	r2, [pc, #80]	; (8003580 <_sbrk+0x5c>)
 800352e:	4b15      	ldr	r3, [pc, #84]	; (8003584 <_sbrk+0x60>)
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003538:	4b13      	ldr	r3, [pc, #76]	; (8003588 <_sbrk+0x64>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d102      	bne.n	8003546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003540:	4b11      	ldr	r3, [pc, #68]	; (8003588 <_sbrk+0x64>)
 8003542:	4a12      	ldr	r2, [pc, #72]	; (800358c <_sbrk+0x68>)
 8003544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003546:	4b10      	ldr	r3, [pc, #64]	; (8003588 <_sbrk+0x64>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4413      	add	r3, r2
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	429a      	cmp	r2, r3
 8003552:	d207      	bcs.n	8003564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003554:	f00f fcc4 	bl	8012ee0 <__errno>
 8003558:	4603      	mov	r3, r0
 800355a:	220c      	movs	r2, #12
 800355c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800355e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003562:	e009      	b.n	8003578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003564:	4b08      	ldr	r3, [pc, #32]	; (8003588 <_sbrk+0x64>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800356a:	4b07      	ldr	r3, [pc, #28]	; (8003588 <_sbrk+0x64>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4413      	add	r3, r2
 8003572:	4a05      	ldr	r2, [pc, #20]	; (8003588 <_sbrk+0x64>)
 8003574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003576:	68fb      	ldr	r3, [r7, #12]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20050000 	.word	0x20050000
 8003584:	00000800 	.word	0x00000800
 8003588:	20000978 	.word	0x20000978
 800358c:	20001d28 	.word	0x20001d28

08003590 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <SystemInit+0x20>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	4a05      	ldr	r2, [pc, #20]	; (80035b0 <SystemInit+0x20>)
 800359c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	e000ed00 	.word	0xe000ed00

080035b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80035b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035b8:	480d      	ldr	r0, [pc, #52]	; (80035f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80035ba:	490e      	ldr	r1, [pc, #56]	; (80035f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035bc:	4a0e      	ldr	r2, [pc, #56]	; (80035f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035c0:	e002      	b.n	80035c8 <LoopCopyDataInit>

080035c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035c6:	3304      	adds	r3, #4

080035c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035cc:	d3f9      	bcc.n	80035c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ce:	4a0b      	ldr	r2, [pc, #44]	; (80035fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035d0:	4c0b      	ldr	r4, [pc, #44]	; (8003600 <LoopFillZerobss+0x26>)
  movs r3, #0
 80035d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035d4:	e001      	b.n	80035da <LoopFillZerobss>

080035d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035d8:	3204      	adds	r2, #4

080035da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035dc:	d3fb      	bcc.n	80035d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035de:	f7ff ffd7 	bl	8003590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035e2:	f00f fc83 	bl	8012eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035e6:	f7fd fd37 	bl	8001058 <main>
  bx  lr    
 80035ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035ec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80035f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035f4:	20000954 	.word	0x20000954
  ldr r2, =_sidata
 80035f8:	080198a4 	.word	0x080198a4
  ldr r2, =_sbss
 80035fc:	20000954 	.word	0x20000954
  ldr r4, =_ebss
 8003600:	20001d28 	.word	0x20001d28

08003604 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003604:	e7fe      	b.n	8003604 <ADC_IRQHandler>

08003606 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800360a:	2003      	movs	r0, #3
 800360c:	f000 fbd4 	bl	8003db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003610:	200f      	movs	r0, #15
 8003612:	f000 f805 	bl	8003620 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003616:	f7ff f847 	bl	80026a8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003628:	4b12      	ldr	r3, [pc, #72]	; (8003674 <HAL_InitTick+0x54>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	4b12      	ldr	r3, [pc, #72]	; (8003678 <HAL_InitTick+0x58>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	4619      	mov	r1, r3
 8003632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003636:	fbb3 f3f1 	udiv	r3, r3, r1
 800363a:	fbb2 f3f3 	udiv	r3, r2, r3
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fbef 	bl	8003e22 <HAL_SYSTICK_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e00e      	b.n	800366c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b0f      	cmp	r3, #15
 8003652:	d80a      	bhi.n	800366a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003654:	2200      	movs	r2, #0
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800365c:	f000 fbb7 	bl	8003dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003660:	4a06      	ldr	r2, [pc, #24]	; (800367c <HAL_InitTick+0x5c>)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	e000      	b.n	800366c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
}
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	20000000 	.word	0x20000000
 8003678:	20000008 	.word	0x20000008
 800367c:	20000004 	.word	0x20000004

08003680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <HAL_IncTick+0x20>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_IncTick+0x24>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4413      	add	r3, r2
 8003690:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <HAL_IncTick+0x24>)
 8003692:	6013      	str	r3, [r2, #0]
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	20000008 	.word	0x20000008
 80036a4:	200011d0 	.word	0x200011d0

080036a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return uwTick;
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <HAL_GetTick+0x14>)
 80036ae:	681b      	ldr	r3, [r3, #0]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	200011d0 	.word	0x200011d0

080036c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036c8:	f7ff ffee 	bl	80036a8 <HAL_GetTick>
 80036cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036d8:	d005      	beq.n	80036e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <HAL_Delay+0x44>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036e6:	bf00      	nop
 80036e8:	f7ff ffde 	bl	80036a8 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d8f7      	bhi.n	80036e8 <HAL_Delay+0x28>
  {
  }
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000008 	.word	0x20000008

08003708 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e031      	b.n	8003782 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	d109      	bne.n	800373a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fe ffe2 	bl	80026f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	2b00      	cmp	r3, #0
 8003744:	d116      	bne.n	8003774 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800374a:	4b10      	ldr	r3, [pc, #64]	; (800378c <HAL_ADC_Init+0x84>)
 800374c:	4013      	ands	r3, r2
 800374e:	f043 0202 	orr.w	r2, r3, #2
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f964 	bl	8003a24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f023 0303 	bic.w	r3, r3, #3
 800376a:	f043 0201 	orr.w	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	641a      	str	r2, [r3, #64]	; 0x40
 8003772:	e001      	b.n	8003778 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003780:	7bfb      	ldrb	r3, [r7, #15]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	ffffeefd 	.word	0xffffeefd

08003790 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x1c>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e12a      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x272>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b09      	cmp	r3, #9
 80037ba:	d93a      	bls.n	8003832 <HAL_ADC_ConfigChannel+0xa2>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037c4:	d035      	beq.n	8003832 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68d9      	ldr	r1, [r3, #12]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	461a      	mov	r2, r3
 80037d4:	4613      	mov	r3, r2
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4413      	add	r3, r2
 80037da:	3b1e      	subs	r3, #30
 80037dc:	2207      	movs	r2, #7
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43da      	mvns	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	400a      	ands	r2, r1
 80037ea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a87      	ldr	r2, [pc, #540]	; (8003a10 <HAL_ADC_ConfigChannel+0x280>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d10a      	bne.n	800380c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68d9      	ldr	r1, [r3, #12]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	061a      	lsls	r2, r3, #24
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800380a:	e035      	b.n	8003878 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68d9      	ldr	r1, [r3, #12]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	b29b      	uxth	r3, r3
 800381c:	4618      	mov	r0, r3
 800381e:	4603      	mov	r3, r0
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	4403      	add	r3, r0
 8003824:	3b1e      	subs	r3, #30
 8003826:	409a      	lsls	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003830:	e022      	b.n	8003878 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6919      	ldr	r1, [r3, #16]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	b29b      	uxth	r3, r3
 800383e:	461a      	mov	r2, r3
 8003840:	4613      	mov	r3, r2
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	4413      	add	r3, r2
 8003846:	2207      	movs	r2, #7
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43da      	mvns	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	400a      	ands	r2, r1
 8003854:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6919      	ldr	r1, [r3, #16]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	b29b      	uxth	r3, r3
 8003866:	4618      	mov	r0, r3
 8003868:	4603      	mov	r3, r0
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	4403      	add	r3, r0
 800386e:	409a      	lsls	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b06      	cmp	r3, #6
 800387e:	d824      	bhi.n	80038ca <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	3b05      	subs	r3, #5
 8003892:	221f      	movs	r2, #31
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43da      	mvns	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	400a      	ands	r2, r1
 80038a0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	4618      	mov	r0, r3
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	3b05      	subs	r3, #5
 80038bc:	fa00 f203 	lsl.w	r2, r0, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	635a      	str	r2, [r3, #52]	; 0x34
 80038c8:	e04c      	b.n	8003964 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b0c      	cmp	r3, #12
 80038d0:	d824      	bhi.n	800391c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	3b23      	subs	r3, #35	; 0x23
 80038e4:	221f      	movs	r2, #31
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43da      	mvns	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	400a      	ands	r2, r1
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	4618      	mov	r0, r3
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	3b23      	subs	r3, #35	; 0x23
 800390e:	fa00 f203 	lsl.w	r2, r0, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
 800391a:	e023      	b.n	8003964 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	3b41      	subs	r3, #65	; 0x41
 800392e:	221f      	movs	r2, #31
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	43da      	mvns	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	400a      	ands	r2, r1
 800393c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	b29b      	uxth	r3, r3
 800394a:	4618      	mov	r0, r3
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	3b41      	subs	r3, #65	; 0x41
 8003958:	fa00 f203 	lsl.w	r2, r0, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a2a      	ldr	r2, [pc, #168]	; (8003a14 <HAL_ADC_ConfigChannel+0x284>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d10a      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x1f4>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003976:	d105      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003978:	4b27      	ldr	r3, [pc, #156]	; (8003a18 <HAL_ADC_ConfigChannel+0x288>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	4a26      	ldr	r2, [pc, #152]	; (8003a18 <HAL_ADC_ConfigChannel+0x288>)
 800397e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003982:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a22      	ldr	r2, [pc, #136]	; (8003a14 <HAL_ADC_ConfigChannel+0x284>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d109      	bne.n	80039a2 <HAL_ADC_ConfigChannel+0x212>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b12      	cmp	r3, #18
 8003994:	d105      	bne.n	80039a2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003996:	4b20      	ldr	r3, [pc, #128]	; (8003a18 <HAL_ADC_ConfigChannel+0x288>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	4a1f      	ldr	r2, [pc, #124]	; (8003a18 <HAL_ADC_ConfigChannel+0x288>)
 800399c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039a0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1b      	ldr	r2, [pc, #108]	; (8003a14 <HAL_ADC_ConfigChannel+0x284>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d125      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x268>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a17      	ldr	r2, [pc, #92]	; (8003a10 <HAL_ADC_ConfigChannel+0x280>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d003      	beq.n	80039be <HAL_ADC_ConfigChannel+0x22e>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b11      	cmp	r3, #17
 80039bc:	d11c      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80039be:	4b16      	ldr	r3, [pc, #88]	; (8003a18 <HAL_ADC_ConfigChannel+0x288>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4a15      	ldr	r2, [pc, #84]	; (8003a18 <HAL_ADC_ConfigChannel+0x288>)
 80039c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039c8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a10      	ldr	r2, [pc, #64]	; (8003a10 <HAL_ADC_ConfigChannel+0x280>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d111      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80039d4:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <HAL_ADC_ConfigChannel+0x28c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a11      	ldr	r2, [pc, #68]	; (8003a20 <HAL_ADC_ConfigChannel+0x290>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	0c9a      	lsrs	r2, r3, #18
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80039ea:	e002      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f9      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	10000012 	.word	0x10000012
 8003a14:	40012000 	.word	0x40012000
 8003a18:	40012300 	.word	0x40012300
 8003a1c:	20000000 	.word	0x20000000
 8003a20:	431bde83 	.word	0x431bde83

08003a24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003a2c:	4b78      	ldr	r3, [pc, #480]	; (8003c10 <ADC_Init+0x1ec>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4a77      	ldr	r2, [pc, #476]	; (8003c10 <ADC_Init+0x1ec>)
 8003a32:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003a36:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003a38:	4b75      	ldr	r3, [pc, #468]	; (8003c10 <ADC_Init+0x1ec>)
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	4973      	ldr	r1, [pc, #460]	; (8003c10 <ADC_Init+0x1ec>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6859      	ldr	r1, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	021a      	lsls	r2, r3, #8
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6859      	ldr	r1, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6899      	ldr	r1, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab2:	4a58      	ldr	r2, [pc, #352]	; (8003c14 <ADC_Init+0x1f0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d022      	beq.n	8003afe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ac6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6899      	ldr	r1, [r3, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ae8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6899      	ldr	r1, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	e00f      	b.n	8003b1e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0202 	bic.w	r2, r2, #2
 8003b2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6899      	ldr	r1, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	005a      	lsls	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01b      	beq.n	8003b84 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6859      	ldr	r1, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	3b01      	subs	r3, #1
 8003b78:	035a      	lsls	r2, r3, #13
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	e007      	b.n	8003b94 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	051a      	lsls	r2, r3, #20
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6899      	ldr	r1, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bd6:	025a      	lsls	r2, r3, #9
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6899      	ldr	r1, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	029a      	lsls	r2, r3, #10
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	609a      	str	r2, [r3, #8]
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	40012300 	.word	0x40012300
 8003c14:	0f000001 	.word	0x0f000001

08003c18 <__NVIC_SetPriorityGrouping>:
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <__NVIC_SetPriorityGrouping+0x40>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c34:	4013      	ands	r3, r2
 8003c36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c40:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <__NVIC_SetPriorityGrouping+0x44>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c46:	4a04      	ldr	r2, [pc, #16]	; (8003c58 <__NVIC_SetPriorityGrouping+0x40>)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	60d3      	str	r3, [r2, #12]
}
 8003c4c:	bf00      	nop
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	e000ed00 	.word	0xe000ed00
 8003c5c:	05fa0000 	.word	0x05fa0000

08003c60 <__NVIC_GetPriorityGrouping>:
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c64:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <__NVIC_GetPriorityGrouping+0x18>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	0a1b      	lsrs	r3, r3, #8
 8003c6a:	f003 0307 	and.w	r3, r3, #7
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	e000ed00 	.word	0xe000ed00

08003c7c <__NVIC_EnableIRQ>:
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	db0b      	blt.n	8003ca6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	f003 021f 	and.w	r2, r3, #31
 8003c94:	4907      	ldr	r1, [pc, #28]	; (8003cb4 <__NVIC_EnableIRQ+0x38>)
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	e000e100 	.word	0xe000e100

08003cb8 <__NVIC_SetPriority>:
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	6039      	str	r1, [r7, #0]
 8003cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	db0a      	blt.n	8003ce2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	490c      	ldr	r1, [pc, #48]	; (8003d04 <__NVIC_SetPriority+0x4c>)
 8003cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd6:	0112      	lsls	r2, r2, #4
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	440b      	add	r3, r1
 8003cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ce0:	e00a      	b.n	8003cf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	4908      	ldr	r1, [pc, #32]	; (8003d08 <__NVIC_SetPriority+0x50>)
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	3b04      	subs	r3, #4
 8003cf0:	0112      	lsls	r2, r2, #4
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	761a      	strb	r2, [r3, #24]
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	e000e100 	.word	0xe000e100
 8003d08:	e000ed00 	.word	0xe000ed00

08003d0c <NVIC_EncodePriority>:
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b089      	sub	sp, #36	; 0x24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f1c3 0307 	rsb	r3, r3, #7
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	bf28      	it	cs
 8003d2a:	2304      	movcs	r3, #4
 8003d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	3304      	adds	r3, #4
 8003d32:	2b06      	cmp	r3, #6
 8003d34:	d902      	bls.n	8003d3c <NVIC_EncodePriority+0x30>
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3b03      	subs	r3, #3
 8003d3a:	e000      	b.n	8003d3e <NVIC_EncodePriority+0x32>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43da      	mvns	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	401a      	ands	r2, r3
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5e:	43d9      	mvns	r1, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d64:	4313      	orrs	r3, r2
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3724      	adds	r7, #36	; 0x24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d84:	d301      	bcc.n	8003d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d86:	2301      	movs	r3, #1
 8003d88:	e00f      	b.n	8003daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <SysTick_Config+0x40>)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d92:	210f      	movs	r1, #15
 8003d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d98:	f7ff ff8e 	bl	8003cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <SysTick_Config+0x40>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003da2:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <SysTick_Config+0x40>)
 8003da4:	2207      	movs	r2, #7
 8003da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	e000e010 	.word	0xe000e010

08003db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff ff29 	bl	8003c18 <__NVIC_SetPriorityGrouping>
}
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b086      	sub	sp, #24
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	607a      	str	r2, [r7, #4]
 8003dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003de0:	f7ff ff3e 	bl	8003c60 <__NVIC_GetPriorityGrouping>
 8003de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	68b9      	ldr	r1, [r7, #8]
 8003dea:	6978      	ldr	r0, [r7, #20]
 8003dec:	f7ff ff8e 	bl	8003d0c <NVIC_EncodePriority>
 8003df0:	4602      	mov	r2, r0
 8003df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003df6:	4611      	mov	r1, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff ff5d 	bl	8003cb8 <__NVIC_SetPriority>
}
 8003dfe:	bf00      	nop
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff ff31 	bl	8003c7c <__NVIC_EnableIRQ>
}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff ffa2 	bl	8003d74 <SysTick_Config>
 8003e30:	4603      	mov	r3, r0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e054      	b.n	8003ef8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	7f5b      	ldrb	r3, [r3, #29]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d105      	bne.n	8003e64 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fe fca0 	bl	80027a4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	791b      	ldrb	r3, [r3, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10c      	bne.n	8003e8c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a22      	ldr	r2, [pc, #136]	; (8003f00 <HAL_CRC_Init+0xc4>)
 8003e78:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0218 	bic.w	r2, r2, #24
 8003e88:	609a      	str	r2, [r3, #8]
 8003e8a:	e00c      	b.n	8003ea6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6899      	ldr	r1, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	461a      	mov	r2, r3
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f834 	bl	8003f04 <HAL_CRCEx_Polynomial_Set>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e028      	b.n	8003ef8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	795b      	ldrb	r3, [r3, #5]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d105      	bne.n	8003eba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003eb6:	611a      	str	r2, [r3, #16]
 8003eb8:	e004      	b.n	8003ec4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6912      	ldr	r2, [r2, #16]
 8003ec2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699a      	ldr	r2, [r3, #24]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	04c11db7 	.word	0x04c11db7

08003f04 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003f14:	231f      	movs	r3, #31
 8003f16:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003f18:	bf00      	nop
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1e5a      	subs	r2, r3, #1
 8003f1e:	613a      	str	r2, [r7, #16]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d009      	beq.n	8003f38 <HAL_CRCEx_Polynomial_Set+0x34>
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f003 031f 	and.w	r3, r3, #31
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_CRCEx_Polynomial_Set+0x16>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b18      	cmp	r3, #24
 8003f3c:	d846      	bhi.n	8003fcc <HAL_CRCEx_Polynomial_Set+0xc8>
 8003f3e:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f44:	08003fd3 	.word	0x08003fd3
 8003f48:	08003fcd 	.word	0x08003fcd
 8003f4c:	08003fcd 	.word	0x08003fcd
 8003f50:	08003fcd 	.word	0x08003fcd
 8003f54:	08003fcd 	.word	0x08003fcd
 8003f58:	08003fcd 	.word	0x08003fcd
 8003f5c:	08003fcd 	.word	0x08003fcd
 8003f60:	08003fcd 	.word	0x08003fcd
 8003f64:	08003fc1 	.word	0x08003fc1
 8003f68:	08003fcd 	.word	0x08003fcd
 8003f6c:	08003fcd 	.word	0x08003fcd
 8003f70:	08003fcd 	.word	0x08003fcd
 8003f74:	08003fcd 	.word	0x08003fcd
 8003f78:	08003fcd 	.word	0x08003fcd
 8003f7c:	08003fcd 	.word	0x08003fcd
 8003f80:	08003fcd 	.word	0x08003fcd
 8003f84:	08003fb5 	.word	0x08003fb5
 8003f88:	08003fcd 	.word	0x08003fcd
 8003f8c:	08003fcd 	.word	0x08003fcd
 8003f90:	08003fcd 	.word	0x08003fcd
 8003f94:	08003fcd 	.word	0x08003fcd
 8003f98:	08003fcd 	.word	0x08003fcd
 8003f9c:	08003fcd 	.word	0x08003fcd
 8003fa0:	08003fcd 	.word	0x08003fcd
 8003fa4:	08003fa9 	.word	0x08003fa9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	2b06      	cmp	r3, #6
 8003fac:	d913      	bls.n	8003fd6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003fb2:	e010      	b.n	8003fd6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2b07      	cmp	r3, #7
 8003fb8:	d90f      	bls.n	8003fda <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003fbe:	e00c      	b.n	8003fda <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	2b0f      	cmp	r3, #15
 8003fc4:	d90b      	bls.n	8003fde <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003fca:	e008      	b.n	8003fde <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd0:	e006      	b.n	8003fe0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e004      	b.n	8003fe0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003fd6:	bf00      	nop
 8003fd8:	e002      	b.n	8003fe0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003fda:	bf00      	nop
 8003fdc:	e000      	b.n	8003fe0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003fde:	bf00      	nop
  }
  if (status == HAL_OK)
 8003fe0:	7dfb      	ldrb	r3, [r7, #23]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10d      	bne.n	8004002 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f023 0118 	bic.w	r1, r3, #24
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004002:	7dfb      	ldrb	r3, [r7, #23]
}
 8004004:	4618      	mov	r0, r3
 8004006:	371c      	adds	r7, #28
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e069      	b.n	80040f6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d102      	bne.n	8004034 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fe fbd8 	bl	80027e4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6819      	ldr	r1, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	4b2a      	ldr	r3, [pc, #168]	; (8004100 <HAL_DCMI_Init+0xf0>)
 8004056:	400b      	ands	r3, r1
 8004058:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6819      	ldr	r1, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800406e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800407a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004086:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004092:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004098:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800409e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b10      	cmp	r3, #16
 80040ae:	d112      	bne.n	80040d6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	7f1b      	ldrb	r3, [r3, #28]
 80040b4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	7f5b      	ldrb	r3, [r3, #29]
 80040ba:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80040bc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	7f9b      	ldrb	r3, [r3, #30]
 80040c2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80040c4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	7fdb      	ldrb	r3, [r3, #31]
 80040cc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80040d2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80040d4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 021e 	orr.w	r2, r2, #30
 80040e4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	ffe0f007 	.word	0xffe0f007

08004104 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e039      	b.n	800418a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fe fc18 	bl	8002960 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004154:	f023 0107 	bic.w	r1, r3, #7
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800416a:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <HAL_DMA2D_Init+0x90>)
 800416c:	4013      	ands	r3, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	68d1      	ldr	r1, [r2, #12]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6812      	ldr	r2, [r2, #0]
 8004176:	430b      	orrs	r3, r1
 8004178:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	ffffc000 	.word	0xffffc000

08004198 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d026      	beq.n	8004208 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d021      	beq.n	8004208 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041d2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d8:	f043 0201 	orr.w	r2, r3, #1
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2201      	movs	r2, #1
 80041e6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2204      	movs	r2, #4
 80041ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f003 0320 	and.w	r3, r3, #32
 800420e:	2b00      	cmp	r3, #0
 8004210:	d026      	beq.n	8004260 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d021      	beq.n	8004260 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800422a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2220      	movs	r2, #32
 8004232:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004238:	f043 0202 	orr.w	r2, r3, #2
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2204      	movs	r2, #4
 8004244:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d026      	beq.n	80042b8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004270:	2b00      	cmp	r3, #0
 8004272:	d021      	beq.n	80042b8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004282:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2208      	movs	r2, #8
 800428a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004290:	f043 0204 	orr.w	r2, r3, #4
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2204      	movs	r2, #4
 800429c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d013      	beq.n	80042ea <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00e      	beq.n	80042ea <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042da:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2204      	movs	r2, #4
 80042e2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f853 	bl	8004390 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d024      	beq.n	800433e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01f      	beq.n	800433e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800430c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2202      	movs	r2, #2
 8004314:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01f      	beq.n	8004388 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d01a      	beq.n	8004388 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004360:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2210      	movs	r2, #16
 8004368:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f80e 	bl	80043a4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004388:	bf00      	nop
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_DMA2D_ConfigLayer+0x20>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e079      	b.n	80044cc <HAL_DMA2D_ConfigLayer+0x114>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	3318      	adds	r3, #24
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	4413      	add	r3, r2
 80043f2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	041b      	lsls	r3, r3, #16
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004402:	4b35      	ldr	r3, [pc, #212]	; (80044d8 <HAL_DMA2D_ConfigLayer+0x120>)
 8004404:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b0a      	cmp	r3, #10
 800440c:	d003      	beq.n	8004416 <HAL_DMA2D_ConfigLayer+0x5e>
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b09      	cmp	r3, #9
 8004414:	d107      	bne.n	8004426 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	e005      	b.n	8004432 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	061b      	lsls	r3, r3, #24
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	4313      	orrs	r3, r2
 8004430:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d120      	bne.n	800447a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	43db      	mvns	r3, r3
 8004442:	ea02 0103 	and.w	r1, r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	430a      	orrs	r2, r1
 800444e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b0a      	cmp	r3, #10
 8004460:	d003      	beq.n	800446a <HAL_DMA2D_ConfigLayer+0xb2>
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b09      	cmp	r3, #9
 8004468:	d127      	bne.n	80044ba <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004476:	629a      	str	r2, [r3, #40]	; 0x28
 8004478:	e01f      	b.n	80044ba <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69da      	ldr	r2, [r3, #28]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	43db      	mvns	r3, r3
 8004484:	ea02 0103 	and.w	r1, r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	430a      	orrs	r2, r1
 8004490:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	6812      	ldr	r2, [r2, #0]
 800449a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b0a      	cmp	r3, #10
 80044a2:	d003      	beq.n	80044ac <HAL_DMA2D_ConfigLayer+0xf4>
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b09      	cmp	r3, #9
 80044aa:	d106      	bne.n	80044ba <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80044b8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	371c      	adds	r7, #28
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	ff03000f 	.word	0xff03000f

080044dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044dc:	b480      	push	{r7}
 80044de:	b089      	sub	sp, #36	; 0x24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80044e6:	2300      	movs	r3, #0
 80044e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80044ee:	2300      	movs	r3, #0
 80044f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80044f2:	2300      	movs	r3, #0
 80044f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
 80044fa:	e175      	b.n	80047e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80044fc:	2201      	movs	r2, #1
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4013      	ands	r3, r2
 800450e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	429a      	cmp	r2, r3
 8004516:	f040 8164 	bne.w	80047e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d00b      	beq.n	800453a <HAL_GPIO_Init+0x5e>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d007      	beq.n	800453a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800452e:	2b11      	cmp	r3, #17
 8004530:	d003      	beq.n	800453a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b12      	cmp	r3, #18
 8004538:	d130      	bne.n	800459c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	2203      	movs	r2, #3
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	43db      	mvns	r3, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4013      	ands	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	4313      	orrs	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004570:	2201      	movs	r2, #1
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	43db      	mvns	r3, r3
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4013      	ands	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	091b      	lsrs	r3, r3, #4
 8004586:	f003 0201 	and.w	r2, r3, #1
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4313      	orrs	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	2203      	movs	r2, #3
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	43db      	mvns	r3, r3
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4013      	ands	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d003      	beq.n	80045dc <HAL_GPIO_Init+0x100>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b12      	cmp	r3, #18
 80045da:	d123      	bne.n	8004624 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	08da      	lsrs	r2, r3, #3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3208      	adds	r2, #8
 80045e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	220f      	movs	r2, #15
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	43db      	mvns	r3, r3
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4013      	ands	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4313      	orrs	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	08da      	lsrs	r2, r3, #3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3208      	adds	r2, #8
 800461e:	69b9      	ldr	r1, [r7, #24]
 8004620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	2203      	movs	r2, #3
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	43db      	mvns	r3, r3
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	4013      	ands	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f003 0203 	and.w	r2, r3, #3
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4313      	orrs	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 80be 	beq.w	80047e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004666:	4b66      	ldr	r3, [pc, #408]	; (8004800 <HAL_GPIO_Init+0x324>)
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	4a65      	ldr	r2, [pc, #404]	; (8004800 <HAL_GPIO_Init+0x324>)
 800466c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004670:	6453      	str	r3, [r2, #68]	; 0x44
 8004672:	4b63      	ldr	r3, [pc, #396]	; (8004800 <HAL_GPIO_Init+0x324>)
 8004674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800467e:	4a61      	ldr	r2, [pc, #388]	; (8004804 <HAL_GPIO_Init+0x328>)
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	089b      	lsrs	r3, r3, #2
 8004684:	3302      	adds	r3, #2
 8004686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800468a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	220f      	movs	r2, #15
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	4013      	ands	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a58      	ldr	r2, [pc, #352]	; (8004808 <HAL_GPIO_Init+0x32c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d037      	beq.n	800471a <HAL_GPIO_Init+0x23e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a57      	ldr	r2, [pc, #348]	; (800480c <HAL_GPIO_Init+0x330>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d031      	beq.n	8004716 <HAL_GPIO_Init+0x23a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a56      	ldr	r2, [pc, #344]	; (8004810 <HAL_GPIO_Init+0x334>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d02b      	beq.n	8004712 <HAL_GPIO_Init+0x236>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a55      	ldr	r2, [pc, #340]	; (8004814 <HAL_GPIO_Init+0x338>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d025      	beq.n	800470e <HAL_GPIO_Init+0x232>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a54      	ldr	r2, [pc, #336]	; (8004818 <HAL_GPIO_Init+0x33c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d01f      	beq.n	800470a <HAL_GPIO_Init+0x22e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a53      	ldr	r2, [pc, #332]	; (800481c <HAL_GPIO_Init+0x340>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d019      	beq.n	8004706 <HAL_GPIO_Init+0x22a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a52      	ldr	r2, [pc, #328]	; (8004820 <HAL_GPIO_Init+0x344>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d013      	beq.n	8004702 <HAL_GPIO_Init+0x226>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a51      	ldr	r2, [pc, #324]	; (8004824 <HAL_GPIO_Init+0x348>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00d      	beq.n	80046fe <HAL_GPIO_Init+0x222>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a50      	ldr	r2, [pc, #320]	; (8004828 <HAL_GPIO_Init+0x34c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d007      	beq.n	80046fa <HAL_GPIO_Init+0x21e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a4f      	ldr	r2, [pc, #316]	; (800482c <HAL_GPIO_Init+0x350>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d101      	bne.n	80046f6 <HAL_GPIO_Init+0x21a>
 80046f2:	2309      	movs	r3, #9
 80046f4:	e012      	b.n	800471c <HAL_GPIO_Init+0x240>
 80046f6:	230a      	movs	r3, #10
 80046f8:	e010      	b.n	800471c <HAL_GPIO_Init+0x240>
 80046fa:	2308      	movs	r3, #8
 80046fc:	e00e      	b.n	800471c <HAL_GPIO_Init+0x240>
 80046fe:	2307      	movs	r3, #7
 8004700:	e00c      	b.n	800471c <HAL_GPIO_Init+0x240>
 8004702:	2306      	movs	r3, #6
 8004704:	e00a      	b.n	800471c <HAL_GPIO_Init+0x240>
 8004706:	2305      	movs	r3, #5
 8004708:	e008      	b.n	800471c <HAL_GPIO_Init+0x240>
 800470a:	2304      	movs	r3, #4
 800470c:	e006      	b.n	800471c <HAL_GPIO_Init+0x240>
 800470e:	2303      	movs	r3, #3
 8004710:	e004      	b.n	800471c <HAL_GPIO_Init+0x240>
 8004712:	2302      	movs	r3, #2
 8004714:	e002      	b.n	800471c <HAL_GPIO_Init+0x240>
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <HAL_GPIO_Init+0x240>
 800471a:	2300      	movs	r3, #0
 800471c:	69fa      	ldr	r2, [r7, #28]
 800471e:	f002 0203 	and.w	r2, r2, #3
 8004722:	0092      	lsls	r2, r2, #2
 8004724:	4093      	lsls	r3, r2
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4313      	orrs	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800472c:	4935      	ldr	r1, [pc, #212]	; (8004804 <HAL_GPIO_Init+0x328>)
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	089b      	lsrs	r3, r3, #2
 8004732:	3302      	adds	r3, #2
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800473a:	4b3d      	ldr	r3, [pc, #244]	; (8004830 <HAL_GPIO_Init+0x354>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	43db      	mvns	r3, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4013      	ands	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800475e:	4a34      	ldr	r2, [pc, #208]	; (8004830 <HAL_GPIO_Init+0x354>)
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004764:	4b32      	ldr	r3, [pc, #200]	; (8004830 <HAL_GPIO_Init+0x354>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	43db      	mvns	r3, r3
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4013      	ands	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004788:	4a29      	ldr	r2, [pc, #164]	; (8004830 <HAL_GPIO_Init+0x354>)
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800478e:	4b28      	ldr	r3, [pc, #160]	; (8004830 <HAL_GPIO_Init+0x354>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	43db      	mvns	r3, r3
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	4013      	ands	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047b2:	4a1f      	ldr	r2, [pc, #124]	; (8004830 <HAL_GPIO_Init+0x354>)
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047b8:	4b1d      	ldr	r3, [pc, #116]	; (8004830 <HAL_GPIO_Init+0x354>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	43db      	mvns	r3, r3
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	4013      	ands	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047dc:	4a14      	ldr	r2, [pc, #80]	; (8004830 <HAL_GPIO_Init+0x354>)
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	3301      	adds	r3, #1
 80047e6:	61fb      	str	r3, [r7, #28]
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	2b0f      	cmp	r3, #15
 80047ec:	f67f ae86 	bls.w	80044fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80047f0:	bf00      	nop
 80047f2:	bf00      	nop
 80047f4:	3724      	adds	r7, #36	; 0x24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40023800 	.word	0x40023800
 8004804:	40013800 	.word	0x40013800
 8004808:	40020000 	.word	0x40020000
 800480c:	40020400 	.word	0x40020400
 8004810:	40020800 	.word	0x40020800
 8004814:	40020c00 	.word	0x40020c00
 8004818:	40021000 	.word	0x40021000
 800481c:	40021400 	.word	0x40021400
 8004820:	40021800 	.word	0x40021800
 8004824:	40021c00 	.word	0x40021c00
 8004828:	40022000 	.word	0x40022000
 800482c:	40022400 	.word	0x40022400
 8004830:	40013c00 	.word	0x40013c00

08004834 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	887b      	ldrh	r3, [r7, #2]
 8004846:	4013      	ands	r3, r2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800484c:	2301      	movs	r3, #1
 800484e:	73fb      	strb	r3, [r7, #15]
 8004850:	e001      	b.n	8004856 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004852:	2300      	movs	r3, #0
 8004854:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004856:	7bfb      	ldrb	r3, [r7, #15]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	807b      	strh	r3, [r7, #2]
 8004870:	4613      	mov	r3, r2
 8004872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004874:	787b      	ldrb	r3, [r7, #1]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800487a:	887a      	ldrh	r2, [r7, #2]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004880:	e003      	b.n	800488a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004882:	887b      	ldrh	r3, [r7, #2]
 8004884:	041a      	lsls	r2, r3, #16
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	619a      	str	r2, [r3, #24]
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004896:	b480      	push	{r7}
 8004898:	b085      	sub	sp, #20
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	460b      	mov	r3, r1
 80048a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048a8:	887a      	ldrh	r2, [r7, #2]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4013      	ands	r3, r2
 80048ae:	041a      	lsls	r2, r3, #16
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	43d9      	mvns	r1, r3
 80048b4:	887b      	ldrh	r3, [r7, #2]
 80048b6:	400b      	ands	r3, r1
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	619a      	str	r2, [r3, #24]
}
 80048be:	bf00      	nop
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80048ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048cc:	b08f      	sub	sp, #60	; 0x3c
 80048ce:	af0a      	add	r7, sp, #40	; 0x28
 80048d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e054      	b.n	8004986 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f00a ffa2 	bl	800f840 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2203      	movs	r2, #3
 8004900:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490c:	2b00      	cmp	r3, #0
 800490e:	d102      	bne.n	8004916 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f007 ff57 	bl	800c7ce <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	603b      	str	r3, [r7, #0]
 8004926:	687e      	ldr	r6, [r7, #4]
 8004928:	466d      	mov	r5, sp
 800492a:	f106 0410 	add.w	r4, r6, #16
 800492e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004936:	e894 0003 	ldmia.w	r4, {r0, r1}
 800493a:	e885 0003 	stmia.w	r5, {r0, r1}
 800493e:	1d33      	adds	r3, r6, #4
 8004940:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004942:	6838      	ldr	r0, [r7, #0]
 8004944:	f007 feda 	bl	800c6fc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2101      	movs	r1, #1
 800494e:	4618      	mov	r0, r3
 8004950:	f007 ff4e 	bl	800c7f0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	603b      	str	r3, [r7, #0]
 800495a:	687e      	ldr	r6, [r7, #4]
 800495c:	466d      	mov	r5, sp
 800495e:	f106 0410 	add.w	r4, r6, #16
 8004962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800496a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800496e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004972:	1d33      	adds	r3, r6, #4
 8004974:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004976:	6838      	ldr	r0, [r7, #0]
 8004978:	f008 f860 	bl	800ca3c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800498e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800498e:	b590      	push	{r4, r7, lr}
 8004990:	b089      	sub	sp, #36	; 0x24
 8004992:	af04      	add	r7, sp, #16
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	4608      	mov	r0, r1
 8004998:	4611      	mov	r1, r2
 800499a:	461a      	mov	r2, r3
 800499c:	4603      	mov	r3, r0
 800499e:	70fb      	strb	r3, [r7, #3]
 80049a0:	460b      	mov	r3, r1
 80049a2:	70bb      	strb	r3, [r7, #2]
 80049a4:	4613      	mov	r3, r2
 80049a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d101      	bne.n	80049b6 <HAL_HCD_HC_Init+0x28>
 80049b2:	2302      	movs	r3, #2
 80049b4:	e076      	b.n	8004aa4 <HAL_HCD_HC_Init+0x116>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	212c      	movs	r1, #44	; 0x2c
 80049c4:	fb01 f303 	mul.w	r3, r1, r3
 80049c8:	4413      	add	r3, r2
 80049ca:	333d      	adds	r3, #61	; 0x3d
 80049cc:	2200      	movs	r2, #0
 80049ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	212c      	movs	r1, #44	; 0x2c
 80049d6:	fb01 f303 	mul.w	r3, r1, r3
 80049da:	4413      	add	r3, r2
 80049dc:	3338      	adds	r3, #56	; 0x38
 80049de:	787a      	ldrb	r2, [r7, #1]
 80049e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80049e2:	78fb      	ldrb	r3, [r7, #3]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	212c      	movs	r1, #44	; 0x2c
 80049e8:	fb01 f303 	mul.w	r3, r1, r3
 80049ec:	4413      	add	r3, r2
 80049ee:	3340      	adds	r3, #64	; 0x40
 80049f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80049f2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	212c      	movs	r1, #44	; 0x2c
 80049fa:	fb01 f303 	mul.w	r3, r1, r3
 80049fe:	4413      	add	r3, r2
 8004a00:	3339      	adds	r3, #57	; 0x39
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004a06:	78fb      	ldrb	r3, [r7, #3]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	212c      	movs	r1, #44	; 0x2c
 8004a0c:	fb01 f303 	mul.w	r3, r1, r3
 8004a10:	4413      	add	r3, r2
 8004a12:	333f      	adds	r3, #63	; 0x3f
 8004a14:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004a18:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	78ba      	ldrb	r2, [r7, #2]
 8004a1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a22:	b2d0      	uxtb	r0, r2
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	212c      	movs	r1, #44	; 0x2c
 8004a28:	fb01 f303 	mul.w	r3, r1, r3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	333a      	adds	r3, #58	; 0x3a
 8004a30:	4602      	mov	r2, r0
 8004a32:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004a34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	da09      	bge.n	8004a50 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004a3c:	78fb      	ldrb	r3, [r7, #3]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	212c      	movs	r1, #44	; 0x2c
 8004a42:	fb01 f303 	mul.w	r3, r1, r3
 8004a46:	4413      	add	r3, r2
 8004a48:	333b      	adds	r3, #59	; 0x3b
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	e008      	b.n	8004a62 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	212c      	movs	r1, #44	; 0x2c
 8004a56:	fb01 f303 	mul.w	r3, r1, r3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	333b      	adds	r3, #59	; 0x3b
 8004a5e:	2200      	movs	r2, #0
 8004a60:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004a62:	78fb      	ldrb	r3, [r7, #3]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	212c      	movs	r1, #44	; 0x2c
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	333c      	adds	r3, #60	; 0x3c
 8004a70:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004a74:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6818      	ldr	r0, [r3, #0]
 8004a7a:	787c      	ldrb	r4, [r7, #1]
 8004a7c:	78ba      	ldrb	r2, [r7, #2]
 8004a7e:	78f9      	ldrb	r1, [r7, #3]
 8004a80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a82:	9302      	str	r3, [sp, #8]
 8004a84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a88:	9301      	str	r3, [sp, #4]
 8004a8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	4623      	mov	r3, r4
 8004a92:	f008 f949 	bl	800cd28 <USB_HC_Init>
 8004a96:	4603      	mov	r3, r0
 8004a98:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd90      	pop	{r4, r7, pc}

08004aac <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_HCD_HC_Halt+0x1e>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e00f      	b.n	8004aea <HAL_HCD_HC_Halt+0x3e>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	78fa      	ldrb	r2, [r7, #3]
 8004ad8:	4611      	mov	r1, r2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f008 fb85 	bl	800d1ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	4608      	mov	r0, r1
 8004afe:	4611      	mov	r1, r2
 8004b00:	461a      	mov	r2, r3
 8004b02:	4603      	mov	r3, r0
 8004b04:	70fb      	strb	r3, [r7, #3]
 8004b06:	460b      	mov	r3, r1
 8004b08:	70bb      	strb	r3, [r7, #2]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004b0e:	78fb      	ldrb	r3, [r7, #3]
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	212c      	movs	r1, #44	; 0x2c
 8004b14:	fb01 f303 	mul.w	r3, r1, r3
 8004b18:	4413      	add	r3, r2
 8004b1a:	333b      	adds	r3, #59	; 0x3b
 8004b1c:	78ba      	ldrb	r2, [r7, #2]
 8004b1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	212c      	movs	r1, #44	; 0x2c
 8004b26:	fb01 f303 	mul.w	r3, r1, r3
 8004b2a:	4413      	add	r3, r2
 8004b2c:	333f      	adds	r3, #63	; 0x3f
 8004b2e:	787a      	ldrb	r2, [r7, #1]
 8004b30:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004b32:	7c3b      	ldrb	r3, [r7, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d112      	bne.n	8004b5e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004b38:	78fb      	ldrb	r3, [r7, #3]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	212c      	movs	r1, #44	; 0x2c
 8004b3e:	fb01 f303 	mul.w	r3, r1, r3
 8004b42:	4413      	add	r3, r2
 8004b44:	3342      	adds	r3, #66	; 0x42
 8004b46:	2203      	movs	r2, #3
 8004b48:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004b4a:	78fb      	ldrb	r3, [r7, #3]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	212c      	movs	r1, #44	; 0x2c
 8004b50:	fb01 f303 	mul.w	r3, r1, r3
 8004b54:	4413      	add	r3, r2
 8004b56:	333d      	adds	r3, #61	; 0x3d
 8004b58:	7f3a      	ldrb	r2, [r7, #28]
 8004b5a:	701a      	strb	r2, [r3, #0]
 8004b5c:	e008      	b.n	8004b70 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b5e:	78fb      	ldrb	r3, [r7, #3]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	212c      	movs	r1, #44	; 0x2c
 8004b64:	fb01 f303 	mul.w	r3, r1, r3
 8004b68:	4413      	add	r3, r2
 8004b6a:	3342      	adds	r3, #66	; 0x42
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004b70:	787b      	ldrb	r3, [r7, #1]
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	f200 80c6 	bhi.w	8004d04 <HAL_HCD_HC_SubmitRequest+0x210>
 8004b78:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7e:	bf00      	nop
 8004b80:	08004b91 	.word	0x08004b91
 8004b84:	08004cf1 	.word	0x08004cf1
 8004b88:	08004bf5 	.word	0x08004bf5
 8004b8c:	08004c73 	.word	0x08004c73
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004b90:	7c3b      	ldrb	r3, [r7, #16]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	f040 80b8 	bne.w	8004d08 <HAL_HCD_HC_SubmitRequest+0x214>
 8004b98:	78bb      	ldrb	r3, [r7, #2]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f040 80b4 	bne.w	8004d08 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004ba0:	8b3b      	ldrh	r3, [r7, #24]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d108      	bne.n	8004bb8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004ba6:	78fb      	ldrb	r3, [r7, #3]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	212c      	movs	r1, #44	; 0x2c
 8004bac:	fb01 f303 	mul.w	r3, r1, r3
 8004bb0:	4413      	add	r3, r2
 8004bb2:	3355      	adds	r3, #85	; 0x55
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	212c      	movs	r1, #44	; 0x2c
 8004bbe:	fb01 f303 	mul.w	r3, r1, r3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	3355      	adds	r3, #85	; 0x55
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d109      	bne.n	8004be0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	212c      	movs	r1, #44	; 0x2c
 8004bd2:	fb01 f303 	mul.w	r3, r1, r3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3342      	adds	r3, #66	; 0x42
 8004bda:	2200      	movs	r2, #0
 8004bdc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004bde:	e093      	b.n	8004d08 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	212c      	movs	r1, #44	; 0x2c
 8004be6:	fb01 f303 	mul.w	r3, r1, r3
 8004bea:	4413      	add	r3, r2
 8004bec:	3342      	adds	r3, #66	; 0x42
 8004bee:	2202      	movs	r2, #2
 8004bf0:	701a      	strb	r2, [r3, #0]
      break;
 8004bf2:	e089      	b.n	8004d08 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004bf4:	78bb      	ldrb	r3, [r7, #2]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d11d      	bne.n	8004c36 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004bfa:	78fb      	ldrb	r3, [r7, #3]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	212c      	movs	r1, #44	; 0x2c
 8004c00:	fb01 f303 	mul.w	r3, r1, r3
 8004c04:	4413      	add	r3, r2
 8004c06:	3355      	adds	r3, #85	; 0x55
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d109      	bne.n	8004c22 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c0e:	78fb      	ldrb	r3, [r7, #3]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	212c      	movs	r1, #44	; 0x2c
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	4413      	add	r3, r2
 8004c1a:	3342      	adds	r3, #66	; 0x42
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004c20:	e073      	b.n	8004d0a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	212c      	movs	r1, #44	; 0x2c
 8004c28:	fb01 f303 	mul.w	r3, r1, r3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	3342      	adds	r3, #66	; 0x42
 8004c30:	2202      	movs	r2, #2
 8004c32:	701a      	strb	r2, [r3, #0]
      break;
 8004c34:	e069      	b.n	8004d0a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004c36:	78fb      	ldrb	r3, [r7, #3]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	212c      	movs	r1, #44	; 0x2c
 8004c3c:	fb01 f303 	mul.w	r3, r1, r3
 8004c40:	4413      	add	r3, r2
 8004c42:	3354      	adds	r3, #84	; 0x54
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c4a:	78fb      	ldrb	r3, [r7, #3]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	212c      	movs	r1, #44	; 0x2c
 8004c50:	fb01 f303 	mul.w	r3, r1, r3
 8004c54:	4413      	add	r3, r2
 8004c56:	3342      	adds	r3, #66	; 0x42
 8004c58:	2200      	movs	r2, #0
 8004c5a:	701a      	strb	r2, [r3, #0]
      break;
 8004c5c:	e055      	b.n	8004d0a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c5e:	78fb      	ldrb	r3, [r7, #3]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	212c      	movs	r1, #44	; 0x2c
 8004c64:	fb01 f303 	mul.w	r3, r1, r3
 8004c68:	4413      	add	r3, r2
 8004c6a:	3342      	adds	r3, #66	; 0x42
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	701a      	strb	r2, [r3, #0]
      break;
 8004c70:	e04b      	b.n	8004d0a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004c72:	78bb      	ldrb	r3, [r7, #2]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d11d      	bne.n	8004cb4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	212c      	movs	r1, #44	; 0x2c
 8004c7e:	fb01 f303 	mul.w	r3, r1, r3
 8004c82:	4413      	add	r3, r2
 8004c84:	3355      	adds	r3, #85	; 0x55
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d109      	bne.n	8004ca0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c8c:	78fb      	ldrb	r3, [r7, #3]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	212c      	movs	r1, #44	; 0x2c
 8004c92:	fb01 f303 	mul.w	r3, r1, r3
 8004c96:	4413      	add	r3, r2
 8004c98:	3342      	adds	r3, #66	; 0x42
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004c9e:	e034      	b.n	8004d0a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	212c      	movs	r1, #44	; 0x2c
 8004ca6:	fb01 f303 	mul.w	r3, r1, r3
 8004caa:	4413      	add	r3, r2
 8004cac:	3342      	adds	r3, #66	; 0x42
 8004cae:	2202      	movs	r2, #2
 8004cb0:	701a      	strb	r2, [r3, #0]
      break;
 8004cb2:	e02a      	b.n	8004d0a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	212c      	movs	r1, #44	; 0x2c
 8004cba:	fb01 f303 	mul.w	r3, r1, r3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	3354      	adds	r3, #84	; 0x54
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d109      	bne.n	8004cdc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	212c      	movs	r1, #44	; 0x2c
 8004cce:	fb01 f303 	mul.w	r3, r1, r3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	3342      	adds	r3, #66	; 0x42
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	701a      	strb	r2, [r3, #0]
      break;
 8004cda:	e016      	b.n	8004d0a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	212c      	movs	r1, #44	; 0x2c
 8004ce2:	fb01 f303 	mul.w	r3, r1, r3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	3342      	adds	r3, #66	; 0x42
 8004cea:	2202      	movs	r2, #2
 8004cec:	701a      	strb	r2, [r3, #0]
      break;
 8004cee:	e00c      	b.n	8004d0a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cf0:	78fb      	ldrb	r3, [r7, #3]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	212c      	movs	r1, #44	; 0x2c
 8004cf6:	fb01 f303 	mul.w	r3, r1, r3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	3342      	adds	r3, #66	; 0x42
 8004cfe:	2200      	movs	r2, #0
 8004d00:	701a      	strb	r2, [r3, #0]
      break;
 8004d02:	e002      	b.n	8004d0a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004d04:	bf00      	nop
 8004d06:	e000      	b.n	8004d0a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004d08:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004d0a:	78fb      	ldrb	r3, [r7, #3]
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	212c      	movs	r1, #44	; 0x2c
 8004d10:	fb01 f303 	mul.w	r3, r1, r3
 8004d14:	4413      	add	r3, r2
 8004d16:	3344      	adds	r3, #68	; 0x44
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	8b3a      	ldrh	r2, [r7, #24]
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	202c      	movs	r0, #44	; 0x2c
 8004d24:	fb00 f303 	mul.w	r3, r0, r3
 8004d28:	440b      	add	r3, r1
 8004d2a:	334c      	adds	r3, #76	; 0x4c
 8004d2c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004d2e:	78fb      	ldrb	r3, [r7, #3]
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	212c      	movs	r1, #44	; 0x2c
 8004d34:	fb01 f303 	mul.w	r3, r1, r3
 8004d38:	4413      	add	r3, r2
 8004d3a:	3360      	adds	r3, #96	; 0x60
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004d40:	78fb      	ldrb	r3, [r7, #3]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	212c      	movs	r1, #44	; 0x2c
 8004d46:	fb01 f303 	mul.w	r3, r1, r3
 8004d4a:	4413      	add	r3, r2
 8004d4c:	3350      	adds	r3, #80	; 0x50
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	212c      	movs	r1, #44	; 0x2c
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3339      	adds	r3, #57	; 0x39
 8004d60:	78fa      	ldrb	r2, [r7, #3]
 8004d62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	212c      	movs	r1, #44	; 0x2c
 8004d6a:	fb01 f303 	mul.w	r3, r1, r3
 8004d6e:	4413      	add	r3, r2
 8004d70:	3361      	adds	r3, #97	; 0x61
 8004d72:	2200      	movs	r2, #0
 8004d74:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	222c      	movs	r2, #44	; 0x2c
 8004d7e:	fb02 f303 	mul.w	r3, r2, r3
 8004d82:	3338      	adds	r3, #56	; 0x38
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	18d1      	adds	r1, r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f008 f8d8 	bl	800cf44 <USB_HC_StartXfer>
 8004d94:	4603      	mov	r3, r0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop

08004da0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f007 fdfd 	bl	800c9b6 <USB_GetMode>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	f040 80ef 	bne.w	8004fa2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f007 fde1 	bl	800c990 <USB_ReadInterrupts>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 80e5 	beq.w	8004fa0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f007 fdd8 	bl	800c990 <USB_ReadInterrupts>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004de6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dea:	d104      	bne.n	8004df6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004df4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f007 fdc8 	bl	800c990 <USB_ReadInterrupts>
 8004e00:	4603      	mov	r3, r0
 8004e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e0a:	d104      	bne.n	8004e16 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f007 fdb8 	bl	800c990 <USB_ReadInterrupts>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e2a:	d104      	bne.n	8004e36 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004e34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f007 fda8 	bl	800c990 <USB_ReadInterrupts>
 8004e40:	4603      	mov	r3, r0
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d103      	bne.n	8004e52 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f007 fd9a 	bl	800c990 <USB_ReadInterrupts>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e66:	d115      	bne.n	8004e94 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004e70:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d108      	bne.n	8004e94 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f00a fd4e 	bl	800f924 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f007 fe84 	bl	800cb9c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f007 fd79 	bl	800c990 <USB_ReadInterrupts>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ea8:	d102      	bne.n	8004eb0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f001 f9ff 	bl	80062ae <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f007 fd6b 	bl	800c990 <USB_ReadInterrupts>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d106      	bne.n	8004ed2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f00a fd11 	bl	800f8ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2208      	movs	r2, #8
 8004ed0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f007 fd5a 	bl	800c990 <USB_ReadInterrupts>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b10      	cmp	r3, #16
 8004ee4:	d101      	bne.n	8004eea <HAL_HCD_IRQHandler+0x14a>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <HAL_HCD_IRQHandler+0x14c>
 8004eea:	2300      	movs	r3, #0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d012      	beq.n	8004f16 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0210 	bic.w	r2, r2, #16
 8004efe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f001 f902 	bl	800610a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	699a      	ldr	r2, [r3, #24]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0210 	orr.w	r2, r2, #16
 8004f14:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f007 fd38 	bl	800c990 <USB_ReadInterrupts>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f2a:	d13a      	bne.n	8004fa2 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f008 f949 	bl	800d1c8 <USB_HC_ReadInterrupt>
 8004f36:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	e025      	b.n	8004f8a <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f003 030f 	and.w	r3, r3, #15
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d018      	beq.n	8004f84 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f68:	d106      	bne.n	8004f78 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	4619      	mov	r1, r3
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f8ab 	bl	80050cc <HCD_HC_IN_IRQHandler>
 8004f76:	e005      	b.n	8004f84 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fcc6 	bl	8005910 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	3301      	adds	r3, #1
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d3d4      	bcc.n	8004f3e <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f9c:	615a      	str	r2, [r3, #20]
 8004f9e:	e000      	b.n	8004fa2 <HAL_HCD_IRQHandler+0x202>
      return;
 8004fa0:	bf00      	nop
    }
  }
}
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <HAL_HCD_Start+0x16>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e013      	b.n	8004fe6 <HAL_HCD_Start+0x3e>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f007 fbee 	bl	800c7ac <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f007 fe44 	bl	800cc64 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b082      	sub	sp, #8
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_HCD_Stop+0x16>
 8005000:	2302      	movs	r3, #2
 8005002:	e00d      	b.n	8005020 <HAL_HCD_Stop+0x32>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f008 fa43 	bl	800d49c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4618      	mov	r0, r3
 8005036:	f007 fdeb 	bl	800cc10 <USB_ResetPort>
 800503a:	4603      	mov	r3, r0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005050:	78fb      	ldrb	r3, [r7, #3]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	212c      	movs	r1, #44	; 0x2c
 8005056:	fb01 f303 	mul.w	r3, r1, r3
 800505a:	4413      	add	r3, r2
 800505c:	3360      	adds	r3, #96	; 0x60
 800505e:	781b      	ldrb	r3, [r3, #0]
}
 8005060:	4618      	mov	r0, r3
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	212c      	movs	r1, #44	; 0x2c
 800507e:	fb01 f303 	mul.w	r3, r1, r3
 8005082:	4413      	add	r3, r2
 8005084:	3350      	adds	r3, #80	; 0x50
 8005086:	681b      	ldr	r3, [r3, #0]
}
 8005088:	4618      	mov	r0, r3
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f007 fe2f 	bl	800cd04 <USB_GetCurrentFrame>
 80050a6:	4603      	mov	r3, r0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4618      	mov	r0, r3
 80050be:	f007 fe0a 	bl	800ccd6 <USB_GetHostSpeed>
 80050c2:	4603      	mov	r3, r0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	460b      	mov	r3, r1
 80050d6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80050e2:	78fb      	ldrb	r3, [r7, #3]
 80050e4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d119      	bne.n	8005130 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	4413      	add	r3, r2
 8005104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005108:	461a      	mov	r2, r3
 800510a:	2304      	movs	r3, #4
 800510c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4413      	add	r3, r2
 8005116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	0151      	lsls	r1, r2, #5
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	440a      	add	r2, r1
 8005124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005128:	f043 0302 	orr.w	r3, r3, #2
 800512c:	60d3      	str	r3, [r2, #12]
 800512e:	e101      	b.n	8005334 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	4413      	add	r3, r2
 8005138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005146:	d12b      	bne.n	80051a0 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4413      	add	r3, r2
 8005150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005154:	461a      	mov	r2, r3
 8005156:	f44f 7380 	mov.w	r3, #256	; 0x100
 800515a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	212c      	movs	r1, #44	; 0x2c
 8005162:	fb01 f303 	mul.w	r3, r1, r3
 8005166:	4413      	add	r3, r2
 8005168:	3361      	adds	r3, #97	; 0x61
 800516a:	2207      	movs	r2, #7
 800516c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4413      	add	r3, r2
 8005176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	0151      	lsls	r1, r2, #5
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	440a      	add	r2, r1
 8005184:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005188:	f043 0302 	orr.w	r3, r3, #2
 800518c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	4611      	mov	r1, r2
 8005198:	4618      	mov	r0, r3
 800519a:	f008 f826 	bl	800d1ea <USB_HC_Halt>
 800519e:	e0c9      	b.n	8005334 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d109      	bne.n	80051ca <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c2:	461a      	mov	r2, r3
 80051c4:	2320      	movs	r3, #32
 80051c6:	6093      	str	r3, [r2, #8]
 80051c8:	e0b4      	b.n	8005334 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d133      	bne.n	8005248 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051fa:	f043 0302 	orr.w	r3, r3, #2
 80051fe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	212c      	movs	r1, #44	; 0x2c
 8005206:	fb01 f303 	mul.w	r3, r1, r3
 800520a:	4413      	add	r3, r2
 800520c:	3361      	adds	r3, #97	; 0x61
 800520e:	2205      	movs	r2, #5
 8005210:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	4413      	add	r3, r2
 800521a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521e:	461a      	mov	r2, r3
 8005220:	2310      	movs	r3, #16
 8005222:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4413      	add	r3, r2
 800522c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005230:	461a      	mov	r2, r3
 8005232:	2308      	movs	r3, #8
 8005234:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	4611      	mov	r1, r2
 8005240:	4618      	mov	r0, r3
 8005242:	f007 ffd2 	bl	800d1ea <USB_HC_Halt>
 8005246:	e075      	b.n	8005334 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	4413      	add	r3, r2
 8005250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800525a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800525e:	d134      	bne.n	80052ca <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	4413      	add	r3, r2
 8005268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	0151      	lsls	r1, r2, #5
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	440a      	add	r2, r1
 8005276:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800527a:	f043 0302 	orr.w	r3, r3, #2
 800527e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	212c      	movs	r1, #44	; 0x2c
 8005286:	fb01 f303 	mul.w	r3, r1, r3
 800528a:	4413      	add	r3, r2
 800528c:	3361      	adds	r3, #97	; 0x61
 800528e:	2208      	movs	r2, #8
 8005290:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	4413      	add	r3, r2
 800529a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529e:	461a      	mov	r2, r3
 80052a0:	2310      	movs	r3, #16
 80052a2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b0:	461a      	mov	r2, r3
 80052b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052b6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	4611      	mov	r1, r2
 80052c2:	4618      	mov	r0, r3
 80052c4:	f007 ff91 	bl	800d1ea <USB_HC_Halt>
 80052c8:	e034      	b.n	8005334 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052dc:	2b80      	cmp	r3, #128	; 0x80
 80052de:	d129      	bne.n	8005334 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	0151      	lsls	r1, r2, #5
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	440a      	add	r2, r1
 80052f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052fa:	f043 0302 	orr.w	r3, r3, #2
 80052fe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	212c      	movs	r1, #44	; 0x2c
 8005306:	fb01 f303 	mul.w	r3, r1, r3
 800530a:	4413      	add	r3, r2
 800530c:	3361      	adds	r3, #97	; 0x61
 800530e:	2206      	movs	r2, #6
 8005310:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	4611      	mov	r1, r2
 800531c:	4618      	mov	r0, r3
 800531e:	f007 ff64 	bl	800d1ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	4413      	add	r3, r2
 800532a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532e:	461a      	mov	r2, r3
 8005330:	2380      	movs	r3, #128	; 0x80
 8005332:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	4413      	add	r3, r2
 800533c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800534a:	d122      	bne.n	8005392 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	4413      	add	r3, r2
 8005354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	0151      	lsls	r1, r2, #5
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	440a      	add	r2, r1
 8005362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005366:	f043 0302 	orr.w	r3, r3, #2
 800536a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	4611      	mov	r1, r2
 8005376:	4618      	mov	r0, r3
 8005378:	f007 ff37 	bl	800d1ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	4413      	add	r3, r2
 8005384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005388:	461a      	mov	r2, r3
 800538a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800538e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005390:	e2ba      	b.n	8005908 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	4413      	add	r3, r2
 800539a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	f040 811b 	bne.w	80055e0 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d019      	beq.n	80053e6 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	212c      	movs	r1, #44	; 0x2c
 80053b8:	fb01 f303 	mul.w	r3, r1, r3
 80053bc:	4413      	add	r3, r2
 80053be:	3348      	adds	r3, #72	; 0x48
 80053c0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	0159      	lsls	r1, r3, #5
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	440b      	add	r3, r1
 80053ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80053d4:	1ad2      	subs	r2, r2, r3
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	202c      	movs	r0, #44	; 0x2c
 80053dc:	fb00 f303 	mul.w	r3, r0, r3
 80053e0:	440b      	add	r3, r1
 80053e2:	3350      	adds	r3, #80	; 0x50
 80053e4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	212c      	movs	r1, #44	; 0x2c
 80053ec:	fb01 f303 	mul.w	r3, r1, r3
 80053f0:	4413      	add	r3, r2
 80053f2:	3361      	adds	r3, #97	; 0x61
 80053f4:	2201      	movs	r2, #1
 80053f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	212c      	movs	r1, #44	; 0x2c
 80053fe:	fb01 f303 	mul.w	r3, r1, r3
 8005402:	4413      	add	r3, r2
 8005404:	335c      	adds	r3, #92	; 0x5c
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	4413      	add	r3, r2
 8005412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005416:	461a      	mov	r2, r3
 8005418:	2301      	movs	r3, #1
 800541a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	212c      	movs	r1, #44	; 0x2c
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	4413      	add	r3, r2
 8005428:	333f      	adds	r3, #63	; 0x3f
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d009      	beq.n	8005444 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	212c      	movs	r1, #44	; 0x2c
 8005436:	fb01 f303 	mul.w	r3, r1, r3
 800543a:	4413      	add	r3, r2
 800543c:	333f      	adds	r3, #63	; 0x3f
 800543e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005440:	2b02      	cmp	r3, #2
 8005442:	d121      	bne.n	8005488 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	4413      	add	r3, r2
 800544c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	0151      	lsls	r1, r2, #5
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	440a      	add	r2, r1
 800545a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800545e:	f043 0302 	orr.w	r3, r3, #2
 8005462:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	4611      	mov	r1, r2
 800546e:	4618      	mov	r0, r3
 8005470:	f007 febb 	bl	800d1ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	4413      	add	r3, r2
 800547c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005480:	461a      	mov	r2, r3
 8005482:	2310      	movs	r3, #16
 8005484:	6093      	str	r3, [r2, #8]
 8005486:	e066      	b.n	8005556 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	212c      	movs	r1, #44	; 0x2c
 800548e:	fb01 f303 	mul.w	r3, r1, r3
 8005492:	4413      	add	r3, r2
 8005494:	333f      	adds	r3, #63	; 0x3f
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b03      	cmp	r3, #3
 800549a:	d127      	bne.n	80054ec <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	0151      	lsls	r1, r2, #5
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	440a      	add	r2, r1
 80054b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054ba:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	212c      	movs	r1, #44	; 0x2c
 80054c2:	fb01 f303 	mul.w	r3, r1, r3
 80054c6:	4413      	add	r3, r2
 80054c8:	3360      	adds	r3, #96	; 0x60
 80054ca:	2201      	movs	r2, #1
 80054cc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	b2d9      	uxtb	r1, r3
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	202c      	movs	r0, #44	; 0x2c
 80054d8:	fb00 f303 	mul.w	r3, r0, r3
 80054dc:	4413      	add	r3, r2
 80054de:	3360      	adds	r3, #96	; 0x60
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f00a fa2b 	bl	800f940 <HAL_HCD_HC_NotifyURBChange_Callback>
 80054ea:	e034      	b.n	8005556 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	212c      	movs	r1, #44	; 0x2c
 80054f2:	fb01 f303 	mul.w	r3, r1, r3
 80054f6:	4413      	add	r3, r2
 80054f8:	333f      	adds	r3, #63	; 0x3f
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d12a      	bne.n	8005556 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	212c      	movs	r1, #44	; 0x2c
 8005506:	fb01 f303 	mul.w	r3, r1, r3
 800550a:	4413      	add	r3, r2
 800550c:	3360      	adds	r3, #96	; 0x60
 800550e:	2201      	movs	r2, #1
 8005510:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	212c      	movs	r1, #44	; 0x2c
 8005518:	fb01 f303 	mul.w	r3, r1, r3
 800551c:	4413      	add	r3, r2
 800551e:	3354      	adds	r3, #84	; 0x54
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	f083 0301 	eor.w	r3, r3, #1
 8005526:	b2d8      	uxtb	r0, r3
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	212c      	movs	r1, #44	; 0x2c
 800552e:	fb01 f303 	mul.w	r3, r1, r3
 8005532:	4413      	add	r3, r2
 8005534:	3354      	adds	r3, #84	; 0x54
 8005536:	4602      	mov	r2, r0
 8005538:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	b2d9      	uxtb	r1, r3
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	202c      	movs	r0, #44	; 0x2c
 8005544:	fb00 f303 	mul.w	r3, r0, r3
 8005548:	4413      	add	r3, r2
 800554a:	3360      	adds	r3, #96	; 0x60
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f00a f9f5 	bl	800f940 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d12b      	bne.n	80055b6 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	212c      	movs	r1, #44	; 0x2c
 8005564:	fb01 f303 	mul.w	r3, r1, r3
 8005568:	4413      	add	r3, r2
 800556a:	3348      	adds	r3, #72	; 0x48
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	202c      	movs	r0, #44	; 0x2c
 8005574:	fb00 f202 	mul.w	r2, r0, r2
 8005578:	440a      	add	r2, r1
 800557a:	3240      	adds	r2, #64	; 0x40
 800557c:	8812      	ldrh	r2, [r2, #0]
 800557e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 81be 	beq.w	8005908 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	212c      	movs	r1, #44	; 0x2c
 8005592:	fb01 f303 	mul.w	r3, r1, r3
 8005596:	4413      	add	r3, r2
 8005598:	3354      	adds	r3, #84	; 0x54
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	f083 0301 	eor.w	r3, r3, #1
 80055a0:	b2d8      	uxtb	r0, r3
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	212c      	movs	r1, #44	; 0x2c
 80055a8:	fb01 f303 	mul.w	r3, r1, r3
 80055ac:	4413      	add	r3, r2
 80055ae:	3354      	adds	r3, #84	; 0x54
 80055b0:	4602      	mov	r2, r0
 80055b2:	701a      	strb	r2, [r3, #0]
}
 80055b4:	e1a8      	b.n	8005908 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	212c      	movs	r1, #44	; 0x2c
 80055bc:	fb01 f303 	mul.w	r3, r1, r3
 80055c0:	4413      	add	r3, r2
 80055c2:	3354      	adds	r3, #84	; 0x54
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	f083 0301 	eor.w	r3, r3, #1
 80055ca:	b2d8      	uxtb	r0, r3
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	212c      	movs	r1, #44	; 0x2c
 80055d2:	fb01 f303 	mul.w	r3, r1, r3
 80055d6:	4413      	add	r3, r2
 80055d8:	3354      	adds	r3, #84	; 0x54
 80055da:	4602      	mov	r2, r0
 80055dc:	701a      	strb	r2, [r3, #0]
}
 80055de:	e193      	b.n	8005908 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	f040 8106 	bne.w	8005804 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	0151      	lsls	r1, r2, #5
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	440a      	add	r2, r1
 800560e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005612:	f023 0302 	bic.w	r3, r3, #2
 8005616:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	212c      	movs	r1, #44	; 0x2c
 800561e:	fb01 f303 	mul.w	r3, r1, r3
 8005622:	4413      	add	r3, r2
 8005624:	3361      	adds	r3, #97	; 0x61
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d109      	bne.n	8005640 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	212c      	movs	r1, #44	; 0x2c
 8005632:	fb01 f303 	mul.w	r3, r1, r3
 8005636:	4413      	add	r3, r2
 8005638:	3360      	adds	r3, #96	; 0x60
 800563a:	2201      	movs	r2, #1
 800563c:	701a      	strb	r2, [r3, #0]
 800563e:	e0c9      	b.n	80057d4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	212c      	movs	r1, #44	; 0x2c
 8005646:	fb01 f303 	mul.w	r3, r1, r3
 800564a:	4413      	add	r3, r2
 800564c:	3361      	adds	r3, #97	; 0x61
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b05      	cmp	r3, #5
 8005652:	d109      	bne.n	8005668 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	212c      	movs	r1, #44	; 0x2c
 800565a:	fb01 f303 	mul.w	r3, r1, r3
 800565e:	4413      	add	r3, r2
 8005660:	3360      	adds	r3, #96	; 0x60
 8005662:	2205      	movs	r2, #5
 8005664:	701a      	strb	r2, [r3, #0]
 8005666:	e0b5      	b.n	80057d4 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	212c      	movs	r1, #44	; 0x2c
 800566e:	fb01 f303 	mul.w	r3, r1, r3
 8005672:	4413      	add	r3, r2
 8005674:	3361      	adds	r3, #97	; 0x61
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b06      	cmp	r3, #6
 800567a:	d009      	beq.n	8005690 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	212c      	movs	r1, #44	; 0x2c
 8005682:	fb01 f303 	mul.w	r3, r1, r3
 8005686:	4413      	add	r3, r2
 8005688:	3361      	adds	r3, #97	; 0x61
 800568a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800568c:	2b08      	cmp	r3, #8
 800568e:	d150      	bne.n	8005732 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	212c      	movs	r1, #44	; 0x2c
 8005696:	fb01 f303 	mul.w	r3, r1, r3
 800569a:	4413      	add	r3, r2
 800569c:	335c      	adds	r3, #92	; 0x5c
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	6879      	ldr	r1, [r7, #4]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	202c      	movs	r0, #44	; 0x2c
 80056a8:	fb00 f303 	mul.w	r3, r0, r3
 80056ac:	440b      	add	r3, r1
 80056ae:	335c      	adds	r3, #92	; 0x5c
 80056b0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	212c      	movs	r1, #44	; 0x2c
 80056b8:	fb01 f303 	mul.w	r3, r1, r3
 80056bc:	4413      	add	r3, r2
 80056be:	335c      	adds	r3, #92	; 0x5c
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d912      	bls.n	80056ec <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	212c      	movs	r1, #44	; 0x2c
 80056cc:	fb01 f303 	mul.w	r3, r1, r3
 80056d0:	4413      	add	r3, r2
 80056d2:	335c      	adds	r3, #92	; 0x5c
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	212c      	movs	r1, #44	; 0x2c
 80056de:	fb01 f303 	mul.w	r3, r1, r3
 80056e2:	4413      	add	r3, r2
 80056e4:	3360      	adds	r3, #96	; 0x60
 80056e6:	2204      	movs	r2, #4
 80056e8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80056ea:	e073      	b.n	80057d4 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	212c      	movs	r1, #44	; 0x2c
 80056f2:	fb01 f303 	mul.w	r3, r1, r3
 80056f6:	4413      	add	r3, r2
 80056f8:	3360      	adds	r3, #96	; 0x60
 80056fa:	2202      	movs	r2, #2
 80056fc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	4413      	add	r3, r2
 8005706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005714:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800571c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	4413      	add	r3, r2
 8005726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572a:	461a      	mov	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005730:	e050      	b.n	80057d4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	212c      	movs	r1, #44	; 0x2c
 8005738:	fb01 f303 	mul.w	r3, r1, r3
 800573c:	4413      	add	r3, r2
 800573e:	3361      	adds	r3, #97	; 0x61
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b03      	cmp	r3, #3
 8005744:	d122      	bne.n	800578c <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	212c      	movs	r1, #44	; 0x2c
 800574c:	fb01 f303 	mul.w	r3, r1, r3
 8005750:	4413      	add	r3, r2
 8005752:	3360      	adds	r3, #96	; 0x60
 8005754:	2202      	movs	r2, #2
 8005756:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	4413      	add	r3, r2
 8005760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800576e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005776:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	4413      	add	r3, r2
 8005780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005784:	461a      	mov	r2, r3
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	e023      	b.n	80057d4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	212c      	movs	r1, #44	; 0x2c
 8005792:	fb01 f303 	mul.w	r3, r1, r3
 8005796:	4413      	add	r3, r2
 8005798:	3361      	adds	r3, #97	; 0x61
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b07      	cmp	r3, #7
 800579e:	d119      	bne.n	80057d4 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	212c      	movs	r1, #44	; 0x2c
 80057a6:	fb01 f303 	mul.w	r3, r1, r3
 80057aa:	4413      	add	r3, r2
 80057ac:	335c      	adds	r3, #92	; 0x5c
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	202c      	movs	r0, #44	; 0x2c
 80057b8:	fb00 f303 	mul.w	r3, r0, r3
 80057bc:	440b      	add	r3, r1
 80057be:	335c      	adds	r3, #92	; 0x5c
 80057c0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	212c      	movs	r1, #44	; 0x2c
 80057c8:	fb01 f303 	mul.w	r3, r1, r3
 80057cc:	4413      	add	r3, r2
 80057ce:	3360      	adds	r3, #96	; 0x60
 80057d0:	2204      	movs	r2, #4
 80057d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e0:	461a      	mov	r2, r3
 80057e2:	2302      	movs	r3, #2
 80057e4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	b2d9      	uxtb	r1, r3
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	202c      	movs	r0, #44	; 0x2c
 80057f0:	fb00 f303 	mul.w	r3, r0, r3
 80057f4:	4413      	add	r3, r2
 80057f6:	3360      	adds	r3, #96	; 0x60
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f00a f89f 	bl	800f940 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005802:	e081      	b.n	8005908 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	4413      	add	r3, r2
 800580c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 0310 	and.w	r3, r3, #16
 8005816:	2b10      	cmp	r3, #16
 8005818:	d176      	bne.n	8005908 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	212c      	movs	r1, #44	; 0x2c
 8005820:	fb01 f303 	mul.w	r3, r1, r3
 8005824:	4413      	add	r3, r2
 8005826:	333f      	adds	r3, #63	; 0x3f
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2b03      	cmp	r3, #3
 800582c:	d121      	bne.n	8005872 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	212c      	movs	r1, #44	; 0x2c
 8005834:	fb01 f303 	mul.w	r3, r1, r3
 8005838:	4413      	add	r3, r2
 800583a:	335c      	adds	r3, #92	; 0x5c
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	4413      	add	r3, r2
 8005848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	0151      	lsls	r1, r2, #5
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	440a      	add	r2, r1
 8005856:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800585a:	f043 0302 	orr.w	r3, r3, #2
 800585e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	4611      	mov	r1, r2
 800586a:	4618      	mov	r0, r3
 800586c:	f007 fcbd 	bl	800d1ea <USB_HC_Halt>
 8005870:	e041      	b.n	80058f6 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	212c      	movs	r1, #44	; 0x2c
 8005878:	fb01 f303 	mul.w	r3, r1, r3
 800587c:	4413      	add	r3, r2
 800587e:	333f      	adds	r3, #63	; 0x3f
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d009      	beq.n	800589a <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	212c      	movs	r1, #44	; 0x2c
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	4413      	add	r3, r2
 8005892:	333f      	adds	r3, #63	; 0x3f
 8005894:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005896:	2b02      	cmp	r3, #2
 8005898:	d12d      	bne.n	80058f6 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	212c      	movs	r1, #44	; 0x2c
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	4413      	add	r3, r2
 80058a6:	335c      	adds	r3, #92	; 0x5c
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d120      	bne.n	80058f6 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	212c      	movs	r1, #44	; 0x2c
 80058ba:	fb01 f303 	mul.w	r3, r1, r3
 80058be:	4413      	add	r3, r2
 80058c0:	3361      	adds	r3, #97	; 0x61
 80058c2:	2203      	movs	r2, #3
 80058c4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	0151      	lsls	r1, r2, #5
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	440a      	add	r2, r1
 80058dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058e0:	f043 0302 	orr.w	r3, r3, #2
 80058e4:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	b2d2      	uxtb	r2, r2
 80058ee:	4611      	mov	r1, r2
 80058f0:	4618      	mov	r0, r3
 80058f2:	f007 fc7a 	bl	800d1ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005902:	461a      	mov	r2, r3
 8005904:	2310      	movs	r3, #16
 8005906:	6093      	str	r3, [r2, #8]
}
 8005908:	bf00      	nop
 800590a:	3718      	adds	r7, #24
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005926:	78fb      	ldrb	r3, [r7, #3]
 8005928:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	4413      	add	r3, r2
 8005932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b04      	cmp	r3, #4
 800593e:	d119      	bne.n	8005974 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	4413      	add	r3, r2
 8005948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800594c:	461a      	mov	r2, r3
 800594e:	2304      	movs	r3, #4
 8005950:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	4413      	add	r3, r2
 800595a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	0151      	lsls	r1, r2, #5
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	440a      	add	r2, r1
 8005968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800596c:	f043 0302 	orr.w	r3, r3, #2
 8005970:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005972:	e3c6      	b.n	8006102 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	4413      	add	r3, r2
 800597c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b20      	cmp	r3, #32
 8005988:	d13e      	bne.n	8005a08 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	4413      	add	r3, r2
 8005992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005996:	461a      	mov	r2, r3
 8005998:	2320      	movs	r3, #32
 800599a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	212c      	movs	r1, #44	; 0x2c
 80059a2:	fb01 f303 	mul.w	r3, r1, r3
 80059a6:	4413      	add	r3, r2
 80059a8:	333d      	adds	r3, #61	; 0x3d
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	f040 83a8 	bne.w	8006102 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	212c      	movs	r1, #44	; 0x2c
 80059b8:	fb01 f303 	mul.w	r3, r1, r3
 80059bc:	4413      	add	r3, r2
 80059be:	333d      	adds	r3, #61	; 0x3d
 80059c0:	2200      	movs	r2, #0
 80059c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	212c      	movs	r1, #44	; 0x2c
 80059ca:	fb01 f303 	mul.w	r3, r1, r3
 80059ce:	4413      	add	r3, r2
 80059d0:	3360      	adds	r3, #96	; 0x60
 80059d2:	2202      	movs	r2, #2
 80059d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	0151      	lsls	r1, r2, #5
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	440a      	add	r2, r1
 80059ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059f0:	f043 0302 	orr.w	r3, r3, #2
 80059f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	4611      	mov	r1, r2
 8005a00:	4618      	mov	r0, r3
 8005a02:	f007 fbf2 	bl	800d1ea <USB_HC_Halt>
}
 8005a06:	e37c      	b.n	8006102 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a1e:	d122      	bne.n	8005a66 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a3a:	f043 0302 	orr.w	r3, r3, #2
 8005a3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	4611      	mov	r1, r2
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f007 fbcd 	bl	800d1ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a62:	6093      	str	r3, [r2, #8]
}
 8005a64:	e34d      	b.n	8006102 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d150      	bne.n	8005b1e <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	212c      	movs	r1, #44	; 0x2c
 8005a82:	fb01 f303 	mul.w	r3, r1, r3
 8005a86:	4413      	add	r3, r2
 8005a88:	335c      	adds	r3, #92	; 0x5c
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa0:	2b40      	cmp	r3, #64	; 0x40
 8005aa2:	d111      	bne.n	8005ac8 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	212c      	movs	r1, #44	; 0x2c
 8005aaa:	fb01 f303 	mul.w	r3, r1, r3
 8005aae:	4413      	add	r3, r2
 8005ab0:	333d      	adds	r3, #61	; 0x3d
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	2340      	movs	r3, #64	; 0x40
 8005ac6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	0151      	lsls	r1, r2, #5
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	440a      	add	r2, r1
 8005ade:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ae2:	f043 0302 	orr.w	r3, r3, #2
 8005ae6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	4611      	mov	r1, r2
 8005af2:	4618      	mov	r0, r3
 8005af4:	f007 fb79 	bl	800d1ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b04:	461a      	mov	r2, r3
 8005b06:	2301      	movs	r3, #1
 8005b08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	212c      	movs	r1, #44	; 0x2c
 8005b10:	fb01 f303 	mul.w	r3, r1, r3
 8005b14:	4413      	add	r3, r2
 8005b16:	3361      	adds	r3, #97	; 0x61
 8005b18:	2201      	movs	r2, #1
 8005b1a:	701a      	strb	r2, [r3, #0]
}
 8005b1c:	e2f1      	b.n	8006102 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b30:	2b40      	cmp	r3, #64	; 0x40
 8005b32:	d13c      	bne.n	8005bae <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	212c      	movs	r1, #44	; 0x2c
 8005b3a:	fb01 f303 	mul.w	r3, r1, r3
 8005b3e:	4413      	add	r3, r2
 8005b40:	3361      	adds	r3, #97	; 0x61
 8005b42:	2204      	movs	r2, #4
 8005b44:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	212c      	movs	r1, #44	; 0x2c
 8005b4c:	fb01 f303 	mul.w	r3, r1, r3
 8005b50:	4413      	add	r3, r2
 8005b52:	333d      	adds	r3, #61	; 0x3d
 8005b54:	2201      	movs	r2, #1
 8005b56:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	212c      	movs	r1, #44	; 0x2c
 8005b5e:	fb01 f303 	mul.w	r3, r1, r3
 8005b62:	4413      	add	r3, r2
 8005b64:	335c      	adds	r3, #92	; 0x5c
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	0151      	lsls	r1, r2, #5
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	440a      	add	r2, r1
 8005b80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b84:	f043 0302 	orr.w	r3, r3, #2
 8005b88:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	4611      	mov	r1, r2
 8005b94:	4618      	mov	r0, r3
 8005b96:	f007 fb28 	bl	800d1ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	2340      	movs	r3, #64	; 0x40
 8005baa:	6093      	str	r3, [r2, #8]
}
 8005bac:	e2a9      	b.n	8006102 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f003 0308 	and.w	r3, r3, #8
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d12a      	bne.n	8005c1a <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	2308      	movs	r3, #8
 8005bd4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	0151      	lsls	r1, r2, #5
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	440a      	add	r2, r1
 8005bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bf0:	f043 0302 	orr.w	r3, r3, #2
 8005bf4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	4611      	mov	r1, r2
 8005c00:	4618      	mov	r0, r3
 8005c02:	f007 faf2 	bl	800d1ea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	212c      	movs	r1, #44	; 0x2c
 8005c0c:	fb01 f303 	mul.w	r3, r1, r3
 8005c10:	4413      	add	r3, r2
 8005c12:	3361      	adds	r3, #97	; 0x61
 8005c14:	2205      	movs	r2, #5
 8005c16:	701a      	strb	r2, [r3, #0]
}
 8005c18:	e273      	b.n	8006102 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	2b10      	cmp	r3, #16
 8005c2e:	d150      	bne.n	8005cd2 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	212c      	movs	r1, #44	; 0x2c
 8005c36:	fb01 f303 	mul.w	r3, r1, r3
 8005c3a:	4413      	add	r3, r2
 8005c3c:	335c      	adds	r3, #92	; 0x5c
 8005c3e:	2200      	movs	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	212c      	movs	r1, #44	; 0x2c
 8005c48:	fb01 f303 	mul.w	r3, r1, r3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	3361      	adds	r3, #97	; 0x61
 8005c50:	2203      	movs	r2, #3
 8005c52:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	212c      	movs	r1, #44	; 0x2c
 8005c5a:	fb01 f303 	mul.w	r3, r1, r3
 8005c5e:	4413      	add	r3, r2
 8005c60:	333d      	adds	r3, #61	; 0x3d
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d112      	bne.n	8005c8e <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	212c      	movs	r1, #44	; 0x2c
 8005c6e:	fb01 f303 	mul.w	r3, r1, r3
 8005c72:	4413      	add	r3, r2
 8005c74:	333c      	adds	r3, #60	; 0x3c
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d108      	bne.n	8005c8e <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	212c      	movs	r1, #44	; 0x2c
 8005c82:	fb01 f303 	mul.w	r3, r1, r3
 8005c86:	4413      	add	r3, r2
 8005c88:	333d      	adds	r3, #61	; 0x3d
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	0151      	lsls	r1, r2, #5
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	440a      	add	r2, r1
 8005ca4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ca8:	f043 0302 	orr.w	r3, r3, #2
 8005cac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	b2d2      	uxtb	r2, r2
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f007 fa96 	bl	800d1ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cca:	461a      	mov	r2, r3
 8005ccc:	2310      	movs	r3, #16
 8005cce:	6093      	str	r3, [r2, #8]
}
 8005cd0:	e217      	b.n	8006102 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce4:	2b80      	cmp	r3, #128	; 0x80
 8005ce6:	d174      	bne.n	8005dd2 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d121      	bne.n	8005d34 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	212c      	movs	r1, #44	; 0x2c
 8005cf6:	fb01 f303 	mul.w	r3, r1, r3
 8005cfa:	4413      	add	r3, r2
 8005cfc:	3361      	adds	r3, #97	; 0x61
 8005cfe:	2206      	movs	r2, #6
 8005d00:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	0151      	lsls	r1, r2, #5
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	440a      	add	r2, r1
 8005d18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d1c:	f043 0302 	orr.w	r3, r3, #2
 8005d20:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	4611      	mov	r1, r2
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f007 fa5c 	bl	800d1ea <USB_HC_Halt>
 8005d32:	e044      	b.n	8005dbe <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	212c      	movs	r1, #44	; 0x2c
 8005d3a:	fb01 f303 	mul.w	r3, r1, r3
 8005d3e:	4413      	add	r3, r2
 8005d40:	335c      	adds	r3, #92	; 0x5c
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	1c5a      	adds	r2, r3, #1
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	202c      	movs	r0, #44	; 0x2c
 8005d4c:	fb00 f303 	mul.w	r3, r0, r3
 8005d50:	440b      	add	r3, r1
 8005d52:	335c      	adds	r3, #92	; 0x5c
 8005d54:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	212c      	movs	r1, #44	; 0x2c
 8005d5c:	fb01 f303 	mul.w	r3, r1, r3
 8005d60:	4413      	add	r3, r2
 8005d62:	335c      	adds	r3, #92	; 0x5c
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d920      	bls.n	8005dac <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	212c      	movs	r1, #44	; 0x2c
 8005d70:	fb01 f303 	mul.w	r3, r1, r3
 8005d74:	4413      	add	r3, r2
 8005d76:	335c      	adds	r3, #92	; 0x5c
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	212c      	movs	r1, #44	; 0x2c
 8005d82:	fb01 f303 	mul.w	r3, r1, r3
 8005d86:	4413      	add	r3, r2
 8005d88:	3360      	adds	r3, #96	; 0x60
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	b2d9      	uxtb	r1, r3
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	202c      	movs	r0, #44	; 0x2c
 8005d98:	fb00 f303 	mul.w	r3, r0, r3
 8005d9c:	4413      	add	r3, r2
 8005d9e:	3360      	adds	r3, #96	; 0x60
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f009 fdcb 	bl	800f940 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005daa:	e008      	b.n	8005dbe <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	212c      	movs	r1, #44	; 0x2c
 8005db2:	fb01 f303 	mul.w	r3, r1, r3
 8005db6:	4413      	add	r3, r2
 8005db8:	3360      	adds	r3, #96	; 0x60
 8005dba:	2202      	movs	r2, #2
 8005dbc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dca:	461a      	mov	r2, r3
 8005dcc:	2380      	movs	r3, #128	; 0x80
 8005dce:	6093      	str	r3, [r2, #8]
}
 8005dd0:	e197      	b.n	8006102 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de8:	d134      	bne.n	8005e54 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e04:	f043 0302 	orr.w	r3, r3, #2
 8005e08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	b2d2      	uxtb	r2, r2
 8005e12:	4611      	mov	r1, r2
 8005e14:	4618      	mov	r0, r3
 8005e16:	f007 f9e8 	bl	800d1ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e26:	461a      	mov	r2, r3
 8005e28:	2310      	movs	r3, #16
 8005e2a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e38:	461a      	mov	r2, r3
 8005e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	212c      	movs	r1, #44	; 0x2c
 8005e46:	fb01 f303 	mul.w	r3, r1, r3
 8005e4a:	4413      	add	r3, r2
 8005e4c:	3361      	adds	r3, #97	; 0x61
 8005e4e:	2208      	movs	r2, #8
 8005e50:	701a      	strb	r2, [r3, #0]
}
 8005e52:	e156      	b.n	8006102 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	f040 814b 	bne.w	8006102 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	0151      	lsls	r1, r2, #5
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	440a      	add	r2, r1
 8005e82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e86:	f023 0302 	bic.w	r3, r3, #2
 8005e8a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	212c      	movs	r1, #44	; 0x2c
 8005e92:	fb01 f303 	mul.w	r3, r1, r3
 8005e96:	4413      	add	r3, r2
 8005e98:	3361      	adds	r3, #97	; 0x61
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d179      	bne.n	8005f94 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	212c      	movs	r1, #44	; 0x2c
 8005ea6:	fb01 f303 	mul.w	r3, r1, r3
 8005eaa:	4413      	add	r3, r2
 8005eac:	3360      	adds	r3, #96	; 0x60
 8005eae:	2201      	movs	r2, #1
 8005eb0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	212c      	movs	r1, #44	; 0x2c
 8005eb8:	fb01 f303 	mul.w	r3, r1, r3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	333f      	adds	r3, #63	; 0x3f
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d00a      	beq.n	8005edc <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	212c      	movs	r1, #44	; 0x2c
 8005ecc:	fb01 f303 	mul.w	r3, r1, r3
 8005ed0:	4413      	add	r3, r2
 8005ed2:	333f      	adds	r3, #63	; 0x3f
 8005ed4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	f040 80fc 	bne.w	80060d4 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d142      	bne.n	8005f6a <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	212c      	movs	r1, #44	; 0x2c
 8005eea:	fb01 f303 	mul.w	r3, r1, r3
 8005eee:	4413      	add	r3, r2
 8005ef0:	334c      	adds	r3, #76	; 0x4c
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 80ed 	beq.w	80060d4 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	212c      	movs	r1, #44	; 0x2c
 8005f00:	fb01 f303 	mul.w	r3, r1, r3
 8005f04:	4413      	add	r3, r2
 8005f06:	334c      	adds	r3, #76	; 0x4c
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6879      	ldr	r1, [r7, #4]
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	202c      	movs	r0, #44	; 0x2c
 8005f10:	fb00 f202 	mul.w	r2, r0, r2
 8005f14:	440a      	add	r2, r1
 8005f16:	3240      	adds	r2, #64	; 0x40
 8005f18:	8812      	ldrh	r2, [r2, #0]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	202c      	movs	r0, #44	; 0x2c
 8005f24:	fb00 f202 	mul.w	r2, r0, r2
 8005f28:	440a      	add	r2, r1
 8005f2a:	3240      	adds	r2, #64	; 0x40
 8005f2c:	8812      	ldrh	r2, [r2, #0]
 8005f2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 80ca 	beq.w	80060d4 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	212c      	movs	r1, #44	; 0x2c
 8005f46:	fb01 f303 	mul.w	r3, r1, r3
 8005f4a:	4413      	add	r3, r2
 8005f4c:	3355      	adds	r3, #85	; 0x55
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	f083 0301 	eor.w	r3, r3, #1
 8005f54:	b2d8      	uxtb	r0, r3
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	212c      	movs	r1, #44	; 0x2c
 8005f5c:	fb01 f303 	mul.w	r3, r1, r3
 8005f60:	4413      	add	r3, r2
 8005f62:	3355      	adds	r3, #85	; 0x55
 8005f64:	4602      	mov	r2, r0
 8005f66:	701a      	strb	r2, [r3, #0]
 8005f68:	e0b4      	b.n	80060d4 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	212c      	movs	r1, #44	; 0x2c
 8005f70:	fb01 f303 	mul.w	r3, r1, r3
 8005f74:	4413      	add	r3, r2
 8005f76:	3355      	adds	r3, #85	; 0x55
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	f083 0301 	eor.w	r3, r3, #1
 8005f7e:	b2d8      	uxtb	r0, r3
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	212c      	movs	r1, #44	; 0x2c
 8005f86:	fb01 f303 	mul.w	r3, r1, r3
 8005f8a:	4413      	add	r3, r2
 8005f8c:	3355      	adds	r3, #85	; 0x55
 8005f8e:	4602      	mov	r2, r0
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	e09f      	b.n	80060d4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	212c      	movs	r1, #44	; 0x2c
 8005f9a:	fb01 f303 	mul.w	r3, r1, r3
 8005f9e:	4413      	add	r3, r2
 8005fa0:	3361      	adds	r3, #97	; 0x61
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	d109      	bne.n	8005fbc <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	212c      	movs	r1, #44	; 0x2c
 8005fae:	fb01 f303 	mul.w	r3, r1, r3
 8005fb2:	4413      	add	r3, r2
 8005fb4:	3360      	adds	r3, #96	; 0x60
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	e08b      	b.n	80060d4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	212c      	movs	r1, #44	; 0x2c
 8005fc2:	fb01 f303 	mul.w	r3, r1, r3
 8005fc6:	4413      	add	r3, r2
 8005fc8:	3361      	adds	r3, #97	; 0x61
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d109      	bne.n	8005fe4 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	212c      	movs	r1, #44	; 0x2c
 8005fd6:	fb01 f303 	mul.w	r3, r1, r3
 8005fda:	4413      	add	r3, r2
 8005fdc:	3360      	adds	r3, #96	; 0x60
 8005fde:	2202      	movs	r2, #2
 8005fe0:	701a      	strb	r2, [r3, #0]
 8005fe2:	e077      	b.n	80060d4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	212c      	movs	r1, #44	; 0x2c
 8005fea:	fb01 f303 	mul.w	r3, r1, r3
 8005fee:	4413      	add	r3, r2
 8005ff0:	3361      	adds	r3, #97	; 0x61
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b05      	cmp	r3, #5
 8005ff6:	d109      	bne.n	800600c <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	212c      	movs	r1, #44	; 0x2c
 8005ffe:	fb01 f303 	mul.w	r3, r1, r3
 8006002:	4413      	add	r3, r2
 8006004:	3360      	adds	r3, #96	; 0x60
 8006006:	2205      	movs	r2, #5
 8006008:	701a      	strb	r2, [r3, #0]
 800600a:	e063      	b.n	80060d4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	212c      	movs	r1, #44	; 0x2c
 8006012:	fb01 f303 	mul.w	r3, r1, r3
 8006016:	4413      	add	r3, r2
 8006018:	3361      	adds	r3, #97	; 0x61
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b06      	cmp	r3, #6
 800601e:	d009      	beq.n	8006034 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	212c      	movs	r1, #44	; 0x2c
 8006026:	fb01 f303 	mul.w	r3, r1, r3
 800602a:	4413      	add	r3, r2
 800602c:	3361      	adds	r3, #97	; 0x61
 800602e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006030:	2b08      	cmp	r3, #8
 8006032:	d14f      	bne.n	80060d4 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	212c      	movs	r1, #44	; 0x2c
 800603a:	fb01 f303 	mul.w	r3, r1, r3
 800603e:	4413      	add	r3, r2
 8006040:	335c      	adds	r3, #92	; 0x5c
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	202c      	movs	r0, #44	; 0x2c
 800604c:	fb00 f303 	mul.w	r3, r0, r3
 8006050:	440b      	add	r3, r1
 8006052:	335c      	adds	r3, #92	; 0x5c
 8006054:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	212c      	movs	r1, #44	; 0x2c
 800605c:	fb01 f303 	mul.w	r3, r1, r3
 8006060:	4413      	add	r3, r2
 8006062:	335c      	adds	r3, #92	; 0x5c
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b02      	cmp	r3, #2
 8006068:	d912      	bls.n	8006090 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	212c      	movs	r1, #44	; 0x2c
 8006070:	fb01 f303 	mul.w	r3, r1, r3
 8006074:	4413      	add	r3, r2
 8006076:	335c      	adds	r3, #92	; 0x5c
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	212c      	movs	r1, #44	; 0x2c
 8006082:	fb01 f303 	mul.w	r3, r1, r3
 8006086:	4413      	add	r3, r2
 8006088:	3360      	adds	r3, #96	; 0x60
 800608a:	2204      	movs	r2, #4
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	e021      	b.n	80060d4 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	212c      	movs	r1, #44	; 0x2c
 8006096:	fb01 f303 	mul.w	r3, r1, r3
 800609a:	4413      	add	r3, r2
 800609c:	3360      	adds	r3, #96	; 0x60
 800609e:	2202      	movs	r2, #2
 80060a0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060b8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060c0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ce:	461a      	mov	r2, r3
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e0:	461a      	mov	r2, r3
 80060e2:	2302      	movs	r3, #2
 80060e4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	b2d9      	uxtb	r1, r3
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	202c      	movs	r0, #44	; 0x2c
 80060f0:	fb00 f303 	mul.w	r3, r0, r3
 80060f4:	4413      	add	r3, r2
 80060f6:	3360      	adds	r3, #96	; 0x60
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f009 fc1f 	bl	800f940 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006102:	bf00      	nop
 8006104:	3720      	adds	r7, #32
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b08a      	sub	sp, #40	; 0x28
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	f003 030f 	and.w	r3, r3, #15
 800612a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	0c5b      	lsrs	r3, r3, #17
 8006130:	f003 030f 	and.w	r3, r3, #15
 8006134:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	091b      	lsrs	r3, r3, #4
 800613a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800613e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2b02      	cmp	r3, #2
 8006144:	d004      	beq.n	8006150 <HCD_RXQLVL_IRQHandler+0x46>
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2b05      	cmp	r3, #5
 800614a:	f000 80a9 	beq.w	80062a0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800614e:	e0aa      	b.n	80062a6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 80a6 	beq.w	80062a4 <HCD_RXQLVL_IRQHandler+0x19a>
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	212c      	movs	r1, #44	; 0x2c
 800615e:	fb01 f303 	mul.w	r3, r1, r3
 8006162:	4413      	add	r3, r2
 8006164:	3344      	adds	r3, #68	; 0x44
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 809b 	beq.w	80062a4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	212c      	movs	r1, #44	; 0x2c
 8006174:	fb01 f303 	mul.w	r3, r1, r3
 8006178:	4413      	add	r3, r2
 800617a:	3350      	adds	r3, #80	; 0x50
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	441a      	add	r2, r3
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	202c      	movs	r0, #44	; 0x2c
 8006188:	fb00 f303 	mul.w	r3, r0, r3
 800618c:	440b      	add	r3, r1
 800618e:	334c      	adds	r3, #76	; 0x4c
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	429a      	cmp	r2, r3
 8006194:	d87a      	bhi.n	800628c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6818      	ldr	r0, [r3, #0]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	212c      	movs	r1, #44	; 0x2c
 80061a0:	fb01 f303 	mul.w	r3, r1, r3
 80061a4:	4413      	add	r3, r2
 80061a6:	3344      	adds	r3, #68	; 0x44
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	b292      	uxth	r2, r2
 80061ae:	4619      	mov	r1, r3
 80061b0:	f006 fbc5 	bl	800c93e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	212c      	movs	r1, #44	; 0x2c
 80061ba:	fb01 f303 	mul.w	r3, r1, r3
 80061be:	4413      	add	r3, r2
 80061c0:	3344      	adds	r3, #68	; 0x44
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	441a      	add	r2, r3
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	202c      	movs	r0, #44	; 0x2c
 80061ce:	fb00 f303 	mul.w	r3, r0, r3
 80061d2:	440b      	add	r3, r1
 80061d4:	3344      	adds	r3, #68	; 0x44
 80061d6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	212c      	movs	r1, #44	; 0x2c
 80061de:	fb01 f303 	mul.w	r3, r1, r3
 80061e2:	4413      	add	r3, r2
 80061e4:	3350      	adds	r3, #80	; 0x50
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	441a      	add	r2, r3
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	202c      	movs	r0, #44	; 0x2c
 80061f2:	fb00 f303 	mul.w	r3, r0, r3
 80061f6:	440b      	add	r3, r1
 80061f8:	3350      	adds	r3, #80	; 0x50
 80061fa:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	4413      	add	r3, r2
 8006204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	0cdb      	lsrs	r3, r3, #19
 800620c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006210:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	212c      	movs	r1, #44	; 0x2c
 8006218:	fb01 f303 	mul.w	r3, r1, r3
 800621c:	4413      	add	r3, r2
 800621e:	3340      	adds	r3, #64	; 0x40
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	4293      	cmp	r3, r2
 8006228:	d13c      	bne.n	80062a4 <HCD_RXQLVL_IRQHandler+0x19a>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d039      	beq.n	80062a4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	4413      	add	r3, r2
 8006238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006246:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800624e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	4413      	add	r3, r2
 8006258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625c:	461a      	mov	r2, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	212c      	movs	r1, #44	; 0x2c
 8006268:	fb01 f303 	mul.w	r3, r1, r3
 800626c:	4413      	add	r3, r2
 800626e:	3354      	adds	r3, #84	; 0x54
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	f083 0301 	eor.w	r3, r3, #1
 8006276:	b2d8      	uxtb	r0, r3
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	212c      	movs	r1, #44	; 0x2c
 800627e:	fb01 f303 	mul.w	r3, r1, r3
 8006282:	4413      	add	r3, r2
 8006284:	3354      	adds	r3, #84	; 0x54
 8006286:	4602      	mov	r2, r0
 8006288:	701a      	strb	r2, [r3, #0]
      break;
 800628a:	e00b      	b.n	80062a4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	212c      	movs	r1, #44	; 0x2c
 8006292:	fb01 f303 	mul.w	r3, r1, r3
 8006296:	4413      	add	r3, r2
 8006298:	3360      	adds	r3, #96	; 0x60
 800629a:	2204      	movs	r2, #4
 800629c:	701a      	strb	r2, [r3, #0]
      break;
 800629e:	e001      	b.n	80062a4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80062a0:	bf00      	nop
 80062a2:	e000      	b.n	80062a6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80062a4:	bf00      	nop
  }
}
 80062a6:	bf00      	nop
 80062a8:	3728      	adds	r7, #40	; 0x28
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b086      	sub	sp, #24
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80062da:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d10b      	bne.n	80062fe <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d102      	bne.n	80062f6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f009 fb09 	bl	800f908 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f043 0302 	orr.w	r3, r3, #2
 80062fc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f003 0308 	and.w	r3, r3, #8
 8006304:	2b08      	cmp	r3, #8
 8006306:	d132      	bne.n	800636e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f043 0308 	orr.w	r3, r3, #8
 800630e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f003 0304 	and.w	r3, r3, #4
 8006316:	2b04      	cmp	r3, #4
 8006318:	d126      	bne.n	8006368 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	2b02      	cmp	r3, #2
 8006320:	d113      	bne.n	800634a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006328:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800632c:	d106      	bne.n	800633c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2102      	movs	r1, #2
 8006334:	4618      	mov	r0, r3
 8006336:	f006 fc31 	bl	800cb9c <USB_InitFSLSPClkSel>
 800633a:	e011      	b.n	8006360 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2101      	movs	r1, #1
 8006342:	4618      	mov	r0, r3
 8006344:	f006 fc2a 	bl	800cb9c <USB_InitFSLSPClkSel>
 8006348:	e00a      	b.n	8006360 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d106      	bne.n	8006360 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006358:	461a      	mov	r2, r3
 800635a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800635e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f009 fafb 	bl	800f95c <HAL_HCD_PortEnabled_Callback>
 8006366:	e002      	b.n	800636e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f009 fb05 	bl	800f978 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f003 0320 	and.w	r3, r3, #32
 8006374:	2b20      	cmp	r3, #32
 8006376:	d103      	bne.n	8006380 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f043 0320 	orr.w	r3, r3, #32
 800637e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006386:	461a      	mov	r2, r3
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	6013      	str	r3, [r2, #0]
}
 800638c:	bf00      	nop
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e07f      	b.n	80064a6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d106      	bne.n	80063c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7fc faf6 	bl	80029ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2224      	movs	r2, #36	; 0x24
 80063c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0201 	bic.w	r2, r2, #1
 80063d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80063e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689a      	ldr	r2, [r3, #8]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d107      	bne.n	800640e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800640a:	609a      	str	r2, [r3, #8]
 800640c:	e006      	b.n	800641c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800641a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	2b02      	cmp	r3, #2
 8006422:	d104      	bne.n	800642e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800642c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6859      	ldr	r1, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	4b1d      	ldr	r3, [pc, #116]	; (80064b0 <HAL_I2C_Init+0x11c>)
 800643a:	430b      	orrs	r3, r1
 800643c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68da      	ldr	r2, [r3, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800644c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691a      	ldr	r2, [r3, #16]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	ea42 0103 	orr.w	r1, r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	021a      	lsls	r2, r3, #8
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	69d9      	ldr	r1, [r3, #28]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1a      	ldr	r2, [r3, #32]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0201 	orr.w	r2, r2, #1
 8006486:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2220      	movs	r2, #32
 8006492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	02008000 	.word	0x02008000

080064b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b20      	cmp	r3, #32
 80064c8:	d138      	bne.n	800653c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d101      	bne.n	80064d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80064d4:	2302      	movs	r3, #2
 80064d6:	e032      	b.n	800653e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2224      	movs	r2, #36	; 0x24
 80064e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0201 	bic.w	r2, r2, #1
 80064f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006506:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6819      	ldr	r1, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f042 0201 	orr.w	r2, r2, #1
 8006526:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2220      	movs	r2, #32
 800652c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	e000      	b.n	800653e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800653c:	2302      	movs	r3, #2
  }
}
 800653e:	4618      	mov	r0, r3
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800654a:	b480      	push	{r7}
 800654c:	b085      	sub	sp, #20
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b20      	cmp	r3, #32
 800655e:	d139      	bne.n	80065d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006566:	2b01      	cmp	r3, #1
 8006568:	d101      	bne.n	800656e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800656a:	2302      	movs	r3, #2
 800656c:	e033      	b.n	80065d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2224      	movs	r2, #36	; 0x24
 800657a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 0201 	bic.w	r2, r2, #1
 800658c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800659c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	021b      	lsls	r3, r3, #8
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0201 	orr.w	r2, r2, #1
 80065be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2220      	movs	r2, #32
 80065c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	e000      	b.n	80065d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80065d4:	2302      	movs	r3, #2
  }
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
	...

080065e4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e0bf      	b.n	8006776 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d106      	bne.n	8006610 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7fc fa46 	bl	8002a9c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699a      	ldr	r2, [r3, #24]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006626:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6999      	ldr	r1, [r3, #24]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800663c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6899      	ldr	r1, [r3, #8]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	4b4a      	ldr	r3, [pc, #296]	; (8006780 <HAL_LTDC_Init+0x19c>)
 8006658:	400b      	ands	r3, r1
 800665a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	041b      	lsls	r3, r3, #16
 8006662:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6899      	ldr	r1, [r3, #8]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	699a      	ldr	r2, [r3, #24]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68d9      	ldr	r1, [r3, #12]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	4b3e      	ldr	r3, [pc, #248]	; (8006780 <HAL_LTDC_Init+0x19c>)
 8006686:	400b      	ands	r3, r1
 8006688:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	041b      	lsls	r3, r3, #16
 8006690:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68d9      	ldr	r1, [r3, #12]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a1a      	ldr	r2, [r3, #32]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	431a      	orrs	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	430a      	orrs	r2, r1
 80066a6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6919      	ldr	r1, [r3, #16]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	4b33      	ldr	r3, [pc, #204]	; (8006780 <HAL_LTDC_Init+0x19c>)
 80066b4:	400b      	ands	r3, r1
 80066b6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	041b      	lsls	r3, r3, #16
 80066be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6919      	ldr	r1, [r3, #16]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	431a      	orrs	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6959      	ldr	r1, [r3, #20]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	4b27      	ldr	r3, [pc, #156]	; (8006780 <HAL_LTDC_Init+0x19c>)
 80066e2:	400b      	ands	r3, r1
 80066e4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ea:	041b      	lsls	r3, r3, #16
 80066ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6959      	ldr	r1, [r3, #20]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	431a      	orrs	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800670a:	021b      	lsls	r3, r3, #8
 800670c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006714:	041b      	lsls	r3, r3, #16
 8006716:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006726:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4313      	orrs	r3, r2
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0206 	orr.w	r2, r2, #6
 8006752:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	699a      	ldr	r2, [r3, #24]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0201 	orr.w	r2, r2, #1
 8006762:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	f000f800 	.word	0xf000f800

08006784 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006792:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f003 0304 	and.w	r3, r3, #4
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d023      	beq.n	80067ee <HAL_LTDC_IRQHandler+0x6a>
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	f003 0304 	and.w	r3, r3, #4
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d01e      	beq.n	80067ee <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0204 	bic.w	r2, r2, #4
 80067be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2204      	movs	r2, #4
 80067c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067ce:	f043 0201 	orr.w	r2, r3, #1
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2204      	movs	r2, #4
 80067dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f86f 	bl	80068cc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d023      	beq.n	8006840 <HAL_LTDC_IRQHandler+0xbc>
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d01e      	beq.n	8006840 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0202 	bic.w	r2, r2, #2
 8006810:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2202      	movs	r2, #2
 8006818:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006820:	f043 0202 	orr.w	r2, r3, #2
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2204      	movs	r2, #4
 800682e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f846 	bl	80068cc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d01b      	beq.n	8006882 <HAL_LTDC_IRQHandler+0xfe>
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d016      	beq.n	8006882 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0201 	bic.w	r2, r2, #1
 8006862:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2201      	movs	r2, #1
 800686a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f82f 	bl	80068e0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f003 0308 	and.w	r3, r3, #8
 8006888:	2b00      	cmp	r3, #0
 800688a:	d01b      	beq.n	80068c4 <HAL_LTDC_IRQHandler+0x140>
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f003 0308 	and.w	r3, r3, #8
 8006892:	2b00      	cmp	r3, #0
 8006894:	d016      	beq.n	80068c4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 0208 	bic.w	r2, r2, #8
 80068a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2208      	movs	r2, #8
 80068ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f818 	bl	80068f4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80068c4:	bf00      	nop
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006908:	b5b0      	push	{r4, r5, r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800691a:	2b01      	cmp	r3, #1
 800691c:	d101      	bne.n	8006922 <HAL_LTDC_ConfigLayer+0x1a>
 800691e:	2302      	movs	r3, #2
 8006920:	e02c      	b.n	800697c <HAL_LTDC_ConfigLayer+0x74>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2202      	movs	r2, #2
 800692e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2134      	movs	r1, #52	; 0x34
 8006938:	fb01 f303 	mul.w	r3, r1, r3
 800693c:	4413      	add	r3, r2
 800693e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	4614      	mov	r4, r2
 8006946:	461d      	mov	r5, r3
 8006948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800694a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800694c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800694e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006954:	682b      	ldr	r3, [r5, #0]
 8006956:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	68b9      	ldr	r1, [r7, #8]
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 f811 	bl	8006984 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2201      	movs	r2, #1
 8006968:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bdb0      	pop	{r4, r5, r7, pc}

08006984 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006984:	b480      	push	{r7}
 8006986:	b089      	sub	sp, #36	; 0x24
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	0c1b      	lsrs	r3, r3, #16
 800699c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069a0:	4413      	add	r3, r2
 80069a2:	041b      	lsls	r3, r3, #16
 80069a4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	01db      	lsls	r3, r3, #7
 80069b0:	4413      	add	r3, r2
 80069b2:	3384      	adds	r3, #132	; 0x84
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	6812      	ldr	r2, [r2, #0]
 80069ba:	4611      	mov	r1, r2
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	01d2      	lsls	r2, r2, #7
 80069c0:	440a      	add	r2, r1
 80069c2:	3284      	adds	r2, #132	; 0x84
 80069c4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80069c8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	0c1b      	lsrs	r3, r3, #16
 80069d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069da:	4413      	add	r3, r2
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4619      	mov	r1, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	01db      	lsls	r3, r3, #7
 80069e8:	440b      	add	r3, r1
 80069ea:	3384      	adds	r3, #132	; 0x84
 80069ec:	4619      	mov	r1, r3
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a02:	4413      	add	r3, r2
 8006a04:	041b      	lsls	r3, r3, #16
 8006a06:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	01db      	lsls	r3, r3, #7
 8006a12:	4413      	add	r3, r2
 8006a14:	3384      	adds	r3, #132	; 0x84
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	6812      	ldr	r2, [r2, #0]
 8006a1c:	4611      	mov	r1, r2
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	01d2      	lsls	r2, r2, #7
 8006a22:	440a      	add	r2, r1
 8006a24:	3284      	adds	r2, #132	; 0x84
 8006a26:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006a2a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a3a:	4413      	add	r3, r2
 8006a3c:	1c5a      	adds	r2, r3, #1
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4619      	mov	r1, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	01db      	lsls	r3, r3, #7
 8006a48:	440b      	add	r3, r1
 8006a4a:	3384      	adds	r3, #132	; 0x84
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	01db      	lsls	r3, r3, #7
 8006a5e:	4413      	add	r3, r2
 8006a60:	3384      	adds	r3, #132	; 0x84
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	6812      	ldr	r2, [r2, #0]
 8006a68:	4611      	mov	r1, r2
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	01d2      	lsls	r2, r2, #7
 8006a6e:	440a      	add	r2, r1
 8006a70:	3284      	adds	r2, #132	; 0x84
 8006a72:	f023 0307 	bic.w	r3, r3, #7
 8006a76:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	01db      	lsls	r3, r3, #7
 8006a82:	4413      	add	r3, r2
 8006a84:	3384      	adds	r3, #132	; 0x84
 8006a86:	461a      	mov	r2, r3
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006a94:	021b      	lsls	r3, r3, #8
 8006a96:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006a9e:	041b      	lsls	r3, r3, #16
 8006aa0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	061b      	lsls	r3, r3, #24
 8006aa8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	01db      	lsls	r3, r3, #7
 8006ab4:	4413      	add	r3, r2
 8006ab6:	3384      	adds	r3, #132	; 0x84
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	01db      	lsls	r3, r3, #7
 8006ac4:	4413      	add	r3, r2
 8006ac6:	3384      	adds	r3, #132	; 0x84
 8006ac8:	461a      	mov	r2, r3
 8006aca:	2300      	movs	r3, #0
 8006acc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	431a      	orrs	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	01db      	lsls	r3, r3, #7
 8006ae8:	440b      	add	r3, r1
 8006aea:	3384      	adds	r3, #132	; 0x84
 8006aec:	4619      	mov	r1, r3
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	461a      	mov	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	01db      	lsls	r3, r3, #7
 8006afe:	4413      	add	r3, r2
 8006b00:	3384      	adds	r3, #132	; 0x84
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	6812      	ldr	r2, [r2, #0]
 8006b08:	4611      	mov	r1, r2
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	01d2      	lsls	r2, r2, #7
 8006b0e:	440a      	add	r2, r1
 8006b10:	3284      	adds	r2, #132	; 0x84
 8006b12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b16:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	01db      	lsls	r3, r3, #7
 8006b22:	4413      	add	r3, r2
 8006b24:	3384      	adds	r3, #132	; 0x84
 8006b26:	461a      	mov	r2, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	01db      	lsls	r3, r3, #7
 8006b38:	4413      	add	r3, r2
 8006b3a:	3384      	adds	r3, #132	; 0x84
 8006b3c:	69da      	ldr	r2, [r3, #28]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4619      	mov	r1, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	01db      	lsls	r3, r3, #7
 8006b48:	440b      	add	r3, r1
 8006b4a:	3384      	adds	r3, #132	; 0x84
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4b58      	ldr	r3, [pc, #352]	; (8006cb0 <LTDC_SetConfig+0x32c>)
 8006b50:	4013      	ands	r3, r2
 8006b52:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	69da      	ldr	r2, [r3, #28]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	68f9      	ldr	r1, [r7, #12]
 8006b5e:	6809      	ldr	r1, [r1, #0]
 8006b60:	4608      	mov	r0, r1
 8006b62:	6879      	ldr	r1, [r7, #4]
 8006b64:	01c9      	lsls	r1, r1, #7
 8006b66:	4401      	add	r1, r0
 8006b68:	3184      	adds	r1, #132	; 0x84
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	01db      	lsls	r3, r3, #7
 8006b78:	4413      	add	r3, r2
 8006b7a:	3384      	adds	r3, #132	; 0x84
 8006b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	01db      	lsls	r3, r3, #7
 8006b88:	4413      	add	r3, r2
 8006b8a:	3384      	adds	r3, #132	; 0x84
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	2300      	movs	r3, #0
 8006b90:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	461a      	mov	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	01db      	lsls	r3, r3, #7
 8006b9c:	4413      	add	r3, r2
 8006b9e:	3384      	adds	r3, #132	; 0x84
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d102      	bne.n	8006bb6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006bb0:	2304      	movs	r3, #4
 8006bb2:	61fb      	str	r3, [r7, #28]
 8006bb4:	e01b      	b.n	8006bee <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d102      	bne.n	8006bc4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	61fb      	str	r3, [r7, #28]
 8006bc2:	e014      	b.n	8006bee <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d00b      	beq.n	8006be4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d007      	beq.n	8006be4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006bd8:	2b03      	cmp	r3, #3
 8006bda:	d003      	beq.n	8006be4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006be0:	2b07      	cmp	r3, #7
 8006be2:	d102      	bne.n	8006bea <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006be4:	2302      	movs	r3, #2
 8006be6:	61fb      	str	r3, [r7, #28]
 8006be8:	e001      	b.n	8006bee <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006bea:	2301      	movs	r3, #1
 8006bec:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	01db      	lsls	r3, r3, #7
 8006bf8:	4413      	add	r3, r2
 8006bfa:	3384      	adds	r3, #132	; 0x84
 8006bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	6812      	ldr	r2, [r2, #0]
 8006c02:	4611      	mov	r1, r2
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	01d2      	lsls	r2, r2, #7
 8006c08:	440a      	add	r2, r1
 8006c0a:	3284      	adds	r2, #132	; 0x84
 8006c0c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006c10:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c16:	69fa      	ldr	r2, [r7, #28]
 8006c18:	fb02 f303 	mul.w	r3, r2, r3
 8006c1c:	041a      	lsls	r2, r3, #16
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	6859      	ldr	r1, [r3, #4]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	1acb      	subs	r3, r1, r3
 8006c28:	69f9      	ldr	r1, [r7, #28]
 8006c2a:	fb01 f303 	mul.w	r3, r1, r3
 8006c2e:	3303      	adds	r3, #3
 8006c30:	68f9      	ldr	r1, [r7, #12]
 8006c32:	6809      	ldr	r1, [r1, #0]
 8006c34:	4608      	mov	r0, r1
 8006c36:	6879      	ldr	r1, [r7, #4]
 8006c38:	01c9      	lsls	r1, r1, #7
 8006c3a:	4401      	add	r1, r0
 8006c3c:	3184      	adds	r1, #132	; 0x84
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	01db      	lsls	r3, r3, #7
 8006c4c:	4413      	add	r3, r2
 8006c4e:	3384      	adds	r3, #132	; 0x84
 8006c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4619      	mov	r1, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	01db      	lsls	r3, r3, #7
 8006c5c:	440b      	add	r3, r1
 8006c5e:	3384      	adds	r3, #132	; 0x84
 8006c60:	4619      	mov	r1, r3
 8006c62:	4b14      	ldr	r3, [pc, #80]	; (8006cb4 <LTDC_SetConfig+0x330>)
 8006c64:	4013      	ands	r3, r2
 8006c66:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	01db      	lsls	r3, r3, #7
 8006c72:	4413      	add	r3, r2
 8006c74:	3384      	adds	r3, #132	; 0x84
 8006c76:	461a      	mov	r2, r3
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	461a      	mov	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	01db      	lsls	r3, r3, #7
 8006c88:	4413      	add	r3, r2
 8006c8a:	3384      	adds	r3, #132	; 0x84
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	6812      	ldr	r2, [r2, #0]
 8006c92:	4611      	mov	r1, r2
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	01d2      	lsls	r2, r2, #7
 8006c98:	440a      	add	r2, r1
 8006c9a:	3284      	adds	r2, #132	; 0x84
 8006c9c:	f043 0301 	orr.w	r3, r3, #1
 8006ca0:	6013      	str	r3, [r2, #0]
}
 8006ca2:	bf00      	nop
 8006ca4:	3724      	adds	r7, #36	; 0x24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	fffff8f8 	.word	0xfffff8f8
 8006cb4:	fffff800 	.word	0xfffff800

08006cb8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cbc:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a04      	ldr	r2, [pc, #16]	; (8006cd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cc6:	6013      	str	r3, [r2, #0]
}
 8006cc8:	bf00      	nop
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	40007000 	.word	0x40007000

08006cd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006ce2:	4b23      	ldr	r3, [pc, #140]	; (8006d70 <HAL_PWREx_EnableOverDrive+0x98>)
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	4a22      	ldr	r2, [pc, #136]	; (8006d70 <HAL_PWREx_EnableOverDrive+0x98>)
 8006ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cec:	6413      	str	r3, [r2, #64]	; 0x40
 8006cee:	4b20      	ldr	r3, [pc, #128]	; (8006d70 <HAL_PWREx_EnableOverDrive+0x98>)
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cf6:	603b      	str	r3, [r7, #0]
 8006cf8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006cfa:	4b1e      	ldr	r3, [pc, #120]	; (8006d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a1d      	ldr	r2, [pc, #116]	; (8006d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d04:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d06:	f7fc fccf 	bl	80036a8 <HAL_GetTick>
 8006d0a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d0c:	e009      	b.n	8006d22 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d0e:	f7fc fccb 	bl	80036a8 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d1c:	d901      	bls.n	8006d22 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e022      	b.n	8006d68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d22:	4b14      	ldr	r3, [pc, #80]	; (8006d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d2e:	d1ee      	bne.n	8006d0e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006d30:	4b10      	ldr	r3, [pc, #64]	; (8006d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a0f      	ldr	r2, [pc, #60]	; (8006d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d3c:	f7fc fcb4 	bl	80036a8 <HAL_GetTick>
 8006d40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d42:	e009      	b.n	8006d58 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d44:	f7fc fcb0 	bl	80036a8 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d52:	d901      	bls.n	8006d58 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e007      	b.n	8006d68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d58:	4b06      	ldr	r3, [pc, #24]	; (8006d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d64:	d1ee      	bne.n	8006d44 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	40023800 	.word	0x40023800
 8006d74:	40007000 	.word	0x40007000

08006d78 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af02      	add	r7, sp, #8
 8006d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006d80:	f7fc fc92 	bl	80036a8 <HAL_GetTick>
 8006d84:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e067      	b.n	8006e60 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10b      	bne.n	8006db4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7fb ff41 	bl	8002c2c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006daa:	f241 3188 	movw	r1, #5000	; 0x1388
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f85e 	bl	8006e70 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	021a      	lsls	r2, r3, #8
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	2120      	movs	r1, #32
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f856 	bl	8006e8c <QSPI_WaitFlagStateUntilTimeout>
 8006de0:	4603      	mov	r3, r0
 8006de2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006de4:	7afb      	ldrb	r3, [r7, #11]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d135      	bne.n	8006e56 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	4b1d      	ldr	r3, [pc, #116]	; (8006e68 <HAL_QSPI_Init+0xf0>)
 8006df2:	4013      	ands	r3, r2
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	6852      	ldr	r2, [r2, #4]
 8006df8:	0611      	lsls	r1, r2, #24
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	68d2      	ldr	r2, [r2, #12]
 8006dfe:	4311      	orrs	r1, r2
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	69d2      	ldr	r2, [r2, #28]
 8006e04:	4311      	orrs	r1, r2
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	6a12      	ldr	r2, [r2, #32]
 8006e0a:	4311      	orrs	r1, r2
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	6812      	ldr	r2, [r2, #0]
 8006e10:	430b      	orrs	r3, r1
 8006e12:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	4b14      	ldr	r3, [pc, #80]	; (8006e6c <HAL_QSPI_Init+0xf4>)
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6912      	ldr	r2, [r2, #16]
 8006e22:	0411      	lsls	r1, r2, #16
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	6952      	ldr	r2, [r2, #20]
 8006e28:	4311      	orrs	r1, r2
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	6992      	ldr	r2, [r2, #24]
 8006e2e:	4311      	orrs	r1, r2
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6812      	ldr	r2, [r2, #0]
 8006e34:	430b      	orrs	r3, r1
 8006e36:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0201 	orr.w	r2, r2, #1
 8006e46:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006e5e:	7afb      	ldrb	r3, [r7, #11]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	00ffff2f 	.word	0x00ffff2f
 8006e6c:	ffe0f8fe 	.word	0xffe0f8fe

08006e70 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	603b      	str	r3, [r7, #0]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006e9c:	e01a      	b.n	8006ed4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ea4:	d016      	beq.n	8006ed4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea6:	f7fc fbff 	bl	80036a8 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	69ba      	ldr	r2, [r7, #24]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d302      	bcc.n	8006ebc <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10b      	bne.n	8006ed4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2204      	movs	r2, #4
 8006ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec8:	f043 0201 	orr.w	r2, r3, #1
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e00e      	b.n	8006ef2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689a      	ldr	r2, [r3, #8]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	4013      	ands	r3, r2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	bf14      	ite	ne
 8006ee2:	2301      	movne	r3, #1
 8006ee4:	2300      	moveq	r3, #0
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	461a      	mov	r2, r3
 8006eea:	79fb      	ldrb	r3, [r7, #7]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d1d6      	bne.n	8006e9e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006f04:	2300      	movs	r3, #0
 8006f06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e291      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 8087 	beq.w	800702e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f20:	4b96      	ldr	r3, [pc, #600]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 030c 	and.w	r3, r3, #12
 8006f28:	2b04      	cmp	r3, #4
 8006f2a:	d00c      	beq.n	8006f46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f2c:	4b93      	ldr	r3, [pc, #588]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f003 030c 	and.w	r3, r3, #12
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d112      	bne.n	8006f5e <HAL_RCC_OscConfig+0x62>
 8006f38:	4b90      	ldr	r3, [pc, #576]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f44:	d10b      	bne.n	8006f5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f46:	4b8d      	ldr	r3, [pc, #564]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d06c      	beq.n	800702c <HAL_RCC_OscConfig+0x130>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d168      	bne.n	800702c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e26b      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f66:	d106      	bne.n	8006f76 <HAL_RCC_OscConfig+0x7a>
 8006f68:	4b84      	ldr	r3, [pc, #528]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a83      	ldr	r2, [pc, #524]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	e02e      	b.n	8006fd4 <HAL_RCC_OscConfig+0xd8>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10c      	bne.n	8006f98 <HAL_RCC_OscConfig+0x9c>
 8006f7e:	4b7f      	ldr	r3, [pc, #508]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a7e      	ldr	r2, [pc, #504]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	4b7c      	ldr	r3, [pc, #496]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a7b      	ldr	r2, [pc, #492]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	e01d      	b.n	8006fd4 <HAL_RCC_OscConfig+0xd8>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fa0:	d10c      	bne.n	8006fbc <HAL_RCC_OscConfig+0xc0>
 8006fa2:	4b76      	ldr	r3, [pc, #472]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a75      	ldr	r2, [pc, #468]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	4b73      	ldr	r3, [pc, #460]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a72      	ldr	r2, [pc, #456]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	e00b      	b.n	8006fd4 <HAL_RCC_OscConfig+0xd8>
 8006fbc:	4b6f      	ldr	r3, [pc, #444]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a6e      	ldr	r2, [pc, #440]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	4b6c      	ldr	r3, [pc, #432]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a6b      	ldr	r2, [pc, #428]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d013      	beq.n	8007004 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fdc:	f7fc fb64 	bl	80036a8 <HAL_GetTick>
 8006fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fe2:	e008      	b.n	8006ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fe4:	f7fc fb60 	bl	80036a8 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	2b64      	cmp	r3, #100	; 0x64
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e21f      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ff6:	4b61      	ldr	r3, [pc, #388]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d0f0      	beq.n	8006fe4 <HAL_RCC_OscConfig+0xe8>
 8007002:	e014      	b.n	800702e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007004:	f7fc fb50 	bl	80036a8 <HAL_GetTick>
 8007008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800700a:	e008      	b.n	800701e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800700c:	f7fc fb4c 	bl	80036a8 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b64      	cmp	r3, #100	; 0x64
 8007018:	d901      	bls.n	800701e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e20b      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800701e:	4b57      	ldr	r3, [pc, #348]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1f0      	bne.n	800700c <HAL_RCC_OscConfig+0x110>
 800702a:	e000      	b.n	800702e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800702c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d069      	beq.n	800710e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800703a:	4b50      	ldr	r3, [pc, #320]	; (800717c <HAL_RCC_OscConfig+0x280>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f003 030c 	and.w	r3, r3, #12
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00b      	beq.n	800705e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007046:	4b4d      	ldr	r3, [pc, #308]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f003 030c 	and.w	r3, r3, #12
 800704e:	2b08      	cmp	r3, #8
 8007050:	d11c      	bne.n	800708c <HAL_RCC_OscConfig+0x190>
 8007052:	4b4a      	ldr	r3, [pc, #296]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d116      	bne.n	800708c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800705e:	4b47      	ldr	r3, [pc, #284]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d005      	beq.n	8007076 <HAL_RCC_OscConfig+0x17a>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d001      	beq.n	8007076 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e1df      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007076:	4b41      	ldr	r3, [pc, #260]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	00db      	lsls	r3, r3, #3
 8007084:	493d      	ldr	r1, [pc, #244]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007086:	4313      	orrs	r3, r2
 8007088:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800708a:	e040      	b.n	800710e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d023      	beq.n	80070dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007094:	4b39      	ldr	r3, [pc, #228]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a38      	ldr	r2, [pc, #224]	; (800717c <HAL_RCC_OscConfig+0x280>)
 800709a:	f043 0301 	orr.w	r3, r3, #1
 800709e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a0:	f7fc fb02 	bl	80036a8 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070a8:	f7fc fafe 	bl	80036a8 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e1bd      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070ba:	4b30      	ldr	r3, [pc, #192]	; (800717c <HAL_RCC_OscConfig+0x280>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0f0      	beq.n	80070a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070c6:	4b2d      	ldr	r3, [pc, #180]	; (800717c <HAL_RCC_OscConfig+0x280>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	4929      	ldr	r1, [pc, #164]	; (800717c <HAL_RCC_OscConfig+0x280>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	600b      	str	r3, [r1, #0]
 80070da:	e018      	b.n	800710e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070dc:	4b27      	ldr	r3, [pc, #156]	; (800717c <HAL_RCC_OscConfig+0x280>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a26      	ldr	r2, [pc, #152]	; (800717c <HAL_RCC_OscConfig+0x280>)
 80070e2:	f023 0301 	bic.w	r3, r3, #1
 80070e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e8:	f7fc fade 	bl	80036a8 <HAL_GetTick>
 80070ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070ee:	e008      	b.n	8007102 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070f0:	f7fc fada 	bl	80036a8 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d901      	bls.n	8007102 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e199      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007102:	4b1e      	ldr	r3, [pc, #120]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1f0      	bne.n	80070f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0308 	and.w	r3, r3, #8
 8007116:	2b00      	cmp	r3, #0
 8007118:	d038      	beq.n	800718c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d019      	beq.n	8007156 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007122:	4b16      	ldr	r3, [pc, #88]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007126:	4a15      	ldr	r2, [pc, #84]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007128:	f043 0301 	orr.w	r3, r3, #1
 800712c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800712e:	f7fc fabb 	bl	80036a8 <HAL_GetTick>
 8007132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007134:	e008      	b.n	8007148 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007136:	f7fc fab7 	bl	80036a8 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	2b02      	cmp	r3, #2
 8007142:	d901      	bls.n	8007148 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e176      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007148:	4b0c      	ldr	r3, [pc, #48]	; (800717c <HAL_RCC_OscConfig+0x280>)
 800714a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0f0      	beq.n	8007136 <HAL_RCC_OscConfig+0x23a>
 8007154:	e01a      	b.n	800718c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007156:	4b09      	ldr	r3, [pc, #36]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800715a:	4a08      	ldr	r2, [pc, #32]	; (800717c <HAL_RCC_OscConfig+0x280>)
 800715c:	f023 0301 	bic.w	r3, r3, #1
 8007160:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007162:	f7fc faa1 	bl	80036a8 <HAL_GetTick>
 8007166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007168:	e00a      	b.n	8007180 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800716a:	f7fc fa9d 	bl	80036a8 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	2b02      	cmp	r3, #2
 8007176:	d903      	bls.n	8007180 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e15c      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
 800717c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007180:	4b91      	ldr	r3, [pc, #580]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1ee      	bne.n	800716a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 80a4 	beq.w	80072e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800719a:	4b8b      	ldr	r3, [pc, #556]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10d      	bne.n	80071c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80071a6:	4b88      	ldr	r3, [pc, #544]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	4a87      	ldr	r2, [pc, #540]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 80071ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b0:	6413      	str	r3, [r2, #64]	; 0x40
 80071b2:	4b85      	ldr	r3, [pc, #532]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ba:	60bb      	str	r3, [r7, #8]
 80071bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071be:	2301      	movs	r3, #1
 80071c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071c2:	4b82      	ldr	r3, [pc, #520]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d118      	bne.n	8007200 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80071ce:	4b7f      	ldr	r3, [pc, #508]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a7e      	ldr	r2, [pc, #504]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 80071d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071da:	f7fc fa65 	bl	80036a8 <HAL_GetTick>
 80071de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071e0:	e008      	b.n	80071f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071e2:	f7fc fa61 	bl	80036a8 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b64      	cmp	r3, #100	; 0x64
 80071ee:	d901      	bls.n	80071f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e120      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071f4:	4b75      	ldr	r3, [pc, #468]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0f0      	beq.n	80071e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d106      	bne.n	8007216 <HAL_RCC_OscConfig+0x31a>
 8007208:	4b6f      	ldr	r3, [pc, #444]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 800720a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800720c:	4a6e      	ldr	r2, [pc, #440]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 800720e:	f043 0301 	orr.w	r3, r3, #1
 8007212:	6713      	str	r3, [r2, #112]	; 0x70
 8007214:	e02d      	b.n	8007272 <HAL_RCC_OscConfig+0x376>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10c      	bne.n	8007238 <HAL_RCC_OscConfig+0x33c>
 800721e:	4b6a      	ldr	r3, [pc, #424]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007222:	4a69      	ldr	r2, [pc, #420]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007224:	f023 0301 	bic.w	r3, r3, #1
 8007228:	6713      	str	r3, [r2, #112]	; 0x70
 800722a:	4b67      	ldr	r3, [pc, #412]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 800722c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722e:	4a66      	ldr	r2, [pc, #408]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007230:	f023 0304 	bic.w	r3, r3, #4
 8007234:	6713      	str	r3, [r2, #112]	; 0x70
 8007236:	e01c      	b.n	8007272 <HAL_RCC_OscConfig+0x376>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	2b05      	cmp	r3, #5
 800723e:	d10c      	bne.n	800725a <HAL_RCC_OscConfig+0x35e>
 8007240:	4b61      	ldr	r3, [pc, #388]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007244:	4a60      	ldr	r2, [pc, #384]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007246:	f043 0304 	orr.w	r3, r3, #4
 800724a:	6713      	str	r3, [r2, #112]	; 0x70
 800724c:	4b5e      	ldr	r3, [pc, #376]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 800724e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007250:	4a5d      	ldr	r2, [pc, #372]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007252:	f043 0301 	orr.w	r3, r3, #1
 8007256:	6713      	str	r3, [r2, #112]	; 0x70
 8007258:	e00b      	b.n	8007272 <HAL_RCC_OscConfig+0x376>
 800725a:	4b5b      	ldr	r3, [pc, #364]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 800725c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725e:	4a5a      	ldr	r2, [pc, #360]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007260:	f023 0301 	bic.w	r3, r3, #1
 8007264:	6713      	str	r3, [r2, #112]	; 0x70
 8007266:	4b58      	ldr	r3, [pc, #352]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726a:	4a57      	ldr	r2, [pc, #348]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 800726c:	f023 0304 	bic.w	r3, r3, #4
 8007270:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d015      	beq.n	80072a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800727a:	f7fc fa15 	bl	80036a8 <HAL_GetTick>
 800727e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007280:	e00a      	b.n	8007298 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007282:	f7fc fa11 	bl	80036a8 <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007290:	4293      	cmp	r3, r2
 8007292:	d901      	bls.n	8007298 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e0ce      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007298:	4b4b      	ldr	r3, [pc, #300]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 800729a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729c:	f003 0302 	and.w	r3, r3, #2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d0ee      	beq.n	8007282 <HAL_RCC_OscConfig+0x386>
 80072a4:	e014      	b.n	80072d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a6:	f7fc f9ff 	bl	80036a8 <HAL_GetTick>
 80072aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072ac:	e00a      	b.n	80072c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ae:	f7fc f9fb 	bl	80036a8 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072bc:	4293      	cmp	r3, r2
 80072be:	d901      	bls.n	80072c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e0b8      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072c4:	4b40      	ldr	r3, [pc, #256]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 80072c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c8:	f003 0302 	and.w	r3, r3, #2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1ee      	bne.n	80072ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80072d0:	7dfb      	ldrb	r3, [r7, #23]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d105      	bne.n	80072e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072d6:	4b3c      	ldr	r3, [pc, #240]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	4a3b      	ldr	r2, [pc, #236]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 80072dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 80a4 	beq.w	8007434 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072ec:	4b36      	ldr	r3, [pc, #216]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f003 030c 	and.w	r3, r3, #12
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d06b      	beq.n	80073d0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d149      	bne.n	8007394 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007300:	4b31      	ldr	r3, [pc, #196]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a30      	ldr	r2, [pc, #192]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800730a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800730c:	f7fc f9cc 	bl	80036a8 <HAL_GetTick>
 8007310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007312:	e008      	b.n	8007326 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007314:	f7fc f9c8 	bl	80036a8 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	2b02      	cmp	r3, #2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e087      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007326:	4b28      	ldr	r3, [pc, #160]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1f0      	bne.n	8007314 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69da      	ldr	r2, [r3, #28]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	019b      	lsls	r3, r3, #6
 8007342:	431a      	orrs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007348:	085b      	lsrs	r3, r3, #1
 800734a:	3b01      	subs	r3, #1
 800734c:	041b      	lsls	r3, r3, #16
 800734e:	431a      	orrs	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	061b      	lsls	r3, r3, #24
 8007356:	4313      	orrs	r3, r2
 8007358:	4a1b      	ldr	r2, [pc, #108]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 800735a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800735e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007360:	4b19      	ldr	r3, [pc, #100]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a18      	ldr	r2, [pc, #96]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800736a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800736c:	f7fc f99c 	bl	80036a8 <HAL_GetTick>
 8007370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007372:	e008      	b.n	8007386 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007374:	f7fc f998 	bl	80036a8 <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	2b02      	cmp	r3, #2
 8007380:	d901      	bls.n	8007386 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e057      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007386:	4b10      	ldr	r3, [pc, #64]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d0f0      	beq.n	8007374 <HAL_RCC_OscConfig+0x478>
 8007392:	e04f      	b.n	8007434 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007394:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a0b      	ldr	r2, [pc, #44]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 800739a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800739e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a0:	f7fc f982 	bl	80036a8 <HAL_GetTick>
 80073a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073a6:	e008      	b.n	80073ba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073a8:	f7fc f97e 	bl	80036a8 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e03d      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073ba:	4b03      	ldr	r3, [pc, #12]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1f0      	bne.n	80073a8 <HAL_RCC_OscConfig+0x4ac>
 80073c6:	e035      	b.n	8007434 <HAL_RCC_OscConfig+0x538>
 80073c8:	40023800 	.word	0x40023800
 80073cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80073d0:	4b1b      	ldr	r3, [pc, #108]	; (8007440 <HAL_RCC_OscConfig+0x544>)
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d028      	beq.n	8007430 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d121      	bne.n	8007430 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d11a      	bne.n	8007430 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007400:	4013      	ands	r3, r2
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007406:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007408:	4293      	cmp	r3, r2
 800740a:	d111      	bne.n	8007430 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007416:	085b      	lsrs	r3, r3, #1
 8007418:	3b01      	subs	r3, #1
 800741a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800741c:	429a      	cmp	r2, r3
 800741e:	d107      	bne.n	8007430 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800742c:	429a      	cmp	r2, r3
 800742e:	d001      	beq.n	8007434 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e000      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	40023800 	.word	0x40023800

08007444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e0d0      	b.n	80075fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800745c:	4b6a      	ldr	r3, [pc, #424]	; (8007608 <HAL_RCC_ClockConfig+0x1c4>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 030f 	and.w	r3, r3, #15
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	429a      	cmp	r2, r3
 8007468:	d910      	bls.n	800748c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800746a:	4b67      	ldr	r3, [pc, #412]	; (8007608 <HAL_RCC_ClockConfig+0x1c4>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f023 020f 	bic.w	r2, r3, #15
 8007472:	4965      	ldr	r1, [pc, #404]	; (8007608 <HAL_RCC_ClockConfig+0x1c4>)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	4313      	orrs	r3, r2
 8007478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800747a:	4b63      	ldr	r3, [pc, #396]	; (8007608 <HAL_RCC_ClockConfig+0x1c4>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 030f 	and.w	r3, r3, #15
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	429a      	cmp	r2, r3
 8007486:	d001      	beq.n	800748c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e0b8      	b.n	80075fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	2b00      	cmp	r3, #0
 8007496:	d020      	beq.n	80074da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0304 	and.w	r3, r3, #4
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d005      	beq.n	80074b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074a4:	4b59      	ldr	r3, [pc, #356]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	4a58      	ldr	r2, [pc, #352]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80074aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80074ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0308 	and.w	r3, r3, #8
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d005      	beq.n	80074c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074bc:	4b53      	ldr	r3, [pc, #332]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	4a52      	ldr	r2, [pc, #328]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80074c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80074c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074c8:	4b50      	ldr	r3, [pc, #320]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	494d      	ldr	r1, [pc, #308]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d040      	beq.n	8007568 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d107      	bne.n	80074fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ee:	4b47      	ldr	r3, [pc, #284]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d115      	bne.n	8007526 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e07f      	b.n	80075fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	2b02      	cmp	r3, #2
 8007504:	d107      	bne.n	8007516 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007506:	4b41      	ldr	r3, [pc, #260]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d109      	bne.n	8007526 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e073      	b.n	80075fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007516:	4b3d      	ldr	r3, [pc, #244]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e06b      	b.n	80075fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007526:	4b39      	ldr	r3, [pc, #228]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f023 0203 	bic.w	r2, r3, #3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	4936      	ldr	r1, [pc, #216]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 8007534:	4313      	orrs	r3, r2
 8007536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007538:	f7fc f8b6 	bl	80036a8 <HAL_GetTick>
 800753c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800753e:	e00a      	b.n	8007556 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007540:	f7fc f8b2 	bl	80036a8 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	f241 3288 	movw	r2, #5000	; 0x1388
 800754e:	4293      	cmp	r3, r2
 8007550:	d901      	bls.n	8007556 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e053      	b.n	80075fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007556:	4b2d      	ldr	r3, [pc, #180]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f003 020c 	and.w	r2, r3, #12
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	429a      	cmp	r2, r3
 8007566:	d1eb      	bne.n	8007540 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007568:	4b27      	ldr	r3, [pc, #156]	; (8007608 <HAL_RCC_ClockConfig+0x1c4>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 030f 	and.w	r3, r3, #15
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	429a      	cmp	r2, r3
 8007574:	d210      	bcs.n	8007598 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007576:	4b24      	ldr	r3, [pc, #144]	; (8007608 <HAL_RCC_ClockConfig+0x1c4>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f023 020f 	bic.w	r2, r3, #15
 800757e:	4922      	ldr	r1, [pc, #136]	; (8007608 <HAL_RCC_ClockConfig+0x1c4>)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	4313      	orrs	r3, r2
 8007584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007586:	4b20      	ldr	r3, [pc, #128]	; (8007608 <HAL_RCC_ClockConfig+0x1c4>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 030f 	and.w	r3, r3, #15
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	429a      	cmp	r2, r3
 8007592:	d001      	beq.n	8007598 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e032      	b.n	80075fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0304 	and.w	r3, r3, #4
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d008      	beq.n	80075b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075a4:	4b19      	ldr	r3, [pc, #100]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	4916      	ldr	r1, [pc, #88]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0308 	and.w	r3, r3, #8
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d009      	beq.n	80075d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80075c2:	4b12      	ldr	r3, [pc, #72]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	00db      	lsls	r3, r3, #3
 80075d0:	490e      	ldr	r1, [pc, #56]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80075d6:	f000 f821 	bl	800761c <HAL_RCC_GetSysClockFreq>
 80075da:	4602      	mov	r2, r0
 80075dc:	4b0b      	ldr	r3, [pc, #44]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	091b      	lsrs	r3, r3, #4
 80075e2:	f003 030f 	and.w	r3, r3, #15
 80075e6:	490a      	ldr	r1, [pc, #40]	; (8007610 <HAL_RCC_ClockConfig+0x1cc>)
 80075e8:	5ccb      	ldrb	r3, [r1, r3]
 80075ea:	fa22 f303 	lsr.w	r3, r2, r3
 80075ee:	4a09      	ldr	r2, [pc, #36]	; (8007614 <HAL_RCC_ClockConfig+0x1d0>)
 80075f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80075f2:	4b09      	ldr	r3, [pc, #36]	; (8007618 <HAL_RCC_ClockConfig+0x1d4>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fc f812 	bl	8003620 <HAL_InitTick>

  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	40023c00 	.word	0x40023c00
 800760c:	40023800 	.word	0x40023800
 8007610:	0801636c 	.word	0x0801636c
 8007614:	20000000 	.word	0x20000000
 8007618:	20000004 	.word	0x20000004

0800761c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800761c:	b5b0      	push	{r4, r5, r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007622:	2100      	movs	r1, #0
 8007624:	6079      	str	r1, [r7, #4]
 8007626:	2100      	movs	r1, #0
 8007628:	60f9      	str	r1, [r7, #12]
 800762a:	2100      	movs	r1, #0
 800762c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800762e:	2100      	movs	r1, #0
 8007630:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007632:	4952      	ldr	r1, [pc, #328]	; (800777c <HAL_RCC_GetSysClockFreq+0x160>)
 8007634:	6889      	ldr	r1, [r1, #8]
 8007636:	f001 010c 	and.w	r1, r1, #12
 800763a:	2908      	cmp	r1, #8
 800763c:	d00d      	beq.n	800765a <HAL_RCC_GetSysClockFreq+0x3e>
 800763e:	2908      	cmp	r1, #8
 8007640:	f200 8094 	bhi.w	800776c <HAL_RCC_GetSysClockFreq+0x150>
 8007644:	2900      	cmp	r1, #0
 8007646:	d002      	beq.n	800764e <HAL_RCC_GetSysClockFreq+0x32>
 8007648:	2904      	cmp	r1, #4
 800764a:	d003      	beq.n	8007654 <HAL_RCC_GetSysClockFreq+0x38>
 800764c:	e08e      	b.n	800776c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800764e:	4b4c      	ldr	r3, [pc, #304]	; (8007780 <HAL_RCC_GetSysClockFreq+0x164>)
 8007650:	60bb      	str	r3, [r7, #8]
      break;
 8007652:	e08e      	b.n	8007772 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007654:	4b4b      	ldr	r3, [pc, #300]	; (8007784 <HAL_RCC_GetSysClockFreq+0x168>)
 8007656:	60bb      	str	r3, [r7, #8]
      break;
 8007658:	e08b      	b.n	8007772 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800765a:	4948      	ldr	r1, [pc, #288]	; (800777c <HAL_RCC_GetSysClockFreq+0x160>)
 800765c:	6849      	ldr	r1, [r1, #4]
 800765e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007662:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007664:	4945      	ldr	r1, [pc, #276]	; (800777c <HAL_RCC_GetSysClockFreq+0x160>)
 8007666:	6849      	ldr	r1, [r1, #4]
 8007668:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800766c:	2900      	cmp	r1, #0
 800766e:	d024      	beq.n	80076ba <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007670:	4942      	ldr	r1, [pc, #264]	; (800777c <HAL_RCC_GetSysClockFreq+0x160>)
 8007672:	6849      	ldr	r1, [r1, #4]
 8007674:	0989      	lsrs	r1, r1, #6
 8007676:	4608      	mov	r0, r1
 8007678:	f04f 0100 	mov.w	r1, #0
 800767c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007680:	f04f 0500 	mov.w	r5, #0
 8007684:	ea00 0204 	and.w	r2, r0, r4
 8007688:	ea01 0305 	and.w	r3, r1, r5
 800768c:	493d      	ldr	r1, [pc, #244]	; (8007784 <HAL_RCC_GetSysClockFreq+0x168>)
 800768e:	fb01 f003 	mul.w	r0, r1, r3
 8007692:	2100      	movs	r1, #0
 8007694:	fb01 f102 	mul.w	r1, r1, r2
 8007698:	1844      	adds	r4, r0, r1
 800769a:	493a      	ldr	r1, [pc, #232]	; (8007784 <HAL_RCC_GetSysClockFreq+0x168>)
 800769c:	fba2 0101 	umull	r0, r1, r2, r1
 80076a0:	1863      	adds	r3, r4, r1
 80076a2:	4619      	mov	r1, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	461a      	mov	r2, r3
 80076a8:	f04f 0300 	mov.w	r3, #0
 80076ac:	f7f9 faec 	bl	8000c88 <__aeabi_uldivmod>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4613      	mov	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]
 80076b8:	e04a      	b.n	8007750 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076ba:	4b30      	ldr	r3, [pc, #192]	; (800777c <HAL_RCC_GetSysClockFreq+0x160>)
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	099b      	lsrs	r3, r3, #6
 80076c0:	461a      	mov	r2, r3
 80076c2:	f04f 0300 	mov.w	r3, #0
 80076c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80076ca:	f04f 0100 	mov.w	r1, #0
 80076ce:	ea02 0400 	and.w	r4, r2, r0
 80076d2:	ea03 0501 	and.w	r5, r3, r1
 80076d6:	4620      	mov	r0, r4
 80076d8:	4629      	mov	r1, r5
 80076da:	f04f 0200 	mov.w	r2, #0
 80076de:	f04f 0300 	mov.w	r3, #0
 80076e2:	014b      	lsls	r3, r1, #5
 80076e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80076e8:	0142      	lsls	r2, r0, #5
 80076ea:	4610      	mov	r0, r2
 80076ec:	4619      	mov	r1, r3
 80076ee:	1b00      	subs	r0, r0, r4
 80076f0:	eb61 0105 	sbc.w	r1, r1, r5
 80076f4:	f04f 0200 	mov.w	r2, #0
 80076f8:	f04f 0300 	mov.w	r3, #0
 80076fc:	018b      	lsls	r3, r1, #6
 80076fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007702:	0182      	lsls	r2, r0, #6
 8007704:	1a12      	subs	r2, r2, r0
 8007706:	eb63 0301 	sbc.w	r3, r3, r1
 800770a:	f04f 0000 	mov.w	r0, #0
 800770e:	f04f 0100 	mov.w	r1, #0
 8007712:	00d9      	lsls	r1, r3, #3
 8007714:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007718:	00d0      	lsls	r0, r2, #3
 800771a:	4602      	mov	r2, r0
 800771c:	460b      	mov	r3, r1
 800771e:	1912      	adds	r2, r2, r4
 8007720:	eb45 0303 	adc.w	r3, r5, r3
 8007724:	f04f 0000 	mov.w	r0, #0
 8007728:	f04f 0100 	mov.w	r1, #0
 800772c:	0299      	lsls	r1, r3, #10
 800772e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007732:	0290      	lsls	r0, r2, #10
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	4610      	mov	r0, r2
 800773a:	4619      	mov	r1, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	461a      	mov	r2, r3
 8007740:	f04f 0300 	mov.w	r3, #0
 8007744:	f7f9 faa0 	bl	8000c88 <__aeabi_uldivmod>
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	4613      	mov	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007750:	4b0a      	ldr	r3, [pc, #40]	; (800777c <HAL_RCC_GetSysClockFreq+0x160>)
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	0c1b      	lsrs	r3, r3, #16
 8007756:	f003 0303 	and.w	r3, r3, #3
 800775a:	3301      	adds	r3, #1
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	fbb2 f3f3 	udiv	r3, r2, r3
 8007768:	60bb      	str	r3, [r7, #8]
      break;
 800776a:	e002      	b.n	8007772 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800776c:	4b04      	ldr	r3, [pc, #16]	; (8007780 <HAL_RCC_GetSysClockFreq+0x164>)
 800776e:	60bb      	str	r3, [r7, #8]
      break;
 8007770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007772:	68bb      	ldr	r3, [r7, #8]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bdb0      	pop	{r4, r5, r7, pc}
 800777c:	40023800 	.word	0x40023800
 8007780:	00f42400 	.word	0x00f42400
 8007784:	017d7840 	.word	0x017d7840

08007788 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007788:	b480      	push	{r7}
 800778a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800778c:	4b03      	ldr	r3, [pc, #12]	; (800779c <HAL_RCC_GetHCLKFreq+0x14>)
 800778e:	681b      	ldr	r3, [r3, #0]
}
 8007790:	4618      	mov	r0, r3
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	20000000 	.word	0x20000000

080077a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80077a4:	f7ff fff0 	bl	8007788 <HAL_RCC_GetHCLKFreq>
 80077a8:	4602      	mov	r2, r0
 80077aa:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	0a9b      	lsrs	r3, r3, #10
 80077b0:	f003 0307 	and.w	r3, r3, #7
 80077b4:	4903      	ldr	r1, [pc, #12]	; (80077c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077b6:	5ccb      	ldrb	r3, [r1, r3]
 80077b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077bc:	4618      	mov	r0, r3
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	40023800 	.word	0x40023800
 80077c4:	0801637c 	.word	0x0801637c

080077c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80077cc:	f7ff ffdc 	bl	8007788 <HAL_RCC_GetHCLKFreq>
 80077d0:	4602      	mov	r2, r0
 80077d2:	4b05      	ldr	r3, [pc, #20]	; (80077e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	0b5b      	lsrs	r3, r3, #13
 80077d8:	f003 0307 	and.w	r3, r3, #7
 80077dc:	4903      	ldr	r1, [pc, #12]	; (80077ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80077de:	5ccb      	ldrb	r3, [r1, r3]
 80077e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	40023800 	.word	0x40023800
 80077ec:	0801637c 	.word	0x0801637c

080077f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b088      	sub	sp, #32
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80077f8:	2300      	movs	r3, #0
 80077fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007800:	2300      	movs	r3, #0
 8007802:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007808:	2300      	movs	r3, #0
 800780a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	2b00      	cmp	r3, #0
 8007816:	d012      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007818:	4b69      	ldr	r3, [pc, #420]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	4a68      	ldr	r2, [pc, #416]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800781e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007822:	6093      	str	r3, [r2, #8]
 8007824:	4b66      	ldr	r3, [pc, #408]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007826:	689a      	ldr	r2, [r3, #8]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782c:	4964      	ldr	r1, [pc, #400]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800782e:	4313      	orrs	r3, r2
 8007830:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800783a:	2301      	movs	r3, #1
 800783c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d017      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800784a:	4b5d      	ldr	r3, [pc, #372]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800784c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007850:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007858:	4959      	ldr	r1, [pc, #356]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800785a:	4313      	orrs	r3, r2
 800785c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007864:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007868:	d101      	bne.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800786a:	2301      	movs	r3, #1
 800786c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007876:	2301      	movs	r3, #1
 8007878:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d017      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007886:	4b4e      	ldr	r3, [pc, #312]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800788c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007894:	494a      	ldr	r1, [pc, #296]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007896:	4313      	orrs	r3, r2
 8007898:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078a4:	d101      	bne.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80078a6:	2301      	movs	r3, #1
 80078a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80078b2:	2301      	movs	r3, #1
 80078b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d001      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80078c2:	2301      	movs	r3, #1
 80078c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0320 	and.w	r3, r3, #32
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 808b 	beq.w	80079ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80078d4:	4b3a      	ldr	r3, [pc, #232]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d8:	4a39      	ldr	r2, [pc, #228]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078de:	6413      	str	r3, [r2, #64]	; 0x40
 80078e0:	4b37      	ldr	r3, [pc, #220]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078e8:	60bb      	str	r3, [r7, #8]
 80078ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80078ec:	4b35      	ldr	r3, [pc, #212]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a34      	ldr	r2, [pc, #208]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80078f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078f8:	f7fb fed6 	bl	80036a8 <HAL_GetTick>
 80078fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80078fe:	e008      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007900:	f7fb fed2 	bl	80036a8 <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b64      	cmp	r3, #100	; 0x64
 800790c:	d901      	bls.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e357      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007912:	4b2c      	ldr	r3, [pc, #176]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0f0      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800791e:	4b28      	ldr	r3, [pc, #160]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007926:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d035      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	429a      	cmp	r2, r3
 800793a:	d02e      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800793c:	4b20      	ldr	r3, [pc, #128]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800793e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007944:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007946:	4b1e      	ldr	r3, [pc, #120]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794a:	4a1d      	ldr	r2, [pc, #116]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800794c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007950:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007952:	4b1b      	ldr	r3, [pc, #108]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007956:	4a1a      	ldr	r2, [pc, #104]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800795c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800795e:	4a18      	ldr	r2, [pc, #96]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007964:	4b16      	ldr	r3, [pc, #88]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007968:	f003 0301 	and.w	r3, r3, #1
 800796c:	2b01      	cmp	r3, #1
 800796e:	d114      	bne.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007970:	f7fb fe9a 	bl	80036a8 <HAL_GetTick>
 8007974:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007976:	e00a      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007978:	f7fb fe96 	bl	80036a8 <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	f241 3288 	movw	r2, #5000	; 0x1388
 8007986:	4293      	cmp	r3, r2
 8007988:	d901      	bls.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e319      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800798e:	4b0c      	ldr	r3, [pc, #48]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	2b00      	cmp	r3, #0
 8007998:	d0ee      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079a6:	d111      	bne.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80079a8:	4b05      	ldr	r3, [pc, #20]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80079b4:	4b04      	ldr	r3, [pc, #16]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80079b6:	400b      	ands	r3, r1
 80079b8:	4901      	ldr	r1, [pc, #4]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ba:	4313      	orrs	r3, r2
 80079bc:	608b      	str	r3, [r1, #8]
 80079be:	e00b      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80079c0:	40023800 	.word	0x40023800
 80079c4:	40007000 	.word	0x40007000
 80079c8:	0ffffcff 	.word	0x0ffffcff
 80079cc:	4bb1      	ldr	r3, [pc, #708]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	4ab0      	ldr	r2, [pc, #704]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80079d6:	6093      	str	r3, [r2, #8]
 80079d8:	4bae      	ldr	r3, [pc, #696]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079e4:	49ab      	ldr	r1, [pc, #684]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0310 	and.w	r3, r3, #16
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d010      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80079f6:	4ba7      	ldr	r3, [pc, #668]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079fc:	4aa5      	ldr	r2, [pc, #660]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007a06:	4ba3      	ldr	r3, [pc, #652]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a10:	49a0      	ldr	r1, [pc, #640]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00a      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a24:	4b9b      	ldr	r3, [pc, #620]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a32:	4998      	ldr	r1, [pc, #608]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a34:	4313      	orrs	r3, r2
 8007a36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00a      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a46:	4b93      	ldr	r3, [pc, #588]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a54:	498f      	ldr	r1, [pc, #572]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00a      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a68:	4b8a      	ldr	r3, [pc, #552]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a76:	4987      	ldr	r1, [pc, #540]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a8a:	4b82      	ldr	r3, [pc, #520]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a98:	497e      	ldr	r1, [pc, #504]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00a      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007aac:	4b79      	ldr	r3, [pc, #484]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ab2:	f023 0203 	bic.w	r2, r3, #3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aba:	4976      	ldr	r1, [pc, #472]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ace:	4b71      	ldr	r3, [pc, #452]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad4:	f023 020c 	bic.w	r2, r3, #12
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007adc:	496d      	ldr	r1, [pc, #436]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007af0:	4b68      	ldr	r3, [pc, #416]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007af6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007afe:	4965      	ldr	r1, [pc, #404]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b12:	4b60      	ldr	r3, [pc, #384]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b18:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b20:	495c      	ldr	r1, [pc, #368]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00a      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b34:	4b57      	ldr	r3, [pc, #348]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b42:	4954      	ldr	r1, [pc, #336]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007b56:	4b4f      	ldr	r3, [pc, #316]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b64:	494b      	ldr	r1, [pc, #300]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00a      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007b78:	4b46      	ldr	r3, [pc, #280]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b86:	4943      	ldr	r1, [pc, #268]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007b9a:	4b3e      	ldr	r3, [pc, #248]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ba0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ba8:	493a      	ldr	r1, [pc, #232]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00a      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007bbc:	4b35      	ldr	r3, [pc, #212]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bca:	4932      	ldr	r1, [pc, #200]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d011      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007bde:	4b2d      	ldr	r3, [pc, #180]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bec:	4929      	ldr	r1, [pc, #164]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bfc:	d101      	bne.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 0308 	and.w	r3, r3, #8
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00a      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c1e:	4b1d      	ldr	r3, [pc, #116]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c24:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c2c:	4919      	ldr	r1, [pc, #100]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00b      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c40:	4b14      	ldr	r3, [pc, #80]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c50:	4910      	ldr	r1, [pc, #64]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d006      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 80d9 	beq.w	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007c6c:	4b09      	ldr	r3, [pc, #36]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a08      	ldr	r2, [pc, #32]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c78:	f7fb fd16 	bl	80036a8 <HAL_GetTick>
 8007c7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c7e:	e00b      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007c80:	f7fb fd12 	bl	80036a8 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	2b64      	cmp	r3, #100	; 0x64
 8007c8c:	d904      	bls.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e197      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007c92:	bf00      	nop
 8007c94:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c98:	4b6c      	ldr	r3, [pc, #432]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1ed      	bne.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d021      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d11d      	bne.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007cb8:	4b64      	ldr	r3, [pc, #400]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cbe:	0c1b      	lsrs	r3, r3, #16
 8007cc0:	f003 0303 	and.w	r3, r3, #3
 8007cc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007cc6:	4b61      	ldr	r3, [pc, #388]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ccc:	0e1b      	lsrs	r3, r3, #24
 8007cce:	f003 030f 	and.w	r3, r3, #15
 8007cd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	019a      	lsls	r2, r3, #6
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	041b      	lsls	r3, r3, #16
 8007cde:	431a      	orrs	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	061b      	lsls	r3, r3, #24
 8007ce4:	431a      	orrs	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	071b      	lsls	r3, r3, #28
 8007cec:	4957      	ldr	r1, [pc, #348]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d004      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d08:	d00a      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d02e      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d1e:	d129      	bne.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d20:	4b4a      	ldr	r3, [pc, #296]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d26:	0c1b      	lsrs	r3, r3, #16
 8007d28:	f003 0303 	and.w	r3, r3, #3
 8007d2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d2e:	4b47      	ldr	r3, [pc, #284]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d34:	0f1b      	lsrs	r3, r3, #28
 8007d36:	f003 0307 	and.w	r3, r3, #7
 8007d3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	019a      	lsls	r2, r3, #6
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	041b      	lsls	r3, r3, #16
 8007d46:	431a      	orrs	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	061b      	lsls	r3, r3, #24
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	071b      	lsls	r3, r3, #28
 8007d54:	493d      	ldr	r1, [pc, #244]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007d5c:	4b3b      	ldr	r3, [pc, #236]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d62:	f023 021f 	bic.w	r2, r3, #31
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	4937      	ldr	r1, [pc, #220]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d01d      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007d80:	4b32      	ldr	r3, [pc, #200]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d86:	0e1b      	lsrs	r3, r3, #24
 8007d88:	f003 030f 	and.w	r3, r3, #15
 8007d8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d8e:	4b2f      	ldr	r3, [pc, #188]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d94:	0f1b      	lsrs	r3, r3, #28
 8007d96:	f003 0307 	and.w	r3, r3, #7
 8007d9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	019a      	lsls	r2, r3, #6
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	041b      	lsls	r3, r3, #16
 8007da8:	431a      	orrs	r2, r3
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	061b      	lsls	r3, r3, #24
 8007dae:	431a      	orrs	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	071b      	lsls	r3, r3, #28
 8007db4:	4925      	ldr	r1, [pc, #148]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d011      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	019a      	lsls	r2, r3, #6
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	041b      	lsls	r3, r3, #16
 8007dd4:	431a      	orrs	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	061b      	lsls	r3, r3, #24
 8007ddc:	431a      	orrs	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	071b      	lsls	r3, r3, #28
 8007de4:	4919      	ldr	r1, [pc, #100]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007de6:	4313      	orrs	r3, r2
 8007de8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007dec:	4b17      	ldr	r3, [pc, #92]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a16      	ldr	r2, [pc, #88]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007df2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007df6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007df8:	f7fb fc56 	bl	80036a8 <HAL_GetTick>
 8007dfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007dfe:	e008      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e00:	f7fb fc52 	bl	80036a8 <HAL_GetTick>
 8007e04:	4602      	mov	r2, r0
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	2b64      	cmp	r3, #100	; 0x64
 8007e0c:	d901      	bls.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e0d7      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e12:	4b0e      	ldr	r3, [pc, #56]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d0f0      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	f040 80cd 	bne.w	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007e26:	4b09      	ldr	r3, [pc, #36]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a08      	ldr	r2, [pc, #32]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e32:	f7fb fc39 	bl	80036a8 <HAL_GetTick>
 8007e36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e38:	e00a      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007e3a:	f7fb fc35 	bl	80036a8 <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	2b64      	cmp	r3, #100	; 0x64
 8007e46:	d903      	bls.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e0ba      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007e4c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e50:	4b5e      	ldr	r3, [pc, #376]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e5c:	d0ed      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d003      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d009      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d02e      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d12a      	bne.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007e86:	4b51      	ldr	r3, [pc, #324]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e8c:	0c1b      	lsrs	r3, r3, #16
 8007e8e:	f003 0303 	and.w	r3, r3, #3
 8007e92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007e94:	4b4d      	ldr	r3, [pc, #308]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e9a:	0f1b      	lsrs	r3, r3, #28
 8007e9c:	f003 0307 	and.w	r3, r3, #7
 8007ea0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	019a      	lsls	r2, r3, #6
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	041b      	lsls	r3, r3, #16
 8007eac:	431a      	orrs	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	061b      	lsls	r3, r3, #24
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	071b      	lsls	r3, r3, #28
 8007eba:	4944      	ldr	r1, [pc, #272]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007ec2:	4b42      	ldr	r3, [pc, #264]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ec8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	021b      	lsls	r3, r3, #8
 8007ed4:	493d      	ldr	r1, [pc, #244]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d022      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ef0:	d11d      	bne.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007ef2:	4b36      	ldr	r3, [pc, #216]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ef8:	0e1b      	lsrs	r3, r3, #24
 8007efa:	f003 030f 	and.w	r3, r3, #15
 8007efe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f00:	4b32      	ldr	r3, [pc, #200]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f06:	0f1b      	lsrs	r3, r3, #28
 8007f08:	f003 0307 	and.w	r3, r3, #7
 8007f0c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	019a      	lsls	r2, r3, #6
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a1b      	ldr	r3, [r3, #32]
 8007f18:	041b      	lsls	r3, r3, #16
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	061b      	lsls	r3, r3, #24
 8007f20:	431a      	orrs	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	071b      	lsls	r3, r3, #28
 8007f26:	4929      	ldr	r1, [pc, #164]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0308 	and.w	r3, r3, #8
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d028      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f3a:	4b24      	ldr	r3, [pc, #144]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f40:	0e1b      	lsrs	r3, r3, #24
 8007f42:	f003 030f 	and.w	r3, r3, #15
 8007f46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f48:	4b20      	ldr	r3, [pc, #128]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f4e:	0c1b      	lsrs	r3, r3, #16
 8007f50:	f003 0303 	and.w	r3, r3, #3
 8007f54:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	019a      	lsls	r2, r3, #6
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	041b      	lsls	r3, r3, #16
 8007f60:	431a      	orrs	r2, r3
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	061b      	lsls	r3, r3, #24
 8007f66:	431a      	orrs	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	69db      	ldr	r3, [r3, #28]
 8007f6c:	071b      	lsls	r3, r3, #28
 8007f6e:	4917      	ldr	r1, [pc, #92]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007f76:	4b15      	ldr	r3, [pc, #84]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f84:	4911      	ldr	r1, [pc, #68]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007f8c:	4b0f      	ldr	r3, [pc, #60]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a0e      	ldr	r2, [pc, #56]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f98:	f7fb fb86 	bl	80036a8 <HAL_GetTick>
 8007f9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007f9e:	e008      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007fa0:	f7fb fb82 	bl	80036a8 <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	2b64      	cmp	r3, #100	; 0x64
 8007fac:	d901      	bls.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e007      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007fb2:	4b06      	ldr	r3, [pc, #24]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fbe:	d1ef      	bne.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3720      	adds	r7, #32
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	40023800 	.word	0x40023800

08007fd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b087      	sub	sp, #28
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007fee:	f040 808c 	bne.w	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007ff2:	4b95      	ldr	r3, [pc, #596]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ff8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008000:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008008:	d07c      	beq.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008010:	d87d      	bhi.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d004      	beq.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800801e:	d039      	beq.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008020:	e075      	b.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008022:	4b89      	ldr	r3, [pc, #548]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d108      	bne.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800802e:	4b86      	ldr	r3, [pc, #536]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008036:	4a85      	ldr	r2, [pc, #532]	; (800824c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008038:	fbb2 f3f3 	udiv	r3, r2, r3
 800803c:	613b      	str	r3, [r7, #16]
 800803e:	e007      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008040:	4b81      	ldr	r3, [pc, #516]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008048:	4a81      	ldr	r2, [pc, #516]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800804a:	fbb2 f3f3 	udiv	r3, r2, r3
 800804e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008050:	4b7d      	ldr	r3, [pc, #500]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008056:	0e1b      	lsrs	r3, r3, #24
 8008058:	f003 030f 	and.w	r3, r3, #15
 800805c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800805e:	4b7a      	ldr	r3, [pc, #488]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008064:	099b      	lsrs	r3, r3, #6
 8008066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	fb02 f203 	mul.w	r2, r2, r3
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	fbb2 f3f3 	udiv	r3, r2, r3
 8008076:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008078:	4b73      	ldr	r3, [pc, #460]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800807a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800807e:	0a1b      	lsrs	r3, r3, #8
 8008080:	f003 031f 	and.w	r3, r3, #31
 8008084:	3301      	adds	r3, #1
 8008086:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008090:	617b      	str	r3, [r7, #20]
        break;
 8008092:	e03d      	b.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008094:	4b6c      	ldr	r3, [pc, #432]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800809c:	2b00      	cmp	r3, #0
 800809e:	d108      	bne.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80080a0:	4b69      	ldr	r3, [pc, #420]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080a8:	4a68      	ldr	r2, [pc, #416]	; (800824c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80080aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ae:	613b      	str	r3, [r7, #16]
 80080b0:	e007      	b.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80080b2:	4b65      	ldr	r3, [pc, #404]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080ba:	4a65      	ldr	r2, [pc, #404]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80080bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80080c2:	4b61      	ldr	r3, [pc, #388]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080c8:	0e1b      	lsrs	r3, r3, #24
 80080ca:	f003 030f 	and.w	r3, r3, #15
 80080ce:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80080d0:	4b5d      	ldr	r3, [pc, #372]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080d6:	099b      	lsrs	r3, r3, #6
 80080d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	fb02 f203 	mul.w	r2, r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80080ea:	4b57      	ldr	r3, [pc, #348]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080f0:	f003 031f 	and.w	r3, r3, #31
 80080f4:	3301      	adds	r3, #1
 80080f6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008100:	617b      	str	r3, [r7, #20]
        break;
 8008102:	e005      	b.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008104:	4b53      	ldr	r3, [pc, #332]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008106:	617b      	str	r3, [r7, #20]
        break;
 8008108:	e002      	b.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800810a:	bf00      	nop
 800810c:	e000      	b.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800810e:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008116:	f040 808c 	bne.w	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800811a:	4b4b      	ldr	r3, [pc, #300]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800811c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008120:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008128:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008130:	d07c      	beq.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008138:	d87d      	bhi.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d004      	beq.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008146:	d039      	beq.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008148:	e075      	b.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800814a:	4b3f      	ldr	r3, [pc, #252]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d108      	bne.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008156:	4b3c      	ldr	r3, [pc, #240]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800815e:	4a3b      	ldr	r2, [pc, #236]	; (800824c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008160:	fbb2 f3f3 	udiv	r3, r2, r3
 8008164:	613b      	str	r3, [r7, #16]
 8008166:	e007      	b.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008168:	4b37      	ldr	r3, [pc, #220]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008170:	4a37      	ldr	r2, [pc, #220]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008172:	fbb2 f3f3 	udiv	r3, r2, r3
 8008176:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008178:	4b33      	ldr	r3, [pc, #204]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800817a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800817e:	0e1b      	lsrs	r3, r3, #24
 8008180:	f003 030f 	and.w	r3, r3, #15
 8008184:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008186:	4b30      	ldr	r3, [pc, #192]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800818c:	099b      	lsrs	r3, r3, #6
 800818e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	fb02 f203 	mul.w	r2, r2, r3
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	fbb2 f3f3 	udiv	r3, r2, r3
 800819e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80081a0:	4b29      	ldr	r3, [pc, #164]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081a6:	0a1b      	lsrs	r3, r3, #8
 80081a8:	f003 031f 	and.w	r3, r3, #31
 80081ac:	3301      	adds	r3, #1
 80081ae:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b8:	617b      	str	r3, [r7, #20]
        break;
 80081ba:	e03d      	b.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80081bc:	4b22      	ldr	r3, [pc, #136]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d108      	bne.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80081c8:	4b1f      	ldr	r3, [pc, #124]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081d0:	4a1e      	ldr	r2, [pc, #120]	; (800824c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80081d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d6:	613b      	str	r3, [r7, #16]
 80081d8:	e007      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80081da:	4b1b      	ldr	r3, [pc, #108]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081e2:	4a1b      	ldr	r2, [pc, #108]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80081e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80081ea:	4b17      	ldr	r3, [pc, #92]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081f0:	0e1b      	lsrs	r3, r3, #24
 80081f2:	f003 030f 	and.w	r3, r3, #15
 80081f6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80081f8:	4b13      	ldr	r3, [pc, #76]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081fe:	099b      	lsrs	r3, r3, #6
 8008200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	fb02 f203 	mul.w	r2, r2, r3
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008210:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008212:	4b0d      	ldr	r3, [pc, #52]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008218:	f003 031f 	and.w	r3, r3, #31
 800821c:	3301      	adds	r3, #1
 800821e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008220:	697a      	ldr	r2, [r7, #20]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	fbb2 f3f3 	udiv	r3, r2, r3
 8008228:	617b      	str	r3, [r7, #20]
        break;
 800822a:	e005      	b.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800822c:	4b09      	ldr	r3, [pc, #36]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800822e:	617b      	str	r3, [r7, #20]
        break;
 8008230:	e002      	b.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 8008232:	bf00      	nop
 8008234:	e000      	b.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 8008236:	bf00      	nop

  return frequency;
 8008238:	697b      	ldr	r3, [r7, #20]
}
 800823a:	4618      	mov	r0, r3
 800823c:	371c      	adds	r7, #28
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	40023800 	.word	0x40023800
 800824c:	00f42400 	.word	0x00f42400
 8008250:	017d7840 	.word	0x017d7840
 8008254:	00bb8000 	.word	0x00bb8000

08008258 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e081      	b.n	800836e <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	7f5b      	ldrb	r3, [r3, #29]
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b00      	cmp	r3, #0
 8008272:	d105      	bne.n	8008280 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7fa fd66 	bl	8002d4c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2202      	movs	r2, #2
 8008284:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	22ca      	movs	r2, #202	; 0xca
 800828c:	625a      	str	r2, [r3, #36]	; 0x24
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2253      	movs	r2, #83	; 0x53
 8008294:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fb16 	bl	80088c8 <RTC_EnterInitMode>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d008      	beq.n	80082b4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	22ff      	movs	r2, #255	; 0xff
 80082a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2204      	movs	r2, #4
 80082ae:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e05c      	b.n	800836e <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6899      	ldr	r1, [r3, #8]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	4b2e      	ldr	r3, [pc, #184]	; (8008378 <HAL_RTC_Init+0x120>)
 80082c0:	400b      	ands	r3, r1
 80082c2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6899      	ldr	r1, [r3, #8]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	431a      	orrs	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	695b      	ldr	r3, [r3, #20]
 80082d8:	431a      	orrs	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	430a      	orrs	r2, r1
 80082e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	68d2      	ldr	r2, [r2, #12]
 80082ea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6919      	ldr	r1, [r3, #16]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	041a      	lsls	r2, r3, #16
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68da      	ldr	r2, [r3, #12]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800830e:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f003 0320 	and.w	r3, r3, #32
 800831a:	2b00      	cmp	r3, #0
 800831c:	d10e      	bne.n	800833c <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 faaa 	bl	8008878 <HAL_RTC_WaitForSynchro>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d008      	beq.n	800833c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	22ff      	movs	r2, #255	; 0xff
 8008330:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2204      	movs	r2, #4
 8008336:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e018      	b.n	800836e <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f022 0208 	bic.w	r2, r2, #8
 800834a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	699a      	ldr	r2, [r3, #24]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	430a      	orrs	r2, r1
 800835c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	22ff      	movs	r2, #255	; 0xff
 8008364:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800836c:	2300      	movs	r3, #0
  }
}
 800836e:	4618      	mov	r0, r3
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	ff8fffbf 	.word	0xff8fffbf

0800837c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800837c:	b590      	push	{r4, r7, lr}
 800837e:	b087      	sub	sp, #28
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008388:	2300      	movs	r3, #0
 800838a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	7f1b      	ldrb	r3, [r3, #28]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d101      	bne.n	8008398 <HAL_RTC_SetTime+0x1c>
 8008394:	2302      	movs	r3, #2
 8008396:	e0a8      	b.n	80084ea <HAL_RTC_SetTime+0x16e>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2201      	movs	r2, #1
 800839c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2202      	movs	r2, #2
 80083a2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d126      	bne.n	80083f8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d102      	bne.n	80083be <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2200      	movs	r2, #0
 80083bc:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 faac 	bl	8008920 <RTC_ByteToBcd2>
 80083c8:	4603      	mov	r3, r0
 80083ca:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	785b      	ldrb	r3, [r3, #1]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f000 faa5 	bl	8008920 <RTC_ByteToBcd2>
 80083d6:	4603      	mov	r3, r0
 80083d8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80083da:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	789b      	ldrb	r3, [r3, #2]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f000 fa9d 	bl	8008920 <RTC_ByteToBcd2>
 80083e6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80083e8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	7b1b      	ldrb	r3, [r3, #12]
 80083f0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80083f2:	4313      	orrs	r3, r2
 80083f4:	617b      	str	r3, [r7, #20]
 80083f6:	e018      	b.n	800842a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008402:	2b00      	cmp	r3, #0
 8008404:	d102      	bne.n	800840c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	2200      	movs	r2, #0
 800840a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	785b      	ldrb	r3, [r3, #1]
 8008416:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008418:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800841e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	7b1b      	ldrb	r3, [r3, #12]
 8008424:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008426:	4313      	orrs	r3, r2
 8008428:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	22ca      	movs	r2, #202	; 0xca
 8008430:	625a      	str	r2, [r3, #36]	; 0x24
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2253      	movs	r2, #83	; 0x53
 8008438:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f000 fa44 	bl	80088c8 <RTC_EnterInitMode>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00b      	beq.n	800845e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	22ff      	movs	r2, #255	; 0xff
 800844c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2204      	movs	r2, #4
 8008452:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e045      	b.n	80084ea <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	6979      	ldr	r1, [r7, #20]
 8008464:	4b23      	ldr	r3, [pc, #140]	; (80084f4 <HAL_RTC_SetTime+0x178>)
 8008466:	400b      	ands	r3, r1
 8008468:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	689a      	ldr	r2, [r3, #8]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008478:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	6899      	ldr	r1, [r3, #8]
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	691a      	ldr	r2, [r3, #16]
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	695b      	ldr	r3, [r3, #20]
 8008488:	431a      	orrs	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	430a      	orrs	r2, r1
 8008490:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68da      	ldr	r2, [r3, #12]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084a0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f003 0320 	and.w	r3, r3, #32
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d111      	bne.n	80084d4 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f000 f9e1 	bl	8008878 <HAL_RTC_WaitForSynchro>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00b      	beq.n	80084d4 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	22ff      	movs	r2, #255	; 0xff
 80084c2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2204      	movs	r2, #4
 80084c8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	e00a      	b.n	80084ea <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	22ff      	movs	r2, #255	; 0xff
 80084da:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2201      	movs	r2, #1
 80084e0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80084e8:	2300      	movs	r3, #0
  }
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	371c      	adds	r7, #28
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd90      	pop	{r4, r7, pc}
 80084f2:	bf00      	nop
 80084f4:	007f7f7f 	.word	0x007f7f7f

080084f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80084f8:	b590      	push	{r4, r7, lr}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008504:	2300      	movs	r3, #0
 8008506:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	7f1b      	ldrb	r3, [r3, #28]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d101      	bne.n	8008514 <HAL_RTC_SetDate+0x1c>
 8008510:	2302      	movs	r3, #2
 8008512:	e092      	b.n	800863a <HAL_RTC_SetDate+0x142>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2201      	movs	r2, #1
 8008518:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2202      	movs	r2, #2
 800851e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10e      	bne.n	8008544 <HAL_RTC_SetDate+0x4c>
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	785b      	ldrb	r3, [r3, #1]
 800852a:	f003 0310 	and.w	r3, r3, #16
 800852e:	2b00      	cmp	r3, #0
 8008530:	d008      	beq.n	8008544 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	785b      	ldrb	r3, [r3, #1]
 8008536:	f023 0310 	bic.w	r3, r3, #16
 800853a:	b2db      	uxtb	r3, r3
 800853c:	330a      	adds	r3, #10
 800853e:	b2da      	uxtb	r2, r3
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d11c      	bne.n	8008584 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	78db      	ldrb	r3, [r3, #3]
 800854e:	4618      	mov	r0, r3
 8008550:	f000 f9e6 	bl	8008920 <RTC_ByteToBcd2>
 8008554:	4603      	mov	r3, r0
 8008556:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	785b      	ldrb	r3, [r3, #1]
 800855c:	4618      	mov	r0, r3
 800855e:	f000 f9df 	bl	8008920 <RTC_ByteToBcd2>
 8008562:	4603      	mov	r3, r0
 8008564:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008566:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	789b      	ldrb	r3, [r3, #2]
 800856c:	4618      	mov	r0, r3
 800856e:	f000 f9d7 	bl	8008920 <RTC_ByteToBcd2>
 8008572:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008574:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800857e:	4313      	orrs	r3, r2
 8008580:	617b      	str	r3, [r7, #20]
 8008582:	e00e      	b.n	80085a2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	78db      	ldrb	r3, [r3, #3]
 8008588:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	785b      	ldrb	r3, [r3, #1]
 800858e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008590:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008596:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800859e:	4313      	orrs	r3, r2
 80085a0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	22ca      	movs	r2, #202	; 0xca
 80085a8:	625a      	str	r2, [r3, #36]	; 0x24
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2253      	movs	r2, #83	; 0x53
 80085b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f000 f988 	bl	80088c8 <RTC_EnterInitMode>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00b      	beq.n	80085d6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	22ff      	movs	r2, #255	; 0xff
 80085c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2204      	movs	r2, #4
 80085ca:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e031      	b.n	800863a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	6979      	ldr	r1, [r7, #20]
 80085dc:	4b19      	ldr	r3, [pc, #100]	; (8008644 <HAL_RTC_SetDate+0x14c>)
 80085de:	400b      	ands	r3, r1
 80085e0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68da      	ldr	r2, [r3, #12]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085f0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f003 0320 	and.w	r3, r3, #32
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d111      	bne.n	8008624 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f000 f939 	bl	8008878 <HAL_RTC_WaitForSynchro>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00b      	beq.n	8008624 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	22ff      	movs	r2, #255	; 0xff
 8008612:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2204      	movs	r2, #4
 8008618:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e00a      	b.n	800863a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	22ff      	movs	r2, #255	; 0xff
 800862a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2201      	movs	r2, #1
 8008630:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008638:	2300      	movs	r3, #0
  }
}
 800863a:	4618      	mov	r0, r3
 800863c:	371c      	adds	r7, #28
 800863e:	46bd      	mov	sp, r7
 8008640:	bd90      	pop	{r4, r7, pc}
 8008642:	bf00      	nop
 8008644:	00ffff3f 	.word	0x00ffff3f

08008648 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008648:	b590      	push	{r4, r7, lr}
 800864a:	b089      	sub	sp, #36	; 0x24
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008654:	2300      	movs	r3, #0
 8008656:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008658:	2300      	movs	r3, #0
 800865a:	61fb      	str	r3, [r7, #28]
 800865c:	2300      	movs	r3, #0
 800865e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	7f1b      	ldrb	r3, [r3, #28]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d101      	bne.n	800866c <HAL_RTC_SetAlarm+0x24>
 8008668:	2302      	movs	r3, #2
 800866a:	e101      	b.n	8008870 <HAL_RTC_SetAlarm+0x228>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2201      	movs	r2, #1
 8008670:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2202      	movs	r2, #2
 8008676:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d137      	bne.n	80086ee <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008688:	2b00      	cmp	r3, #0
 800868a:	d102      	bne.n	8008692 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	2200      	movs	r2, #0
 8008690:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f000 f942 	bl	8008920 <RTC_ByteToBcd2>
 800869c:	4603      	mov	r3, r0
 800869e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	785b      	ldrb	r3, [r3, #1]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 f93b 	bl	8008920 <RTC_ByteToBcd2>
 80086aa:	4603      	mov	r3, r0
 80086ac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80086ae:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	789b      	ldrb	r3, [r3, #2]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 f933 	bl	8008920 <RTC_ByteToBcd2>
 80086ba:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80086bc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	7b1b      	ldrb	r3, [r3, #12]
 80086c4:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80086c6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086d0:	4618      	mov	r0, r3
 80086d2:	f000 f925 	bl	8008920 <RTC_ByteToBcd2>
 80086d6:	4603      	mov	r3, r0
 80086d8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80086da:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80086e2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80086e8:	4313      	orrs	r3, r2
 80086ea:	61fb      	str	r3, [r7, #28]
 80086ec:	e023      	b.n	8008736 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d102      	bne.n	8008702 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	2200      	movs	r2, #0
 8008700:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	785b      	ldrb	r3, [r3, #1]
 800870c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800870e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008714:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	7b1b      	ldrb	r3, [r3, #12]
 800871a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800871c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008724:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008726:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800872c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008732:	4313      	orrs	r3, r2
 8008734:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	685a      	ldr	r2, [r3, #4]
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	69db      	ldr	r3, [r3, #28]
 800873e:	4313      	orrs	r3, r2
 8008740:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	22ca      	movs	r2, #202	; 0xca
 8008748:	625a      	str	r2, [r3, #36]	; 0x24
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2253      	movs	r2, #83	; 0x53
 8008750:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800875a:	d13f      	bne.n	80087dc <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	689a      	ldr	r2, [r3, #8]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800876a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	689a      	ldr	r2, [r3, #8]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800877a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800877c:	f7fa ff94 	bl	80036a8 <HAL_GetTick>
 8008780:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008782:	e013      	b.n	80087ac <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008784:	f7fa ff90 	bl	80036a8 <HAL_GetTick>
 8008788:	4602      	mov	r2, r0
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008792:	d90b      	bls.n	80087ac <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	22ff      	movs	r2, #255	; 0xff
 800879a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2203      	movs	r2, #3
 80087a0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80087a8:	2303      	movs	r3, #3
 80087aa:	e061      	b.n	8008870 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d0e4      	beq.n	8008784 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	69fa      	ldr	r2, [r7, #28]
 80087c0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	689a      	ldr	r2, [r3, #8]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087d8:	609a      	str	r2, [r3, #8]
 80087da:	e03e      	b.n	800885a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	689a      	ldr	r2, [r3, #8]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80087ea:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	689a      	ldr	r2, [r3, #8]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087fa:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80087fc:	f7fa ff54 	bl	80036a8 <HAL_GetTick>
 8008800:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008802:	e013      	b.n	800882c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008804:	f7fa ff50 	bl	80036a8 <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008812:	d90b      	bls.n	800882c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	22ff      	movs	r2, #255	; 0xff
 800881a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2203      	movs	r2, #3
 8008820:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008828:	2303      	movs	r3, #3
 800882a:	e021      	b.n	8008870 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	f003 0302 	and.w	r3, r3, #2
 8008836:	2b00      	cmp	r3, #0
 8008838:	d0e4      	beq.n	8008804 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	69fa      	ldr	r2, [r7, #28]
 8008840:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	689a      	ldr	r2, [r3, #8]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008858:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	22ff      	movs	r2, #255	; 0xff
 8008860:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2201      	movs	r2, #1
 8008866:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3724      	adds	r7, #36	; 0x24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd90      	pop	{r4, r7, pc}

08008878 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008880:	2300      	movs	r3, #0
 8008882:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68da      	ldr	r2, [r3, #12]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008892:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008894:	f7fa ff08 	bl	80036a8 <HAL_GetTick>
 8008898:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800889a:	e009      	b.n	80088b0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800889c:	f7fa ff04 	bl	80036a8 <HAL_GetTick>
 80088a0:	4602      	mov	r2, r0
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088aa:	d901      	bls.n	80088b0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80088ac:	2303      	movs	r3, #3
 80088ae:	e007      	b.n	80088c0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	f003 0320 	and.w	r3, r3, #32
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d0ee      	beq.n	800889c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80088d0:	2300      	movs	r3, #0
 80088d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d119      	bne.n	8008916 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088ec:	f7fa fedc 	bl	80036a8 <HAL_GetTick>
 80088f0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80088f2:	e009      	b.n	8008908 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80088f4:	f7fa fed8 	bl	80036a8 <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008902:	d901      	bls.n	8008908 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008904:	2303      	movs	r3, #3
 8008906:	e007      	b.n	8008918 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008912:	2b00      	cmp	r3, #0
 8008914:	d0ee      	beq.n	80088f4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	4603      	mov	r3, r0
 8008928:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800892a:	2300      	movs	r3, #0
 800892c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800892e:	e005      	b.n	800893c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	3301      	adds	r3, #1
 8008934:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008936:	79fb      	ldrb	r3, [r7, #7]
 8008938:	3b0a      	subs	r3, #10
 800893a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800893c:	79fb      	ldrb	r3, [r7, #7]
 800893e:	2b09      	cmp	r3, #9
 8008940:	d8f6      	bhi.n	8008930 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	b2db      	uxtb	r3, r3
 8008946:	011b      	lsls	r3, r3, #4
 8008948:	b2da      	uxtb	r2, r3
 800894a:	79fb      	ldrb	r3, [r7, #7]
 800894c:	4313      	orrs	r3, r2
 800894e:	b2db      	uxtb	r3, r3
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800895c:	b480      	push	{r7}
 800895e:	b087      	sub	sp, #28
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008968:	2300      	movs	r3, #0
 800896a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	7f1b      	ldrb	r3, [r3, #28]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d101      	bne.n	8008978 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008974:	2302      	movs	r3, #2
 8008976:	e03e      	b.n	80089f6 <HAL_RTCEx_SetTimeStamp+0x9a>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2201      	movs	r2, #1
 800897c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2202      	movs	r2, #2
 8008982:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	689a      	ldr	r2, [r3, #8]
 800898a:	4b1e      	ldr	r3, [pc, #120]	; (8008a04 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800898c:	4013      	ands	r3, r2
 800898e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	4313      	orrs	r3, r2
 8008996:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	22ca      	movs	r2, #202	; 0xca
 800899e:	625a      	str	r2, [r3, #36]	; 0x24
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2253      	movs	r2, #83	; 0x53
 80089a6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f022 0206 	bic.w	r2, r2, #6
 80089b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	430a      	orrs	r2, r1
 80089c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	697a      	ldr	r2, [r7, #20]
 80089ce:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	689a      	ldr	r2, [r3, #8]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089de:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	22ff      	movs	r2, #255	; 0xff
 80089e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2201      	movs	r2, #1
 80089ec:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	371c      	adds	r7, #28
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	fffff7f7 	.word	0xfffff7f7

08008a08 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008a10:	2300      	movs	r3, #0
 8008a12:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008a14:	2300      	movs	r3, #0
 8008a16:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d101      	bne.n	8008a26 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e156      	b.n	8008cd4 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d106      	bne.n	8008a40 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f7fa fcc0 	bl	80033c0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2202      	movs	r2, #2
 8008a44:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 f95b 	bl	8008d04 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d00c      	beq.n	8008a70 <HAL_SAI_Init+0x68>
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d80d      	bhi.n	8008a76 <HAL_SAI_Init+0x6e>
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d002      	beq.n	8008a64 <HAL_SAI_Init+0x5c>
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d003      	beq.n	8008a6a <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8008a62:	e008      	b.n	8008a76 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8008a64:	2300      	movs	r3, #0
 8008a66:	61fb      	str	r3, [r7, #28]
      break;
 8008a68:	e006      	b.n	8008a78 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008a6a:	2310      	movs	r3, #16
 8008a6c:	61fb      	str	r3, [r7, #28]
      break;
 8008a6e:	e003      	b.n	8008a78 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008a70:	2320      	movs	r3, #32
 8008a72:	61fb      	str	r3, [r7, #28]
      break;
 8008a74:	e000      	b.n	8008a78 <HAL_SAI_Init+0x70>
      break;
 8008a76:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	2b03      	cmp	r3, #3
 8008a7e:	d81e      	bhi.n	8008abe <HAL_SAI_Init+0xb6>
 8008a80:	a201      	add	r2, pc, #4	; (adr r2, 8008a88 <HAL_SAI_Init+0x80>)
 8008a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a86:	bf00      	nop
 8008a88:	08008a99 	.word	0x08008a99
 8008a8c:	08008a9f 	.word	0x08008a9f
 8008a90:	08008aa7 	.word	0x08008aa7
 8008a94:	08008aaf 	.word	0x08008aaf
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	617b      	str	r3, [r7, #20]
    }
    break;
 8008a9c:	e010      	b.n	8008ac0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aa2:	617b      	str	r3, [r7, #20]
    }
    break;
 8008aa4:	e00c      	b.n	8008ac0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008aa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008aaa:	617b      	str	r3, [r7, #20]
    }
    break;
 8008aac:	e008      	b.n	8008ac0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008aae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ab2:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	f043 0301 	orr.w	r3, r3, #1
 8008aba:	61fb      	str	r3, [r7, #28]
    }
    break;
 8008abc:	e000      	b.n	8008ac0 <HAL_SAI_Init+0xb8>
    default:
      break;
 8008abe:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a85      	ldr	r2, [pc, #532]	; (8008cdc <HAL_SAI_Init+0x2d4>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d004      	beq.n	8008ad4 <HAL_SAI_Init+0xcc>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a84      	ldr	r2, [pc, #528]	; (8008ce0 <HAL_SAI_Init+0x2d8>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d103      	bne.n	8008adc <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008ad4:	4a83      	ldr	r2, [pc, #524]	; (8008ce4 <HAL_SAI_Init+0x2dc>)
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	6013      	str	r3, [r2, #0]
 8008ada:	e002      	b.n	8008ae2 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008adc:	4a82      	ldr	r2, [pc, #520]	; (8008ce8 <HAL_SAI_Init+0x2e0>)
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d04c      	beq.n	8008b84 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8008aea:	2300      	movs	r3, #0
 8008aec:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a7a      	ldr	r2, [pc, #488]	; (8008cdc <HAL_SAI_Init+0x2d4>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d004      	beq.n	8008b02 <HAL_SAI_Init+0xfa>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a78      	ldr	r2, [pc, #480]	; (8008ce0 <HAL_SAI_Init+0x2d8>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d104      	bne.n	8008b0c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008b02:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008b06:	f7ff fa63 	bl	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b0a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a76      	ldr	r2, [pc, #472]	; (8008cec <HAL_SAI_Init+0x2e4>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d004      	beq.n	8008b20 <HAL_SAI_Init+0x118>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a75      	ldr	r2, [pc, #468]	; (8008cf0 <HAL_SAI_Init+0x2e8>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d104      	bne.n	8008b2a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008b20:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008b24:	f7ff fa54 	bl	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b28:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008b2a:	693a      	ldr	r2, [r7, #16]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4413      	add	r3, r2
 8008b32:	005b      	lsls	r3, r3, #1
 8008b34:	461a      	mov	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	025b      	lsls	r3, r3, #9
 8008b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b40:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	4a6b      	ldr	r2, [pc, #428]	; (8008cf4 <HAL_SAI_Init+0x2ec>)
 8008b46:	fba2 2303 	umull	r2, r3, r2, r3
 8008b4a:	08da      	lsrs	r2, r3, #3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8008b50:	68f9      	ldr	r1, [r7, #12]
 8008b52:	4b68      	ldr	r3, [pc, #416]	; (8008cf4 <HAL_SAI_Init+0x2ec>)
 8008b54:	fba3 2301 	umull	r2, r3, r3, r1
 8008b58:	08da      	lsrs	r2, r3, #3
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	4413      	add	r3, r2
 8008b60:	005b      	lsls	r3, r3, #1
 8008b62:	1aca      	subs	r2, r1, r3
 8008b64:	2a08      	cmp	r2, #8
 8008b66:	d904      	bls.n	8008b72 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a1b      	ldr	r3, [r3, #32]
 8008b6c:	1c5a      	adds	r2, r3, #1
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b76:	2b04      	cmp	r3, #4
 8008b78:	d104      	bne.n	8008b84 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	085a      	lsrs	r2, r3, #1
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d003      	beq.n	8008b94 <HAL_SAI_Init+0x18c>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d109      	bne.n	8008ba8 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d101      	bne.n	8008ba0 <HAL_SAI_Init+0x198>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	e001      	b.n	8008ba4 <HAL_SAI_Init+0x19c>
 8008ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ba4:	61bb      	str	r3, [r7, #24]
 8008ba6:	e008      	b.n	8008bba <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d102      	bne.n	8008bb6 <HAL_SAI_Init+0x1ae>
 8008bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bb4:	e000      	b.n	8008bb8 <HAL_SAI_Init+0x1b0>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	6819      	ldr	r1, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	4b4c      	ldr	r3, [pc, #304]	; (8008cf8 <HAL_SAI_Init+0x2f0>)
 8008bc6:	400b      	ands	r3, r1
 8008bc8:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	6819      	ldr	r1, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685a      	ldr	r2, [r3, #4]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008bde:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be4:	431a      	orrs	r2, r3
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8008bf2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008bfe:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	051b      	lsls	r3, r3, #20
 8008c06:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	430a      	orrs	r2, r1
 8008c0e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6859      	ldr	r1, [r3, #4]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	4b38      	ldr	r3, [pc, #224]	; (8008cfc <HAL_SAI_Init+0x2f4>)
 8008c1c:	400b      	ands	r3, r1
 8008c1e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6859      	ldr	r1, [r3, #4]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	699a      	ldr	r2, [r3, #24]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2e:	431a      	orrs	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c34:	431a      	orrs	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	430a      	orrs	r2, r1
 8008c3c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6899      	ldr	r1, [r3, #8]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	4b2d      	ldr	r3, [pc, #180]	; (8008d00 <HAL_SAI_Init+0x2f8>)
 8008c4a:	400b      	ands	r3, r1
 8008c4c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	6899      	ldr	r1, [r3, #8]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c58:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008c5e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8008c64:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8008c6a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c70:	3b01      	subs	r3, #1
 8008c72:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008c74:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68d9      	ldr	r1, [r3, #12]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008c8c:	400b      	ands	r3, r1
 8008c8e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68d9      	ldr	r1, [r3, #12]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c9e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ca4:	041b      	lsls	r3, r3, #16
 8008ca6:	431a      	orrs	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cac:	3b01      	subs	r3, #1
 8008cae:	021b      	lsls	r3, r3, #8
 8008cb0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	430a      	orrs	r2, r1
 8008cb8:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3720      	adds	r7, #32
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	40015804 	.word	0x40015804
 8008ce0:	40015824 	.word	0x40015824
 8008ce4:	40015800 	.word	0x40015800
 8008ce8:	40015c00 	.word	0x40015c00
 8008cec:	40015c04 	.word	0x40015c04
 8008cf0:	40015c24 	.word	0x40015c24
 8008cf4:	cccccccd 	.word	0xcccccccd
 8008cf8:	ff05c010 	.word	0xff05c010
 8008cfc:	ffff1ff0 	.word	0xffff1ff0
 8008d00:	fff88000 	.word	0xfff88000

08008d04 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008d0c:	4b17      	ldr	r3, [pc, #92]	; (8008d6c <SAI_Disable+0x68>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a17      	ldr	r2, [pc, #92]	; (8008d70 <SAI_Disable+0x6c>)
 8008d12:	fba2 2303 	umull	r2, r3, r2, r3
 8008d16:	0b1b      	lsrs	r3, r3, #12
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008d2e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	1e5a      	subs	r2, r3, #1
 8008d34:	60fa      	str	r2, [r7, #12]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10a      	bne.n	8008d50 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	72fb      	strb	r3, [r7, #11]
      break;
 8008d4e:	e006      	b.n	8008d5e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1e8      	bne.n	8008d30 <SAI_Disable+0x2c>

  return status;
 8008d5e:	7afb      	ldrb	r3, [r7, #11]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	20000000 	.word	0x20000000
 8008d70:	95cbec1b 	.word	0x95cbec1b

08008d74 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d101      	bne.n	8008d86 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e022      	b.n	8008dcc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d105      	bne.n	8008d9e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7f9 fff1 	bl	8002d80 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2203      	movs	r2, #3
 8008da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f814 	bl	8008dd4 <HAL_SD_InitCard>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e00a      	b.n	8008dcc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008dd4:	b5b0      	push	{r4, r5, r7, lr}
 8008dd6:	b08e      	sub	sp, #56	; 0x38
 8008dd8:	af04      	add	r7, sp, #16
 8008dda:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008de0:	2300      	movs	r3, #0
 8008de2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008de4:	2300      	movs	r3, #0
 8008de6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008de8:	2300      	movs	r3, #0
 8008dea:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008dec:	2300      	movs	r3, #0
 8008dee:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008df0:	2376      	movs	r3, #118	; 0x76
 8008df2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681d      	ldr	r5, [r3, #0]
 8008df8:	466c      	mov	r4, sp
 8008dfa:	f107 0314 	add.w	r3, r7, #20
 8008dfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e06:	f107 0308 	add.w	r3, r7, #8
 8008e0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	f002 fefd 	bl	800bc0c <SDMMC_Init>
 8008e12:	4603      	mov	r3, r0
 8008e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d001      	beq.n	8008e24 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008e20:	2301      	movs	r3, #1
 8008e22:	e056      	b.n	8008ed2 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	685a      	ldr	r2, [r3, #4]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e32:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f002 ff31 	bl	800bca0 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	685a      	ldr	r2, [r3, #4]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e4c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 ff00 	bl	8009c54 <SD_PowerON>
 8008e54:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00b      	beq.n	8008e74 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e68:	6a3b      	ldr	r3, [r7, #32]
 8008e6a:	431a      	orrs	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	e02e      	b.n	8008ed2 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fe21 	bl	8009abc <SD_InitCard>
 8008e7a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e7c:	6a3b      	ldr	r3, [r7, #32]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00b      	beq.n	8008e9a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	431a      	orrs	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e01b      	b.n	8008ed2 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f002 ff90 	bl	800bdc8 <SDMMC_CmdBlockLength>
 8008ea8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00f      	beq.n	8008ed0 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a09      	ldr	r2, [pc, #36]	; (8008edc <HAL_SD_InitCard+0x108>)
 8008eb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ebc:	6a3b      	ldr	r3, [r7, #32]
 8008ebe:	431a      	orrs	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e000      	b.n	8008ed2 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3728      	adds	r7, #40	; 0x28
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8008eda:	bf00      	nop
 8008edc:	004005ff 	.word	0x004005ff

08008ee0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b092      	sub	sp, #72	; 0x48
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
 8008eec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008eee:	f7fa fbdb 	bl	80036a8 <HAL_GetTick>
 8008ef2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d107      	bne.n	8008f12 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e1bd      	b.n	800928e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	f040 81b0 	bne.w	8009280 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008f26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	441a      	add	r2, r3
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d907      	bls.n	8008f44 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f38:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e1a4      	b.n	800928e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2203      	movs	r2, #3
 8008f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2200      	movs	r2, #0
 8008f52:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d002      	beq.n	8008f62 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5e:	025b      	lsls	r3, r3, #9
 8008f60:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f66:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	025b      	lsls	r3, r3, #9
 8008f6c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008f6e:	2390      	movs	r3, #144	; 0x90
 8008f70:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f72:	2302      	movs	r3, #2
 8008f74:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f107 0214 	add.w	r2, r7, #20
 8008f86:	4611      	mov	r1, r2
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f002 fef1 	bl	800bd70 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d90a      	bls.n	8008faa <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2202      	movs	r2, #2
 8008f98:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f002 ff55 	bl	800be50 <SDMMC_CmdReadMultiBlock>
 8008fa6:	6478      	str	r0, [r7, #68]	; 0x44
 8008fa8:	e009      	b.n	8008fbe <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2201      	movs	r2, #1
 8008fae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f002 ff28 	bl	800be0c <SDMMC_CmdReadSingleBlock>
 8008fbc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d012      	beq.n	8008fea <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a7a      	ldr	r2, [pc, #488]	; (80091b4 <HAL_SD_ReadBlocks+0x2d4>)
 8008fca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fd2:	431a      	orrs	r2, r3
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e151      	b.n	800928e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008fee:	e061      	b.n	80090b4 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d03c      	beq.n	8009078 <HAL_SD_ReadBlocks+0x198>
 8008ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009000:	2b00      	cmp	r3, #0
 8009002:	d039      	beq.n	8009078 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009004:	2300      	movs	r3, #0
 8009006:	643b      	str	r3, [r7, #64]	; 0x40
 8009008:	e033      	b.n	8009072 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4618      	mov	r0, r3
 8009010:	f002 fe28 	bl	800bc64 <SDMMC_ReadFIFO>
 8009014:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009018:	b2da      	uxtb	r2, r3
 800901a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800901c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800901e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009020:	3301      	adds	r3, #1
 8009022:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009026:	3b01      	subs	r3, #1
 8009028:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800902a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902c:	0a1b      	lsrs	r3, r3, #8
 800902e:	b2da      	uxtb	r2, r3
 8009030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009032:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009036:	3301      	adds	r3, #1
 8009038:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800903a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800903c:	3b01      	subs	r3, #1
 800903e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009042:	0c1b      	lsrs	r3, r3, #16
 8009044:	b2da      	uxtb	r2, r3
 8009046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009048:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800904a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904c:	3301      	adds	r3, #1
 800904e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009052:	3b01      	subs	r3, #1
 8009054:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009058:	0e1b      	lsrs	r3, r3, #24
 800905a:	b2da      	uxtb	r2, r3
 800905c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800905e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009062:	3301      	adds	r3, #1
 8009064:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009068:	3b01      	subs	r3, #1
 800906a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800906c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800906e:	3301      	adds	r3, #1
 8009070:	643b      	str	r3, [r7, #64]	; 0x40
 8009072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009074:	2b07      	cmp	r3, #7
 8009076:	d9c8      	bls.n	800900a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009078:	f7fa fb16 	bl	80036a8 <HAL_GetTick>
 800907c:	4602      	mov	r2, r0
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009084:	429a      	cmp	r2, r3
 8009086:	d902      	bls.n	800908e <HAL_SD_ReadBlocks+0x1ae>
 8009088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800908a:	2b00      	cmp	r3, #0
 800908c:	d112      	bne.n	80090b4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a48      	ldr	r2, [pc, #288]	; (80091b4 <HAL_SD_ReadBlocks+0x2d4>)
 8009094:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80090b0:	2303      	movs	r3, #3
 80090b2:	e0ec      	b.n	800928e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ba:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d096      	beq.n	8008ff0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d022      	beq.n	8009116 <HAL_SD_ReadBlocks+0x236>
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d91f      	bls.n	8009116 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090da:	2b03      	cmp	r3, #3
 80090dc:	d01b      	beq.n	8009116 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4618      	mov	r0, r3
 80090e4:	f002 ff1a 	bl	800bf1c <SDMMC_CmdStopTransfer>
 80090e8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80090ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d012      	beq.n	8009116 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a2f      	ldr	r2, [pc, #188]	; (80091b4 <HAL_SD_ReadBlocks+0x2d4>)
 80090f6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090fe:	431a      	orrs	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	e0bb      	b.n	800928e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800911c:	f003 0308 	and.w	r3, r3, #8
 8009120:	2b00      	cmp	r3, #0
 8009122:	d012      	beq.n	800914a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a22      	ldr	r2, [pc, #136]	; (80091b4 <HAL_SD_ReadBlocks+0x2d4>)
 800912a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009130:	f043 0208 	orr.w	r2, r3, #8
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e0a1      	b.n	800928e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009150:	f003 0302 	and.w	r3, r3, #2
 8009154:	2b00      	cmp	r3, #0
 8009156:	d012      	beq.n	800917e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a15      	ldr	r2, [pc, #84]	; (80091b4 <HAL_SD_ReadBlocks+0x2d4>)
 800915e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009164:	f043 0202 	orr.w	r2, r3, #2
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e087      	b.n	800928e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009184:	f003 0320 	and.w	r3, r3, #32
 8009188:	2b00      	cmp	r3, #0
 800918a:	d064      	beq.n	8009256 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a08      	ldr	r2, [pc, #32]	; (80091b4 <HAL_SD_ReadBlocks+0x2d4>)
 8009192:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009198:	f043 0220 	orr.w	r2, r3, #32
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2200      	movs	r2, #0
 80091ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e06d      	b.n	800928e <HAL_SD_ReadBlocks+0x3ae>
 80091b2:	bf00      	nop
 80091b4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4618      	mov	r0, r3
 80091be:	f002 fd51 	bl	800bc64 <SDMMC_ReadFIFO>
 80091c2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80091c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c6:	b2da      	uxtb	r2, r3
 80091c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ca:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80091cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ce:	3301      	adds	r3, #1
 80091d0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80091d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d4:	3b01      	subs	r3, #1
 80091d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80091d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091da:	0a1b      	lsrs	r3, r3, #8
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80091e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e4:	3301      	adds	r3, #1
 80091e6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80091e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ea:	3b01      	subs	r3, #1
 80091ec:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80091ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f0:	0c1b      	lsrs	r3, r3, #16
 80091f2:	b2da      	uxtb	r2, r3
 80091f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80091f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091fa:	3301      	adds	r3, #1
 80091fc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80091fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009200:	3b01      	subs	r3, #1
 8009202:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009206:	0e1b      	lsrs	r3, r3, #24
 8009208:	b2da      	uxtb	r2, r3
 800920a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800920c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800920e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009210:	3301      	adds	r3, #1
 8009212:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009216:	3b01      	subs	r3, #1
 8009218:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800921a:	f7fa fa45 	bl	80036a8 <HAL_GetTick>
 800921e:	4602      	mov	r2, r0
 8009220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009226:	429a      	cmp	r2, r3
 8009228:	d902      	bls.n	8009230 <HAL_SD_ReadBlocks+0x350>
 800922a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800922c:	2b00      	cmp	r3, #0
 800922e:	d112      	bne.n	8009256 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a18      	ldr	r2, [pc, #96]	; (8009298 <HAL_SD_ReadBlocks+0x3b8>)
 8009236:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2200      	movs	r2, #0
 8009250:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e01b      	b.n	800928e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800925c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009260:	2b00      	cmp	r3, #0
 8009262:	d002      	beq.n	800926a <HAL_SD_ReadBlocks+0x38a>
 8009264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1a6      	bne.n	80091b8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009272:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800927c:	2300      	movs	r3, #0
 800927e:	e006      	b.n	800928e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009284:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800928c:	2301      	movs	r3, #1
  }
}
 800928e:	4618      	mov	r0, r3
 8009290:	3748      	adds	r7, #72	; 0x48
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	004005ff 	.word	0x004005ff

0800929c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b092      	sub	sp, #72	; 0x48
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80092aa:	f7fa f9fd 	bl	80036a8 <HAL_GetTick>
 80092ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d107      	bne.n	80092ce <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e165      	b.n	800959a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	f040 8158 	bne.w	800958c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80092e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	441a      	add	r2, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d907      	bls.n	8009300 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e14c      	b.n	800959a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2203      	movs	r2, #3
 8009304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2200      	movs	r2, #0
 800930e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009314:	2b01      	cmp	r3, #1
 8009316:	d002      	beq.n	800931e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931a:	025b      	lsls	r3, r3, #9
 800931c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800931e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009322:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	025b      	lsls	r3, r3, #9
 8009328:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800932a:	2390      	movs	r3, #144	; 0x90
 800932c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800932e:	2300      	movs	r3, #0
 8009330:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009332:	2300      	movs	r3, #0
 8009334:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009336:	2301      	movs	r3, #1
 8009338:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f107 0218 	add.w	r2, r7, #24
 8009342:	4611      	mov	r1, r2
 8009344:	4618      	mov	r0, r3
 8009346:	f002 fd13 	bl	800bd70 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d90a      	bls.n	8009366 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2220      	movs	r2, #32
 8009354:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800935c:	4618      	mov	r0, r3
 800935e:	f002 fdbb 	bl	800bed8 <SDMMC_CmdWriteMultiBlock>
 8009362:	6478      	str	r0, [r7, #68]	; 0x44
 8009364:	e009      	b.n	800937a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2210      	movs	r2, #16
 800936a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009372:	4618      	mov	r0, r3
 8009374:	f002 fd8e 	bl	800be94 <SDMMC_CmdWriteSingleBlock>
 8009378:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800937a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800937c:	2b00      	cmp	r3, #0
 800937e:	d012      	beq.n	80093a6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a87      	ldr	r2, [pc, #540]	; (80095a4 <HAL_SD_WriteBlocks+0x308>)
 8009386:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800938c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800938e:	431a      	orrs	r2, r3
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	e0f9      	b.n	800959a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80093aa:	e065      	b.n	8009478 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d040      	beq.n	800943c <HAL_SD_WriteBlocks+0x1a0>
 80093ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d03d      	beq.n	800943c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80093c0:	2300      	movs	r3, #0
 80093c2:	643b      	str	r3, [r7, #64]	; 0x40
 80093c4:	e037      	b.n	8009436 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80093c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80093cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ce:	3301      	adds	r3, #1
 80093d0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80093d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d4:	3b01      	subs	r3, #1
 80093d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80093d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	021a      	lsls	r2, r3, #8
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80093e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e6:	3301      	adds	r3, #1
 80093e8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80093ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ec:	3b01      	subs	r3, #1
 80093ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80093f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	041a      	lsls	r2, r3, #16
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80093fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093fe:	3301      	adds	r3, #1
 8009400:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009404:	3b01      	subs	r3, #1
 8009406:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	061a      	lsls	r2, r3, #24
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	4313      	orrs	r3, r2
 8009412:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009416:	3301      	adds	r3, #1
 8009418:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800941a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800941c:	3b01      	subs	r3, #1
 800941e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f107 0214 	add.w	r2, r7, #20
 8009428:	4611      	mov	r1, r2
 800942a:	4618      	mov	r0, r3
 800942c:	f002 fc27 	bl	800bc7e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009432:	3301      	adds	r3, #1
 8009434:	643b      	str	r3, [r7, #64]	; 0x40
 8009436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009438:	2b07      	cmp	r3, #7
 800943a:	d9c4      	bls.n	80093c6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800943c:	f7fa f934 	bl	80036a8 <HAL_GetTick>
 8009440:	4602      	mov	r2, r0
 8009442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009448:	429a      	cmp	r2, r3
 800944a:	d902      	bls.n	8009452 <HAL_SD_WriteBlocks+0x1b6>
 800944c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800944e:	2b00      	cmp	r3, #0
 8009450:	d112      	bne.n	8009478 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a53      	ldr	r2, [pc, #332]	; (80095a4 <HAL_SD_WriteBlocks+0x308>)
 8009458:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800945e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009460:	431a      	orrs	r2, r3
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009474:	2303      	movs	r3, #3
 8009476:	e090      	b.n	800959a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800947e:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8009482:	2b00      	cmp	r3, #0
 8009484:	d092      	beq.n	80093ac <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800948c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009490:	2b00      	cmp	r3, #0
 8009492:	d022      	beq.n	80094da <HAL_SD_WriteBlocks+0x23e>
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d91f      	bls.n	80094da <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800949e:	2b03      	cmp	r3, #3
 80094a0:	d01b      	beq.n	80094da <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f002 fd38 	bl	800bf1c <SDMMC_CmdStopTransfer>
 80094ac:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80094ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d012      	beq.n	80094da <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a3a      	ldr	r2, [pc, #232]	; (80095a4 <HAL_SD_WriteBlocks+0x308>)
 80094ba:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094c2:	431a      	orrs	r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2200      	movs	r2, #0
 80094d4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e05f      	b.n	800959a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e0:	f003 0308 	and.w	r3, r3, #8
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d012      	beq.n	800950e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a2d      	ldr	r2, [pc, #180]	; (80095a4 <HAL_SD_WriteBlocks+0x308>)
 80094ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f4:	f043 0208 	orr.w	r2, r3, #8
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e045      	b.n	800959a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009514:	f003 0302 	and.w	r3, r3, #2
 8009518:	2b00      	cmp	r3, #0
 800951a:	d012      	beq.n	8009542 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a20      	ldr	r2, [pc, #128]	; (80095a4 <HAL_SD_WriteBlocks+0x308>)
 8009522:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009528:	f043 0202 	orr.w	r2, r3, #2
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	e02b      	b.n	800959a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009548:	f003 0310 	and.w	r3, r3, #16
 800954c:	2b00      	cmp	r3, #0
 800954e:	d012      	beq.n	8009576 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a13      	ldr	r2, [pc, #76]	; (80095a4 <HAL_SD_WriteBlocks+0x308>)
 8009556:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955c:	f043 0210 	orr.w	r2, r3, #16
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	e011      	b.n	800959a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f240 523a 	movw	r2, #1338	; 0x53a
 800957e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	e006      	b.n	800959a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009590:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
  }
}
 800959a:	4618      	mov	r0, r3
 800959c:	3748      	adds	r7, #72	; 0x48
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	004005ff 	.word	0x004005ff

080095a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095b6:	0f9b      	lsrs	r3, r3, #30
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095c2:	0e9b      	lsrs	r3, r3, #26
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	f003 030f 	and.w	r3, r3, #15
 80095ca:	b2da      	uxtb	r2, r3
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095d4:	0e1b      	lsrs	r3, r3, #24
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	f003 0303 	and.w	r3, r3, #3
 80095dc:	b2da      	uxtb	r2, r3
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095e6:	0c1b      	lsrs	r3, r3, #16
 80095e8:	b2da      	uxtb	r2, r3
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095f2:	0a1b      	lsrs	r3, r3, #8
 80095f4:	b2da      	uxtb	r2, r3
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095fe:	b2da      	uxtb	r2, r3
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009608:	0d1b      	lsrs	r3, r3, #20
 800960a:	b29a      	uxth	r2, r3
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009614:	0c1b      	lsrs	r3, r3, #16
 8009616:	b2db      	uxtb	r3, r3
 8009618:	f003 030f 	and.w	r3, r3, #15
 800961c:	b2da      	uxtb	r2, r3
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009626:	0bdb      	lsrs	r3, r3, #15
 8009628:	b2db      	uxtb	r3, r3
 800962a:	f003 0301 	and.w	r3, r3, #1
 800962e:	b2da      	uxtb	r2, r3
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009638:	0b9b      	lsrs	r3, r3, #14
 800963a:	b2db      	uxtb	r3, r3
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	b2da      	uxtb	r2, r3
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800964a:	0b5b      	lsrs	r3, r3, #13
 800964c:	b2db      	uxtb	r3, r3
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	b2da      	uxtb	r2, r3
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800965c:	0b1b      	lsrs	r3, r3, #12
 800965e:	b2db      	uxtb	r3, r3
 8009660:	f003 0301 	and.w	r3, r3, #1
 8009664:	b2da      	uxtb	r2, r3
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	2200      	movs	r2, #0
 800966e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009674:	2b00      	cmp	r3, #0
 8009676:	d163      	bne.n	8009740 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800967c:	009a      	lsls	r2, r3, #2
 800967e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009682:	4013      	ands	r3, r2
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009688:	0f92      	lsrs	r2, r2, #30
 800968a:	431a      	orrs	r2, r3
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009694:	0edb      	lsrs	r3, r3, #27
 8009696:	b2db      	uxtb	r3, r3
 8009698:	f003 0307 	and.w	r3, r3, #7
 800969c:	b2da      	uxtb	r2, r3
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096a6:	0e1b      	lsrs	r3, r3, #24
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	f003 0307 	and.w	r3, r3, #7
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096b8:	0d5b      	lsrs	r3, r3, #21
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	f003 0307 	and.w	r3, r3, #7
 80096c0:	b2da      	uxtb	r2, r3
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096ca:	0c9b      	lsrs	r3, r3, #18
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	f003 0307 	and.w	r3, r3, #7
 80096d2:	b2da      	uxtb	r2, r3
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096dc:	0bdb      	lsrs	r3, r3, #15
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	f003 0307 	and.w	r3, r3, #7
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	1c5a      	adds	r2, r3, #1
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	7e1b      	ldrb	r3, [r3, #24]
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	f003 0307 	and.w	r3, r3, #7
 80096fe:	3302      	adds	r3, #2
 8009700:	2201      	movs	r2, #1
 8009702:	fa02 f303 	lsl.w	r3, r2, r3
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800970a:	fb02 f203 	mul.w	r2, r2, r3
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	7a1b      	ldrb	r3, [r3, #8]
 8009716:	b2db      	uxtb	r3, r3
 8009718:	f003 030f 	and.w	r3, r3, #15
 800971c:	2201      	movs	r2, #1
 800971e:	409a      	lsls	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800972c:	0a52      	lsrs	r2, r2, #9
 800972e:	fb02 f203 	mul.w	r2, r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800973c:	661a      	str	r2, [r3, #96]	; 0x60
 800973e:	e031      	b.n	80097a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009744:	2b01      	cmp	r3, #1
 8009746:	d11d      	bne.n	8009784 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800974c:	041b      	lsls	r3, r3, #16
 800974e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009756:	0c1b      	lsrs	r3, r3, #16
 8009758:	431a      	orrs	r2, r3
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	3301      	adds	r3, #1
 8009764:	029a      	lsls	r2, r3, #10
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009778:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	661a      	str	r2, [r3, #96]	; 0x60
 8009782:	e00f      	b.n	80097a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a58      	ldr	r2, [pc, #352]	; (80098ec <HAL_SD_GetCardCSD+0x344>)
 800978a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009790:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e09d      	b.n	80098e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097a8:	0b9b      	lsrs	r3, r3, #14
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	f003 0301 	and.w	r3, r3, #1
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ba:	09db      	lsrs	r3, r3, #7
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097c2:	b2da      	uxtb	r2, r3
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097d2:	b2da      	uxtb	r2, r3
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097dc:	0fdb      	lsrs	r3, r3, #31
 80097de:	b2da      	uxtb	r2, r3
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e8:	0f5b      	lsrs	r3, r3, #29
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	f003 0303 	and.w	r3, r3, #3
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097fa:	0e9b      	lsrs	r3, r3, #26
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	f003 0307 	and.w	r3, r3, #7
 8009802:	b2da      	uxtb	r2, r3
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800980c:	0d9b      	lsrs	r3, r3, #22
 800980e:	b2db      	uxtb	r3, r3
 8009810:	f003 030f 	and.w	r3, r3, #15
 8009814:	b2da      	uxtb	r2, r3
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800981e:	0d5b      	lsrs	r3, r3, #21
 8009820:	b2db      	uxtb	r3, r3
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	b2da      	uxtb	r2, r3
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	2200      	movs	r2, #0
 8009832:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800983a:	0c1b      	lsrs	r3, r3, #16
 800983c:	b2db      	uxtb	r3, r3
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	b2da      	uxtb	r2, r3
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800984e:	0bdb      	lsrs	r3, r3, #15
 8009850:	b2db      	uxtb	r3, r3
 8009852:	f003 0301 	and.w	r3, r3, #1
 8009856:	b2da      	uxtb	r2, r3
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009862:	0b9b      	lsrs	r3, r3, #14
 8009864:	b2db      	uxtb	r3, r3
 8009866:	f003 0301 	and.w	r3, r3, #1
 800986a:	b2da      	uxtb	r2, r3
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009876:	0b5b      	lsrs	r3, r3, #13
 8009878:	b2db      	uxtb	r3, r3
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	b2da      	uxtb	r2, r3
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800988a:	0b1b      	lsrs	r3, r3, #12
 800988c:	b2db      	uxtb	r3, r3
 800988e:	f003 0301 	and.w	r3, r3, #1
 8009892:	b2da      	uxtb	r2, r3
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800989e:	0a9b      	lsrs	r3, r3, #10
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	f003 0303 	and.w	r3, r3, #3
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098b2:	0a1b      	lsrs	r3, r3, #8
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	f003 0303 	and.w	r3, r3, #3
 80098ba:	b2da      	uxtb	r2, r3
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c6:	085b      	lsrs	r3, r3, #1
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098ce:	b2da      	uxtb	r2, r3
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr
 80098ec:	004005ff 	.word	0x004005ff

080098f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009948:	b5b0      	push	{r4, r5, r7, lr}
 800994a:	b08e      	sub	sp, #56	; 0x38
 800994c:	af04      	add	r7, sp, #16
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2203      	movs	r2, #3
 800995c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009964:	2b03      	cmp	r3, #3
 8009966:	d02e      	beq.n	80099c6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800996e:	d106      	bne.n	800997e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009974:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	639a      	str	r2, [r3, #56]	; 0x38
 800997c:	e029      	b.n	80099d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009984:	d10a      	bne.n	800999c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fa1a 	bl	8009dc0 <SD_WideBus_Enable>
 800998c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009992:	6a3b      	ldr	r3, [r7, #32]
 8009994:	431a      	orrs	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	639a      	str	r2, [r3, #56]	; 0x38
 800999a:	e01a      	b.n	80099d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10a      	bne.n	80099b8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 fa57 	bl	8009e56 <SD_WideBus_Disable>
 80099a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099ae:	6a3b      	ldr	r3, [r7, #32]
 80099b0:	431a      	orrs	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	639a      	str	r2, [r3, #56]	; 0x38
 80099b6:	e00c      	b.n	80099d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	639a      	str	r2, [r3, #56]	; 0x38
 80099c4:	e005      	b.n	80099d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00b      	beq.n	80099f2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a26      	ldr	r2, [pc, #152]	; (8009a78 <HAL_SD_ConfigWideBusOperation+0x130>)
 80099e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099f0:	e01f      	b.n	8009a32 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	695b      	ldr	r3, [r3, #20]
 8009a0c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681d      	ldr	r5, [r3, #0]
 8009a18:	466c      	mov	r4, sp
 8009a1a:	f107 0314 	add.w	r3, r7, #20
 8009a1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009a22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009a26:	f107 0308 	add.w	r3, r7, #8
 8009a2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	f002 f8ed 	bl	800bc0c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f002 f9c4 	bl	800bdc8 <SDMMC_CmdBlockLength>
 8009a40:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a42:	6a3b      	ldr	r3, [r7, #32]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00c      	beq.n	8009a62 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a0a      	ldr	r2, [pc, #40]	; (8009a78 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009a4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	431a      	orrs	r2, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2201      	movs	r2, #1
 8009a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3728      	adds	r7, #40	; 0x28
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bdb0      	pop	{r4, r5, r7, pc}
 8009a76:	bf00      	nop
 8009a78:	004005ff 	.word	0x004005ff

08009a7c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b086      	sub	sp, #24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009a84:	2300      	movs	r3, #0
 8009a86:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009a88:	f107 030c 	add.w	r3, r7, #12
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f96e 	bl	8009d70 <SD_SendStatus>
 8009a94:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d005      	beq.n	8009aa8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	431a      	orrs	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	0a5b      	lsrs	r3, r3, #9
 8009aac:	f003 030f 	and.w	r3, r3, #15
 8009ab0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009ab2:	693b      	ldr	r3, [r7, #16]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3718      	adds	r7, #24
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009abc:	b5b0      	push	{r4, r5, r7, lr}
 8009abe:	b094      	sub	sp, #80	; 0x50
 8009ac0:	af04      	add	r7, sp, #16
 8009ac2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f002 f8f6 	bl	800bcbe <SDMMC_GetPowerState>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d102      	bne.n	8009ade <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009ad8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009adc:	e0b6      	b.n	8009c4c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ae2:	2b03      	cmp	r3, #3
 8009ae4:	d02f      	beq.n	8009b46 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f002 fb21 	bl	800c132 <SDMMC_CmdSendCID>
 8009af0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d001      	beq.n	8009afc <SD_InitCard+0x40>
    {
      return errorstate;
 8009af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009afa:	e0a7      	b.n	8009c4c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2100      	movs	r1, #0
 8009b02:	4618      	mov	r0, r3
 8009b04:	f002 f921 	bl	800bd4a <SDMMC_GetResponse>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2104      	movs	r1, #4
 8009b14:	4618      	mov	r0, r3
 8009b16:	f002 f918 	bl	800bd4a <SDMMC_GetResponse>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2108      	movs	r1, #8
 8009b26:	4618      	mov	r0, r3
 8009b28:	f002 f90f 	bl	800bd4a <SDMMC_GetResponse>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	210c      	movs	r1, #12
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f002 f906 	bl	800bd4a <SDMMC_GetResponse>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b4a:	2b03      	cmp	r3, #3
 8009b4c:	d00d      	beq.n	8009b6a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f107 020e 	add.w	r2, r7, #14
 8009b56:	4611      	mov	r1, r2
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f002 fb27 	bl	800c1ac <SDMMC_CmdSetRelAdd>
 8009b5e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d001      	beq.n	8009b6a <SD_InitCard+0xae>
    {
      return errorstate;
 8009b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b68:	e070      	b.n	8009c4c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b6e:	2b03      	cmp	r3, #3
 8009b70:	d036      	beq.n	8009be0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009b72:	89fb      	ldrh	r3, [r7, #14]
 8009b74:	461a      	mov	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b82:	041b      	lsls	r3, r3, #16
 8009b84:	4619      	mov	r1, r3
 8009b86:	4610      	mov	r0, r2
 8009b88:	f002 faf1 	bl	800c16e <SDMMC_CmdSendCSD>
 8009b8c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d001      	beq.n	8009b98 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b96:	e059      	b.n	8009c4c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f002 f8d3 	bl	800bd4a <SDMMC_GetResponse>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2104      	movs	r1, #4
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f002 f8ca 	bl	800bd4a <SDMMC_GetResponse>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2108      	movs	r1, #8
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f002 f8c1 	bl	800bd4a <SDMMC_GetResponse>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	210c      	movs	r1, #12
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f002 f8b8 	bl	800bd4a <SDMMC_GetResponse>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2104      	movs	r1, #4
 8009be6:	4618      	mov	r0, r3
 8009be8:	f002 f8af 	bl	800bd4a <SDMMC_GetResponse>
 8009bec:	4603      	mov	r3, r0
 8009bee:	0d1a      	lsrs	r2, r3, #20
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009bf4:	f107 0310 	add.w	r3, r7, #16
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f7ff fcd4 	bl	80095a8 <HAL_SD_GetCardCSD>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d002      	beq.n	8009c0c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c0a:	e01f      	b.n	8009c4c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6819      	ldr	r1, [r3, #0]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c14:	041b      	lsls	r3, r3, #16
 8009c16:	461a      	mov	r2, r3
 8009c18:	f04f 0300 	mov.w	r3, #0
 8009c1c:	4608      	mov	r0, r1
 8009c1e:	f002 f99f 	bl	800bf60 <SDMMC_CmdSelDesel>
 8009c22:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <SD_InitCard+0x172>
  {
    return errorstate;
 8009c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c2c:	e00e      	b.n	8009c4c <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681d      	ldr	r5, [r3, #0]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	466c      	mov	r4, sp
 8009c36:	f103 0210 	add.w	r2, r3, #16
 8009c3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009c40:	3304      	adds	r3, #4
 8009c42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c44:	4628      	mov	r0, r5
 8009c46:	f001 ffe1 	bl	800bc0c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3740      	adds	r7, #64	; 0x40
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bdb0      	pop	{r4, r5, r7, pc}

08009c54 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009c60:	2300      	movs	r3, #0
 8009c62:	617b      	str	r3, [r7, #20]
 8009c64:	2300      	movs	r3, #0
 8009c66:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f002 f99a 	bl	800bfa6 <SDMMC_CmdGoIdleState>
 8009c72:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <SD_PowerON+0x2a>
  {
    return errorstate;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	e072      	b.n	8009d64 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4618      	mov	r0, r3
 8009c84:	f002 f9ad 	bl	800bfe2 <SDMMC_CmdOperCond>
 8009c88:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00d      	beq.n	8009cac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f002 f983 	bl	800bfa6 <SDMMC_CmdGoIdleState>
 8009ca0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d004      	beq.n	8009cb2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	e05b      	b.n	8009d64 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d137      	bne.n	8009d2a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f002 f9ad 	bl	800c020 <SDMMC_CmdAppCommand>
 8009cc6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d02d      	beq.n	8009d2a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009cce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009cd2:	e047      	b.n	8009d64 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2100      	movs	r1, #0
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f002 f9a0 	bl	800c020 <SDMMC_CmdAppCommand>
 8009ce0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d001      	beq.n	8009cec <SD_PowerON+0x98>
    {
      return errorstate;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	e03b      	b.n	8009d64 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	491e      	ldr	r1, [pc, #120]	; (8009d6c <SD_PowerON+0x118>)
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f002 f9b6 	bl	800c064 <SDMMC_CmdAppOperCommand>
 8009cf8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d002      	beq.n	8009d06 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d04:	e02e      	b.n	8009d64 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f002 f81c 	bl	800bd4a <SDMMC_GetResponse>
 8009d12:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	0fdb      	lsrs	r3, r3, #31
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d101      	bne.n	8009d20 <SD_PowerON+0xcc>
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e000      	b.n	8009d22 <SD_PowerON+0xce>
 8009d20:	2300      	movs	r3, #0
 8009d22:	613b      	str	r3, [r7, #16]

    count++;
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	3301      	adds	r3, #1
 8009d28:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d802      	bhi.n	8009d3a <SD_PowerON+0xe6>
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d0cc      	beq.n	8009cd4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d902      	bls.n	8009d4a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009d44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d48:	e00c      	b.n	8009d64 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d003      	beq.n	8009d5c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	645a      	str	r2, [r3, #68]	; 0x44
 8009d5a:	e002      	b.n	8009d62 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3718      	adds	r7, #24
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	c1100000 	.word	0xc1100000

08009d70 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d102      	bne.n	8009d86 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d84:	e018      	b.n	8009db8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d8e:	041b      	lsls	r3, r3, #16
 8009d90:	4619      	mov	r1, r3
 8009d92:	4610      	mov	r0, r2
 8009d94:	f002 fa2b 	bl	800c1ee <SDMMC_CmdSendStatus>
 8009d98:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d001      	beq.n	8009da4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	e009      	b.n	8009db8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2100      	movs	r1, #0
 8009daa:	4618      	mov	r0, r3
 8009dac:	f001 ffcd 	bl	800bd4a <SDMMC_GetResponse>
 8009db0:	4602      	mov	r2, r0
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009dc8:	2300      	movs	r3, #0
 8009dca:	60fb      	str	r3, [r7, #12]
 8009dcc:	2300      	movs	r3, #0
 8009dce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f001 ffb7 	bl	800bd4a <SDMMC_GetResponse>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009de2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009de6:	d102      	bne.n	8009dee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009de8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009dec:	e02f      	b.n	8009e4e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009dee:	f107 030c 	add.w	r3, r7, #12
 8009df2:	4619      	mov	r1, r3
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f879 	bl	8009eec <SD_FindSCR>
 8009dfa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d001      	beq.n	8009e06 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	e023      	b.n	8009e4e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d01c      	beq.n	8009e4a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e18:	041b      	lsls	r3, r3, #16
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	4610      	mov	r0, r2
 8009e1e:	f002 f8ff 	bl	800c020 <SDMMC_CmdAppCommand>
 8009e22:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	e00f      	b.n	8009e4e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2102      	movs	r1, #2
 8009e34:	4618      	mov	r0, r3
 8009e36:	f002 f939 	bl	800c0ac <SDMMC_CmdBusWidth>
 8009e3a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d001      	beq.n	8009e46 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	e003      	b.n	8009e4e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009e46:	2300      	movs	r3, #0
 8009e48:	e001      	b.n	8009e4e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009e4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3718      	adds	r7, #24
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b086      	sub	sp, #24
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009e5e:	2300      	movs	r3, #0
 8009e60:	60fb      	str	r3, [r7, #12]
 8009e62:	2300      	movs	r3, #0
 8009e64:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2100      	movs	r1, #0
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f001 ff6c 	bl	800bd4a <SDMMC_GetResponse>
 8009e72:	4603      	mov	r3, r0
 8009e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e7c:	d102      	bne.n	8009e84 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009e7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e82:	e02f      	b.n	8009ee4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009e84:	f107 030c 	add.w	r3, r7, #12
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 f82e 	bl	8009eec <SD_FindSCR>
 8009e90:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d001      	beq.n	8009e9c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	e023      	b.n	8009ee4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d01c      	beq.n	8009ee0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eae:	041b      	lsls	r3, r3, #16
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	4610      	mov	r0, r2
 8009eb4:	f002 f8b4 	bl	800c020 <SDMMC_CmdAppCommand>
 8009eb8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d001      	beq.n	8009ec4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	e00f      	b.n	8009ee4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2100      	movs	r1, #0
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f002 f8ee 	bl	800c0ac <SDMMC_CmdBusWidth>
 8009ed0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d001      	beq.n	8009edc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	e003      	b.n	8009ee4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009edc:	2300      	movs	r3, #0
 8009ede:	e001      	b.n	8009ee4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009ee0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3718      	adds	r7, #24
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009eec:	b590      	push	{r4, r7, lr}
 8009eee:	b08f      	sub	sp, #60	; 0x3c
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009ef6:	f7f9 fbd7 	bl	80036a8 <HAL_GetTick>
 8009efa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009efc:	2300      	movs	r3, #0
 8009efe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009f00:	2300      	movs	r3, #0
 8009f02:	60bb      	str	r3, [r7, #8]
 8009f04:	2300      	movs	r3, #0
 8009f06:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2108      	movs	r1, #8
 8009f12:	4618      	mov	r0, r3
 8009f14:	f001 ff58 	bl	800bdc8 <SDMMC_CmdBlockLength>
 8009f18:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f22:	e0b2      	b.n	800a08a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f2c:	041b      	lsls	r3, r3, #16
 8009f2e:	4619      	mov	r1, r3
 8009f30:	4610      	mov	r0, r2
 8009f32:	f002 f875 	bl	800c020 <SDMMC_CmdAppCommand>
 8009f36:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f40:	e0a3      	b.n	800a08a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f46:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009f48:	2308      	movs	r3, #8
 8009f4a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009f4c:	2330      	movs	r3, #48	; 0x30
 8009f4e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009f50:	2302      	movs	r3, #2
 8009f52:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009f54:	2300      	movs	r3, #0
 8009f56:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f107 0210 	add.w	r2, r7, #16
 8009f64:	4611      	mov	r1, r2
 8009f66:	4618      	mov	r0, r3
 8009f68:	f001 ff02 	bl	800bd70 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f002 f8bd 	bl	800c0f0 <SDMMC_CmdSendSCR>
 8009f76:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d02a      	beq.n	8009fd4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f80:	e083      	b.n	800a08a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00f      	beq.n	8009fb0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6819      	ldr	r1, [r3, #0]
 8009f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	f107 0208 	add.w	r2, r7, #8
 8009f9c:	18d4      	adds	r4, r2, r3
 8009f9e:	4608      	mov	r0, r1
 8009fa0:	f001 fe60 	bl	800bc64 <SDMMC_ReadFIFO>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	6023      	str	r3, [r4, #0]
      index++;
 8009fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009faa:	3301      	adds	r3, #1
 8009fac:	637b      	str	r3, [r7, #52]	; 0x34
 8009fae:	e006      	b.n	8009fbe <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d012      	beq.n	8009fe4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009fbe:	f7f9 fb73 	bl	80036a8 <HAL_GetTick>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fcc:	d102      	bne.n	8009fd4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009fce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fd2:	e05a      	b.n	800a08a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fda:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d0cf      	beq.n	8009f82 <SD_FindSCR+0x96>
 8009fe2:	e000      	b.n	8009fe6 <SD_FindSCR+0xfa>
      break;
 8009fe4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fec:	f003 0308 	and.w	r3, r3, #8
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d005      	beq.n	800a000 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2208      	movs	r2, #8
 8009ffa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009ffc:	2308      	movs	r3, #8
 8009ffe:	e044      	b.n	800a08a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a006:	f003 0302 	and.w	r3, r3, #2
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d005      	beq.n	800a01a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2202      	movs	r2, #2
 800a014:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a016:	2302      	movs	r3, #2
 800a018:	e037      	b.n	800a08a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a020:	f003 0320 	and.w	r3, r3, #32
 800a024:	2b00      	cmp	r3, #0
 800a026:	d005      	beq.n	800a034 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2220      	movs	r2, #32
 800a02e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a030:	2320      	movs	r3, #32
 800a032:	e02a      	b.n	800a08a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f240 523a 	movw	r2, #1338	; 0x53a
 800a03c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	061a      	lsls	r2, r3, #24
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	021b      	lsls	r3, r3, #8
 800a046:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a04a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	0a1b      	lsrs	r3, r3, #8
 800a050:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a054:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	0e1b      	lsrs	r3, r3, #24
 800a05a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05e:	601a      	str	r2, [r3, #0]
    scr++;
 800a060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a062:	3304      	adds	r3, #4
 800a064:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	061a      	lsls	r2, r3, #24
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	021b      	lsls	r3, r3, #8
 800a06e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a072:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	0a1b      	lsrs	r3, r3, #8
 800a078:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a07c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	0e1b      	lsrs	r3, r3, #24
 800a082:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a086:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	373c      	adds	r7, #60	; 0x3c
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd90      	pop	{r4, r7, pc}

0800a092 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800a092:	b580      	push	{r7, lr}
 800a094:	b082      	sub	sp, #8
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e025      	b.n	800a0f2 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d106      	bne.n	800a0c0 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7f9 f976 	bl	80033ac <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2202      	movs	r2, #2
 800a0c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	f001 fca8 	bl	800ba28 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6818      	ldr	r0, [r3, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	6839      	ldr	r1, [r7, #0]
 800a0e4:	f001 fd12 	bl	800bb0c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
	...

0800a0fc <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d101      	bne.n	800a10e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	e04c      	b.n	800a1a8 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2b00      	cmp	r3, #0
 800a118:	d106      	bne.n	800a128 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f7f8 fe8e 	bl	8002e44 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2202      	movs	r2, #2
 800a12c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f022 0203 	bic.w	r2, r2, #3
 800a13e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	4b19      	ldr	r3, [pc, #100]	; (800a1b0 <HAL_SPDIFRX_Init+0xb4>)
 800a14c:	4013      	ands	r3, r2
 800a14e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a158:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a15e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a164:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a16a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a170:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a176:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a17c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800a182:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800a188:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3710      	adds	r7, #16
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	fff88407 	.word	0xfff88407

0800a1b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d101      	bne.n	800a1c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e049      	b.n	800a25a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d106      	bne.n	800a1e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f7f8 fe74 	bl	8002ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2202      	movs	r2, #2
 800a1e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	3304      	adds	r3, #4
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	4610      	mov	r0, r2
 800a1f4:	f000 fade 	bl	800a7b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3708      	adds	r7, #8
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
	...

0800a264 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a272:	b2db      	uxtb	r3, r3
 800a274:	2b01      	cmp	r3, #1
 800a276:	d001      	beq.n	800a27c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a278:	2301      	movs	r3, #1
 800a27a:	e04c      	b.n	800a316 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2202      	movs	r2, #2
 800a280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a26      	ldr	r2, [pc, #152]	; (800a324 <HAL_TIM_Base_Start+0xc0>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d022      	beq.n	800a2d4 <HAL_TIM_Base_Start+0x70>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a296:	d01d      	beq.n	800a2d4 <HAL_TIM_Base_Start+0x70>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a22      	ldr	r2, [pc, #136]	; (800a328 <HAL_TIM_Base_Start+0xc4>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d018      	beq.n	800a2d4 <HAL_TIM_Base_Start+0x70>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a21      	ldr	r2, [pc, #132]	; (800a32c <HAL_TIM_Base_Start+0xc8>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d013      	beq.n	800a2d4 <HAL_TIM_Base_Start+0x70>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a1f      	ldr	r2, [pc, #124]	; (800a330 <HAL_TIM_Base_Start+0xcc>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d00e      	beq.n	800a2d4 <HAL_TIM_Base_Start+0x70>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a1e      	ldr	r2, [pc, #120]	; (800a334 <HAL_TIM_Base_Start+0xd0>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d009      	beq.n	800a2d4 <HAL_TIM_Base_Start+0x70>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a1c      	ldr	r2, [pc, #112]	; (800a338 <HAL_TIM_Base_Start+0xd4>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d004      	beq.n	800a2d4 <HAL_TIM_Base_Start+0x70>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a1b      	ldr	r2, [pc, #108]	; (800a33c <HAL_TIM_Base_Start+0xd8>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d115      	bne.n	800a300 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	689a      	ldr	r2, [r3, #8]
 800a2da:	4b19      	ldr	r3, [pc, #100]	; (800a340 <HAL_TIM_Base_Start+0xdc>)
 800a2dc:	4013      	ands	r3, r2
 800a2de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2b06      	cmp	r3, #6
 800a2e4:	d015      	beq.n	800a312 <HAL_TIM_Base_Start+0xae>
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2ec:	d011      	beq.n	800a312 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f042 0201 	orr.w	r2, r2, #1
 800a2fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2fe:	e008      	b.n	800a312 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f042 0201 	orr.w	r2, r2, #1
 800a30e:	601a      	str	r2, [r3, #0]
 800a310:	e000      	b.n	800a314 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a312:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	40010000 	.word	0x40010000
 800a328:	40000400 	.word	0x40000400
 800a32c:	40000800 	.word	0x40000800
 800a330:	40000c00 	.word	0x40000c00
 800a334:	40010400 	.word	0x40010400
 800a338:	40014000 	.word	0x40014000
 800a33c:	40001800 	.word	0x40001800
 800a340:	00010007 	.word	0x00010007

0800a344 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	e049      	b.n	800a3ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d106      	bne.n	800a370 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 f841 	bl	800a3f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2202      	movs	r2, #2
 800a374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	3304      	adds	r3, #4
 800a380:	4619      	mov	r1, r3
 800a382:	4610      	mov	r0, r2
 800a384:	f000 fa16 	bl	800a7b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b083      	sub	sp, #12
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a3fa:	bf00      	nop
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
	...

0800a408 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d101      	bne.n	800a422 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a41e:	2302      	movs	r3, #2
 800a420:	e0fd      	b.n	800a61e <HAL_TIM_PWM_ConfigChannel+0x216>
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2201      	movs	r2, #1
 800a426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2b14      	cmp	r3, #20
 800a42e:	f200 80f0 	bhi.w	800a612 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a432:	a201      	add	r2, pc, #4	; (adr r2, 800a438 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a438:	0800a48d 	.word	0x0800a48d
 800a43c:	0800a613 	.word	0x0800a613
 800a440:	0800a613 	.word	0x0800a613
 800a444:	0800a613 	.word	0x0800a613
 800a448:	0800a4cd 	.word	0x0800a4cd
 800a44c:	0800a613 	.word	0x0800a613
 800a450:	0800a613 	.word	0x0800a613
 800a454:	0800a613 	.word	0x0800a613
 800a458:	0800a50f 	.word	0x0800a50f
 800a45c:	0800a613 	.word	0x0800a613
 800a460:	0800a613 	.word	0x0800a613
 800a464:	0800a613 	.word	0x0800a613
 800a468:	0800a54f 	.word	0x0800a54f
 800a46c:	0800a613 	.word	0x0800a613
 800a470:	0800a613 	.word	0x0800a613
 800a474:	0800a613 	.word	0x0800a613
 800a478:	0800a591 	.word	0x0800a591
 800a47c:	0800a613 	.word	0x0800a613
 800a480:	0800a613 	.word	0x0800a613
 800a484:	0800a613 	.word	0x0800a613
 800a488:	0800a5d1 	.word	0x0800a5d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	68b9      	ldr	r1, [r7, #8]
 800a492:	4618      	mov	r0, r3
 800a494:	f000 fa2e 	bl	800a8f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	699a      	ldr	r2, [r3, #24]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f042 0208 	orr.w	r2, r2, #8
 800a4a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	699a      	ldr	r2, [r3, #24]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f022 0204 	bic.w	r2, r2, #4
 800a4b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	6999      	ldr	r1, [r3, #24]
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	691a      	ldr	r2, [r3, #16]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	619a      	str	r2, [r3, #24]
      break;
 800a4ca:	e0a3      	b.n	800a614 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68b9      	ldr	r1, [r7, #8]
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f000 fa80 	bl	800a9d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	699a      	ldr	r2, [r3, #24]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	699a      	ldr	r2, [r3, #24]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6999      	ldr	r1, [r3, #24]
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	021a      	lsls	r2, r3, #8
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	430a      	orrs	r2, r1
 800a50a:	619a      	str	r2, [r3, #24]
      break;
 800a50c:	e082      	b.n	800a614 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	68b9      	ldr	r1, [r7, #8]
 800a514:	4618      	mov	r0, r3
 800a516:	f000 fad7 	bl	800aac8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	69da      	ldr	r2, [r3, #28]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f042 0208 	orr.w	r2, r2, #8
 800a528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	69da      	ldr	r2, [r3, #28]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f022 0204 	bic.w	r2, r2, #4
 800a538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	69d9      	ldr	r1, [r3, #28]
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	691a      	ldr	r2, [r3, #16]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	430a      	orrs	r2, r1
 800a54a:	61da      	str	r2, [r3, #28]
      break;
 800a54c:	e062      	b.n	800a614 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	68b9      	ldr	r1, [r7, #8]
 800a554:	4618      	mov	r0, r3
 800a556:	f000 fb2d 	bl	800abb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	69da      	ldr	r2, [r3, #28]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	69da      	ldr	r2, [r3, #28]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	69d9      	ldr	r1, [r3, #28]
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	691b      	ldr	r3, [r3, #16]
 800a584:	021a      	lsls	r2, r3, #8
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	430a      	orrs	r2, r1
 800a58c:	61da      	str	r2, [r3, #28]
      break;
 800a58e:	e041      	b.n	800a614 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68b9      	ldr	r1, [r7, #8]
 800a596:	4618      	mov	r0, r3
 800a598:	f000 fb64 	bl	800ac64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f042 0208 	orr.w	r2, r2, #8
 800a5aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f022 0204 	bic.w	r2, r2, #4
 800a5ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	691a      	ldr	r2, [r3, #16]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	430a      	orrs	r2, r1
 800a5cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a5ce:	e021      	b.n	800a614 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68b9      	ldr	r1, [r7, #8]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f000 fb96 	bl	800ad08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	021a      	lsls	r2, r3, #8
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	430a      	orrs	r2, r1
 800a60e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a610:	e000      	b.n	800a614 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a612:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2200      	movs	r2, #0
 800a618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop

0800a628 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d101      	bne.n	800a640 <HAL_TIM_ConfigClockSource+0x18>
 800a63c:	2302      	movs	r3, #2
 800a63e:	e0b3      	b.n	800a7a8 <HAL_TIM_ConfigClockSource+0x180>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2202      	movs	r2, #2
 800a64c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	4b55      	ldr	r3, [pc, #340]	; (800a7b0 <HAL_TIM_ConfigClockSource+0x188>)
 800a65c:	4013      	ands	r3, r2
 800a65e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a666:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a678:	d03e      	beq.n	800a6f8 <HAL_TIM_ConfigClockSource+0xd0>
 800a67a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a67e:	f200 8087 	bhi.w	800a790 <HAL_TIM_ConfigClockSource+0x168>
 800a682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a686:	f000 8085 	beq.w	800a794 <HAL_TIM_ConfigClockSource+0x16c>
 800a68a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a68e:	d87f      	bhi.n	800a790 <HAL_TIM_ConfigClockSource+0x168>
 800a690:	2b70      	cmp	r3, #112	; 0x70
 800a692:	d01a      	beq.n	800a6ca <HAL_TIM_ConfigClockSource+0xa2>
 800a694:	2b70      	cmp	r3, #112	; 0x70
 800a696:	d87b      	bhi.n	800a790 <HAL_TIM_ConfigClockSource+0x168>
 800a698:	2b60      	cmp	r3, #96	; 0x60
 800a69a:	d050      	beq.n	800a73e <HAL_TIM_ConfigClockSource+0x116>
 800a69c:	2b60      	cmp	r3, #96	; 0x60
 800a69e:	d877      	bhi.n	800a790 <HAL_TIM_ConfigClockSource+0x168>
 800a6a0:	2b50      	cmp	r3, #80	; 0x50
 800a6a2:	d03c      	beq.n	800a71e <HAL_TIM_ConfigClockSource+0xf6>
 800a6a4:	2b50      	cmp	r3, #80	; 0x50
 800a6a6:	d873      	bhi.n	800a790 <HAL_TIM_ConfigClockSource+0x168>
 800a6a8:	2b40      	cmp	r3, #64	; 0x40
 800a6aa:	d058      	beq.n	800a75e <HAL_TIM_ConfigClockSource+0x136>
 800a6ac:	2b40      	cmp	r3, #64	; 0x40
 800a6ae:	d86f      	bhi.n	800a790 <HAL_TIM_ConfigClockSource+0x168>
 800a6b0:	2b30      	cmp	r3, #48	; 0x30
 800a6b2:	d064      	beq.n	800a77e <HAL_TIM_ConfigClockSource+0x156>
 800a6b4:	2b30      	cmp	r3, #48	; 0x30
 800a6b6:	d86b      	bhi.n	800a790 <HAL_TIM_ConfigClockSource+0x168>
 800a6b8:	2b20      	cmp	r3, #32
 800a6ba:	d060      	beq.n	800a77e <HAL_TIM_ConfigClockSource+0x156>
 800a6bc:	2b20      	cmp	r3, #32
 800a6be:	d867      	bhi.n	800a790 <HAL_TIM_ConfigClockSource+0x168>
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d05c      	beq.n	800a77e <HAL_TIM_ConfigClockSource+0x156>
 800a6c4:	2b10      	cmp	r3, #16
 800a6c6:	d05a      	beq.n	800a77e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a6c8:	e062      	b.n	800a790 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6818      	ldr	r0, [r3, #0]
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	6899      	ldr	r1, [r3, #8]
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	685a      	ldr	r2, [r3, #4]
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	f000 fbe3 	bl	800aea4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a6ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	609a      	str	r2, [r3, #8]
      break;
 800a6f6:	e04e      	b.n	800a796 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6818      	ldr	r0, [r3, #0]
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	6899      	ldr	r1, [r3, #8]
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	685a      	ldr	r2, [r3, #4]
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	f000 fbcc 	bl	800aea4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	689a      	ldr	r2, [r3, #8]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a71a:	609a      	str	r2, [r3, #8]
      break;
 800a71c:	e03b      	b.n	800a796 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6818      	ldr	r0, [r3, #0]
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	6859      	ldr	r1, [r3, #4]
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	461a      	mov	r2, r3
 800a72c:	f000 fb40 	bl	800adb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2150      	movs	r1, #80	; 0x50
 800a736:	4618      	mov	r0, r3
 800a738:	f000 fb99 	bl	800ae6e <TIM_ITRx_SetConfig>
      break;
 800a73c:	e02b      	b.n	800a796 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6818      	ldr	r0, [r3, #0]
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	6859      	ldr	r1, [r3, #4]
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	68db      	ldr	r3, [r3, #12]
 800a74a:	461a      	mov	r2, r3
 800a74c:	f000 fb5f 	bl	800ae0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2160      	movs	r1, #96	; 0x60
 800a756:	4618      	mov	r0, r3
 800a758:	f000 fb89 	bl	800ae6e <TIM_ITRx_SetConfig>
      break;
 800a75c:	e01b      	b.n	800a796 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6818      	ldr	r0, [r3, #0]
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	6859      	ldr	r1, [r3, #4]
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	461a      	mov	r2, r3
 800a76c:	f000 fb20 	bl	800adb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2140      	movs	r1, #64	; 0x40
 800a776:	4618      	mov	r0, r3
 800a778:	f000 fb79 	bl	800ae6e <TIM_ITRx_SetConfig>
      break;
 800a77c:	e00b      	b.n	800a796 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4619      	mov	r1, r3
 800a788:	4610      	mov	r0, r2
 800a78a:	f000 fb70 	bl	800ae6e <TIM_ITRx_SetConfig>
        break;
 800a78e:	e002      	b.n	800a796 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a790:	bf00      	nop
 800a792:	e000      	b.n	800a796 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a794:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2201      	movs	r2, #1
 800a79a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	fffeff88 	.word	0xfffeff88

0800a7b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a40      	ldr	r2, [pc, #256]	; (800a8c8 <TIM_Base_SetConfig+0x114>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d013      	beq.n	800a7f4 <TIM_Base_SetConfig+0x40>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7d2:	d00f      	beq.n	800a7f4 <TIM_Base_SetConfig+0x40>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	4a3d      	ldr	r2, [pc, #244]	; (800a8cc <TIM_Base_SetConfig+0x118>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d00b      	beq.n	800a7f4 <TIM_Base_SetConfig+0x40>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	4a3c      	ldr	r2, [pc, #240]	; (800a8d0 <TIM_Base_SetConfig+0x11c>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d007      	beq.n	800a7f4 <TIM_Base_SetConfig+0x40>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4a3b      	ldr	r2, [pc, #236]	; (800a8d4 <TIM_Base_SetConfig+0x120>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d003      	beq.n	800a7f4 <TIM_Base_SetConfig+0x40>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4a3a      	ldr	r2, [pc, #232]	; (800a8d8 <TIM_Base_SetConfig+0x124>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d108      	bne.n	800a806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	4313      	orrs	r3, r2
 800a804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4a2f      	ldr	r2, [pc, #188]	; (800a8c8 <TIM_Base_SetConfig+0x114>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d02b      	beq.n	800a866 <TIM_Base_SetConfig+0xb2>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a814:	d027      	beq.n	800a866 <TIM_Base_SetConfig+0xb2>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4a2c      	ldr	r2, [pc, #176]	; (800a8cc <TIM_Base_SetConfig+0x118>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d023      	beq.n	800a866 <TIM_Base_SetConfig+0xb2>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4a2b      	ldr	r2, [pc, #172]	; (800a8d0 <TIM_Base_SetConfig+0x11c>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d01f      	beq.n	800a866 <TIM_Base_SetConfig+0xb2>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a2a      	ldr	r2, [pc, #168]	; (800a8d4 <TIM_Base_SetConfig+0x120>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d01b      	beq.n	800a866 <TIM_Base_SetConfig+0xb2>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a29      	ldr	r2, [pc, #164]	; (800a8d8 <TIM_Base_SetConfig+0x124>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d017      	beq.n	800a866 <TIM_Base_SetConfig+0xb2>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4a28      	ldr	r2, [pc, #160]	; (800a8dc <TIM_Base_SetConfig+0x128>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d013      	beq.n	800a866 <TIM_Base_SetConfig+0xb2>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4a27      	ldr	r2, [pc, #156]	; (800a8e0 <TIM_Base_SetConfig+0x12c>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d00f      	beq.n	800a866 <TIM_Base_SetConfig+0xb2>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4a26      	ldr	r2, [pc, #152]	; (800a8e4 <TIM_Base_SetConfig+0x130>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d00b      	beq.n	800a866 <TIM_Base_SetConfig+0xb2>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4a25      	ldr	r2, [pc, #148]	; (800a8e8 <TIM_Base_SetConfig+0x134>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d007      	beq.n	800a866 <TIM_Base_SetConfig+0xb2>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	4a24      	ldr	r2, [pc, #144]	; (800a8ec <TIM_Base_SetConfig+0x138>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d003      	beq.n	800a866 <TIM_Base_SetConfig+0xb2>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4a23      	ldr	r2, [pc, #140]	; (800a8f0 <TIM_Base_SetConfig+0x13c>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d108      	bne.n	800a878 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a86c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	68fa      	ldr	r2, [r7, #12]
 800a874:	4313      	orrs	r3, r2
 800a876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	695b      	ldr	r3, [r3, #20]
 800a882:	4313      	orrs	r3, r2
 800a884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	689a      	ldr	r2, [r3, #8]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4a0a      	ldr	r2, [pc, #40]	; (800a8c8 <TIM_Base_SetConfig+0x114>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d003      	beq.n	800a8ac <TIM_Base_SetConfig+0xf8>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a0c      	ldr	r2, [pc, #48]	; (800a8d8 <TIM_Base_SetConfig+0x124>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d103      	bne.n	800a8b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	691a      	ldr	r2, [r3, #16]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	615a      	str	r2, [r3, #20]
}
 800a8ba:	bf00      	nop
 800a8bc:	3714      	adds	r7, #20
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	40010000 	.word	0x40010000
 800a8cc:	40000400 	.word	0x40000400
 800a8d0:	40000800 	.word	0x40000800
 800a8d4:	40000c00 	.word	0x40000c00
 800a8d8:	40010400 	.word	0x40010400
 800a8dc:	40014000 	.word	0x40014000
 800a8e0:	40014400 	.word	0x40014400
 800a8e4:	40014800 	.word	0x40014800
 800a8e8:	40001800 	.word	0x40001800
 800a8ec:	40001c00 	.word	0x40001c00
 800a8f0:	40002000 	.word	0x40002000

0800a8f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b087      	sub	sp, #28
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6a1b      	ldr	r3, [r3, #32]
 800a902:	f023 0201 	bic.w	r2, r3, #1
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a1b      	ldr	r3, [r3, #32]
 800a90e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	699b      	ldr	r3, [r3, #24]
 800a91a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	4b2b      	ldr	r3, [pc, #172]	; (800a9cc <TIM_OC1_SetConfig+0xd8>)
 800a920:	4013      	ands	r3, r2
 800a922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f023 0303 	bic.w	r3, r3, #3
 800a92a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	4313      	orrs	r3, r2
 800a934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f023 0302 	bic.w	r3, r3, #2
 800a93c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	697a      	ldr	r2, [r7, #20]
 800a944:	4313      	orrs	r3, r2
 800a946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a21      	ldr	r2, [pc, #132]	; (800a9d0 <TIM_OC1_SetConfig+0xdc>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d003      	beq.n	800a958 <TIM_OC1_SetConfig+0x64>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4a20      	ldr	r2, [pc, #128]	; (800a9d4 <TIM_OC1_SetConfig+0xe0>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d10c      	bne.n	800a972 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	f023 0308 	bic.w	r3, r3, #8
 800a95e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	697a      	ldr	r2, [r7, #20]
 800a966:	4313      	orrs	r3, r2
 800a968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	f023 0304 	bic.w	r3, r3, #4
 800a970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a16      	ldr	r2, [pc, #88]	; (800a9d0 <TIM_OC1_SetConfig+0xdc>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d003      	beq.n	800a982 <TIM_OC1_SetConfig+0x8e>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4a15      	ldr	r2, [pc, #84]	; (800a9d4 <TIM_OC1_SetConfig+0xe0>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d111      	bne.n	800a9a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	695b      	ldr	r3, [r3, #20]
 800a996:	693a      	ldr	r2, [r7, #16]
 800a998:	4313      	orrs	r3, r2
 800a99a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	699b      	ldr	r3, [r3, #24]
 800a9a0:	693a      	ldr	r2, [r7, #16]
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	693a      	ldr	r2, [r7, #16]
 800a9aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	685a      	ldr	r2, [r3, #4]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	697a      	ldr	r2, [r7, #20]
 800a9be:	621a      	str	r2, [r3, #32]
}
 800a9c0:	bf00      	nop
 800a9c2:	371c      	adds	r7, #28
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr
 800a9cc:	fffeff8f 	.word	0xfffeff8f
 800a9d0:	40010000 	.word	0x40010000
 800a9d4:	40010400 	.word	0x40010400

0800a9d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b087      	sub	sp, #28
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a1b      	ldr	r3, [r3, #32]
 800a9e6:	f023 0210 	bic.w	r2, r3, #16
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a1b      	ldr	r3, [r3, #32]
 800a9f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	699b      	ldr	r3, [r3, #24]
 800a9fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	4b2e      	ldr	r3, [pc, #184]	; (800aabc <TIM_OC2_SetConfig+0xe4>)
 800aa04:	4013      	ands	r3, r2
 800aa06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	021b      	lsls	r3, r3, #8
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	f023 0320 	bic.w	r3, r3, #32
 800aa22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	011b      	lsls	r3, r3, #4
 800aa2a:	697a      	ldr	r2, [r7, #20]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a23      	ldr	r2, [pc, #140]	; (800aac0 <TIM_OC2_SetConfig+0xe8>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d003      	beq.n	800aa40 <TIM_OC2_SetConfig+0x68>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4a22      	ldr	r2, [pc, #136]	; (800aac4 <TIM_OC2_SetConfig+0xec>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d10d      	bne.n	800aa5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	011b      	lsls	r3, r3, #4
 800aa4e:	697a      	ldr	r2, [r7, #20]
 800aa50:	4313      	orrs	r3, r2
 800aa52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a18      	ldr	r2, [pc, #96]	; (800aac0 <TIM_OC2_SetConfig+0xe8>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d003      	beq.n	800aa6c <TIM_OC2_SetConfig+0x94>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a17      	ldr	r2, [pc, #92]	; (800aac4 <TIM_OC2_SetConfig+0xec>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d113      	bne.n	800aa94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	695b      	ldr	r3, [r3, #20]
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	693a      	ldr	r2, [r7, #16]
 800aa84:	4313      	orrs	r3, r2
 800aa86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	699b      	ldr	r3, [r3, #24]
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	693a      	ldr	r2, [r7, #16]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	693a      	ldr	r2, [r7, #16]
 800aa98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	685a      	ldr	r2, [r3, #4]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	697a      	ldr	r2, [r7, #20]
 800aaac:	621a      	str	r2, [r3, #32]
}
 800aaae:	bf00      	nop
 800aab0:	371c      	adds	r7, #28
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	feff8fff 	.word	0xfeff8fff
 800aac0:	40010000 	.word	0x40010000
 800aac4:	40010400 	.word	0x40010400

0800aac8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b087      	sub	sp, #28
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	69db      	ldr	r3, [r3, #28]
 800aaee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	4b2d      	ldr	r3, [pc, #180]	; (800aba8 <TIM_OC3_SetConfig+0xe0>)
 800aaf4:	4013      	ands	r3, r2
 800aaf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f023 0303 	bic.w	r3, r3, #3
 800aafe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	021b      	lsls	r3, r3, #8
 800ab18:	697a      	ldr	r2, [r7, #20]
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a22      	ldr	r2, [pc, #136]	; (800abac <TIM_OC3_SetConfig+0xe4>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d003      	beq.n	800ab2e <TIM_OC3_SetConfig+0x66>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	4a21      	ldr	r2, [pc, #132]	; (800abb0 <TIM_OC3_SetConfig+0xe8>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d10d      	bne.n	800ab4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	021b      	lsls	r3, r3, #8
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a17      	ldr	r2, [pc, #92]	; (800abac <TIM_OC3_SetConfig+0xe4>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d003      	beq.n	800ab5a <TIM_OC3_SetConfig+0x92>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a16      	ldr	r2, [pc, #88]	; (800abb0 <TIM_OC3_SetConfig+0xe8>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d113      	bne.n	800ab82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	695b      	ldr	r3, [r3, #20]
 800ab6e:	011b      	lsls	r3, r3, #4
 800ab70:	693a      	ldr	r2, [r7, #16]
 800ab72:	4313      	orrs	r3, r2
 800ab74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	699b      	ldr	r3, [r3, #24]
 800ab7a:	011b      	lsls	r3, r3, #4
 800ab7c:	693a      	ldr	r2, [r7, #16]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	693a      	ldr	r2, [r7, #16]
 800ab86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	68fa      	ldr	r2, [r7, #12]
 800ab8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	685a      	ldr	r2, [r3, #4]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	697a      	ldr	r2, [r7, #20]
 800ab9a:	621a      	str	r2, [r3, #32]
}
 800ab9c:	bf00      	nop
 800ab9e:	371c      	adds	r7, #28
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr
 800aba8:	fffeff8f 	.word	0xfffeff8f
 800abac:	40010000 	.word	0x40010000
 800abb0:	40010400 	.word	0x40010400

0800abb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b087      	sub	sp, #28
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a1b      	ldr	r3, [r3, #32]
 800abc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a1b      	ldr	r3, [r3, #32]
 800abce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	69db      	ldr	r3, [r3, #28]
 800abda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	4b1e      	ldr	r3, [pc, #120]	; (800ac58 <TIM_OC4_SetConfig+0xa4>)
 800abe0:	4013      	ands	r3, r2
 800abe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	021b      	lsls	r3, r3, #8
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	4313      	orrs	r3, r2
 800abf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	031b      	lsls	r3, r3, #12
 800ac06:	693a      	ldr	r2, [r7, #16]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a13      	ldr	r2, [pc, #76]	; (800ac5c <TIM_OC4_SetConfig+0xa8>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d003      	beq.n	800ac1c <TIM_OC4_SetConfig+0x68>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	4a12      	ldr	r2, [pc, #72]	; (800ac60 <TIM_OC4_SetConfig+0xac>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d109      	bne.n	800ac30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	695b      	ldr	r3, [r3, #20]
 800ac28:	019b      	lsls	r3, r3, #6
 800ac2a:	697a      	ldr	r2, [r7, #20]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	697a      	ldr	r2, [r7, #20]
 800ac34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	685a      	ldr	r2, [r3, #4]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	693a      	ldr	r2, [r7, #16]
 800ac48:	621a      	str	r2, [r3, #32]
}
 800ac4a:	bf00      	nop
 800ac4c:	371c      	adds	r7, #28
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop
 800ac58:	feff8fff 	.word	0xfeff8fff
 800ac5c:	40010000 	.word	0x40010000
 800ac60:	40010400 	.word	0x40010400

0800ac64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b087      	sub	sp, #28
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6a1b      	ldr	r3, [r3, #32]
 800ac72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a1b      	ldr	r3, [r3, #32]
 800ac7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	4b1b      	ldr	r3, [pc, #108]	; (800acfc <TIM_OC5_SetConfig+0x98>)
 800ac90:	4013      	ands	r3, r2
 800ac92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800aca4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	041b      	lsls	r3, r3, #16
 800acac:	693a      	ldr	r2, [r7, #16]
 800acae:	4313      	orrs	r3, r2
 800acb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a12      	ldr	r2, [pc, #72]	; (800ad00 <TIM_OC5_SetConfig+0x9c>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d003      	beq.n	800acc2 <TIM_OC5_SetConfig+0x5e>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a11      	ldr	r2, [pc, #68]	; (800ad04 <TIM_OC5_SetConfig+0xa0>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d109      	bne.n	800acd6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	021b      	lsls	r3, r3, #8
 800acd0:	697a      	ldr	r2, [r7, #20]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	697a      	ldr	r2, [r7, #20]
 800acda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	685a      	ldr	r2, [r3, #4]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	693a      	ldr	r2, [r7, #16]
 800acee:	621a      	str	r2, [r3, #32]
}
 800acf0:	bf00      	nop
 800acf2:	371c      	adds	r7, #28
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr
 800acfc:	fffeff8f 	.word	0xfffeff8f
 800ad00:	40010000 	.word	0x40010000
 800ad04:	40010400 	.word	0x40010400

0800ad08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b087      	sub	sp, #28
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a1b      	ldr	r3, [r3, #32]
 800ad16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a1b      	ldr	r3, [r3, #32]
 800ad22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	4b1c      	ldr	r3, [pc, #112]	; (800ada4 <TIM_OC6_SetConfig+0x9c>)
 800ad34:	4013      	ands	r3, r2
 800ad36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	021b      	lsls	r3, r3, #8
 800ad3e:	68fa      	ldr	r2, [r7, #12]
 800ad40:	4313      	orrs	r3, r2
 800ad42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ad4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	051b      	lsls	r3, r3, #20
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	4313      	orrs	r3, r2
 800ad56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a13      	ldr	r2, [pc, #76]	; (800ada8 <TIM_OC6_SetConfig+0xa0>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d003      	beq.n	800ad68 <TIM_OC6_SetConfig+0x60>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a12      	ldr	r2, [pc, #72]	; (800adac <TIM_OC6_SetConfig+0xa4>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d109      	bne.n	800ad7c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	695b      	ldr	r3, [r3, #20]
 800ad74:	029b      	lsls	r3, r3, #10
 800ad76:	697a      	ldr	r2, [r7, #20]
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	697a      	ldr	r2, [r7, #20]
 800ad80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	685a      	ldr	r2, [r3, #4]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	621a      	str	r2, [r3, #32]
}
 800ad96:	bf00      	nop
 800ad98:	371c      	adds	r7, #28
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	feff8fff 	.word	0xfeff8fff
 800ada8:	40010000 	.word	0x40010000
 800adac:	40010400 	.word	0x40010400

0800adb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b087      	sub	sp, #28
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6a1b      	ldr	r3, [r3, #32]
 800adc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6a1b      	ldr	r3, [r3, #32]
 800adc6:	f023 0201 	bic.w	r2, r3, #1
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	699b      	ldr	r3, [r3, #24]
 800add2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800adda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	011b      	lsls	r3, r3, #4
 800ade0:	693a      	ldr	r2, [r7, #16]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	f023 030a 	bic.w	r3, r3, #10
 800adec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800adee:	697a      	ldr	r2, [r7, #20]
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	693a      	ldr	r2, [r7, #16]
 800adfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	697a      	ldr	r2, [r7, #20]
 800ae00:	621a      	str	r2, [r3, #32]
}
 800ae02:	bf00      	nop
 800ae04:	371c      	adds	r7, #28
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr

0800ae0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae0e:	b480      	push	{r7}
 800ae10:	b087      	sub	sp, #28
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	60f8      	str	r0, [r7, #12]
 800ae16:	60b9      	str	r1, [r7, #8]
 800ae18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6a1b      	ldr	r3, [r3, #32]
 800ae1e:	f023 0210 	bic.w	r2, r3, #16
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	699b      	ldr	r3, [r3, #24]
 800ae2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6a1b      	ldr	r3, [r3, #32]
 800ae30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	031b      	lsls	r3, r3, #12
 800ae3e:	697a      	ldr	r2, [r7, #20]
 800ae40:	4313      	orrs	r3, r2
 800ae42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ae4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	011b      	lsls	r3, r3, #4
 800ae50:	693a      	ldr	r2, [r7, #16]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	697a      	ldr	r2, [r7, #20]
 800ae5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	693a      	ldr	r2, [r7, #16]
 800ae60:	621a      	str	r2, [r3, #32]
}
 800ae62:	bf00      	nop
 800ae64:	371c      	adds	r7, #28
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae6e:	b480      	push	{r7}
 800ae70:	b085      	sub	sp, #20
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
 800ae76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae86:	683a      	ldr	r2, [r7, #0]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	f043 0307 	orr.w	r3, r3, #7
 800ae90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	609a      	str	r2, [r3, #8]
}
 800ae98:	bf00      	nop
 800ae9a:	3714      	adds	r7, #20
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b087      	sub	sp, #28
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	607a      	str	r2, [r7, #4]
 800aeb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aebe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	021a      	lsls	r2, r3, #8
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	431a      	orrs	r2, r3
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	697a      	ldr	r2, [r7, #20]
 800aece:	4313      	orrs	r3, r2
 800aed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	697a      	ldr	r2, [r7, #20]
 800aed6:	609a      	str	r2, [r3, #8]
}
 800aed8:	bf00      	nop
 800aeda:	371c      	adds	r7, #28
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b085      	sub	sp, #20
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d101      	bne.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aef8:	2302      	movs	r3, #2
 800aefa:	e06d      	b.n	800afd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2202      	movs	r2, #2
 800af08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a30      	ldr	r2, [pc, #192]	; (800afe4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d004      	beq.n	800af30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a2f      	ldr	r2, [pc, #188]	; (800afe8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d108      	bne.n	800af42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	68fa      	ldr	r2, [r7, #12]
 800af3e:	4313      	orrs	r3, r2
 800af40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	4313      	orrs	r3, r2
 800af52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a20      	ldr	r2, [pc, #128]	; (800afe4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d022      	beq.n	800afac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af6e:	d01d      	beq.n	800afac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a1d      	ldr	r2, [pc, #116]	; (800afec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d018      	beq.n	800afac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a1c      	ldr	r2, [pc, #112]	; (800aff0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d013      	beq.n	800afac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a1a      	ldr	r2, [pc, #104]	; (800aff4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d00e      	beq.n	800afac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4a15      	ldr	r2, [pc, #84]	; (800afe8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d009      	beq.n	800afac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a16      	ldr	r2, [pc, #88]	; (800aff8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d004      	beq.n	800afac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4a15      	ldr	r2, [pc, #84]	; (800affc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d10c      	bne.n	800afc6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	68ba      	ldr	r2, [r7, #8]
 800afba:	4313      	orrs	r3, r2
 800afbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2201      	movs	r2, #1
 800afca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3714      	adds	r7, #20
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr
 800afe4:	40010000 	.word	0x40010000
 800afe8:	40010400 	.word	0x40010400
 800afec:	40000400 	.word	0x40000400
 800aff0:	40000800 	.word	0x40000800
 800aff4:	40000c00 	.word	0x40000c00
 800aff8:	40014000 	.word	0x40014000
 800affc:	40001800 	.word	0x40001800

0800b000 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b000:	b480      	push	{r7}
 800b002:	b085      	sub	sp, #20
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b00a:	2300      	movs	r3, #0
 800b00c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b014:	2b01      	cmp	r3, #1
 800b016:	d101      	bne.n	800b01c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b018:	2302      	movs	r3, #2
 800b01a:	e065      	b.n	800b0e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	68db      	ldr	r3, [r3, #12]
 800b02e:	4313      	orrs	r3, r2
 800b030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	4313      	orrs	r3, r2
 800b03e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	4313      	orrs	r3, r2
 800b04c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4313      	orrs	r3, r2
 800b05a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	691b      	ldr	r3, [r3, #16]
 800b066:	4313      	orrs	r3, r2
 800b068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	695b      	ldr	r3, [r3, #20]
 800b074:	4313      	orrs	r3, r2
 800b076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b082:	4313      	orrs	r3, r2
 800b084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	041b      	lsls	r3, r3, #16
 800b092:	4313      	orrs	r3, r2
 800b094:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a16      	ldr	r2, [pc, #88]	; (800b0f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d004      	beq.n	800b0aa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a14      	ldr	r2, [pc, #80]	; (800b0f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d115      	bne.n	800b0d6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b4:	051b      	lsls	r3, r3, #20
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	69db      	ldr	r3, [r3, #28]
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	6a1b      	ldr	r3, [r3, #32]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	68fa      	ldr	r2, [r7, #12]
 800b0dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0e6:	2300      	movs	r3, #0
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3714      	adds	r7, #20
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr
 800b0f4:	40010000 	.word	0x40010000
 800b0f8:	40010400 	.word	0x40010400

0800b0fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d101      	bne.n	800b10e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b10a:	2301      	movs	r3, #1
 800b10c:	e040      	b.n	800b190 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b112:	2b00      	cmp	r3, #0
 800b114:	d106      	bne.n	800b124 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f7f8 f820 	bl	8003164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2224      	movs	r2, #36	; 0x24
 800b128:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f022 0201 	bic.w	r2, r2, #1
 800b138:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 f8c0 	bl	800b2c0 <UART_SetConfig>
 800b140:	4603      	mov	r3, r0
 800b142:	2b01      	cmp	r3, #1
 800b144:	d101      	bne.n	800b14a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b146:	2301      	movs	r3, #1
 800b148:	e022      	b.n	800b190 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d002      	beq.n	800b158 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fb16 	bl	800b784 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	685a      	ldr	r2, [r3, #4]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b166:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	689a      	ldr	r2, [r3, #8]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b176:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f042 0201 	orr.w	r2, r2, #1
 800b186:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 fb9d 	bl	800b8c8 <UART_CheckIdleState>
 800b18e:	4603      	mov	r3, r0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b08a      	sub	sp, #40	; 0x28
 800b19c:	af02      	add	r7, sp, #8
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	603b      	str	r3, [r7, #0]
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1ac:	2b20      	cmp	r3, #32
 800b1ae:	f040 8081 	bne.w	800b2b4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d002      	beq.n	800b1be <HAL_UART_Transmit+0x26>
 800b1b8:	88fb      	ldrh	r3, [r7, #6]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d101      	bne.n	800b1c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	e079      	b.n	800b2b6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d101      	bne.n	800b1d0 <HAL_UART_Transmit+0x38>
 800b1cc:	2302      	movs	r3, #2
 800b1ce:	e072      	b.n	800b2b6 <HAL_UART_Transmit+0x11e>
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2221      	movs	r2, #33	; 0x21
 800b1e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b1e6:	f7f8 fa5f 	bl	80036a8 <HAL_GetTick>
 800b1ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	88fa      	ldrh	r2, [r7, #6]
 800b1f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	88fa      	ldrh	r2, [r7, #6]
 800b1f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b204:	d108      	bne.n	800b218 <HAL_UART_Transmit+0x80>
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d104      	bne.n	800b218 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800b20e:	2300      	movs	r3, #0
 800b210:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	61bb      	str	r3, [r7, #24]
 800b216:	e003      	b.n	800b220 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b21c:	2300      	movs	r3, #0
 800b21e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2200      	movs	r2, #0
 800b224:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b228:	e02c      	b.n	800b284 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	2200      	movs	r2, #0
 800b232:	2180      	movs	r1, #128	; 0x80
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f000 fb7a 	bl	800b92e <UART_WaitOnFlagUntilTimeout>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d001      	beq.n	800b244 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b240:	2303      	movs	r3, #3
 800b242:	e038      	b.n	800b2b6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d10b      	bne.n	800b262 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	881b      	ldrh	r3, [r3, #0]
 800b24e:	461a      	mov	r2, r3
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b258:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	3302      	adds	r3, #2
 800b25e:	61bb      	str	r3, [r7, #24]
 800b260:	e007      	b.n	800b272 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	781a      	ldrb	r2, [r3, #0]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	3301      	adds	r3, #1
 800b270:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b278:	b29b      	uxth	r3, r3
 800b27a:	3b01      	subs	r3, #1
 800b27c:	b29a      	uxth	r2, r3
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1cc      	bne.n	800b22a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	9300      	str	r3, [sp, #0]
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	2200      	movs	r2, #0
 800b298:	2140      	movs	r1, #64	; 0x40
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f000 fb47 	bl	800b92e <UART_WaitOnFlagUntilTimeout>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800b2a6:	2303      	movs	r3, #3
 800b2a8:	e005      	b.n	800b2b6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2220      	movs	r2, #32
 800b2ae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	e000      	b.n	800b2b6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800b2b4:	2302      	movs	r3, #2
  }
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3720      	adds	r7, #32
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
	...

0800b2c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b088      	sub	sp, #32
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	689a      	ldr	r2, [r3, #8]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	431a      	orrs	r2, r3
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	695b      	ldr	r3, [r3, #20]
 800b2da:	431a      	orrs	r2, r3
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	69db      	ldr	r3, [r3, #28]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	4ba7      	ldr	r3, [pc, #668]	; (800b588 <UART_SetConfig+0x2c8>)
 800b2ec:	4013      	ands	r3, r2
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	6812      	ldr	r2, [r2, #0]
 800b2f2:	6979      	ldr	r1, [r7, #20]
 800b2f4:	430b      	orrs	r3, r1
 800b2f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	68da      	ldr	r2, [r3, #12]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	430a      	orrs	r2, r1
 800b30c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	699b      	ldr	r3, [r3, #24]
 800b312:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6a1b      	ldr	r3, [r3, #32]
 800b318:	697a      	ldr	r2, [r7, #20]
 800b31a:	4313      	orrs	r3, r2
 800b31c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	697a      	ldr	r2, [r7, #20]
 800b32e:	430a      	orrs	r2, r1
 800b330:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a95      	ldr	r2, [pc, #596]	; (800b58c <UART_SetConfig+0x2cc>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d120      	bne.n	800b37e <UART_SetConfig+0xbe>
 800b33c:	4b94      	ldr	r3, [pc, #592]	; (800b590 <UART_SetConfig+0x2d0>)
 800b33e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b342:	f003 0303 	and.w	r3, r3, #3
 800b346:	2b03      	cmp	r3, #3
 800b348:	d816      	bhi.n	800b378 <UART_SetConfig+0xb8>
 800b34a:	a201      	add	r2, pc, #4	; (adr r2, 800b350 <UART_SetConfig+0x90>)
 800b34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b350:	0800b361 	.word	0x0800b361
 800b354:	0800b36d 	.word	0x0800b36d
 800b358:	0800b367 	.word	0x0800b367
 800b35c:	0800b373 	.word	0x0800b373
 800b360:	2301      	movs	r3, #1
 800b362:	77fb      	strb	r3, [r7, #31]
 800b364:	e14f      	b.n	800b606 <UART_SetConfig+0x346>
 800b366:	2302      	movs	r3, #2
 800b368:	77fb      	strb	r3, [r7, #31]
 800b36a:	e14c      	b.n	800b606 <UART_SetConfig+0x346>
 800b36c:	2304      	movs	r3, #4
 800b36e:	77fb      	strb	r3, [r7, #31]
 800b370:	e149      	b.n	800b606 <UART_SetConfig+0x346>
 800b372:	2308      	movs	r3, #8
 800b374:	77fb      	strb	r3, [r7, #31]
 800b376:	e146      	b.n	800b606 <UART_SetConfig+0x346>
 800b378:	2310      	movs	r3, #16
 800b37a:	77fb      	strb	r3, [r7, #31]
 800b37c:	e143      	b.n	800b606 <UART_SetConfig+0x346>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a84      	ldr	r2, [pc, #528]	; (800b594 <UART_SetConfig+0x2d4>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d132      	bne.n	800b3ee <UART_SetConfig+0x12e>
 800b388:	4b81      	ldr	r3, [pc, #516]	; (800b590 <UART_SetConfig+0x2d0>)
 800b38a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b38e:	f003 030c 	and.w	r3, r3, #12
 800b392:	2b0c      	cmp	r3, #12
 800b394:	d828      	bhi.n	800b3e8 <UART_SetConfig+0x128>
 800b396:	a201      	add	r2, pc, #4	; (adr r2, 800b39c <UART_SetConfig+0xdc>)
 800b398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b39c:	0800b3d1 	.word	0x0800b3d1
 800b3a0:	0800b3e9 	.word	0x0800b3e9
 800b3a4:	0800b3e9 	.word	0x0800b3e9
 800b3a8:	0800b3e9 	.word	0x0800b3e9
 800b3ac:	0800b3dd 	.word	0x0800b3dd
 800b3b0:	0800b3e9 	.word	0x0800b3e9
 800b3b4:	0800b3e9 	.word	0x0800b3e9
 800b3b8:	0800b3e9 	.word	0x0800b3e9
 800b3bc:	0800b3d7 	.word	0x0800b3d7
 800b3c0:	0800b3e9 	.word	0x0800b3e9
 800b3c4:	0800b3e9 	.word	0x0800b3e9
 800b3c8:	0800b3e9 	.word	0x0800b3e9
 800b3cc:	0800b3e3 	.word	0x0800b3e3
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	77fb      	strb	r3, [r7, #31]
 800b3d4:	e117      	b.n	800b606 <UART_SetConfig+0x346>
 800b3d6:	2302      	movs	r3, #2
 800b3d8:	77fb      	strb	r3, [r7, #31]
 800b3da:	e114      	b.n	800b606 <UART_SetConfig+0x346>
 800b3dc:	2304      	movs	r3, #4
 800b3de:	77fb      	strb	r3, [r7, #31]
 800b3e0:	e111      	b.n	800b606 <UART_SetConfig+0x346>
 800b3e2:	2308      	movs	r3, #8
 800b3e4:	77fb      	strb	r3, [r7, #31]
 800b3e6:	e10e      	b.n	800b606 <UART_SetConfig+0x346>
 800b3e8:	2310      	movs	r3, #16
 800b3ea:	77fb      	strb	r3, [r7, #31]
 800b3ec:	e10b      	b.n	800b606 <UART_SetConfig+0x346>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a69      	ldr	r2, [pc, #420]	; (800b598 <UART_SetConfig+0x2d8>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d120      	bne.n	800b43a <UART_SetConfig+0x17a>
 800b3f8:	4b65      	ldr	r3, [pc, #404]	; (800b590 <UART_SetConfig+0x2d0>)
 800b3fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b402:	2b30      	cmp	r3, #48	; 0x30
 800b404:	d013      	beq.n	800b42e <UART_SetConfig+0x16e>
 800b406:	2b30      	cmp	r3, #48	; 0x30
 800b408:	d814      	bhi.n	800b434 <UART_SetConfig+0x174>
 800b40a:	2b20      	cmp	r3, #32
 800b40c:	d009      	beq.n	800b422 <UART_SetConfig+0x162>
 800b40e:	2b20      	cmp	r3, #32
 800b410:	d810      	bhi.n	800b434 <UART_SetConfig+0x174>
 800b412:	2b00      	cmp	r3, #0
 800b414:	d002      	beq.n	800b41c <UART_SetConfig+0x15c>
 800b416:	2b10      	cmp	r3, #16
 800b418:	d006      	beq.n	800b428 <UART_SetConfig+0x168>
 800b41a:	e00b      	b.n	800b434 <UART_SetConfig+0x174>
 800b41c:	2300      	movs	r3, #0
 800b41e:	77fb      	strb	r3, [r7, #31]
 800b420:	e0f1      	b.n	800b606 <UART_SetConfig+0x346>
 800b422:	2302      	movs	r3, #2
 800b424:	77fb      	strb	r3, [r7, #31]
 800b426:	e0ee      	b.n	800b606 <UART_SetConfig+0x346>
 800b428:	2304      	movs	r3, #4
 800b42a:	77fb      	strb	r3, [r7, #31]
 800b42c:	e0eb      	b.n	800b606 <UART_SetConfig+0x346>
 800b42e:	2308      	movs	r3, #8
 800b430:	77fb      	strb	r3, [r7, #31]
 800b432:	e0e8      	b.n	800b606 <UART_SetConfig+0x346>
 800b434:	2310      	movs	r3, #16
 800b436:	77fb      	strb	r3, [r7, #31]
 800b438:	e0e5      	b.n	800b606 <UART_SetConfig+0x346>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4a57      	ldr	r2, [pc, #348]	; (800b59c <UART_SetConfig+0x2dc>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d120      	bne.n	800b486 <UART_SetConfig+0x1c6>
 800b444:	4b52      	ldr	r3, [pc, #328]	; (800b590 <UART_SetConfig+0x2d0>)
 800b446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b44a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b44e:	2bc0      	cmp	r3, #192	; 0xc0
 800b450:	d013      	beq.n	800b47a <UART_SetConfig+0x1ba>
 800b452:	2bc0      	cmp	r3, #192	; 0xc0
 800b454:	d814      	bhi.n	800b480 <UART_SetConfig+0x1c0>
 800b456:	2b80      	cmp	r3, #128	; 0x80
 800b458:	d009      	beq.n	800b46e <UART_SetConfig+0x1ae>
 800b45a:	2b80      	cmp	r3, #128	; 0x80
 800b45c:	d810      	bhi.n	800b480 <UART_SetConfig+0x1c0>
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d002      	beq.n	800b468 <UART_SetConfig+0x1a8>
 800b462:	2b40      	cmp	r3, #64	; 0x40
 800b464:	d006      	beq.n	800b474 <UART_SetConfig+0x1b4>
 800b466:	e00b      	b.n	800b480 <UART_SetConfig+0x1c0>
 800b468:	2300      	movs	r3, #0
 800b46a:	77fb      	strb	r3, [r7, #31]
 800b46c:	e0cb      	b.n	800b606 <UART_SetConfig+0x346>
 800b46e:	2302      	movs	r3, #2
 800b470:	77fb      	strb	r3, [r7, #31]
 800b472:	e0c8      	b.n	800b606 <UART_SetConfig+0x346>
 800b474:	2304      	movs	r3, #4
 800b476:	77fb      	strb	r3, [r7, #31]
 800b478:	e0c5      	b.n	800b606 <UART_SetConfig+0x346>
 800b47a:	2308      	movs	r3, #8
 800b47c:	77fb      	strb	r3, [r7, #31]
 800b47e:	e0c2      	b.n	800b606 <UART_SetConfig+0x346>
 800b480:	2310      	movs	r3, #16
 800b482:	77fb      	strb	r3, [r7, #31]
 800b484:	e0bf      	b.n	800b606 <UART_SetConfig+0x346>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a45      	ldr	r2, [pc, #276]	; (800b5a0 <UART_SetConfig+0x2e0>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d125      	bne.n	800b4dc <UART_SetConfig+0x21c>
 800b490:	4b3f      	ldr	r3, [pc, #252]	; (800b590 <UART_SetConfig+0x2d0>)
 800b492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b49a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b49e:	d017      	beq.n	800b4d0 <UART_SetConfig+0x210>
 800b4a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4a4:	d817      	bhi.n	800b4d6 <UART_SetConfig+0x216>
 800b4a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4aa:	d00b      	beq.n	800b4c4 <UART_SetConfig+0x204>
 800b4ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4b0:	d811      	bhi.n	800b4d6 <UART_SetConfig+0x216>
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d003      	beq.n	800b4be <UART_SetConfig+0x1fe>
 800b4b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4ba:	d006      	beq.n	800b4ca <UART_SetConfig+0x20a>
 800b4bc:	e00b      	b.n	800b4d6 <UART_SetConfig+0x216>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	77fb      	strb	r3, [r7, #31]
 800b4c2:	e0a0      	b.n	800b606 <UART_SetConfig+0x346>
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	77fb      	strb	r3, [r7, #31]
 800b4c8:	e09d      	b.n	800b606 <UART_SetConfig+0x346>
 800b4ca:	2304      	movs	r3, #4
 800b4cc:	77fb      	strb	r3, [r7, #31]
 800b4ce:	e09a      	b.n	800b606 <UART_SetConfig+0x346>
 800b4d0:	2308      	movs	r3, #8
 800b4d2:	77fb      	strb	r3, [r7, #31]
 800b4d4:	e097      	b.n	800b606 <UART_SetConfig+0x346>
 800b4d6:	2310      	movs	r3, #16
 800b4d8:	77fb      	strb	r3, [r7, #31]
 800b4da:	e094      	b.n	800b606 <UART_SetConfig+0x346>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a30      	ldr	r2, [pc, #192]	; (800b5a4 <UART_SetConfig+0x2e4>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d125      	bne.n	800b532 <UART_SetConfig+0x272>
 800b4e6:	4b2a      	ldr	r3, [pc, #168]	; (800b590 <UART_SetConfig+0x2d0>)
 800b4e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b4f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4f4:	d017      	beq.n	800b526 <UART_SetConfig+0x266>
 800b4f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4fa:	d817      	bhi.n	800b52c <UART_SetConfig+0x26c>
 800b4fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b500:	d00b      	beq.n	800b51a <UART_SetConfig+0x25a>
 800b502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b506:	d811      	bhi.n	800b52c <UART_SetConfig+0x26c>
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d003      	beq.n	800b514 <UART_SetConfig+0x254>
 800b50c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b510:	d006      	beq.n	800b520 <UART_SetConfig+0x260>
 800b512:	e00b      	b.n	800b52c <UART_SetConfig+0x26c>
 800b514:	2301      	movs	r3, #1
 800b516:	77fb      	strb	r3, [r7, #31]
 800b518:	e075      	b.n	800b606 <UART_SetConfig+0x346>
 800b51a:	2302      	movs	r3, #2
 800b51c:	77fb      	strb	r3, [r7, #31]
 800b51e:	e072      	b.n	800b606 <UART_SetConfig+0x346>
 800b520:	2304      	movs	r3, #4
 800b522:	77fb      	strb	r3, [r7, #31]
 800b524:	e06f      	b.n	800b606 <UART_SetConfig+0x346>
 800b526:	2308      	movs	r3, #8
 800b528:	77fb      	strb	r3, [r7, #31]
 800b52a:	e06c      	b.n	800b606 <UART_SetConfig+0x346>
 800b52c:	2310      	movs	r3, #16
 800b52e:	77fb      	strb	r3, [r7, #31]
 800b530:	e069      	b.n	800b606 <UART_SetConfig+0x346>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4a1c      	ldr	r2, [pc, #112]	; (800b5a8 <UART_SetConfig+0x2e8>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d137      	bne.n	800b5ac <UART_SetConfig+0x2ec>
 800b53c:	4b14      	ldr	r3, [pc, #80]	; (800b590 <UART_SetConfig+0x2d0>)
 800b53e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b542:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b546:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b54a:	d017      	beq.n	800b57c <UART_SetConfig+0x2bc>
 800b54c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b550:	d817      	bhi.n	800b582 <UART_SetConfig+0x2c2>
 800b552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b556:	d00b      	beq.n	800b570 <UART_SetConfig+0x2b0>
 800b558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b55c:	d811      	bhi.n	800b582 <UART_SetConfig+0x2c2>
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d003      	beq.n	800b56a <UART_SetConfig+0x2aa>
 800b562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b566:	d006      	beq.n	800b576 <UART_SetConfig+0x2b6>
 800b568:	e00b      	b.n	800b582 <UART_SetConfig+0x2c2>
 800b56a:	2300      	movs	r3, #0
 800b56c:	77fb      	strb	r3, [r7, #31]
 800b56e:	e04a      	b.n	800b606 <UART_SetConfig+0x346>
 800b570:	2302      	movs	r3, #2
 800b572:	77fb      	strb	r3, [r7, #31]
 800b574:	e047      	b.n	800b606 <UART_SetConfig+0x346>
 800b576:	2304      	movs	r3, #4
 800b578:	77fb      	strb	r3, [r7, #31]
 800b57a:	e044      	b.n	800b606 <UART_SetConfig+0x346>
 800b57c:	2308      	movs	r3, #8
 800b57e:	77fb      	strb	r3, [r7, #31]
 800b580:	e041      	b.n	800b606 <UART_SetConfig+0x346>
 800b582:	2310      	movs	r3, #16
 800b584:	77fb      	strb	r3, [r7, #31]
 800b586:	e03e      	b.n	800b606 <UART_SetConfig+0x346>
 800b588:	efff69f3 	.word	0xefff69f3
 800b58c:	40011000 	.word	0x40011000
 800b590:	40023800 	.word	0x40023800
 800b594:	40004400 	.word	0x40004400
 800b598:	40004800 	.word	0x40004800
 800b59c:	40004c00 	.word	0x40004c00
 800b5a0:	40005000 	.word	0x40005000
 800b5a4:	40011400 	.word	0x40011400
 800b5a8:	40007800 	.word	0x40007800
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a71      	ldr	r2, [pc, #452]	; (800b778 <UART_SetConfig+0x4b8>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d125      	bne.n	800b602 <UART_SetConfig+0x342>
 800b5b6:	4b71      	ldr	r3, [pc, #452]	; (800b77c <UART_SetConfig+0x4bc>)
 800b5b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b5c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b5c4:	d017      	beq.n	800b5f6 <UART_SetConfig+0x336>
 800b5c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b5ca:	d817      	bhi.n	800b5fc <UART_SetConfig+0x33c>
 800b5cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5d0:	d00b      	beq.n	800b5ea <UART_SetConfig+0x32a>
 800b5d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5d6:	d811      	bhi.n	800b5fc <UART_SetConfig+0x33c>
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d003      	beq.n	800b5e4 <UART_SetConfig+0x324>
 800b5dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5e0:	d006      	beq.n	800b5f0 <UART_SetConfig+0x330>
 800b5e2:	e00b      	b.n	800b5fc <UART_SetConfig+0x33c>
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	77fb      	strb	r3, [r7, #31]
 800b5e8:	e00d      	b.n	800b606 <UART_SetConfig+0x346>
 800b5ea:	2302      	movs	r3, #2
 800b5ec:	77fb      	strb	r3, [r7, #31]
 800b5ee:	e00a      	b.n	800b606 <UART_SetConfig+0x346>
 800b5f0:	2304      	movs	r3, #4
 800b5f2:	77fb      	strb	r3, [r7, #31]
 800b5f4:	e007      	b.n	800b606 <UART_SetConfig+0x346>
 800b5f6:	2308      	movs	r3, #8
 800b5f8:	77fb      	strb	r3, [r7, #31]
 800b5fa:	e004      	b.n	800b606 <UART_SetConfig+0x346>
 800b5fc:	2310      	movs	r3, #16
 800b5fe:	77fb      	strb	r3, [r7, #31]
 800b600:	e001      	b.n	800b606 <UART_SetConfig+0x346>
 800b602:	2310      	movs	r3, #16
 800b604:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	69db      	ldr	r3, [r3, #28]
 800b60a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b60e:	d15b      	bne.n	800b6c8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800b610:	7ffb      	ldrb	r3, [r7, #31]
 800b612:	2b08      	cmp	r3, #8
 800b614:	d827      	bhi.n	800b666 <UART_SetConfig+0x3a6>
 800b616:	a201      	add	r2, pc, #4	; (adr r2, 800b61c <UART_SetConfig+0x35c>)
 800b618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b61c:	0800b641 	.word	0x0800b641
 800b620:	0800b649 	.word	0x0800b649
 800b624:	0800b651 	.word	0x0800b651
 800b628:	0800b667 	.word	0x0800b667
 800b62c:	0800b657 	.word	0x0800b657
 800b630:	0800b667 	.word	0x0800b667
 800b634:	0800b667 	.word	0x0800b667
 800b638:	0800b667 	.word	0x0800b667
 800b63c:	0800b65f 	.word	0x0800b65f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b640:	f7fc f8ae 	bl	80077a0 <HAL_RCC_GetPCLK1Freq>
 800b644:	61b8      	str	r0, [r7, #24]
        break;
 800b646:	e013      	b.n	800b670 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b648:	f7fc f8be 	bl	80077c8 <HAL_RCC_GetPCLK2Freq>
 800b64c:	61b8      	str	r0, [r7, #24]
        break;
 800b64e:	e00f      	b.n	800b670 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b650:	4b4b      	ldr	r3, [pc, #300]	; (800b780 <UART_SetConfig+0x4c0>)
 800b652:	61bb      	str	r3, [r7, #24]
        break;
 800b654:	e00c      	b.n	800b670 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b656:	f7fb ffe1 	bl	800761c <HAL_RCC_GetSysClockFreq>
 800b65a:	61b8      	str	r0, [r7, #24]
        break;
 800b65c:	e008      	b.n	800b670 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b65e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b662:	61bb      	str	r3, [r7, #24]
        break;
 800b664:	e004      	b.n	800b670 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800b666:	2300      	movs	r3, #0
 800b668:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b66a:	2301      	movs	r3, #1
 800b66c:	77bb      	strb	r3, [r7, #30]
        break;
 800b66e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d074      	beq.n	800b760 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	005a      	lsls	r2, r3, #1
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	085b      	lsrs	r3, r3, #1
 800b680:	441a      	add	r2, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	fbb2 f3f3 	udiv	r3, r2, r3
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	2b0f      	cmp	r3, #15
 800b692:	d916      	bls.n	800b6c2 <UART_SetConfig+0x402>
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b69a:	d212      	bcs.n	800b6c2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	f023 030f 	bic.w	r3, r3, #15
 800b6a4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	085b      	lsrs	r3, r3, #1
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	f003 0307 	and.w	r3, r3, #7
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	89fb      	ldrh	r3, [r7, #14]
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	89fa      	ldrh	r2, [r7, #14]
 800b6be:	60da      	str	r2, [r3, #12]
 800b6c0:	e04e      	b.n	800b760 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	77bb      	strb	r3, [r7, #30]
 800b6c6:	e04b      	b.n	800b760 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b6c8:	7ffb      	ldrb	r3, [r7, #31]
 800b6ca:	2b08      	cmp	r3, #8
 800b6cc:	d827      	bhi.n	800b71e <UART_SetConfig+0x45e>
 800b6ce:	a201      	add	r2, pc, #4	; (adr r2, 800b6d4 <UART_SetConfig+0x414>)
 800b6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d4:	0800b6f9 	.word	0x0800b6f9
 800b6d8:	0800b701 	.word	0x0800b701
 800b6dc:	0800b709 	.word	0x0800b709
 800b6e0:	0800b71f 	.word	0x0800b71f
 800b6e4:	0800b70f 	.word	0x0800b70f
 800b6e8:	0800b71f 	.word	0x0800b71f
 800b6ec:	0800b71f 	.word	0x0800b71f
 800b6f0:	0800b71f 	.word	0x0800b71f
 800b6f4:	0800b717 	.word	0x0800b717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6f8:	f7fc f852 	bl	80077a0 <HAL_RCC_GetPCLK1Freq>
 800b6fc:	61b8      	str	r0, [r7, #24]
        break;
 800b6fe:	e013      	b.n	800b728 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b700:	f7fc f862 	bl	80077c8 <HAL_RCC_GetPCLK2Freq>
 800b704:	61b8      	str	r0, [r7, #24]
        break;
 800b706:	e00f      	b.n	800b728 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b708:	4b1d      	ldr	r3, [pc, #116]	; (800b780 <UART_SetConfig+0x4c0>)
 800b70a:	61bb      	str	r3, [r7, #24]
        break;
 800b70c:	e00c      	b.n	800b728 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b70e:	f7fb ff85 	bl	800761c <HAL_RCC_GetSysClockFreq>
 800b712:	61b8      	str	r0, [r7, #24]
        break;
 800b714:	e008      	b.n	800b728 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b71a:	61bb      	str	r3, [r7, #24]
        break;
 800b71c:	e004      	b.n	800b728 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800b71e:	2300      	movs	r3, #0
 800b720:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	77bb      	strb	r3, [r7, #30]
        break;
 800b726:	bf00      	nop
    }

    if (pclk != 0U)
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d018      	beq.n	800b760 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	085a      	lsrs	r2, r3, #1
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	441a      	add	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b740:	b29b      	uxth	r3, r3
 800b742:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	2b0f      	cmp	r3, #15
 800b748:	d908      	bls.n	800b75c <UART_SetConfig+0x49c>
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b750:	d204      	bcs.n	800b75c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	693a      	ldr	r2, [r7, #16]
 800b758:	60da      	str	r2, [r3, #12]
 800b75a:	e001      	b.n	800b760 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b75c:	2301      	movs	r3, #1
 800b75e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b76c:	7fbb      	ldrb	r3, [r7, #30]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3720      	adds	r7, #32
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	40007c00 	.word	0x40007c00
 800b77c:	40023800 	.word	0x40023800
 800b780:	00f42400 	.word	0x00f42400

0800b784 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b784:	b480      	push	{r7}
 800b786:	b083      	sub	sp, #12
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b790:	f003 0301 	and.w	r3, r3, #1
 800b794:	2b00      	cmp	r3, #0
 800b796:	d00a      	beq.n	800b7ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	430a      	orrs	r2, r1
 800b7ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b2:	f003 0302 	and.w	r3, r3, #2
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d00a      	beq.n	800b7d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	430a      	orrs	r2, r1
 800b7ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d4:	f003 0304 	and.w	r3, r3, #4
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d00a      	beq.n	800b7f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	430a      	orrs	r2, r1
 800b7f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f6:	f003 0308 	and.w	r3, r3, #8
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00a      	beq.n	800b814 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	430a      	orrs	r2, r1
 800b812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b818:	f003 0310 	and.w	r3, r3, #16
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d00a      	beq.n	800b836 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	430a      	orrs	r2, r1
 800b834:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83a:	f003 0320 	and.w	r3, r3, #32
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00a      	beq.n	800b858 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	430a      	orrs	r2, r1
 800b856:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b860:	2b00      	cmp	r3, #0
 800b862:	d01a      	beq.n	800b89a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	430a      	orrs	r2, r1
 800b878:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b87e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b882:	d10a      	bne.n	800b89a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	430a      	orrs	r2, r1
 800b898:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00a      	beq.n	800b8bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	430a      	orrs	r2, r1
 800b8ba:	605a      	str	r2, [r3, #4]
  }
}
 800b8bc:	bf00      	nop
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b086      	sub	sp, #24
 800b8cc:	af02      	add	r7, sp, #8
 800b8ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b8d8:	f7f7 fee6 	bl	80036a8 <HAL_GetTick>
 800b8dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f003 0308 	and.w	r3, r3, #8
 800b8e8:	2b08      	cmp	r3, #8
 800b8ea:	d10e      	bne.n	800b90a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 f817 	bl	800b92e <UART_WaitOnFlagUntilTimeout>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d001      	beq.n	800b90a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b906:	2303      	movs	r3, #3
 800b908:	e00d      	b.n	800b926 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2220      	movs	r2, #32
 800b90e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2220      	movs	r2, #32
 800b914:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b924:	2300      	movs	r3, #0
}
 800b926:	4618      	mov	r0, r3
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b084      	sub	sp, #16
 800b932:	af00      	add	r7, sp, #0
 800b934:	60f8      	str	r0, [r7, #12]
 800b936:	60b9      	str	r1, [r7, #8]
 800b938:	603b      	str	r3, [r7, #0]
 800b93a:	4613      	mov	r3, r2
 800b93c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b93e:	e05e      	b.n	800b9fe <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b946:	d05a      	beq.n	800b9fe <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b948:	f7f7 feae 	bl	80036a8 <HAL_GetTick>
 800b94c:	4602      	mov	r2, r0
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	69ba      	ldr	r2, [r7, #24]
 800b954:	429a      	cmp	r2, r3
 800b956:	d302      	bcc.n	800b95e <UART_WaitOnFlagUntilTimeout+0x30>
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d11b      	bne.n	800b996 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b96c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	689a      	ldr	r2, [r3, #8]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f022 0201 	bic.w	r2, r2, #1
 800b97c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2220      	movs	r2, #32
 800b982:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2220      	movs	r2, #32
 800b988:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2200      	movs	r2, #0
 800b98e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b992:	2303      	movs	r3, #3
 800b994:	e043      	b.n	800ba1e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f003 0304 	and.w	r3, r3, #4
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d02c      	beq.n	800b9fe <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	69db      	ldr	r3, [r3, #28]
 800b9aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9b2:	d124      	bne.n	800b9fe <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b9cc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	689a      	ldr	r2, [r3, #8]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f022 0201 	bic.w	r2, r2, #1
 800b9dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2220      	movs	r2, #32
 800b9e2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2220      	movs	r2, #32
 800b9e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2220      	movs	r2, #32
 800b9ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b9fa:	2303      	movs	r3, #3
 800b9fc:	e00f      	b.n	800ba1e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	69da      	ldr	r2, [r3, #28]
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	4013      	ands	r3, r2
 800ba08:	68ba      	ldr	r2, [r7, #8]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	bf0c      	ite	eq
 800ba0e:	2301      	moveq	r3, #1
 800ba10:	2300      	movne	r3, #0
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	461a      	mov	r2, r3
 800ba16:	79fb      	ldrb	r3, [r7, #7]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d091      	beq.n	800b940 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba1c:	2300      	movs	r3, #0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
	...

0800ba28 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800ba36:	2300      	movs	r3, #0
 800ba38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d027      	beq.n	800ba92 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	4b2f      	ldr	r3, [pc, #188]	; (800bb08 <FMC_SDRAM_Init+0xe0>)
 800ba4c:	4013      	ands	r3, r2
 800ba4e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ba58:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800ba5e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800ba64:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800ba6a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800ba70:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800ba76:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800ba7c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ba82:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ba84:	68fa      	ldr	r2, [r7, #12]
 800ba86:	4313      	orrs	r3, r2
 800ba88:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	601a      	str	r2, [r3, #0]
 800ba90:	e032      	b.n	800baf8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ba9e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800baa8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800baae:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bab0:	68fa      	ldr	r2, [r7, #12]
 800bab2:	4313      	orrs	r3, r2
 800bab4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800babc:	68ba      	ldr	r2, [r7, #8]
 800babe:	4b12      	ldr	r3, [pc, #72]	; (800bb08 <FMC_SDRAM_Init+0xe0>)
 800bac0:	4013      	ands	r3, r2
 800bac2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bacc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800bad2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800bad8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800bade:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800bae4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bae6:	68ba      	ldr	r2, [r7, #8]
 800bae8:	4313      	orrs	r3, r2
 800baea:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	68fa      	ldr	r2, [r7, #12]
 800baf0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	68ba      	ldr	r2, [r7, #8]
 800baf6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800baf8:	2300      	movs	r3, #0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3714      	adds	r7, #20
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr
 800bb06:	bf00      	nop
 800bb08:	ffff8000 	.word	0xffff8000

0800bb0c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b087      	sub	sp, #28
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d02e      	beq.n	800bb84 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bb32:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bb42:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	3b01      	subs	r3, #1
 800bb4a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bb4c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	3b01      	subs	r3, #1
 800bb54:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bb56:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	691b      	ldr	r3, [r3, #16]
 800bb5c:	3b01      	subs	r3, #1
 800bb5e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bb60:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	695b      	ldr	r3, [r3, #20]
 800bb66:	3b01      	subs	r3, #1
 800bb68:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bb6a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	699b      	ldr	r3, [r3, #24]
 800bb70:	3b01      	subs	r3, #1
 800bb72:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bb74:	4313      	orrs	r3, r2
 800bb76:	697a      	ldr	r2, [r7, #20]
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	697a      	ldr	r2, [r7, #20]
 800bb80:	609a      	str	r2, [r3, #8]
 800bb82:	e039      	b.n	800bbf8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	689b      	ldr	r3, [r3, #8]
 800bb88:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800bb8a:	697a      	ldr	r2, [r7, #20]
 800bb8c:	4b1e      	ldr	r3, [pc, #120]	; (800bc08 <FMC_SDRAM_Timing_Init+0xfc>)
 800bb8e:	4013      	ands	r3, r2
 800bb90:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	3b01      	subs	r3, #1
 800bb98:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	695b      	ldr	r3, [r3, #20]
 800bb9e:	3b01      	subs	r3, #1
 800bba0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bba2:	4313      	orrs	r3, r2
 800bba4:	697a      	ldr	r2, [r7, #20]
 800bba6:	4313      	orrs	r3, r2
 800bba8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	68db      	ldr	r3, [r3, #12]
 800bbae:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bbb6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	3b01      	subs	r3, #1
 800bbc4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bbc6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	3b01      	subs	r3, #1
 800bbce:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bbd0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	691b      	ldr	r3, [r3, #16]
 800bbd6:	3b01      	subs	r3, #1
 800bbd8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bbda:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	699b      	ldr	r3, [r3, #24]
 800bbe0:	3b01      	subs	r3, #1
 800bbe2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	693a      	ldr	r2, [r7, #16]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	697a      	ldr	r2, [r7, #20]
 800bbf0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	693a      	ldr	r2, [r7, #16]
 800bbf6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	371c      	adds	r7, #28
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	ff0f0fff 	.word	0xff0f0fff

0800bc0c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bc0c:	b084      	sub	sp, #16
 800bc0e:	b480      	push	{r7}
 800bc10:	b085      	sub	sp, #20
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	f107 001c 	add.w	r0, r7, #28
 800bc1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bc22:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bc24:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bc26:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bc2a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bc2e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bc32:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bc36:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bc38:	68fa      	ldr	r2, [r7, #12]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	685a      	ldr	r2, [r3, #4]
 800bc42:	4b07      	ldr	r3, [pc, #28]	; (800bc60 <SDMMC_Init+0x54>)
 800bc44:	4013      	ands	r3, r2
 800bc46:	68fa      	ldr	r2, [r7, #12]
 800bc48:	431a      	orrs	r2, r3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bc4e:	2300      	movs	r3, #0
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3714      	adds	r7, #20
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	b004      	add	sp, #16
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop
 800bc60:	ffff8100 	.word	0xffff8100

0800bc64 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	370c      	adds	r7, #12
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr

0800bc7e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800bc7e:	b480      	push	{r7}
 800bc80:	b083      	sub	sp, #12
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
 800bc86:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bc92:	2300      	movs	r3, #0
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	370c      	adds	r7, #12
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2203      	movs	r2, #3
 800bcac:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bcae:	2002      	movs	r0, #2
 800bcb0:	f7f7 fd06 	bl	80036c0 <HAL_Delay>
  
  return HAL_OK;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}

0800bcbe <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	b083      	sub	sp, #12
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f003 0303 	and.w	r3, r3, #3
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	370c      	adds	r7, #12
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr
	...

0800bcdc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b085      	sub	sp, #20
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bce6:	2300      	movs	r3, #0
 800bce8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bcfa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bd00:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bd06:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bd08:	68fa      	ldr	r2, [r7, #12]
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	68da      	ldr	r2, [r3, #12]
 800bd12:	4b06      	ldr	r3, [pc, #24]	; (800bd2c <SDMMC_SendCommand+0x50>)
 800bd14:	4013      	ands	r3, r2
 800bd16:	68fa      	ldr	r2, [r7, #12]
 800bd18:	431a      	orrs	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3714      	adds	r7, #20
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr
 800bd2c:	fffff000 	.word	0xfffff000

0800bd30 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	691b      	ldr	r3, [r3, #16]
 800bd3c:	b2db      	uxtb	r3, r3
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	370c      	adds	r7, #12
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr

0800bd4a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bd4a:	b480      	push	{r7}
 800bd4c:	b085      	sub	sp, #20
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
 800bd52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	3314      	adds	r3, #20
 800bd58:	461a      	mov	r2, r3
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
}  
 800bd64:	4618      	mov	r0, r3
 800bd66:	3714      	adds	r7, #20
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	681a      	ldr	r2, [r3, #0]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	685a      	ldr	r2, [r3, #4]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bd96:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bd9c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bda2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	4313      	orrs	r3, r2
 800bda8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdae:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	431a      	orrs	r2, r3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bdba:	2300      	movs	r3, #0

}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3714      	adds	r7, #20
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b088      	sub	sp, #32
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bdd6:	2310      	movs	r3, #16
 800bdd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdda:	2340      	movs	r3, #64	; 0x40
 800bddc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdde:	2300      	movs	r3, #0
 800bde0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bde2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bde6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bde8:	f107 0308 	add.w	r3, r7, #8
 800bdec:	4619      	mov	r1, r3
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f7ff ff74 	bl	800bcdc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bdf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdf8:	2110      	movs	r1, #16
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 fa46 	bl	800c28c <SDMMC_GetCmdResp1>
 800be00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be02:	69fb      	ldr	r3, [r7, #28]
}
 800be04:	4618      	mov	r0, r3
 800be06:	3720      	adds	r7, #32
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b088      	sub	sp, #32
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800be1a:	2311      	movs	r3, #17
 800be1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be1e:	2340      	movs	r3, #64	; 0x40
 800be20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be22:	2300      	movs	r3, #0
 800be24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be2c:	f107 0308 	add.w	r3, r7, #8
 800be30:	4619      	mov	r1, r3
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff ff52 	bl	800bcdc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800be38:	f241 3288 	movw	r2, #5000	; 0x1388
 800be3c:	2111      	movs	r1, #17
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fa24 	bl	800c28c <SDMMC_GetCmdResp1>
 800be44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be46:	69fb      	ldr	r3, [r7, #28]
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3720      	adds	r7, #32
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b088      	sub	sp, #32
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800be5e:	2312      	movs	r3, #18
 800be60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be62:	2340      	movs	r3, #64	; 0x40
 800be64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be66:	2300      	movs	r3, #0
 800be68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be70:	f107 0308 	add.w	r3, r7, #8
 800be74:	4619      	mov	r1, r3
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f7ff ff30 	bl	800bcdc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800be7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800be80:	2112      	movs	r1, #18
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fa02 	bl	800c28c <SDMMC_GetCmdResp1>
 800be88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be8a:	69fb      	ldr	r3, [r7, #28]
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3720      	adds	r7, #32
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b088      	sub	sp, #32
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bea2:	2318      	movs	r3, #24
 800bea4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bea6:	2340      	movs	r3, #64	; 0x40
 800bea8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800beaa:	2300      	movs	r3, #0
 800beac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800beb4:	f107 0308 	add.w	r3, r7, #8
 800beb8:	4619      	mov	r1, r3
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f7ff ff0e 	bl	800bcdc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bec0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bec4:	2118      	movs	r1, #24
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 f9e0 	bl	800c28c <SDMMC_GetCmdResp1>
 800becc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bece:	69fb      	ldr	r3, [r7, #28]
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3720      	adds	r7, #32
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b088      	sub	sp, #32
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bee6:	2319      	movs	r3, #25
 800bee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800beea:	2340      	movs	r3, #64	; 0x40
 800beec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800beee:	2300      	movs	r3, #0
 800bef0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bef6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bef8:	f107 0308 	add.w	r3, r7, #8
 800befc:	4619      	mov	r1, r3
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f7ff feec 	bl	800bcdc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bf04:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf08:	2119      	movs	r1, #25
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 f9be 	bl	800c28c <SDMMC_GetCmdResp1>
 800bf10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf12:	69fb      	ldr	r3, [r7, #28]
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3720      	adds	r7, #32
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b088      	sub	sp, #32
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bf24:	2300      	movs	r3, #0
 800bf26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bf28:	230c      	movs	r3, #12
 800bf2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf2c:	2340      	movs	r3, #64	; 0x40
 800bf2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf30:	2300      	movs	r3, #0
 800bf32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf3a:	f107 0308 	add.w	r3, r7, #8
 800bf3e:	4619      	mov	r1, r3
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f7ff fecb 	bl	800bcdc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bf46:	4a05      	ldr	r2, [pc, #20]	; (800bf5c <SDMMC_CmdStopTransfer+0x40>)
 800bf48:	210c      	movs	r1, #12
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 f99e 	bl	800c28c <SDMMC_GetCmdResp1>
 800bf50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf52:	69fb      	ldr	r3, [r7, #28]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3720      	adds	r7, #32
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	05f5e100 	.word	0x05f5e100

0800bf60 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b08a      	sub	sp, #40	; 0x28
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bf70:	2307      	movs	r3, #7
 800bf72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf74:	2340      	movs	r3, #64	; 0x40
 800bf76:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf80:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf82:	f107 0310 	add.w	r3, r7, #16
 800bf86:	4619      	mov	r1, r3
 800bf88:	68f8      	ldr	r0, [r7, #12]
 800bf8a:	f7ff fea7 	bl	800bcdc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bf8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf92:	2107      	movs	r1, #7
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f000 f979 	bl	800c28c <SDMMC_GetCmdResp1>
 800bf9a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3728      	adds	r7, #40	; 0x28
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b088      	sub	sp, #32
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfc4:	f107 0308 	add.w	r3, r7, #8
 800bfc8:	4619      	mov	r1, r3
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f7ff fe86 	bl	800bcdc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 f92f 	bl	800c234 <SDMMC_GetCmdError>
 800bfd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfd8:	69fb      	ldr	r3, [r7, #28]
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3720      	adds	r7, #32
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b088      	sub	sp, #32
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bfea:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bfee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bff0:	2308      	movs	r3, #8
 800bff2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bff4:	2340      	movs	r3, #64	; 0x40
 800bff6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bff8:	2300      	movs	r3, #0
 800bffa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c000:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c002:	f107 0308 	add.w	r3, r7, #8
 800c006:	4619      	mov	r1, r3
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f7ff fe67 	bl	800bcdc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 fb26 	bl	800c660 <SDMMC_GetCmdResp7>
 800c014:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c016:	69fb      	ldr	r3, [r7, #28]
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3720      	adds	r7, #32
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b088      	sub	sp, #32
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c02e:	2337      	movs	r3, #55	; 0x37
 800c030:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c032:	2340      	movs	r3, #64	; 0x40
 800c034:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c036:	2300      	movs	r3, #0
 800c038:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c03a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c03e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c040:	f107 0308 	add.w	r3, r7, #8
 800c044:	4619      	mov	r1, r3
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f7ff fe48 	bl	800bcdc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c04c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c050:	2137      	movs	r1, #55	; 0x37
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 f91a 	bl	800c28c <SDMMC_GetCmdResp1>
 800c058:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c05a:	69fb      	ldr	r3, [r7, #28]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3720      	adds	r7, #32
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b088      	sub	sp, #32
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c06e:	683a      	ldr	r2, [r7, #0]
 800c070:	4b0d      	ldr	r3, [pc, #52]	; (800c0a8 <SDMMC_CmdAppOperCommand+0x44>)
 800c072:	4313      	orrs	r3, r2
 800c074:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c076:	2329      	movs	r3, #41	; 0x29
 800c078:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c07a:	2340      	movs	r3, #64	; 0x40
 800c07c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c07e:	2300      	movs	r3, #0
 800c080:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c086:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c088:	f107 0308 	add.w	r3, r7, #8
 800c08c:	4619      	mov	r1, r3
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f7ff fe24 	bl	800bcdc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 fa2f 	bl	800c4f8 <SDMMC_GetCmdResp3>
 800c09a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c09c:	69fb      	ldr	r3, [r7, #28]
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3720      	adds	r7, #32
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	80100000 	.word	0x80100000

0800c0ac <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b088      	sub	sp, #32
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c0ba:	2306      	movs	r3, #6
 800c0bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0be:	2340      	movs	r3, #64	; 0x40
 800c0c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0cc:	f107 0308 	add.w	r3, r7, #8
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f7ff fe02 	bl	800bcdc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c0d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0dc:	2106      	movs	r1, #6
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 f8d4 	bl	800c28c <SDMMC_GetCmdResp1>
 800c0e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0e6:	69fb      	ldr	r3, [r7, #28]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3720      	adds	r7, #32
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b088      	sub	sp, #32
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c0fc:	2333      	movs	r3, #51	; 0x33
 800c0fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c100:	2340      	movs	r3, #64	; 0x40
 800c102:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c104:	2300      	movs	r3, #0
 800c106:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c10c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c10e:	f107 0308 	add.w	r3, r7, #8
 800c112:	4619      	mov	r1, r3
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f7ff fde1 	bl	800bcdc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c11a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c11e:	2133      	movs	r1, #51	; 0x33
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 f8b3 	bl	800c28c <SDMMC_GetCmdResp1>
 800c126:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c128:	69fb      	ldr	r3, [r7, #28]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3720      	adds	r7, #32
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b088      	sub	sp, #32
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c13a:	2300      	movs	r3, #0
 800c13c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c13e:	2302      	movs	r3, #2
 800c140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c142:	23c0      	movs	r3, #192	; 0xc0
 800c144:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c146:	2300      	movs	r3, #0
 800c148:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c14a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c14e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c150:	f107 0308 	add.w	r3, r7, #8
 800c154:	4619      	mov	r1, r3
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f7ff fdc0 	bl	800bcdc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f000 f983 	bl	800c468 <SDMMC_GetCmdResp2>
 800c162:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c164:	69fb      	ldr	r3, [r7, #28]
}
 800c166:	4618      	mov	r0, r3
 800c168:	3720      	adds	r7, #32
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c16e:	b580      	push	{r7, lr}
 800c170:	b088      	sub	sp, #32
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
 800c176:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c17c:	2309      	movs	r3, #9
 800c17e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c180:	23c0      	movs	r3, #192	; 0xc0
 800c182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c184:	2300      	movs	r3, #0
 800c186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c18c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c18e:	f107 0308 	add.w	r3, r7, #8
 800c192:	4619      	mov	r1, r3
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f7ff fda1 	bl	800bcdc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 f964 	bl	800c468 <SDMMC_GetCmdResp2>
 800c1a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1a2:	69fb      	ldr	r3, [r7, #28]
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3720      	adds	r7, #32
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b088      	sub	sp, #32
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c1ba:	2303      	movs	r3, #3
 800c1bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1be:	2340      	movs	r3, #64	; 0x40
 800c1c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1cc:	f107 0308 	add.w	r3, r7, #8
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f7ff fd82 	bl	800bcdc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c1d8:	683a      	ldr	r2, [r7, #0]
 800c1da:	2103      	movs	r1, #3
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 f9c9 	bl	800c574 <SDMMC_GetCmdResp6>
 800c1e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1e4:	69fb      	ldr	r3, [r7, #28]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3720      	adds	r7, #32
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b088      	sub	sp, #32
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c1fc:	230d      	movs	r3, #13
 800c1fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c200:	2340      	movs	r3, #64	; 0x40
 800c202:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c204:	2300      	movs	r3, #0
 800c206:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c20c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c20e:	f107 0308 	add.w	r3, r7, #8
 800c212:	4619      	mov	r1, r3
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f7ff fd61 	bl	800bcdc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c21a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c21e:	210d      	movs	r1, #13
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 f833 	bl	800c28c <SDMMC_GetCmdResp1>
 800c226:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c228:	69fb      	ldr	r3, [r7, #28]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3720      	adds	r7, #32
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
	...

0800c234 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c234:	b480      	push	{r7}
 800c236:	b085      	sub	sp, #20
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c23c:	4b11      	ldr	r3, [pc, #68]	; (800c284 <SDMMC_GetCmdError+0x50>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a11      	ldr	r2, [pc, #68]	; (800c288 <SDMMC_GetCmdError+0x54>)
 800c242:	fba2 2303 	umull	r2, r3, r2, r3
 800c246:	0a5b      	lsrs	r3, r3, #9
 800c248:	f241 3288 	movw	r2, #5000	; 0x1388
 800c24c:	fb02 f303 	mul.w	r3, r2, r3
 800c250:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	1e5a      	subs	r2, r3, #1
 800c256:	60fa      	str	r2, [r7, #12]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d102      	bne.n	800c262 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c25c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c260:	e009      	b.n	800c276 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d0f1      	beq.n	800c252 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	22c5      	movs	r2, #197	; 0xc5
 800c272:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c274:	2300      	movs	r3, #0
}
 800c276:	4618      	mov	r0, r3
 800c278:	3714      	adds	r7, #20
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	20000000 	.word	0x20000000
 800c288:	10624dd3 	.word	0x10624dd3

0800c28c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b088      	sub	sp, #32
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	460b      	mov	r3, r1
 800c296:	607a      	str	r2, [r7, #4]
 800c298:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c29a:	4b70      	ldr	r3, [pc, #448]	; (800c45c <SDMMC_GetCmdResp1+0x1d0>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a70      	ldr	r2, [pc, #448]	; (800c460 <SDMMC_GetCmdResp1+0x1d4>)
 800c2a0:	fba2 2303 	umull	r2, r3, r2, r3
 800c2a4:	0a5a      	lsrs	r2, r3, #9
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	fb02 f303 	mul.w	r3, r2, r3
 800c2ac:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	1e5a      	subs	r2, r3, #1
 800c2b2:	61fa      	str	r2, [r7, #28]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d102      	bne.n	800c2be <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c2b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c2bc:	e0c9      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2c2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d0ef      	beq.n	800c2ae <SDMMC_GetCmdResp1+0x22>
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d1ea      	bne.n	800c2ae <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2dc:	f003 0304 	and.w	r3, r3, #4
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d004      	beq.n	800c2ee <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2204      	movs	r2, #4
 800c2e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2ea:	2304      	movs	r3, #4
 800c2ec:	e0b1      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2f2:	f003 0301 	and.w	r3, r3, #1
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d004      	beq.n	800c304 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c300:	2301      	movs	r3, #1
 800c302:	e0a6      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	22c5      	movs	r2, #197	; 0xc5
 800c308:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	f7ff fd10 	bl	800bd30 <SDMMC_GetCommandResponse>
 800c310:	4603      	mov	r3, r0
 800c312:	461a      	mov	r2, r3
 800c314:	7afb      	ldrb	r3, [r7, #11]
 800c316:	4293      	cmp	r3, r2
 800c318:	d001      	beq.n	800c31e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c31a:	2301      	movs	r3, #1
 800c31c:	e099      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c31e:	2100      	movs	r1, #0
 800c320:	68f8      	ldr	r0, [r7, #12]
 800c322:	f7ff fd12 	bl	800bd4a <SDMMC_GetResponse>
 800c326:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c328:	697a      	ldr	r2, [r7, #20]
 800c32a:	4b4e      	ldr	r3, [pc, #312]	; (800c464 <SDMMC_GetCmdResp1+0x1d8>)
 800c32c:	4013      	ands	r3, r2
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d101      	bne.n	800c336 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c332:	2300      	movs	r3, #0
 800c334:	e08d      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	da02      	bge.n	800c342 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c33c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c340:	e087      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d001      	beq.n	800c350 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c34c:	2340      	movs	r3, #64	; 0x40
 800c34e:	e080      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c356:	2b00      	cmp	r3, #0
 800c358:	d001      	beq.n	800c35e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c35a:	2380      	movs	r3, #128	; 0x80
 800c35c:	e079      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c364:	2b00      	cmp	r3, #0
 800c366:	d002      	beq.n	800c36e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c36c:	e071      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c374:	2b00      	cmp	r3, #0
 800c376:	d002      	beq.n	800c37e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c37c:	e069      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c384:	2b00      	cmp	r3, #0
 800c386:	d002      	beq.n	800c38e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c38c:	e061      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c394:	2b00      	cmp	r3, #0
 800c396:	d002      	beq.n	800c39e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c398:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c39c:	e059      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d002      	beq.n	800c3ae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3ac:	e051      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d002      	beq.n	800c3be <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c3b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c3bc:	e049      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d002      	beq.n	800c3ce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c3c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c3cc:	e041      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d002      	beq.n	800c3de <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c3d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3dc:	e039      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d002      	beq.n	800c3ee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c3e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c3ec:	e031      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d002      	beq.n	800c3fe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c3f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c3fc:	e029      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c404:	2b00      	cmp	r3, #0
 800c406:	d002      	beq.n	800c40e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c408:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c40c:	e021      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c414:	2b00      	cmp	r3, #0
 800c416:	d002      	beq.n	800c41e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c418:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c41c:	e019      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c424:	2b00      	cmp	r3, #0
 800c426:	d002      	beq.n	800c42e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c428:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c42c:	e011      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c438:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c43c:	e009      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	f003 0308 	and.w	r3, r3, #8
 800c444:	2b00      	cmp	r3, #0
 800c446:	d002      	beq.n	800c44e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c448:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c44c:	e001      	b.n	800c452 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c44e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c452:	4618      	mov	r0, r3
 800c454:	3720      	adds	r7, #32
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	20000000 	.word	0x20000000
 800c460:	10624dd3 	.word	0x10624dd3
 800c464:	fdffe008 	.word	0xfdffe008

0800c468 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c468:	b480      	push	{r7}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c470:	4b1f      	ldr	r3, [pc, #124]	; (800c4f0 <SDMMC_GetCmdResp2+0x88>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a1f      	ldr	r2, [pc, #124]	; (800c4f4 <SDMMC_GetCmdResp2+0x8c>)
 800c476:	fba2 2303 	umull	r2, r3, r2, r3
 800c47a:	0a5b      	lsrs	r3, r3, #9
 800c47c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c480:	fb02 f303 	mul.w	r3, r2, r3
 800c484:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	1e5a      	subs	r2, r3, #1
 800c48a:	60fa      	str	r2, [r7, #12]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d102      	bne.n	800c496 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c490:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c494:	e026      	b.n	800c4e4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c49a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d0ef      	beq.n	800c486 <SDMMC_GetCmdResp2+0x1e>
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d1ea      	bne.n	800c486 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4b4:	f003 0304 	and.w	r3, r3, #4
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d004      	beq.n	800c4c6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2204      	movs	r2, #4
 800c4c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c4c2:	2304      	movs	r3, #4
 800c4c4:	e00e      	b.n	800c4e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ca:	f003 0301 	and.w	r3, r3, #1
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d004      	beq.n	800c4dc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c4d8:	2301      	movs	r3, #1
 800c4da:	e003      	b.n	800c4e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	22c5      	movs	r2, #197	; 0xc5
 800c4e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c4e2:	2300      	movs	r3, #0
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3714      	adds	r7, #20
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr
 800c4f0:	20000000 	.word	0x20000000
 800c4f4:	10624dd3 	.word	0x10624dd3

0800c4f8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b085      	sub	sp, #20
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c500:	4b1a      	ldr	r3, [pc, #104]	; (800c56c <SDMMC_GetCmdResp3+0x74>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a1a      	ldr	r2, [pc, #104]	; (800c570 <SDMMC_GetCmdResp3+0x78>)
 800c506:	fba2 2303 	umull	r2, r3, r2, r3
 800c50a:	0a5b      	lsrs	r3, r3, #9
 800c50c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c510:	fb02 f303 	mul.w	r3, r2, r3
 800c514:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	1e5a      	subs	r2, r3, #1
 800c51a:	60fa      	str	r2, [r7, #12]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d102      	bne.n	800c526 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c520:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c524:	e01b      	b.n	800c55e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c52a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c532:	2b00      	cmp	r3, #0
 800c534:	d0ef      	beq.n	800c516 <SDMMC_GetCmdResp3+0x1e>
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d1ea      	bne.n	800c516 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c544:	f003 0304 	and.w	r3, r3, #4
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d004      	beq.n	800c556 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2204      	movs	r2, #4
 800c550:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c552:	2304      	movs	r3, #4
 800c554:	e003      	b.n	800c55e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	22c5      	movs	r2, #197	; 0xc5
 800c55a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3714      	adds	r7, #20
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr
 800c56a:	bf00      	nop
 800c56c:	20000000 	.word	0x20000000
 800c570:	10624dd3 	.word	0x10624dd3

0800c574 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b088      	sub	sp, #32
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	460b      	mov	r3, r1
 800c57e:	607a      	str	r2, [r7, #4]
 800c580:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c582:	4b35      	ldr	r3, [pc, #212]	; (800c658 <SDMMC_GetCmdResp6+0xe4>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a35      	ldr	r2, [pc, #212]	; (800c65c <SDMMC_GetCmdResp6+0xe8>)
 800c588:	fba2 2303 	umull	r2, r3, r2, r3
 800c58c:	0a5b      	lsrs	r3, r3, #9
 800c58e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c592:	fb02 f303 	mul.w	r3, r2, r3
 800c596:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c598:	69fb      	ldr	r3, [r7, #28]
 800c59a:	1e5a      	subs	r2, r3, #1
 800c59c:	61fa      	str	r2, [r7, #28]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d102      	bne.n	800c5a8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c5a6:	e052      	b.n	800c64e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5ac:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5ae:	69bb      	ldr	r3, [r7, #24]
 800c5b0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d0ef      	beq.n	800c598 <SDMMC_GetCmdResp6+0x24>
 800c5b8:	69bb      	ldr	r3, [r7, #24]
 800c5ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d1ea      	bne.n	800c598 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5c6:	f003 0304 	and.w	r3, r3, #4
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d004      	beq.n	800c5d8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2204      	movs	r2, #4
 800c5d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5d4:	2304      	movs	r3, #4
 800c5d6:	e03a      	b.n	800c64e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5dc:	f003 0301 	and.w	r3, r3, #1
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d004      	beq.n	800c5ee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	e02f      	b.n	800c64e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c5ee:	68f8      	ldr	r0, [r7, #12]
 800c5f0:	f7ff fb9e 	bl	800bd30 <SDMMC_GetCommandResponse>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	7afb      	ldrb	r3, [r7, #11]
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d001      	beq.n	800c602 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c5fe:	2301      	movs	r3, #1
 800c600:	e025      	b.n	800c64e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	22c5      	movs	r2, #197	; 0xc5
 800c606:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c608:	2100      	movs	r1, #0
 800c60a:	68f8      	ldr	r0, [r7, #12]
 800c60c:	f7ff fb9d 	bl	800bd4a <SDMMC_GetResponse>
 800c610:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d106      	bne.n	800c62a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	0c1b      	lsrs	r3, r3, #16
 800c620:	b29a      	uxth	r2, r3
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c626:	2300      	movs	r3, #0
 800c628:	e011      	b.n	800c64e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c630:	2b00      	cmp	r3, #0
 800c632:	d002      	beq.n	800c63a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c634:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c638:	e009      	b.n	800c64e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c640:	2b00      	cmp	r3, #0
 800c642:	d002      	beq.n	800c64a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c648:	e001      	b.n	800c64e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c64a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3720      	adds	r7, #32
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	20000000 	.word	0x20000000
 800c65c:	10624dd3 	.word	0x10624dd3

0800c660 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c660:	b480      	push	{r7}
 800c662:	b085      	sub	sp, #20
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c668:	4b22      	ldr	r3, [pc, #136]	; (800c6f4 <SDMMC_GetCmdResp7+0x94>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4a22      	ldr	r2, [pc, #136]	; (800c6f8 <SDMMC_GetCmdResp7+0x98>)
 800c66e:	fba2 2303 	umull	r2, r3, r2, r3
 800c672:	0a5b      	lsrs	r3, r3, #9
 800c674:	f241 3288 	movw	r2, #5000	; 0x1388
 800c678:	fb02 f303 	mul.w	r3, r2, r3
 800c67c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	1e5a      	subs	r2, r3, #1
 800c682:	60fa      	str	r2, [r7, #12]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d102      	bne.n	800c68e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c688:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c68c:	e02c      	b.n	800c6e8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c692:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d0ef      	beq.n	800c67e <SDMMC_GetCmdResp7+0x1e>
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d1ea      	bne.n	800c67e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6ac:	f003 0304 	and.w	r3, r3, #4
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d004      	beq.n	800c6be <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2204      	movs	r2, #4
 800c6b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c6ba:	2304      	movs	r3, #4
 800c6bc:	e014      	b.n	800c6e8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6c2:	f003 0301 	and.w	r3, r3, #1
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d004      	beq.n	800c6d4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e009      	b.n	800c6e8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d002      	beq.n	800c6e6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2240      	movs	r2, #64	; 0x40
 800c6e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c6e6:	2300      	movs	r3, #0
  
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3714      	adds	r7, #20
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr
 800c6f4:	20000000 	.word	0x20000000
 800c6f8:	10624dd3 	.word	0x10624dd3

0800c6fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c6fc:	b084      	sub	sp, #16
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b084      	sub	sp, #16
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	f107 001c 	add.w	r0, r7, #28
 800c70a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c710:	2b01      	cmp	r3, #1
 800c712:	d120      	bne.n	800c756 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c718:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	68da      	ldr	r2, [r3, #12]
 800c724:	4b20      	ldr	r3, [pc, #128]	; (800c7a8 <USB_CoreInit+0xac>)
 800c726:	4013      	ands	r3, r2
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d105      	bne.n	800c74a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	68db      	ldr	r3, [r3, #12]
 800c742:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 f942 	bl	800c9d4 <USB_CoreReset>
 800c750:	4603      	mov	r3, r0
 800c752:	73fb      	strb	r3, [r7, #15]
 800c754:	e010      	b.n	800c778 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 f936 	bl	800c9d4 <USB_CoreReset>
 800c768:	4603      	mov	r3, r0
 800c76a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c770:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800c778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d10b      	bne.n	800c796 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	f043 0206 	orr.w	r2, r3, #6
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	f043 0220 	orr.w	r2, r3, #32
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c796:	7bfb      	ldrb	r3, [r7, #15]
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3710      	adds	r7, #16
 800c79c:	46bd      	mov	sp, r7
 800c79e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c7a2:	b004      	add	sp, #16
 800c7a4:	4770      	bx	lr
 800c7a6:	bf00      	nop
 800c7a8:	ffbdffbf 	.word	0xffbdffbf

0800c7ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b083      	sub	sp, #12
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	f043 0201 	orr.w	r2, r3, #1
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7c0:	2300      	movs	r3, #0
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	370c      	adds	r7, #12
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr

0800c7ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7ce:	b480      	push	{r7}
 800c7d0:	b083      	sub	sp, #12
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	f023 0201 	bic.w	r2, r3, #1
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7e2:	2300      	movs	r3, #0
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	370c      	adds	r7, #12
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c808:	78fb      	ldrb	r3, [r7, #3]
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d106      	bne.n	800c81c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	68db      	ldr	r3, [r3, #12]
 800c812:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	60da      	str	r2, [r3, #12]
 800c81a:	e00b      	b.n	800c834 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c81c:	78fb      	ldrb	r3, [r7, #3]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d106      	bne.n	800c830 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	60da      	str	r2, [r3, #12]
 800c82e:	e001      	b.n	800c834 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c830:	2301      	movs	r3, #1
 800c832:	e003      	b.n	800c83c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c834:	2032      	movs	r0, #50	; 0x32
 800c836:	f7f6 ff43 	bl	80036c0 <HAL_Delay>

  return HAL_OK;
 800c83a:	2300      	movs	r3, #0
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c844:	b480      	push	{r7}
 800c846:	b085      	sub	sp, #20
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c84e:	2300      	movs	r3, #0
 800c850:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	019b      	lsls	r3, r3, #6
 800c856:	f043 0220 	orr.w	r2, r3, #32
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	3301      	adds	r3, #1
 800c862:	60fb      	str	r3, [r7, #12]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	4a09      	ldr	r2, [pc, #36]	; (800c88c <USB_FlushTxFifo+0x48>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d901      	bls.n	800c870 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c86c:	2303      	movs	r3, #3
 800c86e:	e006      	b.n	800c87e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	691b      	ldr	r3, [r3, #16]
 800c874:	f003 0320 	and.w	r3, r3, #32
 800c878:	2b20      	cmp	r3, #32
 800c87a:	d0f0      	beq.n	800c85e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c87c:	2300      	movs	r3, #0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3714      	adds	r7, #20
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr
 800c88a:	bf00      	nop
 800c88c:	00030d40 	.word	0x00030d40

0800c890 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c898:	2300      	movs	r3, #0
 800c89a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2210      	movs	r2, #16
 800c8a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	60fb      	str	r3, [r7, #12]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	4a09      	ldr	r2, [pc, #36]	; (800c8d0 <USB_FlushRxFifo+0x40>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d901      	bls.n	800c8b4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c8b0:	2303      	movs	r3, #3
 800c8b2:	e006      	b.n	800c8c2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	691b      	ldr	r3, [r3, #16]
 800c8b8:	f003 0310 	and.w	r3, r3, #16
 800c8bc:	2b10      	cmp	r3, #16
 800c8be:	d0f0      	beq.n	800c8a2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c8c0:	2300      	movs	r3, #0
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3714      	adds	r7, #20
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop
 800c8d0:	00030d40 	.word	0x00030d40

0800c8d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b089      	sub	sp, #36	; 0x24
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	4611      	mov	r1, r2
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	71fb      	strb	r3, [r7, #7]
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c8f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d11a      	bne.n	800c930 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c8fa:	88bb      	ldrh	r3, [r7, #4]
 800c8fc:	3303      	adds	r3, #3
 800c8fe:	089b      	lsrs	r3, r3, #2
 800c900:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c902:	2300      	movs	r3, #0
 800c904:	61bb      	str	r3, [r7, #24]
 800c906:	e00f      	b.n	800c928 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c908:	79fb      	ldrb	r3, [r7, #7]
 800c90a:	031a      	lsls	r2, r3, #12
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	4413      	add	r3, r2
 800c910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c914:	461a      	mov	r2, r3
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c91c:	69fb      	ldr	r3, [r7, #28]
 800c91e:	3304      	adds	r3, #4
 800c920:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	3301      	adds	r3, #1
 800c926:	61bb      	str	r3, [r7, #24]
 800c928:	69ba      	ldr	r2, [r7, #24]
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d3eb      	bcc.n	800c908 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c930:	2300      	movs	r3, #0
}
 800c932:	4618      	mov	r0, r3
 800c934:	3724      	adds	r7, #36	; 0x24
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr

0800c93e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c93e:	b480      	push	{r7}
 800c940:	b089      	sub	sp, #36	; 0x24
 800c942:	af00      	add	r7, sp, #0
 800c944:	60f8      	str	r0, [r7, #12]
 800c946:	60b9      	str	r1, [r7, #8]
 800c948:	4613      	mov	r3, r2
 800c94a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c954:	88fb      	ldrh	r3, [r7, #6]
 800c956:	3303      	adds	r3, #3
 800c958:	089b      	lsrs	r3, r3, #2
 800c95a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c95c:	2300      	movs	r3, #0
 800c95e:	61bb      	str	r3, [r7, #24]
 800c960:	e00b      	b.n	800c97a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	601a      	str	r2, [r3, #0]
    pDest++;
 800c96e:	69fb      	ldr	r3, [r7, #28]
 800c970:	3304      	adds	r3, #4
 800c972:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	3301      	adds	r3, #1
 800c978:	61bb      	str	r3, [r7, #24]
 800c97a:	69ba      	ldr	r2, [r7, #24]
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	429a      	cmp	r2, r3
 800c980:	d3ef      	bcc.n	800c962 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c982:	69fb      	ldr	r3, [r7, #28]
}
 800c984:	4618      	mov	r0, r3
 800c986:	3724      	adds	r7, #36	; 0x24
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c990:	b480      	push	{r7}
 800c992:	b085      	sub	sp, #20
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	695b      	ldr	r3, [r3, #20]
 800c99c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	699b      	ldr	r3, [r3, #24]
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	4013      	ands	r3, r2
 800c9a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3714      	adds	r7, #20
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr

0800c9b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c9b6:	b480      	push	{r7}
 800c9b8:	b083      	sub	sp, #12
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	695b      	ldr	r3, [r3, #20]
 800c9c2:	f003 0301 	and.w	r3, r3, #1
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	370c      	adds	r7, #12
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr
	...

0800c9d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b085      	sub	sp, #20
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	60fb      	str	r3, [r7, #12]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	4a13      	ldr	r2, [pc, #76]	; (800ca38 <USB_CoreReset+0x64>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d901      	bls.n	800c9f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c9ee:	2303      	movs	r3, #3
 800c9f0:	e01b      	b.n	800ca2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	691b      	ldr	r3, [r3, #16]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	daf2      	bge.n	800c9e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	691b      	ldr	r3, [r3, #16]
 800ca02:	f043 0201 	orr.w	r2, r3, #1
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	60fb      	str	r3, [r7, #12]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	4a09      	ldr	r2, [pc, #36]	; (800ca38 <USB_CoreReset+0x64>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d901      	bls.n	800ca1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ca18:	2303      	movs	r3, #3
 800ca1a:	e006      	b.n	800ca2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	691b      	ldr	r3, [r3, #16]
 800ca20:	f003 0301 	and.w	r3, r3, #1
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d0f0      	beq.n	800ca0a <USB_CoreReset+0x36>

  return HAL_OK;
 800ca28:	2300      	movs	r3, #0
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3714      	adds	r7, #20
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr
 800ca36:	bf00      	nop
 800ca38:	00030d40 	.word	0x00030d40

0800ca3c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca3c:	b084      	sub	sp, #16
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b084      	sub	sp, #16
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
 800ca46:	f107 001c 	add.w	r0, r7, #28
 800ca4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca58:	461a      	mov	r2, r3
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca62:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d018      	beq.n	800caa8 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800ca76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d10a      	bne.n	800ca92 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	68ba      	ldr	r2, [r7, #8]
 800ca86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ca8a:	f043 0304 	orr.w	r3, r3, #4
 800ca8e:	6013      	str	r3, [r2, #0]
 800ca90:	e014      	b.n	800cabc <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	68ba      	ldr	r2, [r7, #8]
 800ca9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800caa0:	f023 0304 	bic.w	r3, r3, #4
 800caa4:	6013      	str	r3, [r2, #0]
 800caa6:	e009      	b.n	800cabc <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	68ba      	ldr	r2, [r7, #8]
 800cab2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cab6:	f023 0304 	bic.w	r3, r3, #4
 800caba:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800cabc:	2110      	movs	r1, #16
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f7ff fec0 	bl	800c844 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f7ff fee3 	bl	800c890 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800caca:	2300      	movs	r3, #0
 800cacc:	60fb      	str	r3, [r7, #12]
 800cace:	e015      	b.n	800cafc <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	015a      	lsls	r2, r3, #5
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	4413      	add	r3, r2
 800cad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cadc:	461a      	mov	r2, r3
 800cade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cae2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	015a      	lsls	r2, r3, #5
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	4413      	add	r3, r2
 800caec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800caf0:	461a      	mov	r2, r3
 800caf2:	2300      	movs	r3, #0
 800caf4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	3301      	adds	r3, #1
 800cafa:	60fb      	str	r3, [r7, #12]
 800cafc:	6a3b      	ldr	r3, [r7, #32]
 800cafe:	68fa      	ldr	r2, [r7, #12]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d3e5      	bcc.n	800cad0 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800cb04:	2101      	movs	r1, #1
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 f8ac 	bl	800cc64 <USB_DriveVbus>

  HAL_Delay(200U);
 800cb0c:	20c8      	movs	r0, #200	; 0xc8
 800cb0e:	f7f6 fdd7 	bl	80036c0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2200      	movs	r2, #0
 800cb16:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb1e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d00b      	beq.n	800cb44 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb32:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a14      	ldr	r2, [pc, #80]	; (800cb88 <USB_HostInit+0x14c>)
 800cb38:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	4a13      	ldr	r2, [pc, #76]	; (800cb8c <USB_HostInit+0x150>)
 800cb3e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800cb42:	e009      	b.n	800cb58 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2280      	movs	r2, #128	; 0x80
 800cb48:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	4a10      	ldr	r2, [pc, #64]	; (800cb90 <USB_HostInit+0x154>)
 800cb4e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	4a10      	ldr	r2, [pc, #64]	; (800cb94 <USB_HostInit+0x158>)
 800cb54:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d105      	bne.n	800cb6a <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	699b      	ldr	r3, [r3, #24]
 800cb62:	f043 0210 	orr.w	r2, r3, #16
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	699a      	ldr	r2, [r3, #24]
 800cb6e:	4b0a      	ldr	r3, [pc, #40]	; (800cb98 <USB_HostInit+0x15c>)
 800cb70:	4313      	orrs	r3, r2
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3710      	adds	r7, #16
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb82:	b004      	add	sp, #16
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	01000200 	.word	0x01000200
 800cb8c:	00e00300 	.word	0x00e00300
 800cb90:	00600080 	.word	0x00600080
 800cb94:	004000e0 	.word	0x004000e0
 800cb98:	a3200008 	.word	0xa3200008

0800cb9c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b085      	sub	sp, #20
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	460b      	mov	r3, r1
 800cba6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cbba:	f023 0303 	bic.w	r3, r3, #3
 800cbbe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbc6:	681a      	ldr	r2, [r3, #0]
 800cbc8:	78fb      	ldrb	r3, [r7, #3]
 800cbca:	f003 0303 	and.w	r3, r3, #3
 800cbce:	68f9      	ldr	r1, [r7, #12]
 800cbd0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800cbd8:	78fb      	ldrb	r3, [r7, #3]
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d107      	bne.n	800cbee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800cbea:	6053      	str	r3, [r2, #4]
 800cbec:	e009      	b.n	800cc02 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800cbee:	78fb      	ldrb	r3, [r7, #3]
 800cbf0:	2b02      	cmp	r3, #2
 800cbf2:	d106      	bne.n	800cc02 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	f241 7370 	movw	r3, #6000	; 0x1770
 800cc00:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800cc02:	2300      	movs	r3, #0
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3714      	adds	r7, #20
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cc30:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	68fa      	ldr	r2, [r7, #12]
 800cc36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cc3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc3e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800cc40:	2064      	movs	r0, #100	; 0x64
 800cc42:	f7f6 fd3d 	bl	80036c0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	68fa      	ldr	r2, [r7, #12]
 800cc4a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cc4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc52:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800cc54:	200a      	movs	r0, #10
 800cc56:	f7f6 fd33 	bl	80036c0 <HAL_Delay>

  return HAL_OK;
 800cc5a:	2300      	movs	r3, #0
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3710      	adds	r7, #16
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}

0800cc64 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b085      	sub	sp, #20
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cc74:	2300      	movs	r3, #0
 800cc76:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cc88:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d109      	bne.n	800cca8 <USB_DriveVbus+0x44>
 800cc94:	78fb      	ldrb	r3, [r7, #3]
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d106      	bne.n	800cca8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	68fa      	ldr	r2, [r7, #12]
 800cc9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cca2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cca6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ccae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccb2:	d109      	bne.n	800ccc8 <USB_DriveVbus+0x64>
 800ccb4:	78fb      	ldrb	r3, [r7, #3]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d106      	bne.n	800ccc8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	68fa      	ldr	r2, [r7, #12]
 800ccbe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ccc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ccc6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ccc8:	2300      	movs	r3, #0
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3714      	adds	r7, #20
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr

0800ccd6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ccd6:	b480      	push	{r7}
 800ccd8:	b085      	sub	sp, #20
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cce2:	2300      	movs	r3, #0
 800cce4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	0c5b      	lsrs	r3, r3, #17
 800ccf4:	f003 0303 	and.w	r3, r3, #3
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3714      	adds	r7, #20
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b085      	sub	sp, #20
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd16:	689b      	ldr	r3, [r3, #8]
 800cd18:	b29b      	uxth	r3, r3
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3714      	adds	r7, #20
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd24:	4770      	bx	lr
	...

0800cd28 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b088      	sub	sp, #32
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	4608      	mov	r0, r1
 800cd32:	4611      	mov	r1, r2
 800cd34:	461a      	mov	r2, r3
 800cd36:	4603      	mov	r3, r0
 800cd38:	70fb      	strb	r3, [r7, #3]
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	70bb      	strb	r3, [r7, #2]
 800cd3e:	4613      	mov	r3, r2
 800cd40:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800cd42:	2300      	movs	r3, #0
 800cd44:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800cd4a:	78fb      	ldrb	r3, [r7, #3]
 800cd4c:	015a      	lsls	r2, r3, #5
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	4413      	add	r3, r2
 800cd52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd56:	461a      	mov	r2, r3
 800cd58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd5c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800cd5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cd62:	2b03      	cmp	r3, #3
 800cd64:	d87e      	bhi.n	800ce64 <USB_HC_Init+0x13c>
 800cd66:	a201      	add	r2, pc, #4	; (adr r2, 800cd6c <USB_HC_Init+0x44>)
 800cd68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd6c:	0800cd7d 	.word	0x0800cd7d
 800cd70:	0800ce27 	.word	0x0800ce27
 800cd74:	0800cd7d 	.word	0x0800cd7d
 800cd78:	0800cde9 	.word	0x0800cde9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cd7c:	78fb      	ldrb	r3, [r7, #3]
 800cd7e:	015a      	lsls	r2, r3, #5
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	4413      	add	r3, r2
 800cd84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd88:	461a      	mov	r2, r3
 800cd8a:	f240 439d 	movw	r3, #1181	; 0x49d
 800cd8e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800cd90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	da10      	bge.n	800cdba <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800cd98:	78fb      	ldrb	r3, [r7, #3]
 800cd9a:	015a      	lsls	r2, r3, #5
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	4413      	add	r3, r2
 800cda0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cda4:	68db      	ldr	r3, [r3, #12]
 800cda6:	78fa      	ldrb	r2, [r7, #3]
 800cda8:	0151      	lsls	r1, r2, #5
 800cdaa:	693a      	ldr	r2, [r7, #16]
 800cdac:	440a      	add	r2, r1
 800cdae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cdb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cdb6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800cdb8:	e057      	b.n	800ce6a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d051      	beq.n	800ce6a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800cdc6:	78fb      	ldrb	r3, [r7, #3]
 800cdc8:	015a      	lsls	r2, r3, #5
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	4413      	add	r3, r2
 800cdce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	78fa      	ldrb	r2, [r7, #3]
 800cdd6:	0151      	lsls	r1, r2, #5
 800cdd8:	693a      	ldr	r2, [r7, #16]
 800cdda:	440a      	add	r2, r1
 800cddc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cde0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cde4:	60d3      	str	r3, [r2, #12]
      break;
 800cde6:	e040      	b.n	800ce6a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cde8:	78fb      	ldrb	r3, [r7, #3]
 800cdea:	015a      	lsls	r2, r3, #5
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	4413      	add	r3, r2
 800cdf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	f240 639d 	movw	r3, #1693	; 0x69d
 800cdfa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800cdfc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	da34      	bge.n	800ce6e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ce04:	78fb      	ldrb	r3, [r7, #3]
 800ce06:	015a      	lsls	r2, r3, #5
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	4413      	add	r3, r2
 800ce0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	78fa      	ldrb	r2, [r7, #3]
 800ce14:	0151      	lsls	r1, r2, #5
 800ce16:	693a      	ldr	r2, [r7, #16]
 800ce18:	440a      	add	r2, r1
 800ce1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce22:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ce24:	e023      	b.n	800ce6e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ce26:	78fb      	ldrb	r3, [r7, #3]
 800ce28:	015a      	lsls	r2, r3, #5
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	4413      	add	r3, r2
 800ce2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce32:	461a      	mov	r2, r3
 800ce34:	f240 2325 	movw	r3, #549	; 0x225
 800ce38:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ce3a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	da17      	bge.n	800ce72 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ce42:	78fb      	ldrb	r3, [r7, #3]
 800ce44:	015a      	lsls	r2, r3, #5
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	4413      	add	r3, r2
 800ce4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	78fa      	ldrb	r2, [r7, #3]
 800ce52:	0151      	lsls	r1, r2, #5
 800ce54:	693a      	ldr	r2, [r7, #16]
 800ce56:	440a      	add	r2, r1
 800ce58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce5c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800ce60:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ce62:	e006      	b.n	800ce72 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800ce64:	2301      	movs	r3, #1
 800ce66:	77fb      	strb	r3, [r7, #31]
      break;
 800ce68:	e004      	b.n	800ce74 <USB_HC_Init+0x14c>
      break;
 800ce6a:	bf00      	nop
 800ce6c:	e002      	b.n	800ce74 <USB_HC_Init+0x14c>
      break;
 800ce6e:	bf00      	nop
 800ce70:	e000      	b.n	800ce74 <USB_HC_Init+0x14c>
      break;
 800ce72:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce7a:	699a      	ldr	r2, [r3, #24]
 800ce7c:	78fb      	ldrb	r3, [r7, #3]
 800ce7e:	f003 030f 	and.w	r3, r3, #15
 800ce82:	2101      	movs	r1, #1
 800ce84:	fa01 f303 	lsl.w	r3, r1, r3
 800ce88:	6939      	ldr	r1, [r7, #16]
 800ce8a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	699b      	ldr	r3, [r3, #24]
 800ce96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ce9e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	da03      	bge.n	800ceae <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800cea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ceaa:	61bb      	str	r3, [r7, #24]
 800ceac:	e001      	b.n	800ceb2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f7ff ff0f 	bl	800ccd6 <USB_GetHostSpeed>
 800ceb8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800ceba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cebe:	2b02      	cmp	r3, #2
 800cec0:	d106      	bne.n	800ced0 <USB_HC_Init+0x1a8>
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2b02      	cmp	r3, #2
 800cec6:	d003      	beq.n	800ced0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800cec8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cecc:	617b      	str	r3, [r7, #20]
 800cece:	e001      	b.n	800ced4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800ced0:	2300      	movs	r3, #0
 800ced2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ced4:	787b      	ldrb	r3, [r7, #1]
 800ced6:	059b      	lsls	r3, r3, #22
 800ced8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cedc:	78bb      	ldrb	r3, [r7, #2]
 800cede:	02db      	lsls	r3, r3, #11
 800cee0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cee4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800cee6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ceea:	049b      	lsls	r3, r3, #18
 800ceec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cef0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cef2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cef4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800cef8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cefe:	78fb      	ldrb	r3, [r7, #3]
 800cf00:	0159      	lsls	r1, r3, #5
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	440b      	add	r3, r1
 800cf06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf0a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cf10:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800cf12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cf16:	2b03      	cmp	r3, #3
 800cf18:	d10f      	bne.n	800cf3a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800cf1a:	78fb      	ldrb	r3, [r7, #3]
 800cf1c:	015a      	lsls	r2, r3, #5
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	4413      	add	r3, r2
 800cf22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	78fa      	ldrb	r2, [r7, #3]
 800cf2a:	0151      	lsls	r1, r2, #5
 800cf2c:	693a      	ldr	r2, [r7, #16]
 800cf2e:	440a      	add	r2, r1
 800cf30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf38:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800cf3a:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3720      	adds	r7, #32
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b08c      	sub	sp, #48	; 0x30
 800cf48:	af02      	add	r7, sp, #8
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	4613      	mov	r3, r2
 800cf50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	785b      	ldrb	r3, [r3, #1]
 800cf5a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800cf5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf60:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d02d      	beq.n	800cfca <USB_HC_StartXfer+0x86>
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	791b      	ldrb	r3, [r3, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d129      	bne.n	800cfca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800cf76:	79fb      	ldrb	r3, [r7, #7]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d117      	bne.n	800cfac <USB_HC_StartXfer+0x68>
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	79db      	ldrb	r3, [r3, #7]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d003      	beq.n	800cf8c <USB_HC_StartXfer+0x48>
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	79db      	ldrb	r3, [r3, #7]
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	d10f      	bne.n	800cfac <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	015a      	lsls	r2, r3, #5
 800cf90:	6a3b      	ldr	r3, [r7, #32]
 800cf92:	4413      	add	r3, r2
 800cf94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf98:	68db      	ldr	r3, [r3, #12]
 800cf9a:	69fa      	ldr	r2, [r7, #28]
 800cf9c:	0151      	lsls	r1, r2, #5
 800cf9e:	6a3a      	ldr	r2, [r7, #32]
 800cfa0:	440a      	add	r2, r1
 800cfa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cfa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfaa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800cfac:	79fb      	ldrb	r3, [r7, #7]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d10b      	bne.n	800cfca <USB_HC_StartXfer+0x86>
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	795b      	ldrb	r3, [r3, #5]
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d107      	bne.n	800cfca <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	785b      	ldrb	r3, [r3, #1]
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	68f8      	ldr	r0, [r7, #12]
 800cfc2:	f000 fa2f 	bl	800d424 <USB_DoPing>
      return HAL_OK;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	e0f8      	b.n	800d1bc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	695b      	ldr	r3, [r3, #20]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d018      	beq.n	800d004 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	695b      	ldr	r3, [r3, #20]
 800cfd6:	68ba      	ldr	r2, [r7, #8]
 800cfd8:	8912      	ldrh	r2, [r2, #8]
 800cfda:	4413      	add	r3, r2
 800cfdc:	3b01      	subs	r3, #1
 800cfde:	68ba      	ldr	r2, [r7, #8]
 800cfe0:	8912      	ldrh	r2, [r2, #8]
 800cfe2:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfe6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800cfe8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cfea:	8b7b      	ldrh	r3, [r7, #26]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d90b      	bls.n	800d008 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800cff0:	8b7b      	ldrh	r3, [r7, #26]
 800cff2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800cff4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cff6:	68ba      	ldr	r2, [r7, #8]
 800cff8:	8912      	ldrh	r2, [r2, #8]
 800cffa:	fb02 f203 	mul.w	r2, r2, r3
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	611a      	str	r2, [r3, #16]
 800d002:	e001      	b.n	800d008 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800d004:	2301      	movs	r3, #1
 800d006:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	78db      	ldrb	r3, [r3, #3]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d007      	beq.n	800d020 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d010:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d012:	68ba      	ldr	r2, [r7, #8]
 800d014:	8912      	ldrh	r2, [r2, #8]
 800d016:	fb02 f203 	mul.w	r2, r2, r3
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	611a      	str	r2, [r3, #16]
 800d01e:	e003      	b.n	800d028 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	695a      	ldr	r2, [r3, #20]
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	691b      	ldr	r3, [r3, #16]
 800d02c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d030:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d032:	04d9      	lsls	r1, r3, #19
 800d034:	4b63      	ldr	r3, [pc, #396]	; (800d1c4 <USB_HC_StartXfer+0x280>)
 800d036:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d038:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	7a9b      	ldrb	r3, [r3, #10]
 800d03e:	075b      	lsls	r3, r3, #29
 800d040:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d044:	69f9      	ldr	r1, [r7, #28]
 800d046:	0148      	lsls	r0, r1, #5
 800d048:	6a39      	ldr	r1, [r7, #32]
 800d04a:	4401      	add	r1, r0
 800d04c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d050:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d052:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d054:	79fb      	ldrb	r3, [r7, #7]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d009      	beq.n	800d06e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	68d9      	ldr	r1, [r3, #12]
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	015a      	lsls	r2, r3, #5
 800d062:	6a3b      	ldr	r3, [r7, #32]
 800d064:	4413      	add	r3, r2
 800d066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d06a:	460a      	mov	r2, r1
 800d06c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d06e:	6a3b      	ldr	r3, [r7, #32]
 800d070:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d074:	689b      	ldr	r3, [r3, #8]
 800d076:	f003 0301 	and.w	r3, r3, #1
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	bf0c      	ite	eq
 800d07e:	2301      	moveq	r3, #1
 800d080:	2300      	movne	r3, #0
 800d082:	b2db      	uxtb	r3, r3
 800d084:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d086:	69fb      	ldr	r3, [r7, #28]
 800d088:	015a      	lsls	r2, r3, #5
 800d08a:	6a3b      	ldr	r3, [r7, #32]
 800d08c:	4413      	add	r3, r2
 800d08e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	69fa      	ldr	r2, [r7, #28]
 800d096:	0151      	lsls	r1, r2, #5
 800d098:	6a3a      	ldr	r2, [r7, #32]
 800d09a:	440a      	add	r2, r1
 800d09c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d0a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d0a4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d0a6:	69fb      	ldr	r3, [r7, #28]
 800d0a8:	015a      	lsls	r2, r3, #5
 800d0aa:	6a3b      	ldr	r3, [r7, #32]
 800d0ac:	4413      	add	r3, r2
 800d0ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0b2:	681a      	ldr	r2, [r3, #0]
 800d0b4:	7e7b      	ldrb	r3, [r7, #25]
 800d0b6:	075b      	lsls	r3, r3, #29
 800d0b8:	69f9      	ldr	r1, [r7, #28]
 800d0ba:	0148      	lsls	r0, r1, #5
 800d0bc:	6a39      	ldr	r1, [r7, #32]
 800d0be:	4401      	add	r1, r0
 800d0c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d0c8:	69fb      	ldr	r3, [r7, #28]
 800d0ca:	015a      	lsls	r2, r3, #5
 800d0cc:	6a3b      	ldr	r3, [r7, #32]
 800d0ce:	4413      	add	r3, r2
 800d0d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d0de:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	78db      	ldrb	r3, [r3, #3]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d004      	beq.n	800d0f2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0ee:	613b      	str	r3, [r7, #16]
 800d0f0:	e003      	b.n	800d0fa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d0f8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d100:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d102:	69fb      	ldr	r3, [r7, #28]
 800d104:	015a      	lsls	r2, r3, #5
 800d106:	6a3b      	ldr	r3, [r7, #32]
 800d108:	4413      	add	r3, r2
 800d10a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d10e:	461a      	mov	r2, r3
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d114:	79fb      	ldrb	r3, [r7, #7]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d001      	beq.n	800d11e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d11a:	2300      	movs	r3, #0
 800d11c:	e04e      	b.n	800d1bc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	78db      	ldrb	r3, [r3, #3]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d149      	bne.n	800d1ba <USB_HC_StartXfer+0x276>
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	695b      	ldr	r3, [r3, #20]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d045      	beq.n	800d1ba <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	79db      	ldrb	r3, [r3, #7]
 800d132:	2b03      	cmp	r3, #3
 800d134:	d830      	bhi.n	800d198 <USB_HC_StartXfer+0x254>
 800d136:	a201      	add	r2, pc, #4	; (adr r2, 800d13c <USB_HC_StartXfer+0x1f8>)
 800d138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d13c:	0800d14d 	.word	0x0800d14d
 800d140:	0800d171 	.word	0x0800d171
 800d144:	0800d14d 	.word	0x0800d14d
 800d148:	0800d171 	.word	0x0800d171
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	695b      	ldr	r3, [r3, #20]
 800d150:	3303      	adds	r3, #3
 800d152:	089b      	lsrs	r3, r3, #2
 800d154:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d156:	8afa      	ldrh	r2, [r7, #22]
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	429a      	cmp	r2, r3
 800d160:	d91c      	bls.n	800d19c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	699b      	ldr	r3, [r3, #24]
 800d166:	f043 0220 	orr.w	r2, r3, #32
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	619a      	str	r2, [r3, #24]
        }
        break;
 800d16e:	e015      	b.n	800d19c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	695b      	ldr	r3, [r3, #20]
 800d174:	3303      	adds	r3, #3
 800d176:	089b      	lsrs	r3, r3, #2
 800d178:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d17a:	8afa      	ldrh	r2, [r7, #22]
 800d17c:	6a3b      	ldr	r3, [r7, #32]
 800d17e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d182:	691b      	ldr	r3, [r3, #16]
 800d184:	b29b      	uxth	r3, r3
 800d186:	429a      	cmp	r2, r3
 800d188:	d90a      	bls.n	800d1a0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	699b      	ldr	r3, [r3, #24]
 800d18e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	619a      	str	r2, [r3, #24]
        }
        break;
 800d196:	e003      	b.n	800d1a0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d198:	bf00      	nop
 800d19a:	e002      	b.n	800d1a2 <USB_HC_StartXfer+0x25e>
        break;
 800d19c:	bf00      	nop
 800d19e:	e000      	b.n	800d1a2 <USB_HC_StartXfer+0x25e>
        break;
 800d1a0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	68d9      	ldr	r1, [r3, #12]
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	785a      	ldrb	r2, [r3, #1]
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	695b      	ldr	r3, [r3, #20]
 800d1ae:	b29b      	uxth	r3, r3
 800d1b0:	2000      	movs	r0, #0
 800d1b2:	9000      	str	r0, [sp, #0]
 800d1b4:	68f8      	ldr	r0, [r7, #12]
 800d1b6:	f7ff fb8d 	bl	800c8d4 <USB_WritePacket>
  }

  return HAL_OK;
 800d1ba:	2300      	movs	r3, #0
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3728      	adds	r7, #40	; 0x28
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	1ff80000 	.word	0x1ff80000

0800d1c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b085      	sub	sp, #20
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d1da:	695b      	ldr	r3, [r3, #20]
 800d1dc:	b29b      	uxth	r3, r3
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3714      	adds	r7, #20
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e8:	4770      	bx	lr

0800d1ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d1ea:	b480      	push	{r7}
 800d1ec:	b089      	sub	sp, #36	; 0x24
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800d1fa:	78fb      	ldrb	r3, [r7, #3]
 800d1fc:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800d1fe:	2300      	movs	r3, #0
 800d200:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	015a      	lsls	r2, r3, #5
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	4413      	add	r3, r2
 800d20a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	0c9b      	lsrs	r3, r3, #18
 800d212:	f003 0303 	and.w	r3, r3, #3
 800d216:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	015a      	lsls	r2, r3, #5
 800d21c:	69bb      	ldr	r3, [r7, #24]
 800d21e:	4413      	add	r3, r2
 800d220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	0fdb      	lsrs	r3, r3, #31
 800d228:	f003 0301 	and.w	r3, r3, #1
 800d22c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	689b      	ldr	r3, [r3, #8]
 800d232:	f003 0320 	and.w	r3, r3, #32
 800d236:	2b20      	cmp	r3, #32
 800d238:	d104      	bne.n	800d244 <USB_HC_Halt+0x5a>
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d101      	bne.n	800d244 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800d240:	2300      	movs	r3, #0
 800d242:	e0e8      	b.n	800d416 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d002      	beq.n	800d250 <USB_HC_Halt+0x66>
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	2b02      	cmp	r3, #2
 800d24e:	d173      	bne.n	800d338 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	015a      	lsls	r2, r3, #5
 800d254:	69bb      	ldr	r3, [r7, #24]
 800d256:	4413      	add	r3, r2
 800d258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	697a      	ldr	r2, [r7, #20]
 800d260:	0151      	lsls	r1, r2, #5
 800d262:	69ba      	ldr	r2, [r7, #24]
 800d264:	440a      	add	r2, r1
 800d266:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d26a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d26e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	689b      	ldr	r3, [r3, #8]
 800d274:	f003 0320 	and.w	r3, r3, #32
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f040 80cb 	bne.w	800d414 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d282:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d286:	2b00      	cmp	r3, #0
 800d288:	d143      	bne.n	800d312 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	015a      	lsls	r2, r3, #5
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	4413      	add	r3, r2
 800d292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	697a      	ldr	r2, [r7, #20]
 800d29a:	0151      	lsls	r1, r2, #5
 800d29c:	69ba      	ldr	r2, [r7, #24]
 800d29e:	440a      	add	r2, r1
 800d2a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d2a8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	015a      	lsls	r2, r3, #5
 800d2ae:	69bb      	ldr	r3, [r7, #24]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	697a      	ldr	r2, [r7, #20]
 800d2ba:	0151      	lsls	r1, r2, #5
 800d2bc:	69ba      	ldr	r2, [r7, #24]
 800d2be:	440a      	add	r2, r1
 800d2c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d2c8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	015a      	lsls	r2, r3, #5
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	697a      	ldr	r2, [r7, #20]
 800d2da:	0151      	lsls	r1, r2, #5
 800d2dc:	69ba      	ldr	r2, [r7, #24]
 800d2de:	440a      	add	r2, r1
 800d2e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d2e8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800d2ea:	69fb      	ldr	r3, [r7, #28]
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	61fb      	str	r3, [r7, #28]
 800d2f0:	69fb      	ldr	r3, [r7, #28]
 800d2f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2f6:	d81d      	bhi.n	800d334 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	015a      	lsls	r2, r3, #5
 800d2fc:	69bb      	ldr	r3, [r7, #24]
 800d2fe:	4413      	add	r3, r2
 800d300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d30a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d30e:	d0ec      	beq.n	800d2ea <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d310:	e080      	b.n	800d414 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	015a      	lsls	r2, r3, #5
 800d316:	69bb      	ldr	r3, [r7, #24]
 800d318:	4413      	add	r3, r2
 800d31a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	697a      	ldr	r2, [r7, #20]
 800d322:	0151      	lsls	r1, r2, #5
 800d324:	69ba      	ldr	r2, [r7, #24]
 800d326:	440a      	add	r2, r1
 800d328:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d32c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d330:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d332:	e06f      	b.n	800d414 <USB_HC_Halt+0x22a>
            break;
 800d334:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d336:	e06d      	b.n	800d414 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	015a      	lsls	r2, r3, #5
 800d33c:	69bb      	ldr	r3, [r7, #24]
 800d33e:	4413      	add	r3, r2
 800d340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	697a      	ldr	r2, [r7, #20]
 800d348:	0151      	lsls	r1, r2, #5
 800d34a:	69ba      	ldr	r2, [r7, #24]
 800d34c:	440a      	add	r2, r1
 800d34e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d352:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d356:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d358:	69bb      	ldr	r3, [r7, #24]
 800d35a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d35e:	691b      	ldr	r3, [r3, #16]
 800d360:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d364:	2b00      	cmp	r3, #0
 800d366:	d143      	bne.n	800d3f0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	015a      	lsls	r2, r3, #5
 800d36c:	69bb      	ldr	r3, [r7, #24]
 800d36e:	4413      	add	r3, r2
 800d370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	697a      	ldr	r2, [r7, #20]
 800d378:	0151      	lsls	r1, r2, #5
 800d37a:	69ba      	ldr	r2, [r7, #24]
 800d37c:	440a      	add	r2, r1
 800d37e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d382:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d386:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	015a      	lsls	r2, r3, #5
 800d38c:	69bb      	ldr	r3, [r7, #24]
 800d38e:	4413      	add	r3, r2
 800d390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	697a      	ldr	r2, [r7, #20]
 800d398:	0151      	lsls	r1, r2, #5
 800d39a:	69ba      	ldr	r2, [r7, #24]
 800d39c:	440a      	add	r2, r1
 800d39e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d3a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	015a      	lsls	r2, r3, #5
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	4413      	add	r3, r2
 800d3b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	697a      	ldr	r2, [r7, #20]
 800d3b8:	0151      	lsls	r1, r2, #5
 800d3ba:	69ba      	ldr	r2, [r7, #24]
 800d3bc:	440a      	add	r2, r1
 800d3be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d3c6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d3c8:	69fb      	ldr	r3, [r7, #28]
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	61fb      	str	r3, [r7, #28]
 800d3ce:	69fb      	ldr	r3, [r7, #28]
 800d3d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d3d4:	d81d      	bhi.n	800d412 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	015a      	lsls	r2, r3, #5
 800d3da:	69bb      	ldr	r3, [r7, #24]
 800d3dc:	4413      	add	r3, r2
 800d3de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d3e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d3ec:	d0ec      	beq.n	800d3c8 <USB_HC_Halt+0x1de>
 800d3ee:	e011      	b.n	800d414 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	015a      	lsls	r2, r3, #5
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	4413      	add	r3, r2
 800d3f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	697a      	ldr	r2, [r7, #20]
 800d400:	0151      	lsls	r1, r2, #5
 800d402:	69ba      	ldr	r2, [r7, #24]
 800d404:	440a      	add	r2, r1
 800d406:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d40a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d40e:	6013      	str	r3, [r2, #0]
 800d410:	e000      	b.n	800d414 <USB_HC_Halt+0x22a>
          break;
 800d412:	bf00      	nop
    }
  }

  return HAL_OK;
 800d414:	2300      	movs	r3, #0
}
 800d416:	4618      	mov	r0, r3
 800d418:	3724      	adds	r7, #36	; 0x24
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr
	...

0800d424 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d424:	b480      	push	{r7}
 800d426:	b087      	sub	sp, #28
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	460b      	mov	r3, r1
 800d42e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d434:	78fb      	ldrb	r3, [r7, #3]
 800d436:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d438:	2301      	movs	r3, #1
 800d43a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	04da      	lsls	r2, r3, #19
 800d440:	4b15      	ldr	r3, [pc, #84]	; (800d498 <USB_DoPing+0x74>)
 800d442:	4013      	ands	r3, r2
 800d444:	693a      	ldr	r2, [r7, #16]
 800d446:	0151      	lsls	r1, r2, #5
 800d448:	697a      	ldr	r2, [r7, #20]
 800d44a:	440a      	add	r2, r1
 800d44c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d450:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d454:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	015a      	lsls	r2, r3, #5
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	4413      	add	r3, r2
 800d45e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d46c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d474:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	015a      	lsls	r2, r3, #5
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	4413      	add	r3, r2
 800d47e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d482:	461a      	mov	r2, r3
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d488:	2300      	movs	r3, #0
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	371c      	adds	r7, #28
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr
 800d496:	bf00      	nop
 800d498:	1ff80000 	.word	0x1ff80000

0800d49c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b086      	sub	sp, #24
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f7ff f98e 	bl	800c7ce <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800d4b2:	2110      	movs	r1, #16
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f7ff f9c5 	bl	800c844 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f7ff f9e8 	bl	800c890 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	613b      	str	r3, [r7, #16]
 800d4c4:	e01f      	b.n	800d506 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	015a      	lsls	r2, r3, #5
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d4dc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d4e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d4ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	015a      	lsls	r2, r3, #5
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	4413      	add	r3, r2
 800d4f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	3301      	adds	r3, #1
 800d504:	613b      	str	r3, [r7, #16]
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	2b0f      	cmp	r3, #15
 800d50a:	d9dc      	bls.n	800d4c6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d50c:	2300      	movs	r3, #0
 800d50e:	613b      	str	r3, [r7, #16]
 800d510:	e034      	b.n	800d57c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	015a      	lsls	r2, r3, #5
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	4413      	add	r3, r2
 800d51a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d528:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d530:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d538:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	015a      	lsls	r2, r3, #5
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	4413      	add	r3, r2
 800d542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d546:	461a      	mov	r2, r3
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	3301      	adds	r3, #1
 800d550:	617b      	str	r3, [r7, #20]
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d558:	d80c      	bhi.n	800d574 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	015a      	lsls	r2, r3, #5
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	4413      	add	r3, r2
 800d562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d56c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d570:	d0ec      	beq.n	800d54c <USB_StopHost+0xb0>
 800d572:	e000      	b.n	800d576 <USB_StopHost+0xda>
        break;
 800d574:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	3301      	adds	r3, #1
 800d57a:	613b      	str	r3, [r7, #16]
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	2b0f      	cmp	r3, #15
 800d580:	d9c7      	bls.n	800d512 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d588:	461a      	mov	r2, r3
 800d58a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d58e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d596:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f7ff f907 	bl	800c7ac <USB_EnableGlobalInt>

  return HAL_OK;
 800d59e:	2300      	movs	r3, #0
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3718      	adds	r7, #24
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d5ac:	4904      	ldr	r1, [pc, #16]	; (800d5c0 <MX_FATFS_Init+0x18>)
 800d5ae:	4805      	ldr	r0, [pc, #20]	; (800d5c4 <MX_FATFS_Init+0x1c>)
 800d5b0:	f002 f8d8 	bl	800f764 <FATFS_LinkDriver>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	4b03      	ldr	r3, [pc, #12]	; (800d5c8 <MX_FATFS_Init+0x20>)
 800d5ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d5bc:	bf00      	nop
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	200011d8 	.word	0x200011d8
 800d5c4:	08016384 	.word	0x08016384
 800d5c8:	200011d4 	.word	0x200011d4

0800d5cc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d5d6:	f000 f879 	bl	800d6cc <BSP_SD_IsDetected>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d001      	beq.n	800d5e4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d5e0:	2302      	movs	r3, #2
 800d5e2:	e012      	b.n	800d60a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d5e4:	480b      	ldr	r0, [pc, #44]	; (800d614 <BSP_SD_Init+0x48>)
 800d5e6:	f7fb fbc5 	bl	8008d74 <HAL_SD_Init>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d5ee:	79fb      	ldrb	r3, [r7, #7]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d109      	bne.n	800d608 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d5f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d5f8:	4806      	ldr	r0, [pc, #24]	; (800d614 <BSP_SD_Init+0x48>)
 800d5fa:	f7fc f9a5 	bl	8009948 <HAL_SD_ConfigWideBusOperation>
 800d5fe:	4603      	mov	r3, r0
 800d600:	2b00      	cmp	r3, #0
 800d602:	d001      	beq.n	800d608 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d604:	2301      	movs	r3, #1
 800d606:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d608:	79fb      	ldrb	r3, [r7, #7]
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3708      	adds	r7, #8
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	20000c5c 	.word	0x20000c5c

0800d618 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b088      	sub	sp, #32
 800d61c:	af02      	add	r7, sp, #8
 800d61e:	60f8      	str	r0, [r7, #12]
 800d620:	60b9      	str	r1, [r7, #8]
 800d622:	607a      	str	r2, [r7, #4]
 800d624:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d626:	2300      	movs	r3, #0
 800d628:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	9300      	str	r3, [sp, #0]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	68ba      	ldr	r2, [r7, #8]
 800d632:	68f9      	ldr	r1, [r7, #12]
 800d634:	4806      	ldr	r0, [pc, #24]	; (800d650 <BSP_SD_ReadBlocks+0x38>)
 800d636:	f7fb fc53 	bl	8008ee0 <HAL_SD_ReadBlocks>
 800d63a:	4603      	mov	r3, r0
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d001      	beq.n	800d644 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d640:	2301      	movs	r3, #1
 800d642:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d644:	7dfb      	ldrb	r3, [r7, #23]
}
 800d646:	4618      	mov	r0, r3
 800d648:	3718      	adds	r7, #24
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	20000c5c 	.word	0x20000c5c

0800d654 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b088      	sub	sp, #32
 800d658:	af02      	add	r7, sp, #8
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	607a      	str	r2, [r7, #4]
 800d660:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d662:	2300      	movs	r3, #0
 800d664:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	9300      	str	r3, [sp, #0]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	68ba      	ldr	r2, [r7, #8]
 800d66e:	68f9      	ldr	r1, [r7, #12]
 800d670:	4806      	ldr	r0, [pc, #24]	; (800d68c <BSP_SD_WriteBlocks+0x38>)
 800d672:	f7fb fe13 	bl	800929c <HAL_SD_WriteBlocks>
 800d676:	4603      	mov	r3, r0
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d001      	beq.n	800d680 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d67c:	2301      	movs	r3, #1
 800d67e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d680:	7dfb      	ldrb	r3, [r7, #23]
}
 800d682:	4618      	mov	r0, r3
 800d684:	3718      	adds	r7, #24
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	20000c5c 	.word	0x20000c5c

0800d690 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d694:	4805      	ldr	r0, [pc, #20]	; (800d6ac <BSP_SD_GetCardState+0x1c>)
 800d696:	f7fc f9f1 	bl	8009a7c <HAL_SD_GetCardState>
 800d69a:	4603      	mov	r3, r0
 800d69c:	2b04      	cmp	r3, #4
 800d69e:	bf14      	ite	ne
 800d6a0:	2301      	movne	r3, #1
 800d6a2:	2300      	moveq	r3, #0
 800d6a4:	b2db      	uxtb	r3, r3
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	20000c5c 	.word	0x20000c5c

0800d6b0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b082      	sub	sp, #8
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d6b8:	6879      	ldr	r1, [r7, #4]
 800d6ba:	4803      	ldr	r0, [pc, #12]	; (800d6c8 <BSP_SD_GetCardInfo+0x18>)
 800d6bc:	f7fc f918 	bl	80098f0 <HAL_SD_GetCardInfo>
}
 800d6c0:	bf00      	nop
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	20000c5c 	.word	0x20000c5c

0800d6cc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d6d6:	f000 f80b 	bl	800d6f0 <BSP_PlatformIsDetected>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d101      	bne.n	800d6e4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d6e4:	79fb      	ldrb	r3, [r7, #7]
 800d6e6:	b2db      	uxtb	r3, r3
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3708      	adds	r7, #8
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b082      	sub	sp, #8
 800d6f4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d6fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d6fe:	4806      	ldr	r0, [pc, #24]	; (800d718 <BSP_PlatformIsDetected+0x28>)
 800d700:	f7f7 f898 	bl	8004834 <HAL_GPIO_ReadPin>
 800d704:	4603      	mov	r3, r0
 800d706:	2b00      	cmp	r3, #0
 800d708:	d001      	beq.n	800d70e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d70a:	2300      	movs	r3, #0
 800d70c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d70e:	79fb      	ldrb	r3, [r7, #7]
}
 800d710:	4618      	mov	r0, r3
 800d712:	3708      	adds	r7, #8
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}
 800d718:	40020800 	.word	0x40020800

0800d71c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b082      	sub	sp, #8
 800d720:	af00      	add	r7, sp, #0
 800d722:	4603      	mov	r3, r0
 800d724:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d726:	4b0b      	ldr	r3, [pc, #44]	; (800d754 <SD_CheckStatus+0x38>)
 800d728:	2201      	movs	r2, #1
 800d72a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d72c:	f7ff ffb0 	bl	800d690 <BSP_SD_GetCardState>
 800d730:	4603      	mov	r3, r0
 800d732:	2b00      	cmp	r3, #0
 800d734:	d107      	bne.n	800d746 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d736:	4b07      	ldr	r3, [pc, #28]	; (800d754 <SD_CheckStatus+0x38>)
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	f023 0301 	bic.w	r3, r3, #1
 800d740:	b2da      	uxtb	r2, r3
 800d742:	4b04      	ldr	r3, [pc, #16]	; (800d754 <SD_CheckStatus+0x38>)
 800d744:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d746:	4b03      	ldr	r3, [pc, #12]	; (800d754 <SD_CheckStatus+0x38>)
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	b2db      	uxtb	r3, r3
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3708      	adds	r7, #8
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}
 800d754:	20000009 	.word	0x20000009

0800d758 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	4603      	mov	r3, r0
 800d760:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d762:	4b0b      	ldr	r3, [pc, #44]	; (800d790 <SD_initialize+0x38>)
 800d764:	2201      	movs	r2, #1
 800d766:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d768:	f7ff ff30 	bl	800d5cc <BSP_SD_Init>
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d107      	bne.n	800d782 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d772:	79fb      	ldrb	r3, [r7, #7]
 800d774:	4618      	mov	r0, r3
 800d776:	f7ff ffd1 	bl	800d71c <SD_CheckStatus>
 800d77a:	4603      	mov	r3, r0
 800d77c:	461a      	mov	r2, r3
 800d77e:	4b04      	ldr	r3, [pc, #16]	; (800d790 <SD_initialize+0x38>)
 800d780:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d782:	4b03      	ldr	r3, [pc, #12]	; (800d790 <SD_initialize+0x38>)
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	b2db      	uxtb	r3, r3
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3708      	adds	r7, #8
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	20000009 	.word	0x20000009

0800d794 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	4603      	mov	r3, r0
 800d79c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d79e:	79fb      	ldrb	r3, [r7, #7]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7ff ffbb 	bl	800d71c <SD_CheckStatus>
 800d7a6:	4603      	mov	r3, r0
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b086      	sub	sp, #24
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60b9      	str	r1, [r7, #8]
 800d7b8:	607a      	str	r2, [r7, #4]
 800d7ba:	603b      	str	r3, [r7, #0]
 800d7bc:	4603      	mov	r3, r0
 800d7be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d7c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7c8:	683a      	ldr	r2, [r7, #0]
 800d7ca:	6879      	ldr	r1, [r7, #4]
 800d7cc:	68b8      	ldr	r0, [r7, #8]
 800d7ce:	f7ff ff23 	bl	800d618 <BSP_SD_ReadBlocks>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d107      	bne.n	800d7e8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d7d8:	bf00      	nop
 800d7da:	f7ff ff59 	bl	800d690 <BSP_SD_GetCardState>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d1fa      	bne.n	800d7da <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d7e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3718      	adds	r7, #24
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b086      	sub	sp, #24
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	60b9      	str	r1, [r7, #8]
 800d7fa:	607a      	str	r2, [r7, #4]
 800d7fc:	603b      	str	r3, [r7, #0]
 800d7fe:	4603      	mov	r3, r0
 800d800:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d802:	2301      	movs	r3, #1
 800d804:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d80a:	683a      	ldr	r2, [r7, #0]
 800d80c:	6879      	ldr	r1, [r7, #4]
 800d80e:	68b8      	ldr	r0, [r7, #8]
 800d810:	f7ff ff20 	bl	800d654 <BSP_SD_WriteBlocks>
 800d814:	4603      	mov	r3, r0
 800d816:	2b00      	cmp	r3, #0
 800d818:	d107      	bne.n	800d82a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d81a:	bf00      	nop
 800d81c:	f7ff ff38 	bl	800d690 <BSP_SD_GetCardState>
 800d820:	4603      	mov	r3, r0
 800d822:	2b00      	cmp	r3, #0
 800d824:	d1fa      	bne.n	800d81c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d826:	2300      	movs	r3, #0
 800d828:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d82a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3718      	adds	r7, #24
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b08c      	sub	sp, #48	; 0x30
 800d838:	af00      	add	r7, sp, #0
 800d83a:	4603      	mov	r3, r0
 800d83c:	603a      	str	r2, [r7, #0]
 800d83e:	71fb      	strb	r3, [r7, #7]
 800d840:	460b      	mov	r3, r1
 800d842:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d844:	2301      	movs	r3, #1
 800d846:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d84a:	4b25      	ldr	r3, [pc, #148]	; (800d8e0 <SD_ioctl+0xac>)
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	f003 0301 	and.w	r3, r3, #1
 800d854:	2b00      	cmp	r3, #0
 800d856:	d001      	beq.n	800d85c <SD_ioctl+0x28>
 800d858:	2303      	movs	r3, #3
 800d85a:	e03c      	b.n	800d8d6 <SD_ioctl+0xa2>

  switch (cmd)
 800d85c:	79bb      	ldrb	r3, [r7, #6]
 800d85e:	2b03      	cmp	r3, #3
 800d860:	d834      	bhi.n	800d8cc <SD_ioctl+0x98>
 800d862:	a201      	add	r2, pc, #4	; (adr r2, 800d868 <SD_ioctl+0x34>)
 800d864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d868:	0800d879 	.word	0x0800d879
 800d86c:	0800d881 	.word	0x0800d881
 800d870:	0800d899 	.word	0x0800d899
 800d874:	0800d8b3 	.word	0x0800d8b3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d878:	2300      	movs	r3, #0
 800d87a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d87e:	e028      	b.n	800d8d2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d880:	f107 030c 	add.w	r3, r7, #12
 800d884:	4618      	mov	r0, r3
 800d886:	f7ff ff13 	bl	800d6b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d88a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d890:	2300      	movs	r3, #0
 800d892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d896:	e01c      	b.n	800d8d2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d898:	f107 030c 	add.w	r3, r7, #12
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7ff ff07 	bl	800d6b0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a4:	b29a      	uxth	r2, r3
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d8b0:	e00f      	b.n	800d8d2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d8b2:	f107 030c 	add.w	r3, r7, #12
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7ff fefa 	bl	800d6b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8be:	0a5a      	lsrs	r2, r3, #9
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d8ca:	e002      	b.n	800d8d2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d8cc:	2304      	movs	r3, #4
 800d8ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d8d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3730      	adds	r7, #48	; 0x30
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	20000009 	.word	0x20000009

0800d8e4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800d8e4:	b590      	push	{r4, r7, lr}
 800d8e6:	b089      	sub	sp, #36	; 0x24
 800d8e8:	af04      	add	r7, sp, #16
 800d8ea:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	2202      	movs	r2, #2
 800d8f0:	2102      	movs	r1, #2
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 fc66 	bl	800e1c4 <USBH_FindInterface>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d8fc:	7bfb      	ldrb	r3, [r7, #15]
 800d8fe:	2bff      	cmp	r3, #255	; 0xff
 800d900:	d002      	beq.n	800d908 <USBH_CDC_InterfaceInit+0x24>
 800d902:	7bfb      	ldrb	r3, [r7, #15]
 800d904:	2b01      	cmp	r3, #1
 800d906:	d901      	bls.n	800d90c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d908:	2302      	movs	r3, #2
 800d90a:	e13d      	b.n	800db88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800d90c:	7bfb      	ldrb	r3, [r7, #15]
 800d90e:	4619      	mov	r1, r3
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f000 fc3b 	bl	800e18c <USBH_SelectInterface>
 800d916:	4603      	mov	r3, r0
 800d918:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800d91a:	7bbb      	ldrb	r3, [r7, #14]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d001      	beq.n	800d924 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800d920:	2302      	movs	r3, #2
 800d922:	e131      	b.n	800db88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800d92a:	2050      	movs	r0, #80	; 0x50
 800d92c:	f005 fb02 	bl	8012f34 <malloc>
 800d930:	4603      	mov	r3, r0
 800d932:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d93a:	69db      	ldr	r3, [r3, #28]
 800d93c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d101      	bne.n	800d948 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800d944:	2302      	movs	r3, #2
 800d946:	e11f      	b.n	800db88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800d948:	2250      	movs	r2, #80	; 0x50
 800d94a:	2100      	movs	r1, #0
 800d94c:	68b8      	ldr	r0, [r7, #8]
 800d94e:	f005 fb0f 	bl	8012f70 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800d952:	7bfb      	ldrb	r3, [r7, #15]
 800d954:	687a      	ldr	r2, [r7, #4]
 800d956:	211a      	movs	r1, #26
 800d958:	fb01 f303 	mul.w	r3, r1, r3
 800d95c:	4413      	add	r3, r2
 800d95e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	b25b      	sxtb	r3, r3
 800d966:	2b00      	cmp	r3, #0
 800d968:	da15      	bge.n	800d996 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d96a:	7bfb      	ldrb	r3, [r7, #15]
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	211a      	movs	r1, #26
 800d970:	fb01 f303 	mul.w	r3, r1, r3
 800d974:	4413      	add	r3, r2
 800d976:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d97a:	781a      	ldrb	r2, [r3, #0]
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d980:	7bfb      	ldrb	r3, [r7, #15]
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	211a      	movs	r1, #26
 800d986:	fb01 f303 	mul.w	r3, r1, r3
 800d98a:	4413      	add	r3, r2
 800d98c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d990:	881a      	ldrh	r2, [r3, #0]
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	785b      	ldrb	r3, [r3, #1]
 800d99a:	4619      	mov	r1, r3
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f001 fe32 	bl	800f606 <USBH_AllocPipe>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	7819      	ldrb	r1, [r3, #0]
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	7858      	ldrb	r0, [r3, #1]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d9be:	68ba      	ldr	r2, [r7, #8]
 800d9c0:	8952      	ldrh	r2, [r2, #10]
 800d9c2:	9202      	str	r2, [sp, #8]
 800d9c4:	2203      	movs	r2, #3
 800d9c6:	9201      	str	r2, [sp, #4]
 800d9c8:	9300      	str	r3, [sp, #0]
 800d9ca:	4623      	mov	r3, r4
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f001 fdea 	bl	800f5a8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	781b      	ldrb	r3, [r3, #0]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	4619      	mov	r1, r3
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f002 f949 	bl	800fc74 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	210a      	movs	r1, #10
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f000 fbeb 	bl	800e1c4 <USBH_FindInterface>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d9f2:	7bfb      	ldrb	r3, [r7, #15]
 800d9f4:	2bff      	cmp	r3, #255	; 0xff
 800d9f6:	d002      	beq.n	800d9fe <USBH_CDC_InterfaceInit+0x11a>
 800d9f8:	7bfb      	ldrb	r3, [r7, #15]
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	d901      	bls.n	800da02 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d9fe:	2302      	movs	r3, #2
 800da00:	e0c2      	b.n	800db88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800da02:	7bfb      	ldrb	r3, [r7, #15]
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	211a      	movs	r1, #26
 800da08:	fb01 f303 	mul.w	r3, r1, r3
 800da0c:	4413      	add	r3, r2
 800da0e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	b25b      	sxtb	r3, r3
 800da16:	2b00      	cmp	r3, #0
 800da18:	da16      	bge.n	800da48 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800da1a:	7bfb      	ldrb	r3, [r7, #15]
 800da1c:	687a      	ldr	r2, [r7, #4]
 800da1e:	211a      	movs	r1, #26
 800da20:	fb01 f303 	mul.w	r3, r1, r3
 800da24:	4413      	add	r3, r2
 800da26:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800da2a:	781a      	ldrb	r2, [r3, #0]
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800da30:	7bfb      	ldrb	r3, [r7, #15]
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	211a      	movs	r1, #26
 800da36:	fb01 f303 	mul.w	r3, r1, r3
 800da3a:	4413      	add	r3, r2
 800da3c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800da40:	881a      	ldrh	r2, [r3, #0]
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	835a      	strh	r2, [r3, #26]
 800da46:	e015      	b.n	800da74 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800da48:	7bfb      	ldrb	r3, [r7, #15]
 800da4a:	687a      	ldr	r2, [r7, #4]
 800da4c:	211a      	movs	r1, #26
 800da4e:	fb01 f303 	mul.w	r3, r1, r3
 800da52:	4413      	add	r3, r2
 800da54:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800da58:	781a      	ldrb	r2, [r3, #0]
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800da5e:	7bfb      	ldrb	r3, [r7, #15]
 800da60:	687a      	ldr	r2, [r7, #4]
 800da62:	211a      	movs	r1, #26
 800da64:	fb01 f303 	mul.w	r3, r1, r3
 800da68:	4413      	add	r3, r2
 800da6a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800da6e:	881a      	ldrh	r2, [r3, #0]
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800da74:	7bfb      	ldrb	r3, [r7, #15]
 800da76:	687a      	ldr	r2, [r7, #4]
 800da78:	211a      	movs	r1, #26
 800da7a:	fb01 f303 	mul.w	r3, r1, r3
 800da7e:	4413      	add	r3, r2
 800da80:	f203 3356 	addw	r3, r3, #854	; 0x356
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	b25b      	sxtb	r3, r3
 800da88:	2b00      	cmp	r3, #0
 800da8a:	da16      	bge.n	800daba <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800da8c:	7bfb      	ldrb	r3, [r7, #15]
 800da8e:	687a      	ldr	r2, [r7, #4]
 800da90:	211a      	movs	r1, #26
 800da92:	fb01 f303 	mul.w	r3, r1, r3
 800da96:	4413      	add	r3, r2
 800da98:	f203 3356 	addw	r3, r3, #854	; 0x356
 800da9c:	781a      	ldrb	r2, [r3, #0]
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800daa2:	7bfb      	ldrb	r3, [r7, #15]
 800daa4:	687a      	ldr	r2, [r7, #4]
 800daa6:	211a      	movs	r1, #26
 800daa8:	fb01 f303 	mul.w	r3, r1, r3
 800daac:	4413      	add	r3, r2
 800daae:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800dab2:	881a      	ldrh	r2, [r3, #0]
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	835a      	strh	r2, [r3, #26]
 800dab8:	e015      	b.n	800dae6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800daba:	7bfb      	ldrb	r3, [r7, #15]
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	211a      	movs	r1, #26
 800dac0:	fb01 f303 	mul.w	r3, r1, r3
 800dac4:	4413      	add	r3, r2
 800dac6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800daca:	781a      	ldrb	r2, [r3, #0]
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800dad0:	7bfb      	ldrb	r3, [r7, #15]
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	211a      	movs	r1, #26
 800dad6:	fb01 f303 	mul.w	r3, r1, r3
 800dada:	4413      	add	r3, r2
 800dadc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800dae0:	881a      	ldrh	r2, [r3, #0]
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	7b9b      	ldrb	r3, [r3, #14]
 800daea:	4619      	mov	r1, r3
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f001 fd8a 	bl	800f606 <USBH_AllocPipe>
 800daf2:	4603      	mov	r3, r0
 800daf4:	461a      	mov	r2, r3
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	7bdb      	ldrb	r3, [r3, #15]
 800dafe:	4619      	mov	r1, r3
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f001 fd80 	bl	800f606 <USBH_AllocPipe>
 800db06:	4603      	mov	r3, r0
 800db08:	461a      	mov	r2, r3
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	7b59      	ldrb	r1, [r3, #13]
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	7b98      	ldrb	r0, [r3, #14]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800db22:	68ba      	ldr	r2, [r7, #8]
 800db24:	8b12      	ldrh	r2, [r2, #24]
 800db26:	9202      	str	r2, [sp, #8]
 800db28:	2202      	movs	r2, #2
 800db2a:	9201      	str	r2, [sp, #4]
 800db2c:	9300      	str	r3, [sp, #0]
 800db2e:	4623      	mov	r3, r4
 800db30:	4602      	mov	r2, r0
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f001 fd38 	bl	800f5a8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	7b19      	ldrb	r1, [r3, #12]
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	7bd8      	ldrb	r0, [r3, #15]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800db4c:	68ba      	ldr	r2, [r7, #8]
 800db4e:	8b52      	ldrh	r2, [r2, #26]
 800db50:	9202      	str	r2, [sp, #8]
 800db52:	2202      	movs	r2, #2
 800db54:	9201      	str	r2, [sp, #4]
 800db56:	9300      	str	r3, [sp, #0]
 800db58:	4623      	mov	r3, r4
 800db5a:	4602      	mov	r2, r0
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f001 fd23 	bl	800f5a8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	2200      	movs	r2, #0
 800db66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	7b5b      	ldrb	r3, [r3, #13]
 800db6e:	2200      	movs	r2, #0
 800db70:	4619      	mov	r1, r3
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f002 f87e 	bl	800fc74 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	7b1b      	ldrb	r3, [r3, #12]
 800db7c:	2200      	movs	r2, #0
 800db7e:	4619      	mov	r1, r3
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f002 f877 	bl	800fc74 <USBH_LL_SetToggle>

  return USBH_OK;
 800db86:	2300      	movs	r3, #0
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3714      	adds	r7, #20
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd90      	pop	{r4, r7, pc}

0800db90 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800db9e:	69db      	ldr	r3, [r3, #28]
 800dba0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d00e      	beq.n	800dbc8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	4619      	mov	r1, r3
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f001 fd18 	bl	800f5e6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	4619      	mov	r1, r3
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f001 fd43 	bl	800f648 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	7b1b      	ldrb	r3, [r3, #12]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d00e      	beq.n	800dbee <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	7b1b      	ldrb	r3, [r3, #12]
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f001 fd05 	bl	800f5e6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	7b1b      	ldrb	r3, [r3, #12]
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f001 fd30 	bl	800f648 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2200      	movs	r2, #0
 800dbec:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	7b5b      	ldrb	r3, [r3, #13]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d00e      	beq.n	800dc14 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	7b5b      	ldrb	r3, [r3, #13]
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f001 fcf2 	bl	800f5e6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	7b5b      	ldrb	r3, [r3, #13]
 800dc06:	4619      	mov	r1, r3
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f001 fd1d 	bl	800f648 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2200      	movs	r2, #0
 800dc12:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc1a:	69db      	ldr	r3, [r3, #28]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d00b      	beq.n	800dc38 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc26:	69db      	ldr	r3, [r3, #28]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f005 f98b 	bl	8012f44 <free>
    phost->pActiveClass->pData = 0U;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc34:	2200      	movs	r2, #0
 800dc36:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800dc38:	2300      	movs	r3, #0
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3710      	adds	r7, #16
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}

0800dc42 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b084      	sub	sp, #16
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc50:	69db      	ldr	r3, [r3, #28]
 800dc52:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	3340      	adds	r3, #64	; 0x40
 800dc58:	4619      	mov	r1, r3
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 f8b1 	bl	800ddc2 <GetLineCoding>
 800dc60:	4603      	mov	r3, r0
 800dc62:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800dc64:	7afb      	ldrb	r3, [r7, #11]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d105      	bne.n	800dc76 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc70:	2102      	movs	r1, #2
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800dc76:	7afb      	ldrb	r3, [r7, #11]
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3710      	adds	r7, #16
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800dc88:	2301      	movs	r3, #1
 800dc8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc96:	69db      	ldr	r3, [r3, #28]
 800dc98:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800dca0:	2b04      	cmp	r3, #4
 800dca2:	d877      	bhi.n	800dd94 <USBH_CDC_Process+0x114>
 800dca4:	a201      	add	r2, pc, #4	; (adr r2, 800dcac <USBH_CDC_Process+0x2c>)
 800dca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcaa:	bf00      	nop
 800dcac:	0800dcc1 	.word	0x0800dcc1
 800dcb0:	0800dcc7 	.word	0x0800dcc7
 800dcb4:	0800dcf7 	.word	0x0800dcf7
 800dcb8:	0800dd6b 	.word	0x0800dd6b
 800dcbc:	0800dd79 	.word	0x0800dd79
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	73fb      	strb	r3, [r7, #15]
      break;
 800dcc4:	e06d      	b.n	800dda2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dcca:	4619      	mov	r1, r3
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f000 f897 	bl	800de00 <SetLineCoding>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800dcd6:	7bbb      	ldrb	r3, [r7, #14]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d104      	bne.n	800dce6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	2202      	movs	r2, #2
 800dce0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800dce4:	e058      	b.n	800dd98 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800dce6:	7bbb      	ldrb	r3, [r7, #14]
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	d055      	beq.n	800dd98 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	2204      	movs	r2, #4
 800dcf0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800dcf4:	e050      	b.n	800dd98 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	3340      	adds	r3, #64	; 0x40
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f000 f860 	bl	800ddc2 <GetLineCoding>
 800dd02:	4603      	mov	r3, r0
 800dd04:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800dd06:	7bbb      	ldrb	r3, [r7, #14]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d126      	bne.n	800dd5a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd1e:	791b      	ldrb	r3, [r3, #4]
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d13b      	bne.n	800dd9c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd2e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d133      	bne.n	800dd9c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd3e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d12b      	bne.n	800dd9c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd4c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d124      	bne.n	800dd9c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f000 f958 	bl	800e008 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800dd58:	e020      	b.n	800dd9c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800dd5a:	7bbb      	ldrb	r3, [r7, #14]
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	d01d      	beq.n	800dd9c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	2204      	movs	r2, #4
 800dd64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800dd68:	e018      	b.n	800dd9c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 f867 	bl	800de3e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f000 f8da 	bl	800df2a <CDC_ProcessReception>
      break;
 800dd76:	e014      	b.n	800dda2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800dd78:	2100      	movs	r1, #0
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f000 ffe3 	bl	800ed46 <USBH_ClrFeature>
 800dd80:	4603      	mov	r3, r0
 800dd82:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800dd84:	7bbb      	ldrb	r3, [r7, #14]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d10a      	bne.n	800dda0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800dd92:	e005      	b.n	800dda0 <USBH_CDC_Process+0x120>

    default:
      break;
 800dd94:	bf00      	nop
 800dd96:	e004      	b.n	800dda2 <USBH_CDC_Process+0x122>
      break;
 800dd98:	bf00      	nop
 800dd9a:	e002      	b.n	800dda2 <USBH_CDC_Process+0x122>
      break;
 800dd9c:	bf00      	nop
 800dd9e:	e000      	b.n	800dda2 <USBH_CDC_Process+0x122>
      break;
 800dda0:	bf00      	nop

  }

  return status;
 800dda2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3710      	adds	r7, #16
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ddb4:	2300      	movs	r3, #0
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	370c      	adds	r7, #12
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc0:	4770      	bx	lr

0800ddc2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ddc2:	b580      	push	{r7, lr}
 800ddc4:	b082      	sub	sp, #8
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	6078      	str	r0, [r7, #4]
 800ddca:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	22a1      	movs	r2, #161	; 0xa1
 800ddd0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2221      	movs	r2, #33	; 0x21
 800ddd6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2200      	movs	r2, #0
 800dddc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2200      	movs	r2, #0
 800dde2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2207      	movs	r2, #7
 800dde8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	2207      	movs	r2, #7
 800ddee:	4619      	mov	r1, r3
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f001 f988 	bl	800f106 <USBH_CtlReq>
 800ddf6:	4603      	mov	r3, r0
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3708      	adds	r7, #8
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b082      	sub	sp, #8
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
 800de08:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2221      	movs	r2, #33	; 0x21
 800de0e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2220      	movs	r2, #32
 800de14:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2200      	movs	r2, #0
 800de1a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2200      	movs	r2, #0
 800de20:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2207      	movs	r2, #7
 800de26:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	2207      	movs	r2, #7
 800de2c:	4619      	mov	r1, r3
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f001 f969 	bl	800f106 <USBH_CtlReq>
 800de34:	4603      	mov	r3, r0
}
 800de36:	4618      	mov	r0, r3
 800de38:	3708      	adds	r7, #8
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}

0800de3e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800de3e:	b580      	push	{r7, lr}
 800de40:	b086      	sub	sp, #24
 800de42:	af02      	add	r7, sp, #8
 800de44:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de4c:	69db      	ldr	r3, [r3, #28]
 800de4e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800de50:	2300      	movs	r3, #0
 800de52:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	d002      	beq.n	800de64 <CDC_ProcessTransmission+0x26>
 800de5e:	2b02      	cmp	r3, #2
 800de60:	d023      	beq.n	800deaa <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800de62:	e05e      	b.n	800df22 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de68:	68fa      	ldr	r2, [r7, #12]
 800de6a:	8b12      	ldrh	r2, [r2, #24]
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d90b      	bls.n	800de88 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	69d9      	ldr	r1, [r3, #28]
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	8b1a      	ldrh	r2, [r3, #24]
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	7b5b      	ldrb	r3, [r3, #13]
 800de7c:	2001      	movs	r0, #1
 800de7e:	9000      	str	r0, [sp, #0]
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f001 fb4e 	bl	800f522 <USBH_BulkSendData>
 800de86:	e00b      	b.n	800dea0 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800de90:	b29a      	uxth	r2, r3
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	7b5b      	ldrb	r3, [r3, #13]
 800de96:	2001      	movs	r0, #1
 800de98:	9000      	str	r0, [sp, #0]
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f001 fb41 	bl	800f522 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2202      	movs	r2, #2
 800dea4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800dea8:	e03b      	b.n	800df22 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	7b5b      	ldrb	r3, [r3, #13]
 800deae:	4619      	mov	r1, r3
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f001 feb5 	bl	800fc20 <USBH_LL_GetURBState>
 800deb6:	4603      	mov	r3, r0
 800deb8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800deba:	7afb      	ldrb	r3, [r7, #11]
 800debc:	2b01      	cmp	r3, #1
 800debe:	d128      	bne.n	800df12 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec4:	68fa      	ldr	r2, [r7, #12]
 800dec6:	8b12      	ldrh	r2, [r2, #24]
 800dec8:	4293      	cmp	r3, r2
 800deca:	d90e      	bls.n	800deea <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ded0:	68fa      	ldr	r2, [r7, #12]
 800ded2:	8b12      	ldrh	r2, [r2, #24]
 800ded4:	1a9a      	subs	r2, r3, r2
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	69db      	ldr	r3, [r3, #28]
 800dede:	68fa      	ldr	r2, [r7, #12]
 800dee0:	8b12      	ldrh	r2, [r2, #24]
 800dee2:	441a      	add	r2, r3
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	61da      	str	r2, [r3, #28]
 800dee8:	e002      	b.n	800def0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2200      	movs	r2, #0
 800deee:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def4:	2b00      	cmp	r3, #0
 800def6:	d004      	beq.n	800df02 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2201      	movs	r2, #1
 800defc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800df00:	e00e      	b.n	800df20 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2200      	movs	r2, #0
 800df06:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 f868 	bl	800dfe0 <USBH_CDC_TransmitCallback>
      break;
 800df10:	e006      	b.n	800df20 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800df12:	7afb      	ldrb	r3, [r7, #11]
 800df14:	2b02      	cmp	r3, #2
 800df16:	d103      	bne.n	800df20 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2201      	movs	r2, #1
 800df1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800df20:	bf00      	nop
  }
}
 800df22:	bf00      	nop
 800df24:	3710      	adds	r7, #16
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}

0800df2a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800df2a:	b580      	push	{r7, lr}
 800df2c:	b086      	sub	sp, #24
 800df2e:	af00      	add	r7, sp, #0
 800df30:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800df38:	69db      	ldr	r3, [r3, #28]
 800df3a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800df3c:	2300      	movs	r3, #0
 800df3e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800df46:	2b03      	cmp	r3, #3
 800df48:	d002      	beq.n	800df50 <CDC_ProcessReception+0x26>
 800df4a:	2b04      	cmp	r3, #4
 800df4c:	d00e      	beq.n	800df6c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800df4e:	e043      	b.n	800dfd8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	6a19      	ldr	r1, [r3, #32]
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	8b5a      	ldrh	r2, [r3, #26]
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	7b1b      	ldrb	r3, [r3, #12]
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f001 fb05 	bl	800f56c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	2204      	movs	r2, #4
 800df66:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800df6a:	e035      	b.n	800dfd8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	7b1b      	ldrb	r3, [r3, #12]
 800df70:	4619      	mov	r1, r3
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f001 fe54 	bl	800fc20 <USBH_LL_GetURBState>
 800df78:	4603      	mov	r3, r0
 800df7a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800df7c:	7cfb      	ldrb	r3, [r7, #19]
 800df7e:	2b01      	cmp	r3, #1
 800df80:	d129      	bne.n	800dfd6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	7b1b      	ldrb	r3, [r3, #12]
 800df86:	4619      	mov	r1, r3
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f001 fdb7 	bl	800fafc <USBH_LL_GetLastXferSize>
 800df8e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df94:	68fa      	ldr	r2, [r7, #12]
 800df96:	429a      	cmp	r2, r3
 800df98:	d016      	beq.n	800dfc8 <CDC_ProcessReception+0x9e>
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	8b5b      	ldrh	r3, [r3, #26]
 800df9e:	461a      	mov	r2, r3
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	4293      	cmp	r3, r2
 800dfa4:	d910      	bls.n	800dfc8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	1ad2      	subs	r2, r2, r3
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	6a1a      	ldr	r2, [r3, #32]
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	441a      	add	r2, r3
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	2203      	movs	r2, #3
 800dfc2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800dfc6:	e006      	b.n	800dfd6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f000 f80f 	bl	800dff4 <USBH_CDC_ReceiveCallback>
      break;
 800dfd6:	bf00      	nop
  }
}
 800dfd8:	bf00      	nop
 800dfda:	3718      	adds	r7, #24
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dfe8:	bf00      	nop
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b083      	sub	sp, #12
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dffc:	bf00      	nop
 800dffe:	370c      	adds	r7, #12
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr

0800e008 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e008:	b480      	push	{r7}
 800e00a:	b083      	sub	sp, #12
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e010:	bf00      	nop
 800e012:	370c      	adds	r7, #12
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	60f8      	str	r0, [r7, #12]
 800e024:	60b9      	str	r1, [r7, #8]
 800e026:	4613      	mov	r3, r2
 800e028:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d101      	bne.n	800e034 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e030:	2302      	movs	r3, #2
 800e032:	e029      	b.n	800e088 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	79fa      	ldrb	r2, [r7, #7]
 800e038:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	2200      	movs	r2, #0
 800e040:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	2200      	movs	r2, #0
 800e048:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e04c:	68f8      	ldr	r0, [r7, #12]
 800e04e:	f000 f81f 	bl	800e090 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	2200      	movs	r2, #0
 800e056:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2200      	movs	r2, #0
 800e05e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2200      	movs	r2, #0
 800e066:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	2200      	movs	r2, #0
 800e06e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d003      	beq.n	800e080 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	68ba      	ldr	r2, [r7, #8]
 800e07c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e080:	68f8      	ldr	r0, [r7, #12]
 800e082:	f001 fc87 	bl	800f994 <USBH_LL_Init>

  return USBH_OK;
 800e086:	2300      	movs	r3, #0
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3710      	adds	r7, #16
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e090:	b480      	push	{r7}
 800e092:	b085      	sub	sp, #20
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e098:	2300      	movs	r3, #0
 800e09a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e09c:	2300      	movs	r3, #0
 800e09e:	60fb      	str	r3, [r7, #12]
 800e0a0:	e009      	b.n	800e0b6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e0a2:	687a      	ldr	r2, [r7, #4]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	33e0      	adds	r3, #224	; 0xe0
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	4413      	add	r3, r2
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	60fb      	str	r3, [r7, #12]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2b0e      	cmp	r3, #14
 800e0ba:	d9f2      	bls.n	800e0a2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e0bc:	2300      	movs	r3, #0
 800e0be:	60fb      	str	r3, [r7, #12]
 800e0c0:	e009      	b.n	800e0d6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e0c2:	687a      	ldr	r2, [r7, #4]
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	4413      	add	r3, r2
 800e0c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	60fb      	str	r3, [r7, #12]
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0dc:	d3f1      	bcc.n	800e0c2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2240      	movs	r2, #64	; 0x40
 800e102:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2200      	movs	r2, #0
 800e108:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2200      	movs	r2, #0
 800e10e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2201      	movs	r2, #1
 800e116:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2200      	movs	r2, #0
 800e11e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2200      	movs	r2, #0
 800e126:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800e12a:	2300      	movs	r3, #0
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3714      	adds	r7, #20
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr

0800e138 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e138:	b480      	push	{r7}
 800e13a:	b085      	sub	sp, #20
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e142:	2300      	movs	r3, #0
 800e144:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d016      	beq.n	800e17a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e152:	2b00      	cmp	r3, #0
 800e154:	d10e      	bne.n	800e174 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e15c:	1c59      	adds	r1, r3, #1
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800e164:	687a      	ldr	r2, [r7, #4]
 800e166:	33de      	adds	r3, #222	; 0xde
 800e168:	6839      	ldr	r1, [r7, #0]
 800e16a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e16e:	2300      	movs	r3, #0
 800e170:	73fb      	strb	r3, [r7, #15]
 800e172:	e004      	b.n	800e17e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e174:	2302      	movs	r3, #2
 800e176:	73fb      	strb	r3, [r7, #15]
 800e178:	e001      	b.n	800e17e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e17a:	2302      	movs	r3, #2
 800e17c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e180:	4618      	mov	r0, r3
 800e182:	3714      	adds	r7, #20
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr

0800e18c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e18c:	b480      	push	{r7}
 800e18e:	b085      	sub	sp, #20
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	460b      	mov	r3, r1
 800e196:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e198:	2300      	movs	r3, #0
 800e19a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e1a2:	78fa      	ldrb	r2, [r7, #3]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d204      	bcs.n	800e1b2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	78fa      	ldrb	r2, [r7, #3]
 800e1ac:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e1b0:	e001      	b.n	800e1b6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e1b2:	2302      	movs	r3, #2
 800e1b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e1b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3714      	adds	r7, #20
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	4770      	bx	lr

0800e1c4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b087      	sub	sp, #28
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	4608      	mov	r0, r1
 800e1ce:	4611      	mov	r1, r2
 800e1d0:	461a      	mov	r2, r3
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	70fb      	strb	r3, [r7, #3]
 800e1d6:	460b      	mov	r3, r1
 800e1d8:	70bb      	strb	r3, [r7, #2]
 800e1da:	4613      	mov	r3, r2
 800e1dc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e1ec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e1ee:	e025      	b.n	800e23c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e1f0:	7dfb      	ldrb	r3, [r7, #23]
 800e1f2:	221a      	movs	r2, #26
 800e1f4:	fb02 f303 	mul.w	r3, r2, r3
 800e1f8:	3308      	adds	r3, #8
 800e1fa:	68fa      	ldr	r2, [r7, #12]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	3302      	adds	r3, #2
 800e200:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	795b      	ldrb	r3, [r3, #5]
 800e206:	78fa      	ldrb	r2, [r7, #3]
 800e208:	429a      	cmp	r2, r3
 800e20a:	d002      	beq.n	800e212 <USBH_FindInterface+0x4e>
 800e20c:	78fb      	ldrb	r3, [r7, #3]
 800e20e:	2bff      	cmp	r3, #255	; 0xff
 800e210:	d111      	bne.n	800e236 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e216:	78ba      	ldrb	r2, [r7, #2]
 800e218:	429a      	cmp	r2, r3
 800e21a:	d002      	beq.n	800e222 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e21c:	78bb      	ldrb	r3, [r7, #2]
 800e21e:	2bff      	cmp	r3, #255	; 0xff
 800e220:	d109      	bne.n	800e236 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e226:	787a      	ldrb	r2, [r7, #1]
 800e228:	429a      	cmp	r2, r3
 800e22a:	d002      	beq.n	800e232 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e22c:	787b      	ldrb	r3, [r7, #1]
 800e22e:	2bff      	cmp	r3, #255	; 0xff
 800e230:	d101      	bne.n	800e236 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e232:	7dfb      	ldrb	r3, [r7, #23]
 800e234:	e006      	b.n	800e244 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e236:	7dfb      	ldrb	r3, [r7, #23]
 800e238:	3301      	adds	r3, #1
 800e23a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e23c:	7dfb      	ldrb	r3, [r7, #23]
 800e23e:	2b01      	cmp	r3, #1
 800e240:	d9d6      	bls.n	800e1f0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e242:	23ff      	movs	r3, #255	; 0xff
}
 800e244:	4618      	mov	r0, r3
 800e246:	371c      	adds	r7, #28
 800e248:	46bd      	mov	sp, r7
 800e24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24e:	4770      	bx	lr

0800e250 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f001 fbd7 	bl	800fa0c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800e25e:	2101      	movs	r1, #1
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f001 fcf0 	bl	800fc46 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e266:	2300      	movs	r3, #0
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3708      	adds	r7, #8
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b088      	sub	sp, #32
 800e274:	af04      	add	r7, sp, #16
 800e276:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e278:	2302      	movs	r3, #2
 800e27a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e27c:	2300      	movs	r3, #0
 800e27e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e286:	b2db      	uxtb	r3, r3
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d102      	bne.n	800e292 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2203      	movs	r2, #3
 800e290:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	781b      	ldrb	r3, [r3, #0]
 800e296:	b2db      	uxtb	r3, r3
 800e298:	2b0b      	cmp	r3, #11
 800e29a:	f200 81b3 	bhi.w	800e604 <USBH_Process+0x394>
 800e29e:	a201      	add	r2, pc, #4	; (adr r2, 800e2a4 <USBH_Process+0x34>)
 800e2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2a4:	0800e2d5 	.word	0x0800e2d5
 800e2a8:	0800e307 	.word	0x0800e307
 800e2ac:	0800e36f 	.word	0x0800e36f
 800e2b0:	0800e59f 	.word	0x0800e59f
 800e2b4:	0800e605 	.word	0x0800e605
 800e2b8:	0800e413 	.word	0x0800e413
 800e2bc:	0800e545 	.word	0x0800e545
 800e2c0:	0800e449 	.word	0x0800e449
 800e2c4:	0800e469 	.word	0x0800e469
 800e2c8:	0800e489 	.word	0x0800e489
 800e2cc:	0800e4b7 	.word	0x0800e4b7
 800e2d0:	0800e587 	.word	0x0800e587
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e2da:	b2db      	uxtb	r3, r3
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	f000 8193 	beq.w	800e608 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e2e8:	20c8      	movs	r0, #200	; 0xc8
 800e2ea:	f001 fcf3 	bl	800fcd4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f001 fbe9 	bl	800fac6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2200      	movs	r2, #0
 800e300:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e304:	e180      	b.n	800e608 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800e30c:	2b01      	cmp	r3, #1
 800e30e:	d107      	bne.n	800e320 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2200      	movs	r2, #0
 800e314:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2202      	movs	r2, #2
 800e31c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e31e:	e182      	b.n	800e626 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e32a:	d914      	bls.n	800e356 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e332:	3301      	adds	r3, #1
 800e334:	b2da      	uxtb	r2, r3
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e342:	2b03      	cmp	r3, #3
 800e344:	d903      	bls.n	800e34e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	220d      	movs	r2, #13
 800e34a:	701a      	strb	r2, [r3, #0]
      break;
 800e34c:	e16b      	b.n	800e626 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2200      	movs	r2, #0
 800e352:	701a      	strb	r2, [r3, #0]
      break;
 800e354:	e167      	b.n	800e626 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e35c:	f103 020a 	add.w	r2, r3, #10
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800e366:	200a      	movs	r0, #10
 800e368:	f001 fcb4 	bl	800fcd4 <USBH_Delay>
      break;
 800e36c:	e15b      	b.n	800e626 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e374:	2b00      	cmp	r3, #0
 800e376:	d005      	beq.n	800e384 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e37e:	2104      	movs	r1, #4
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e384:	2064      	movs	r0, #100	; 0x64
 800e386:	f001 fca5 	bl	800fcd4 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f001 fb74 	bl	800fa78 <USBH_LL_GetSpeed>
 800e390:	4603      	mov	r3, r0
 800e392:	461a      	mov	r2, r3
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2205      	movs	r2, #5
 800e39e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e3a0:	2100      	movs	r1, #0
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f001 f92f 	bl	800f606 <USBH_AllocPipe>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e3b0:	2180      	movs	r1, #128	; 0x80
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f001 f927 	bl	800f606 <USBH_AllocPipe>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	7919      	ldrb	r1, [r3, #4]
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e3d0:	687a      	ldr	r2, [r7, #4]
 800e3d2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e3d4:	b292      	uxth	r2, r2
 800e3d6:	9202      	str	r2, [sp, #8]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	9201      	str	r2, [sp, #4]
 800e3dc:	9300      	str	r3, [sp, #0]
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2280      	movs	r2, #128	; 0x80
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f001 f8e0 	bl	800f5a8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	7959      	ldrb	r1, [r3, #5]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e3f8:	687a      	ldr	r2, [r7, #4]
 800e3fa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e3fc:	b292      	uxth	r2, r2
 800e3fe:	9202      	str	r2, [sp, #8]
 800e400:	2200      	movs	r2, #0
 800e402:	9201      	str	r2, [sp, #4]
 800e404:	9300      	str	r3, [sp, #0]
 800e406:	4603      	mov	r3, r0
 800e408:	2200      	movs	r2, #0
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f001 f8cc 	bl	800f5a8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e410:	e109      	b.n	800e626 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 f90c 	bl	800e630 <USBH_HandleEnum>
 800e418:	4603      	mov	r3, r0
 800e41a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e41c:	7bbb      	ldrb	r3, [r7, #14]
 800e41e:	b2db      	uxtb	r3, r3
 800e420:	2b00      	cmp	r3, #0
 800e422:	f040 80f3 	bne.w	800e60c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2200      	movs	r2, #0
 800e42a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800e434:	2b01      	cmp	r3, #1
 800e436:	d103      	bne.n	800e440 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2208      	movs	r2, #8
 800e43c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e43e:	e0e5      	b.n	800e60c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2207      	movs	r2, #7
 800e444:	701a      	strb	r2, [r3, #0]
      break;
 800e446:	e0e1      	b.n	800e60c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e44e:	2b00      	cmp	r3, #0
 800e450:	f000 80de 	beq.w	800e610 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e45a:	2101      	movs	r1, #1
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2208      	movs	r2, #8
 800e464:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e466:	e0d3      	b.n	800e610 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e46e:	b29b      	uxth	r3, r3
 800e470:	4619      	mov	r1, r3
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f000 fc20 	bl	800ecb8 <USBH_SetCfg>
 800e478:	4603      	mov	r3, r0
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	f040 80ca 	bne.w	800e614 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2209      	movs	r2, #9
 800e484:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e486:	e0c5      	b.n	800e614 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800e48e:	f003 0320 	and.w	r3, r3, #32
 800e492:	2b00      	cmp	r3, #0
 800e494:	d00b      	beq.n	800e4ae <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800e496:	2101      	movs	r1, #1
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f000 fc30 	bl	800ecfe <USBH_SetFeature>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	f040 80b9 	bne.w	800e618 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	220a      	movs	r2, #10
 800e4aa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e4ac:	e0b4      	b.n	800e618 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	220a      	movs	r2, #10
 800e4b2:	701a      	strb	r2, [r3, #0]
      break;
 800e4b4:	e0b0      	b.n	800e618 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	f000 80ad 	beq.w	800e61c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	73fb      	strb	r3, [r7, #15]
 800e4ce:	e016      	b.n	800e4fe <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e4d0:	7bfa      	ldrb	r2, [r7, #15]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	32de      	adds	r2, #222	; 0xde
 800e4d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4da:	791a      	ldrb	r2, [r3, #4]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d108      	bne.n	800e4f8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e4e6:	7bfa      	ldrb	r2, [r7, #15]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	32de      	adds	r2, #222	; 0xde
 800e4ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800e4f6:	e005      	b.n	800e504 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e4f8:	7bfb      	ldrb	r3, [r7, #15]
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	73fb      	strb	r3, [r7, #15]
 800e4fe:	7bfb      	ldrb	r3, [r7, #15]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d0e5      	beq.n	800e4d0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d016      	beq.n	800e53c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e514:	689b      	ldr	r3, [r3, #8]
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	4798      	blx	r3
 800e51a:	4603      	mov	r3, r0
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d109      	bne.n	800e534 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2206      	movs	r2, #6
 800e524:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e52c:	2103      	movs	r1, #3
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e532:	e073      	b.n	800e61c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	220d      	movs	r2, #13
 800e538:	701a      	strb	r2, [r3, #0]
      break;
 800e53a:	e06f      	b.n	800e61c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	220d      	movs	r2, #13
 800e540:	701a      	strb	r2, [r3, #0]
      break;
 800e542:	e06b      	b.n	800e61c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d017      	beq.n	800e57e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e554:	691b      	ldr	r3, [r3, #16]
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	4798      	blx	r3
 800e55a:	4603      	mov	r3, r0
 800e55c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e55e:	7bbb      	ldrb	r3, [r7, #14]
 800e560:	b2db      	uxtb	r3, r3
 800e562:	2b00      	cmp	r3, #0
 800e564:	d103      	bne.n	800e56e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	220b      	movs	r2, #11
 800e56a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e56c:	e058      	b.n	800e620 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800e56e:	7bbb      	ldrb	r3, [r7, #14]
 800e570:	b2db      	uxtb	r3, r3
 800e572:	2b02      	cmp	r3, #2
 800e574:	d154      	bne.n	800e620 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	220d      	movs	r2, #13
 800e57a:	701a      	strb	r2, [r3, #0]
      break;
 800e57c:	e050      	b.n	800e620 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	220d      	movs	r2, #13
 800e582:	701a      	strb	r2, [r3, #0]
      break;
 800e584:	e04c      	b.n	800e620 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d049      	beq.n	800e624 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e596:	695b      	ldr	r3, [r3, #20]
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	4798      	blx	r3
      }
      break;
 800e59c:	e042      	b.n	800e624 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f7ff fd72 	bl	800e090 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d009      	beq.n	800e5ca <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e5bc:	68db      	ldr	r3, [r3, #12]
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d005      	beq.n	800e5e0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e5da:	2105      	movs	r1, #5
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800e5e6:	b2db      	uxtb	r3, r3
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d107      	bne.n	800e5fc <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f7ff fe2b 	bl	800e250 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e5fa:	e014      	b.n	800e626 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f001 fa05 	bl	800fa0c <USBH_LL_Start>
      break;
 800e602:	e010      	b.n	800e626 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800e604:	bf00      	nop
 800e606:	e00e      	b.n	800e626 <USBH_Process+0x3b6>
      break;
 800e608:	bf00      	nop
 800e60a:	e00c      	b.n	800e626 <USBH_Process+0x3b6>
      break;
 800e60c:	bf00      	nop
 800e60e:	e00a      	b.n	800e626 <USBH_Process+0x3b6>
    break;
 800e610:	bf00      	nop
 800e612:	e008      	b.n	800e626 <USBH_Process+0x3b6>
      break;
 800e614:	bf00      	nop
 800e616:	e006      	b.n	800e626 <USBH_Process+0x3b6>
      break;
 800e618:	bf00      	nop
 800e61a:	e004      	b.n	800e626 <USBH_Process+0x3b6>
      break;
 800e61c:	bf00      	nop
 800e61e:	e002      	b.n	800e626 <USBH_Process+0x3b6>
      break;
 800e620:	bf00      	nop
 800e622:	e000      	b.n	800e626 <USBH_Process+0x3b6>
      break;
 800e624:	bf00      	nop
  }
  return USBH_OK;
 800e626:	2300      	movs	r3, #0
}
 800e628:	4618      	mov	r0, r3
 800e62a:	3710      	adds	r7, #16
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}

0800e630 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b088      	sub	sp, #32
 800e634:	af04      	add	r7, sp, #16
 800e636:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e638:	2301      	movs	r3, #1
 800e63a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800e63c:	2301      	movs	r3, #1
 800e63e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	785b      	ldrb	r3, [r3, #1]
 800e644:	2b07      	cmp	r3, #7
 800e646:	f200 81c1 	bhi.w	800e9cc <USBH_HandleEnum+0x39c>
 800e64a:	a201      	add	r2, pc, #4	; (adr r2, 800e650 <USBH_HandleEnum+0x20>)
 800e64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e650:	0800e671 	.word	0x0800e671
 800e654:	0800e72f 	.word	0x0800e72f
 800e658:	0800e799 	.word	0x0800e799
 800e65c:	0800e827 	.word	0x0800e827
 800e660:	0800e891 	.word	0x0800e891
 800e664:	0800e901 	.word	0x0800e901
 800e668:	0800e947 	.word	0x0800e947
 800e66c:	0800e98d 	.word	0x0800e98d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800e670:	2108      	movs	r1, #8
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f000 fa50 	bl	800eb18 <USBH_Get_DevDesc>
 800e678:	4603      	mov	r3, r0
 800e67a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e67c:	7bbb      	ldrb	r3, [r7, #14]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d130      	bne.n	800e6e4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2201      	movs	r2, #1
 800e690:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	7919      	ldrb	r1, [r3, #4]
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e6a2:	687a      	ldr	r2, [r7, #4]
 800e6a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e6a6:	b292      	uxth	r2, r2
 800e6a8:	9202      	str	r2, [sp, #8]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	9201      	str	r2, [sp, #4]
 800e6ae:	9300      	str	r3, [sp, #0]
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	2280      	movs	r2, #128	; 0x80
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f000 ff77 	bl	800f5a8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	7959      	ldrb	r1, [r3, #5]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e6ce:	b292      	uxth	r2, r2
 800e6d0:	9202      	str	r2, [sp, #8]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	9201      	str	r2, [sp, #4]
 800e6d6:	9300      	str	r3, [sp, #0]
 800e6d8:	4603      	mov	r3, r0
 800e6da:	2200      	movs	r2, #0
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f000 ff63 	bl	800f5a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e6e2:	e175      	b.n	800e9d0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e6e4:	7bbb      	ldrb	r3, [r7, #14]
 800e6e6:	2b03      	cmp	r3, #3
 800e6e8:	f040 8172 	bne.w	800e9d0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	b2da      	uxtb	r2, r3
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e702:	2b03      	cmp	r3, #3
 800e704:	d903      	bls.n	800e70e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	220d      	movs	r2, #13
 800e70a:	701a      	strb	r2, [r3, #0]
      break;
 800e70c:	e160      	b.n	800e9d0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	795b      	ldrb	r3, [r3, #5]
 800e712:	4619      	mov	r1, r3
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f000 ff97 	bl	800f648 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	791b      	ldrb	r3, [r3, #4]
 800e71e:	4619      	mov	r1, r3
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f000 ff91 	bl	800f648 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2200      	movs	r2, #0
 800e72a:	701a      	strb	r2, [r3, #0]
      break;
 800e72c:	e150      	b.n	800e9d0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800e72e:	2112      	movs	r1, #18
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f000 f9f1 	bl	800eb18 <USBH_Get_DevDesc>
 800e736:	4603      	mov	r3, r0
 800e738:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e73a:	7bbb      	ldrb	r3, [r7, #14]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d103      	bne.n	800e748 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2202      	movs	r2, #2
 800e744:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e746:	e145      	b.n	800e9d4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e748:	7bbb      	ldrb	r3, [r7, #14]
 800e74a:	2b03      	cmp	r3, #3
 800e74c:	f040 8142 	bne.w	800e9d4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e756:	3301      	adds	r3, #1
 800e758:	b2da      	uxtb	r2, r3
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e766:	2b03      	cmp	r3, #3
 800e768:	d903      	bls.n	800e772 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	220d      	movs	r2, #13
 800e76e:	701a      	strb	r2, [r3, #0]
      break;
 800e770:	e130      	b.n	800e9d4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	795b      	ldrb	r3, [r3, #5]
 800e776:	4619      	mov	r1, r3
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f000 ff65 	bl	800f648 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	791b      	ldrb	r3, [r3, #4]
 800e782:	4619      	mov	r1, r3
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f000 ff5f 	bl	800f648 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2200      	movs	r2, #0
 800e78e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2200      	movs	r2, #0
 800e794:	701a      	strb	r2, [r3, #0]
      break;
 800e796:	e11d      	b.n	800e9d4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800e798:	2101      	movs	r1, #1
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f000 fa68 	bl	800ec70 <USBH_SetAddress>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e7a4:	7bbb      	ldrb	r3, [r7, #14]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d132      	bne.n	800e810 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800e7aa:	2002      	movs	r0, #2
 800e7ac:	f001 fa92 	bl	800fcd4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2201      	movs	r2, #1
 800e7b4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2203      	movs	r2, #3
 800e7bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	7919      	ldrb	r1, [r3, #4]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e7d2:	b292      	uxth	r2, r2
 800e7d4:	9202      	str	r2, [sp, #8]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	9201      	str	r2, [sp, #4]
 800e7da:	9300      	str	r3, [sp, #0]
 800e7dc:	4603      	mov	r3, r0
 800e7de:	2280      	movs	r2, #128	; 0x80
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f000 fee1 	bl	800f5a8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	7959      	ldrb	r1, [r3, #5]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e7fa:	b292      	uxth	r2, r2
 800e7fc:	9202      	str	r2, [sp, #8]
 800e7fe:	2200      	movs	r2, #0
 800e800:	9201      	str	r2, [sp, #4]
 800e802:	9300      	str	r3, [sp, #0]
 800e804:	4603      	mov	r3, r0
 800e806:	2200      	movs	r2, #0
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f000 fecd 	bl	800f5a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e80e:	e0e3      	b.n	800e9d8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e810:	7bbb      	ldrb	r3, [r7, #14]
 800e812:	2b03      	cmp	r3, #3
 800e814:	f040 80e0 	bne.w	800e9d8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	220d      	movs	r2, #13
 800e81c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2200      	movs	r2, #0
 800e822:	705a      	strb	r2, [r3, #1]
      break;
 800e824:	e0d8      	b.n	800e9d8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800e826:	2109      	movs	r1, #9
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f000 f99d 	bl	800eb68 <USBH_Get_CfgDesc>
 800e82e:	4603      	mov	r3, r0
 800e830:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e832:	7bbb      	ldrb	r3, [r7, #14]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d103      	bne.n	800e840 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2204      	movs	r2, #4
 800e83c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e83e:	e0cd      	b.n	800e9dc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e840:	7bbb      	ldrb	r3, [r7, #14]
 800e842:	2b03      	cmp	r3, #3
 800e844:	f040 80ca 	bne.w	800e9dc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e84e:	3301      	adds	r3, #1
 800e850:	b2da      	uxtb	r2, r3
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e85e:	2b03      	cmp	r3, #3
 800e860:	d903      	bls.n	800e86a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	220d      	movs	r2, #13
 800e866:	701a      	strb	r2, [r3, #0]
      break;
 800e868:	e0b8      	b.n	800e9dc <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	795b      	ldrb	r3, [r3, #5]
 800e86e:	4619      	mov	r1, r3
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f000 fee9 	bl	800f648 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	791b      	ldrb	r3, [r3, #4]
 800e87a:	4619      	mov	r1, r3
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f000 fee3 	bl	800f648 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2200      	movs	r2, #0
 800e886:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2200      	movs	r2, #0
 800e88c:	701a      	strb	r2, [r3, #0]
      break;
 800e88e:	e0a5      	b.n	800e9dc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800e896:	4619      	mov	r1, r3
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f000 f965 	bl	800eb68 <USBH_Get_CfgDesc>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e8a2:	7bbb      	ldrb	r3, [r7, #14]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d103      	bne.n	800e8b0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2205      	movs	r2, #5
 800e8ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e8ae:	e097      	b.n	800e9e0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e8b0:	7bbb      	ldrb	r3, [r7, #14]
 800e8b2:	2b03      	cmp	r3, #3
 800e8b4:	f040 8094 	bne.w	800e9e0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e8be:	3301      	adds	r3, #1
 800e8c0:	b2da      	uxtb	r2, r3
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e8ce:	2b03      	cmp	r3, #3
 800e8d0:	d903      	bls.n	800e8da <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	220d      	movs	r2, #13
 800e8d6:	701a      	strb	r2, [r3, #0]
      break;
 800e8d8:	e082      	b.n	800e9e0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	795b      	ldrb	r3, [r3, #5]
 800e8de:	4619      	mov	r1, r3
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f000 feb1 	bl	800f648 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	791b      	ldrb	r3, [r3, #4]
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f000 feab 	bl	800f648 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	701a      	strb	r2, [r3, #0]
      break;
 800e8fe:	e06f      	b.n	800e9e0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800e906:	2b00      	cmp	r3, #0
 800e908:	d019      	beq.n	800e93e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e916:	23ff      	movs	r3, #255	; 0xff
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 f949 	bl	800ebb0 <USBH_Get_StringDesc>
 800e91e:	4603      	mov	r3, r0
 800e920:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e922:	7bbb      	ldrb	r3, [r7, #14]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d103      	bne.n	800e930 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2206      	movs	r2, #6
 800e92c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e92e:	e059      	b.n	800e9e4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e930:	7bbb      	ldrb	r3, [r7, #14]
 800e932:	2b03      	cmp	r3, #3
 800e934:	d156      	bne.n	800e9e4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2206      	movs	r2, #6
 800e93a:	705a      	strb	r2, [r3, #1]
      break;
 800e93c:	e052      	b.n	800e9e4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2206      	movs	r2, #6
 800e942:	705a      	strb	r2, [r3, #1]
      break;
 800e944:	e04e      	b.n	800e9e4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d019      	beq.n	800e984 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e95c:	23ff      	movs	r3, #255	; 0xff
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 f926 	bl	800ebb0 <USBH_Get_StringDesc>
 800e964:	4603      	mov	r3, r0
 800e966:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e968:	7bbb      	ldrb	r3, [r7, #14]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d103      	bne.n	800e976 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2207      	movs	r2, #7
 800e972:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e974:	e038      	b.n	800e9e8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e976:	7bbb      	ldrb	r3, [r7, #14]
 800e978:	2b03      	cmp	r3, #3
 800e97a:	d135      	bne.n	800e9e8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2207      	movs	r2, #7
 800e980:	705a      	strb	r2, [r3, #1]
      break;
 800e982:	e031      	b.n	800e9e8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2207      	movs	r2, #7
 800e988:	705a      	strb	r2, [r3, #1]
      break;
 800e98a:	e02d      	b.n	800e9e8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800e992:	2b00      	cmp	r3, #0
 800e994:	d017      	beq.n	800e9c6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e9a2:	23ff      	movs	r3, #255	; 0xff
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f000 f903 	bl	800ebb0 <USBH_Get_StringDesc>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e9ae:	7bbb      	ldrb	r3, [r7, #14]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d102      	bne.n	800e9ba <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800e9b8:	e018      	b.n	800e9ec <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e9ba:	7bbb      	ldrb	r3, [r7, #14]
 800e9bc:	2b03      	cmp	r3, #3
 800e9be:	d115      	bne.n	800e9ec <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	73fb      	strb	r3, [r7, #15]
      break;
 800e9c4:	e012      	b.n	800e9ec <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	73fb      	strb	r3, [r7, #15]
      break;
 800e9ca:	e00f      	b.n	800e9ec <USBH_HandleEnum+0x3bc>

    default:
      break;
 800e9cc:	bf00      	nop
 800e9ce:	e00e      	b.n	800e9ee <USBH_HandleEnum+0x3be>
      break;
 800e9d0:	bf00      	nop
 800e9d2:	e00c      	b.n	800e9ee <USBH_HandleEnum+0x3be>
      break;
 800e9d4:	bf00      	nop
 800e9d6:	e00a      	b.n	800e9ee <USBH_HandleEnum+0x3be>
      break;
 800e9d8:	bf00      	nop
 800e9da:	e008      	b.n	800e9ee <USBH_HandleEnum+0x3be>
      break;
 800e9dc:	bf00      	nop
 800e9de:	e006      	b.n	800e9ee <USBH_HandleEnum+0x3be>
      break;
 800e9e0:	bf00      	nop
 800e9e2:	e004      	b.n	800e9ee <USBH_HandleEnum+0x3be>
      break;
 800e9e4:	bf00      	nop
 800e9e6:	e002      	b.n	800e9ee <USBH_HandleEnum+0x3be>
      break;
 800e9e8:	bf00      	nop
 800e9ea:	e000      	b.n	800e9ee <USBH_HandleEnum+0x3be>
      break;
 800e9ec:	bf00      	nop
  }
  return Status;
 800e9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3710      	adds	r7, #16
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b083      	sub	sp, #12
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	683a      	ldr	r2, [r7, #0]
 800ea06:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ea0a:	bf00      	nop
 800ea0c:	370c      	adds	r7, #12
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea14:	4770      	bx	lr

0800ea16 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ea16:	b580      	push	{r7, lr}
 800ea18:	b082      	sub	sp, #8
 800ea1a:	af00      	add	r7, sp, #0
 800ea1c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ea24:	1c5a      	adds	r2, r3, #1
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f000 f804 	bl	800ea3a <USBH_HandleSof>
}
 800ea32:	bf00      	nop
 800ea34:	3708      	adds	r7, #8
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}

0800ea3a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ea3a:	b580      	push	{r7, lr}
 800ea3c:	b082      	sub	sp, #8
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	781b      	ldrb	r3, [r3, #0]
 800ea46:	b2db      	uxtb	r3, r3
 800ea48:	2b0b      	cmp	r3, #11
 800ea4a:	d10a      	bne.n	800ea62 <USBH_HandleSof+0x28>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d005      	beq.n	800ea62 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ea5c:	699b      	ldr	r3, [r3, #24]
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	4798      	blx	r3
  }
}
 800ea62:	bf00      	nop
 800ea64:	3708      	adds	r7, #8
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}

0800ea6a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ea6a:	b480      	push	{r7}
 800ea6c:	b083      	sub	sp, #12
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2201      	movs	r2, #1
 800ea76:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800ea7a:	bf00      	nop
}
 800ea7c:	370c      	adds	r7, #12
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea84:	4770      	bx	lr

0800ea86 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ea86:	b480      	push	{r7}
 800ea88:	b083      	sub	sp, #12
 800ea8a:	af00      	add	r7, sp, #0
 800ea8c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2200      	movs	r2, #0
 800ea92:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ea96:	bf00      	nop
}
 800ea98:	370c      	adds	r7, #12
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr

0800eaa2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800eaa2:	b480      	push	{r7}
 800eaa4:	b083      	sub	sp, #12
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2201      	movs	r2, #1
 800eaae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2200      	movs	r2, #0
 800eab6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2200      	movs	r2, #0
 800eabe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800eac2:	2300      	movs	r3, #0
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	370c      	adds	r7, #12
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2201      	movs	r2, #1
 800eadc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2200      	movs	r2, #0
 800eae4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2200      	movs	r2, #0
 800eaec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f000 ffa6 	bl	800fa42 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	791b      	ldrb	r3, [r3, #4]
 800eafa:	4619      	mov	r1, r3
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f000 fda3 	bl	800f648 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	795b      	ldrb	r3, [r3, #5]
 800eb06:	4619      	mov	r1, r3
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f000 fd9d 	bl	800f648 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800eb0e:	2300      	movs	r3, #0
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3708      	adds	r7, #8
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b086      	sub	sp, #24
 800eb1c:	af02      	add	r7, sp, #8
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	460b      	mov	r3, r1
 800eb22:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800eb2a:	78fb      	ldrb	r3, [r7, #3]
 800eb2c:	b29b      	uxth	r3, r3
 800eb2e:	9300      	str	r3, [sp, #0]
 800eb30:	4613      	mov	r3, r2
 800eb32:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eb36:	2100      	movs	r1, #0
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f000 f864 	bl	800ec06 <USBH_GetDescriptor>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	73fb      	strb	r3, [r7, #15]
 800eb42:	7bfb      	ldrb	r3, [r7, #15]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d10a      	bne.n	800eb5e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800eb54:	78fa      	ldrb	r2, [r7, #3]
 800eb56:	b292      	uxth	r2, r2
 800eb58:	4619      	mov	r1, r3
 800eb5a:	f000 f918 	bl	800ed8e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800eb5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3710      	adds	r7, #16
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b086      	sub	sp, #24
 800eb6c:	af02      	add	r7, sp, #8
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	460b      	mov	r3, r1
 800eb72:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	331c      	adds	r3, #28
 800eb78:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800eb7a:	887b      	ldrh	r3, [r7, #2]
 800eb7c:	9300      	str	r3, [sp, #0]
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb84:	2100      	movs	r1, #0
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f000 f83d 	bl	800ec06 <USBH_GetDescriptor>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	72fb      	strb	r3, [r7, #11]
 800eb90:	7afb      	ldrb	r3, [r7, #11]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d107      	bne.n	800eba6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800eb9c:	887a      	ldrh	r2, [r7, #2]
 800eb9e:	68f9      	ldr	r1, [r7, #12]
 800eba0:	4618      	mov	r0, r3
 800eba2:	f000 f964 	bl	800ee6e <USBH_ParseCfgDesc>
  }

  return status;
 800eba6:	7afb      	ldrb	r3, [r7, #11]
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3710      	adds	r7, #16
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b088      	sub	sp, #32
 800ebb4:	af02      	add	r7, sp, #8
 800ebb6:	60f8      	str	r0, [r7, #12]
 800ebb8:	607a      	str	r2, [r7, #4]
 800ebba:	461a      	mov	r2, r3
 800ebbc:	460b      	mov	r3, r1
 800ebbe:	72fb      	strb	r3, [r7, #11]
 800ebc0:	4613      	mov	r3, r2
 800ebc2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ebc4:	7afb      	ldrb	r3, [r7, #11]
 800ebc6:	b29b      	uxth	r3, r3
 800ebc8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ebcc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ebd4:	893b      	ldrh	r3, [r7, #8]
 800ebd6:	9300      	str	r3, [sp, #0]
 800ebd8:	460b      	mov	r3, r1
 800ebda:	2100      	movs	r1, #0
 800ebdc:	68f8      	ldr	r0, [r7, #12]
 800ebde:	f000 f812 	bl	800ec06 <USBH_GetDescriptor>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	75fb      	strb	r3, [r7, #23]
 800ebe6:	7dfb      	ldrb	r3, [r7, #23]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d107      	bne.n	800ebfc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ebf2:	893a      	ldrh	r2, [r7, #8]
 800ebf4:	6879      	ldr	r1, [r7, #4]
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f000 fa37 	bl	800f06a <USBH_ParseStringDesc>
  }

  return status;
 800ebfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3718      	adds	r7, #24
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}

0800ec06 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ec06:	b580      	push	{r7, lr}
 800ec08:	b084      	sub	sp, #16
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	60f8      	str	r0, [r7, #12]
 800ec0e:	607b      	str	r3, [r7, #4]
 800ec10:	460b      	mov	r3, r1
 800ec12:	72fb      	strb	r3, [r7, #11]
 800ec14:	4613      	mov	r3, r2
 800ec16:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	789b      	ldrb	r3, [r3, #2]
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	d11c      	bne.n	800ec5a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ec20:	7afb      	ldrb	r3, [r7, #11]
 800ec22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ec26:	b2da      	uxtb	r2, r3
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2206      	movs	r2, #6
 800ec30:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	893a      	ldrh	r2, [r7, #8]
 800ec36:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ec38:	893b      	ldrh	r3, [r7, #8]
 800ec3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ec3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ec42:	d104      	bne.n	800ec4e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f240 4209 	movw	r2, #1033	; 0x409
 800ec4a:	829a      	strh	r2, [r3, #20]
 800ec4c:	e002      	b.n	800ec54 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	2200      	movs	r2, #0
 800ec52:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	8b3a      	ldrh	r2, [r7, #24]
 800ec58:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ec5a:	8b3b      	ldrh	r3, [r7, #24]
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	6879      	ldr	r1, [r7, #4]
 800ec60:	68f8      	ldr	r0, [r7, #12]
 800ec62:	f000 fa50 	bl	800f106 <USBH_CtlReq>
 800ec66:	4603      	mov	r3, r0
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3710      	adds	r7, #16
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b082      	sub	sp, #8
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	460b      	mov	r3, r1
 800ec7a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	789b      	ldrb	r3, [r3, #2]
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	d10f      	bne.n	800eca4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2200      	movs	r2, #0
 800ec88:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2205      	movs	r2, #5
 800ec8e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ec90:	78fb      	ldrb	r3, [r7, #3]
 800ec92:	b29a      	uxth	r2, r3
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2200      	movs	r2, #0
 800eca2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800eca4:	2200      	movs	r2, #0
 800eca6:	2100      	movs	r1, #0
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f000 fa2c 	bl	800f106 <USBH_CtlReq>
 800ecae:	4603      	mov	r3, r0
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3708      	adds	r7, #8
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b082      	sub	sp, #8
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	460b      	mov	r3, r1
 800ecc2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	789b      	ldrb	r3, [r3, #2]
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d10e      	bne.n	800ecea <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2209      	movs	r2, #9
 800ecd6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	887a      	ldrh	r2, [r7, #2]
 800ecdc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2200      	movs	r2, #0
 800ece2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2200      	movs	r2, #0
 800ece8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ecea:	2200      	movs	r2, #0
 800ecec:	2100      	movs	r1, #0
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f000 fa09 	bl	800f106 <USBH_CtlReq>
 800ecf4:	4603      	mov	r3, r0
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3708      	adds	r7, #8
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}

0800ecfe <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ecfe:	b580      	push	{r7, lr}
 800ed00:	b082      	sub	sp, #8
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	6078      	str	r0, [r7, #4]
 800ed06:	460b      	mov	r3, r1
 800ed08:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	789b      	ldrb	r3, [r3, #2]
 800ed0e:	2b01      	cmp	r3, #1
 800ed10:	d10f      	bne.n	800ed32 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2200      	movs	r2, #0
 800ed16:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2203      	movs	r2, #3
 800ed1c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ed1e:	78fb      	ldrb	r3, [r7, #3]
 800ed20:	b29a      	uxth	r2, r3
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ed32:	2200      	movs	r2, #0
 800ed34:	2100      	movs	r1, #0
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f000 f9e5 	bl	800f106 <USBH_CtlReq>
 800ed3c:	4603      	mov	r3, r0
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3708      	adds	r7, #8
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}

0800ed46 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ed46:	b580      	push	{r7, lr}
 800ed48:	b082      	sub	sp, #8
 800ed4a:	af00      	add	r7, sp, #0
 800ed4c:	6078      	str	r0, [r7, #4]
 800ed4e:	460b      	mov	r3, r1
 800ed50:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	789b      	ldrb	r3, [r3, #2]
 800ed56:	2b01      	cmp	r3, #1
 800ed58:	d10f      	bne.n	800ed7a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2202      	movs	r2, #2
 800ed5e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2201      	movs	r2, #1
 800ed64:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ed6c:	78fb      	ldrb	r3, [r7, #3]
 800ed6e:	b29a      	uxth	r2, r3
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2200      	movs	r2, #0
 800ed78:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	2100      	movs	r1, #0
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f000 f9c1 	bl	800f106 <USBH_CtlReq>
 800ed84:	4603      	mov	r3, r0
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	3708      	adds	r7, #8
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}

0800ed8e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ed8e:	b480      	push	{r7}
 800ed90:	b085      	sub	sp, #20
 800ed92:	af00      	add	r7, sp, #0
 800ed94:	60f8      	str	r0, [r7, #12]
 800ed96:	60b9      	str	r1, [r7, #8]
 800ed98:	4613      	mov	r3, r2
 800ed9a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ed9c:	68bb      	ldr	r3, [r7, #8]
 800ed9e:	781a      	ldrb	r2, [r3, #0]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	785a      	ldrb	r2, [r3, #1]
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	3302      	adds	r3, #2
 800edb0:	781b      	ldrb	r3, [r3, #0]
 800edb2:	b29a      	uxth	r2, r3
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	3303      	adds	r3, #3
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	b29b      	uxth	r3, r3
 800edbc:	021b      	lsls	r3, r3, #8
 800edbe:	b29b      	uxth	r3, r3
 800edc0:	4313      	orrs	r3, r2
 800edc2:	b29a      	uxth	r2, r3
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	791a      	ldrb	r2, [r3, #4]
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	795a      	ldrb	r2, [r3, #5]
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	799a      	ldrb	r2, [r3, #6]
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	79da      	ldrb	r2, [r3, #7]
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ede8:	88fb      	ldrh	r3, [r7, #6]
 800edea:	2b08      	cmp	r3, #8
 800edec:	d939      	bls.n	800ee62 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	3308      	adds	r3, #8
 800edf2:	781b      	ldrb	r3, [r3, #0]
 800edf4:	b29a      	uxth	r2, r3
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	3309      	adds	r3, #9
 800edfa:	781b      	ldrb	r3, [r3, #0]
 800edfc:	b29b      	uxth	r3, r3
 800edfe:	021b      	lsls	r3, r3, #8
 800ee00:	b29b      	uxth	r3, r3
 800ee02:	4313      	orrs	r3, r2
 800ee04:	b29a      	uxth	r2, r3
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	330a      	adds	r3, #10
 800ee0e:	781b      	ldrb	r3, [r3, #0]
 800ee10:	b29a      	uxth	r2, r3
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	330b      	adds	r3, #11
 800ee16:	781b      	ldrb	r3, [r3, #0]
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	021b      	lsls	r3, r3, #8
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	4313      	orrs	r3, r2
 800ee20:	b29a      	uxth	r2, r3
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	330c      	adds	r3, #12
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	b29a      	uxth	r2, r3
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	330d      	adds	r3, #13
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	021b      	lsls	r3, r3, #8
 800ee38:	b29b      	uxth	r3, r3
 800ee3a:	4313      	orrs	r3, r2
 800ee3c:	b29a      	uxth	r2, r3
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	7b9a      	ldrb	r2, [r3, #14]
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	7bda      	ldrb	r2, [r3, #15]
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	7c1a      	ldrb	r2, [r3, #16]
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	7c5a      	ldrb	r2, [r3, #17]
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	745a      	strb	r2, [r3, #17]
  }
}
 800ee62:	bf00      	nop
 800ee64:	3714      	adds	r7, #20
 800ee66:	46bd      	mov	sp, r7
 800ee68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6c:	4770      	bx	lr

0800ee6e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800ee6e:	b580      	push	{r7, lr}
 800ee70:	b08a      	sub	sp, #40	; 0x28
 800ee72:	af00      	add	r7, sp, #0
 800ee74:	60f8      	str	r0, [r7, #12]
 800ee76:	60b9      	str	r1, [r7, #8]
 800ee78:	4613      	mov	r3, r2
 800ee7a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ee80:	2300      	movs	r3, #0
 800ee82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800ee86:	2300      	movs	r3, #0
 800ee88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	781a      	ldrb	r2, [r3, #0]
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	785a      	ldrb	r2, [r3, #1]
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	3302      	adds	r3, #2
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	b29a      	uxth	r2, r3
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	3303      	adds	r3, #3
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	b29b      	uxth	r3, r3
 800eeb0:	021b      	lsls	r3, r3, #8
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	4313      	orrs	r3, r2
 800eeb6:	b29a      	uxth	r2, r3
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	791a      	ldrb	r2, [r3, #4]
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	795a      	ldrb	r2, [r3, #5]
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	799a      	ldrb	r2, [r3, #6]
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	79da      	ldrb	r2, [r3, #7]
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	7a1a      	ldrb	r2, [r3, #8]
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800eee4:	88fb      	ldrh	r3, [r7, #6]
 800eee6:	2b09      	cmp	r3, #9
 800eee8:	d95f      	bls.n	800efaa <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800eeea:	2309      	movs	r3, #9
 800eeec:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800eeee:	2300      	movs	r3, #0
 800eef0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800eef2:	e051      	b.n	800ef98 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800eef4:	f107 0316 	add.w	r3, r7, #22
 800eef8:	4619      	mov	r1, r3
 800eefa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eefc:	f000 f8e8 	bl	800f0d0 <USBH_GetNextDesc>
 800ef00:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ef02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef04:	785b      	ldrb	r3, [r3, #1]
 800ef06:	2b04      	cmp	r3, #4
 800ef08:	d146      	bne.n	800ef98 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800ef0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ef0e:	221a      	movs	r2, #26
 800ef10:	fb02 f303 	mul.w	r3, r2, r3
 800ef14:	3308      	adds	r3, #8
 800ef16:	68fa      	ldr	r2, [r7, #12]
 800ef18:	4413      	add	r3, r2
 800ef1a:	3302      	adds	r3, #2
 800ef1c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ef1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef20:	69f8      	ldr	r0, [r7, #28]
 800ef22:	f000 f846 	bl	800efb2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ef26:	2300      	movs	r3, #0
 800ef28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ef30:	e022      	b.n	800ef78 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ef32:	f107 0316 	add.w	r3, r7, #22
 800ef36:	4619      	mov	r1, r3
 800ef38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef3a:	f000 f8c9 	bl	800f0d0 <USBH_GetNextDesc>
 800ef3e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ef40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef42:	785b      	ldrb	r3, [r3, #1]
 800ef44:	2b05      	cmp	r3, #5
 800ef46:	d117      	bne.n	800ef78 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ef48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ef4c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ef50:	3201      	adds	r2, #1
 800ef52:	00d2      	lsls	r2, r2, #3
 800ef54:	211a      	movs	r1, #26
 800ef56:	fb01 f303 	mul.w	r3, r1, r3
 800ef5a:	4413      	add	r3, r2
 800ef5c:	3308      	adds	r3, #8
 800ef5e:	68fa      	ldr	r2, [r7, #12]
 800ef60:	4413      	add	r3, r2
 800ef62:	3304      	adds	r3, #4
 800ef64:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ef66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef68:	69b8      	ldr	r0, [r7, #24]
 800ef6a:	f000 f851 	bl	800f010 <USBH_ParseEPDesc>
            ep_ix++;
 800ef6e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ef72:	3301      	adds	r3, #1
 800ef74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ef78:	69fb      	ldr	r3, [r7, #28]
 800ef7a:	791b      	ldrb	r3, [r3, #4]
 800ef7c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d204      	bcs.n	800ef8e <USBH_ParseCfgDesc+0x120>
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	885a      	ldrh	r2, [r3, #2]
 800ef88:	8afb      	ldrh	r3, [r7, #22]
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d8d1      	bhi.n	800ef32 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ef8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ef92:	3301      	adds	r3, #1
 800ef94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ef98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ef9c:	2b01      	cmp	r3, #1
 800ef9e:	d804      	bhi.n	800efaa <USBH_ParseCfgDesc+0x13c>
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	885a      	ldrh	r2, [r3, #2]
 800efa4:	8afb      	ldrh	r3, [r7, #22]
 800efa6:	429a      	cmp	r2, r3
 800efa8:	d8a4      	bhi.n	800eef4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800efaa:	bf00      	nop
 800efac:	3728      	adds	r7, #40	; 0x28
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}

0800efb2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800efb2:	b480      	push	{r7}
 800efb4:	b083      	sub	sp, #12
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	6078      	str	r0, [r7, #4]
 800efba:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	781a      	ldrb	r2, [r3, #0]
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	785a      	ldrb	r2, [r3, #1]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	789a      	ldrb	r2, [r3, #2]
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	78da      	ldrb	r2, [r3, #3]
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	791a      	ldrb	r2, [r3, #4]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	795a      	ldrb	r2, [r3, #5]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	799a      	ldrb	r2, [r3, #6]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	79da      	ldrb	r2, [r3, #7]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	7a1a      	ldrb	r2, [r3, #8]
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	721a      	strb	r2, [r3, #8]
}
 800f004:	bf00      	nop
 800f006:	370c      	adds	r7, #12
 800f008:	46bd      	mov	sp, r7
 800f00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00e:	4770      	bx	lr

0800f010 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800f010:	b480      	push	{r7}
 800f012:	b083      	sub	sp, #12
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
 800f018:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	781a      	ldrb	r2, [r3, #0]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	785a      	ldrb	r2, [r3, #1]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	789a      	ldrb	r2, [r3, #2]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	78da      	ldrb	r2, [r3, #3]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	3304      	adds	r3, #4
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	b29a      	uxth	r2, r3
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	3305      	adds	r3, #5
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	b29b      	uxth	r3, r3
 800f04a:	021b      	lsls	r3, r3, #8
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	4313      	orrs	r3, r2
 800f050:	b29a      	uxth	r2, r3
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	799a      	ldrb	r2, [r3, #6]
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	719a      	strb	r2, [r3, #6]
}
 800f05e:	bf00      	nop
 800f060:	370c      	adds	r7, #12
 800f062:	46bd      	mov	sp, r7
 800f064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f068:	4770      	bx	lr

0800f06a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f06a:	b480      	push	{r7}
 800f06c:	b087      	sub	sp, #28
 800f06e:	af00      	add	r7, sp, #0
 800f070:	60f8      	str	r0, [r7, #12]
 800f072:	60b9      	str	r1, [r7, #8]
 800f074:	4613      	mov	r3, r2
 800f076:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	3301      	adds	r3, #1
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	2b03      	cmp	r3, #3
 800f080:	d120      	bne.n	800f0c4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	1e9a      	subs	r2, r3, #2
 800f088:	88fb      	ldrh	r3, [r7, #6]
 800f08a:	4293      	cmp	r3, r2
 800f08c:	bf28      	it	cs
 800f08e:	4613      	movcs	r3, r2
 800f090:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	3302      	adds	r3, #2
 800f096:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f098:	2300      	movs	r3, #0
 800f09a:	82fb      	strh	r3, [r7, #22]
 800f09c:	e00b      	b.n	800f0b6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f09e:	8afb      	ldrh	r3, [r7, #22]
 800f0a0:	68fa      	ldr	r2, [r7, #12]
 800f0a2:	4413      	add	r3, r2
 800f0a4:	781a      	ldrb	r2, [r3, #0]
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f0b0:	8afb      	ldrh	r3, [r7, #22]
 800f0b2:	3302      	adds	r3, #2
 800f0b4:	82fb      	strh	r3, [r7, #22]
 800f0b6:	8afa      	ldrh	r2, [r7, #22]
 800f0b8:	8abb      	ldrh	r3, [r7, #20]
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d3ef      	bcc.n	800f09e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	701a      	strb	r2, [r3, #0]
  }
}
 800f0c4:	bf00      	nop
 800f0c6:	371c      	adds	r7, #28
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr

0800f0d0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b085      	sub	sp, #20
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	881a      	ldrh	r2, [r3, #0]
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	781b      	ldrb	r3, [r3, #0]
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	4413      	add	r3, r2
 800f0e6:	b29a      	uxth	r2, r3
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	781b      	ldrb	r3, [r3, #0]
 800f0f0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	4413      	add	r3, r2
 800f0f6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3714      	adds	r7, #20
 800f0fe:	46bd      	mov	sp, r7
 800f100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f104:	4770      	bx	lr

0800f106 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f106:	b580      	push	{r7, lr}
 800f108:	b086      	sub	sp, #24
 800f10a:	af00      	add	r7, sp, #0
 800f10c:	60f8      	str	r0, [r7, #12]
 800f10e:	60b9      	str	r1, [r7, #8]
 800f110:	4613      	mov	r3, r2
 800f112:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f114:	2301      	movs	r3, #1
 800f116:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	789b      	ldrb	r3, [r3, #2]
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	d002      	beq.n	800f126 <USBH_CtlReq+0x20>
 800f120:	2b02      	cmp	r3, #2
 800f122:	d00f      	beq.n	800f144 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800f124:	e027      	b.n	800f176 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	68ba      	ldr	r2, [r7, #8]
 800f12a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	88fa      	ldrh	r2, [r7, #6]
 800f130:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	2201      	movs	r2, #1
 800f136:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	2202      	movs	r2, #2
 800f13c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f13e:	2301      	movs	r3, #1
 800f140:	75fb      	strb	r3, [r7, #23]
      break;
 800f142:	e018      	b.n	800f176 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800f144:	68f8      	ldr	r0, [r7, #12]
 800f146:	f000 f81b 	bl	800f180 <USBH_HandleControl>
 800f14a:	4603      	mov	r3, r0
 800f14c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f14e:	7dfb      	ldrb	r3, [r7, #23]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d002      	beq.n	800f15a <USBH_CtlReq+0x54>
 800f154:	7dfb      	ldrb	r3, [r7, #23]
 800f156:	2b03      	cmp	r3, #3
 800f158:	d106      	bne.n	800f168 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2201      	movs	r2, #1
 800f15e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2200      	movs	r2, #0
 800f164:	761a      	strb	r2, [r3, #24]
      break;
 800f166:	e005      	b.n	800f174 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800f168:	7dfb      	ldrb	r3, [r7, #23]
 800f16a:	2b02      	cmp	r3, #2
 800f16c:	d102      	bne.n	800f174 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2201      	movs	r2, #1
 800f172:	709a      	strb	r2, [r3, #2]
      break;
 800f174:	bf00      	nop
  }
  return status;
 800f176:	7dfb      	ldrb	r3, [r7, #23]
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3718      	adds	r7, #24
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}

0800f180 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b086      	sub	sp, #24
 800f184:	af02      	add	r7, sp, #8
 800f186:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f188:	2301      	movs	r3, #1
 800f18a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f18c:	2300      	movs	r3, #0
 800f18e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	7e1b      	ldrb	r3, [r3, #24]
 800f194:	3b01      	subs	r3, #1
 800f196:	2b0a      	cmp	r3, #10
 800f198:	f200 8156 	bhi.w	800f448 <USBH_HandleControl+0x2c8>
 800f19c:	a201      	add	r2, pc, #4	; (adr r2, 800f1a4 <USBH_HandleControl+0x24>)
 800f19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a2:	bf00      	nop
 800f1a4:	0800f1d1 	.word	0x0800f1d1
 800f1a8:	0800f1eb 	.word	0x0800f1eb
 800f1ac:	0800f255 	.word	0x0800f255
 800f1b0:	0800f27b 	.word	0x0800f27b
 800f1b4:	0800f2b3 	.word	0x0800f2b3
 800f1b8:	0800f2dd 	.word	0x0800f2dd
 800f1bc:	0800f32f 	.word	0x0800f32f
 800f1c0:	0800f351 	.word	0x0800f351
 800f1c4:	0800f38d 	.word	0x0800f38d
 800f1c8:	0800f3b3 	.word	0x0800f3b3
 800f1cc:	0800f3f1 	.word	0x0800f3f1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f103 0110 	add.w	r1, r3, #16
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	795b      	ldrb	r3, [r3, #5]
 800f1da:	461a      	mov	r2, r3
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f000 f943 	bl	800f468 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2202      	movs	r2, #2
 800f1e6:	761a      	strb	r2, [r3, #24]
      break;
 800f1e8:	e139      	b.n	800f45e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	795b      	ldrb	r3, [r3, #5]
 800f1ee:	4619      	mov	r1, r3
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f000 fd15 	bl	800fc20 <USBH_LL_GetURBState>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f1fa:	7bbb      	ldrb	r3, [r7, #14]
 800f1fc:	2b01      	cmp	r3, #1
 800f1fe:	d11e      	bne.n	800f23e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	7c1b      	ldrb	r3, [r3, #16]
 800f204:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f208:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	8adb      	ldrh	r3, [r3, #22]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d00a      	beq.n	800f228 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f212:	7b7b      	ldrb	r3, [r7, #13]
 800f214:	2b80      	cmp	r3, #128	; 0x80
 800f216:	d103      	bne.n	800f220 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2203      	movs	r2, #3
 800f21c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f21e:	e115      	b.n	800f44c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2205      	movs	r2, #5
 800f224:	761a      	strb	r2, [r3, #24]
      break;
 800f226:	e111      	b.n	800f44c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800f228:	7b7b      	ldrb	r3, [r7, #13]
 800f22a:	2b80      	cmp	r3, #128	; 0x80
 800f22c:	d103      	bne.n	800f236 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2209      	movs	r2, #9
 800f232:	761a      	strb	r2, [r3, #24]
      break;
 800f234:	e10a      	b.n	800f44c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2207      	movs	r2, #7
 800f23a:	761a      	strb	r2, [r3, #24]
      break;
 800f23c:	e106      	b.n	800f44c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f23e:	7bbb      	ldrb	r3, [r7, #14]
 800f240:	2b04      	cmp	r3, #4
 800f242:	d003      	beq.n	800f24c <USBH_HandleControl+0xcc>
 800f244:	7bbb      	ldrb	r3, [r7, #14]
 800f246:	2b02      	cmp	r3, #2
 800f248:	f040 8100 	bne.w	800f44c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	220b      	movs	r2, #11
 800f250:	761a      	strb	r2, [r3, #24]
      break;
 800f252:	e0fb      	b.n	800f44c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f25a:	b29a      	uxth	r2, r3
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6899      	ldr	r1, [r3, #8]
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	899a      	ldrh	r2, [r3, #12]
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	791b      	ldrb	r3, [r3, #4]
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f000 f93a 	bl	800f4e6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2204      	movs	r2, #4
 800f276:	761a      	strb	r2, [r3, #24]
      break;
 800f278:	e0f1      	b.n	800f45e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	791b      	ldrb	r3, [r3, #4]
 800f27e:	4619      	mov	r1, r3
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f000 fccd 	bl	800fc20 <USBH_LL_GetURBState>
 800f286:	4603      	mov	r3, r0
 800f288:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f28a:	7bbb      	ldrb	r3, [r7, #14]
 800f28c:	2b01      	cmp	r3, #1
 800f28e:	d102      	bne.n	800f296 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2209      	movs	r2, #9
 800f294:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f296:	7bbb      	ldrb	r3, [r7, #14]
 800f298:	2b05      	cmp	r3, #5
 800f29a:	d102      	bne.n	800f2a2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f29c:	2303      	movs	r3, #3
 800f29e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f2a0:	e0d6      	b.n	800f450 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800f2a2:	7bbb      	ldrb	r3, [r7, #14]
 800f2a4:	2b04      	cmp	r3, #4
 800f2a6:	f040 80d3 	bne.w	800f450 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	220b      	movs	r2, #11
 800f2ae:	761a      	strb	r2, [r3, #24]
      break;
 800f2b0:	e0ce      	b.n	800f450 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6899      	ldr	r1, [r3, #8]
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	899a      	ldrh	r2, [r3, #12]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	795b      	ldrb	r3, [r3, #5]
 800f2be:	2001      	movs	r0, #1
 800f2c0:	9000      	str	r0, [sp, #0]
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f000 f8ea 	bl	800f49c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f2ce:	b29a      	uxth	r2, r3
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2206      	movs	r2, #6
 800f2d8:	761a      	strb	r2, [r3, #24]
      break;
 800f2da:	e0c0      	b.n	800f45e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	795b      	ldrb	r3, [r3, #5]
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f000 fc9c 	bl	800fc20 <USBH_LL_GetURBState>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f2ec:	7bbb      	ldrb	r3, [r7, #14]
 800f2ee:	2b01      	cmp	r3, #1
 800f2f0:	d103      	bne.n	800f2fa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2207      	movs	r2, #7
 800f2f6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f2f8:	e0ac      	b.n	800f454 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800f2fa:	7bbb      	ldrb	r3, [r7, #14]
 800f2fc:	2b05      	cmp	r3, #5
 800f2fe:	d105      	bne.n	800f30c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	220c      	movs	r2, #12
 800f304:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f306:	2303      	movs	r3, #3
 800f308:	73fb      	strb	r3, [r7, #15]
      break;
 800f30a:	e0a3      	b.n	800f454 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f30c:	7bbb      	ldrb	r3, [r7, #14]
 800f30e:	2b02      	cmp	r3, #2
 800f310:	d103      	bne.n	800f31a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	2205      	movs	r2, #5
 800f316:	761a      	strb	r2, [r3, #24]
      break;
 800f318:	e09c      	b.n	800f454 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800f31a:	7bbb      	ldrb	r3, [r7, #14]
 800f31c:	2b04      	cmp	r3, #4
 800f31e:	f040 8099 	bne.w	800f454 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	220b      	movs	r2, #11
 800f326:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f328:	2302      	movs	r3, #2
 800f32a:	73fb      	strb	r3, [r7, #15]
      break;
 800f32c:	e092      	b.n	800f454 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	791b      	ldrb	r3, [r3, #4]
 800f332:	2200      	movs	r2, #0
 800f334:	2100      	movs	r1, #0
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f000 f8d5 	bl	800f4e6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f342:	b29a      	uxth	r2, r3
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2208      	movs	r2, #8
 800f34c:	761a      	strb	r2, [r3, #24]

      break;
 800f34e:	e086      	b.n	800f45e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	791b      	ldrb	r3, [r3, #4]
 800f354:	4619      	mov	r1, r3
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 fc62 	bl	800fc20 <USBH_LL_GetURBState>
 800f35c:	4603      	mov	r3, r0
 800f35e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f360:	7bbb      	ldrb	r3, [r7, #14]
 800f362:	2b01      	cmp	r3, #1
 800f364:	d105      	bne.n	800f372 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	220d      	movs	r2, #13
 800f36a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f36c:	2300      	movs	r3, #0
 800f36e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f370:	e072      	b.n	800f458 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800f372:	7bbb      	ldrb	r3, [r7, #14]
 800f374:	2b04      	cmp	r3, #4
 800f376:	d103      	bne.n	800f380 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	220b      	movs	r2, #11
 800f37c:	761a      	strb	r2, [r3, #24]
      break;
 800f37e:	e06b      	b.n	800f458 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800f380:	7bbb      	ldrb	r3, [r7, #14]
 800f382:	2b05      	cmp	r3, #5
 800f384:	d168      	bne.n	800f458 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800f386:	2303      	movs	r3, #3
 800f388:	73fb      	strb	r3, [r7, #15]
      break;
 800f38a:	e065      	b.n	800f458 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	795b      	ldrb	r3, [r3, #5]
 800f390:	2201      	movs	r2, #1
 800f392:	9200      	str	r2, [sp, #0]
 800f394:	2200      	movs	r2, #0
 800f396:	2100      	movs	r1, #0
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f000 f87f 	bl	800f49c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f3a4:	b29a      	uxth	r2, r3
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	220a      	movs	r2, #10
 800f3ae:	761a      	strb	r2, [r3, #24]
      break;
 800f3b0:	e055      	b.n	800f45e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	795b      	ldrb	r3, [r3, #5]
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f000 fc31 	bl	800fc20 <USBH_LL_GetURBState>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f3c2:	7bbb      	ldrb	r3, [r7, #14]
 800f3c4:	2b01      	cmp	r3, #1
 800f3c6:	d105      	bne.n	800f3d4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	220d      	movs	r2, #13
 800f3d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f3d2:	e043      	b.n	800f45c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f3d4:	7bbb      	ldrb	r3, [r7, #14]
 800f3d6:	2b02      	cmp	r3, #2
 800f3d8:	d103      	bne.n	800f3e2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2209      	movs	r2, #9
 800f3de:	761a      	strb	r2, [r3, #24]
      break;
 800f3e0:	e03c      	b.n	800f45c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800f3e2:	7bbb      	ldrb	r3, [r7, #14]
 800f3e4:	2b04      	cmp	r3, #4
 800f3e6:	d139      	bne.n	800f45c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	220b      	movs	r2, #11
 800f3ec:	761a      	strb	r2, [r3, #24]
      break;
 800f3ee:	e035      	b.n	800f45c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	7e5b      	ldrb	r3, [r3, #25]
 800f3f4:	3301      	adds	r3, #1
 800f3f6:	b2da      	uxtb	r2, r3
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	765a      	strb	r2, [r3, #25]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	7e5b      	ldrb	r3, [r3, #25]
 800f400:	2b02      	cmp	r3, #2
 800f402:	d806      	bhi.n	800f412 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2201      	movs	r2, #1
 800f408:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2201      	movs	r2, #1
 800f40e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f410:	e025      	b.n	800f45e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f418:	2106      	movs	r1, #6
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2200      	movs	r2, #0
 800f422:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	795b      	ldrb	r3, [r3, #5]
 800f428:	4619      	mov	r1, r3
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f000 f90c 	bl	800f648 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	791b      	ldrb	r3, [r3, #4]
 800f434:	4619      	mov	r1, r3
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f000 f906 	bl	800f648 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2200      	movs	r2, #0
 800f440:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f442:	2302      	movs	r3, #2
 800f444:	73fb      	strb	r3, [r7, #15]
      break;
 800f446:	e00a      	b.n	800f45e <USBH_HandleControl+0x2de>

    default:
      break;
 800f448:	bf00      	nop
 800f44a:	e008      	b.n	800f45e <USBH_HandleControl+0x2de>
      break;
 800f44c:	bf00      	nop
 800f44e:	e006      	b.n	800f45e <USBH_HandleControl+0x2de>
      break;
 800f450:	bf00      	nop
 800f452:	e004      	b.n	800f45e <USBH_HandleControl+0x2de>
      break;
 800f454:	bf00      	nop
 800f456:	e002      	b.n	800f45e <USBH_HandleControl+0x2de>
      break;
 800f458:	bf00      	nop
 800f45a:	e000      	b.n	800f45e <USBH_HandleControl+0x2de>
      break;
 800f45c:	bf00      	nop
  }

  return status;
 800f45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f460:	4618      	mov	r0, r3
 800f462:	3710      	adds	r7, #16
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b088      	sub	sp, #32
 800f46c:	af04      	add	r7, sp, #16
 800f46e:	60f8      	str	r0, [r7, #12]
 800f470:	60b9      	str	r1, [r7, #8]
 800f472:	4613      	mov	r3, r2
 800f474:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f476:	79f9      	ldrb	r1, [r7, #7]
 800f478:	2300      	movs	r3, #0
 800f47a:	9303      	str	r3, [sp, #12]
 800f47c:	2308      	movs	r3, #8
 800f47e:	9302      	str	r3, [sp, #8]
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	9301      	str	r3, [sp, #4]
 800f484:	2300      	movs	r3, #0
 800f486:	9300      	str	r3, [sp, #0]
 800f488:	2300      	movs	r3, #0
 800f48a:	2200      	movs	r2, #0
 800f48c:	68f8      	ldr	r0, [r7, #12]
 800f48e:	f000 fb96 	bl	800fbbe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800f492:	2300      	movs	r3, #0
}
 800f494:	4618      	mov	r0, r3
 800f496:	3710      	adds	r7, #16
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}

0800f49c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b088      	sub	sp, #32
 800f4a0:	af04      	add	r7, sp, #16
 800f4a2:	60f8      	str	r0, [r7, #12]
 800f4a4:	60b9      	str	r1, [r7, #8]
 800f4a6:	4611      	mov	r1, r2
 800f4a8:	461a      	mov	r2, r3
 800f4aa:	460b      	mov	r3, r1
 800f4ac:	80fb      	strh	r3, [r7, #6]
 800f4ae:	4613      	mov	r3, r2
 800f4b0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d001      	beq.n	800f4c0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f4c0:	7979      	ldrb	r1, [r7, #5]
 800f4c2:	7e3b      	ldrb	r3, [r7, #24]
 800f4c4:	9303      	str	r3, [sp, #12]
 800f4c6:	88fb      	ldrh	r3, [r7, #6]
 800f4c8:	9302      	str	r3, [sp, #8]
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	9301      	str	r3, [sp, #4]
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	9300      	str	r3, [sp, #0]
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	68f8      	ldr	r0, [r7, #12]
 800f4d8:	f000 fb71 	bl	800fbbe <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f4dc:	2300      	movs	r3, #0
}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	3710      	adds	r7, #16
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}

0800f4e6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f4e6:	b580      	push	{r7, lr}
 800f4e8:	b088      	sub	sp, #32
 800f4ea:	af04      	add	r7, sp, #16
 800f4ec:	60f8      	str	r0, [r7, #12]
 800f4ee:	60b9      	str	r1, [r7, #8]
 800f4f0:	4611      	mov	r1, r2
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	460b      	mov	r3, r1
 800f4f6:	80fb      	strh	r3, [r7, #6]
 800f4f8:	4613      	mov	r3, r2
 800f4fa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f4fc:	7979      	ldrb	r1, [r7, #5]
 800f4fe:	2300      	movs	r3, #0
 800f500:	9303      	str	r3, [sp, #12]
 800f502:	88fb      	ldrh	r3, [r7, #6]
 800f504:	9302      	str	r3, [sp, #8]
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	9301      	str	r3, [sp, #4]
 800f50a:	2301      	movs	r3, #1
 800f50c:	9300      	str	r3, [sp, #0]
 800f50e:	2300      	movs	r3, #0
 800f510:	2201      	movs	r2, #1
 800f512:	68f8      	ldr	r0, [r7, #12]
 800f514:	f000 fb53 	bl	800fbbe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f518:	2300      	movs	r3, #0

}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3710      	adds	r7, #16
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}

0800f522 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f522:	b580      	push	{r7, lr}
 800f524:	b088      	sub	sp, #32
 800f526:	af04      	add	r7, sp, #16
 800f528:	60f8      	str	r0, [r7, #12]
 800f52a:	60b9      	str	r1, [r7, #8]
 800f52c:	4611      	mov	r1, r2
 800f52e:	461a      	mov	r2, r3
 800f530:	460b      	mov	r3, r1
 800f532:	80fb      	strh	r3, [r7, #6]
 800f534:	4613      	mov	r3, r2
 800f536:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d001      	beq.n	800f546 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f542:	2300      	movs	r3, #0
 800f544:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f546:	7979      	ldrb	r1, [r7, #5]
 800f548:	7e3b      	ldrb	r3, [r7, #24]
 800f54a:	9303      	str	r3, [sp, #12]
 800f54c:	88fb      	ldrh	r3, [r7, #6]
 800f54e:	9302      	str	r3, [sp, #8]
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	9301      	str	r3, [sp, #4]
 800f554:	2301      	movs	r3, #1
 800f556:	9300      	str	r3, [sp, #0]
 800f558:	2302      	movs	r3, #2
 800f55a:	2200      	movs	r2, #0
 800f55c:	68f8      	ldr	r0, [r7, #12]
 800f55e:	f000 fb2e 	bl	800fbbe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f562:	2300      	movs	r3, #0
}
 800f564:	4618      	mov	r0, r3
 800f566:	3710      	adds	r7, #16
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}

0800f56c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b088      	sub	sp, #32
 800f570:	af04      	add	r7, sp, #16
 800f572:	60f8      	str	r0, [r7, #12]
 800f574:	60b9      	str	r1, [r7, #8]
 800f576:	4611      	mov	r1, r2
 800f578:	461a      	mov	r2, r3
 800f57a:	460b      	mov	r3, r1
 800f57c:	80fb      	strh	r3, [r7, #6]
 800f57e:	4613      	mov	r3, r2
 800f580:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f582:	7979      	ldrb	r1, [r7, #5]
 800f584:	2300      	movs	r3, #0
 800f586:	9303      	str	r3, [sp, #12]
 800f588:	88fb      	ldrh	r3, [r7, #6]
 800f58a:	9302      	str	r3, [sp, #8]
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	9301      	str	r3, [sp, #4]
 800f590:	2301      	movs	r3, #1
 800f592:	9300      	str	r3, [sp, #0]
 800f594:	2302      	movs	r3, #2
 800f596:	2201      	movs	r2, #1
 800f598:	68f8      	ldr	r0, [r7, #12]
 800f59a:	f000 fb10 	bl	800fbbe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f59e:	2300      	movs	r3, #0
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3710      	adds	r7, #16
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}

0800f5a8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b086      	sub	sp, #24
 800f5ac:	af04      	add	r7, sp, #16
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	4608      	mov	r0, r1
 800f5b2:	4611      	mov	r1, r2
 800f5b4:	461a      	mov	r2, r3
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	70fb      	strb	r3, [r7, #3]
 800f5ba:	460b      	mov	r3, r1
 800f5bc:	70bb      	strb	r3, [r7, #2]
 800f5be:	4613      	mov	r3, r2
 800f5c0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f5c2:	7878      	ldrb	r0, [r7, #1]
 800f5c4:	78ba      	ldrb	r2, [r7, #2]
 800f5c6:	78f9      	ldrb	r1, [r7, #3]
 800f5c8:	8b3b      	ldrh	r3, [r7, #24]
 800f5ca:	9302      	str	r3, [sp, #8]
 800f5cc:	7d3b      	ldrb	r3, [r7, #20]
 800f5ce:	9301      	str	r3, [sp, #4]
 800f5d0:	7c3b      	ldrb	r3, [r7, #16]
 800f5d2:	9300      	str	r3, [sp, #0]
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f000 faa3 	bl	800fb22 <USBH_LL_OpenPipe>

  return USBH_OK;
 800f5dc:	2300      	movs	r3, #0
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	3708      	adds	r7, #8
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}

0800f5e6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f5e6:	b580      	push	{r7, lr}
 800f5e8:	b082      	sub	sp, #8
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	6078      	str	r0, [r7, #4]
 800f5ee:	460b      	mov	r3, r1
 800f5f0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800f5f2:	78fb      	ldrb	r3, [r7, #3]
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f000 fac2 	bl	800fb80 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f5fc:	2300      	movs	r3, #0
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3708      	adds	r7, #8
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}

0800f606 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f606:	b580      	push	{r7, lr}
 800f608:	b084      	sub	sp, #16
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	6078      	str	r0, [r7, #4]
 800f60e:	460b      	mov	r3, r1
 800f610:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f000 f836 	bl	800f684 <USBH_GetFreePipe>
 800f618:	4603      	mov	r3, r0
 800f61a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f61c:	89fb      	ldrh	r3, [r7, #14]
 800f61e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f622:	4293      	cmp	r3, r2
 800f624:	d00a      	beq.n	800f63c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800f626:	78fa      	ldrb	r2, [r7, #3]
 800f628:	89fb      	ldrh	r3, [r7, #14]
 800f62a:	f003 030f 	and.w	r3, r3, #15
 800f62e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f632:	6879      	ldr	r1, [r7, #4]
 800f634:	33e0      	adds	r3, #224	; 0xe0
 800f636:	009b      	lsls	r3, r3, #2
 800f638:	440b      	add	r3, r1
 800f63a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800f63c:	89fb      	ldrh	r3, [r7, #14]
 800f63e:	b2db      	uxtb	r3, r3
}
 800f640:	4618      	mov	r0, r3
 800f642:	3710      	adds	r7, #16
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}

0800f648 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f648:	b480      	push	{r7}
 800f64a:	b083      	sub	sp, #12
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
 800f650:	460b      	mov	r3, r1
 800f652:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800f654:	78fb      	ldrb	r3, [r7, #3]
 800f656:	2b0a      	cmp	r3, #10
 800f658:	d80d      	bhi.n	800f676 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f65a:	78fb      	ldrb	r3, [r7, #3]
 800f65c:	687a      	ldr	r2, [r7, #4]
 800f65e:	33e0      	adds	r3, #224	; 0xe0
 800f660:	009b      	lsls	r3, r3, #2
 800f662:	4413      	add	r3, r2
 800f664:	685a      	ldr	r2, [r3, #4]
 800f666:	78fb      	ldrb	r3, [r7, #3]
 800f668:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f66c:	6879      	ldr	r1, [r7, #4]
 800f66e:	33e0      	adds	r3, #224	; 0xe0
 800f670:	009b      	lsls	r3, r3, #2
 800f672:	440b      	add	r3, r1
 800f674:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f676:	2300      	movs	r3, #0
}
 800f678:	4618      	mov	r0, r3
 800f67a:	370c      	adds	r7, #12
 800f67c:	46bd      	mov	sp, r7
 800f67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f682:	4770      	bx	lr

0800f684 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f684:	b480      	push	{r7}
 800f686:	b085      	sub	sp, #20
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f68c:	2300      	movs	r3, #0
 800f68e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800f690:	2300      	movs	r3, #0
 800f692:	73fb      	strb	r3, [r7, #15]
 800f694:	e00f      	b.n	800f6b6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f696:	7bfb      	ldrb	r3, [r7, #15]
 800f698:	687a      	ldr	r2, [r7, #4]
 800f69a:	33e0      	adds	r3, #224	; 0xe0
 800f69c:	009b      	lsls	r3, r3, #2
 800f69e:	4413      	add	r3, r2
 800f6a0:	685b      	ldr	r3, [r3, #4]
 800f6a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d102      	bne.n	800f6b0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800f6aa:	7bfb      	ldrb	r3, [r7, #15]
 800f6ac:	b29b      	uxth	r3, r3
 800f6ae:	e007      	b.n	800f6c0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800f6b0:	7bfb      	ldrb	r3, [r7, #15]
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	73fb      	strb	r3, [r7, #15]
 800f6b6:	7bfb      	ldrb	r3, [r7, #15]
 800f6b8:	2b0a      	cmp	r3, #10
 800f6ba:	d9ec      	bls.n	800f696 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f6bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3714      	adds	r7, #20
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b087      	sub	sp, #28
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	60f8      	str	r0, [r7, #12]
 800f6d4:	60b9      	str	r1, [r7, #8]
 800f6d6:	4613      	mov	r3, r2
 800f6d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f6da:	2301      	movs	r3, #1
 800f6dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f6e2:	4b1f      	ldr	r3, [pc, #124]	; (800f760 <FATFS_LinkDriverEx+0x94>)
 800f6e4:	7a5b      	ldrb	r3, [r3, #9]
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d131      	bne.n	800f750 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f6ec:	4b1c      	ldr	r3, [pc, #112]	; (800f760 <FATFS_LinkDriverEx+0x94>)
 800f6ee:	7a5b      	ldrb	r3, [r3, #9]
 800f6f0:	b2db      	uxtb	r3, r3
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	4b1a      	ldr	r3, [pc, #104]	; (800f760 <FATFS_LinkDriverEx+0x94>)
 800f6f6:	2100      	movs	r1, #0
 800f6f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f6fa:	4b19      	ldr	r3, [pc, #100]	; (800f760 <FATFS_LinkDriverEx+0x94>)
 800f6fc:	7a5b      	ldrb	r3, [r3, #9]
 800f6fe:	b2db      	uxtb	r3, r3
 800f700:	4a17      	ldr	r2, [pc, #92]	; (800f760 <FATFS_LinkDriverEx+0x94>)
 800f702:	009b      	lsls	r3, r3, #2
 800f704:	4413      	add	r3, r2
 800f706:	68fa      	ldr	r2, [r7, #12]
 800f708:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f70a:	4b15      	ldr	r3, [pc, #84]	; (800f760 <FATFS_LinkDriverEx+0x94>)
 800f70c:	7a5b      	ldrb	r3, [r3, #9]
 800f70e:	b2db      	uxtb	r3, r3
 800f710:	461a      	mov	r2, r3
 800f712:	4b13      	ldr	r3, [pc, #76]	; (800f760 <FATFS_LinkDriverEx+0x94>)
 800f714:	4413      	add	r3, r2
 800f716:	79fa      	ldrb	r2, [r7, #7]
 800f718:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f71a:	4b11      	ldr	r3, [pc, #68]	; (800f760 <FATFS_LinkDriverEx+0x94>)
 800f71c:	7a5b      	ldrb	r3, [r3, #9]
 800f71e:	b2db      	uxtb	r3, r3
 800f720:	1c5a      	adds	r2, r3, #1
 800f722:	b2d1      	uxtb	r1, r2
 800f724:	4a0e      	ldr	r2, [pc, #56]	; (800f760 <FATFS_LinkDriverEx+0x94>)
 800f726:	7251      	strb	r1, [r2, #9]
 800f728:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f72a:	7dbb      	ldrb	r3, [r7, #22]
 800f72c:	3330      	adds	r3, #48	; 0x30
 800f72e:	b2da      	uxtb	r2, r3
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	3301      	adds	r3, #1
 800f738:	223a      	movs	r2, #58	; 0x3a
 800f73a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	3302      	adds	r3, #2
 800f740:	222f      	movs	r2, #47	; 0x2f
 800f742:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	3303      	adds	r3, #3
 800f748:	2200      	movs	r2, #0
 800f74a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f74c:	2300      	movs	r3, #0
 800f74e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f750:	7dfb      	ldrb	r3, [r7, #23]
}
 800f752:	4618      	mov	r0, r3
 800f754:	371c      	adds	r7, #28
 800f756:	46bd      	mov	sp, r7
 800f758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75c:	4770      	bx	lr
 800f75e:	bf00      	nop
 800f760:	2000097c 	.word	0x2000097c

0800f764 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f76e:	2200      	movs	r2, #0
 800f770:	6839      	ldr	r1, [r7, #0]
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f7ff ffaa 	bl	800f6cc <FATFS_LinkDriverEx>
 800f778:	4603      	mov	r3, r0
}
 800f77a:	4618      	mov	r0, r3
 800f77c:	3708      	adds	r7, #8
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}
	...

0800f784 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f788:	2201      	movs	r2, #1
 800f78a:	490e      	ldr	r1, [pc, #56]	; (800f7c4 <MX_USB_HOST_Init+0x40>)
 800f78c:	480e      	ldr	r0, [pc, #56]	; (800f7c8 <MX_USB_HOST_Init+0x44>)
 800f78e:	f7fe fc45 	bl	800e01c <USBH_Init>
 800f792:	4603      	mov	r3, r0
 800f794:	2b00      	cmp	r3, #0
 800f796:	d001      	beq.n	800f79c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f798:	f7f2 ff80 	bl	800269c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800f79c:	490b      	ldr	r1, [pc, #44]	; (800f7cc <MX_USB_HOST_Init+0x48>)
 800f79e:	480a      	ldr	r0, [pc, #40]	; (800f7c8 <MX_USB_HOST_Init+0x44>)
 800f7a0:	f7fe fcca 	bl	800e138 <USBH_RegisterClass>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d001      	beq.n	800f7ae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f7aa:	f7f2 ff77 	bl	800269c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f7ae:	4806      	ldr	r0, [pc, #24]	; (800f7c8 <MX_USB_HOST_Init+0x44>)
 800f7b0:	f7fe fd4e 	bl	800e250 <USBH_Start>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d001      	beq.n	800f7be <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f7ba:	f7f2 ff6f 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f7be:	bf00      	nop
 800f7c0:	bd80      	pop	{r7, pc}
 800f7c2:	bf00      	nop
 800f7c4:	0800f7e5 	.word	0x0800f7e5
 800f7c8:	2000163c 	.word	0x2000163c
 800f7cc:	2000000c 	.word	0x2000000c

0800f7d0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800f7d4:	4802      	ldr	r0, [pc, #8]	; (800f7e0 <MX_USB_HOST_Process+0x10>)
 800f7d6:	f7fe fd4b 	bl	800e270 <USBH_Process>
}
 800f7da:	bf00      	nop
 800f7dc:	bd80      	pop	{r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	2000163c 	.word	0x2000163c

0800f7e4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b083      	sub	sp, #12
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	460b      	mov	r3, r1
 800f7ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f7f0:	78fb      	ldrb	r3, [r7, #3]
 800f7f2:	3b01      	subs	r3, #1
 800f7f4:	2b04      	cmp	r3, #4
 800f7f6:	d819      	bhi.n	800f82c <USBH_UserProcess+0x48>
 800f7f8:	a201      	add	r2, pc, #4	; (adr r2, 800f800 <USBH_UserProcess+0x1c>)
 800f7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7fe:	bf00      	nop
 800f800:	0800f82d 	.word	0x0800f82d
 800f804:	0800f81d 	.word	0x0800f81d
 800f808:	0800f82d 	.word	0x0800f82d
 800f80c:	0800f825 	.word	0x0800f825
 800f810:	0800f815 	.word	0x0800f815
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f814:	4b09      	ldr	r3, [pc, #36]	; (800f83c <USBH_UserProcess+0x58>)
 800f816:	2203      	movs	r2, #3
 800f818:	701a      	strb	r2, [r3, #0]
  break;
 800f81a:	e008      	b.n	800f82e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f81c:	4b07      	ldr	r3, [pc, #28]	; (800f83c <USBH_UserProcess+0x58>)
 800f81e:	2202      	movs	r2, #2
 800f820:	701a      	strb	r2, [r3, #0]
  break;
 800f822:	e004      	b.n	800f82e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f824:	4b05      	ldr	r3, [pc, #20]	; (800f83c <USBH_UserProcess+0x58>)
 800f826:	2201      	movs	r2, #1
 800f828:	701a      	strb	r2, [r3, #0]
  break;
 800f82a:	e000      	b.n	800f82e <USBH_UserProcess+0x4a>

  default:
  break;
 800f82c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f82e:	bf00      	nop
 800f830:	370c      	adds	r7, #12
 800f832:	46bd      	mov	sp, r7
 800f834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f838:	4770      	bx	lr
 800f83a:	bf00      	nop
 800f83c:	20000988 	.word	0x20000988

0800f840 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b08a      	sub	sp, #40	; 0x28
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f848:	f107 0314 	add.w	r3, r7, #20
 800f84c:	2200      	movs	r2, #0
 800f84e:	601a      	str	r2, [r3, #0]
 800f850:	605a      	str	r2, [r3, #4]
 800f852:	609a      	str	r2, [r3, #8]
 800f854:	60da      	str	r2, [r3, #12]
 800f856:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f860:	d13c      	bne.n	800f8dc <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f862:	4b20      	ldr	r3, [pc, #128]	; (800f8e4 <HAL_HCD_MspInit+0xa4>)
 800f864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f866:	4a1f      	ldr	r2, [pc, #124]	; (800f8e4 <HAL_HCD_MspInit+0xa4>)
 800f868:	f043 0301 	orr.w	r3, r3, #1
 800f86c:	6313      	str	r3, [r2, #48]	; 0x30
 800f86e:	4b1d      	ldr	r3, [pc, #116]	; (800f8e4 <HAL_HCD_MspInit+0xa4>)
 800f870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f872:	f003 0301 	and.w	r3, r3, #1
 800f876:	613b      	str	r3, [r7, #16]
 800f878:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800f87a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f87e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f880:	2302      	movs	r3, #2
 800f882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f884:	2300      	movs	r3, #0
 800f886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f888:	2303      	movs	r3, #3
 800f88a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f88c:	230a      	movs	r3, #10
 800f88e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f890:	f107 0314 	add.w	r3, r7, #20
 800f894:	4619      	mov	r1, r3
 800f896:	4814      	ldr	r0, [pc, #80]	; (800f8e8 <HAL_HCD_MspInit+0xa8>)
 800f898:	f7f4 fe20 	bl	80044dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f89c:	4b11      	ldr	r3, [pc, #68]	; (800f8e4 <HAL_HCD_MspInit+0xa4>)
 800f89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8a0:	4a10      	ldr	r2, [pc, #64]	; (800f8e4 <HAL_HCD_MspInit+0xa4>)
 800f8a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8a6:	6353      	str	r3, [r2, #52]	; 0x34
 800f8a8:	4b0e      	ldr	r3, [pc, #56]	; (800f8e4 <HAL_HCD_MspInit+0xa4>)
 800f8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8b0:	60fb      	str	r3, [r7, #12]
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	4b0b      	ldr	r3, [pc, #44]	; (800f8e4 <HAL_HCD_MspInit+0xa4>)
 800f8b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8b8:	4a0a      	ldr	r2, [pc, #40]	; (800f8e4 <HAL_HCD_MspInit+0xa4>)
 800f8ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f8be:	6453      	str	r3, [r2, #68]	; 0x44
 800f8c0:	4b08      	ldr	r3, [pc, #32]	; (800f8e4 <HAL_HCD_MspInit+0xa4>)
 800f8c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f8c8:	60bb      	str	r3, [r7, #8]
 800f8ca:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	2100      	movs	r1, #0
 800f8d0:	2043      	movs	r0, #67	; 0x43
 800f8d2:	f7f4 fa7c 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f8d6:	2043      	movs	r0, #67	; 0x43
 800f8d8:	f7f4 fa95 	bl	8003e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f8dc:	bf00      	nop
 800f8de:	3728      	adds	r7, #40	; 0x28
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}
 800f8e4:	40023800 	.word	0x40023800
 800f8e8:	40020000 	.word	0x40020000

0800f8ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b082      	sub	sp, #8
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7ff f88b 	bl	800ea16 <USBH_LL_IncTimer>
}
 800f900:	bf00      	nop
 800f902:	3708      	adds	r7, #8
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f916:	4618      	mov	r0, r3
 800f918:	f7ff f8c3 	bl	800eaa2 <USBH_LL_Connect>
}
 800f91c:	bf00      	nop
 800f91e:	3708      	adds	r7, #8
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}

0800f924 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b082      	sub	sp, #8
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f932:	4618      	mov	r0, r3
 800f934:	f7ff f8cc 	bl	800ead0 <USBH_LL_Disconnect>
}
 800f938:	bf00      	nop
 800f93a:	3708      	adds	r7, #8
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd80      	pop	{r7, pc}

0800f940 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f940:	b480      	push	{r7}
 800f942:	b083      	sub	sp, #12
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
 800f948:	460b      	mov	r3, r1
 800f94a:	70fb      	strb	r3, [r7, #3]
 800f94c:	4613      	mov	r3, r2
 800f94e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f950:	bf00      	nop
 800f952:	370c      	adds	r7, #12
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b082      	sub	sp, #8
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7ff f87d 	bl	800ea6a <USBH_LL_PortEnabled>
}
 800f970:	bf00      	nop
 800f972:	3708      	adds	r7, #8
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}

0800f978 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b082      	sub	sp, #8
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f986:	4618      	mov	r0, r3
 800f988:	f7ff f87d 	bl	800ea86 <USBH_LL_PortDisabled>
}
 800f98c:	bf00      	nop
 800f98e:	3708      	adds	r7, #8
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}

0800f994 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f9a2:	2b01      	cmp	r3, #1
 800f9a4:	d12a      	bne.n	800f9fc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f9a6:	4a18      	ldr	r2, [pc, #96]	; (800fa08 <USBH_LL_Init+0x74>)
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	4a15      	ldr	r2, [pc, #84]	; (800fa08 <USBH_LL_Init+0x74>)
 800f9b2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f9b6:	4b14      	ldr	r3, [pc, #80]	; (800fa08 <USBH_LL_Init+0x74>)
 800f9b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f9bc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f9be:	4b12      	ldr	r3, [pc, #72]	; (800fa08 <USBH_LL_Init+0x74>)
 800f9c0:	2208      	movs	r2, #8
 800f9c2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f9c4:	4b10      	ldr	r3, [pc, #64]	; (800fa08 <USBH_LL_Init+0x74>)
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f9ca:	4b0f      	ldr	r3, [pc, #60]	; (800fa08 <USBH_LL_Init+0x74>)
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f9d0:	4b0d      	ldr	r3, [pc, #52]	; (800fa08 <USBH_LL_Init+0x74>)
 800f9d2:	2202      	movs	r2, #2
 800f9d4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f9d6:	4b0c      	ldr	r3, [pc, #48]	; (800fa08 <USBH_LL_Init+0x74>)
 800f9d8:	2200      	movs	r2, #0
 800f9da:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f9dc:	480a      	ldr	r0, [pc, #40]	; (800fa08 <USBH_LL_Init+0x74>)
 800f9de:	f7f4 ff74 	bl	80048ca <HAL_HCD_Init>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d001      	beq.n	800f9ec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f9e8:	f7f2 fe58 	bl	800269c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f9ec:	4806      	ldr	r0, [pc, #24]	; (800fa08 <USBH_LL_Init+0x74>)
 800f9ee:	f7f5 fb51 	bl	8005094 <HAL_HCD_GetCurrentFrame>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f7fe fffe 	bl	800e9f8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f9fc:	2300      	movs	r3, #0
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3708      	adds	r7, #8
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
 800fa06:	bf00      	nop
 800fa08:	20001a14 	.word	0x20001a14

0800fa0c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b084      	sub	sp, #16
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa14:	2300      	movs	r3, #0
 800fa16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7f5 fac0 	bl	8004fa8 <HAL_HCD_Start>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fa2c:	7bfb      	ldrb	r3, [r7, #15]
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f000 f95c 	bl	800fcec <USBH_Get_USB_Status>
 800fa34:	4603      	mov	r3, r0
 800fa36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa38:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3710      	adds	r7, #16
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}

0800fa42 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800fa42:	b580      	push	{r7, lr}
 800fa44:	b084      	sub	sp, #16
 800fa46:	af00      	add	r7, sp, #0
 800fa48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7f5 fac8 	bl	8004fee <HAL_HCD_Stop>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fa62:	7bfb      	ldrb	r3, [r7, #15]
 800fa64:	4618      	mov	r0, r3
 800fa66:	f000 f941 	bl	800fcec <USBH_Get_USB_Status>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	3710      	adds	r7, #16
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}

0800fa78 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b084      	sub	sp, #16
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800fa80:	2301      	movs	r3, #1
 800fa82:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7f5 fb10 	bl	80050b0 <HAL_HCD_GetCurrentSpeed>
 800fa90:	4603      	mov	r3, r0
 800fa92:	2b02      	cmp	r3, #2
 800fa94:	d00c      	beq.n	800fab0 <USBH_LL_GetSpeed+0x38>
 800fa96:	2b02      	cmp	r3, #2
 800fa98:	d80d      	bhi.n	800fab6 <USBH_LL_GetSpeed+0x3e>
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d002      	beq.n	800faa4 <USBH_LL_GetSpeed+0x2c>
 800fa9e:	2b01      	cmp	r3, #1
 800faa0:	d003      	beq.n	800faaa <USBH_LL_GetSpeed+0x32>
 800faa2:	e008      	b.n	800fab6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800faa4:	2300      	movs	r3, #0
 800faa6:	73fb      	strb	r3, [r7, #15]
    break;
 800faa8:	e008      	b.n	800fabc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800faaa:	2301      	movs	r3, #1
 800faac:	73fb      	strb	r3, [r7, #15]
    break;
 800faae:	e005      	b.n	800fabc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800fab0:	2302      	movs	r3, #2
 800fab2:	73fb      	strb	r3, [r7, #15]
    break;
 800fab4:	e002      	b.n	800fabc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800fab6:	2301      	movs	r3, #1
 800fab8:	73fb      	strb	r3, [r7, #15]
    break;
 800faba:	bf00      	nop
  }
  return  speed;
 800fabc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3710      	adds	r7, #16
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}

0800fac6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800fac6:	b580      	push	{r7, lr}
 800fac8:	b084      	sub	sp, #16
 800faca:	af00      	add	r7, sp, #0
 800facc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800face:	2300      	movs	r3, #0
 800fad0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fad2:	2300      	movs	r3, #0
 800fad4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fadc:	4618      	mov	r0, r3
 800fade:	f7f5 faa3 	bl	8005028 <HAL_HCD_ResetPort>
 800fae2:	4603      	mov	r3, r0
 800fae4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fae6:	7bfb      	ldrb	r3, [r7, #15]
 800fae8:	4618      	mov	r0, r3
 800faea:	f000 f8ff 	bl	800fcec <USBH_Get_USB_Status>
 800faee:	4603      	mov	r3, r0
 800faf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800faf2:	7bbb      	ldrb	r3, [r7, #14]
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	3710      	adds	r7, #16
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}

0800fafc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b082      	sub	sp, #8
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	460b      	mov	r3, r1
 800fb06:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fb0e:	78fa      	ldrb	r2, [r7, #3]
 800fb10:	4611      	mov	r1, r2
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7f5 faaa 	bl	800506c <HAL_HCD_HC_GetXferCount>
 800fb18:	4603      	mov	r3, r0
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3708      	adds	r7, #8
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}

0800fb22 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fb22:	b590      	push	{r4, r7, lr}
 800fb24:	b089      	sub	sp, #36	; 0x24
 800fb26:	af04      	add	r7, sp, #16
 800fb28:	6078      	str	r0, [r7, #4]
 800fb2a:	4608      	mov	r0, r1
 800fb2c:	4611      	mov	r1, r2
 800fb2e:	461a      	mov	r2, r3
 800fb30:	4603      	mov	r3, r0
 800fb32:	70fb      	strb	r3, [r7, #3]
 800fb34:	460b      	mov	r3, r1
 800fb36:	70bb      	strb	r3, [r7, #2]
 800fb38:	4613      	mov	r3, r2
 800fb3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb40:	2300      	movs	r3, #0
 800fb42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fb4a:	787c      	ldrb	r4, [r7, #1]
 800fb4c:	78ba      	ldrb	r2, [r7, #2]
 800fb4e:	78f9      	ldrb	r1, [r7, #3]
 800fb50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fb52:	9302      	str	r3, [sp, #8]
 800fb54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fb58:	9301      	str	r3, [sp, #4]
 800fb5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fb5e:	9300      	str	r3, [sp, #0]
 800fb60:	4623      	mov	r3, r4
 800fb62:	f7f4 ff14 	bl	800498e <HAL_HCD_HC_Init>
 800fb66:	4603      	mov	r3, r0
 800fb68:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800fb6a:	7bfb      	ldrb	r3, [r7, #15]
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f000 f8bd 	bl	800fcec <USBH_Get_USB_Status>
 800fb72:	4603      	mov	r3, r0
 800fb74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb76:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3714      	adds	r7, #20
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd90      	pop	{r4, r7, pc}

0800fb80 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b084      	sub	sp, #16
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	460b      	mov	r3, r1
 800fb8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb90:	2300      	movs	r3, #0
 800fb92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fb9a:	78fa      	ldrb	r2, [r7, #3]
 800fb9c:	4611      	mov	r1, r2
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f7f4 ff84 	bl	8004aac <HAL_HCD_HC_Halt>
 800fba4:	4603      	mov	r3, r0
 800fba6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fba8:	7bfb      	ldrb	r3, [r7, #15]
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f000 f89e 	bl	800fcec <USBH_Get_USB_Status>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	3710      	adds	r7, #16
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}

0800fbbe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800fbbe:	b590      	push	{r4, r7, lr}
 800fbc0:	b089      	sub	sp, #36	; 0x24
 800fbc2:	af04      	add	r7, sp, #16
 800fbc4:	6078      	str	r0, [r7, #4]
 800fbc6:	4608      	mov	r0, r1
 800fbc8:	4611      	mov	r1, r2
 800fbca:	461a      	mov	r2, r3
 800fbcc:	4603      	mov	r3, r0
 800fbce:	70fb      	strb	r3, [r7, #3]
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	70bb      	strb	r3, [r7, #2]
 800fbd4:	4613      	mov	r3, r2
 800fbd6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fbe6:	787c      	ldrb	r4, [r7, #1]
 800fbe8:	78ba      	ldrb	r2, [r7, #2]
 800fbea:	78f9      	ldrb	r1, [r7, #3]
 800fbec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fbf0:	9303      	str	r3, [sp, #12]
 800fbf2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fbf4:	9302      	str	r3, [sp, #8]
 800fbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf8:	9301      	str	r3, [sp, #4]
 800fbfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fbfe:	9300      	str	r3, [sp, #0]
 800fc00:	4623      	mov	r3, r4
 800fc02:	f7f4 ff77 	bl	8004af4 <HAL_HCD_HC_SubmitRequest>
 800fc06:	4603      	mov	r3, r0
 800fc08:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800fc0a:	7bfb      	ldrb	r3, [r7, #15]
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f000 f86d 	bl	800fcec <USBH_Get_USB_Status>
 800fc12:	4603      	mov	r3, r0
 800fc14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc16:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3714      	adds	r7, #20
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd90      	pop	{r4, r7, pc}

0800fc20 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b082      	sub	sp, #8
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
 800fc28:	460b      	mov	r3, r1
 800fc2a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fc32:	78fa      	ldrb	r2, [r7, #3]
 800fc34:	4611      	mov	r1, r2
 800fc36:	4618      	mov	r0, r3
 800fc38:	f7f5 fa04 	bl	8005044 <HAL_HCD_HC_GetURBState>
 800fc3c:	4603      	mov	r3, r0
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3708      	adds	r7, #8
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}

0800fc46 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800fc46:	b580      	push	{r7, lr}
 800fc48:	b082      	sub	sp, #8
 800fc4a:	af00      	add	r7, sp, #0
 800fc4c:	6078      	str	r0, [r7, #4]
 800fc4e:	460b      	mov	r3, r1
 800fc50:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800fc58:	2b01      	cmp	r3, #1
 800fc5a:	d103      	bne.n	800fc64 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800fc5c:	78fb      	ldrb	r3, [r7, #3]
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f000 f870 	bl	800fd44 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800fc64:	20c8      	movs	r0, #200	; 0xc8
 800fc66:	f7f3 fd2b 	bl	80036c0 <HAL_Delay>
  return USBH_OK;
 800fc6a:	2300      	movs	r3, #0
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3708      	adds	r7, #8
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800fc74:	b480      	push	{r7}
 800fc76:	b085      	sub	sp, #20
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	70fb      	strb	r3, [r7, #3]
 800fc80:	4613      	mov	r3, r2
 800fc82:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fc8a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800fc8c:	78fb      	ldrb	r3, [r7, #3]
 800fc8e:	68fa      	ldr	r2, [r7, #12]
 800fc90:	212c      	movs	r1, #44	; 0x2c
 800fc92:	fb01 f303 	mul.w	r3, r1, r3
 800fc96:	4413      	add	r3, r2
 800fc98:	333b      	adds	r3, #59	; 0x3b
 800fc9a:	781b      	ldrb	r3, [r3, #0]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d009      	beq.n	800fcb4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800fca0:	78fb      	ldrb	r3, [r7, #3]
 800fca2:	68fa      	ldr	r2, [r7, #12]
 800fca4:	212c      	movs	r1, #44	; 0x2c
 800fca6:	fb01 f303 	mul.w	r3, r1, r3
 800fcaa:	4413      	add	r3, r2
 800fcac:	3354      	adds	r3, #84	; 0x54
 800fcae:	78ba      	ldrb	r2, [r7, #2]
 800fcb0:	701a      	strb	r2, [r3, #0]
 800fcb2:	e008      	b.n	800fcc6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800fcb4:	78fb      	ldrb	r3, [r7, #3]
 800fcb6:	68fa      	ldr	r2, [r7, #12]
 800fcb8:	212c      	movs	r1, #44	; 0x2c
 800fcba:	fb01 f303 	mul.w	r3, r1, r3
 800fcbe:	4413      	add	r3, r2
 800fcc0:	3355      	adds	r3, #85	; 0x55
 800fcc2:	78ba      	ldrb	r2, [r7, #2]
 800fcc4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800fcc6:	2300      	movs	r3, #0
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3714      	adds	r7, #20
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr

0800fcd4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f7f3 fcef 	bl	80036c0 <HAL_Delay>
}
 800fce2:	bf00      	nop
 800fce4:	3708      	adds	r7, #8
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
	...

0800fcec <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fcec:	b480      	push	{r7}
 800fcee:	b085      	sub	sp, #20
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fcfa:	79fb      	ldrb	r3, [r7, #7]
 800fcfc:	2b03      	cmp	r3, #3
 800fcfe:	d817      	bhi.n	800fd30 <USBH_Get_USB_Status+0x44>
 800fd00:	a201      	add	r2, pc, #4	; (adr r2, 800fd08 <USBH_Get_USB_Status+0x1c>)
 800fd02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd06:	bf00      	nop
 800fd08:	0800fd19 	.word	0x0800fd19
 800fd0c:	0800fd1f 	.word	0x0800fd1f
 800fd10:	0800fd25 	.word	0x0800fd25
 800fd14:	0800fd2b 	.word	0x0800fd2b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	73fb      	strb	r3, [r7, #15]
    break;
 800fd1c:	e00b      	b.n	800fd36 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800fd1e:	2302      	movs	r3, #2
 800fd20:	73fb      	strb	r3, [r7, #15]
    break;
 800fd22:	e008      	b.n	800fd36 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fd24:	2301      	movs	r3, #1
 800fd26:	73fb      	strb	r3, [r7, #15]
    break;
 800fd28:	e005      	b.n	800fd36 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800fd2a:	2302      	movs	r3, #2
 800fd2c:	73fb      	strb	r3, [r7, #15]
    break;
 800fd2e:	e002      	b.n	800fd36 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800fd30:	2302      	movs	r3, #2
 800fd32:	73fb      	strb	r3, [r7, #15]
    break;
 800fd34:	bf00      	nop
  }
  return usb_status;
 800fd36:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	3714      	adds	r7, #20
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr

0800fd44 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b084      	sub	sp, #16
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800fd4e:	79fb      	ldrb	r3, [r7, #7]
 800fd50:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800fd52:	79fb      	ldrb	r3, [r7, #7]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d102      	bne.n	800fd5e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800fd58:	2301      	movs	r3, #1
 800fd5a:	73fb      	strb	r3, [r7, #15]
 800fd5c:	e001      	b.n	800fd62 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800fd5e:	2300      	movs	r3, #0
 800fd60:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 800fd62:	7bfb      	ldrb	r3, [r7, #15]
 800fd64:	461a      	mov	r2, r3
 800fd66:	2120      	movs	r1, #32
 800fd68:	4803      	ldr	r0, [pc, #12]	; (800fd78 <MX_DriverVbusFS+0x34>)
 800fd6a:	f7f4 fd7b 	bl	8004864 <HAL_GPIO_WritePin>
}
 800fd6e:	bf00      	nop
 800fd70:	3710      	adds	r7, #16
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}
 800fd76:	bf00      	nop
 800fd78:	40020c00 	.word	0x40020c00

0800fd7c <tonecrafter_configure_activations>:


AI_DECLARE_STATIC
ai_bool tonecrafter_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b085      	sub	sp, #20
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	691b      	ldr	r3, [r3, #16]
 800fd8a:	3303      	adds	r3, #3
 800fd8c:	f023 0303 	bic.w	r3, r3, #3
 800fd90:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    lstm_scratch0_array.data = AI_PTR(activations + 0);
 800fd92:	4a1b      	ldr	r2, [pc, #108]	; (800fe00 <tonecrafter_configure_activations+0x84>)
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	6093      	str	r3, [r2, #8]
    lstm_scratch0_array.data_start = AI_PTR(activations + 0);
 800fd98:	4a19      	ldr	r2, [pc, #100]	; (800fe00 <tonecrafter_configure_activations+0x84>)
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	60d3      	str	r3, [r2, #12]
    input_0_output_array.data = AI_PTR(NULL);
 800fd9e:	4b19      	ldr	r3, [pc, #100]	; (800fe04 <tonecrafter_configure_activations+0x88>)
 800fda0:	2200      	movs	r2, #0
 800fda2:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800fda4:	4b17      	ldr	r3, [pc, #92]	; (800fe04 <tonecrafter_configure_activations+0x88>)
 800fda6:	2200      	movs	r2, #0
 800fda8:	60da      	str	r2, [r3, #12]
    conv1d_output_array.data = AI_PTR(activations + 512);
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800fdb0:	4a15      	ldr	r2, [pc, #84]	; (800fe08 <tonecrafter_configure_activations+0x8c>)
 800fdb2:	6093      	str	r3, [r2, #8]
    conv1d_output_array.data_start = AI_PTR(activations + 512);
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800fdba:	4a13      	ldr	r2, [pc, #76]	; (800fe08 <tonecrafter_configure_activations+0x8c>)
 800fdbc:	60d3      	str	r3, [r2, #12]
    conv1d_1_output_array.data = AI_PTR(activations + 672);
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 800fdc4:	4a11      	ldr	r2, [pc, #68]	; (800fe0c <tonecrafter_configure_activations+0x90>)
 800fdc6:	6093      	str	r3, [r2, #8]
    conv1d_1_output_array.data_start = AI_PTR(activations + 672);
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 800fdce:	4a0f      	ldr	r2, [pc, #60]	; (800fe0c <tonecrafter_configure_activations+0x90>)
 800fdd0:	60d3      	str	r3, [r2, #12]
    lstm_output_array.data = AI_PTR(activations + 688);
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800fdd8:	4a0d      	ldr	r2, [pc, #52]	; (800fe10 <tonecrafter_configure_activations+0x94>)
 800fdda:	6093      	str	r3, [r2, #8]
    lstm_output_array.data_start = AI_PTR(activations + 688);
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800fde2:	4a0b      	ldr	r2, [pc, #44]	; (800fe10 <tonecrafter_configure_activations+0x94>)
 800fde4:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(NULL);
 800fde6:	4b0b      	ldr	r3, [pc, #44]	; (800fe14 <tonecrafter_configure_activations+0x98>)
 800fde8:	2200      	movs	r2, #0
 800fdea:	609a      	str	r2, [r3, #8]
    dense_output_array.data_start = AI_PTR(NULL);
 800fdec:	4b09      	ldr	r3, [pc, #36]	; (800fe14 <tonecrafter_configure_activations+0x98>)
 800fdee:	2200      	movs	r2, #0
 800fdf0:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800fdf2:	2301      	movs	r3, #1
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3714      	adds	r7, #20
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfe:	4770      	bx	lr
 800fe00:	2000008c 	.word	0x2000008c
 800fe04:	2000013c 	.word	0x2000013c
 800fe08:	2000014c 	.word	0x2000014c
 800fe0c:	2000015c 	.word	0x2000015c
 800fe10:	2000016c 	.word	0x2000016c
 800fe14:	2000017c 	.word	0x2000017c

0800fe18 <tonecrafter_configure_weights>:


AI_DECLARE_STATIC
ai_bool tonecrafter_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b085      	sub	sp, #20
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
 800fe20:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	691b      	ldr	r3, [r3, #16]
 800fe26:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800fe28:	4b51      	ldr	r3, [pc, #324]	; (800ff70 <tonecrafter_configure_weights+0x158>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe30:	4a4f      	ldr	r2, [pc, #316]	; (800ff70 <tonecrafter_configure_weights+0x158>)
 800fe32:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights + 12512);
 800fe34:	68fa      	ldr	r2, [r7, #12]
 800fe36:	f243 03e0 	movw	r3, #12512	; 0x30e0
 800fe3a:	4413      	add	r3, r2
 800fe3c:	4a4c      	ldr	r2, [pc, #304]	; (800ff70 <tonecrafter_configure_weights+0x158>)
 800fe3e:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights + 12512);
 800fe40:	68fa      	ldr	r2, [r7, #12]
 800fe42:	f243 03e0 	movw	r3, #12512	; 0x30e0
 800fe46:	4413      	add	r3, r2
 800fe48:	4a49      	ldr	r2, [pc, #292]	; (800ff70 <tonecrafter_configure_weights+0x158>)
 800fe4a:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800fe4c:	4b49      	ldr	r3, [pc, #292]	; (800ff74 <tonecrafter_configure_weights+0x15c>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe54:	4a47      	ldr	r2, [pc, #284]	; (800ff74 <tonecrafter_configure_weights+0x15c>)
 800fe56:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights + 12416);
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 800fe5e:	4a45      	ldr	r2, [pc, #276]	; (800ff74 <tonecrafter_configure_weights+0x15c>)
 800fe60:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights + 12416);
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 800fe68:	4a42      	ldr	r2, [pc, #264]	; (800ff74 <tonecrafter_configure_weights+0x15c>)
 800fe6a:	60d3      	str	r3, [r2, #12]
    lstm_bias_array.format |= AI_FMT_FLAG_CONST;
 800fe6c:	4b42      	ldr	r3, [pc, #264]	; (800ff78 <tonecrafter_configure_weights+0x160>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe74:	4a40      	ldr	r2, [pc, #256]	; (800ff78 <tonecrafter_configure_weights+0x160>)
 800fe76:	6013      	str	r3, [r2, #0]
    lstm_bias_array.data = AI_PTR(weights + 12032);
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800fe7e:	4a3e      	ldr	r2, [pc, #248]	; (800ff78 <tonecrafter_configure_weights+0x160>)
 800fe80:	6093      	str	r3, [r2, #8]
    lstm_bias_array.data_start = AI_PTR(weights + 12032);
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800fe88:	4a3b      	ldr	r2, [pc, #236]	; (800ff78 <tonecrafter_configure_weights+0x160>)
 800fe8a:	60d3      	str	r3, [r2, #12]
    lstm_peephole_array.format |= AI_FMT_FLAG_CONST;
 800fe8c:	4b3b      	ldr	r3, [pc, #236]	; (800ff7c <tonecrafter_configure_weights+0x164>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe94:	4a39      	ldr	r2, [pc, #228]	; (800ff7c <tonecrafter_configure_weights+0x164>)
 800fe96:	6013      	str	r3, [r2, #0]
    lstm_peephole_array.data = AI_PTR(weights + 11744);
 800fe98:	68fa      	ldr	r2, [r7, #12]
 800fe9a:	f642 53e0 	movw	r3, #11744	; 0x2de0
 800fe9e:	4413      	add	r3, r2
 800fea0:	4a36      	ldr	r2, [pc, #216]	; (800ff7c <tonecrafter_configure_weights+0x164>)
 800fea2:	6093      	str	r3, [r2, #8]
    lstm_peephole_array.data_start = AI_PTR(weights + 11744);
 800fea4:	68fa      	ldr	r2, [r7, #12]
 800fea6:	f642 53e0 	movw	r3, #11744	; 0x2de0
 800feaa:	4413      	add	r3, r2
 800feac:	4a33      	ldr	r2, [pc, #204]	; (800ff7c <tonecrafter_configure_weights+0x164>)
 800feae:	60d3      	str	r3, [r2, #12]
    lstm_recurrent_array.format |= AI_FMT_FLAG_CONST;
 800feb0:	4b33      	ldr	r3, [pc, #204]	; (800ff80 <tonecrafter_configure_weights+0x168>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800feb8:	4a31      	ldr	r2, [pc, #196]	; (800ff80 <tonecrafter_configure_weights+0x168>)
 800feba:	6013      	str	r3, [r2, #0]
    lstm_recurrent_array.data = AI_PTR(weights + 2528);
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 800fec2:	4a2f      	ldr	r2, [pc, #188]	; (800ff80 <tonecrafter_configure_weights+0x168>)
 800fec4:	6093      	str	r3, [r2, #8]
    lstm_recurrent_array.data_start = AI_PTR(weights + 2528);
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 800fecc:	4a2c      	ldr	r2, [pc, #176]	; (800ff80 <tonecrafter_configure_weights+0x168>)
 800fece:	60d3      	str	r3, [r2, #12]
    lstm_kernel_array.format |= AI_FMT_FLAG_CONST;
 800fed0:	4b2c      	ldr	r3, [pc, #176]	; (800ff84 <tonecrafter_configure_weights+0x16c>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fed8:	4a2a      	ldr	r2, [pc, #168]	; (800ff84 <tonecrafter_configure_weights+0x16c>)
 800feda:	6013      	str	r3, [r2, #0]
    lstm_kernel_array.data = AI_PTR(weights + 992);
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800fee2:	4a28      	ldr	r2, [pc, #160]	; (800ff84 <tonecrafter_configure_weights+0x16c>)
 800fee4:	6093      	str	r3, [r2, #8]
    lstm_kernel_array.data_start = AI_PTR(weights + 992);
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800feec:	4a25      	ldr	r2, [pc, #148]	; (800ff84 <tonecrafter_configure_weights+0x16c>)
 800feee:	60d3      	str	r3, [r2, #12]
    conv1d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800fef0:	4b25      	ldr	r3, [pc, #148]	; (800ff88 <tonecrafter_configure_weights+0x170>)
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fef8:	4a23      	ldr	r2, [pc, #140]	; (800ff88 <tonecrafter_configure_weights+0x170>)
 800fefa:	6013      	str	r3, [r2, #0]
    conv1d_1_bias_array.data = AI_PTR(weights + 976);
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800ff02:	4a21      	ldr	r2, [pc, #132]	; (800ff88 <tonecrafter_configure_weights+0x170>)
 800ff04:	6093      	str	r3, [r2, #8]
    conv1d_1_bias_array.data_start = AI_PTR(weights + 976);
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800ff0c:	4a1e      	ldr	r2, [pc, #120]	; (800ff88 <tonecrafter_configure_weights+0x170>)
 800ff0e:	60d3      	str	r3, [r2, #12]
    conv1d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800ff10:	4b1e      	ldr	r3, [pc, #120]	; (800ff8c <tonecrafter_configure_weights+0x174>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff18:	4a1c      	ldr	r2, [pc, #112]	; (800ff8c <tonecrafter_configure_weights+0x174>)
 800ff1a:	6013      	str	r3, [r2, #0]
    conv1d_1_weights_array.data = AI_PTR(weights + 208);
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	33d0      	adds	r3, #208	; 0xd0
 800ff20:	4a1a      	ldr	r2, [pc, #104]	; (800ff8c <tonecrafter_configure_weights+0x174>)
 800ff22:	6093      	str	r3, [r2, #8]
    conv1d_1_weights_array.data_start = AI_PTR(weights + 208);
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	33d0      	adds	r3, #208	; 0xd0
 800ff28:	4a18      	ldr	r2, [pc, #96]	; (800ff8c <tonecrafter_configure_weights+0x174>)
 800ff2a:	60d3      	str	r3, [r2, #12]
    conv1d_bias_array.format |= AI_FMT_FLAG_CONST;
 800ff2c:	4b18      	ldr	r3, [pc, #96]	; (800ff90 <tonecrafter_configure_weights+0x178>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff34:	4a16      	ldr	r2, [pc, #88]	; (800ff90 <tonecrafter_configure_weights+0x178>)
 800ff36:	6013      	str	r3, [r2, #0]
    conv1d_bias_array.data = AI_PTR(weights + 192);
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	33c0      	adds	r3, #192	; 0xc0
 800ff3c:	4a14      	ldr	r2, [pc, #80]	; (800ff90 <tonecrafter_configure_weights+0x178>)
 800ff3e:	6093      	str	r3, [r2, #8]
    conv1d_bias_array.data_start = AI_PTR(weights + 192);
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	33c0      	adds	r3, #192	; 0xc0
 800ff44:	4a12      	ldr	r2, [pc, #72]	; (800ff90 <tonecrafter_configure_weights+0x178>)
 800ff46:	60d3      	str	r3, [r2, #12]
    conv1d_weights_array.format |= AI_FMT_FLAG_CONST;
 800ff48:	4b12      	ldr	r3, [pc, #72]	; (800ff94 <tonecrafter_configure_weights+0x17c>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff50:	4a10      	ldr	r2, [pc, #64]	; (800ff94 <tonecrafter_configure_weights+0x17c>)
 800ff52:	6013      	str	r3, [r2, #0]
    conv1d_weights_array.data = AI_PTR(weights + 0);
 800ff54:	4a0f      	ldr	r2, [pc, #60]	; (800ff94 <tonecrafter_configure_weights+0x17c>)
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	6093      	str	r3, [r2, #8]
    conv1d_weights_array.data_start = AI_PTR(weights + 0);
 800ff5a:	4a0e      	ldr	r2, [pc, #56]	; (800ff94 <tonecrafter_configure_weights+0x17c>)
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800ff60:	2301      	movs	r3, #1
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	3714      	adds	r7, #20
 800ff66:	46bd      	mov	sp, r7
 800ff68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6c:	4770      	bx	lr
 800ff6e:	bf00      	nop
 800ff70:	2000009c 	.word	0x2000009c
 800ff74:	200000ac 	.word	0x200000ac
 800ff78:	200000bc 	.word	0x200000bc
 800ff7c:	200000cc 	.word	0x200000cc
 800ff80:	200000dc 	.word	0x200000dc
 800ff84:	200000ec 	.word	0x200000ec
 800ff88:	200000fc 	.word	0x200000fc
 800ff8c:	2000010c 	.word	0x2000010c
 800ff90:	2000011c 	.word	0x2000011c
 800ff94:	2000012c 	.word	0x2000012c

0800ff98 <ai_tonecrafter_create>:
}

AI_API_ENTRY
ai_error ai_tonecrafter_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b084      	sub	sp, #16
 800ff9c:	af02      	add	r7, sp, #8
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	9301      	str	r3, [sp, #4]
 800ffa6:	2303      	movs	r3, #3
 800ffa8:	9300      	str	r3, [sp, #0]
 800ffaa:	2301      	movs	r3, #1
 800ffac:	4a04      	ldr	r2, [pc, #16]	; (800ffc0 <ai_tonecrafter_create+0x28>)
 800ffae:	6839      	ldr	r1, [r7, #0]
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f000 f861 	bl	8010078 <ai_platform_network_create>
 800ffb6:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3708      	adds	r7, #8
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}
 800ffc0:	2000002c 	.word	0x2000002c

0800ffc4 <ai_tonecrafter_init>:
}

AI_API_ENTRY
ai_bool ai_tonecrafter_init(
  ai_handle network, const ai_network_params* params)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b084      	sub	sp, #16
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800ffce:	6839      	ldr	r1, [r7, #0]
 800ffd0:	6878      	ldr	r0, [r7, #4]
 800ffd2:	f000 f8d5 	bl	8010180 <ai_platform_network_init>
 800ffd6:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d101      	bne.n	800ffe2 <ai_tonecrafter_init+0x1e>
 800ffde:	2300      	movs	r3, #0
 800ffe0:	e02b      	b.n	801003a <ai_tonecrafter_init+0x76>

  ai_bool ok = true;
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	72fb      	strb	r3, [r7, #11]
  ok &= tonecrafter_configure_weights(net_ctx, &params->params);
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	4619      	mov	r1, r3
 800ffea:	68f8      	ldr	r0, [r7, #12]
 800ffec:	f7ff ff14 	bl	800fe18 <tonecrafter_configure_weights>
 800fff0:	4603      	mov	r3, r0
 800fff2:	461a      	mov	r2, r3
 800fff4:	7afb      	ldrb	r3, [r7, #11]
 800fff6:	4013      	ands	r3, r2
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	bf14      	ite	ne
 800fffc:	2301      	movne	r3, #1
 800fffe:	2300      	moveq	r3, #0
 8010000:	72fb      	strb	r3, [r7, #11]
  ok &= tonecrafter_configure_activations(net_ctx, &params->activations);
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	3318      	adds	r3, #24
 8010006:	4619      	mov	r1, r3
 8010008:	68f8      	ldr	r0, [r7, #12]
 801000a:	f7ff feb7 	bl	800fd7c <tonecrafter_configure_activations>
 801000e:	4603      	mov	r3, r0
 8010010:	461a      	mov	r2, r3
 8010012:	7afb      	ldrb	r3, [r7, #11]
 8010014:	4013      	ands	r3, r2
 8010016:	2b00      	cmp	r3, #0
 8010018:	bf14      	ite	ne
 801001a:	2301      	movne	r3, #1
 801001c:	2300      	moveq	r3, #0
 801001e:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f000 f995 	bl	8010350 <ai_platform_network_post_init>
 8010026:	4603      	mov	r3, r0
 8010028:	461a      	mov	r2, r3
 801002a:	7afb      	ldrb	r3, [r7, #11]
 801002c:	4013      	ands	r3, r2
 801002e:	2b00      	cmp	r3, #0
 8010030:	bf14      	ite	ne
 8010032:	2301      	movne	r3, #1
 8010034:	2300      	moveq	r3, #0
 8010036:	72fb      	strb	r3, [r7, #11]

  return ok;
 8010038:	7afb      	ldrb	r3, [r7, #11]
}
 801003a:	4618      	mov	r0, r3
 801003c:	3710      	adds	r7, #16
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}

08010042 <ai_tonecrafter_run>:


AI_API_ENTRY
ai_i32 ai_tonecrafter_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8010042:	b580      	push	{r7, lr}
 8010044:	b084      	sub	sp, #16
 8010046:	af00      	add	r7, sp, #0
 8010048:	60f8      	str	r0, [r7, #12]
 801004a:	60b9      	str	r1, [r7, #8]
 801004c:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 801004e:	687a      	ldr	r2, [r7, #4]
 8010050:	68b9      	ldr	r1, [r7, #8]
 8010052:	68f8      	ldr	r0, [r7, #12]
 8010054:	f000 fa28 	bl	80104a8 <ai_platform_network_process>
 8010058:	4603      	mov	r3, r0
}
 801005a:	4618      	mov	r0, r3
 801005c:	3710      	adds	r7, #16
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}
	...

08010064 <ai_tonecrafter_data_weights_get>:
#include "tonecrafter_data.h"

ai_handle ai_tonecrafter_data_weights_get(void)
{
 8010064:	b480      	push	{r7}
 8010066:	af00      	add	r7, sp, #0
    0x6f, 0x97, 0xbc, 0x2f, 0xdc, 0x92, 0x3c, 0xa1, 0x2e,
    0x98, 0x3d, 0x92, 0x6b, 0xbd, 0x3d, 0x79, 0x19, 0xeb,
    0xbd, 0x2a, 0xc8, 0x23, 0xbe, 0xa6, 0x4d, 0xa2, 0xbb
  };

  return AI_HANDLE_PTR(s_tonecrafter_weights);
 8010068:	4b02      	ldr	r3, [pc, #8]	; (8010074 <ai_tonecrafter_data_weights_get+0x10>)

}
 801006a:	4618      	mov	r0, r3
 801006c:	46bd      	mov	sp, r7
 801006e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010072:	4770      	bx	lr
 8010074:	080163b8 	.word	0x080163b8

08010078 <ai_platform_network_create>:
 8010078:	b5f0      	push	{r4, r5, r6, r7, lr}
 801007a:	4d36      	ldr	r5, [pc, #216]	; (8010154 <ai_platform_network_create+0xdc>)
 801007c:	b083      	sub	sp, #12
 801007e:	4e36      	ldr	r6, [pc, #216]	; (8010158 <ai_platform_network_create+0xe0>)
 8010080:	6829      	ldr	r1, [r5, #0]
 8010082:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8010086:	f021 0101 	bic.w	r1, r1, #1
 801008a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 801008e:	6029      	str	r1, [r5, #0]
 8010090:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 8010094:	6831      	ldr	r1, [r6, #0]
 8010096:	f3c1 010a 	ubfx	r1, r1, #0, #11
 801009a:	194d      	adds	r5, r1, r5
 801009c:	2d01      	cmp	r5, #1
 801009e:	d92f      	bls.n	8010100 <ai_platform_network_create+0x88>
 80100a0:	f240 4549 	movw	r5, #1097	; 0x449
 80100a4:	42a9      	cmp	r1, r5
 80100a6:	d02b      	beq.n	8010100 <ai_platform_network_create+0x88>
 80100a8:	492c      	ldr	r1, [pc, #176]	; (801015c <ai_platform_network_create+0xe4>)
 80100aa:	6809      	ldr	r1, [r1, #0]
 80100ac:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80100b0:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80100b4:	d015      	beq.n	80100e2 <ai_platform_network_create+0x6a>
 80100b6:	2800      	cmp	r0, #0
 80100b8:	d031      	beq.n	801011e <ai_platform_network_create+0xa6>
 80100ba:	461e      	mov	r6, r3
 80100bc:	4613      	mov	r3, r2
 80100be:	4a28      	ldr	r2, [pc, #160]	; (8010160 <ai_platform_network_create+0xe8>)
 80100c0:	4605      	mov	r5, r0
 80100c2:	601a      	str	r2, [r3, #0]
 80100c4:	6003      	str	r3, [r0, #0]
 80100c6:	f000 fc9f 	bl	8010a08 <core_init>
 80100ca:	2800      	cmp	r0, #0
 80100cc:	d02b      	beq.n	8010126 <ai_platform_network_create+0xae>
 80100ce:	0223      	lsls	r3, r4, #8
 80100d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80100d4:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80100d8:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 80100dc:	d92e      	bls.n	801013c <ai_platform_network_create+0xc4>
 80100de:	2301      	movs	r3, #1
 80100e0:	e022      	b.n	8010128 <ai_platform_network_create+0xb0>
 80100e2:	4920      	ldr	r1, [pc, #128]	; (8010164 <ai_platform_network_create+0xec>)
 80100e4:	2501      	movs	r5, #1
 80100e6:	460e      	mov	r6, r1
 80100e8:	600d      	str	r5, [r1, #0]
 80100ea:	6831      	ldr	r1, [r6, #0]
 80100ec:	2900      	cmp	r1, #0
 80100ee:	d1fc      	bne.n	80100ea <ai_platform_network_create+0x72>
 80100f0:	491d      	ldr	r1, [pc, #116]	; (8010168 <ai_platform_network_create+0xf0>)
 80100f2:	4e1e      	ldr	r6, [pc, #120]	; (801016c <ai_platform_network_create+0xf4>)
 80100f4:	4d1e      	ldr	r5, [pc, #120]	; (8010170 <ai_platform_network_create+0xf8>)
 80100f6:	600e      	str	r6, [r1, #0]
 80100f8:	6809      	ldr	r1, [r1, #0]
 80100fa:	42a9      	cmp	r1, r5
 80100fc:	d0db      	beq.n	80100b6 <ai_platform_network_create+0x3e>
 80100fe:	e7fe      	b.n	80100fe <ai_platform_network_create+0x86>
 8010100:	491c      	ldr	r1, [pc, #112]	; (8010174 <ai_platform_network_create+0xfc>)
 8010102:	2501      	movs	r5, #1
 8010104:	460e      	mov	r6, r1
 8010106:	600d      	str	r5, [r1, #0]
 8010108:	6831      	ldr	r1, [r6, #0]
 801010a:	2900      	cmp	r1, #0
 801010c:	d1fc      	bne.n	8010108 <ai_platform_network_create+0x90>
 801010e:	491a      	ldr	r1, [pc, #104]	; (8010178 <ai_platform_network_create+0x100>)
 8010110:	4e16      	ldr	r6, [pc, #88]	; (801016c <ai_platform_network_create+0xf4>)
 8010112:	4d17      	ldr	r5, [pc, #92]	; (8010170 <ai_platform_network_create+0xf8>)
 8010114:	600e      	str	r6, [r1, #0]
 8010116:	6809      	ldr	r1, [r1, #0]
 8010118:	42a9      	cmp	r1, r5
 801011a:	d0cc      	beq.n	80100b6 <ai_platform_network_create+0x3e>
 801011c:	e7fe      	b.n	801011c <ai_platform_network_create+0xa4>
 801011e:	f241 0010 	movw	r0, #4112	; 0x1010
 8010122:	b003      	add	sp, #12
 8010124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010126:	2330      	movs	r3, #48	; 0x30
 8010128:	2100      	movs	r1, #0
 801012a:	2210      	movs	r2, #16
 801012c:	6029      	str	r1, [r5, #0]
 801012e:	2000      	movs	r0, #0
 8010130:	f363 0007 	bfi	r0, r3, #0, #8
 8010134:	f362 201f 	bfi	r0, r2, #8, #24
 8010138:	b003      	add	sp, #12
 801013a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801013c:	4b0f      	ldr	r3, [pc, #60]	; (801017c <ai_platform_network_create+0x104>)
 801013e:	a802      	add	r0, sp, #8
 8010140:	f840 3d04 	str.w	r3, [r0, #-4]!
 8010144:	f002 fdf4 	bl	8012d30 <ai_check_custom_types>
 8010148:	b110      	cbz	r0, 8010150 <ai_platform_network_create+0xd8>
 801014a:	2200      	movs	r2, #0
 801014c:	4613      	mov	r3, r2
 801014e:	e7ee      	b.n	801012e <ai_platform_network_create+0xb6>
 8010150:	2302      	movs	r3, #2
 8010152:	e7e9      	b.n	8010128 <ai_platform_network_create+0xb0>
 8010154:	e0002000 	.word	0xe0002000
 8010158:	e0042000 	.word	0xe0042000
 801015c:	5c001000 	.word	0x5c001000
 8010160:	a1c00100 	.word	0xa1c00100
 8010164:	58024c08 	.word	0x58024c08
 8010168:	58024c00 	.word	0x58024c00
 801016c:	f407a5c2 	.word	0xf407a5c2
 8010170:	b5e8b5cd 	.word	0xb5e8b5cd
 8010174:	40023008 	.word	0x40023008
 8010178:	40023000 	.word	0x40023000
 801017c:	84048403 	.word	0x84048403

08010180 <ai_platform_network_init>:
 8010180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010182:	2800      	cmp	r0, #0
 8010184:	d05e      	beq.n	8010244 <ai_platform_network_init+0xc4>
 8010186:	4b68      	ldr	r3, [pc, #416]	; (8010328 <ai_platform_network_init+0x1a8>)
 8010188:	6802      	ldr	r2, [r0, #0]
 801018a:	429a      	cmp	r2, r3
 801018c:	d15a      	bne.n	8010244 <ai_platform_network_init+0xc4>
 801018e:	4a67      	ldr	r2, [pc, #412]	; (801032c <ai_platform_network_init+0x1ac>)
 8010190:	4c67      	ldr	r4, [pc, #412]	; (8010330 <ai_platform_network_init+0x1b0>)
 8010192:	6813      	ldr	r3, [r2, #0]
 8010194:	f023 0301 	bic.w	r3, r3, #1
 8010198:	6013      	str	r3, [r2, #0]
 801019a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801019e:	6823      	ldr	r3, [r4, #0]
 80101a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80101a4:	189a      	adds	r2, r3, r2
 80101a6:	2a01      	cmp	r2, #1
 80101a8:	d93d      	bls.n	8010226 <ai_platform_network_init+0xa6>
 80101aa:	f240 4249 	movw	r2, #1097	; 0x449
 80101ae:	4293      	cmp	r3, r2
 80101b0:	d039      	beq.n	8010226 <ai_platform_network_init+0xa6>
 80101b2:	4b60      	ldr	r3, [pc, #384]	; (8010334 <ai_platform_network_init+0x1b4>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80101ba:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80101be:	d06b      	beq.n	8010298 <ai_platform_network_init+0x118>
 80101c0:	4605      	mov	r5, r0
 80101c2:	460c      	mov	r4, r1
 80101c4:	2900      	cmp	r1, #0
 80101c6:	f000 80a8 	beq.w	801031a <ai_platform_network_init+0x19a>
 80101ca:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 80101cc:	690e      	ldr	r6, [r1, #16]
 80101ce:	2f00      	cmp	r7, #0
 80101d0:	f000 8092 	beq.w	80102f8 <ai_platform_network_init+0x178>
 80101d4:	2e00      	cmp	r6, #0
 80101d6:	d07d      	beq.n	80102d4 <ai_platform_network_init+0x154>
 80101d8:	f104 0718 	add.w	r7, r4, #24
 80101dc:	f105 0c18 	add.w	ip, r5, #24
 80101e0:	f105 0630 	add.w	r6, r5, #48	; 0x30
 80101e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80101e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80101ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80101ee:	2403      	movs	r4, #3
 80101f0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80101f4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80101f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80101f8:	e897 0003 	ldmia.w	r7, {r0, r1}
 80101fc:	e886 0003 	stmia.w	r6, {r0, r1}
 8010200:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8010202:	60ec      	str	r4, [r5, #12]
 8010204:	b16a      	cbz	r2, 8010222 <ai_platform_network_init+0xa2>
 8010206:	68d3      	ldr	r3, [r2, #12]
 8010208:	6095      	str	r5, [r2, #8]
 801020a:	b153      	cbz	r3, 8010222 <ai_platform_network_init+0xa2>
 801020c:	429a      	cmp	r2, r3
 801020e:	d104      	bne.n	801021a <ai_platform_network_init+0x9a>
 8010210:	e007      	b.n	8010222 <ai_platform_network_init+0xa2>
 8010212:	429a      	cmp	r2, r3
 8010214:	4613      	mov	r3, r2
 8010216:	d004      	beq.n	8010222 <ai_platform_network_init+0xa2>
 8010218:	b11a      	cbz	r2, 8010222 <ai_platform_network_init+0xa2>
 801021a:	68da      	ldr	r2, [r3, #12]
 801021c:	609d      	str	r5, [r3, #8]
 801021e:	2a00      	cmp	r2, #0
 8010220:	d1f7      	bne.n	8010212 <ai_platform_network_init+0x92>
 8010222:	4628      	mov	r0, r5
 8010224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010226:	4b44      	ldr	r3, [pc, #272]	; (8010338 <ai_platform_network_init+0x1b8>)
 8010228:	2201      	movs	r2, #1
 801022a:	461c      	mov	r4, r3
 801022c:	601a      	str	r2, [r3, #0]
 801022e:	6823      	ldr	r3, [r4, #0]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d1fc      	bne.n	801022e <ai_platform_network_init+0xae>
 8010234:	4b41      	ldr	r3, [pc, #260]	; (801033c <ai_platform_network_init+0x1bc>)
 8010236:	4c42      	ldr	r4, [pc, #264]	; (8010340 <ai_platform_network_init+0x1c0>)
 8010238:	4a42      	ldr	r2, [pc, #264]	; (8010344 <ai_platform_network_init+0x1c4>)
 801023a:	601c      	str	r4, [r3, #0]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	4293      	cmp	r3, r2
 8010240:	d0be      	beq.n	80101c0 <ai_platform_network_init+0x40>
 8010242:	e7fe      	b.n	8010242 <ai_platform_network_init+0xc2>
 8010244:	4a39      	ldr	r2, [pc, #228]	; (801032c <ai_platform_network_init+0x1ac>)
 8010246:	493a      	ldr	r1, [pc, #232]	; (8010330 <ai_platform_network_init+0x1b0>)
 8010248:	6813      	ldr	r3, [r2, #0]
 801024a:	f023 0301 	bic.w	r3, r3, #1
 801024e:	6013      	str	r3, [r2, #0]
 8010250:	680b      	ldr	r3, [r1, #0]
 8010252:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8010256:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801025a:	185a      	adds	r2, r3, r1
 801025c:	2a01      	cmp	r2, #1
 801025e:	d90c      	bls.n	801027a <ai_platform_network_init+0xfa>
 8010260:	f240 4249 	movw	r2, #1097	; 0x449
 8010264:	4293      	cmp	r3, r2
 8010266:	d008      	beq.n	801027a <ai_platform_network_init+0xfa>
 8010268:	4b32      	ldr	r3, [pc, #200]	; (8010334 <ai_platform_network_init+0x1b4>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010270:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010274:	d01f      	beq.n	80102b6 <ai_platform_network_init+0x136>
 8010276:	2000      	movs	r0, #0
 8010278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801027a:	4b2f      	ldr	r3, [pc, #188]	; (8010338 <ai_platform_network_init+0x1b8>)
 801027c:	2201      	movs	r2, #1
 801027e:	4619      	mov	r1, r3
 8010280:	601a      	str	r2, [r3, #0]
 8010282:	680b      	ldr	r3, [r1, #0]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d1fc      	bne.n	8010282 <ai_platform_network_init+0x102>
 8010288:	4b2c      	ldr	r3, [pc, #176]	; (801033c <ai_platform_network_init+0x1bc>)
 801028a:	492d      	ldr	r1, [pc, #180]	; (8010340 <ai_platform_network_init+0x1c0>)
 801028c:	4a2d      	ldr	r2, [pc, #180]	; (8010344 <ai_platform_network_init+0x1c4>)
 801028e:	6019      	str	r1, [r3, #0]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	4293      	cmp	r3, r2
 8010294:	d0ef      	beq.n	8010276 <ai_platform_network_init+0xf6>
 8010296:	e7fe      	b.n	8010296 <ai_platform_network_init+0x116>
 8010298:	4b2b      	ldr	r3, [pc, #172]	; (8010348 <ai_platform_network_init+0x1c8>)
 801029a:	2201      	movs	r2, #1
 801029c:	461c      	mov	r4, r3
 801029e:	601a      	str	r2, [r3, #0]
 80102a0:	6823      	ldr	r3, [r4, #0]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d1fc      	bne.n	80102a0 <ai_platform_network_init+0x120>
 80102a6:	4b29      	ldr	r3, [pc, #164]	; (801034c <ai_platform_network_init+0x1cc>)
 80102a8:	4c25      	ldr	r4, [pc, #148]	; (8010340 <ai_platform_network_init+0x1c0>)
 80102aa:	4a26      	ldr	r2, [pc, #152]	; (8010344 <ai_platform_network_init+0x1c4>)
 80102ac:	601c      	str	r4, [r3, #0]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d085      	beq.n	80101c0 <ai_platform_network_init+0x40>
 80102b4:	e7fe      	b.n	80102b4 <ai_platform_network_init+0x134>
 80102b6:	4b24      	ldr	r3, [pc, #144]	; (8010348 <ai_platform_network_init+0x1c8>)
 80102b8:	2201      	movs	r2, #1
 80102ba:	4619      	mov	r1, r3
 80102bc:	601a      	str	r2, [r3, #0]
 80102be:	680b      	ldr	r3, [r1, #0]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d1fc      	bne.n	80102be <ai_platform_network_init+0x13e>
 80102c4:	4b21      	ldr	r3, [pc, #132]	; (801034c <ai_platform_network_init+0x1cc>)
 80102c6:	491e      	ldr	r1, [pc, #120]	; (8010340 <ai_platform_network_init+0x1c0>)
 80102c8:	4a1e      	ldr	r2, [pc, #120]	; (8010344 <ai_platform_network_init+0x1c4>)
 80102ca:	6019      	str	r1, [r3, #0]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	4293      	cmp	r3, r2
 80102d0:	d0d1      	beq.n	8010276 <ai_platform_network_init+0xf6>
 80102d2:	e7fe      	b.n	80102d2 <ai_platform_network_init+0x152>
 80102d4:	8921      	ldrh	r1, [r4, #8]
 80102d6:	88e2      	ldrh	r2, [r4, #6]
 80102d8:	68e3      	ldr	r3, [r4, #12]
 80102da:	fb02 f201 	mul.w	r2, r2, r1
 80102de:	fb03 f302 	mul.w	r3, r3, r2
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	f43f af78 	beq.w	80101d8 <ai_platform_network_init+0x58>
 80102e8:	f105 0010 	add.w	r0, r5, #16
 80102ec:	2212      	movs	r2, #18
 80102ee:	2110      	movs	r1, #16
 80102f0:	f000 fb8c 	bl	8010a0c <core_set_error>
 80102f4:	4630      	mov	r0, r6
 80102f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102f8:	8c09      	ldrh	r1, [r1, #32]
 80102fa:	8be2      	ldrh	r2, [r4, #30]
 80102fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80102fe:	fb02 f201 	mul.w	r2, r2, r1
 8010302:	fb03 f302 	mul.w	r3, r3, r2
 8010306:	2b00      	cmp	r3, #0
 8010308:	f43f af64 	beq.w	80101d4 <ai_platform_network_init+0x54>
 801030c:	2213      	movs	r2, #19
 801030e:	2110      	movs	r1, #16
 8010310:	3010      	adds	r0, #16
 8010312:	f000 fb7b 	bl	8010a0c <core_set_error>
 8010316:	4638      	mov	r0, r7
 8010318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801031a:	2211      	movs	r2, #17
 801031c:	2110      	movs	r1, #16
 801031e:	3010      	adds	r0, #16
 8010320:	f000 fb74 	bl	8010a0c <core_set_error>
 8010324:	4620      	mov	r0, r4
 8010326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010328:	a1c00100 	.word	0xa1c00100
 801032c:	e0002000 	.word	0xe0002000
 8010330:	e0042000 	.word	0xe0042000
 8010334:	5c001000 	.word	0x5c001000
 8010338:	40023008 	.word	0x40023008
 801033c:	40023000 	.word	0x40023000
 8010340:	f407a5c2 	.word	0xf407a5c2
 8010344:	b5e8b5cd 	.word	0xb5e8b5cd
 8010348:	58024c08 	.word	0x58024c08
 801034c:	58024c00 	.word	0x58024c00

08010350 <ai_platform_network_post_init>:
 8010350:	b538      	push	{r3, r4, r5, lr}
 8010352:	b118      	cbz	r0, 801035c <ai_platform_network_post_init+0xc>
 8010354:	4b4a      	ldr	r3, [pc, #296]	; (8010480 <ai_platform_network_post_init+0x130>)
 8010356:	6802      	ldr	r2, [r0, #0]
 8010358:	429a      	cmp	r2, r3
 801035a:	d029      	beq.n	80103b0 <ai_platform_network_post_init+0x60>
 801035c:	4a49      	ldr	r2, [pc, #292]	; (8010484 <ai_platform_network_post_init+0x134>)
 801035e:	494a      	ldr	r1, [pc, #296]	; (8010488 <ai_platform_network_post_init+0x138>)
 8010360:	6813      	ldr	r3, [r2, #0]
 8010362:	f023 0301 	bic.w	r3, r3, #1
 8010366:	6013      	str	r3, [r2, #0]
 8010368:	680b      	ldr	r3, [r1, #0]
 801036a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801036e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010372:	185a      	adds	r2, r3, r1
 8010374:	2a01      	cmp	r2, #1
 8010376:	d90c      	bls.n	8010392 <ai_platform_network_post_init+0x42>
 8010378:	f240 4249 	movw	r2, #1097	; 0x449
 801037c:	4293      	cmp	r3, r2
 801037e:	d008      	beq.n	8010392 <ai_platform_network_post_init+0x42>
 8010380:	4b42      	ldr	r3, [pc, #264]	; (801048c <ai_platform_network_post_init+0x13c>)
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010388:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801038c:	d044      	beq.n	8010418 <ai_platform_network_post_init+0xc8>
 801038e:	2000      	movs	r0, #0
 8010390:	bd38      	pop	{r3, r4, r5, pc}
 8010392:	4b3f      	ldr	r3, [pc, #252]	; (8010490 <ai_platform_network_post_init+0x140>)
 8010394:	2201      	movs	r2, #1
 8010396:	4619      	mov	r1, r3
 8010398:	601a      	str	r2, [r3, #0]
 801039a:	680b      	ldr	r3, [r1, #0]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d1fc      	bne.n	801039a <ai_platform_network_post_init+0x4a>
 80103a0:	4b3c      	ldr	r3, [pc, #240]	; (8010494 <ai_platform_network_post_init+0x144>)
 80103a2:	493d      	ldr	r1, [pc, #244]	; (8010498 <ai_platform_network_post_init+0x148>)
 80103a4:	4a3d      	ldr	r2, [pc, #244]	; (801049c <ai_platform_network_post_init+0x14c>)
 80103a6:	6019      	str	r1, [r3, #0]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	4293      	cmp	r3, r2
 80103ac:	d0ef      	beq.n	801038e <ai_platform_network_post_init+0x3e>
 80103ae:	e7fe      	b.n	80103ae <ai_platform_network_post_init+0x5e>
 80103b0:	4a34      	ldr	r2, [pc, #208]	; (8010484 <ai_platform_network_post_init+0x134>)
 80103b2:	4935      	ldr	r1, [pc, #212]	; (8010488 <ai_platform_network_post_init+0x138>)
 80103b4:	6813      	ldr	r3, [r2, #0]
 80103b6:	f023 0301 	bic.w	r3, r3, #1
 80103ba:	6013      	str	r3, [r2, #0]
 80103bc:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80103c0:	680b      	ldr	r3, [r1, #0]
 80103c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80103c6:	189a      	adds	r2, r3, r2
 80103c8:	2a01      	cmp	r2, #1
 80103ca:	d94a      	bls.n	8010462 <ai_platform_network_post_init+0x112>
 80103cc:	f240 4249 	movw	r2, #1097	; 0x449
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d046      	beq.n	8010462 <ai_platform_network_post_init+0x112>
 80103d4:	4b2d      	ldr	r3, [pc, #180]	; (801048c <ai_platform_network_post_init+0x13c>)
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80103dc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80103e0:	d030      	beq.n	8010444 <ai_platform_network_post_init+0xf4>
 80103e2:	68c3      	ldr	r3, [r0, #12]
 80103e4:	4604      	mov	r4, r0
 80103e6:	f013 0502 	ands.w	r5, r3, #2
 80103ea:	d024      	beq.n	8010436 <ai_platform_network_post_init+0xe6>
 80103ec:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80103ee:	b18b      	cbz	r3, 8010414 <ai_platform_network_post_init+0xc4>
 80103f0:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80103f2:	b90d      	cbnz	r5, 80103f8 <ai_platform_network_post_init+0xa8>
 80103f4:	e00e      	b.n	8010414 <ai_platform_network_post_init+0xc4>
 80103f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80103f8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80103fa:	4629      	mov	r1, r5
 80103fc:	2000      	movs	r0, #0
 80103fe:	4798      	blx	r3
 8010400:	68ea      	ldr	r2, [r5, #12]
 8010402:	1b53      	subs	r3, r2, r5
 8010404:	4615      	mov	r5, r2
 8010406:	bf18      	it	ne
 8010408:	2301      	movne	r3, #1
 801040a:	2a00      	cmp	r2, #0
 801040c:	bf08      	it	eq
 801040e:	2300      	moveq	r3, #0
 8010410:	2b00      	cmp	r3, #0
 8010412:	d1f0      	bne.n	80103f6 <ai_platform_network_post_init+0xa6>
 8010414:	2001      	movs	r0, #1
 8010416:	bd38      	pop	{r3, r4, r5, pc}
 8010418:	4b21      	ldr	r3, [pc, #132]	; (80104a0 <ai_platform_network_post_init+0x150>)
 801041a:	2201      	movs	r2, #1
 801041c:	4619      	mov	r1, r3
 801041e:	601a      	str	r2, [r3, #0]
 8010420:	680b      	ldr	r3, [r1, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d1fc      	bne.n	8010420 <ai_platform_network_post_init+0xd0>
 8010426:	4b1f      	ldr	r3, [pc, #124]	; (80104a4 <ai_platform_network_post_init+0x154>)
 8010428:	491b      	ldr	r1, [pc, #108]	; (8010498 <ai_platform_network_post_init+0x148>)
 801042a:	4a1c      	ldr	r2, [pc, #112]	; (801049c <ai_platform_network_post_init+0x14c>)
 801042c:	6019      	str	r1, [r3, #0]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	4293      	cmp	r3, r2
 8010432:	d0ac      	beq.n	801038e <ai_platform_network_post_init+0x3e>
 8010434:	e7fe      	b.n	8010434 <ai_platform_network_post_init+0xe4>
 8010436:	2210      	movs	r2, #16
 8010438:	2111      	movs	r1, #17
 801043a:	3010      	adds	r0, #16
 801043c:	f000 fae6 	bl	8010a0c <core_set_error>
 8010440:	4628      	mov	r0, r5
 8010442:	bd38      	pop	{r3, r4, r5, pc}
 8010444:	4b16      	ldr	r3, [pc, #88]	; (80104a0 <ai_platform_network_post_init+0x150>)
 8010446:	2201      	movs	r2, #1
 8010448:	4619      	mov	r1, r3
 801044a:	601a      	str	r2, [r3, #0]
 801044c:	680b      	ldr	r3, [r1, #0]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d1fc      	bne.n	801044c <ai_platform_network_post_init+0xfc>
 8010452:	4b14      	ldr	r3, [pc, #80]	; (80104a4 <ai_platform_network_post_init+0x154>)
 8010454:	4910      	ldr	r1, [pc, #64]	; (8010498 <ai_platform_network_post_init+0x148>)
 8010456:	4a11      	ldr	r2, [pc, #68]	; (801049c <ai_platform_network_post_init+0x14c>)
 8010458:	6019      	str	r1, [r3, #0]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	4293      	cmp	r3, r2
 801045e:	d0c0      	beq.n	80103e2 <ai_platform_network_post_init+0x92>
 8010460:	e7fe      	b.n	8010460 <ai_platform_network_post_init+0x110>
 8010462:	4b0b      	ldr	r3, [pc, #44]	; (8010490 <ai_platform_network_post_init+0x140>)
 8010464:	2201      	movs	r2, #1
 8010466:	4619      	mov	r1, r3
 8010468:	601a      	str	r2, [r3, #0]
 801046a:	680b      	ldr	r3, [r1, #0]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d1fc      	bne.n	801046a <ai_platform_network_post_init+0x11a>
 8010470:	4b08      	ldr	r3, [pc, #32]	; (8010494 <ai_platform_network_post_init+0x144>)
 8010472:	4909      	ldr	r1, [pc, #36]	; (8010498 <ai_platform_network_post_init+0x148>)
 8010474:	4a09      	ldr	r2, [pc, #36]	; (801049c <ai_platform_network_post_init+0x14c>)
 8010476:	6019      	str	r1, [r3, #0]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	4293      	cmp	r3, r2
 801047c:	d0b1      	beq.n	80103e2 <ai_platform_network_post_init+0x92>
 801047e:	e7fe      	b.n	801047e <ai_platform_network_post_init+0x12e>
 8010480:	a1c00100 	.word	0xa1c00100
 8010484:	e0002000 	.word	0xe0002000
 8010488:	e0042000 	.word	0xe0042000
 801048c:	5c001000 	.word	0x5c001000
 8010490:	40023008 	.word	0x40023008
 8010494:	40023000 	.word	0x40023000
 8010498:	f407a5c2 	.word	0xf407a5c2
 801049c:	b5e8b5cd 	.word	0xb5e8b5cd
 80104a0:	58024c08 	.word	0x58024c08
 80104a4:	58024c00 	.word	0x58024c00

080104a8 <ai_platform_network_process>:
 80104a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104ac:	4692      	mov	sl, r2
 80104ae:	b083      	sub	sp, #12
 80104b0:	4604      	mov	r4, r0
 80104b2:	b120      	cbz	r0, 80104be <ai_platform_network_process+0x16>
 80104b4:	4b86      	ldr	r3, [pc, #536]	; (80106d0 <ai_platform_network_process+0x228>)
 80104b6:	6802      	ldr	r2, [r0, #0]
 80104b8:	429a      	cmp	r2, r3
 80104ba:	bf18      	it	ne
 80104bc:	2400      	movne	r4, #0
 80104be:	4a85      	ldr	r2, [pc, #532]	; (80106d4 <ai_platform_network_process+0x22c>)
 80104c0:	4885      	ldr	r0, [pc, #532]	; (80106d8 <ai_platform_network_process+0x230>)
 80104c2:	6813      	ldr	r3, [r2, #0]
 80104c4:	f023 0301 	bic.w	r3, r3, #1
 80104c8:	6013      	str	r3, [r2, #0]
 80104ca:	6803      	ldr	r3, [r0, #0]
 80104cc:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 80104d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80104d4:	181a      	adds	r2, r3, r0
 80104d6:	2a01      	cmp	r2, #1
 80104d8:	f240 80c6 	bls.w	8010668 <ai_platform_network_process+0x1c0>
 80104dc:	f240 4249 	movw	r2, #1097	; 0x449
 80104e0:	4293      	cmp	r3, r2
 80104e2:	f000 80c1 	beq.w	8010668 <ai_platform_network_process+0x1c0>
 80104e6:	4b7d      	ldr	r3, [pc, #500]	; (80106dc <ai_platform_network_process+0x234>)
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80104ee:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80104f2:	f000 80a9 	beq.w	8010648 <ai_platform_network_process+0x1a0>
 80104f6:	2c00      	cmp	r4, #0
 80104f8:	f000 80db 	beq.w	80106b2 <ai_platform_network_process+0x20a>
 80104fc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8010500:	68e0      	ldr	r0, [r4, #12]
 8010502:	461a      	mov	r2, r3
 8010504:	f000 0003 	and.w	r0, r0, #3
 8010508:	2b00      	cmp	r3, #0
 801050a:	f000 80bd 	beq.w	8010688 <ai_platform_network_process+0x1e0>
 801050e:	2600      	movs	r6, #0
 8010510:	2803      	cmp	r0, #3
 8010512:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8010514:	6166      	str	r6, [r4, #20]
 8010516:	f040 80c6 	bne.w	80106a6 <ai_platform_network_process+0x1fe>
 801051a:	2900      	cmp	r1, #0
 801051c:	f000 80b7 	beq.w	801068e <ai_platform_network_process+0x1e6>
 8010520:	fab5 f085 	clz	r0, r5
 8010524:	0940      	lsrs	r0, r0, #5
 8010526:	2800      	cmp	r0, #0
 8010528:	f040 80b1 	bne.w	801068e <ai_platform_network_process+0x1e6>
 801052c:	882e      	ldrh	r6, [r5, #0]
 801052e:	2e00      	cmp	r6, #0
 8010530:	f000 80ad 	beq.w	801068e <ai_platform_network_process+0x1e6>
 8010534:	888f      	ldrh	r7, [r1, #4]
 8010536:	686e      	ldr	r6, [r5, #4]
 8010538:	9701      	str	r7, [sp, #4]
 801053a:	2e00      	cmp	r6, #0
 801053c:	f000 825f 	beq.w	80109fe <ai_platform_network_process+0x556>
 8010540:	6836      	ldr	r6, [r6, #0]
 8010542:	2e00      	cmp	r6, #0
 8010544:	f000 825b 	beq.w	80109fe <ai_platform_network_process+0x556>
 8010548:	68ab      	ldr	r3, [r5, #8]
 801054a:	f8d3 9000 	ldr.w	r9, [r3]
 801054e:	f1b9 0f00 	cmp.w	r9, #0
 8010552:	f000 809c 	beq.w	801068e <ai_platform_network_process+0x1e6>
 8010556:	460f      	mov	r7, r1
 8010558:	4680      	mov	r8, r0
 801055a:	e05e      	b.n	801061a <ai_platform_network_process+0x172>
 801055c:	68f3      	ldr	r3, [r6, #12]
 801055e:	68da      	ldr	r2, [r3, #12]
 8010560:	455a      	cmp	r2, fp
 8010562:	d168      	bne.n	8010636 <ai_platform_network_process+0x18e>
 8010564:	689a      	ldr	r2, [r3, #8]
 8010566:	4572      	cmp	r2, lr
 8010568:	d165      	bne.n	8010636 <ai_platform_network_process+0x18e>
 801056a:	685b      	ldr	r3, [r3, #4]
 801056c:	459c      	cmp	ip, r3
 801056e:	d162      	bne.n	8010636 <ai_platform_network_process+0x18e>
 8010570:	6800      	ldr	r0, [r0, #0]
 8010572:	f002 fc8d 	bl	8012e90 <ai_array_get_byte_size>
 8010576:	68f2      	ldr	r2, [r6, #12]
 8010578:	6973      	ldr	r3, [r6, #20]
 801057a:	68d2      	ldr	r2, [r2, #12]
 801057c:	68db      	ldr	r3, [r3, #12]
 801057e:	fb03 f302 	mul.w	r3, r3, r2
 8010582:	4298      	cmp	r0, r3
 8010584:	d357      	bcc.n	8010636 <ai_platform_network_process+0x18e>
 8010586:	69b3      	ldr	r3, [r6, #24]
 8010588:	6818      	ldr	r0, [r3, #0]
 801058a:	f002 fc35 	bl	8012df8 <ai_array_to_buffer_fmt>
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	4043      	eors	r3, r0
 8010592:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8010596:	f040 8229 	bne.w	80109ec <ai_platform_network_process+0x544>
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	2b00      	cmp	r3, #0
 801059e:	f000 821d 	beq.w	80109dc <ai_platform_network_process+0x534>
 80105a2:	88bb      	ldrh	r3, [r7, #4]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	f000 808a 	beq.w	80106be <ai_platform_network_process+0x216>
 80105aa:	9a01      	ldr	r2, [sp, #4]
 80105ac:	68f1      	ldr	r1, [r6, #12]
 80105ae:	429a      	cmp	r2, r3
 80105b0:	68c9      	ldr	r1, [r1, #12]
 80105b2:	bf38      	it	cc
 80105b4:	461a      	movcc	r2, r3
 80105b6:	9201      	str	r2, [sp, #4]
 80105b8:	6972      	ldr	r2, [r6, #20]
 80105ba:	68d3      	ldr	r3, [r2, #12]
 80105bc:	fb03 f301 	mul.w	r3, r3, r1
 80105c0:	f8c9 3008 	str.w	r3, [r9, #8]
 80105c4:	88ba      	ldrh	r2, [r7, #4]
 80105c6:	fb03 f302 	mul.w	r3, r3, r2
 80105ca:	f8c9 300c 	str.w	r3, [r9, #12]
 80105ce:	6939      	ldr	r1, [r7, #16]
 80105d0:	f8c9 1004 	str.w	r1, [r9, #4]
 80105d4:	693a      	ldr	r2, [r7, #16]
 80105d6:	4413      	add	r3, r2
 80105d8:	f8c9 3000 	str.w	r3, [r9]
 80105dc:	69b0      	ldr	r0, [r6, #24]
 80105de:	6803      	ldr	r3, [r0, #0]
 80105e0:	009a      	lsls	r2, r3, #2
 80105e2:	d408      	bmi.n	80105f6 <ai_platform_network_process+0x14e>
 80105e4:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80105e8:	1a9b      	subs	r3, r3, r2
 80105ea:	4419      	add	r1, r3
 80105ec:	6081      	str	r1, [r0, #8]
 80105ee:	69b3      	ldr	r3, [r6, #24]
 80105f0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80105f4:	60da      	str	r2, [r3, #12]
 80105f6:	f108 0801 	add.w	r8, r8, #1
 80105fa:	882b      	ldrh	r3, [r5, #0]
 80105fc:	4598      	cmp	r8, r3
 80105fe:	d27b      	bcs.n	80106f8 <ai_platform_network_process+0x250>
 8010600:	686b      	ldr	r3, [r5, #4]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d078      	beq.n	80106f8 <ai_platform_network_process+0x250>
 8010606:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 801060a:	2e00      	cmp	r6, #0
 801060c:	d074      	beq.n	80106f8 <ai_platform_network_process+0x250>
 801060e:	68ab      	ldr	r3, [r5, #8]
 8010610:	3718      	adds	r7, #24
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 8010618:	d039      	beq.n	801068e <ai_platform_network_process+0x1e6>
 801061a:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 801061e:	f8b7 b006 	ldrh.w	fp, [r7, #6]
 8010622:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8010626:	fb0b f30e 	mul.w	r3, fp, lr
 801062a:	69b0      	ldr	r0, [r6, #24]
 801062c:	fb0c f303 	mul.w	r3, ip, r3
 8010630:	6841      	ldr	r1, [r0, #4]
 8010632:	4299      	cmp	r1, r3
 8010634:	d292      	bcs.n	801055c <ai_platform_network_process+0xb4>
 8010636:	f104 0010 	add.w	r0, r4, #16
 801063a:	2218      	movs	r2, #24
 801063c:	2112      	movs	r1, #18
 801063e:	f04f 0b00 	mov.w	fp, #0
 8010642:	f000 f9e3 	bl	8010a0c <core_set_error>
 8010646:	e02a      	b.n	801069e <ai_platform_network_process+0x1f6>
 8010648:	4b25      	ldr	r3, [pc, #148]	; (80106e0 <ai_platform_network_process+0x238>)
 801064a:	2201      	movs	r2, #1
 801064c:	4618      	mov	r0, r3
 801064e:	601a      	str	r2, [r3, #0]
 8010650:	6803      	ldr	r3, [r0, #0]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d1fc      	bne.n	8010650 <ai_platform_network_process+0x1a8>
 8010656:	4b23      	ldr	r3, [pc, #140]	; (80106e4 <ai_platform_network_process+0x23c>)
 8010658:	4823      	ldr	r0, [pc, #140]	; (80106e8 <ai_platform_network_process+0x240>)
 801065a:	4a24      	ldr	r2, [pc, #144]	; (80106ec <ai_platform_network_process+0x244>)
 801065c:	6018      	str	r0, [r3, #0]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	4293      	cmp	r3, r2
 8010662:	f43f af48 	beq.w	80104f6 <ai_platform_network_process+0x4e>
 8010666:	e7fe      	b.n	8010666 <ai_platform_network_process+0x1be>
 8010668:	4b21      	ldr	r3, [pc, #132]	; (80106f0 <ai_platform_network_process+0x248>)
 801066a:	2201      	movs	r2, #1
 801066c:	4618      	mov	r0, r3
 801066e:	601a      	str	r2, [r3, #0]
 8010670:	6803      	ldr	r3, [r0, #0]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d1fc      	bne.n	8010670 <ai_platform_network_process+0x1c8>
 8010676:	4b1f      	ldr	r3, [pc, #124]	; (80106f4 <ai_platform_network_process+0x24c>)
 8010678:	481b      	ldr	r0, [pc, #108]	; (80106e8 <ai_platform_network_process+0x240>)
 801067a:	4a1c      	ldr	r2, [pc, #112]	; (80106ec <ai_platform_network_process+0x244>)
 801067c:	6018      	str	r0, [r3, #0]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	4293      	cmp	r3, r2
 8010682:	f43f af38 	beq.w	80104f6 <ai_platform_network_process+0x4e>
 8010686:	e7fe      	b.n	8010686 <ai_platform_network_process+0x1de>
 8010688:	2803      	cmp	r0, #3
 801068a:	6163      	str	r3, [r4, #20]
 801068c:	d10b      	bne.n	80106a6 <ai_platform_network_process+0x1fe>
 801068e:	f04f 0b00 	mov.w	fp, #0
 8010692:	f104 0010 	add.w	r0, r4, #16
 8010696:	2217      	movs	r2, #23
 8010698:	2112      	movs	r1, #18
 801069a:	f000 f9b7 	bl	8010a0c <core_set_error>
 801069e:	4658      	mov	r0, fp
 80106a0:	b003      	add	sp, #12
 80106a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106a6:	f104 0010 	add.w	r0, r4, #16
 80106aa:	2230      	movs	r2, #48	; 0x30
 80106ac:	2111      	movs	r1, #17
 80106ae:	f000 f9ad 	bl	8010a0c <core_set_error>
 80106b2:	f04f 0b00 	mov.w	fp, #0
 80106b6:	4658      	mov	r0, fp
 80106b8:	b003      	add	sp, #12
 80106ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106be:	f104 0010 	add.w	r0, r4, #16
 80106c2:	2221      	movs	r2, #33	; 0x21
 80106c4:	2112      	movs	r1, #18
 80106c6:	469b      	mov	fp, r3
 80106c8:	f000 f9a0 	bl	8010a0c <core_set_error>
 80106cc:	e7e7      	b.n	801069e <ai_platform_network_process+0x1f6>
 80106ce:	bf00      	nop
 80106d0:	a1c00100 	.word	0xa1c00100
 80106d4:	e0002000 	.word	0xe0002000
 80106d8:	e0042000 	.word	0xe0042000
 80106dc:	5c001000 	.word	0x5c001000
 80106e0:	58024c08 	.word	0x58024c08
 80106e4:	58024c00 	.word	0x58024c00
 80106e8:	f407a5c2 	.word	0xf407a5c2
 80106ec:	b5e8b5cd 	.word	0xb5e8b5cd
 80106f0:	40023008 	.word	0x40023008
 80106f4:	40023000 	.word	0x40023000
 80106f8:	f1ba 0f00 	cmp.w	sl, #0
 80106fc:	f000 808c 	beq.w	8010818 <ai_platform_network_process+0x370>
 8010700:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8010704:	2b01      	cmp	r3, #1
 8010706:	f240 813b 	bls.w	8010980 <ai_platform_network_process+0x4d8>
 801070a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801070c:	f115 0f0c 	cmn.w	r5, #12
 8010710:	f000 8136 	beq.w	8010980 <ai_platform_network_process+0x4d8>
 8010714:	89ab      	ldrh	r3, [r5, #12]
 8010716:	2b00      	cmp	r3, #0
 8010718:	f000 8132 	beq.w	8010980 <ai_platform_network_process+0x4d8>
 801071c:	4656      	mov	r6, sl
 801071e:	f04f 0900 	mov.w	r9, #0
 8010722:	9400      	str	r4, [sp, #0]
 8010724:	4599      	cmp	r9, r3
 8010726:	d274      	bcs.n	8010812 <ai_platform_network_process+0x36a>
 8010728:	692b      	ldr	r3, [r5, #16]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d071      	beq.n	8010812 <ai_platform_network_process+0x36a>
 801072e:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 8010732:	2f00      	cmp	r7, #0
 8010734:	d06d      	beq.n	8010812 <ai_platform_network_process+0x36a>
 8010736:	696b      	ldr	r3, [r5, #20]
 8010738:	ea4f 1409 	mov.w	r4, r9, lsl #4
 801073c:	f8d3 8000 	ldr.w	r8, [r3]
 8010740:	eb18 0a04 	adds.w	sl, r8, r4
 8010744:	f000 8125 	beq.w	8010992 <ai_platform_network_process+0x4ea>
 8010748:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 801074c:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 8010750:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8010754:	fb0b f30e 	mul.w	r3, fp, lr
 8010758:	69b8      	ldr	r0, [r7, #24]
 801075a:	fb0c f303 	mul.w	r3, ip, r3
 801075e:	6841      	ldr	r1, [r0, #4]
 8010760:	4299      	cmp	r1, r3
 8010762:	f0c0 810c 	bcc.w	801097e <ai_platform_network_process+0x4d6>
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	68da      	ldr	r2, [r3, #12]
 801076a:	455a      	cmp	r2, fp
 801076c:	f040 8107 	bne.w	801097e <ai_platform_network_process+0x4d6>
 8010770:	689a      	ldr	r2, [r3, #8]
 8010772:	4572      	cmp	r2, lr
 8010774:	f040 8103 	bne.w	801097e <ai_platform_network_process+0x4d6>
 8010778:	685b      	ldr	r3, [r3, #4]
 801077a:	459c      	cmp	ip, r3
 801077c:	f040 80ff 	bne.w	801097e <ai_platform_network_process+0x4d6>
 8010780:	6800      	ldr	r0, [r0, #0]
 8010782:	f002 fb85 	bl	8012e90 <ai_array_get_byte_size>
 8010786:	68fa      	ldr	r2, [r7, #12]
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	68d2      	ldr	r2, [r2, #12]
 801078c:	68db      	ldr	r3, [r3, #12]
 801078e:	fb03 f302 	mul.w	r3, r3, r2
 8010792:	4298      	cmp	r0, r3
 8010794:	f0c0 80f3 	bcc.w	801097e <ai_platform_network_process+0x4d6>
 8010798:	69bb      	ldr	r3, [r7, #24]
 801079a:	6818      	ldr	r0, [r3, #0]
 801079c:	f002 fb2c 	bl	8012df8 <ai_array_to_buffer_fmt>
 80107a0:	6833      	ldr	r3, [r6, #0]
 80107a2:	4043      	eors	r3, r0
 80107a4:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80107a8:	f040 810e 	bne.w	80109c8 <ai_platform_network_process+0x520>
 80107ac:	6933      	ldr	r3, [r6, #16]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	f000 8101 	beq.w	80109b6 <ai_platform_network_process+0x50e>
 80107b4:	88b3      	ldrh	r3, [r6, #4]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	f000 80f4 	beq.w	80109a4 <ai_platform_network_process+0x4fc>
 80107bc:	9a01      	ldr	r2, [sp, #4]
 80107be:	68f9      	ldr	r1, [r7, #12]
 80107c0:	429a      	cmp	r2, r3
 80107c2:	68c9      	ldr	r1, [r1, #12]
 80107c4:	bf38      	it	cc
 80107c6:	461a      	movcc	r2, r3
 80107c8:	9201      	str	r2, [sp, #4]
 80107ca:	697a      	ldr	r2, [r7, #20]
 80107cc:	68d3      	ldr	r3, [r2, #12]
 80107ce:	fb03 f301 	mul.w	r3, r3, r1
 80107d2:	f8ca 3008 	str.w	r3, [sl, #8]
 80107d6:	88b2      	ldrh	r2, [r6, #4]
 80107d8:	fb03 f302 	mul.w	r3, r3, r2
 80107dc:	f8ca 300c 	str.w	r3, [sl, #12]
 80107e0:	6931      	ldr	r1, [r6, #16]
 80107e2:	f8ca 1004 	str.w	r1, [sl, #4]
 80107e6:	6932      	ldr	r2, [r6, #16]
 80107e8:	4413      	add	r3, r2
 80107ea:	f848 3004 	str.w	r3, [r8, r4]
 80107ee:	69b8      	ldr	r0, [r7, #24]
 80107f0:	6803      	ldr	r3, [r0, #0]
 80107f2:	009b      	lsls	r3, r3, #2
 80107f4:	d408      	bmi.n	8010808 <ai_platform_network_process+0x360>
 80107f6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80107fa:	1a9b      	subs	r3, r3, r2
 80107fc:	4419      	add	r1, r3
 80107fe:	6081      	str	r1, [r0, #8]
 8010800:	69bb      	ldr	r3, [r7, #24]
 8010802:	f8da 2004 	ldr.w	r2, [sl, #4]
 8010806:	60da      	str	r2, [r3, #12]
 8010808:	f109 0901 	add.w	r9, r9, #1
 801080c:	3618      	adds	r6, #24
 801080e:	89ab      	ldrh	r3, [r5, #12]
 8010810:	e788      	b.n	8010724 <ai_platform_network_process+0x27c>
 8010812:	e9dd 4300 	ldrd	r4, r3, [sp]
 8010816:	82a3      	strh	r3, [r4, #20]
 8010818:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801081c:	2a00      	cmp	r2, #0
 801081e:	f000 80a9 	beq.w	8010974 <ai_platform_network_process+0x4cc>
 8010822:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8010824:	2a01      	cmp	r2, #1
 8010826:	f240 80a8 	bls.w	801097a <ai_platform_network_process+0x4d2>
 801082a:	f105 060c 	add.w	r6, r5, #12
 801082e:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 8010832:	8aa3      	ldrh	r3, [r4, #20]
 8010834:	455b      	cmp	r3, fp
 8010836:	f67f af32 	bls.w	801069e <ai_platform_network_process+0x1f6>
 801083a:	9400      	str	r4, [sp, #0]
 801083c:	2d00      	cmp	r5, #0
 801083e:	d037      	beq.n	80108b0 <ai_platform_network_process+0x408>
 8010840:	882b      	ldrh	r3, [r5, #0]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d034      	beq.n	80108b0 <ai_platform_network_process+0x408>
 8010846:	686b      	ldr	r3, [r5, #4]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d031      	beq.n	80108b0 <ai_platform_network_process+0x408>
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d02e      	beq.n	80108b0 <ai_platform_network_process+0x408>
 8010852:	f04f 0800 	mov.w	r8, #0
 8010856:	e01a      	b.n	801088e <ai_platform_network_process+0x3e6>
 8010858:	68d4      	ldr	r4, [r2, #12]
 801085a:	1b00      	subs	r0, r0, r4
 801085c:	4401      	add	r1, r0
 801085e:	6091      	str	r1, [r2, #8]
 8010860:	687a      	ldr	r2, [r7, #4]
 8010862:	699b      	ldr	r3, [r3, #24]
 8010864:	60da      	str	r2, [r3, #12]
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	f108 0801 	add.w	r8, r8, #1
 801086c:	68b9      	ldr	r1, [r7, #8]
 801086e:	f85a 2009 	ldr.w	r2, [sl, r9]
 8010872:	440b      	add	r3, r1
 8010874:	4293      	cmp	r3, r2
 8010876:	d301      	bcc.n	801087c <ai_platform_network_process+0x3d4>
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	1ad3      	subs	r3, r2, r3
 801087c:	607b      	str	r3, [r7, #4]
 801087e:	882b      	ldrh	r3, [r5, #0]
 8010880:	4598      	cmp	r8, r3
 8010882:	d215      	bcs.n	80108b0 <ai_platform_network_process+0x408>
 8010884:	686b      	ldr	r3, [r5, #4]
 8010886:	b19b      	cbz	r3, 80108b0 <ai_platform_network_process+0x408>
 8010888:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801088c:	b183      	cbz	r3, 80108b0 <ai_platform_network_process+0x408>
 801088e:	68a9      	ldr	r1, [r5, #8]
 8010890:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8010894:	699a      	ldr	r2, [r3, #24]
 8010896:	f8d1 a000 	ldr.w	sl, [r1]
 801089a:	6814      	ldr	r4, [r2, #0]
 801089c:	eb0a 0709 	add.w	r7, sl, r9
 80108a0:	6890      	ldr	r0, [r2, #8]
 80108a2:	00a4      	lsls	r4, r4, #2
 80108a4:	6879      	ldr	r1, [r7, #4]
 80108a6:	d5d7      	bpl.n	8010858 <ai_platform_network_process+0x3b0>
 80108a8:	68ba      	ldr	r2, [r7, #8]
 80108aa:	f002 fb53 	bl	8012f54 <memcpy>
 80108ae:	e7da      	b.n	8010866 <ai_platform_network_process+0x3be>
 80108b0:	9800      	ldr	r0, [sp, #0]
 80108b2:	f002 fa67 	bl	8012d84 <ai_layers_forward_all>
 80108b6:	2e00      	cmp	r6, #0
 80108b8:	d04a      	beq.n	8010950 <ai_platform_network_process+0x4a8>
 80108ba:	8833      	ldrh	r3, [r6, #0]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d047      	beq.n	8010950 <ai_platform_network_process+0x4a8>
 80108c0:	6873      	ldr	r3, [r6, #4]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d044      	beq.n	8010950 <ai_platform_network_process+0x4a8>
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d041      	beq.n	8010950 <ai_platform_network_process+0x4a8>
 80108cc:	f04f 0800 	mov.w	r8, #0
 80108d0:	e019      	b.n	8010906 <ai_platform_network_process+0x45e>
 80108d2:	f85a 2009 	ldr.w	r2, [sl, r9]
 80108d6:	4291      	cmp	r1, r2
 80108d8:	d301      	bcc.n	80108de <ai_platform_network_process+0x436>
 80108da:	68f9      	ldr	r1, [r7, #12]
 80108dc:	1a51      	subs	r1, r2, r1
 80108de:	6079      	str	r1, [r7, #4]
 80108e0:	f108 0801 	add.w	r8, r8, #1
 80108e4:	6998      	ldr	r0, [r3, #24]
 80108e6:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 80108ea:	1b12      	subs	r2, r2, r4
 80108ec:	440a      	add	r2, r1
 80108ee:	6082      	str	r2, [r0, #8]
 80108f0:	687a      	ldr	r2, [r7, #4]
 80108f2:	699b      	ldr	r3, [r3, #24]
 80108f4:	60da      	str	r2, [r3, #12]
 80108f6:	8833      	ldrh	r3, [r6, #0]
 80108f8:	4598      	cmp	r8, r3
 80108fa:	d229      	bcs.n	8010950 <ai_platform_network_process+0x4a8>
 80108fc:	6873      	ldr	r3, [r6, #4]
 80108fe:	b33b      	cbz	r3, 8010950 <ai_platform_network_process+0x4a8>
 8010900:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8010904:	b323      	cbz	r3, 8010950 <ai_platform_network_process+0x4a8>
 8010906:	68b2      	ldr	r2, [r6, #8]
 8010908:	ea4f 1908 	mov.w	r9, r8, lsl #4
 801090c:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8010910:	f8d2 a000 	ldr.w	sl, [r2]
 8010914:	f8de 1000 	ldr.w	r1, [lr]
 8010918:	eb0a 0709 	add.w	r7, sl, r9
 801091c:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 8010920:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 8010924:	eb00 0102 	add.w	r1, r0, r2
 8010928:	d0d3      	beq.n	80108d2 <ai_platform_network_process+0x42a>
 801092a:	f8de 1008 	ldr.w	r1, [lr, #8]
 801092e:	f002 fb11 	bl	8012f54 <memcpy>
 8010932:	f85a 2009 	ldr.w	r2, [sl, r9]
 8010936:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 801093a:	440b      	add	r3, r1
 801093c:	4293      	cmp	r3, r2
 801093e:	d301      	bcc.n	8010944 <ai_platform_network_process+0x49c>
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	1ad3      	subs	r3, r2, r3
 8010944:	607b      	str	r3, [r7, #4]
 8010946:	f108 0801 	add.w	r8, r8, #1
 801094a:	8833      	ldrh	r3, [r6, #0]
 801094c:	4598      	cmp	r8, r3
 801094e:	d3d5      	bcc.n	80108fc <ai_platform_network_process+0x454>
 8010950:	9b00      	ldr	r3, [sp, #0]
 8010952:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 8010956:	461a      	mov	r2, r3
 8010958:	8a9b      	ldrh	r3, [r3, #20]
 801095a:	f10b 0b01 	add.w	fp, fp, #1
 801095e:	fa1f fb8b 	uxth.w	fp, fp
 8010962:	455b      	cmp	r3, fp
 8010964:	f8a2 b016 	strh.w	fp, [r2, #22]
 8010968:	f63f af68 	bhi.w	801083c <ai_platform_network_process+0x394>
 801096c:	4658      	mov	r0, fp
 801096e:	b003      	add	sp, #12
 8010970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010974:	4615      	mov	r5, r2
 8010976:	4616      	mov	r6, r2
 8010978:	e759      	b.n	801082e <ai_platform_network_process+0x386>
 801097a:	2600      	movs	r6, #0
 801097c:	e757      	b.n	801082e <ai_platform_network_process+0x386>
 801097e:	9c00      	ldr	r4, [sp, #0]
 8010980:	f104 0010 	add.w	r0, r4, #16
 8010984:	2218      	movs	r2, #24
 8010986:	2113      	movs	r1, #19
 8010988:	f04f 0b00 	mov.w	fp, #0
 801098c:	f000 f83e 	bl	8010a0c <core_set_error>
 8010990:	e685      	b.n	801069e <ai_platform_network_process+0x1f6>
 8010992:	9c00      	ldr	r4, [sp, #0]
 8010994:	2217      	movs	r2, #23
 8010996:	2113      	movs	r1, #19
 8010998:	46d3      	mov	fp, sl
 801099a:	f104 0010 	add.w	r0, r4, #16
 801099e:	f000 f835 	bl	8010a0c <core_set_error>
 80109a2:	e67c      	b.n	801069e <ai_platform_network_process+0x1f6>
 80109a4:	9c00      	ldr	r4, [sp, #0]
 80109a6:	2221      	movs	r2, #33	; 0x21
 80109a8:	2113      	movs	r1, #19
 80109aa:	469b      	mov	fp, r3
 80109ac:	f104 0010 	add.w	r0, r4, #16
 80109b0:	f000 f82c 	bl	8010a0c <core_set_error>
 80109b4:	e673      	b.n	801069e <ai_platform_network_process+0x1f6>
 80109b6:	9c00      	ldr	r4, [sp, #0]
 80109b8:	2217      	movs	r2, #23
 80109ba:	2113      	movs	r1, #19
 80109bc:	469b      	mov	fp, r3
 80109be:	f104 0010 	add.w	r0, r4, #16
 80109c2:	f000 f823 	bl	8010a0c <core_set_error>
 80109c6:	e66a      	b.n	801069e <ai_platform_network_process+0x1f6>
 80109c8:	9c00      	ldr	r4, [sp, #0]
 80109ca:	2219      	movs	r2, #25
 80109cc:	2113      	movs	r1, #19
 80109ce:	f04f 0b00 	mov.w	fp, #0
 80109d2:	f104 0010 	add.w	r0, r4, #16
 80109d6:	f000 f819 	bl	8010a0c <core_set_error>
 80109da:	e660      	b.n	801069e <ai_platform_network_process+0x1f6>
 80109dc:	f104 0010 	add.w	r0, r4, #16
 80109e0:	2217      	movs	r2, #23
 80109e2:	2112      	movs	r1, #18
 80109e4:	469b      	mov	fp, r3
 80109e6:	f000 f811 	bl	8010a0c <core_set_error>
 80109ea:	e658      	b.n	801069e <ai_platform_network_process+0x1f6>
 80109ec:	f104 0010 	add.w	r0, r4, #16
 80109f0:	2219      	movs	r2, #25
 80109f2:	2112      	movs	r1, #18
 80109f4:	f04f 0b00 	mov.w	fp, #0
 80109f8:	f000 f808 	bl	8010a0c <core_set_error>
 80109fc:	e64f      	b.n	801069e <ai_platform_network_process+0x1f6>
 80109fe:	f1ba 0f00 	cmp.w	sl, #0
 8010a02:	f47f ae7f 	bne.w	8010704 <ai_platform_network_process+0x25c>
 8010a06:	e70d      	b.n	8010824 <ai_platform_network_process+0x37c>

08010a08 <core_init>:
 8010a08:	2001      	movs	r0, #1
 8010a0a:	4770      	bx	lr

08010a0c <core_set_error>:
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	7800      	ldrb	r0, [r0, #0]
 8010a10:	b930      	cbnz	r0, 8010a20 <core_set_error+0x14>
 8010a12:	7019      	strb	r1, [r3, #0]
 8010a14:	2001      	movs	r0, #1
 8010a16:	6819      	ldr	r1, [r3, #0]
 8010a18:	f362 211f 	bfi	r1, r2, #8, #24
 8010a1c:	6019      	str	r1, [r3, #0]
 8010a1e:	4770      	bx	lr
 8010a20:	2000      	movs	r0, #0
 8010a22:	4770      	bx	lr

08010a24 <func_dummy>:
 8010a24:	4770      	bx	lr
 8010a26:	bf00      	nop

08010a28 <ai_dict8_dot_array_f32>:
 8010a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a2c:	9d06      	ldr	r5, [sp, #24]
 8010a2e:	4c88      	ldr	r4, [pc, #544]	; (8010c50 <ai_dict8_dot_array_f32+0x228>)
 8010a30:	2d07      	cmp	r5, #7
 8010a32:	442c      	add	r4, r5
 8010a34:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010a38:	f104 0620 	add.w	r6, r4, #32
 8010a3c:	d817      	bhi.n	8010a6e <ai_dict8_dot_array_f32+0x46>
 8010a3e:	42b3      	cmp	r3, r6
 8010a40:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8010c54 <ai_dict8_dot_array_f32+0x22c>
 8010a44:	d20b      	bcs.n	8010a5e <ai_dict8_dot_array_f32+0x36>
 8010a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a4a:	ecf3 7a01 	vldmia	r3!, {s15}
 8010a4e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010a52:	42b3      	cmp	r3, r6
 8010a54:	edd4 6a00 	vldr	s13, [r4]
 8010a58:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010a5c:	d3f3      	bcc.n	8010a46 <ai_dict8_dot_array_f32+0x1e>
 8010a5e:	edd0 7a00 	vldr	s15, [r0]
 8010a62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010a66:	ed80 7a00 	vstr	s14, [r0]
 8010a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a6e:	f001 0503 	and.w	r5, r1, #3
 8010a72:	2d02      	cmp	r5, #2
 8010a74:	f000 80f0 	beq.w	8010c58 <ai_dict8_dot_array_f32+0x230>
 8010a78:	2d03      	cmp	r5, #3
 8010a7a:	f000 81ff 	beq.w	8010e7c <ai_dict8_dot_array_f32+0x454>
 8010a7e:	2d01      	cmp	r5, #1
 8010a80:	f000 81f0 	beq.w	8010e64 <ai_dict8_dot_array_f32+0x43c>
 8010a84:	42a3      	cmp	r3, r4
 8010a86:	f200 81fc 	bhi.w	8010e82 <ai_dict8_dot_array_f32+0x45a>
 8010a8a:	1ae4      	subs	r4, r4, r3
 8010a8c:	f101 0810 	add.w	r8, r1, #16
 8010a90:	f101 0508 	add.w	r5, r1, #8
 8010a94:	f103 0720 	add.w	r7, r3, #32
 8010a98:	0964      	lsrs	r4, r4, #5
 8010a9a:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8010c54 <ai_dict8_dot_array_f32+0x22c>
 8010a9e:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 8010aa2:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 8010aa6:	3508      	adds	r5, #8
 8010aa8:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 8010aac:	3720      	adds	r7, #32
 8010aae:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8010ab2:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 8010ab6:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010aba:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 8010abe:	edde 7a00 	vldr	s15, [lr]
 8010ac2:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 8010ac6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010aca:	eddc 5a00 	vldr	s11, [ip]
 8010ace:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 8010ad2:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 8010ad6:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010ada:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010ade:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 8010ae2:	ed9c 4a00 	vldr	s8, [ip]
 8010ae6:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 8010aea:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8010aee:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 8010af2:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010af6:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 8010afa:	eee4 7a26 	vfma.f32	s15, s8, s13
 8010afe:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 8010b02:	ed9c 4a00 	vldr	s8, [ip]
 8010b06:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 8010b0a:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 8010b0e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010b12:	eee4 7a05 	vfma.f32	s15, s8, s10
 8010b16:	ed9e 5a00 	vldr	s10, [lr]
 8010b1a:	ed9c 4a00 	vldr	s8, [ip]
 8010b1e:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 8010b22:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 8010b26:	4545      	cmp	r5, r8
 8010b28:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8010b2c:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010b30:	eee5 7a06 	vfma.f32	s15, s10, s12
 8010b34:	ed9e 5a00 	vldr	s10, [lr]
 8010b38:	ed9c 6a00 	vldr	s12, [ip]
 8010b3c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010b40:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010b44:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010b48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010b4c:	d1a9      	bne.n	8010aa2 <ai_dict8_dot_array_f32+0x7a>
 8010b4e:	3401      	adds	r4, #1
 8010b50:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8010b54:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8010b58:	42b3      	cmp	r3, r6
 8010b5a:	d280      	bcs.n	8010a5e <ai_dict8_dot_array_f32+0x36>
 8010b5c:	461c      	mov	r4, r3
 8010b5e:	780d      	ldrb	r5, [r1, #0]
 8010b60:	ecf4 6a01 	vldmia	r4!, {s13}
 8010b64:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010b68:	42a6      	cmp	r6, r4
 8010b6a:	edd5 7a00 	vldr	s15, [r5]
 8010b6e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010b72:	f67f af74 	bls.w	8010a5e <ai_dict8_dot_array_f32+0x36>
 8010b76:	784d      	ldrb	r5, [r1, #1]
 8010b78:	f103 0408 	add.w	r4, r3, #8
 8010b7c:	edd3 6a01 	vldr	s13, [r3, #4]
 8010b80:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010b84:	42a6      	cmp	r6, r4
 8010b86:	edd5 7a00 	vldr	s15, [r5]
 8010b8a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010b8e:	f67f af66 	bls.w	8010a5e <ai_dict8_dot_array_f32+0x36>
 8010b92:	788d      	ldrb	r5, [r1, #2]
 8010b94:	f103 040c 	add.w	r4, r3, #12
 8010b98:	edd3 6a02 	vldr	s13, [r3, #8]
 8010b9c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010ba0:	42a6      	cmp	r6, r4
 8010ba2:	edd5 7a00 	vldr	s15, [r5]
 8010ba6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010baa:	f67f af58 	bls.w	8010a5e <ai_dict8_dot_array_f32+0x36>
 8010bae:	78cd      	ldrb	r5, [r1, #3]
 8010bb0:	f103 0410 	add.w	r4, r3, #16
 8010bb4:	edd3 6a03 	vldr	s13, [r3, #12]
 8010bb8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010bbc:	42a6      	cmp	r6, r4
 8010bbe:	edd5 7a00 	vldr	s15, [r5]
 8010bc2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010bc6:	f67f af4a 	bls.w	8010a5e <ai_dict8_dot_array_f32+0x36>
 8010bca:	790d      	ldrb	r5, [r1, #4]
 8010bcc:	f103 0414 	add.w	r4, r3, #20
 8010bd0:	edd3 6a04 	vldr	s13, [r3, #16]
 8010bd4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010bd8:	42a6      	cmp	r6, r4
 8010bda:	edd5 7a00 	vldr	s15, [r5]
 8010bde:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010be2:	f67f af3c 	bls.w	8010a5e <ai_dict8_dot_array_f32+0x36>
 8010be6:	794d      	ldrb	r5, [r1, #5]
 8010be8:	f103 0418 	add.w	r4, r3, #24
 8010bec:	edd3 6a05 	vldr	s13, [r3, #20]
 8010bf0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010bf4:	42a6      	cmp	r6, r4
 8010bf6:	edd5 7a00 	vldr	s15, [r5]
 8010bfa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010bfe:	f67f af2e 	bls.w	8010a5e <ai_dict8_dot_array_f32+0x36>
 8010c02:	798d      	ldrb	r5, [r1, #6]
 8010c04:	f103 041c 	add.w	r4, r3, #28
 8010c08:	edd3 6a06 	vldr	s13, [r3, #24]
 8010c0c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010c10:	42a6      	cmp	r6, r4
 8010c12:	edd5 7a00 	vldr	s15, [r5]
 8010c16:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c1a:	f67f af20 	bls.w	8010a5e <ai_dict8_dot_array_f32+0x36>
 8010c1e:	79cd      	ldrb	r5, [r1, #7]
 8010c20:	f103 0420 	add.w	r4, r3, #32
 8010c24:	edd3 6a07 	vldr	s13, [r3, #28]
 8010c28:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010c2c:	42a6      	cmp	r6, r4
 8010c2e:	edd5 7a00 	vldr	s15, [r5]
 8010c32:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c36:	f67f af12 	bls.w	8010a5e <ai_dict8_dot_array_f32+0x36>
 8010c3a:	7a09      	ldrb	r1, [r1, #8]
 8010c3c:	edd3 7a08 	vldr	s15, [r3, #32]
 8010c40:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010c44:	edd2 6a00 	vldr	s13, [r2]
 8010c48:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c4c:	e707      	b.n	8010a5e <ai_dict8_dot_array_f32+0x36>
 8010c4e:	bf00      	nop
 8010c50:	3ffffff8 	.word	0x3ffffff8
 8010c54:	00000000 	.word	0x00000000
 8010c58:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8010c54 <ai_dict8_dot_array_f32+0x22c>
 8010c5c:	780d      	ldrb	r5, [r1, #0]
 8010c5e:	3304      	adds	r3, #4
 8010c60:	ed53 7a01 	vldr	s15, [r3, #-4]
 8010c64:	3101      	adds	r1, #1
 8010c66:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010c6a:	edd5 6a00 	vldr	s13, [r5]
 8010c6e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c72:	780d      	ldrb	r5, [r1, #0]
 8010c74:	1d1f      	adds	r7, r3, #4
 8010c76:	edd3 7a00 	vldr	s15, [r3]
 8010c7a:	f101 0c01 	add.w	ip, r1, #1
 8010c7e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010c82:	42bc      	cmp	r4, r7
 8010c84:	edd5 6a00 	vldr	s13, [r5]
 8010c88:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c8c:	d365      	bcc.n	8010d5a <ai_dict8_dot_array_f32+0x332>
 8010c8e:	3324      	adds	r3, #36	; 0x24
 8010c90:	f101 0e11 	add.w	lr, r1, #17
 8010c94:	3109      	adds	r1, #9
 8010c96:	eba6 0803 	sub.w	r8, r6, r3
 8010c9a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8010c9e:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 8010ca2:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8010ca6:	3108      	adds	r1, #8
 8010ca8:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 8010cac:	3320      	adds	r3, #32
 8010cae:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010cb2:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8010cb6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010cba:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 8010cbe:	edd5 7a00 	vldr	s15, [r5]
 8010cc2:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 8010cc6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010cca:	edd4 5a00 	vldr	s11, [r4]
 8010cce:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 8010cd2:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 8010cd6:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010cda:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010cde:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8010ce2:	ed94 4a00 	vldr	s8, [r4]
 8010ce6:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 8010cea:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010cee:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 8010cf2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010cf6:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 8010cfa:	eee4 7a26 	vfma.f32	s15, s8, s13
 8010cfe:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 8010d02:	ed94 4a00 	vldr	s8, [r4]
 8010d06:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 8010d0a:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 8010d0e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010d12:	eee4 7a05 	vfma.f32	s15, s8, s10
 8010d16:	ed95 5a00 	vldr	s10, [r5]
 8010d1a:	ed94 4a00 	vldr	s8, [r4]
 8010d1e:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8010d22:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 8010d26:	458e      	cmp	lr, r1
 8010d28:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010d2c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010d30:	eee5 7a06 	vfma.f32	s15, s10, s12
 8010d34:	ed95 5a00 	vldr	s10, [r5]
 8010d38:	ed94 6a00 	vldr	s12, [r4]
 8010d3c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010d40:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010d44:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010d48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010d4c:	d1a9      	bne.n	8010ca2 <ai_dict8_dot_array_f32+0x27a>
 8010d4e:	f108 0801 	add.w	r8, r8, #1
 8010d52:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 8010d56:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 8010d5a:	42b7      	cmp	r7, r6
 8010d5c:	f4bf ae7f 	bcs.w	8010a5e <ai_dict8_dot_array_f32+0x36>
 8010d60:	463b      	mov	r3, r7
 8010d62:	f89c 1000 	ldrb.w	r1, [ip]
 8010d66:	ecf3 6a01 	vldmia	r3!, {s13}
 8010d6a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010d6e:	429e      	cmp	r6, r3
 8010d70:	edd1 7a00 	vldr	s15, [r1]
 8010d74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010d78:	f67f ae71 	bls.w	8010a5e <ai_dict8_dot_array_f32+0x36>
 8010d7c:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8010d80:	f107 0308 	add.w	r3, r7, #8
 8010d84:	edd7 6a01 	vldr	s13, [r7, #4]
 8010d88:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010d8c:	429e      	cmp	r6, r3
 8010d8e:	edd1 7a00 	vldr	s15, [r1]
 8010d92:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010d96:	f67f ae62 	bls.w	8010a5e <ai_dict8_dot_array_f32+0x36>
 8010d9a:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8010d9e:	f107 030c 	add.w	r3, r7, #12
 8010da2:	edd7 6a02 	vldr	s13, [r7, #8]
 8010da6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010daa:	429e      	cmp	r6, r3
 8010dac:	edd1 7a00 	vldr	s15, [r1]
 8010db0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010db4:	f67f ae53 	bls.w	8010a5e <ai_dict8_dot_array_f32+0x36>
 8010db8:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8010dbc:	f107 0310 	add.w	r3, r7, #16
 8010dc0:	edd7 6a03 	vldr	s13, [r7, #12]
 8010dc4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010dc8:	429e      	cmp	r6, r3
 8010dca:	edd1 7a00 	vldr	s15, [r1]
 8010dce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010dd2:	f67f ae44 	bls.w	8010a5e <ai_dict8_dot_array_f32+0x36>
 8010dd6:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8010dda:	f107 0314 	add.w	r3, r7, #20
 8010dde:	edd7 6a04 	vldr	s13, [r7, #16]
 8010de2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010de6:	429e      	cmp	r6, r3
 8010de8:	edd1 7a00 	vldr	s15, [r1]
 8010dec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010df0:	f67f ae35 	bls.w	8010a5e <ai_dict8_dot_array_f32+0x36>
 8010df4:	f89c 1005 	ldrb.w	r1, [ip, #5]
 8010df8:	f107 0318 	add.w	r3, r7, #24
 8010dfc:	edd7 6a05 	vldr	s13, [r7, #20]
 8010e00:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010e04:	429e      	cmp	r6, r3
 8010e06:	edd1 7a00 	vldr	s15, [r1]
 8010e0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010e0e:	f67f ae26 	bls.w	8010a5e <ai_dict8_dot_array_f32+0x36>
 8010e12:	f89c 1006 	ldrb.w	r1, [ip, #6]
 8010e16:	f107 031c 	add.w	r3, r7, #28
 8010e1a:	edd7 6a06 	vldr	s13, [r7, #24]
 8010e1e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010e22:	429e      	cmp	r6, r3
 8010e24:	edd1 7a00 	vldr	s15, [r1]
 8010e28:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010e2c:	f67f ae17 	bls.w	8010a5e <ai_dict8_dot_array_f32+0x36>
 8010e30:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8010e34:	f107 0320 	add.w	r3, r7, #32
 8010e38:	edd7 6a07 	vldr	s13, [r7, #28]
 8010e3c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010e40:	429e      	cmp	r6, r3
 8010e42:	edd1 7a00 	vldr	s15, [r1]
 8010e46:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010e4a:	f67f ae08 	bls.w	8010a5e <ai_dict8_dot_array_f32+0x36>
 8010e4e:	f89c 3008 	ldrb.w	r3, [ip, #8]
 8010e52:	edd7 7a08 	vldr	s15, [r7, #32]
 8010e56:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010e5a:	edd2 6a00 	vldr	s13, [r2]
 8010e5e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010e62:	e5fc      	b.n	8010a5e <ai_dict8_dot_array_f32+0x36>
 8010e64:	780d      	ldrb	r5, [r1, #0]
 8010e66:	3304      	adds	r3, #4
 8010e68:	ed53 7a01 	vldr	s15, [r3, #-4]
 8010e6c:	3101      	adds	r1, #1
 8010e6e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010e72:	ed95 7a00 	vldr	s14, [r5]
 8010e76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010e7a:	e6ef      	b.n	8010c5c <ai_dict8_dot_array_f32+0x234>
 8010e7c:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 8010c54 <ai_dict8_dot_array_f32+0x22c>
 8010e80:	e6f7      	b.n	8010c72 <ai_dict8_dot_array_f32+0x24a>
 8010e82:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 8010c54 <ai_dict8_dot_array_f32+0x22c>
 8010e86:	e667      	b.n	8010b58 <ai_dict8_dot_array_f32+0x130>

08010e88 <ai_dict4_dot_array_f32>:
 8010e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e8c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010e8e:	f027 0c01 	bic.w	ip, r7, #1
 8010e92:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8010e96:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8010e9a:	f000 80ad 	beq.w	8010ff8 <ai_dict4_dot_array_f32+0x170>
 8010e9e:	1d0d      	adds	r5, r1, #4
 8010ea0:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8010ea4:	f103 0420 	add.w	r4, r3, #32
 8010ea8:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8011000 <ai_dict4_dot_array_f32+0x178>
 8010eac:	eb05 0e09 	add.w	lr, r5, r9
 8010eb0:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8010eb4:	3504      	adds	r5, #4
 8010eb6:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 8010eba:	3420      	adds	r4, #32
 8010ebc:	f006 0a0f 	and.w	sl, r6, #15
 8010ec0:	0936      	lsrs	r6, r6, #4
 8010ec2:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8010ec6:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8010eca:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 8010ece:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010ed2:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 8010ed6:	edda 7a00 	vldr	s15, [sl]
 8010eda:	edd6 5a00 	vldr	s11, [r6]
 8010ede:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010ee2:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 8010ee6:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 8010eea:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8010eee:	f006 060f 	and.w	r6, r6, #15
 8010ef2:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8010ef6:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 8010efa:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8010efe:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 8010f02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010f06:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 8010f0a:	ed9a 3a00 	vldr	s6, [sl]
 8010f0e:	ed96 5a00 	vldr	s10, [r6]
 8010f12:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 8010f16:	eee3 7a04 	vfma.f32	s15, s6, s8
 8010f1a:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 8010f1e:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8010f22:	f00a 0a0f 	and.w	sl, sl, #15
 8010f26:	45ae      	cmp	lr, r5
 8010f28:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8010f2c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8010f30:	ed9b 3a00 	vldr	s6, [fp]
 8010f34:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 8010f38:	eee5 7a06 	vfma.f32	s15, s10, s12
 8010f3c:	ed9a 4a00 	vldr	s8, [sl]
 8010f40:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 8010f44:	f006 060f 	and.w	r6, r6, #15
 8010f48:	ed9a 5a00 	vldr	s10, [sl]
 8010f4c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010f50:	ed96 6a00 	vldr	s12, [r6]
 8010f54:	eee3 7a23 	vfma.f32	s15, s6, s7
 8010f58:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010f5c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010f60:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010f64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010f68:	d1a2      	bne.n	8010eb0 <ai_dict4_dot_array_f32+0x28>
 8010f6a:	4449      	add	r1, r9
 8010f6c:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8010f70:	459c      	cmp	ip, r3
 8010f72:	d92d      	bls.n	8010fd0 <ai_dict4_dot_array_f32+0x148>
 8010f74:	f10c 0c07 	add.w	ip, ip, #7
 8010f78:	f103 0508 	add.w	r5, r3, #8
 8010f7c:	f103 0810 	add.w	r8, r3, #16
 8010f80:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8010f84:	ebac 0c05 	sub.w	ip, ip, r5
 8010f88:	f02c 0407 	bic.w	r4, ip, #7
 8010f8c:	44a0      	add	r8, r4
 8010f8e:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8010f92:	3508      	adds	r5, #8
 8010f94:	ed55 5a03 	vldr	s11, [r5, #-12]
 8010f98:	f004 060f 	and.w	r6, r4, #15
 8010f9c:	0924      	lsrs	r4, r4, #4
 8010f9e:	ed55 6a04 	vldr	s13, [r5, #-16]
 8010fa2:	45a8      	cmp	r8, r5
 8010fa4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010fa8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010fac:	edd6 7a00 	vldr	s15, [r6]
 8010fb0:	ed94 6a00 	vldr	s12, [r4]
 8010fb4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010fb8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010fbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010fc0:	d1e5      	bne.n	8010f8e <ai_dict4_dot_array_f32+0x106>
 8010fc2:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8010fc6:	f10c 0c01 	add.w	ip, ip, #1
 8010fca:	4461      	add	r1, ip
 8010fcc:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8010fd0:	07fc      	lsls	r4, r7, #31
 8010fd2:	d509      	bpl.n	8010fe8 <ai_dict4_dot_array_f32+0x160>
 8010fd4:	7809      	ldrb	r1, [r1, #0]
 8010fd6:	edd3 7a00 	vldr	s15, [r3]
 8010fda:	090b      	lsrs	r3, r1, #4
 8010fdc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010fe0:	edd2 6a00 	vldr	s13, [r2]
 8010fe4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010fe8:	edd0 7a00 	vldr	s15, [r0]
 8010fec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010ff0:	ed80 7a00 	vstr	s14, [r0]
 8010ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ff8:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8011000 <ai_dict4_dot_array_f32+0x178>
 8010ffc:	e7b8      	b.n	8010f70 <ai_dict4_dot_array_f32+0xe8>
 8010ffe:	bf00      	nop
 8011000:	00000000 	.word	0x00000000

08011004 <ai_dict_decompress_f32>:
 8011004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011008:	9f08      	ldr	r7, [sp, #32]
 801100a:	2b04      	cmp	r3, #4
 801100c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8011010:	d00e      	beq.n	8011030 <ai_dict_decompress_f32+0x2c>
 8011012:	2b08      	cmp	r3, #8
 8011014:	d10a      	bne.n	801102c <ai_dict_decompress_f32+0x28>
 8011016:	42b8      	cmp	r0, r7
 8011018:	d208      	bcs.n	801102c <ai_dict_decompress_f32+0x28>
 801101a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801101e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	f840 3b04 	str.w	r3, [r0], #4
 8011028:	4287      	cmp	r7, r0
 801102a:	d8f6      	bhi.n	801101a <ai_dict_decompress_f32+0x16>
 801102c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011030:	9b07      	ldr	r3, [sp, #28]
 8011032:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8011036:	f003 0e01 	and.w	lr, r3, #1
 801103a:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 801103e:	f10c 38ff 	add.w	r8, ip, #4294967295	; 0xffffffff
 8011042:	42b8      	cmp	r0, r7
 8011044:	d2f2      	bcs.n	801102c <ai_dict_decompress_f32+0x28>
 8011046:	f1bc 0f00 	cmp.w	ip, #0
 801104a:	d019      	beq.n	8011080 <ai_dict_decompress_f32+0x7c>
 801104c:	f100 0508 	add.w	r5, r0, #8
 8011050:	1e4c      	subs	r4, r1, #1
 8011052:	eb01 0608 	add.w	r6, r1, r8
 8011056:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801105a:	3508      	adds	r5, #8
 801105c:	091b      	lsrs	r3, r3, #4
 801105e:	42a6      	cmp	r6, r4
 8011060:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	f845 3c10 	str.w	r3, [r5, #-16]
 801106a:	7823      	ldrb	r3, [r4, #0]
 801106c:	f003 030f 	and.w	r3, r3, #15
 8011070:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	f845 3c0c 	str.w	r3, [r5, #-12]
 801107a:	d1ec      	bne.n	8011056 <ai_dict_decompress_f32+0x52>
 801107c:	4461      	add	r1, ip
 801107e:	4448      	add	r0, r9
 8011080:	f1be 0f00 	cmp.w	lr, #0
 8011084:	d103      	bne.n	801108e <ai_dict_decompress_f32+0x8a>
 8011086:	4287      	cmp	r7, r0
 8011088:	d8dd      	bhi.n	8011046 <ai_dict_decompress_f32+0x42>
 801108a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801108e:	780b      	ldrb	r3, [r1, #0]
 8011090:	3004      	adds	r0, #4
 8011092:	3101      	adds	r1, #1
 8011094:	091b      	lsrs	r3, r3, #4
 8011096:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	f840 3c04 	str.w	r3, [r0, #-4]
 80110a0:	e7cf      	b.n	8011042 <ai_dict_decompress_f32+0x3e>
 80110a2:	bf00      	nop

080110a4 <forward_conv2d>:
 80110a4:	6942      	ldr	r2, [r0, #20]
 80110a6:	8813      	ldrh	r3, [r2, #0]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	f000 8639 	beq.w	8011d20 <forward_conv2d+0xc7c>
 80110ae:	6852      	ldr	r2, [r2, #4]
 80110b0:	6851      	ldr	r1, [r2, #4]
 80110b2:	b101      	cbz	r1, 80110b6 <forward_conv2d+0x12>
 80110b4:	6809      	ldr	r1, [r1, #0]
 80110b6:	2b01      	cmp	r3, #1
 80110b8:	f240 862f 	bls.w	8011d1a <forward_conv2d+0xc76>
 80110bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110c0:	ed2d 8b08 	vpush	{d8-d11}
 80110c4:	b0c9      	sub	sp, #292	; 0x124
 80110c6:	6914      	ldr	r4, [r2, #16]
 80110c8:	af02      	add	r7, sp, #8
 80110ca:	2c00      	cmp	r4, #0
 80110cc:	f000 8621 	beq.w	8011d12 <forward_conv2d+0xc6e>
 80110d0:	6824      	ldr	r4, [r4, #0]
 80110d2:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 80110d6:	2b02      	cmp	r3, #2
 80110d8:	f000 8616 	beq.w	8011d08 <forward_conv2d+0xc64>
 80110dc:	69d5      	ldr	r5, [r2, #28]
 80110de:	2d00      	cmp	r5, #0
 80110e0:	f000 860b 	beq.w	8011cfa <forward_conv2d+0xc56>
 80110e4:	f112 0318 	adds.w	r3, r2, #24
 80110e8:	682c      	ldr	r4, [r5, #0]
 80110ea:	d004      	beq.n	80110f6 <forward_conv2d+0x52>
 80110ec:	8b13      	ldrh	r3, [r2, #24]
 80110ee:	2b01      	cmp	r3, #1
 80110f0:	f240 8618 	bls.w	8011d24 <forward_conv2d+0xc80>
 80110f4:	686b      	ldr	r3, [r5, #4]
 80110f6:	68aa      	ldr	r2, [r5, #8]
 80110f8:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 80110fc:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8011100:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8011104:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8011108:	68ce      	ldr	r6, [r1, #12]
 801110a:	69a1      	ldr	r1, [r4, #24]
 801110c:	6b85      	ldr	r5, [r0, #56]	; 0x38
 801110e:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8011112:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011116:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 801111a:	f8de 1004 	ldr.w	r1, [lr, #4]
 801111e:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8011122:	f8de 100c 	ldr.w	r1, [lr, #12]
 8011126:	64f9      	str	r1, [r7, #76]	; 0x4c
 8011128:	f8de 1008 	ldr.w	r1, [lr, #8]
 801112c:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8011130:	6871      	ldr	r1, [r6, #4]
 8011132:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8011136:	68f1      	ldr	r1, [r6, #12]
 8011138:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 801113c:	68b1      	ldr	r1, [r6, #8]
 801113e:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8011142:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8011146:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 801114a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801114e:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8011152:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8011156:	6889      	ldr	r1, [r1, #8]
 8011158:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 801115c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 801115e:	e9d5 ab00 	ldrd	sl, fp, [r5]
 8011162:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8011166:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8011168:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 801116c:	6981      	ldr	r1, [r0, #24]
 801116e:	e9d0 890b 	ldrd	r8, r9, [r0, #44]	; 0x2c
 8011172:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8011176:	2b00      	cmp	r3, #0
 8011178:	f000 85b0 	beq.w	8011cdc <forward_conv2d+0xc38>
 801117c:	699b      	ldr	r3, [r3, #24]
 801117e:	689b      	ldr	r3, [r3, #8]
 8011180:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011188:	4606      	mov	r6, r0
 801118a:	69c0      	ldr	r0, [r0, #28]
 801118c:	699b      	ldr	r3, [r3, #24]
 801118e:	689b      	ldr	r3, [r3, #8]
 8011190:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011194:	2a00      	cmp	r2, #0
 8011196:	f000 8594 	beq.w	8011cc2 <forward_conv2d+0xc1e>
 801119a:	e9d2 2305 	ldrd	r2, r3, [r2, #20]
 801119e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80111a2:	6892      	ldr	r2, [r2, #8]
 80111a4:	689b      	ldr	r3, [r3, #8]
 80111a6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80111aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80111ae:	f001 fe6f 	bl	8012e90 <ai_array_get_byte_size>
 80111b2:	69a3      	ldr	r3, [r4, #24]
 80111b4:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 80111b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80111bc:	681c      	ldr	r4, [r3, #0]
 80111be:	fa1f f289 	uxth.w	r2, r9
 80111c2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80111c6:	fa1f f388 	uxth.w	r3, r8
 80111ca:	f3c4 15c6 	ubfx	r5, r4, #7, #7
 80111ce:	f3c4 5041 	ubfx	r0, r4, #21, #2
 80111d2:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 80111d6:	f3c4 4c43 	ubfx	ip, r4, #17, #4
 80111da:	3a01      	subs	r2, #1
 80111dc:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 80111e0:	fa45 f000 	asr.w	r0, r5, r0
 80111e4:	6a35      	ldr	r5, [r6, #32]
 80111e6:	fb0e 1202 	mla	r2, lr, r2, r1
 80111ea:	3b01      	subs	r3, #1
 80111ec:	3c01      	subs	r4, #1
 80111ee:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80111f2:	f8c7 50b0 	str.w	r5, [r7, #176]	; 0xb0
 80111f6:	b285      	uxth	r5, r0
 80111f8:	fb04 1103 	mla	r1, r4, r3, r1
 80111fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011200:	64ba      	str	r2, [r7, #72]	; 0x48
 8011202:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8011206:	4619      	mov	r1, r3
 8011208:	4ad1      	ldr	r2, [pc, #836]	; (8011550 <forward_conv2d+0x4ac>)
 801120a:	2b00      	cmp	r3, #0
 801120c:	bf08      	it	eq
 801120e:	4611      	moveq	r1, r2
 8011210:	f1bc 0f04 	cmp.w	ip, #4
 8011214:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8011218:	f000 852a 	beq.w	8011c70 <forward_conv2d+0xbcc>
 801121c:	f1bc 0f08 	cmp.w	ip, #8
 8011220:	f000 8526 	beq.w	8011c70 <forward_conv2d+0xbcc>
 8011224:	fa1f f38a 	uxth.w	r3, sl
 8011228:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801122c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011230:	425b      	negs	r3, r3
 8011232:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011236:	2a00      	cmp	r2, #0
 8011238:	f000 8222 	beq.w	8011680 <forward_conv2d+0x5dc>
 801123c:	fa1f f48b 	uxth.w	r4, fp
 8011240:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8011244:	f8b7 c0f0 	ldrh.w	ip, [r7, #240]	; 0xf0
 8011248:	fa0f f588 	sxth.w	r5, r8
 801124c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8011250:	fa0f f689 	sxth.w	r6, r9
 8011254:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 8011258:	4264      	negs	r4, r4
 801125a:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 801125e:	fb02 f200 	mul.w	r2, r2, r0
 8011262:	f8c7 c064 	str.w	ip, [r7, #100]	; 0x64
 8011266:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 801126a:	f8b7 c100 	ldrh.w	ip, [r7, #256]	; 0x100
 801126e:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 8011272:	0084      	lsls	r4, r0, #2
 8011274:	fb01 f300 	mul.w	r3, r1, r0
 8011278:	ed9f 8ab6 	vldr	s16, [pc, #728]	; 8011554 <forward_conv2d+0x4b0>
 801127c:	fb00 f202 	mul.w	r2, r0, r2
 8011280:	f8c7 c0b4 	str.w	ip, [r7, #180]	; 0xb4
 8011284:	f8c7 50ac 	str.w	r5, [r7, #172]	; 0xac
 8011288:	fb06 fc05 	mul.w	ip, r6, r5
 801128c:	fb05 f500 	mul.w	r5, r5, r0
 8011290:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8011294:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8011298:	460a      	mov	r2, r1
 801129a:	637d      	str	r5, [r7, #52]	; 0x34
 801129c:	4605      	mov	r5, r0
 801129e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80112a2:	fb04 f505 	mul.w	r5, r4, r5
 80112a6:	653e      	str	r6, [r7, #80]	; 0x50
 80112a8:	66fc      	str	r4, [r7, #108]	; 0x6c
 80112aa:	fb01 f606 	mul.w	r6, r1, r6
 80112ae:	4621      	mov	r1, r4
 80112b0:	607d      	str	r5, [r7, #4]
 80112b2:	0085      	lsls	r5, r0, #2
 80112b4:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 80112b8:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
 80112bc:	4625      	mov	r5, r4
 80112be:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80112c0:	63be      	str	r6, [r7, #56]	; 0x38
 80112c2:	fb01 f505 	mul.w	r5, r1, r5
 80112c6:	f8d7 60f8 	ldr.w	r6, [r7, #248]	; 0xf8
 80112ca:	fb04 f402 	mul.w	r4, r4, r2
 80112ce:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80112d2:	00b6      	lsls	r6, r6, #2
 80112d4:	62bd      	str	r5, [r7, #40]	; 0x28
 80112d6:	fb00 f001 	mul.w	r0, r0, r1
 80112da:	009d      	lsls	r5, r3, #2
 80112dc:	61bc      	str	r4, [r7, #24]
 80112de:	0094      	lsls	r4, r2, #2
 80112e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80112e4:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 80112e8:	f8c7 60cc 	str.w	r6, [r7, #204]	; 0xcc
 80112ec:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 80112f0:	62fd      	str	r5, [r7, #44]	; 0x2c
 80112f2:	633c      	str	r4, [r7, #48]	; 0x30
 80112f4:	6238      	str	r0, [r7, #32]
 80112f6:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80112fa:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80112fe:	fb06 f000 	mul.w	r0, r6, r0
 8011302:	fb02 f201 	mul.w	r2, r2, r1
 8011306:	61f8      	str	r0, [r7, #28]
 8011308:	0118      	lsls	r0, r3, #4
 801130a:	00db      	lsls	r3, r3, #3
 801130c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8011310:	60b8      	str	r0, [r7, #8]
 8011312:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011316:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801131a:	66bb      	str	r3, [r7, #104]	; 0x68
 801131c:	2300      	movs	r3, #0
 801131e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011322:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8011326:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801132a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801132c:	2900      	cmp	r1, #0
 801132e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011330:	4413      	add	r3, r2
 8011332:	bfb4      	ite	lt
 8011334:	2100      	movlt	r1, #0
 8011336:	2200      	movge	r2, #0
 8011338:	4283      	cmp	r3, r0
 801133a:	bf28      	it	cs
 801133c:	4603      	movcs	r3, r0
 801133e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8011342:	2801      	cmp	r0, #1
 8011344:	f000 82f9 	beq.w	801193a <forward_conv2d+0x896>
 8011348:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 801134c:	4281      	cmp	r1, r0
 801134e:	f000 81b5 	beq.w	80116bc <forward_conv2d+0x618>
 8011352:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8011356:	2900      	cmp	r1, #0
 8011358:	f000 8171 	beq.w	801163e <forward_conv2d+0x59a>
 801135c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801135e:	1a9b      	subs	r3, r3, r2
 8011360:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 8011364:	1815      	adds	r5, r2, r0
 8011366:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 801136a:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 801136e:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8011372:	3d01      	subs	r5, #1
 8011374:	fb92 f1f0 	sdiv	r1, r2, r0
 8011378:	fb00 2111 	mls	r1, r0, r1, r2
 801137c:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 8011380:	2400      	movs	r4, #0
 8011382:	1a41      	subs	r1, r0, r1
 8011384:	67bc      	str	r4, [r7, #120]	; 0x78
 8011386:	4604      	mov	r4, r0
 8011388:	fb91 f0f0 	sdiv	r0, r1, r0
 801138c:	fb04 1110 	mls	r1, r4, r0, r1
 8011390:	4620      	mov	r0, r4
 8011392:	1a5b      	subs	r3, r3, r1
 8011394:	4411      	add	r1, r2
 8011396:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801139a:	4423      	add	r3, r4
 801139c:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 80113a0:	fb02 f201 	mul.w	r2, r2, r1
 80113a4:	677a      	str	r2, [r7, #116]	; 0x74
 80113a6:	1e5a      	subs	r2, r3, #1
 80113a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80113ac:	fb92 f8f0 	sdiv	r8, r2, r0
 80113b0:	4619      	mov	r1, r3
 80113b2:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80113b6:	46c2      	mov	sl, r8
 80113b8:	fbb1 f3f4 	udiv	r3, r1, r4
 80113bc:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80113c0:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 80113c4:	fb95 f5f0 	sdiv	r5, r5, r0
 80113c8:	eba1 0008 	sub.w	r0, r1, r8
 80113cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80113ce:	eba1 0c03 	sub.w	ip, r1, r3
 80113d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80113d6:	fbb2 f2f4 	udiv	r2, r2, r4
 80113da:	fb0e f403 	mul.w	r4, lr, r3
 80113de:	0096      	lsls	r6, r2, #2
 80113e0:	fb03 f305 	mul.w	r3, r3, r5
 80113e4:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 80113e8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80113ea:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 80113ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80113f0:	ea4f 098c 	mov.w	r9, ip, lsl #2
 80113f4:	fb04 f300 	mul.w	r3, r4, r0
 80113f8:	663e      	str	r6, [r7, #96]	; 0x60
 80113fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80113fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011402:	1b9b      	subs	r3, r3, r6
 8011404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011408:	008b      	lsls	r3, r1, #2
 801140a:	647b      	str	r3, [r7, #68]	; 0x44
 801140c:	00d3      	lsls	r3, r2, #3
 801140e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011412:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011416:	189e      	adds	r6, r3, r2
 8011418:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801141c:	2b00      	cmp	r3, #0
 801141e:	f2c0 8138 	blt.w	8011692 <forward_conv2d+0x5ee>
 8011422:	2100      	movs	r1, #0
 8011424:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8011426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801142a:	4688      	mov	r8, r1
 801142c:	460d      	mov	r5, r1
 801142e:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8011432:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 8011436:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801143a:	0080      	lsls	r0, r0, #2
 801143c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011440:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8011444:	4422      	add	r2, r4
 8011446:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 801144a:	4423      	add	r3, r4
 801144c:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 8011450:	42a2      	cmp	r2, r4
 8011452:	bf94      	ite	ls
 8011454:	ebc5 0202 	rsbls	r2, r5, r2
 8011458:	ebc5 0204 	rsbhi	r2, r5, r4
 801145c:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
 8011460:	eb08 0403 	add.w	r4, r8, r3
 8011464:	1a52      	subs	r2, r2, r1
 8011466:	462b      	mov	r3, r5
 8011468:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 801146c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8011470:	2d00      	cmp	r5, #0
 8011472:	bf08      	it	eq
 8011474:	4633      	moveq	r3, r6
 8011476:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 801147a:	440a      	add	r2, r1
 801147c:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 8011480:	42b3      	cmp	r3, r6
 8011482:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8011486:	fb00 5004 	mla	r0, r0, r4, r5
 801148a:	460a      	mov	r2, r1
 801148c:	fe08 6a06 	vseleq.f32	s12, s16, s12
 8011490:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8011494:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011496:	fb96 f6f1 	sdiv	r6, r6, r1
 801149a:	fb9c f5f1 	sdiv	r5, ip, r1
 801149e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80114a0:	440d      	add	r5, r1
 80114a2:	fb06 0112 	mls	r1, r6, r2, r0
 80114a6:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80114aa:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80114ae:	fb0e 0505 	mla	r5, lr, r5, r0
 80114b2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80114b6:	1b92      	subs	r2, r2, r6
 80114b8:	2800      	cmp	r0, #0
 80114ba:	d073      	beq.n	80115a4 <forward_conv2d+0x500>
 80114bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80114be:	fb02 f80e 	mul.w	r8, r2, lr
 80114c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80114c4:	fb00 fb01 	mul.w	fp, r0, r1
 80114c8:	2a00      	cmp	r2, #0
 80114ca:	d06b      	beq.n	80115a4 <forward_conv2d+0x500>
 80114cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80114ce:	189a      	adds	r2, r3, r2
 80114d0:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80114d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80114d8:	1ad3      	subs	r3, r2, r3
 80114da:	643b      	str	r3, [r7, #64]	; 0x40
 80114dc:	2300      	movs	r3, #0
 80114de:	673b      	str	r3, [r7, #112]	; 0x70
 80114e0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80114e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80114e8:	4413      	add	r3, r2
 80114ea:	188a      	adds	r2, r1, r2
 80114ec:	657b      	str	r3, [r7, #84]	; 0x54
 80114ee:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 80114f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80114f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80114fa:	f1ba 0f00 	cmp.w	sl, #0
 80114fe:	ecf3 7a01 	vldmia	r3!, {s15}
 8011502:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8011506:	ee67 7a86 	vmul.f32	s15, s15, s12
 801150a:	f340 80c0 	ble.w	801168e <forward_conv2d+0x5ea>
 801150e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8011512:	f04f 0c00 	mov.w	ip, #0
 8011516:	2e00      	cmp	r6, #0
 8011518:	dd1e      	ble.n	8011558 <forward_conv2d+0x4b4>
 801151a:	2100      	movs	r1, #0
 801151c:	eb00 040e 	add.w	r4, r0, lr
 8011520:	4284      	cmp	r4, r0
 8011522:	d910      	bls.n	8011546 <forward_conv2d+0x4a2>
 8011524:	4603      	mov	r3, r0
 8011526:	462a      	mov	r2, r5
 8011528:	ecb3 7a01 	vldmia	r3!, {s14}
 801152c:	ecf2 6a01 	vldmia	r2!, {s13}
 8011530:	429c      	cmp	r4, r3
 8011532:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011536:	d8f7      	bhi.n	8011528 <forward_conv2d+0x484>
 8011538:	43c3      	mvns	r3, r0
 801153a:	441c      	add	r4, r3
 801153c:	f024 0403 	bic.w	r4, r4, #3
 8011540:	3404      	adds	r4, #4
 8011542:	4425      	add	r5, r4
 8011544:	4420      	add	r0, r4
 8011546:	3101      	adds	r1, #1
 8011548:	4448      	add	r0, r9
 801154a:	428e      	cmp	r6, r1
 801154c:	d1e6      	bne.n	801151c <forward_conv2d+0x478>
 801154e:	e003      	b.n	8011558 <forward_conv2d+0x4b4>
 8011550:	08010a25 	.word	0x08010a25
 8011554:	00000000 	.word	0x00000000
 8011558:	f10c 0c01 	add.w	ip, ip, #1
 801155c:	4458      	add	r0, fp
 801155e:	4445      	add	r5, r8
 8011560:	45e2      	cmp	sl, ip
 8011562:	d1d8      	bne.n	8011516 <forward_conv2d+0x472>
 8011564:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8011568:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801156c:	441d      	add	r5, r3
 801156e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011572:	ece3 7a01 	vstmia	r3!, {s15}
 8011576:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801157a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801157e:	4293      	cmp	r3, r2
 8011580:	d1b9      	bne.n	80114f6 <forward_conv2d+0x452>
 8011582:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8011586:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011588:	4472      	add	r2, lr
 801158a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801158c:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8011590:	3301      	adds	r3, #1
 8011592:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011594:	673b      	str	r3, [r7, #112]	; 0x70
 8011596:	1a52      	subs	r2, r2, r1
 8011598:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 801159c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d19d      	bne.n	80114e0 <forward_conv2d+0x43c>
 80115a4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80115a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80115ac:	4608      	mov	r0, r1
 80115ae:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80115b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80115b4:	4410      	add	r0, r2
 80115b6:	3301      	adds	r3, #1
 80115b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 80115bc:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80115c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80115c2:	4401      	add	r1, r0
 80115c4:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80115c8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80115cc:	1a8a      	subs	r2, r1, r2
 80115ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80115d2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80115d6:	429a      	cmp	r2, r3
 80115d8:	f47f af1a 	bne.w	8011410 <forward_conv2d+0x36c>
 80115dc:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
 80115e0:	2400      	movs	r4, #0
 80115e2:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 80115e6:	f8d7 80e4 	ldr.w	r8, [r7, #228]	; 0xe4
 80115ea:	46a2      	mov	sl, r4
 80115ec:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 80115ee:	f8d7 90c4 	ldr.w	r9, [r7, #196]	; 0xc4
 80115f2:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80115f6:	4633      	mov	r3, r6
 80115f8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80115fc:	f10a 0a01 	add.w	sl, sl, #1
 8011600:	608d      	str	r5, [r1, #8]
 8011602:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8011606:	4416      	add	r6, r2
 8011608:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801160c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8011610:	4405      	add	r5, r0
 8011612:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8011616:	4608      	mov	r0, r1
 8011618:	47a0      	blx	r4
 801161a:	eba6 0309 	sub.w	r3, r6, r9
 801161e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011622:	4293      	cmp	r3, r2
 8011624:	bfa8      	it	ge
 8011626:	464e      	movge	r6, r9
 8011628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801162c:	4553      	cmp	r3, sl
 801162e:	d1e0      	bne.n	80115f2 <forward_conv2d+0x54e>
 8011630:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011634:	69fa      	ldr	r2, [r7, #28]
 8011636:	66be      	str	r6, [r7, #104]	; 0x68
 8011638:	4413      	add	r3, r2
 801163a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801163e:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8011642:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011644:	4604      	mov	r4, r0
 8011646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801164a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 801164e:	699b      	ldr	r3, [r3, #24]
 8011650:	4414      	add	r4, r2
 8011652:	1a82      	subs	r2, r0, r2
 8011654:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8011658:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801165c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8011660:	3101      	adds	r1, #1
 8011662:	68da      	ldr	r2, [r3, #12]
 8011664:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8011668:	609a      	str	r2, [r3, #8]
 801166a:	69bc      	ldr	r4, [r7, #24]
 801166c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011670:	4420      	add	r0, r4
 8011672:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8011676:	428b      	cmp	r3, r1
 8011678:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 801167c:	f47f ae51 	bne.w	8011322 <forward_conv2d+0x27e>
 8011680:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8011684:	46bd      	mov	sp, r7
 8011686:	ecbd 8b08 	vpop	{d8-d11}
 801168a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801168e:	461a      	mov	r2, r3
 8011690:	e76a      	b.n	8011568 <forward_conv2d+0x4c4>
 8011692:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8011696:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801169a:	460d      	mov	r5, r1
 801169c:	4688      	mov	r8, r1
 801169e:	1853      	adds	r3, r2, r1
 80116a0:	4611      	mov	r1, r2
 80116a2:	fb95 f2f2 	sdiv	r2, r5, r2
 80116a6:	fb01 5212 	mls	r2, r1, r2, r5
 80116aa:	460c      	mov	r4, r1
 80116ac:	1a8a      	subs	r2, r1, r2
 80116ae:	fb92 f1f1 	sdiv	r1, r2, r1
 80116b2:	fb04 2111 	mls	r1, r4, r1, r2
 80116b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80116b8:	1888      	adds	r0, r1, r2
 80116ba:	e6b8      	b.n	801142e <forward_conv2d+0x38a>
 80116bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80116be:	2901      	cmp	r1, #1
 80116c0:	f47f ae47 	bne.w	8011352 <forward_conv2d+0x2ae>
 80116c4:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80116c8:	2900      	cmp	r1, #0
 80116ca:	d0b8      	beq.n	801163e <forward_conv2d+0x59a>
 80116cc:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80116d0:	1a99      	subs	r1, r3, r2
 80116d2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80116d6:	0083      	lsls	r3, r0, #2
 80116d8:	fb02 f000 	mul.w	r0, r2, r0
 80116dc:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 80116e0:	6778      	str	r0, [r7, #116]	; 0x74
 80116e2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80116e6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 80116ea:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80116ee:	1a41      	subs	r1, r0, r1
 80116f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116f2:	fb00 f202 	mul.w	r2, r0, r2
 80116f6:	fb03 f301 	mul.w	r3, r3, r1
 80116fa:	627a      	str	r2, [r7, #36]	; 0x24
 80116fc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8011700:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011702:	2300      	movs	r3, #0
 8011704:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8011708:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801170c:	67bb      	str	r3, [r7, #120]	; 0x78
 801170e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8011712:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011716:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801171a:	fbb3 f3f2 	udiv	r3, r3, r2
 801171e:	4619      	mov	r1, r3
 8011720:	ebc3 7283 	rsb	r2, r3, r3, lsl #30
 8011724:	643b      	str	r3, [r7, #64]	; 0x40
 8011726:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 801172a:	0092      	lsls	r2, r2, #2
 801172c:	00db      	lsls	r3, r3, #3
 801172e:	657a      	str	r2, [r7, #84]	; 0x54
 8011730:	603b      	str	r3, [r7, #0]
 8011732:	008b      	lsls	r3, r1, #2
 8011734:	60fb      	str	r3, [r7, #12]
 8011736:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801173a:	2b00      	cmp	r3, #0
 801173c:	f2c0 8280 	blt.w	8011c40 <forward_conv2d+0xb9c>
 8011740:	2400      	movs	r4, #0
 8011742:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011744:	4621      	mov	r1, r4
 8011746:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801174a:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 801174e:	1818      	adds	r0, r3, r0
 8011750:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011754:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
 8011758:	18f3      	adds	r3, r6, r3
 801175a:	4420      	add	r0, r4
 801175c:	461c      	mov	r4, r3
 801175e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011762:	0080      	lsls	r0, r0, #2
 8011764:	429c      	cmp	r4, r3
 8011766:	bf28      	it	cs
 8011768:	461c      	movcs	r4, r3
 801176a:	1a64      	subs	r4, r4, r1
 801176c:	2d00      	cmp	r5, #0
 801176e:	f000 8258 	beq.w	8011c22 <forward_conv2d+0xb7e>
 8011772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011776:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 801177a:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 801177e:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 8011782:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011786:	428d      	cmp	r5, r1
 8011788:	462a      	mov	r2, r5
 801178a:	eba6 0104 	sub.w	r1, r6, r4
 801178e:	eba3 0304 	sub.w	r3, r3, r4
 8011792:	fe08 4a04 	vseleq.f32	s8, s16, s8
 8011796:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8011798:	f8d7 60a8 	ldr.w	r6, [r7, #168]	; 0xa8
 801179c:	4428      	add	r0, r5
 801179e:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 80117a2:	fb05 6e00 	mla	lr, r5, r0, r6
 80117a6:	eb0e 000b 	add.w	r0, lr, fp
 80117aa:	4570      	cmp	r0, lr
 80117ac:	6478      	str	r0, [r7, #68]	; 0x44
 80117ae:	f240 80a7 	bls.w	8011900 <forward_conv2d+0x85c>
 80117b2:	009b      	lsls	r3, r3, #2
 80117b4:	fb01 f10b 	mul.w	r1, r1, fp
 80117b8:	f024 0803 	bic.w	r8, r4, #3
 80117bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80117c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117c2:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	f000 809a 	beq.w	8011900 <forward_conv2d+0x85c>
 80117cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80117ce:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80117d2:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80117d6:	089b      	lsrs	r3, r3, #2
 80117d8:	4401      	add	r1, r0
 80117da:	68f8      	ldr	r0, [r7, #12]
 80117dc:	3301      	adds	r3, #1
 80117de:	1810      	adds	r0, r2, r0
 80117e0:	1a8a      	subs	r2, r1, r2
 80117e2:	617a      	str	r2, [r7, #20]
 80117e4:	fb03 f20a 	mul.w	r2, r3, sl
 80117e8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 80117ec:	65fa      	str	r2, [r7, #92]	; 0x5c
 80117ee:	011a      	lsls	r2, r3, #4
 80117f0:	009b      	lsls	r3, r3, #2
 80117f2:	663a      	str	r2, [r7, #96]	; 0x60
 80117f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80117f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80117fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117fc:	6979      	ldr	r1, [r7, #20]
 80117fe:	4413      	add	r3, r2
 8011800:	188a      	adds	r2, r1, r2
 8011802:	613b      	str	r3, [r7, #16]
 8011804:	673a      	str	r2, [r7, #112]	; 0x70
 8011806:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801180a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801180e:	ecf3 6a01 	vldmia	r3!, {s13}
 8011812:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011816:	ee66 6a84 	vmul.f32	s13, s13, s8
 801181a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801181e:	2b00      	cmp	r3, #0
 8011820:	dd57      	ble.n	80118d2 <forward_conv2d+0x82e>
 8011822:	4676      	mov	r6, lr
 8011824:	f04f 0c00 	mov.w	ip, #0
 8011828:	f1b8 0f00 	cmp.w	r8, #0
 801182c:	f340 81f7 	ble.w	8011c1e <forward_conv2d+0xb7a>
 8011830:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011834:	f109 0310 	add.w	r3, r9, #16
 8011838:	2000      	movs	r0, #0
 801183a:	18b1      	adds	r1, r6, r2
 801183c:	4632      	mov	r2, r6
 801183e:	eb02 050b 	add.w	r5, r2, fp
 8011842:	ed53 7a03 	vldr	s15, [r3, #-12]
 8011846:	ed92 6a00 	vldr	s12, [r2]
 801184a:	3004      	adds	r0, #4
 801184c:	ed95 7a00 	vldr	s14, [r5]
 8011850:	eb01 050b 	add.w	r5, r1, fp
 8011854:	ed53 4a04 	vldr	s9, [r3, #-16]
 8011858:	4540      	cmp	r0, r8
 801185a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801185e:	ed13 5a02 	vldr	s10, [r3, #-8]
 8011862:	edd1 5a00 	vldr	s11, [r1]
 8011866:	4452      	add	r2, sl
 8011868:	ed95 7a00 	vldr	s14, [r5]
 801186c:	4451      	add	r1, sl
 801186e:	eee4 7a86 	vfma.f32	s15, s9, s12
 8011872:	ed13 6a01 	vldr	s12, [r3, #-4]
 8011876:	f103 0310 	add.w	r3, r3, #16
 801187a:	eee5 7a25 	vfma.f32	s15, s10, s11
 801187e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011882:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011886:	dbda      	blt.n	801183e <forward_conv2d+0x79a>
 8011888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801188a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801188c:	441e      	add	r6, r3
 801188e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011890:	4499      	add	r9, r3
 8011892:	4284      	cmp	r4, r0
 8011894:	dd11      	ble.n	80118ba <forward_conv2d+0x816>
 8011896:	4602      	mov	r2, r0
 8011898:	4633      	mov	r3, r6
 801189a:	4649      	mov	r1, r9
 801189c:	3201      	adds	r2, #1
 801189e:	edd3 7a00 	vldr	s15, [r3]
 80118a2:	ecb1 7a01 	vldmia	r1!, {s14}
 80118a6:	445b      	add	r3, fp
 80118a8:	42a2      	cmp	r2, r4
 80118aa:	eee7 6a27 	vfma.f32	s13, s14, s15
 80118ae:	d1f5      	bne.n	801189c <forward_conv2d+0x7f8>
 80118b0:	1a20      	subs	r0, r4, r0
 80118b2:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 80118b6:	fb00 660b 	mla	r6, r0, fp, r6
 80118ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80118be:	f10c 0c01 	add.w	ip, ip, #1
 80118c2:	441e      	add	r6, r3
 80118c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80118c8:	4499      	add	r9, r3
 80118ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80118ce:	4563      	cmp	r3, ip
 80118d0:	d1aa      	bne.n	8011828 <forward_conv2d+0x784>
 80118d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80118d8:	4499      	add	r9, r3
 80118da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80118dc:	ece3 6a01 	vstmia	r3!, {s13}
 80118e0:	673b      	str	r3, [r7, #112]	; 0x70
 80118e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80118e6:	4293      	cmp	r3, r2
 80118e8:	d18f      	bne.n	801180a <forward_conv2d+0x766>
 80118ea:	693b      	ldr	r3, [r7, #16]
 80118ec:	f10e 0e04 	add.w	lr, lr, #4
 80118f0:	683a      	ldr	r2, [r7, #0]
 80118f2:	1a9b      	subs	r3, r3, r2
 80118f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80118f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118fa:	4573      	cmp	r3, lr
 80118fc:	f63f af7b 	bhi.w	80117f6 <forward_conv2d+0x752>
 8011900:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8011904:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8011908:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801190a:	440a      	add	r2, r1
 801190c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8011910:	3301      	adds	r3, #1
 8011912:	4608      	mov	r0, r1
 8011914:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8011918:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 801191c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011920:	67bb      	str	r3, [r7, #120]	; 0x78
 8011922:	4410      	add	r0, r2
 8011924:	1a8a      	subs	r2, r1, r2
 8011926:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 801192a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801192e:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8011932:	429a      	cmp	r2, r3
 8011934:	f47f aeff 	bne.w	8011736 <forward_conv2d+0x692>
 8011938:	e652      	b.n	80115e0 <forward_conv2d+0x53c>
 801193a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801193c:	2801      	cmp	r0, #1
 801193e:	f47f ad08 	bne.w	8011352 <forward_conv2d+0x2ae>
 8011942:	1a9b      	subs	r3, r3, r2
 8011944:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011946:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801194a:	fb00 f101 	mul.w	r1, r0, r1
 801194e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011952:	6779      	str	r1, [r7, #116]	; 0x74
 8011954:	2b00      	cmp	r3, #0
 8011956:	f000 815c 	beq.w	8011c12 <forward_conv2d+0xb6e>
 801195a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	fb03 f202 	mul.w	r2, r3, r2
 8011962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011966:	4401      	add	r1, r0
 8011968:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 801196c:	330a      	adds	r3, #10
 801196e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8011970:	6439      	str	r1, [r7, #64]	; 0x40
 8011972:	1a12      	subs	r2, r2, r0
 8011974:	f023 0307 	bic.w	r3, r3, #7
 8011978:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 801197c:	647a      	str	r2, [r7, #68]	; 0x44
 801197e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011984:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8011988:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801198c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011990:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8011994:	2300      	movs	r3, #0
 8011996:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801199a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801199c:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 80119a0:	ebad 0d03 	sub.w	sp, sp, r3
 80119a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80119a8:	ab02      	add	r3, sp, #8
 80119aa:	663b      	str	r3, [r7, #96]	; 0x60
 80119ac:	b132      	cbz	r2, 80119bc <forward_conv2d+0x918>
 80119ae:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80119b2:	4618      	mov	r0, r3
 80119b4:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80119b8:	f001 facc 	bl	8012f54 <memcpy>
 80119bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	f000 8152 	beq.w	8011c6a <forward_conv2d+0xbc6>
 80119c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80119ca:	ed93 2a00 	vldr	s4, [r3]
 80119ce:	3304      	adds	r3, #4
 80119d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80119d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80119d8:	2b00      	cmp	r3, #0
 80119da:	f000 8100 	beq.w	8011bde <forward_conv2d+0xb3a>
 80119de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119e2:	f04f 0b00 	mov.w	fp, #0
 80119e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80119ea:	eb03 0802 	add.w	r8, r3, r2
 80119ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80119f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80119fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80119fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8011a00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011a04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011a08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	f2c0 8124 	blt.w	8011c5a <forward_conv2d+0xbb6>
 8011a12:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8011a16:	2300      	movs	r3, #0
 8011a18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011a1a:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8011a1e:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8011a22:	4421      	add	r1, r4
 8011a24:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8011a26:	4540      	cmp	r0, r8
 8011a28:	bf94      	ite	ls
 8011a2a:	ebc3 0300 	rsbls	r3, r3, r0
 8011a2e:	ebc3 0308 	rsbhi	r3, r3, r8
 8011a32:	4422      	add	r2, r4
 8011a34:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8011a38:	1ac0      	subs	r0, r0, r3
 8011a3a:	eba4 0903 	sub.w	r9, r4, r3
 8011a3e:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 8011a42:	fb03 f304 	mul.w	r3, r3, r4
 8011a46:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 8011a4a:	2c00      	cmp	r4, #0
 8011a4c:	f340 8102 	ble.w	8011c54 <forward_conv2d+0xbb0>
 8011a50:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8011a52:	f023 0c0f 	bic.w	ip, r3, #15
 8011a56:	eef0 6a42 	vmov.f32	s13, s4
 8011a5a:	f04f 0e00 	mov.w	lr, #0
 8011a5e:	fb04 f000 	mul.w	r0, r4, r0
 8011a62:	fb04 f909 	mul.w	r9, r4, r9
 8011a66:	65b8      	str	r0, [r7, #88]	; 0x58
 8011a68:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8011a6c:	0900      	lsrs	r0, r0, #4
 8011a6e:	3001      	adds	r0, #1
 8011a70:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8011a74:	0100      	lsls	r0, r0, #4
 8011a76:	6578      	str	r0, [r7, #84]	; 0x54
 8011a78:	f1bc 0f00 	cmp.w	ip, #0
 8011a7c:	f340 80e8 	ble.w	8011c50 <forward_conv2d+0xbac>
 8011a80:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8011a84:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8011a88:	2500      	movs	r5, #0
 8011a8a:	ed14 7a0f 	vldr	s14, [r4, #-60]	; 0xffffffc4
 8011a8e:	3510      	adds	r5, #16
 8011a90:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8011a94:	3440      	adds	r4, #64	; 0x40
 8011a96:	ed14 6a20 	vldr	s12, [r4, #-128]	; 0xffffff80
 8011a9a:	4565      	cmp	r5, ip
 8011a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011aa0:	ed10 7a10 	vldr	s14, [r0, #-64]	; 0xffffffc0
 8011aa4:	ed14 3a1e 	vldr	s6, [r4, #-120]	; 0xffffff88
 8011aa8:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8011aac:	ed50 3a1e 	vldr	s7, [r0, #-120]	; 0xffffff88
 8011ab0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011ab4:	ed14 4a1d 	vldr	s8, [r4, #-116]	; 0xffffff8c
 8011ab8:	ed50 4a1d 	vldr	s9, [r0, #-116]	; 0xffffff8c
 8011abc:	ed14 5a1c 	vldr	s10, [r4, #-112]	; 0xffffff90
 8011ac0:	ed50 5a1c 	vldr	s11, [r0, #-112]	; 0xffffff90
 8011ac4:	ed14 6a1b 	vldr	s12, [r4, #-108]	; 0xffffff94
 8011ac8:	ed10 7a1b 	vldr	s14, [r0, #-108]	; 0xffffff94
 8011acc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011ad0:	ed54 ba1a 	vldr	s23, [r4, #-104]	; 0xffffff98
 8011ad4:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 8011ad8:	ed54 aa19 	vldr	s21, [r4, #-100]	; 0xffffff9c
 8011adc:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 8011ae0:	ed50 9a18 	vldr	s19, [r0, #-96]	; 0xffffffa0
 8011ae4:	ed14 9a18 	vldr	s18, [r4, #-96]	; 0xffffffa0
 8011ae8:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011aec:	ed50 8a17 	vldr	s17, [r0, #-92]	; 0xffffffa4
 8011af0:	ed14 0a17 	vldr	s0, [r4, #-92]	; 0xffffffa4
 8011af4:	ed54 0a16 	vldr	s1, [r4, #-88]	; 0xffffffa8
 8011af8:	ed10 1a16 	vldr	s2, [r0, #-88]	; 0xffffffa8
 8011afc:	ed54 1a15 	vldr	s3, [r4, #-84]	; 0xffffffac
 8011b00:	ed50 2a15 	vldr	s5, [r0, #-84]	; 0xffffffac
 8011b04:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011b08:	ed14 3a14 	vldr	s6, [r4, #-80]	; 0xffffffb0
 8011b0c:	ed50 3a14 	vldr	s7, [r0, #-80]	; 0xffffffb0
 8011b10:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 8011b14:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8011b18:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 8011b1c:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8011b20:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011b24:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 8011b28:	ed14 7a11 	vldr	s14, [r4, #-68]	; 0xffffffbc
 8011b2c:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8011b30:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8011b34:	eee9 7a89 	vfma.f32	s15, s19, s18
 8011b38:	eee8 7a80 	vfma.f32	s15, s17, s0
 8011b3c:	eee0 7a81 	vfma.f32	s15, s1, s2
 8011b40:	eee1 7aa2 	vfma.f32	s15, s3, s5
 8011b44:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011b48:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011b4c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011b50:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011b54:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011b58:	db97      	blt.n	8011a8a <forward_conv2d+0x9e6>
 8011b5a:	4451      	add	r1, sl
 8011b5c:	4452      	add	r2, sl
 8011b5e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011b60:	4283      	cmp	r3, r0
 8011b62:	dd0f      	ble.n	8011b84 <forward_conv2d+0xae0>
 8011b64:	4604      	mov	r4, r0
 8011b66:	460e      	mov	r6, r1
 8011b68:	4615      	mov	r5, r2
 8011b6a:	3401      	adds	r4, #1
 8011b6c:	ecb5 7a01 	vldmia	r5!, {s14}
 8011b70:	ecf6 7a01 	vldmia	r6!, {s15}
 8011b74:	42a3      	cmp	r3, r4
 8011b76:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011b7a:	d1f6      	bne.n	8011b6a <forward_conv2d+0xac6>
 8011b7c:	1a18      	subs	r0, r3, r0
 8011b7e:	0080      	lsls	r0, r0, #2
 8011b80:	4402      	add	r2, r0
 8011b82:	4401      	add	r1, r0
 8011b84:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011b86:	f10e 0e01 	add.w	lr, lr, #1
 8011b8a:	4449      	add	r1, r9
 8011b8c:	4402      	add	r2, r0
 8011b8e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8011b92:	4570      	cmp	r0, lr
 8011b94:	f47f af70 	bne.w	8011a78 <forward_conv2d+0x9d4>
 8011b98:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8011b9c:	f10b 0b01 	add.w	fp, fp, #1
 8011ba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ba2:	4608      	mov	r0, r1
 8011ba4:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8011ba8:	edc3 6a00 	vstr	s13, [r3]
 8011bac:	440b      	add	r3, r1
 8011bae:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8011bb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011bb6:	67bb      	str	r3, [r7, #120]	; 0x78
 8011bb8:	6a3b      	ldr	r3, [r7, #32]
 8011bba:	4410      	add	r0, r2
 8011bbc:	eba8 0802 	sub.w	r8, r8, r2
 8011bc0:	1ac9      	subs	r1, r1, r3
 8011bc2:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8011bc6:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8011bca:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8011bce:	4419      	add	r1, r3
 8011bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011bd4:	455b      	cmp	r3, fp
 8011bd6:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8011bda:	f47f af15 	bne.w	8011a08 <forward_conv2d+0x964>
 8011bde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011be2:	3301      	adds	r3, #1
 8011be4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011be8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8011bec:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8011bf0:	440a      	add	r2, r1
 8011bf2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8011bf6:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8011bfa:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 8011bfe:	3204      	adds	r2, #4
 8011c00:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8011c04:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	f47f aec6 	bne.w	801199a <forward_conv2d+0x8f6>
 8011c0e:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
 8011c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	f47f ace2 	bne.w	80115e0 <forward_conv2d+0x53c>
 8011c1c:	e50f      	b.n	801163e <forward_conv2d+0x59a>
 8011c1e:	2000      	movs	r0, #0
 8011c20:	e637      	b.n	8011892 <forward_conv2d+0x7ee>
 8011c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011c26:	eeb0 4a48 	vmov.f32	s8, s16
 8011c2a:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 8011c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c32:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8011c36:	1b19      	subs	r1, r3, r4
 8011c38:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011c3c:	1b1b      	subs	r3, r3, r4
 8011c3e:	e5aa      	b.n	8011796 <forward_conv2d+0x6f2>
 8011c40:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 8011c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011c46:	4621      	mov	r1, r4
 8011c48:	191a      	adds	r2, r3, r4
 8011c4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011c4e:	e57a      	b.n	8011746 <forward_conv2d+0x6a2>
 8011c50:	2000      	movs	r0, #0
 8011c52:	e785      	b.n	8011b60 <forward_conv2d+0xabc>
 8011c54:	eef0 6a42 	vmov.f32	s13, s4
 8011c58:	e79e      	b.n	8011b98 <forward_conv2d+0xaf4>
 8011c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c5e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8011c60:	eba8 0303 	sub.w	r3, r8, r3
 8011c64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8011c68:	e6d7      	b.n	8011a1a <forward_conv2d+0x976>
 8011c6a:	eeb0 2a48 	vmov.f32	s4, s16
 8011c6e:	e6b1      	b.n	80119d4 <forward_conv2d+0x930>
 8011c70:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8011c74:	68ca      	ldr	r2, [r1, #12]
 8011c76:	2a00      	cmp	r2, #0
 8011c78:	f43f aad4 	beq.w	8011224 <forward_conv2d+0x180>
 8011c7c:	6973      	ldr	r3, [r6, #20]
 8011c7e:	8818      	ldrh	r0, [r3, #0]
 8011c80:	2803      	cmp	r0, #3
 8011c82:	d91b      	bls.n	8011cbc <forward_conv2d+0xc18>
 8011c84:	685b      	ldr	r3, [r3, #4]
 8011c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c88:	b1ab      	cbz	r3, 8011cb6 <forward_conv2d+0xc12>
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	b19b      	cbz	r3, 8011cb6 <forward_conv2d+0xc12>
 8011c8e:	699c      	ldr	r4, [r3, #24]
 8011c90:	462b      	mov	r3, r5
 8011c92:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 8011c96:	6889      	ldr	r1, [r1, #8]
 8011c98:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8011c9c:	2800      	cmp	r0, #0
 8011c9e:	bf18      	it	ne
 8011ca0:	4605      	movne	r5, r0
 8011ca2:	f8c7 50fc 	str.w	r5, [r7, #252]	; 0xfc
 8011ca6:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 8011caa:	e9cd 5400 	strd	r5, r4, [sp]
 8011cae:	f7ff f9a9 	bl	8011004 <ai_dict_decompress_f32>
 8011cb2:	f7ff bab7 	b.w	8011224 <forward_conv2d+0x180>
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	699b      	ldr	r3, [r3, #24]
 8011cba:	deff      	udf	#255	; 0xff
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	685b      	ldr	r3, [r3, #4]
 8011cc0:	deff      	udf	#255	; 0xff
 8011cc2:	b178      	cbz	r0, 8011ce4 <forward_conv2d+0xc40>
 8011cc4:	6883      	ldr	r3, [r0, #8]
 8011cc6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8011cca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011cce:	2301      	movs	r3, #1
 8011cd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011cd8:	f7ff ba70 	b.w	80111bc <forward_conv2d+0x118>
 8011cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011ce0:	f7ff ba50 	b.w	8011184 <forward_conv2d+0xe0>
 8011ce4:	2301      	movs	r3, #1
 8011ce6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8011cea:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8011cee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011cf6:	f7ff ba61 	b.w	80111bc <forward_conv2d+0x118>
 8011cfa:	3218      	adds	r2, #24
 8011cfc:	d007      	beq.n	8011d0e <forward_conv2d+0xc6a>
 8011cfe:	462b      	mov	r3, r5
 8011d00:	462c      	mov	r4, r5
 8011d02:	462a      	mov	r2, r5
 8011d04:	f7ff b9f8 	b.w	80110f8 <forward_conv2d+0x54>
 8011d08:	2300      	movs	r3, #0
 8011d0a:	685b      	ldr	r3, [r3, #4]
 8011d0c:	deff      	udf	#255	; 0xff
 8011d0e:	68d3      	ldr	r3, [r2, #12]
 8011d10:	deff      	udf	#255	; 0xff
 8011d12:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 8011d16:	f7ff b9de 	b.w	80110d6 <forward_conv2d+0x32>
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	685b      	ldr	r3, [r3, #4]
 8011d1e:	deff      	udf	#255	; 0xff
 8011d20:	685b      	ldr	r3, [r3, #4]
 8011d22:	deff      	udf	#255	; 0xff
 8011d24:	2300      	movs	r3, #0
 8011d26:	f7ff b9e6 	b.w	80110f6 <forward_conv2d+0x52>
 8011d2a:	bf00      	nop

08011d2c <forward_dense>:
 8011d2c:	6942      	ldr	r2, [r0, #20]
 8011d2e:	8813      	ldrh	r3, [r2, #0]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	f000 81c8 	beq.w	80120c6 <forward_dense+0x39a>
 8011d36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d3a:	ed2d 8b08 	vpush	{d8-d11}
 8011d3e:	6851      	ldr	r1, [r2, #4]
 8011d40:	b091      	sub	sp, #68	; 0x44
 8011d42:	684d      	ldr	r5, [r1, #4]
 8011d44:	b105      	cbz	r5, 8011d48 <forward_dense+0x1c>
 8011d46:	682d      	ldr	r5, [r5, #0]
 8011d48:	2b01      	cmp	r3, #1
 8011d4a:	f240 81b9 	bls.w	80120c0 <forward_dense+0x394>
 8011d4e:	690a      	ldr	r2, [r1, #16]
 8011d50:	b102      	cbz	r2, 8011d54 <forward_dense+0x28>
 8011d52:	6812      	ldr	r2, [r2, #0]
 8011d54:	2b02      	cmp	r3, #2
 8011d56:	f000 81b8 	beq.w	80120ca <forward_dense+0x39e>
 8011d5a:	69cb      	ldr	r3, [r1, #28]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	f000 8209 	beq.w	8012174 <forward_dense+0x448>
 8011d62:	6818      	ldr	r0, [r3, #0]
 8011d64:	9008      	str	r0, [sp, #32]
 8011d66:	f111 0018 	adds.w	r0, r1, #24
 8011d6a:	f000 81dc 	beq.w	8012126 <forward_dense+0x3fa>
 8011d6e:	8b09      	ldrh	r1, [r1, #24]
 8011d70:	2901      	cmp	r1, #1
 8011d72:	f240 81fc 	bls.w	801216e <forward_dense+0x442>
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	f000 81d7 	beq.w	801212a <forward_dense+0x3fe>
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	9306      	str	r3, [sp, #24]
 8011d80:	9b08      	ldr	r3, [sp, #32]
 8011d82:	68d6      	ldr	r6, [r2, #12]
 8011d84:	699b      	ldr	r3, [r3, #24]
 8011d86:	68b0      	ldr	r0, [r6, #8]
 8011d88:	681f      	ldr	r7, [r3, #0]
 8011d8a:	68f4      	ldr	r4, [r6, #12]
 8011d8c:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 8011d90:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 8011d94:	f3c7 4743 	ubfx	r7, r7, #17, #4
 8011d98:	fb04 f000 	mul.w	r0, r4, r0
 8011d9c:	fa4e f10c 	asr.w	r1, lr, ip
 8011da0:	2f04      	cmp	r7, #4
 8011da2:	9007      	str	r0, [sp, #28]
 8011da4:	910b      	str	r1, [sp, #44]	; 0x2c
 8011da6:	68e9      	ldr	r1, [r5, #12]
 8011da8:	6870      	ldr	r0, [r6, #4]
 8011daa:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8011dae:	f000 81db 	beq.w	8012168 <forward_dense+0x43c>
 8011db2:	2f08      	cmp	r7, #8
 8011db4:	f000 81d8 	beq.w	8012168 <forward_dense+0x43c>
 8011db8:	f04f 0a00 	mov.w	sl, #0
 8011dbc:	6992      	ldr	r2, [r2, #24]
 8011dbe:	0080      	lsls	r0, r0, #2
 8011dc0:	69a9      	ldr	r1, [r5, #24]
 8011dc2:	6894      	ldr	r4, [r2, #8]
 8011dc4:	9a08      	ldr	r2, [sp, #32]
 8011dc6:	9009      	str	r0, [sp, #36]	; 0x24
 8011dc8:	1826      	adds	r6, r4, r0
 8011dca:	6952      	ldr	r2, [r2, #20]
 8011dcc:	9404      	str	r4, [sp, #16]
 8011dce:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8011dd2:	9a07      	ldr	r2, [sp, #28]
 8011dd4:	688f      	ldr	r7, [r1, #8]
 8011dd6:	2a00      	cmp	r2, #0
 8011dd8:	f000 81c1 	beq.w	801215e <forward_dense+0x432>
 8011ddc:	f1a8 0210 	sub.w	r2, r8, #16
 8011de0:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8011de4:	689d      	ldr	r5, [r3, #8]
 8011de6:	0912      	lsrs	r2, r2, #4
 8011de8:	910a      	str	r1, [sp, #40]	; 0x28
 8011dea:	2100      	movs	r1, #0
 8011dec:	9b06      	ldr	r3, [sp, #24]
 8011dee:	3201      	adds	r2, #1
 8011df0:	eddf 2acf 	vldr	s5, [pc, #828]	; 8012130 <forward_dense+0x404>
 8011df4:	9105      	str	r1, [sp, #20]
 8011df6:	f008 010f 	and.w	r1, r8, #15
 8011dfa:	0192      	lsls	r2, r2, #6
 8011dfc:	910d      	str	r1, [sp, #52]	; 0x34
 8011dfe:	920c      	str	r2, [sp, #48]	; 0x30
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d042      	beq.n	8011e8a <forward_dense+0x15e>
 8011e04:	699b      	ldr	r3, [r3, #24]
 8011e06:	689c      	ldr	r4, [r3, #8]
 8011e08:	9b04      	ldr	r3, [sp, #16]
 8011e0a:	f1ba 0f00 	cmp.w	sl, #0
 8011e0e:	d041      	beq.n	8011e94 <forward_dense+0x168>
 8011e10:	42b3      	cmp	r3, r6
 8011e12:	d229      	bcs.n	8011e68 <forward_dense+0x13c>
 8011e14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011e16:	469b      	mov	fp, r3
 8011e18:	ab0f      	add	r3, sp, #60	; 0x3c
 8011e1a:	2a04      	cmp	r2, #4
 8011e1c:	9303      	str	r3, [sp, #12]
 8011e1e:	4633      	mov	r3, r6
 8011e20:	4646      	mov	r6, r8
 8011e22:	4698      	mov	r8, r3
 8011e24:	f000 8154 	beq.w	80120d0 <forward_dense+0x3a4>
 8011e28:	2c00      	cmp	r4, #0
 8011e2a:	f000 8183 	beq.w	8012134 <forward_dense+0x408>
 8011e2e:	f8d4 c000 	ldr.w	ip, [r4]
 8011e32:	463b      	mov	r3, r7
 8011e34:	4629      	mov	r1, r5
 8011e36:	9600      	str	r6, [sp, #0]
 8011e38:	4652      	mov	r2, sl
 8011e3a:	9803      	ldr	r0, [sp, #12]
 8011e3c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8011e40:	f7fe fdf2 	bl	8010a28 <ai_dict8_dot_array_f32>
 8011e44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e46:	3404      	adds	r4, #4
 8011e48:	444d      	add	r5, r9
 8011e4a:	f84b 3b04 	str.w	r3, [fp], #4
 8011e4e:	45c3      	cmp	fp, r8
 8011e50:	d3ea      	bcc.n	8011e28 <forward_dense+0xfc>
 8011e52:	4643      	mov	r3, r8
 8011e54:	46b0      	mov	r8, r6
 8011e56:	461e      	mov	r6, r3
 8011e58:	9a04      	ldr	r2, [sp, #16]
 8011e5a:	43d3      	mvns	r3, r2
 8011e5c:	4433      	add	r3, r6
 8011e5e:	f023 0303 	bic.w	r3, r3, #3
 8011e62:	3304      	adds	r3, #4
 8011e64:	18d3      	adds	r3, r2, r3
 8011e66:	9304      	str	r3, [sp, #16]
 8011e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e6a:	9b05      	ldr	r3, [sp, #20]
 8011e6c:	4417      	add	r7, r2
 8011e6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e70:	3301      	adds	r3, #1
 8011e72:	4416      	add	r6, r2
 8011e74:	9a07      	ldr	r2, [sp, #28]
 8011e76:	9305      	str	r3, [sp, #20]
 8011e78:	4293      	cmp	r3, r2
 8011e7a:	f000 8170 	beq.w	801215e <forward_dense+0x432>
 8011e7e:	9b08      	ldr	r3, [sp, #32]
 8011e80:	699b      	ldr	r3, [r3, #24]
 8011e82:	689d      	ldr	r5, [r3, #8]
 8011e84:	9b06      	ldr	r3, [sp, #24]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d1bc      	bne.n	8011e04 <forward_dense+0xd8>
 8011e8a:	461c      	mov	r4, r3
 8011e8c:	9b04      	ldr	r3, [sp, #16]
 8011e8e:	f1ba 0f00 	cmp.w	sl, #0
 8011e92:	d1bd      	bne.n	8011e10 <forward_dense+0xe4>
 8011e94:	42b3      	cmp	r3, r6
 8011e96:	d2e7      	bcs.n	8011e68 <forward_dense+0x13c>
 8011e98:	4618      	mov	r0, r3
 8011e9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e9c:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8011ea0:	eb07 0c03 	add.w	ip, r7, r3
 8011ea4:	469e      	mov	lr, r3
 8011ea6:	2c00      	cmp	r4, #0
 8011ea8:	f000 80fe 	beq.w	80120a8 <forward_dense+0x37c>
 8011eac:	f1b8 0f0f 	cmp.w	r8, #15
 8011eb0:	ed94 6a00 	vldr	s12, [r4]
 8011eb4:	f104 0404 	add.w	r4, r4, #4
 8011eb8:	f240 80fc 	bls.w	80120b4 <forward_dense+0x388>
 8011ebc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011ec0:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8011ec4:	4641      	mov	r1, r8
 8011ec6:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8012130 <forward_dense+0x404>
 8011eca:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 8011ece:	3910      	subs	r1, #16
 8011ed0:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8011ed4:	3240      	adds	r2, #64	; 0x40
 8011ed6:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8011eda:	290f      	cmp	r1, #15
 8011edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ee0:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 8011ee4:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 8011ee8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8011eec:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 8011ef0:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011ef4:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 8011ef8:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 8011efc:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 8011f00:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 8011f04:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8011f08:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 8011f0c:	eee2 7a03 	vfma.f32	s15, s4, s6
 8011f10:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 8011f14:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 8011f18:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 8011f1c:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 8011f20:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 8011f24:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 8011f28:	eee3 7a84 	vfma.f32	s15, s7, s8
 8011f2c:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 8011f30:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 8011f34:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 8011f38:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 8011f3c:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 8011f40:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 8011f44:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011f48:	ed13 2a14 	vldr	s4, [r3, #-80]	; 0xffffffb0
 8011f4c:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8011f50:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 8011f54:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 8011f58:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 8011f5c:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 8011f60:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011f64:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8011f68:	ed12 7a11 	vldr	s14, [r2, #-68]	; 0xffffffbc
 8011f6c:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8011f70:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8011f74:	eee9 7a89 	vfma.f32	s15, s19, s18
 8011f78:	eee8 7a88 	vfma.f32	s15, s17, s16
 8011f7c:	eee0 7a20 	vfma.f32	s15, s0, s1
 8011f80:	eee1 7a21 	vfma.f32	s15, s2, s3
 8011f84:	eee2 7a03 	vfma.f32	s15, s4, s6
 8011f88:	eee3 7a84 	vfma.f32	s15, s7, s8
 8011f8c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011f90:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011f94:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011f98:	d897      	bhi.n	8011eca <forward_dense+0x19e>
 8011f9a:	eb05 010e 	add.w	r1, r5, lr
 8011f9e:	465b      	mov	r3, fp
 8011fa0:	4662      	mov	r2, ip
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d075      	beq.n	8012092 <forward_dense+0x366>
 8011fa6:	ed91 7a00 	vldr	s14, [r1]
 8011faa:	2b01      	cmp	r3, #1
 8011fac:	edd2 7a00 	vldr	s15, [r2]
 8011fb0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011fb4:	d06d      	beq.n	8012092 <forward_dense+0x366>
 8011fb6:	ed91 7a01 	vldr	s14, [r1, #4]
 8011fba:	2b02      	cmp	r3, #2
 8011fbc:	edd2 7a01 	vldr	s15, [r2, #4]
 8011fc0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011fc4:	d065      	beq.n	8012092 <forward_dense+0x366>
 8011fc6:	ed91 7a02 	vldr	s14, [r1, #8]
 8011fca:	2b03      	cmp	r3, #3
 8011fcc:	edd2 7a02 	vldr	s15, [r2, #8]
 8011fd0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011fd4:	d05d      	beq.n	8012092 <forward_dense+0x366>
 8011fd6:	ed91 7a03 	vldr	s14, [r1, #12]
 8011fda:	2b04      	cmp	r3, #4
 8011fdc:	edd2 7a03 	vldr	s15, [r2, #12]
 8011fe0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011fe4:	d055      	beq.n	8012092 <forward_dense+0x366>
 8011fe6:	ed91 7a04 	vldr	s14, [r1, #16]
 8011fea:	2b05      	cmp	r3, #5
 8011fec:	edd2 7a04 	vldr	s15, [r2, #16]
 8011ff0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011ff4:	d04d      	beq.n	8012092 <forward_dense+0x366>
 8011ff6:	ed91 7a05 	vldr	s14, [r1, #20]
 8011ffa:	2b06      	cmp	r3, #6
 8011ffc:	edd2 7a05 	vldr	s15, [r2, #20]
 8012000:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012004:	d045      	beq.n	8012092 <forward_dense+0x366>
 8012006:	ed91 7a06 	vldr	s14, [r1, #24]
 801200a:	2b07      	cmp	r3, #7
 801200c:	edd2 7a06 	vldr	s15, [r2, #24]
 8012010:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012014:	d03d      	beq.n	8012092 <forward_dense+0x366>
 8012016:	ed91 7a07 	vldr	s14, [r1, #28]
 801201a:	2b08      	cmp	r3, #8
 801201c:	edd2 7a07 	vldr	s15, [r2, #28]
 8012020:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012024:	d035      	beq.n	8012092 <forward_dense+0x366>
 8012026:	ed91 7a08 	vldr	s14, [r1, #32]
 801202a:	2b09      	cmp	r3, #9
 801202c:	edd2 7a08 	vldr	s15, [r2, #32]
 8012030:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012034:	d02d      	beq.n	8012092 <forward_dense+0x366>
 8012036:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 801203a:	2b0a      	cmp	r3, #10
 801203c:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8012040:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012044:	d025      	beq.n	8012092 <forward_dense+0x366>
 8012046:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 801204a:	2b0b      	cmp	r3, #11
 801204c:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8012050:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012054:	d01d      	beq.n	8012092 <forward_dense+0x366>
 8012056:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 801205a:	2b0c      	cmp	r3, #12
 801205c:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8012060:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012064:	d015      	beq.n	8012092 <forward_dense+0x366>
 8012066:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 801206a:	2b0d      	cmp	r3, #13
 801206c:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8012070:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012074:	d00d      	beq.n	8012092 <forward_dense+0x366>
 8012076:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801207a:	2b0e      	cmp	r3, #14
 801207c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8012080:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012084:	d005      	beq.n	8012092 <forward_dense+0x366>
 8012086:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 801208a:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 801208e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012092:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012096:	444d      	add	r5, r9
 8012098:	ece0 6a01 	vstmia	r0!, {s13}
 801209c:	42b0      	cmp	r0, r6
 801209e:	f4bf aedb 	bcs.w	8011e58 <forward_dense+0x12c>
 80120a2:	2c00      	cmp	r4, #0
 80120a4:	f47f af02 	bne.w	8011eac <forward_dense+0x180>
 80120a8:	f1b8 0f0f 	cmp.w	r8, #15
 80120ac:	eeb0 6a62 	vmov.f32	s12, s5
 80120b0:	f63f af04 	bhi.w	8011ebc <forward_dense+0x190>
 80120b4:	4643      	mov	r3, r8
 80120b6:	4629      	mov	r1, r5
 80120b8:	463a      	mov	r2, r7
 80120ba:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8012130 <forward_dense+0x404>
 80120be:	e770      	b.n	8011fa2 <forward_dense+0x276>
 80120c0:	2300      	movs	r3, #0
 80120c2:	685b      	ldr	r3, [r3, #4]
 80120c4:	deff      	udf	#255	; 0xff
 80120c6:	685b      	ldr	r3, [r3, #4]
 80120c8:	deff      	udf	#255	; 0xff
 80120ca:	2300      	movs	r3, #0
 80120cc:	685b      	ldr	r3, [r3, #4]
 80120ce:	deff      	udf	#255	; 0xff
 80120d0:	b1a4      	cbz	r4, 80120fc <forward_dense+0x3d0>
 80120d2:	f8d4 c000 	ldr.w	ip, [r4]
 80120d6:	463b      	mov	r3, r7
 80120d8:	4629      	mov	r1, r5
 80120da:	9600      	str	r6, [sp, #0]
 80120dc:	4652      	mov	r2, sl
 80120de:	9803      	ldr	r0, [sp, #12]
 80120e0:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80120e4:	f7fe fed0 	bl	8010e88 <ai_dict4_dot_array_f32>
 80120e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80120ea:	3404      	adds	r4, #4
 80120ec:	444d      	add	r5, r9
 80120ee:	f84b 3b04 	str.w	r3, [fp], #4
 80120f2:	45c3      	cmp	fp, r8
 80120f4:	f4bf aead 	bcs.w	8011e52 <forward_dense+0x126>
 80120f8:	2c00      	cmp	r4, #0
 80120fa:	d1ea      	bne.n	80120d2 <forward_dense+0x3a6>
 80120fc:	4634      	mov	r4, r6
 80120fe:	4646      	mov	r6, r8
 8012100:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012104:	463b      	mov	r3, r7
 8012106:	4629      	mov	r1, r5
 8012108:	9400      	str	r4, [sp, #0]
 801210a:	4652      	mov	r2, sl
 801210c:	4640      	mov	r0, r8
 801210e:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 8012112:	f7fe feb9 	bl	8010e88 <ai_dict4_dot_array_f32>
 8012116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012118:	444d      	add	r5, r9
 801211a:	f84b 3b04 	str.w	r3, [fp], #4
 801211e:	45b3      	cmp	fp, r6
 8012120:	d3f0      	bcc.n	8012104 <forward_dense+0x3d8>
 8012122:	46a0      	mov	r8, r4
 8012124:	e698      	b.n	8011e58 <forward_dense+0x12c>
 8012126:	9006      	str	r0, [sp, #24]
 8012128:	e62a      	b.n	8011d80 <forward_dense+0x54>
 801212a:	9306      	str	r3, [sp, #24]
 801212c:	e628      	b.n	8011d80 <forward_dense+0x54>
 801212e:	bf00      	nop
 8012130:	00000000 	.word	0x00000000
 8012134:	4634      	mov	r4, r6
 8012136:	4646      	mov	r6, r8
 8012138:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801213c:	463b      	mov	r3, r7
 801213e:	4629      	mov	r1, r5
 8012140:	9400      	str	r4, [sp, #0]
 8012142:	4652      	mov	r2, sl
 8012144:	4640      	mov	r0, r8
 8012146:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 801214a:	f7fe fc6d 	bl	8010a28 <ai_dict8_dot_array_f32>
 801214e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012150:	444d      	add	r5, r9
 8012152:	f84b 3b04 	str.w	r3, [fp], #4
 8012156:	45b3      	cmp	fp, r6
 8012158:	d3f0      	bcc.n	801213c <forward_dense+0x410>
 801215a:	46a0      	mov	r8, r4
 801215c:	e67c      	b.n	8011e58 <forward_dense+0x12c>
 801215e:	b011      	add	sp, #68	; 0x44
 8012160:	ecbd 8b08 	vpop	{d8-d11}
 8012164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012168:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 801216c:	e626      	b.n	8011dbc <forward_dense+0x90>
 801216e:	2300      	movs	r3, #0
 8012170:	9306      	str	r3, [sp, #24]
 8012172:	e605      	b.n	8011d80 <forward_dense+0x54>
 8012174:	9308      	str	r3, [sp, #32]
 8012176:	e5f6      	b.n	8011d66 <forward_dense+0x3a>

08012178 <array_f32_identity>:
 8012178:	4288      	cmp	r0, r1
 801217a:	d004      	beq.n	8012186 <array_f32_identity+0xe>
 801217c:	0092      	lsls	r2, r2, #2
 801217e:	68c9      	ldr	r1, [r1, #12]
 8012180:	68c0      	ldr	r0, [r0, #12]
 8012182:	f000 bee7 	b.w	8012f54 <memcpy>
 8012186:	4770      	bx	lr

08012188 <lstm_cell>:
 8012188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801218c:	460c      	mov	r4, r1
 801218e:	b0b5      	sub	sp, #212	; 0xd4
 8012190:	8ccd      	ldrh	r5, [r1, #38]	; 0x26
 8012192:	4682      	mov	sl, r0
 8012194:	8c89      	ldrh	r1, [r1, #36]	; 0x24
 8012196:	4613      	mov	r3, r2
 8012198:	9005      	str	r0, [sp, #20]
 801219a:	00af      	lsls	r7, r5, #2
 801219c:	910a      	str	r1, [sp, #40]	; 0x28
 801219e:	fb05 f005 	mul.w	r0, r5, r5
 80121a2:	6822      	ldr	r2, [r4, #0]
 80121a4:	fb01 f105 	mul.w	r1, r1, r5
 80121a8:	6866      	ldr	r6, [r4, #4]
 80121aa:	0080      	lsls	r0, r0, #2
 80121ac:	9206      	str	r2, [sp, #24]
 80121ae:	0089      	lsls	r1, r1, #2
 80121b0:	9607      	str	r6, [sp, #28]
 80121b2:	4406      	add	r6, r0
 80121b4:	9701      	str	r7, [sp, #4]
 80121b6:	440a      	add	r2, r1
 80121b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80121ba:	441f      	add	r7, r3
 80121bc:	9609      	str	r6, [sp, #36]	; 0x24
 80121be:	4613      	mov	r3, r2
 80121c0:	4406      	add	r6, r0
 80121c2:	9208      	str	r2, [sp, #32]
 80121c4:	9603      	str	r6, [sp, #12]
 80121c6:	461e      	mov	r6, r3
 80121c8:	9a01      	ldr	r2, [sp, #4]
 80121ca:	440e      	add	r6, r1
 80121cc:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80121d0:	eb07 0e02 	add.w	lr, r7, r2
 80121d4:	9602      	str	r6, [sp, #8]
 80121d6:	eb09 0c02 	add.w	ip, r9, r2
 80121da:	9e03      	ldr	r6, [sp, #12]
 80121dc:	eb0e 0802 	add.w	r8, lr, r2
 80121e0:	9a01      	ldr	r2, [sp, #4]
 80121e2:	1830      	adds	r0, r6, r0
 80121e4:	9e02      	ldr	r6, [sp, #8]
 80121e6:	4643      	mov	r3, r8
 80121e8:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 80121ec:	1871      	adds	r1, r6, r1
 80121ee:	eb0c 0602 	add.w	r6, ip, r2
 80121f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80121f4:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 80121f8:	921e      	str	r2, [sp, #120]	; 0x78
 80121fa:	9a01      	ldr	r2, [sp, #4]
 80121fc:	901b      	str	r0, [sp, #108]	; 0x6c
 80121fe:	eb08 0b02 	add.w	fp, r8, r2
 8012202:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012204:	6a20      	ldr	r0, [r4, #32]
 8012206:	911a      	str	r1, [sp, #104]	; 0x68
 8012208:	9619      	str	r6, [sp, #100]	; 0x64
 801220a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801220c:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
 8012210:	921f      	str	r2, [sp, #124]	; 0x7c
 8012212:	951d      	str	r5, [sp, #116]	; 0x74
 8012214:	9521      	str	r5, [sp, #132]	; 0x84
 8012216:	9525      	str	r5, [sp, #148]	; 0x94
 8012218:	9529      	str	r5, [sp, #164]	; 0xa4
 801221a:	952d      	str	r5, [sp, #180]	; 0xb4
 801221c:	9531      	str	r5, [sp, #196]	; 0xc4
 801221e:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
 8012222:	4bd9      	ldr	r3, [pc, #868]	; (8012588 <lstm_cell+0x400>)
 8012224:	e9cd 7722 	strd	r7, r7, [sp, #136]	; 0x88
 8012228:	e9cd ee26 	strd	lr, lr, [sp, #152]	; 0x98
 801222c:	e9cd 002e 	strd	r0, r0, [sp, #184]	; 0xb8
 8012230:	e9cd 1132 	strd	r1, r1, [sp, #200]	; 0xc8
 8012234:	931c      	str	r3, [sp, #112]	; 0x70
 8012236:	9320      	str	r3, [sp, #128]	; 0x80
 8012238:	9324      	str	r3, [sp, #144]	; 0x90
 801223a:	9328      	str	r3, [sp, #160]	; 0xa0
 801223c:	932c      	str	r3, [sp, #176]	; 0xb0
 801223e:	9330      	str	r3, [sp, #192]	; 0xc0
 8012240:	2d00      	cmp	r5, #0
 8012242:	f000 83c1 	beq.w	80129c8 <lstm_cell+0x840>
 8012246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012248:	46f3      	mov	fp, lr
 801224a:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
 801224e:	46be      	mov	lr, r7
 8012250:	3b04      	subs	r3, #4
 8012252:	9712      	str	r7, [sp, #72]	; 0x48
 8012254:	1f28      	subs	r0, r5, #4
 8012256:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 801225a:	461a      	mov	r2, r3
 801225c:	089b      	lsrs	r3, r3, #2
 801225e:	0881      	lsrs	r1, r0, #2
 8012260:	9610      	str	r6, [sp, #64]	; 0x40
 8012262:	1c5f      	adds	r7, r3, #1
 8012264:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 8012268:	ebc1 7c81 	rsb	ip, r1, r1, lsl #30
 801226c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801226e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012272:	9a01      	ldr	r2, [sp, #4]
 8012274:	013f      	lsls	r7, r7, #4
 8012276:	3101      	adds	r1, #1
 8012278:	930c      	str	r3, [sp, #48]	; 0x30
 801227a:	4653      	mov	r3, sl
 801227c:	970b      	str	r7, [sp, #44]	; 0x2c
 801227e:	2e03      	cmp	r6, #3
 8012280:	443b      	add	r3, r7
 8012282:	eddf 6ac2 	vldr	s13, [pc, #776]	; 801258c <lstm_cell+0x404>
 8012286:	eb00 078c 	add.w	r7, r0, ip, lsl #2
 801228a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801228c:	930d      	str	r3, [sp, #52]	; 0x34
 801228e:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8012292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012294:	46dc      	mov	ip, fp
 8012296:	edc0 6a00 	vstr	s13, [r0]
 801229a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801229e:	9304      	str	r3, [sp, #16]
 80122a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80122a2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80122a6:	eb03 0802 	add.w	r8, r3, r2
 80122aa:	f04f 0300 	mov.w	r3, #0
 80122ae:	930e      	str	r3, [sp, #56]	; 0x38
 80122b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80122b4:	930a      	str	r3, [sp, #40]	; 0x28
 80122b6:	f240 823e 	bls.w	8012736 <lstm_cell+0x5ae>
 80122ba:	9b06      	ldr	r3, [sp, #24]
 80122bc:	46b1      	mov	r9, r6
 80122be:	ed9f 6ab3 	vldr	s12, [pc, #716]	; 801258c <lstm_cell+0x404>
 80122c2:	f103 0210 	add.w	r2, r3, #16
 80122c6:	9b05      	ldr	r3, [sp, #20]
 80122c8:	3310      	adds	r3, #16
 80122ca:	ed12 7a03 	vldr	s14, [r2, #-12]
 80122ce:	f1a9 0904 	sub.w	r9, r9, #4
 80122d2:	ed53 7a03 	vldr	s15, [r3, #-12]
 80122d6:	3210      	adds	r2, #16
 80122d8:	ed52 5a08 	vldr	s11, [r2, #-32]	; 0xffffffe0
 80122dc:	f1b9 0f03 	cmp.w	r9, #3
 80122e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122e4:	ed13 7a04 	vldr	s14, [r3, #-16]
 80122e8:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 80122ec:	f103 0310 	add.w	r3, r3, #16
 80122f0:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
 80122f4:	eee5 7a87 	vfma.f32	s15, s11, s14
 80122f8:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 80122fc:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8012300:	eee4 7a85 	vfma.f32	s15, s9, s10
 8012304:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012308:	ee36 6a27 	vadd.f32	s12, s12, s15
 801230c:	d8dd      	bhi.n	80122ca <lstm_cell+0x142>
 801230e:	9b06      	ldr	r3, [sp, #24]
 8012310:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012312:	eb03 0902 	add.w	r9, r3, r2
 8012316:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 801231a:	b1ab      	cbz	r3, 8012348 <lstm_cell+0x1c0>
 801231c:	ed99 7a00 	vldr	s14, [r9]
 8012320:	2b01      	cmp	r3, #1
 8012322:	edd2 7a00 	vldr	s15, [r2]
 8012326:	eea7 6a27 	vfma.f32	s12, s14, s15
 801232a:	d00d      	beq.n	8012348 <lstm_cell+0x1c0>
 801232c:	ed99 7a01 	vldr	s14, [r9, #4]
 8012330:	2b02      	cmp	r3, #2
 8012332:	edd2 7a01 	vldr	s15, [r2, #4]
 8012336:	eea7 6a27 	vfma.f32	s12, s14, s15
 801233a:	d005      	beq.n	8012348 <lstm_cell+0x1c0>
 801233c:	ed99 7a02 	vldr	s14, [r9, #8]
 8012340:	edd2 7a02 	vldr	s15, [r2, #8]
 8012344:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012348:	2d03      	cmp	r5, #3
 801234a:	ed80 6a00 	vstr	s12, [r0]
 801234e:	9b07      	ldr	r3, [sp, #28]
 8012350:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 8012354:	f240 8334 	bls.w	80129c0 <lstm_cell+0x838>
 8012358:	f103 0210 	add.w	r2, r3, #16
 801235c:	46a9      	mov	r9, r5
 801235e:	f10a 0310 	add.w	r3, sl, #16
 8012362:	eddf 5a8a 	vldr	s11, [pc, #552]	; 801258c <lstm_cell+0x404>
 8012366:	ed12 7a03 	vldr	s14, [r2, #-12]
 801236a:	f1a9 0904 	sub.w	r9, r9, #4
 801236e:	ed53 7a03 	vldr	s15, [r3, #-12]
 8012372:	3210      	adds	r2, #16
 8012374:	ed12 5a08 	vldr	s10, [r2, #-32]	; 0xffffffe0
 8012378:	f1b9 0f03 	cmp.w	r9, #3
 801237c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012380:	ed13 7a04 	vldr	s14, [r3, #-16]
 8012384:	ed12 4a06 	vldr	s8, [r2, #-24]	; 0xffffffe8
 8012388:	f103 0310 	add.w	r3, r3, #16
 801238c:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 8012390:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012394:	ed12 5a05 	vldr	s10, [r2, #-20]	; 0xffffffec
 8012398:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 801239c:	eee4 7a24 	vfma.f32	s15, s8, s9
 80123a0:	eee5 7a07 	vfma.f32	s15, s10, s14
 80123a4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80123a8:	d8dd      	bhi.n	8012366 <lstm_cell+0x1de>
 80123aa:	9b07      	ldr	r3, [sp, #28]
 80123ac:	448a      	add	sl, r1
 80123ae:	440b      	add	r3, r1
 80123b0:	b1b7      	cbz	r7, 80123e0 <lstm_cell+0x258>
 80123b2:	463a      	mov	r2, r7
 80123b4:	ed93 7a00 	vldr	s14, [r3]
 80123b8:	2a01      	cmp	r2, #1
 80123ba:	edda 7a00 	vldr	s15, [sl]
 80123be:	eee7 5a27 	vfma.f32	s11, s14, s15
 80123c2:	d00d      	beq.n	80123e0 <lstm_cell+0x258>
 80123c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80123c8:	2a02      	cmp	r2, #2
 80123ca:	edda 7a01 	vldr	s15, [sl, #4]
 80123ce:	eee7 5a27 	vfma.f32	s11, s14, s15
 80123d2:	d005      	beq.n	80123e0 <lstm_cell+0x258>
 80123d4:	ed93 7a02 	vldr	s14, [r3, #8]
 80123d8:	edda 7a02 	vldr	s15, [sl, #8]
 80123dc:	eee7 5a27 	vfma.f32	s11, s14, s15
 80123e0:	ee35 6a86 	vadd.f32	s12, s11, s12
 80123e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80123e6:	2e03      	cmp	r6, #3
 80123e8:	ed80 6a00 	vstr	s12, [r0]
 80123ec:	ecb2 7a01 	vldmia	r2!, {s14}
 80123f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80123f2:	9214      	str	r2, [sp, #80]	; 0x50
 80123f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123f6:	4413      	add	r3, r2
 80123f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80123fa:	edd3 7a00 	vldr	s15, [r3]
 80123fe:	ecf2 5a01 	vldmia	r2!, {s11}
 8012402:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012406:	9215      	str	r2, [sp, #84]	; 0x54
 8012408:	ee35 6a86 	vadd.f32	s12, s11, s12
 801240c:	eca0 6a01 	vstmia	r0!, {s12}
 8012410:	edce 6a00 	vstr	s13, [lr]
 8012414:	f240 82cd 	bls.w	80129b2 <lstm_cell+0x82a>
 8012418:	9b08      	ldr	r3, [sp, #32]
 801241a:	46b1      	mov	r9, r6
 801241c:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 801258c <lstm_cell+0x404>
 8012420:	f103 0210 	add.w	r2, r3, #16
 8012424:	9b05      	ldr	r3, [sp, #20]
 8012426:	3310      	adds	r3, #16
 8012428:	ed12 7a03 	vldr	s14, [r2, #-12]
 801242c:	f1a9 0904 	sub.w	r9, r9, #4
 8012430:	ed53 7a03 	vldr	s15, [r3, #-12]
 8012434:	3210      	adds	r2, #16
 8012436:	ed52 5a08 	vldr	s11, [r2, #-32]	; 0xffffffe0
 801243a:	f1b9 0f03 	cmp.w	r9, #3
 801243e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012442:	ed13 7a04 	vldr	s14, [r3, #-16]
 8012446:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 801244a:	f103 0310 	add.w	r3, r3, #16
 801244e:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
 8012452:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012456:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 801245a:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 801245e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8012462:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012466:	ee36 6a27 	vadd.f32	s12, s12, s15
 801246a:	d8dd      	bhi.n	8012428 <lstm_cell+0x2a0>
 801246c:	9b08      	ldr	r3, [sp, #32]
 801246e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012470:	eb03 0902 	add.w	r9, r3, r2
 8012474:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8012478:	b1ab      	cbz	r3, 80124a6 <lstm_cell+0x31e>
 801247a:	ed99 7a00 	vldr	s14, [r9]
 801247e:	2b01      	cmp	r3, #1
 8012480:	edd2 7a00 	vldr	s15, [r2]
 8012484:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012488:	d00d      	beq.n	80124a6 <lstm_cell+0x31e>
 801248a:	ed99 7a01 	vldr	s14, [r9, #4]
 801248e:	2b02      	cmp	r3, #2
 8012490:	edd2 7a01 	vldr	s15, [r2, #4]
 8012494:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012498:	d005      	beq.n	80124a6 <lstm_cell+0x31e>
 801249a:	ed99 7a02 	vldr	s14, [r9, #8]
 801249e:	edd2 7a02 	vldr	s15, [r2, #8]
 80124a2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80124a6:	2d03      	cmp	r5, #3
 80124a8:	ed8e 6a00 	vstr	s12, [lr]
 80124ac:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 80124b0:	f240 827a 	bls.w	80129a8 <lstm_cell+0x820>
 80124b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124b6:	46a9      	mov	r9, r5
 80124b8:	eddf 5a34 	vldr	s11, [pc, #208]	; 801258c <lstm_cell+0x404>
 80124bc:	f103 0210 	add.w	r2, r3, #16
 80124c0:	f10a 0310 	add.w	r3, sl, #16
 80124c4:	ed12 7a03 	vldr	s14, [r2, #-12]
 80124c8:	f1a9 0904 	sub.w	r9, r9, #4
 80124cc:	ed53 7a03 	vldr	s15, [r3, #-12]
 80124d0:	3210      	adds	r2, #16
 80124d2:	ed12 5a08 	vldr	s10, [r2, #-32]	; 0xffffffe0
 80124d6:	f1b9 0f03 	cmp.w	r9, #3
 80124da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80124de:	ed13 7a04 	vldr	s14, [r3, #-16]
 80124e2:	ed12 4a06 	vldr	s8, [r2, #-24]	; 0xffffffe8
 80124e6:	f103 0310 	add.w	r3, r3, #16
 80124ea:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 80124ee:	eee5 7a07 	vfma.f32	s15, s10, s14
 80124f2:	ed12 5a05 	vldr	s10, [r2, #-20]	; 0xffffffec
 80124f6:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 80124fa:	eee4 7a24 	vfma.f32	s15, s8, s9
 80124fe:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012502:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8012506:	d8dd      	bhi.n	80124c4 <lstm_cell+0x33c>
 8012508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801250a:	448a      	add	sl, r1
 801250c:	440b      	add	r3, r1
 801250e:	b1b7      	cbz	r7, 801253e <lstm_cell+0x3b6>
 8012510:	463a      	mov	r2, r7
 8012512:	ed93 7a00 	vldr	s14, [r3]
 8012516:	2a01      	cmp	r2, #1
 8012518:	edda 7a00 	vldr	s15, [sl]
 801251c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012520:	d00d      	beq.n	801253e <lstm_cell+0x3b6>
 8012522:	ed93 7a01 	vldr	s14, [r3, #4]
 8012526:	2a02      	cmp	r2, #2
 8012528:	edda 7a01 	vldr	s15, [sl, #4]
 801252c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012530:	d005      	beq.n	801253e <lstm_cell+0x3b6>
 8012532:	ed93 7a02 	vldr	s14, [r3, #8]
 8012536:	edda 7a02 	vldr	s15, [sl, #8]
 801253a:	eee7 5a27 	vfma.f32	s11, s14, s15
 801253e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8012542:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012544:	2e03      	cmp	r6, #3
 8012546:	46c1      	mov	r9, r8
 8012548:	ed8e 6a00 	vstr	s12, [lr]
 801254c:	ecf2 5a01 	vldmia	r2!, {s11}
 8012550:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012552:	9213      	str	r2, [sp, #76]	; 0x4c
 8012554:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012556:	ed98 7a00 	vldr	s14, [r8]
 801255a:	4413      	add	r3, r2
 801255c:	edd3 7a00 	vldr	s15, [r3]
 8012560:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012564:	ee35 6a86 	vadd.f32	s12, s11, s12
 8012568:	ecae 6a01 	vstmia	lr!, {s12}
 801256c:	edcc 6a00 	vstr	s13, [ip]
 8012570:	f240 80ec 	bls.w	801274c <lstm_cell+0x5c4>
 8012574:	9b02      	ldr	r3, [sp, #8]
 8012576:	46b2      	mov	sl, r6
 8012578:	ed9f 6a04 	vldr	s12, [pc, #16]	; 801258c <lstm_cell+0x404>
 801257c:	f103 0210 	add.w	r2, r3, #16
 8012580:	9b05      	ldr	r3, [sp, #20]
 8012582:	3310      	adds	r3, #16
 8012584:	e004      	b.n	8012590 <lstm_cell+0x408>
 8012586:	bf00      	nop
 8012588:	01821040 	.word	0x01821040
 801258c:	00000000 	.word	0x00000000
 8012590:	ed12 7a03 	vldr	s14, [r2, #-12]
 8012594:	f1aa 0a04 	sub.w	sl, sl, #4
 8012598:	ed53 7a03 	vldr	s15, [r3, #-12]
 801259c:	3210      	adds	r2, #16
 801259e:	ed52 5a08 	vldr	s11, [r2, #-32]	; 0xffffffe0
 80125a2:	f1ba 0f03 	cmp.w	sl, #3
 80125a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80125aa:	ed13 7a04 	vldr	s14, [r3, #-16]
 80125ae:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 80125b2:	f103 0310 	add.w	r3, r3, #16
 80125b6:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
 80125ba:	eee5 7a87 	vfma.f32	s15, s11, s14
 80125be:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 80125c2:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 80125c6:	eee4 7a85 	vfma.f32	s15, s9, s10
 80125ca:	eee5 7a87 	vfma.f32	s15, s11, s14
 80125ce:	ee36 6a27 	vadd.f32	s12, s12, s15
 80125d2:	d8dd      	bhi.n	8012590 <lstm_cell+0x408>
 80125d4:	9b02      	ldr	r3, [sp, #8]
 80125d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80125d8:	eb03 0a02 	add.w	sl, r3, r2
 80125dc:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 80125e0:	b1ab      	cbz	r3, 801260e <lstm_cell+0x486>
 80125e2:	ed9a 7a00 	vldr	s14, [sl]
 80125e6:	2b01      	cmp	r3, #1
 80125e8:	edd2 7a00 	vldr	s15, [r2]
 80125ec:	eea7 6a27 	vfma.f32	s12, s14, s15
 80125f0:	d00d      	beq.n	801260e <lstm_cell+0x486>
 80125f2:	ed9a 7a01 	vldr	s14, [sl, #4]
 80125f6:	2b02      	cmp	r3, #2
 80125f8:	edd2 7a01 	vldr	s15, [r2, #4]
 80125fc:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012600:	d005      	beq.n	801260e <lstm_cell+0x486>
 8012602:	ed9a 7a02 	vldr	s14, [sl, #8]
 8012606:	edd2 7a02 	vldr	s15, [r2, #8]
 801260a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801260e:	2d03      	cmp	r5, #3
 8012610:	ed8c 6a00 	vstr	s12, [ip]
 8012614:	f8d4 b01c 	ldr.w	fp, [r4, #28]
 8012618:	f240 8093 	bls.w	8012742 <lstm_cell+0x5ba>
 801261c:	9b03      	ldr	r3, [sp, #12]
 801261e:	46aa      	mov	sl, r5
 8012620:	ed5f 5a26 	vldr	s11, [pc, #-152]	; 801258c <lstm_cell+0x404>
 8012624:	f103 0210 	add.w	r2, r3, #16
 8012628:	f10b 0310 	add.w	r3, fp, #16
 801262c:	ed12 7a03 	vldr	s14, [r2, #-12]
 8012630:	f1aa 0a04 	sub.w	sl, sl, #4
 8012634:	ed53 7a03 	vldr	s15, [r3, #-12]
 8012638:	3210      	adds	r2, #16
 801263a:	ed12 5a08 	vldr	s10, [r2, #-32]	; 0xffffffe0
 801263e:	f1ba 0f03 	cmp.w	sl, #3
 8012642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012646:	ed13 7a04 	vldr	s14, [r3, #-16]
 801264a:	ed12 4a06 	vldr	s8, [r2, #-24]	; 0xffffffe8
 801264e:	f103 0310 	add.w	r3, r3, #16
 8012652:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 8012656:	eee5 7a07 	vfma.f32	s15, s10, s14
 801265a:	ed12 5a05 	vldr	s10, [r2, #-20]	; 0xffffffec
 801265e:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8012662:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012666:	eee5 7a07 	vfma.f32	s15, s10, s14
 801266a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801266e:	d8dd      	bhi.n	801262c <lstm_cell+0x4a4>
 8012670:	9b03      	ldr	r3, [sp, #12]
 8012672:	448b      	add	fp, r1
 8012674:	440b      	add	r3, r1
 8012676:	b1b7      	cbz	r7, 80126a6 <lstm_cell+0x51e>
 8012678:	463a      	mov	r2, r7
 801267a:	ed93 7a00 	vldr	s14, [r3]
 801267e:	2a01      	cmp	r2, #1
 8012680:	eddb 7a00 	vldr	s15, [fp]
 8012684:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012688:	d00d      	beq.n	80126a6 <lstm_cell+0x51e>
 801268a:	ed93 7a01 	vldr	s14, [r3, #4]
 801268e:	2a02      	cmp	r2, #2
 8012690:	eddb 7a01 	vldr	s15, [fp, #4]
 8012694:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012698:	d005      	beq.n	80126a6 <lstm_cell+0x51e>
 801269a:	ed93 7a02 	vldr	s14, [r3, #8]
 801269e:	eddb 7a02 	vldr	s15, [fp, #8]
 80126a2:	eee7 5a27 	vfma.f32	s11, s14, s15
 80126a6:	9a06      	ldr	r2, [sp, #24]
 80126a8:	ee35 6a86 	vadd.f32	s12, s11, s12
 80126ac:	9b04      	ldr	r3, [sp, #16]
 80126ae:	f108 0804 	add.w	r8, r8, #4
 80126b2:	4692      	mov	sl, r2
 80126b4:	9a07      	ldr	r2, [sp, #28]
 80126b6:	ed8c 6a00 	vstr	s12, [ip]
 80126ba:	449a      	add	sl, r3
 80126bc:	ed99 7a00 	vldr	s14, [r9]
 80126c0:	f8cd a018 	str.w	sl, [sp, #24]
 80126c4:	4692      	mov	sl, r2
 80126c6:	9a01      	ldr	r2, [sp, #4]
 80126c8:	4492      	add	sl, r2
 80126ca:	9a08      	ldr	r2, [sp, #32]
 80126cc:	f8cd a01c 	str.w	sl, [sp, #28]
 80126d0:	4692      	mov	sl, r2
 80126d2:	9a01      	ldr	r2, [sp, #4]
 80126d4:	449a      	add	sl, r3
 80126d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126d8:	f8cd a020 	str.w	sl, [sp, #32]
 80126dc:	469a      	mov	sl, r3
 80126de:	9b02      	ldr	r3, [sp, #8]
 80126e0:	4492      	add	sl, r2
 80126e2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80126e6:	469a      	mov	sl, r3
 80126e8:	9b04      	ldr	r3, [sp, #16]
 80126ea:	449a      	add	sl, r3
 80126ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80126ee:	9316      	str	r3, [sp, #88]	; 0x58
 80126f0:	9b03      	ldr	r3, [sp, #12]
 80126f2:	f8cd a008 	str.w	sl, [sp, #8]
 80126f6:	4413      	add	r3, r2
 80126f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80126fa:	9303      	str	r3, [sp, #12]
 80126fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80126fe:	ecf3 5a01 	vldmia	r3!, {s11}
 8012702:	9310      	str	r3, [sp, #64]	; 0x40
 8012704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012706:	441a      	add	r2, r3
 8012708:	4613      	mov	r3, r2
 801270a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801270c:	edd3 7a00 	vldr	s15, [r3]
 8012710:	3201      	adds	r2, #1
 8012712:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012716:	4295      	cmp	r5, r2
 8012718:	ee35 6a86 	vadd.f32	s12, s11, s12
 801271c:	ecac 6a01 	vstmia	ip!, {s12}
 8012720:	d01b      	beq.n	801275a <lstm_cell+0x5d2>
 8012722:	4613      	mov	r3, r2
 8012724:	2e03      	cmp	r6, #3
 8012726:	920e      	str	r2, [sp, #56]	; 0x38
 8012728:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801272c:	edc0 6a00 	vstr	s13, [r0]
 8012730:	930a      	str	r3, [sp, #40]	; 0x28
 8012732:	f63f adc2 	bhi.w	80122ba <lstm_cell+0x132>
 8012736:	4633      	mov	r3, r6
 8012738:	ed1f 6a6c 	vldr	s12, [pc, #-432]	; 801258c <lstm_cell+0x404>
 801273c:	e9dd 2905 	ldrd	r2, r9, [sp, #20]
 8012740:	e5eb      	b.n	801231a <lstm_cell+0x192>
 8012742:	462a      	mov	r2, r5
 8012744:	9b03      	ldr	r3, [sp, #12]
 8012746:	ed5f 5a6f 	vldr	s11, [pc, #-444]	; 801258c <lstm_cell+0x404>
 801274a:	e796      	b.n	801267a <lstm_cell+0x4f2>
 801274c:	4633      	mov	r3, r6
 801274e:	9a05      	ldr	r2, [sp, #20]
 8012750:	f8dd a008 	ldr.w	sl, [sp, #8]
 8012754:	ed1f 6a73 	vldr	s12, [pc, #-460]	; 801258c <lstm_cell+0x404>
 8012758:	e742      	b.n	80125e0 <lstm_cell+0x458>
 801275a:	a91c      	add	r1, sp, #112	; 0x70
 801275c:	4617      	mov	r7, r2
 801275e:	960a      	str	r6, [sp, #40]	; 0x28
 8012760:	4608      	mov	r0, r1
 8012762:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8012766:	e9d4 5305 	ldrd	r5, r3, [r4, #20]
 801276a:	47a8      	blx	r5
 801276c:	a920      	add	r1, sp, #128	; 0x80
 801276e:	6965      	ldr	r5, [r4, #20]
 8012770:	463a      	mov	r2, r7
 8012772:	4608      	mov	r0, r1
 8012774:	69a3      	ldr	r3, [r4, #24]
 8012776:	47a8      	blx	r5
 8012778:	a924      	add	r1, sp, #144	; 0x90
 801277a:	68e5      	ldr	r5, [r4, #12]
 801277c:	463a      	mov	r2, r7
 801277e:	4608      	mov	r0, r1
 8012780:	6923      	ldr	r3, [r4, #16]
 8012782:	47a8      	blx	r5
 8012784:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012786:	9a01      	ldr	r2, [sp, #4]
 8012788:	2100      	movs	r1, #0
 801278a:	f1a3 0803 	sub.w	r8, r3, #3
 801278e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012790:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8012794:	ea4f 0598 	mov.w	r5, r8, lsr #2
 8012798:	4413      	add	r3, r2
 801279a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801279c:	469c      	mov	ip, r3
 801279e:	ebc5 7385 	rsb	r3, r5, r5, lsl #30
 80127a2:	3501      	adds	r5, #1
 80127a4:	ed1f 4a87 	vldr	s8, [pc, #-540]	; 801258c <lstm_cell+0x404>
 80127a8:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 80127ac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80127ae:	012d      	lsls	r5, r5, #4
 80127b0:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80127b4:	e9cd b802 	strd	fp, r8, [sp, #8]
 80127b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80127bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80127be:	2e03      	cmp	r6, #3
 80127c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80127c2:	ecb2 7a01 	vldmia	r2!, {s14}
 80127c6:	440b      	add	r3, r1
 80127c8:	920f      	str	r2, [sp, #60]	; 0x3c
 80127ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80127cc:	ecf2 7a01 	vldmia	r2!, {s15}
 80127d0:	9211      	str	r2, [sp, #68]	; 0x44
 80127d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80127d8:	ed93 7a00 	vldr	s14, [r3]
 80127dc:	ecf2 6a01 	vldmia	r2!, {s13}
 80127e0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80127e4:	9212      	str	r2, [sp, #72]	; 0x48
 80127e6:	edc3 7a00 	vstr	s15, [r3]
 80127ea:	ed80 4a00 	vstr	s8, [r0]
 80127ee:	f240 80d5 	bls.w	801299c <lstm_cell+0x814>
 80127f2:	9b05      	ldr	r3, [sp, #20]
 80127f4:	f108 0210 	add.w	r2, r8, #16
 80127f8:	46b2      	mov	sl, r6
 80127fa:	ed5f 6a9c 	vldr	s13, [pc, #-624]	; 801258c <lstm_cell+0x404>
 80127fe:	3310      	adds	r3, #16
 8012800:	ed12 7a03 	vldr	s14, [r2, #-12]
 8012804:	f1aa 0a04 	sub.w	sl, sl, #4
 8012808:	ed53 7a03 	vldr	s15, [r3, #-12]
 801280c:	3210      	adds	r2, #16
 801280e:	ed12 6a08 	vldr	s12, [r2, #-32]	; 0xffffffe0
 8012812:	f1ba 0f03 	cmp.w	sl, #3
 8012816:	ee67 7a27 	vmul.f32	s15, s14, s15
 801281a:	ed13 7a04 	vldr	s14, [r3, #-16]
 801281e:	ed12 5a06 	vldr	s10, [r2, #-24]	; 0xffffffe8
 8012822:	f103 0310 	add.w	r3, r3, #16
 8012826:	ed53 5a06 	vldr	s11, [r3, #-24]	; 0xffffffe8
 801282a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801282e:	ed12 6a05 	vldr	s12, [r2, #-20]	; 0xffffffec
 8012832:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8012836:	eee5 7a25 	vfma.f32	s15, s10, s11
 801283a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801283e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012842:	d8dd      	bhi.n	8012800 <lstm_cell+0x678>
 8012844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012846:	eb08 0a03 	add.w	sl, r8, r3
 801284a:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 801284e:	b1ab      	cbz	r3, 801287c <lstm_cell+0x6f4>
 8012850:	ed9a 7a00 	vldr	s14, [sl]
 8012854:	2b01      	cmp	r3, #1
 8012856:	edd2 7a00 	vldr	s15, [r2]
 801285a:	eee7 6a27 	vfma.f32	s13, s14, s15
 801285e:	d00d      	beq.n	801287c <lstm_cell+0x6f4>
 8012860:	ed9a 7a01 	vldr	s14, [sl, #4]
 8012864:	2b02      	cmp	r3, #2
 8012866:	edd2 7a01 	vldr	s15, [r2, #4]
 801286a:	eee7 6a27 	vfma.f32	s13, s14, s15
 801286e:	d005      	beq.n	801287c <lstm_cell+0x6f4>
 8012870:	ed9a 7a02 	vldr	s14, [sl, #8]
 8012874:	edd2 7a02 	vldr	s15, [r2, #8]
 8012878:	eee7 6a27 	vfma.f32	s13, s14, s15
 801287c:	2f03      	cmp	r7, #3
 801287e:	edc0 6a00 	vstr	s13, [r0]
 8012882:	f8d4 b01c 	ldr.w	fp, [r4, #28]
 8012886:	f240 8084 	bls.w	8012992 <lstm_cell+0x80a>
 801288a:	f109 0210 	add.w	r2, r9, #16
 801288e:	f10b 0310 	add.w	r3, fp, #16
 8012892:	46ba      	mov	sl, r7
 8012894:	ed1f 6ac3 	vldr	s12, [pc, #-780]	; 801258c <lstm_cell+0x404>
 8012898:	ed12 7a03 	vldr	s14, [r2, #-12]
 801289c:	f1aa 0a04 	sub.w	sl, sl, #4
 80128a0:	ed53 7a03 	vldr	s15, [r3, #-12]
 80128a4:	3210      	adds	r2, #16
 80128a6:	ed52 5a08 	vldr	s11, [r2, #-32]	; 0xffffffe0
 80128aa:	f1ba 0f03 	cmp.w	sl, #3
 80128ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80128b2:	ed13 7a04 	vldr	s14, [r3, #-16]
 80128b6:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 80128ba:	f103 0310 	add.w	r3, r3, #16
 80128be:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
 80128c2:	eee5 7a87 	vfma.f32	s15, s11, s14
 80128c6:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 80128ca:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 80128ce:	eee4 7a85 	vfma.f32	s15, s9, s10
 80128d2:	eee5 7a87 	vfma.f32	s15, s11, s14
 80128d6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80128da:	d8dd      	bhi.n	8012898 <lstm_cell+0x710>
 80128dc:	9a03      	ldr	r2, [sp, #12]
 80128de:	44ab      	add	fp, r5
 80128e0:	eb09 0305 	add.w	r3, r9, r5
 80128e4:	b1aa      	cbz	r2, 8012912 <lstm_cell+0x78a>
 80128e6:	ed93 7a00 	vldr	s14, [r3]
 80128ea:	2a01      	cmp	r2, #1
 80128ec:	eddb 7a00 	vldr	s15, [fp]
 80128f0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80128f4:	d00d      	beq.n	8012912 <lstm_cell+0x78a>
 80128f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80128fa:	2a02      	cmp	r2, #2
 80128fc:	eddb 7a01 	vldr	s15, [fp, #4]
 8012900:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012904:	d005      	beq.n	8012912 <lstm_cell+0x78a>
 8012906:	ed93 7a02 	vldr	s14, [r3, #8]
 801290a:	eddb 7a02 	vldr	s15, [fp, #8]
 801290e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012912:	9b04      	ldr	r3, [sp, #16]
 8012914:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012918:	4498      	add	r8, r3
 801291a:	9b01      	ldr	r3, [sp, #4]
 801291c:	edc0 6a00 	vstr	s13, [r0]
 8012920:	4499      	add	r9, r3
 8012922:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012924:	ecbe 7a01 	vldmia	lr!, {s14}
 8012928:	440b      	add	r3, r1
 801292a:	ecbc 6a01 	vldmia	ip!, {s12}
 801292e:	3104      	adds	r1, #4
 8012930:	edd3 7a00 	vldr	s15, [r3]
 8012934:	9b02      	ldr	r3, [sp, #8]
 8012936:	eea7 6a27 	vfma.f32	s12, s14, s15
 801293a:	428b      	cmp	r3, r1
 801293c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012940:	ece0 6a01 	vstmia	r0!, {s13}
 8012944:	f47f af3a 	bne.w	80127bc <lstm_cell+0x634>
 8012948:	a928      	add	r1, sp, #160	; 0xa0
 801294a:	469b      	mov	fp, r3
 801294c:	463a      	mov	r2, r7
 801294e:	4608      	mov	r0, r1
 8012950:	e9d4 5305 	ldrd	r5, r3, [r4, #20]
 8012954:	47a8      	blx	r5
 8012956:	a930      	add	r1, sp, #192	; 0xc0
 8012958:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801295a:	a82c      	add	r0, sp, #176	; 0xb0
 801295c:	463a      	mov	r2, r7
 801295e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8012960:	47a8      	blx	r5
 8012962:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012964:	449b      	add	fp, r3
 8012966:	4619      	mov	r1, r3
 8012968:	4618      	mov	r0, r3
 801296a:	1a0a      	subs	r2, r1, r0
 801296c:	6a23      	ldr	r3, [r4, #32]
 801296e:	ecf1 7a01 	vldmia	r1!, {s15}
 8012972:	4413      	add	r3, r2
 8012974:	458b      	cmp	fp, r1
 8012976:	ed93 7a00 	vldr	s14, [r3]
 801297a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801297e:	edc3 7a00 	vstr	s15, [r3]
 8012982:	d1f2      	bne.n	801296a <lstm_cell+0x7e2>
 8012984:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8012988:	e9c4 2307 	strd	r2, r3, [r4, #28]
 801298c:	b035      	add	sp, #212	; 0xd4
 801298e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012992:	464b      	mov	r3, r9
 8012994:	463a      	mov	r2, r7
 8012996:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 8012a14 <lstm_cell+0x88c>
 801299a:	e7a4      	b.n	80128e6 <lstm_cell+0x75e>
 801299c:	4633      	mov	r3, r6
 801299e:	9a05      	ldr	r2, [sp, #20]
 80129a0:	46c2      	mov	sl, r8
 80129a2:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8012a14 <lstm_cell+0x88c>
 80129a6:	e752      	b.n	801284e <lstm_cell+0x6c6>
 80129a8:	462a      	mov	r2, r5
 80129aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129ac:	eddf 5a19 	vldr	s11, [pc, #100]	; 8012a14 <lstm_cell+0x88c>
 80129b0:	e5af      	b.n	8012512 <lstm_cell+0x38a>
 80129b2:	4633      	mov	r3, r6
 80129b4:	9a05      	ldr	r2, [sp, #20]
 80129b6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80129ba:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8012a14 <lstm_cell+0x88c>
 80129be:	e55b      	b.n	8012478 <lstm_cell+0x2f0>
 80129c0:	462a      	mov	r2, r5
 80129c2:	eddf 5a14 	vldr	s11, [pc, #80]	; 8012a14 <lstm_cell+0x88c>
 80129c6:	e4f5      	b.n	80123b4 <lstm_cell+0x22c>
 80129c8:	a91c      	add	r1, sp, #112	; 0x70
 80129ca:	462a      	mov	r2, r5
 80129cc:	e9d4 6305 	ldrd	r6, r3, [r4, #20]
 80129d0:	4608      	mov	r0, r1
 80129d2:	47b0      	blx	r6
 80129d4:	a920      	add	r1, sp, #128	; 0x80
 80129d6:	6966      	ldr	r6, [r4, #20]
 80129d8:	462a      	mov	r2, r5
 80129da:	4608      	mov	r0, r1
 80129dc:	69a3      	ldr	r3, [r4, #24]
 80129de:	47b0      	blx	r6
 80129e0:	a924      	add	r1, sp, #144	; 0x90
 80129e2:	68e6      	ldr	r6, [r4, #12]
 80129e4:	462a      	mov	r2, r5
 80129e6:	4608      	mov	r0, r1
 80129e8:	6923      	ldr	r3, [r4, #16]
 80129ea:	47b0      	blx	r6
 80129ec:	a928      	add	r1, sp, #160	; 0xa0
 80129ee:	462a      	mov	r2, r5
 80129f0:	69a3      	ldr	r3, [r4, #24]
 80129f2:	4608      	mov	r0, r1
 80129f4:	6966      	ldr	r6, [r4, #20]
 80129f6:	47b0      	blx	r6
 80129f8:	462a      	mov	r2, r5
 80129fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80129fc:	a930      	add	r1, sp, #192	; 0xc0
 80129fe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8012a00:	a82c      	add	r0, sp, #176	; 0xb0
 8012a02:	47a8      	blx	r5
 8012a04:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8012a08:	e9c4 2307 	strd	r2, r3, [r4, #28]
 8012a0c:	b035      	add	sp, #212	; 0xd4
 8012a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a12:	bf00      	nop
 8012a14:	00000000 	.word	0x00000000

08012a18 <forward_lstm>:
 8012a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a1c:	6943      	ldr	r3, [r0, #20]
 8012a1e:	b099      	sub	sp, #100	; 0x64
 8012a20:	881c      	ldrh	r4, [r3, #0]
 8012a22:	2c00      	cmp	r4, #0
 8012a24:	f000 80ea 	beq.w	8012bfc <forward_lstm+0x1e4>
 8012a28:	6859      	ldr	r1, [r3, #4]
 8012a2a:	684b      	ldr	r3, [r1, #4]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	f000 8130 	beq.w	8012c92 <forward_lstm+0x27a>
 8012a32:	f8d3 b000 	ldr.w	fp, [r3]
 8012a36:	2c01      	cmp	r4, #1
 8012a38:	f240 80db 	bls.w	8012bf2 <forward_lstm+0x1da>
 8012a3c:	690e      	ldr	r6, [r1, #16]
 8012a3e:	b106      	cbz	r6, 8012a42 <forward_lstm+0x2a>
 8012a40:	6836      	ldr	r6, [r6, #0]
 8012a42:	2c02      	cmp	r4, #2
 8012a44:	f000 80d5 	beq.w	8012bf2 <forward_lstm+0x1da>
 8012a48:	69ca      	ldr	r2, [r1, #28]
 8012a4a:	2a00      	cmp	r2, #0
 8012a4c:	f000 8114 	beq.w	8012c78 <forward_lstm+0x260>
 8012a50:	f111 0818 	adds.w	r8, r1, #24
 8012a54:	6815      	ldr	r5, [r2, #0]
 8012a56:	d008      	beq.n	8012a6a <forward_lstm+0x52>
 8012a58:	8b0f      	ldrh	r7, [r1, #24]
 8012a5a:	2f01      	cmp	r7, #1
 8012a5c:	f240 8114 	bls.w	8012c88 <forward_lstm+0x270>
 8012a60:	2a00      	cmp	r2, #0
 8012a62:	f000 80d0 	beq.w	8012c06 <forward_lstm+0x1ee>
 8012a66:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8012a6a:	f8db 700c 	ldr.w	r7, [fp, #12]
 8012a6e:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	69b6      	ldr	r6, [r6, #24]
 8012a76:	9301      	str	r3, [sp, #4]
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f8d2 9010 	ldr.w	r9, [r2, #16]
 8012a7e:	9303      	str	r3, [sp, #12]
 8012a80:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8012a84:	f8d0 a018 	ldr.w	sl, [r0, #24]
 8012a88:	9309      	str	r3, [sp, #36]	; 0x24
 8012a8a:	68b3      	ldr	r3, [r6, #8]
 8012a8c:	9304      	str	r3, [sp, #16]
 8012a8e:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8012a92:	e9d2 7205 	ldrd	r7, r2, [r2, #20]
 8012a96:	f1b9 0f00 	cmp.w	r9, #0
 8012a9a:	f000 80fe 	beq.w	8012c9a <forward_lstm+0x282>
 8012a9e:	f8d9 9018 	ldr.w	r9, [r9, #24]
 8012aa2:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8012aa6:	9605      	str	r6, [sp, #20]
 8012aa8:	2f00      	cmp	r7, #0
 8012aaa:	f000 80f4 	beq.w	8012c96 <forward_lstm+0x27e>
 8012aae:	69bf      	ldr	r7, [r7, #24]
 8012ab0:	68be      	ldr	r6, [r7, #8]
 8012ab2:	9606      	str	r6, [sp, #24]
 8012ab4:	2a00      	cmp	r2, #0
 8012ab6:	f000 80f3 	beq.w	8012ca0 <forward_lstm+0x288>
 8012aba:	6992      	ldr	r2, [r2, #24]
 8012abc:	6892      	ldr	r2, [r2, #8]
 8012abe:	9207      	str	r2, [sp, #28]
 8012ac0:	2c03      	cmp	r4, #3
 8012ac2:	f000 8096 	beq.w	8012bf2 <forward_lstm+0x1da>
 8012ac6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8012ac8:	2a00      	cmp	r2, #0
 8012aca:	f000 8095 	beq.w	8012bf8 <forward_lstm+0x1e0>
 8012ace:	6812      	ldr	r2, [r2, #0]
 8012ad0:	eb0a 074a 	add.w	r7, sl, sl, lsl #1
 8012ad4:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8012ad8:	4681      	mov	r9, r0
 8012ada:	6992      	ldr	r2, [r2, #24]
 8012adc:	ea4f 008a 	mov.w	r0, sl, lsl #2
 8012ae0:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8012ae4:	00bf      	lsls	r7, r7, #2
 8012ae6:	6894      	ldr	r4, [r2, #8]
 8012ae8:	2100      	movs	r1, #0
 8012aea:	f8d8 8018 	ldr.w	r8, [r8, #24]
 8012aee:	463a      	mov	r2, r7
 8012af0:	689b      	ldr	r3, [r3, #8]
 8012af2:	4427      	add	r7, r4
 8012af4:	69ad      	ldr	r5, [r5, #24]
 8012af6:	9002      	str	r0, [sp, #8]
 8012af8:	4620      	mov	r0, r4
 8012afa:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8012afe:	68ad      	ldr	r5, [r5, #8]
 8012b00:	f8de 8008 	ldr.w	r8, [lr, #8]
 8012b04:	9308      	str	r3, [sp, #32]
 8012b06:	f000 fa33 	bl	8012f70 <memset>
 8012b0a:	9b02      	ldr	r3, [sp, #8]
 8012b0c:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8012b10:	eb04 0e03 	add.w	lr, r4, r3
 8012b14:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8012b18:	4b62      	ldr	r3, [pc, #392]	; (8012ca4 <forward_lstm+0x28c>)
 8012b1a:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8012b1e:	960b      	str	r6, [sp, #44]	; 0x2c
 8012b20:	2800      	cmp	r0, #0
 8012b22:	bf08      	it	eq
 8012b24:	4618      	moveq	r0, r3
 8012b26:	9e05      	ldr	r6, [sp, #20]
 8012b28:	2900      	cmp	r1, #0
 8012b2a:	bf08      	it	eq
 8012b2c:	4619      	moveq	r1, r3
 8012b2e:	2a00      	cmp	r2, #0
 8012b30:	bf08      	it	eq
 8012b32:	461a      	moveq	r2, r3
 8012b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b36:	960e      	str	r6, [sp, #56]	; 0x38
 8012b38:	9e06      	ldr	r6, [sp, #24]
 8012b3a:	2b01      	cmp	r3, #1
 8012b3c:	950a      	str	r5, [sp, #40]	; 0x28
 8012b3e:	9b02      	ldr	r3, [sp, #8]
 8012b40:	9d03      	ldr	r5, [sp, #12]
 8012b42:	9610      	str	r6, [sp, #64]	; 0x40
 8012b44:	4473      	add	r3, lr
 8012b46:	9e03      	ldr	r6, [sp, #12]
 8012b48:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8012b4c:	f8ad a04e 	strh.w	sl, [sp, #78]	; 0x4e
 8012b50:	bf98      	it	ls
 8012b52:	f04f 0a00 	movls.w	sl, #0
 8012b56:	9d08      	ldr	r5, [sp, #32]
 8012b58:	9415      	str	r4, [sp, #84]	; 0x54
 8012b5a:	f8ad 604c 	strh.w	r6, [sp, #76]	; 0x4c
 8012b5e:	f899 4028 	ldrb.w	r4, [r9, #40]	; 0x28
 8012b62:	9e07      	ldr	r6, [sp, #28]
 8012b64:	950c      	str	r5, [sp, #48]	; 0x30
 8012b66:	4655      	mov	r5, sl
 8012b68:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8012b6c:	9617      	str	r6, [sp, #92]	; 0x5c
 8012b6e:	900d      	str	r0, [sp, #52]	; 0x34
 8012b70:	910f      	str	r1, [sp, #60]	; 0x3c
 8012b72:	9216      	str	r2, [sp, #88]	; 0x58
 8012b74:	e9cd e311 	strd	lr, r3, [sp, #68]	; 0x44
 8012b78:	2c00      	cmp	r4, #0
 8012b7a:	d041      	beq.n	8012c00 <forward_lstm+0x1e8>
 8012b7c:	9b01      	ldr	r3, [sp, #4]
 8012b7e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8012b82:	1e5c      	subs	r4, r3, #1
 8012b84:	f899 2029 	ldrb.w	r2, [r9, #41]	; 0x29
 8012b88:	b14a      	cbz	r2, 8012b9e <forward_lstm+0x186>
 8012b8a:	9b01      	ldr	r3, [sp, #4]
 8012b8c:	f1ca 0500 	rsb	r5, sl, #0
 8012b90:	1e5a      	subs	r2, r3, #1
 8012b92:	9b04      	ldr	r3, [sp, #16]
 8012b94:	fb0a fa02 	mul.w	sl, sl, r2
 8012b98:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8012b9c:	9304      	str	r3, [sp, #16]
 8012b9e:	fb0c f308 	mul.w	r3, ip, r8
 8012ba2:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8012ba6:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8012baa:	9303      	str	r3, [sp, #12]
 8012bac:	2d00      	cmp	r5, #0
 8012bae:	d143      	bne.n	8012c38 <forward_lstm+0x220>
 8012bb0:	4653      	mov	r3, sl
 8012bb2:	fb0c f504 	mul.w	r5, ip, r4
 8012bb6:	46ba      	mov	sl, r7
 8012bb8:	9e04      	ldr	r6, [sp, #16]
 8012bba:	465f      	mov	r7, fp
 8012bbc:	469b      	mov	fp, r3
 8012bbe:	e002      	b.n	8012bc6 <forward_lstm+0x1ae>
 8012bc0:	9b01      	ldr	r3, [sp, #4]
 8012bc2:	429c      	cmp	r4, r3
 8012bc4:	da0c      	bge.n	8012be0 <forward_lstm+0x1c8>
 8012bc6:	69b8      	ldr	r0, [r7, #24]
 8012bc8:	4444      	add	r4, r8
 8012bca:	9b03      	ldr	r3, [sp, #12]
 8012bcc:	4652      	mov	r2, sl
 8012bce:	6880      	ldr	r0, [r0, #8]
 8012bd0:	4659      	mov	r1, fp
 8012bd2:	444e      	add	r6, r9
 8012bd4:	4428      	add	r0, r5
 8012bd6:	441d      	add	r5, r3
 8012bd8:	f7ff fad6 	bl	8012188 <lstm_cell>
 8012bdc:	2c00      	cmp	r4, #0
 8012bde:	daef      	bge.n	8012bc0 <forward_lstm+0x1a8>
 8012be0:	4630      	mov	r0, r6
 8012be2:	9a02      	ldr	r2, [sp, #8]
 8012be4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012be6:	9604      	str	r6, [sp, #16]
 8012be8:	f000 f9b4 	bl	8012f54 <memcpy>
 8012bec:	b019      	add	sp, #100	; 0x64
 8012bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	685b      	ldr	r3, [r3, #4]
 8012bf6:	deff      	udf	#255	; 0xff
 8012bf8:	6993      	ldr	r3, [r2, #24]
 8012bfa:	deff      	udf	#255	; 0xff
 8012bfc:	6863      	ldr	r3, [r4, #4]
 8012bfe:	deff      	udf	#255	; 0xff
 8012c00:	f04f 0801 	mov.w	r8, #1
 8012c04:	e7be      	b.n	8012b84 <forward_lstm+0x16c>
 8012c06:	f8db 300c 	ldr.w	r3, [fp, #12]
 8012c0a:	f04f 0800 	mov.w	r8, #0
 8012c0e:	68f7      	ldr	r7, [r6, #12]
 8012c10:	69b2      	ldr	r2, [r6, #24]
 8012c12:	46c4      	mov	ip, r8
 8012c14:	68de      	ldr	r6, [r3, #12]
 8012c16:	685b      	ldr	r3, [r3, #4]
 8012c18:	6892      	ldr	r2, [r2, #8]
 8012c1a:	9303      	str	r3, [sp, #12]
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	f8cd 8014 	str.w	r8, [sp, #20]
 8012c22:	9309      	str	r3, [sp, #36]	; 0x24
 8012c24:	4643      	mov	r3, r8
 8012c26:	9601      	str	r6, [sp, #4]
 8012c28:	f8cd 8018 	str.w	r8, [sp, #24]
 8012c2c:	9204      	str	r2, [sp, #16]
 8012c2e:	f8cd 801c 	str.w	r8, [sp, #28]
 8012c32:	f8d0 a018 	ldr.w	sl, [r0, #24]
 8012c36:	e743      	b.n	8012ac0 <forward_lstm+0xa8>
 8012c38:	4653      	mov	r3, sl
 8012c3a:	fb0c f504 	mul.w	r5, ip, r4
 8012c3e:	46da      	mov	sl, fp
 8012c40:	9e04      	ldr	r6, [sp, #16]
 8012c42:	469b      	mov	fp, r3
 8012c44:	e001      	b.n	8012c4a <forward_lstm+0x232>
 8012c46:	2c00      	cmp	r4, #0
 8012c48:	dbd0      	blt.n	8012bec <forward_lstm+0x1d4>
 8012c4a:	f8da 0018 	ldr.w	r0, [sl, #24]
 8012c4e:	463a      	mov	r2, r7
 8012c50:	9b03      	ldr	r3, [sp, #12]
 8012c52:	4659      	mov	r1, fp
 8012c54:	6880      	ldr	r0, [r0, #8]
 8012c56:	4444      	add	r4, r8
 8012c58:	4428      	add	r0, r5
 8012c5a:	441d      	add	r5, r3
 8012c5c:	f7ff fa94 	bl	8012188 <lstm_cell>
 8012c60:	4630      	mov	r0, r6
 8012c62:	9a02      	ldr	r2, [sp, #8]
 8012c64:	444e      	add	r6, r9
 8012c66:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012c68:	f000 f974 	bl	8012f54 <memcpy>
 8012c6c:	9b01      	ldr	r3, [sp, #4]
 8012c6e:	429c      	cmp	r4, r3
 8012c70:	dbe9      	blt.n	8012c46 <forward_lstm+0x22e>
 8012c72:	b019      	add	sp, #100	; 0x64
 8012c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c78:	f111 0518 	adds.w	r5, r1, #24
 8012c7c:	d0c3      	beq.n	8012c06 <forward_lstm+0x1ee>
 8012c7e:	8b0f      	ldrh	r7, [r1, #24]
 8012c80:	4615      	mov	r5, r2
 8012c82:	2f01      	cmp	r7, #1
 8012c84:	f63f aeec 	bhi.w	8012a60 <forward_lstm+0x48>
 8012c88:	2a00      	cmp	r2, #0
 8012c8a:	d0bc      	beq.n	8012c06 <forward_lstm+0x1ee>
 8012c8c:	f04f 0800 	mov.w	r8, #0
 8012c90:	e6eb      	b.n	8012a6a <forward_lstm+0x52>
 8012c92:	469b      	mov	fp, r3
 8012c94:	e6cf      	b.n	8012a36 <forward_lstm+0x1e>
 8012c96:	9706      	str	r7, [sp, #24]
 8012c98:	e70c      	b.n	8012ab4 <forward_lstm+0x9c>
 8012c9a:	f8cd 9014 	str.w	r9, [sp, #20]
 8012c9e:	e703      	b.n	8012aa8 <forward_lstm+0x90>
 8012ca0:	9207      	str	r2, [sp, #28]
 8012ca2:	e70d      	b.n	8012ac0 <forward_lstm+0xa8>
 8012ca4:	08012179 	.word	0x08012179

08012ca8 <nl_func_sigmoid_array_f32>:
 8012ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012caa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012cae:	688c      	ldr	r4, [r1, #8]
 8012cb0:	4413      	add	r3, r2
 8012cb2:	009b      	lsls	r3, r3, #2
 8012cb4:	18e4      	adds	r4, r4, r3
 8012cb6:	ed2d 8b02 	vpush	{d8}
 8012cba:	6885      	ldr	r5, [r0, #8]
 8012cbc:	d218      	bcs.n	8012cf0 <nl_func_sigmoid_array_f32+0x48>
 8012cbe:	3304      	adds	r3, #4
 8012cc0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8012cc4:	460f      	mov	r7, r1
 8012cc6:	3404      	adds	r4, #4
 8012cc8:	441d      	add	r5, r3
 8012cca:	ed14 0a01 	vldr	s0, [r4, #-4]
 8012cce:	1f26      	subs	r6, r4, #4
 8012cd0:	eeb1 0a40 	vneg.f32	s0, s0
 8012cd4:	f003 f82a 	bl	8015d2c <expf>
 8012cd8:	ee30 0a08 	vadd.f32	s0, s0, s16
 8012cdc:	f1a4 0308 	sub.w	r3, r4, #8
 8012ce0:	4634      	mov	r4, r6
 8012ce2:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8012ce6:	ed65 7a01 	vstmdb	r5!, {s15}
 8012cea:	68ba      	ldr	r2, [r7, #8]
 8012cec:	429a      	cmp	r2, r3
 8012cee:	d9ec      	bls.n	8012cca <nl_func_sigmoid_array_f32+0x22>
 8012cf0:	ecbd 8b02 	vpop	{d8}
 8012cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cf6:	bf00      	nop

08012cf8 <nl_func_tanh_array_f32>:
 8012cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cfa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012cfe:	688c      	ldr	r4, [r1, #8]
 8012d00:	6885      	ldr	r5, [r0, #8]
 8012d02:	4413      	add	r3, r2
 8012d04:	009b      	lsls	r3, r3, #2
 8012d06:	18e4      	adds	r4, r4, r3
 8012d08:	d210      	bcs.n	8012d2c <nl_func_tanh_array_f32+0x34>
 8012d0a:	3304      	adds	r3, #4
 8012d0c:	460f      	mov	r7, r1
 8012d0e:	3404      	adds	r4, #4
 8012d10:	441d      	add	r5, r3
 8012d12:	ed14 0a01 	vldr	s0, [r4, #-4]
 8012d16:	1f26      	subs	r6, r4, #4
 8012d18:	f002 ffb6 	bl	8015c88 <tanhf>
 8012d1c:	ed25 0a01 	vstmdb	r5!, {s0}
 8012d20:	f1a4 0308 	sub.w	r3, r4, #8
 8012d24:	68ba      	ldr	r2, [r7, #8]
 8012d26:	4634      	mov	r4, r6
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	d9f2      	bls.n	8012d12 <nl_func_tanh_array_f32+0x1a>
 8012d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d2e:	bf00      	nop

08012d30 <ai_check_custom_types>:
 8012d30:	4b13      	ldr	r3, [pc, #76]	; (8012d80 <ai_check_custom_types+0x50>)
 8012d32:	b082      	sub	sp, #8
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	9301      	str	r3, [sp, #4]
 8012d38:	b118      	cbz	r0, 8012d42 <ai_check_custom_types+0x12>
 8012d3a:	7803      	ldrb	r3, [r0, #0]
 8012d3c:	2b03      	cmp	r3, #3
 8012d3e:	d002      	beq.n	8012d46 <ai_check_custom_types+0x16>
 8012d40:	2000      	movs	r0, #0
 8012d42:	b002      	add	sp, #8
 8012d44:	4770      	bx	lr
 8012d46:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012d4a:	4293      	cmp	r3, r2
 8012d4c:	d004      	beq.n	8012d58 <ai_check_custom_types+0x28>
 8012d4e:	2001      	movs	r0, #1
 8012d50:	f080 0001 	eor.w	r0, r0, #1
 8012d54:	b002      	add	sp, #8
 8012d56:	4770      	bx	lr
 8012d58:	7842      	ldrb	r2, [r0, #1]
 8012d5a:	3001      	adds	r0, #1
 8012d5c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012d60:	429a      	cmp	r2, r3
 8012d62:	d1f4      	bne.n	8012d4e <ai_check_custom_types+0x1e>
 8012d64:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8012d68:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012d6c:	429a      	cmp	r2, r3
 8012d6e:	d1ee      	bne.n	8012d4e <ai_check_custom_types+0x1e>
 8012d70:	7842      	ldrb	r2, [r0, #1]
 8012d72:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012d76:	429a      	cmp	r2, r3
 8012d78:	d1e9      	bne.n	8012d4e <ai_check_custom_types+0x1e>
 8012d7a:	2000      	movs	r0, #0
 8012d7c:	e7e8      	b.n	8012d50 <ai_check_custom_types+0x20>
 8012d7e:	bf00      	nop
 8012d80:	08016368 	.word	0x08016368

08012d84 <ai_layers_forward_all>:
 8012d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d86:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8012d88:	4604      	mov	r4, r0
 8012d8a:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8012d8c:	b316      	cbz	r6, 8012dd4 <ai_layers_forward_all+0x50>
 8012d8e:	b1c5      	cbz	r5, 8012dc2 <ai_layers_forward_all+0x3e>
 8012d90:	6545      	str	r5, [r0, #84]	; 0x54
 8012d92:	4629      	mov	r1, r5
 8012d94:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8012d96:	2001      	movs	r0, #1
 8012d98:	47b0      	blx	r6
 8012d9a:	2700      	movs	r7, #0
 8012d9c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8012d9e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012da0:	2002      	movs	r0, #2
 8012da2:	47b0      	blx	r6
 8012da4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8012da6:	692b      	ldr	r3, [r5, #16]
 8012da8:	4628      	mov	r0, r5
 8012daa:	4798      	blx	r3
 8012dac:	68eb      	ldr	r3, [r5, #12]
 8012dae:	2003      	movs	r0, #3
 8012db0:	429d      	cmp	r5, r3
 8012db2:	4619      	mov	r1, r3
 8012db4:	d006      	beq.n	8012dc4 <ai_layers_forward_all+0x40>
 8012db6:	6563      	str	r3, [r4, #84]	; 0x54
 8012db8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012dba:	47b0      	blx	r6
 8012dbc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8012dbe:	2900      	cmp	r1, #0
 8012dc0:	d1ed      	bne.n	8012d9e <ai_layers_forward_all+0x1a>
 8012dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dc4:	2100      	movs	r1, #0
 8012dc6:	6567      	str	r7, [r4, #84]	; 0x54
 8012dc8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012dca:	47b0      	blx	r6
 8012dcc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8012dce:	2900      	cmp	r1, #0
 8012dd0:	d1e5      	bne.n	8012d9e <ai_layers_forward_all+0x1a>
 8012dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dd4:	2d00      	cmp	r5, #0
 8012dd6:	d0f4      	beq.n	8012dc2 <ai_layers_forward_all+0x3e>
 8012dd8:	6545      	str	r5, [r0, #84]	; 0x54
 8012dda:	692b      	ldr	r3, [r5, #16]
 8012ddc:	4628      	mov	r0, r5
 8012dde:	4798      	blx	r3
 8012de0:	68eb      	ldr	r3, [r5, #12]
 8012de2:	42ab      	cmp	r3, r5
 8012de4:	461d      	mov	r5, r3
 8012de6:	d003      	beq.n	8012df0 <ai_layers_forward_all+0x6c>
 8012de8:	6563      	str	r3, [r4, #84]	; 0x54
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d1f5      	bne.n	8012dda <ai_layers_forward_all+0x56>
 8012dee:	e7e8      	b.n	8012dc2 <ai_layers_forward_all+0x3e>
 8012df0:	2300      	movs	r3, #0
 8012df2:	6563      	str	r3, [r4, #84]	; 0x54
 8012df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012df6:	bf00      	nop

08012df8 <ai_array_to_buffer_fmt>:
 8012df8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8012dfc:	2b02      	cmp	r3, #2
 8012dfe:	d01f      	beq.n	8012e40 <ai_array_to_buffer_fmt+0x48>
 8012e00:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8012e04:	4a1b      	ldr	r2, [pc, #108]	; (8012e74 <ai_array_to_buffer_fmt+0x7c>)
 8012e06:	4293      	cmp	r3, r2
 8012e08:	d00a      	beq.n	8012e20 <ai_array_to_buffer_fmt+0x28>
 8012e0a:	dc0d      	bgt.n	8012e28 <ai_array_to_buffer_fmt+0x30>
 8012e0c:	4a1a      	ldr	r2, [pc, #104]	; (8012e78 <ai_array_to_buffer_fmt+0x80>)
 8012e0e:	4293      	cmp	r3, r2
 8012e10:	d006      	beq.n	8012e20 <ai_array_to_buffer_fmt+0x28>
 8012e12:	dd1d      	ble.n	8012e50 <ai_array_to_buffer_fmt+0x58>
 8012e14:	4a19      	ldr	r2, [pc, #100]	; (8012e7c <ai_array_to_buffer_fmt+0x84>)
 8012e16:	4293      	cmp	r3, r2
 8012e18:	d002      	beq.n	8012e20 <ai_array_to_buffer_fmt+0x28>
 8012e1a:	320f      	adds	r2, #15
 8012e1c:	4293      	cmp	r3, r2
 8012e1e:	d10d      	bne.n	8012e3c <ai_array_to_buffer_fmt+0x44>
 8012e20:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8012e24:	4318      	orrs	r0, r3
 8012e26:	4770      	bx	lr
 8012e28:	4a15      	ldr	r2, [pc, #84]	; (8012e80 <ai_array_to_buffer_fmt+0x88>)
 8012e2a:	4293      	cmp	r3, r2
 8012e2c:	d0f8      	beq.n	8012e20 <ai_array_to_buffer_fmt+0x28>
 8012e2e:	dd18      	ble.n	8012e62 <ai_array_to_buffer_fmt+0x6a>
 8012e30:	4a14      	ldr	r2, [pc, #80]	; (8012e84 <ai_array_to_buffer_fmt+0x8c>)
 8012e32:	4293      	cmp	r3, r2
 8012e34:	d0f4      	beq.n	8012e20 <ai_array_to_buffer_fmt+0x28>
 8012e36:	4a14      	ldr	r2, [pc, #80]	; (8012e88 <ai_array_to_buffer_fmt+0x90>)
 8012e38:	4293      	cmp	r3, r2
 8012e3a:	d0f1      	beq.n	8012e20 <ai_array_to_buffer_fmt+0x28>
 8012e3c:	2340      	movs	r3, #64	; 0x40
 8012e3e:	e7ef      	b.n	8012e20 <ai_array_to_buffer_fmt+0x28>
 8012e40:	4b12      	ldr	r3, [pc, #72]	; (8012e8c <ai_array_to_buffer_fmt+0x94>)
 8012e42:	4003      	ands	r3, r0
 8012e44:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8012e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012e4c:	4318      	orrs	r0, r3
 8012e4e:	4770      	bx	lr
 8012e50:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8012e54:	4293      	cmp	r3, r2
 8012e56:	d0e3      	beq.n	8012e20 <ai_array_to_buffer_fmt+0x28>
 8012e58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012e5c:	4293      	cmp	r3, r2
 8012e5e:	d0df      	beq.n	8012e20 <ai_array_to_buffer_fmt+0x28>
 8012e60:	e7ec      	b.n	8012e3c <ai_array_to_buffer_fmt+0x44>
 8012e62:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8012e66:	4293      	cmp	r3, r2
 8012e68:	d0da      	beq.n	8012e20 <ai_array_to_buffer_fmt+0x28>
 8012e6a:	3207      	adds	r2, #7
 8012e6c:	4293      	cmp	r3, r2
 8012e6e:	d0d7      	beq.n	8012e20 <ai_array_to_buffer_fmt+0x28>
 8012e70:	e7e4      	b.n	8012e3c <ai_array_to_buffer_fmt+0x44>
 8012e72:	bf00      	nop
 8012e74:	00840040 	.word	0x00840040
 8012e78:	00040447 	.word	0x00040447
 8012e7c:	00040840 	.word	0x00040840
 8012e80:	00840840 	.word	0x00840840
 8012e84:	0084084f 	.word	0x0084084f
 8012e88:	01821040 	.word	0x01821040
 8012e8c:	00803fff 	.word	0x00803fff

08012e90 <ai_array_get_byte_size>:
 8012e90:	b1e1      	cbz	r1, 8012ecc <ai_array_get_byte_size+0x3c>
 8012e92:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8012e96:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8012e9a:	b410      	push	{r4}
 8012e9c:	f3c0 3482 	ubfx	r4, r0, #14, #3
 8012ea0:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8012ea4:	4423      	add	r3, r4
 8012ea6:	2804      	cmp	r0, #4
 8012ea8:	fb01 f103 	mul.w	r1, r1, r3
 8012eac:	f101 0107 	add.w	r1, r1, #7
 8012eb0:	f021 0107 	bic.w	r1, r1, #7
 8012eb4:	fa21 f102 	lsr.w	r1, r1, r2
 8012eb8:	d00a      	beq.n	8012ed0 <ai_array_get_byte_size+0x40>
 8012eba:	2808      	cmp	r0, #8
 8012ebc:	d101      	bne.n	8012ec2 <ai_array_get_byte_size+0x32>
 8012ebe:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8012ec2:	3107      	adds	r1, #7
 8012ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ec8:	08c8      	lsrs	r0, r1, #3
 8012eca:	4770      	bx	lr
 8012ecc:	4608      	mov	r0, r1
 8012ece:	4770      	bx	lr
 8012ed0:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8012ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ed8:	3107      	adds	r1, #7
 8012eda:	08c8      	lsrs	r0, r1, #3
 8012edc:	4770      	bx	lr
 8012ede:	bf00      	nop

08012ee0 <__errno>:
 8012ee0:	4b01      	ldr	r3, [pc, #4]	; (8012ee8 <__errno+0x8>)
 8012ee2:	6818      	ldr	r0, [r3, #0]
 8012ee4:	4770      	bx	lr
 8012ee6:	bf00      	nop
 8012ee8:	20000780 	.word	0x20000780

08012eec <__libc_init_array>:
 8012eec:	b570      	push	{r4, r5, r6, lr}
 8012eee:	4d0d      	ldr	r5, [pc, #52]	; (8012f24 <__libc_init_array+0x38>)
 8012ef0:	4c0d      	ldr	r4, [pc, #52]	; (8012f28 <__libc_init_array+0x3c>)
 8012ef2:	1b64      	subs	r4, r4, r5
 8012ef4:	10a4      	asrs	r4, r4, #2
 8012ef6:	2600      	movs	r6, #0
 8012ef8:	42a6      	cmp	r6, r4
 8012efa:	d109      	bne.n	8012f10 <__libc_init_array+0x24>
 8012efc:	4d0b      	ldr	r5, [pc, #44]	; (8012f2c <__libc_init_array+0x40>)
 8012efe:	4c0c      	ldr	r4, [pc, #48]	; (8012f30 <__libc_init_array+0x44>)
 8012f00:	f003 f9b6 	bl	8016270 <_init>
 8012f04:	1b64      	subs	r4, r4, r5
 8012f06:	10a4      	asrs	r4, r4, #2
 8012f08:	2600      	movs	r6, #0
 8012f0a:	42a6      	cmp	r6, r4
 8012f0c:	d105      	bne.n	8012f1a <__libc_init_array+0x2e>
 8012f0e:	bd70      	pop	{r4, r5, r6, pc}
 8012f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f14:	4798      	blx	r3
 8012f16:	3601      	adds	r6, #1
 8012f18:	e7ee      	b.n	8012ef8 <__libc_init_array+0xc>
 8012f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f1e:	4798      	blx	r3
 8012f20:	3601      	adds	r6, #1
 8012f22:	e7f2      	b.n	8012f0a <__libc_init_array+0x1e>
 8012f24:	0801989c 	.word	0x0801989c
 8012f28:	0801989c 	.word	0x0801989c
 8012f2c:	0801989c 	.word	0x0801989c
 8012f30:	080198a0 	.word	0x080198a0

08012f34 <malloc>:
 8012f34:	4b02      	ldr	r3, [pc, #8]	; (8012f40 <malloc+0xc>)
 8012f36:	4601      	mov	r1, r0
 8012f38:	6818      	ldr	r0, [r3, #0]
 8012f3a:	f000 b871 	b.w	8013020 <_malloc_r>
 8012f3e:	bf00      	nop
 8012f40:	20000780 	.word	0x20000780

08012f44 <free>:
 8012f44:	4b02      	ldr	r3, [pc, #8]	; (8012f50 <free+0xc>)
 8012f46:	4601      	mov	r1, r0
 8012f48:	6818      	ldr	r0, [r3, #0]
 8012f4a:	f000 b819 	b.w	8012f80 <_free_r>
 8012f4e:	bf00      	nop
 8012f50:	20000780 	.word	0x20000780

08012f54 <memcpy>:
 8012f54:	440a      	add	r2, r1
 8012f56:	4291      	cmp	r1, r2
 8012f58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012f5c:	d100      	bne.n	8012f60 <memcpy+0xc>
 8012f5e:	4770      	bx	lr
 8012f60:	b510      	push	{r4, lr}
 8012f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f6a:	4291      	cmp	r1, r2
 8012f6c:	d1f9      	bne.n	8012f62 <memcpy+0xe>
 8012f6e:	bd10      	pop	{r4, pc}

08012f70 <memset>:
 8012f70:	4402      	add	r2, r0
 8012f72:	4603      	mov	r3, r0
 8012f74:	4293      	cmp	r3, r2
 8012f76:	d100      	bne.n	8012f7a <memset+0xa>
 8012f78:	4770      	bx	lr
 8012f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8012f7e:	e7f9      	b.n	8012f74 <memset+0x4>

08012f80 <_free_r>:
 8012f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f82:	2900      	cmp	r1, #0
 8012f84:	d048      	beq.n	8013018 <_free_r+0x98>
 8012f86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f8a:	9001      	str	r0, [sp, #4]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	f1a1 0404 	sub.w	r4, r1, #4
 8012f92:	bfb8      	it	lt
 8012f94:	18e4      	addlt	r4, r4, r3
 8012f96:	f001 fbb3 	bl	8014700 <__malloc_lock>
 8012f9a:	4a20      	ldr	r2, [pc, #128]	; (801301c <_free_r+0x9c>)
 8012f9c:	9801      	ldr	r0, [sp, #4]
 8012f9e:	6813      	ldr	r3, [r2, #0]
 8012fa0:	4615      	mov	r5, r2
 8012fa2:	b933      	cbnz	r3, 8012fb2 <_free_r+0x32>
 8012fa4:	6063      	str	r3, [r4, #4]
 8012fa6:	6014      	str	r4, [r2, #0]
 8012fa8:	b003      	add	sp, #12
 8012faa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012fae:	f001 bbad 	b.w	801470c <__malloc_unlock>
 8012fb2:	42a3      	cmp	r3, r4
 8012fb4:	d90b      	bls.n	8012fce <_free_r+0x4e>
 8012fb6:	6821      	ldr	r1, [r4, #0]
 8012fb8:	1862      	adds	r2, r4, r1
 8012fba:	4293      	cmp	r3, r2
 8012fbc:	bf04      	itt	eq
 8012fbe:	681a      	ldreq	r2, [r3, #0]
 8012fc0:	685b      	ldreq	r3, [r3, #4]
 8012fc2:	6063      	str	r3, [r4, #4]
 8012fc4:	bf04      	itt	eq
 8012fc6:	1852      	addeq	r2, r2, r1
 8012fc8:	6022      	streq	r2, [r4, #0]
 8012fca:	602c      	str	r4, [r5, #0]
 8012fcc:	e7ec      	b.n	8012fa8 <_free_r+0x28>
 8012fce:	461a      	mov	r2, r3
 8012fd0:	685b      	ldr	r3, [r3, #4]
 8012fd2:	b10b      	cbz	r3, 8012fd8 <_free_r+0x58>
 8012fd4:	42a3      	cmp	r3, r4
 8012fd6:	d9fa      	bls.n	8012fce <_free_r+0x4e>
 8012fd8:	6811      	ldr	r1, [r2, #0]
 8012fda:	1855      	adds	r5, r2, r1
 8012fdc:	42a5      	cmp	r5, r4
 8012fde:	d10b      	bne.n	8012ff8 <_free_r+0x78>
 8012fe0:	6824      	ldr	r4, [r4, #0]
 8012fe2:	4421      	add	r1, r4
 8012fe4:	1854      	adds	r4, r2, r1
 8012fe6:	42a3      	cmp	r3, r4
 8012fe8:	6011      	str	r1, [r2, #0]
 8012fea:	d1dd      	bne.n	8012fa8 <_free_r+0x28>
 8012fec:	681c      	ldr	r4, [r3, #0]
 8012fee:	685b      	ldr	r3, [r3, #4]
 8012ff0:	6053      	str	r3, [r2, #4]
 8012ff2:	4421      	add	r1, r4
 8012ff4:	6011      	str	r1, [r2, #0]
 8012ff6:	e7d7      	b.n	8012fa8 <_free_r+0x28>
 8012ff8:	d902      	bls.n	8013000 <_free_r+0x80>
 8012ffa:	230c      	movs	r3, #12
 8012ffc:	6003      	str	r3, [r0, #0]
 8012ffe:	e7d3      	b.n	8012fa8 <_free_r+0x28>
 8013000:	6825      	ldr	r5, [r4, #0]
 8013002:	1961      	adds	r1, r4, r5
 8013004:	428b      	cmp	r3, r1
 8013006:	bf04      	itt	eq
 8013008:	6819      	ldreq	r1, [r3, #0]
 801300a:	685b      	ldreq	r3, [r3, #4]
 801300c:	6063      	str	r3, [r4, #4]
 801300e:	bf04      	itt	eq
 8013010:	1949      	addeq	r1, r1, r5
 8013012:	6021      	streq	r1, [r4, #0]
 8013014:	6054      	str	r4, [r2, #4]
 8013016:	e7c7      	b.n	8012fa8 <_free_r+0x28>
 8013018:	b003      	add	sp, #12
 801301a:	bd30      	pop	{r4, r5, pc}
 801301c:	200009f8 	.word	0x200009f8

08013020 <_malloc_r>:
 8013020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013022:	1ccd      	adds	r5, r1, #3
 8013024:	f025 0503 	bic.w	r5, r5, #3
 8013028:	3508      	adds	r5, #8
 801302a:	2d0c      	cmp	r5, #12
 801302c:	bf38      	it	cc
 801302e:	250c      	movcc	r5, #12
 8013030:	2d00      	cmp	r5, #0
 8013032:	4606      	mov	r6, r0
 8013034:	db01      	blt.n	801303a <_malloc_r+0x1a>
 8013036:	42a9      	cmp	r1, r5
 8013038:	d903      	bls.n	8013042 <_malloc_r+0x22>
 801303a:	230c      	movs	r3, #12
 801303c:	6033      	str	r3, [r6, #0]
 801303e:	2000      	movs	r0, #0
 8013040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013042:	f001 fb5d 	bl	8014700 <__malloc_lock>
 8013046:	4921      	ldr	r1, [pc, #132]	; (80130cc <_malloc_r+0xac>)
 8013048:	680a      	ldr	r2, [r1, #0]
 801304a:	4614      	mov	r4, r2
 801304c:	b99c      	cbnz	r4, 8013076 <_malloc_r+0x56>
 801304e:	4f20      	ldr	r7, [pc, #128]	; (80130d0 <_malloc_r+0xb0>)
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	b923      	cbnz	r3, 801305e <_malloc_r+0x3e>
 8013054:	4621      	mov	r1, r4
 8013056:	4630      	mov	r0, r6
 8013058:	f000 fca6 	bl	80139a8 <_sbrk_r>
 801305c:	6038      	str	r0, [r7, #0]
 801305e:	4629      	mov	r1, r5
 8013060:	4630      	mov	r0, r6
 8013062:	f000 fca1 	bl	80139a8 <_sbrk_r>
 8013066:	1c43      	adds	r3, r0, #1
 8013068:	d123      	bne.n	80130b2 <_malloc_r+0x92>
 801306a:	230c      	movs	r3, #12
 801306c:	6033      	str	r3, [r6, #0]
 801306e:	4630      	mov	r0, r6
 8013070:	f001 fb4c 	bl	801470c <__malloc_unlock>
 8013074:	e7e3      	b.n	801303e <_malloc_r+0x1e>
 8013076:	6823      	ldr	r3, [r4, #0]
 8013078:	1b5b      	subs	r3, r3, r5
 801307a:	d417      	bmi.n	80130ac <_malloc_r+0x8c>
 801307c:	2b0b      	cmp	r3, #11
 801307e:	d903      	bls.n	8013088 <_malloc_r+0x68>
 8013080:	6023      	str	r3, [r4, #0]
 8013082:	441c      	add	r4, r3
 8013084:	6025      	str	r5, [r4, #0]
 8013086:	e004      	b.n	8013092 <_malloc_r+0x72>
 8013088:	6863      	ldr	r3, [r4, #4]
 801308a:	42a2      	cmp	r2, r4
 801308c:	bf0c      	ite	eq
 801308e:	600b      	streq	r3, [r1, #0]
 8013090:	6053      	strne	r3, [r2, #4]
 8013092:	4630      	mov	r0, r6
 8013094:	f001 fb3a 	bl	801470c <__malloc_unlock>
 8013098:	f104 000b 	add.w	r0, r4, #11
 801309c:	1d23      	adds	r3, r4, #4
 801309e:	f020 0007 	bic.w	r0, r0, #7
 80130a2:	1ac2      	subs	r2, r0, r3
 80130a4:	d0cc      	beq.n	8013040 <_malloc_r+0x20>
 80130a6:	1a1b      	subs	r3, r3, r0
 80130a8:	50a3      	str	r3, [r4, r2]
 80130aa:	e7c9      	b.n	8013040 <_malloc_r+0x20>
 80130ac:	4622      	mov	r2, r4
 80130ae:	6864      	ldr	r4, [r4, #4]
 80130b0:	e7cc      	b.n	801304c <_malloc_r+0x2c>
 80130b2:	1cc4      	adds	r4, r0, #3
 80130b4:	f024 0403 	bic.w	r4, r4, #3
 80130b8:	42a0      	cmp	r0, r4
 80130ba:	d0e3      	beq.n	8013084 <_malloc_r+0x64>
 80130bc:	1a21      	subs	r1, r4, r0
 80130be:	4630      	mov	r0, r6
 80130c0:	f000 fc72 	bl	80139a8 <_sbrk_r>
 80130c4:	3001      	adds	r0, #1
 80130c6:	d1dd      	bne.n	8013084 <_malloc_r+0x64>
 80130c8:	e7cf      	b.n	801306a <_malloc_r+0x4a>
 80130ca:	bf00      	nop
 80130cc:	200009f8 	.word	0x200009f8
 80130d0:	200009fc 	.word	0x200009fc

080130d4 <__cvt>:
 80130d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80130d8:	ec55 4b10 	vmov	r4, r5, d0
 80130dc:	2d00      	cmp	r5, #0
 80130de:	460e      	mov	r6, r1
 80130e0:	4619      	mov	r1, r3
 80130e2:	462b      	mov	r3, r5
 80130e4:	bfbb      	ittet	lt
 80130e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80130ea:	461d      	movlt	r5, r3
 80130ec:	2300      	movge	r3, #0
 80130ee:	232d      	movlt	r3, #45	; 0x2d
 80130f0:	700b      	strb	r3, [r1, #0]
 80130f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80130f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80130f8:	4691      	mov	r9, r2
 80130fa:	f023 0820 	bic.w	r8, r3, #32
 80130fe:	bfbc      	itt	lt
 8013100:	4622      	movlt	r2, r4
 8013102:	4614      	movlt	r4, r2
 8013104:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013108:	d005      	beq.n	8013116 <__cvt+0x42>
 801310a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801310e:	d100      	bne.n	8013112 <__cvt+0x3e>
 8013110:	3601      	adds	r6, #1
 8013112:	2102      	movs	r1, #2
 8013114:	e000      	b.n	8013118 <__cvt+0x44>
 8013116:	2103      	movs	r1, #3
 8013118:	ab03      	add	r3, sp, #12
 801311a:	9301      	str	r3, [sp, #4]
 801311c:	ab02      	add	r3, sp, #8
 801311e:	9300      	str	r3, [sp, #0]
 8013120:	ec45 4b10 	vmov	d0, r4, r5
 8013124:	4653      	mov	r3, sl
 8013126:	4632      	mov	r2, r6
 8013128:	f000 fcfa 	bl	8013b20 <_dtoa_r>
 801312c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013130:	4607      	mov	r7, r0
 8013132:	d102      	bne.n	801313a <__cvt+0x66>
 8013134:	f019 0f01 	tst.w	r9, #1
 8013138:	d022      	beq.n	8013180 <__cvt+0xac>
 801313a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801313e:	eb07 0906 	add.w	r9, r7, r6
 8013142:	d110      	bne.n	8013166 <__cvt+0x92>
 8013144:	783b      	ldrb	r3, [r7, #0]
 8013146:	2b30      	cmp	r3, #48	; 0x30
 8013148:	d10a      	bne.n	8013160 <__cvt+0x8c>
 801314a:	2200      	movs	r2, #0
 801314c:	2300      	movs	r3, #0
 801314e:	4620      	mov	r0, r4
 8013150:	4629      	mov	r1, r5
 8013152:	f7ed fcd9 	bl	8000b08 <__aeabi_dcmpeq>
 8013156:	b918      	cbnz	r0, 8013160 <__cvt+0x8c>
 8013158:	f1c6 0601 	rsb	r6, r6, #1
 801315c:	f8ca 6000 	str.w	r6, [sl]
 8013160:	f8da 3000 	ldr.w	r3, [sl]
 8013164:	4499      	add	r9, r3
 8013166:	2200      	movs	r2, #0
 8013168:	2300      	movs	r3, #0
 801316a:	4620      	mov	r0, r4
 801316c:	4629      	mov	r1, r5
 801316e:	f7ed fccb 	bl	8000b08 <__aeabi_dcmpeq>
 8013172:	b108      	cbz	r0, 8013178 <__cvt+0xa4>
 8013174:	f8cd 900c 	str.w	r9, [sp, #12]
 8013178:	2230      	movs	r2, #48	; 0x30
 801317a:	9b03      	ldr	r3, [sp, #12]
 801317c:	454b      	cmp	r3, r9
 801317e:	d307      	bcc.n	8013190 <__cvt+0xbc>
 8013180:	9b03      	ldr	r3, [sp, #12]
 8013182:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013184:	1bdb      	subs	r3, r3, r7
 8013186:	4638      	mov	r0, r7
 8013188:	6013      	str	r3, [r2, #0]
 801318a:	b004      	add	sp, #16
 801318c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013190:	1c59      	adds	r1, r3, #1
 8013192:	9103      	str	r1, [sp, #12]
 8013194:	701a      	strb	r2, [r3, #0]
 8013196:	e7f0      	b.n	801317a <__cvt+0xa6>

08013198 <__exponent>:
 8013198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801319a:	4603      	mov	r3, r0
 801319c:	2900      	cmp	r1, #0
 801319e:	bfb8      	it	lt
 80131a0:	4249      	neglt	r1, r1
 80131a2:	f803 2b02 	strb.w	r2, [r3], #2
 80131a6:	bfb4      	ite	lt
 80131a8:	222d      	movlt	r2, #45	; 0x2d
 80131aa:	222b      	movge	r2, #43	; 0x2b
 80131ac:	2909      	cmp	r1, #9
 80131ae:	7042      	strb	r2, [r0, #1]
 80131b0:	dd2a      	ble.n	8013208 <__exponent+0x70>
 80131b2:	f10d 0407 	add.w	r4, sp, #7
 80131b6:	46a4      	mov	ip, r4
 80131b8:	270a      	movs	r7, #10
 80131ba:	46a6      	mov	lr, r4
 80131bc:	460a      	mov	r2, r1
 80131be:	fb91 f6f7 	sdiv	r6, r1, r7
 80131c2:	fb07 1516 	mls	r5, r7, r6, r1
 80131c6:	3530      	adds	r5, #48	; 0x30
 80131c8:	2a63      	cmp	r2, #99	; 0x63
 80131ca:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80131ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80131d2:	4631      	mov	r1, r6
 80131d4:	dcf1      	bgt.n	80131ba <__exponent+0x22>
 80131d6:	3130      	adds	r1, #48	; 0x30
 80131d8:	f1ae 0502 	sub.w	r5, lr, #2
 80131dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80131e0:	1c44      	adds	r4, r0, #1
 80131e2:	4629      	mov	r1, r5
 80131e4:	4561      	cmp	r1, ip
 80131e6:	d30a      	bcc.n	80131fe <__exponent+0x66>
 80131e8:	f10d 0209 	add.w	r2, sp, #9
 80131ec:	eba2 020e 	sub.w	r2, r2, lr
 80131f0:	4565      	cmp	r5, ip
 80131f2:	bf88      	it	hi
 80131f4:	2200      	movhi	r2, #0
 80131f6:	4413      	add	r3, r2
 80131f8:	1a18      	subs	r0, r3, r0
 80131fa:	b003      	add	sp, #12
 80131fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013202:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013206:	e7ed      	b.n	80131e4 <__exponent+0x4c>
 8013208:	2330      	movs	r3, #48	; 0x30
 801320a:	3130      	adds	r1, #48	; 0x30
 801320c:	7083      	strb	r3, [r0, #2]
 801320e:	70c1      	strb	r1, [r0, #3]
 8013210:	1d03      	adds	r3, r0, #4
 8013212:	e7f1      	b.n	80131f8 <__exponent+0x60>

08013214 <_printf_float>:
 8013214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013218:	ed2d 8b02 	vpush	{d8}
 801321c:	b08d      	sub	sp, #52	; 0x34
 801321e:	460c      	mov	r4, r1
 8013220:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013224:	4616      	mov	r6, r2
 8013226:	461f      	mov	r7, r3
 8013228:	4605      	mov	r5, r0
 801322a:	f001 fa65 	bl	80146f8 <_localeconv_r>
 801322e:	f8d0 a000 	ldr.w	sl, [r0]
 8013232:	4650      	mov	r0, sl
 8013234:	f7ec ffec 	bl	8000210 <strlen>
 8013238:	2300      	movs	r3, #0
 801323a:	930a      	str	r3, [sp, #40]	; 0x28
 801323c:	6823      	ldr	r3, [r4, #0]
 801323e:	9305      	str	r3, [sp, #20]
 8013240:	f8d8 3000 	ldr.w	r3, [r8]
 8013244:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013248:	3307      	adds	r3, #7
 801324a:	f023 0307 	bic.w	r3, r3, #7
 801324e:	f103 0208 	add.w	r2, r3, #8
 8013252:	f8c8 2000 	str.w	r2, [r8]
 8013256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801325a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801325e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013262:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013266:	9307      	str	r3, [sp, #28]
 8013268:	f8cd 8018 	str.w	r8, [sp, #24]
 801326c:	ee08 0a10 	vmov	s16, r0
 8013270:	4b9f      	ldr	r3, [pc, #636]	; (80134f0 <_printf_float+0x2dc>)
 8013272:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801327a:	f7ed fc77 	bl	8000b6c <__aeabi_dcmpun>
 801327e:	bb88      	cbnz	r0, 80132e4 <_printf_float+0xd0>
 8013280:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013284:	4b9a      	ldr	r3, [pc, #616]	; (80134f0 <_printf_float+0x2dc>)
 8013286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801328a:	f7ed fc51 	bl	8000b30 <__aeabi_dcmple>
 801328e:	bb48      	cbnz	r0, 80132e4 <_printf_float+0xd0>
 8013290:	2200      	movs	r2, #0
 8013292:	2300      	movs	r3, #0
 8013294:	4640      	mov	r0, r8
 8013296:	4649      	mov	r1, r9
 8013298:	f7ed fc40 	bl	8000b1c <__aeabi_dcmplt>
 801329c:	b110      	cbz	r0, 80132a4 <_printf_float+0x90>
 801329e:	232d      	movs	r3, #45	; 0x2d
 80132a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80132a4:	4b93      	ldr	r3, [pc, #588]	; (80134f4 <_printf_float+0x2e0>)
 80132a6:	4894      	ldr	r0, [pc, #592]	; (80134f8 <_printf_float+0x2e4>)
 80132a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80132ac:	bf94      	ite	ls
 80132ae:	4698      	movls	r8, r3
 80132b0:	4680      	movhi	r8, r0
 80132b2:	2303      	movs	r3, #3
 80132b4:	6123      	str	r3, [r4, #16]
 80132b6:	9b05      	ldr	r3, [sp, #20]
 80132b8:	f023 0204 	bic.w	r2, r3, #4
 80132bc:	6022      	str	r2, [r4, #0]
 80132be:	f04f 0900 	mov.w	r9, #0
 80132c2:	9700      	str	r7, [sp, #0]
 80132c4:	4633      	mov	r3, r6
 80132c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80132c8:	4621      	mov	r1, r4
 80132ca:	4628      	mov	r0, r5
 80132cc:	f000 f9d8 	bl	8013680 <_printf_common>
 80132d0:	3001      	adds	r0, #1
 80132d2:	f040 8090 	bne.w	80133f6 <_printf_float+0x1e2>
 80132d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80132da:	b00d      	add	sp, #52	; 0x34
 80132dc:	ecbd 8b02 	vpop	{d8}
 80132e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132e4:	4642      	mov	r2, r8
 80132e6:	464b      	mov	r3, r9
 80132e8:	4640      	mov	r0, r8
 80132ea:	4649      	mov	r1, r9
 80132ec:	f7ed fc3e 	bl	8000b6c <__aeabi_dcmpun>
 80132f0:	b140      	cbz	r0, 8013304 <_printf_float+0xf0>
 80132f2:	464b      	mov	r3, r9
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	bfbc      	itt	lt
 80132f8:	232d      	movlt	r3, #45	; 0x2d
 80132fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80132fe:	487f      	ldr	r0, [pc, #508]	; (80134fc <_printf_float+0x2e8>)
 8013300:	4b7f      	ldr	r3, [pc, #508]	; (8013500 <_printf_float+0x2ec>)
 8013302:	e7d1      	b.n	80132a8 <_printf_float+0x94>
 8013304:	6863      	ldr	r3, [r4, #4]
 8013306:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801330a:	9206      	str	r2, [sp, #24]
 801330c:	1c5a      	adds	r2, r3, #1
 801330e:	d13f      	bne.n	8013390 <_printf_float+0x17c>
 8013310:	2306      	movs	r3, #6
 8013312:	6063      	str	r3, [r4, #4]
 8013314:	9b05      	ldr	r3, [sp, #20]
 8013316:	6861      	ldr	r1, [r4, #4]
 8013318:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801331c:	2300      	movs	r3, #0
 801331e:	9303      	str	r3, [sp, #12]
 8013320:	ab0a      	add	r3, sp, #40	; 0x28
 8013322:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013326:	ab09      	add	r3, sp, #36	; 0x24
 8013328:	ec49 8b10 	vmov	d0, r8, r9
 801332c:	9300      	str	r3, [sp, #0]
 801332e:	6022      	str	r2, [r4, #0]
 8013330:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013334:	4628      	mov	r0, r5
 8013336:	f7ff fecd 	bl	80130d4 <__cvt>
 801333a:	9b06      	ldr	r3, [sp, #24]
 801333c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801333e:	2b47      	cmp	r3, #71	; 0x47
 8013340:	4680      	mov	r8, r0
 8013342:	d108      	bne.n	8013356 <_printf_float+0x142>
 8013344:	1cc8      	adds	r0, r1, #3
 8013346:	db02      	blt.n	801334e <_printf_float+0x13a>
 8013348:	6863      	ldr	r3, [r4, #4]
 801334a:	4299      	cmp	r1, r3
 801334c:	dd41      	ble.n	80133d2 <_printf_float+0x1be>
 801334e:	f1ab 0b02 	sub.w	fp, fp, #2
 8013352:	fa5f fb8b 	uxtb.w	fp, fp
 8013356:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801335a:	d820      	bhi.n	801339e <_printf_float+0x18a>
 801335c:	3901      	subs	r1, #1
 801335e:	465a      	mov	r2, fp
 8013360:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013364:	9109      	str	r1, [sp, #36]	; 0x24
 8013366:	f7ff ff17 	bl	8013198 <__exponent>
 801336a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801336c:	1813      	adds	r3, r2, r0
 801336e:	2a01      	cmp	r2, #1
 8013370:	4681      	mov	r9, r0
 8013372:	6123      	str	r3, [r4, #16]
 8013374:	dc02      	bgt.n	801337c <_printf_float+0x168>
 8013376:	6822      	ldr	r2, [r4, #0]
 8013378:	07d2      	lsls	r2, r2, #31
 801337a:	d501      	bpl.n	8013380 <_printf_float+0x16c>
 801337c:	3301      	adds	r3, #1
 801337e:	6123      	str	r3, [r4, #16]
 8013380:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013384:	2b00      	cmp	r3, #0
 8013386:	d09c      	beq.n	80132c2 <_printf_float+0xae>
 8013388:	232d      	movs	r3, #45	; 0x2d
 801338a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801338e:	e798      	b.n	80132c2 <_printf_float+0xae>
 8013390:	9a06      	ldr	r2, [sp, #24]
 8013392:	2a47      	cmp	r2, #71	; 0x47
 8013394:	d1be      	bne.n	8013314 <_printf_float+0x100>
 8013396:	2b00      	cmp	r3, #0
 8013398:	d1bc      	bne.n	8013314 <_printf_float+0x100>
 801339a:	2301      	movs	r3, #1
 801339c:	e7b9      	b.n	8013312 <_printf_float+0xfe>
 801339e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80133a2:	d118      	bne.n	80133d6 <_printf_float+0x1c2>
 80133a4:	2900      	cmp	r1, #0
 80133a6:	6863      	ldr	r3, [r4, #4]
 80133a8:	dd0b      	ble.n	80133c2 <_printf_float+0x1ae>
 80133aa:	6121      	str	r1, [r4, #16]
 80133ac:	b913      	cbnz	r3, 80133b4 <_printf_float+0x1a0>
 80133ae:	6822      	ldr	r2, [r4, #0]
 80133b0:	07d0      	lsls	r0, r2, #31
 80133b2:	d502      	bpl.n	80133ba <_printf_float+0x1a6>
 80133b4:	3301      	adds	r3, #1
 80133b6:	440b      	add	r3, r1
 80133b8:	6123      	str	r3, [r4, #16]
 80133ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80133bc:	f04f 0900 	mov.w	r9, #0
 80133c0:	e7de      	b.n	8013380 <_printf_float+0x16c>
 80133c2:	b913      	cbnz	r3, 80133ca <_printf_float+0x1b6>
 80133c4:	6822      	ldr	r2, [r4, #0]
 80133c6:	07d2      	lsls	r2, r2, #31
 80133c8:	d501      	bpl.n	80133ce <_printf_float+0x1ba>
 80133ca:	3302      	adds	r3, #2
 80133cc:	e7f4      	b.n	80133b8 <_printf_float+0x1a4>
 80133ce:	2301      	movs	r3, #1
 80133d0:	e7f2      	b.n	80133b8 <_printf_float+0x1a4>
 80133d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80133d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133d8:	4299      	cmp	r1, r3
 80133da:	db05      	blt.n	80133e8 <_printf_float+0x1d4>
 80133dc:	6823      	ldr	r3, [r4, #0]
 80133de:	6121      	str	r1, [r4, #16]
 80133e0:	07d8      	lsls	r0, r3, #31
 80133e2:	d5ea      	bpl.n	80133ba <_printf_float+0x1a6>
 80133e4:	1c4b      	adds	r3, r1, #1
 80133e6:	e7e7      	b.n	80133b8 <_printf_float+0x1a4>
 80133e8:	2900      	cmp	r1, #0
 80133ea:	bfd4      	ite	le
 80133ec:	f1c1 0202 	rsble	r2, r1, #2
 80133f0:	2201      	movgt	r2, #1
 80133f2:	4413      	add	r3, r2
 80133f4:	e7e0      	b.n	80133b8 <_printf_float+0x1a4>
 80133f6:	6823      	ldr	r3, [r4, #0]
 80133f8:	055a      	lsls	r2, r3, #21
 80133fa:	d407      	bmi.n	801340c <_printf_float+0x1f8>
 80133fc:	6923      	ldr	r3, [r4, #16]
 80133fe:	4642      	mov	r2, r8
 8013400:	4631      	mov	r1, r6
 8013402:	4628      	mov	r0, r5
 8013404:	47b8      	blx	r7
 8013406:	3001      	adds	r0, #1
 8013408:	d12c      	bne.n	8013464 <_printf_float+0x250>
 801340a:	e764      	b.n	80132d6 <_printf_float+0xc2>
 801340c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013410:	f240 80e0 	bls.w	80135d4 <_printf_float+0x3c0>
 8013414:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013418:	2200      	movs	r2, #0
 801341a:	2300      	movs	r3, #0
 801341c:	f7ed fb74 	bl	8000b08 <__aeabi_dcmpeq>
 8013420:	2800      	cmp	r0, #0
 8013422:	d034      	beq.n	801348e <_printf_float+0x27a>
 8013424:	4a37      	ldr	r2, [pc, #220]	; (8013504 <_printf_float+0x2f0>)
 8013426:	2301      	movs	r3, #1
 8013428:	4631      	mov	r1, r6
 801342a:	4628      	mov	r0, r5
 801342c:	47b8      	blx	r7
 801342e:	3001      	adds	r0, #1
 8013430:	f43f af51 	beq.w	80132d6 <_printf_float+0xc2>
 8013434:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013438:	429a      	cmp	r2, r3
 801343a:	db02      	blt.n	8013442 <_printf_float+0x22e>
 801343c:	6823      	ldr	r3, [r4, #0]
 801343e:	07d8      	lsls	r0, r3, #31
 8013440:	d510      	bpl.n	8013464 <_printf_float+0x250>
 8013442:	ee18 3a10 	vmov	r3, s16
 8013446:	4652      	mov	r2, sl
 8013448:	4631      	mov	r1, r6
 801344a:	4628      	mov	r0, r5
 801344c:	47b8      	blx	r7
 801344e:	3001      	adds	r0, #1
 8013450:	f43f af41 	beq.w	80132d6 <_printf_float+0xc2>
 8013454:	f04f 0800 	mov.w	r8, #0
 8013458:	f104 091a 	add.w	r9, r4, #26
 801345c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801345e:	3b01      	subs	r3, #1
 8013460:	4543      	cmp	r3, r8
 8013462:	dc09      	bgt.n	8013478 <_printf_float+0x264>
 8013464:	6823      	ldr	r3, [r4, #0]
 8013466:	079b      	lsls	r3, r3, #30
 8013468:	f100 8105 	bmi.w	8013676 <_printf_float+0x462>
 801346c:	68e0      	ldr	r0, [r4, #12]
 801346e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013470:	4298      	cmp	r0, r3
 8013472:	bfb8      	it	lt
 8013474:	4618      	movlt	r0, r3
 8013476:	e730      	b.n	80132da <_printf_float+0xc6>
 8013478:	2301      	movs	r3, #1
 801347a:	464a      	mov	r2, r9
 801347c:	4631      	mov	r1, r6
 801347e:	4628      	mov	r0, r5
 8013480:	47b8      	blx	r7
 8013482:	3001      	adds	r0, #1
 8013484:	f43f af27 	beq.w	80132d6 <_printf_float+0xc2>
 8013488:	f108 0801 	add.w	r8, r8, #1
 801348c:	e7e6      	b.n	801345c <_printf_float+0x248>
 801348e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013490:	2b00      	cmp	r3, #0
 8013492:	dc39      	bgt.n	8013508 <_printf_float+0x2f4>
 8013494:	4a1b      	ldr	r2, [pc, #108]	; (8013504 <_printf_float+0x2f0>)
 8013496:	2301      	movs	r3, #1
 8013498:	4631      	mov	r1, r6
 801349a:	4628      	mov	r0, r5
 801349c:	47b8      	blx	r7
 801349e:	3001      	adds	r0, #1
 80134a0:	f43f af19 	beq.w	80132d6 <_printf_float+0xc2>
 80134a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80134a8:	4313      	orrs	r3, r2
 80134aa:	d102      	bne.n	80134b2 <_printf_float+0x29e>
 80134ac:	6823      	ldr	r3, [r4, #0]
 80134ae:	07d9      	lsls	r1, r3, #31
 80134b0:	d5d8      	bpl.n	8013464 <_printf_float+0x250>
 80134b2:	ee18 3a10 	vmov	r3, s16
 80134b6:	4652      	mov	r2, sl
 80134b8:	4631      	mov	r1, r6
 80134ba:	4628      	mov	r0, r5
 80134bc:	47b8      	blx	r7
 80134be:	3001      	adds	r0, #1
 80134c0:	f43f af09 	beq.w	80132d6 <_printf_float+0xc2>
 80134c4:	f04f 0900 	mov.w	r9, #0
 80134c8:	f104 0a1a 	add.w	sl, r4, #26
 80134cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134ce:	425b      	negs	r3, r3
 80134d0:	454b      	cmp	r3, r9
 80134d2:	dc01      	bgt.n	80134d8 <_printf_float+0x2c4>
 80134d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134d6:	e792      	b.n	80133fe <_printf_float+0x1ea>
 80134d8:	2301      	movs	r3, #1
 80134da:	4652      	mov	r2, sl
 80134dc:	4631      	mov	r1, r6
 80134de:	4628      	mov	r0, r5
 80134e0:	47b8      	blx	r7
 80134e2:	3001      	adds	r0, #1
 80134e4:	f43f aef7 	beq.w	80132d6 <_printf_float+0xc2>
 80134e8:	f109 0901 	add.w	r9, r9, #1
 80134ec:	e7ee      	b.n	80134cc <_printf_float+0x2b8>
 80134ee:	bf00      	nop
 80134f0:	7fefffff 	.word	0x7fefffff
 80134f4:	080194a0 	.word	0x080194a0
 80134f8:	080194a4 	.word	0x080194a4
 80134fc:	080194ac 	.word	0x080194ac
 8013500:	080194a8 	.word	0x080194a8
 8013504:	080194b0 	.word	0x080194b0
 8013508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801350a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801350c:	429a      	cmp	r2, r3
 801350e:	bfa8      	it	ge
 8013510:	461a      	movge	r2, r3
 8013512:	2a00      	cmp	r2, #0
 8013514:	4691      	mov	r9, r2
 8013516:	dc37      	bgt.n	8013588 <_printf_float+0x374>
 8013518:	f04f 0b00 	mov.w	fp, #0
 801351c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013520:	f104 021a 	add.w	r2, r4, #26
 8013524:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013526:	9305      	str	r3, [sp, #20]
 8013528:	eba3 0309 	sub.w	r3, r3, r9
 801352c:	455b      	cmp	r3, fp
 801352e:	dc33      	bgt.n	8013598 <_printf_float+0x384>
 8013530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013534:	429a      	cmp	r2, r3
 8013536:	db3b      	blt.n	80135b0 <_printf_float+0x39c>
 8013538:	6823      	ldr	r3, [r4, #0]
 801353a:	07da      	lsls	r2, r3, #31
 801353c:	d438      	bmi.n	80135b0 <_printf_float+0x39c>
 801353e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013540:	9b05      	ldr	r3, [sp, #20]
 8013542:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013544:	1ad3      	subs	r3, r2, r3
 8013546:	eba2 0901 	sub.w	r9, r2, r1
 801354a:	4599      	cmp	r9, r3
 801354c:	bfa8      	it	ge
 801354e:	4699      	movge	r9, r3
 8013550:	f1b9 0f00 	cmp.w	r9, #0
 8013554:	dc35      	bgt.n	80135c2 <_printf_float+0x3ae>
 8013556:	f04f 0800 	mov.w	r8, #0
 801355a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801355e:	f104 0a1a 	add.w	sl, r4, #26
 8013562:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013566:	1a9b      	subs	r3, r3, r2
 8013568:	eba3 0309 	sub.w	r3, r3, r9
 801356c:	4543      	cmp	r3, r8
 801356e:	f77f af79 	ble.w	8013464 <_printf_float+0x250>
 8013572:	2301      	movs	r3, #1
 8013574:	4652      	mov	r2, sl
 8013576:	4631      	mov	r1, r6
 8013578:	4628      	mov	r0, r5
 801357a:	47b8      	blx	r7
 801357c:	3001      	adds	r0, #1
 801357e:	f43f aeaa 	beq.w	80132d6 <_printf_float+0xc2>
 8013582:	f108 0801 	add.w	r8, r8, #1
 8013586:	e7ec      	b.n	8013562 <_printf_float+0x34e>
 8013588:	4613      	mov	r3, r2
 801358a:	4631      	mov	r1, r6
 801358c:	4642      	mov	r2, r8
 801358e:	4628      	mov	r0, r5
 8013590:	47b8      	blx	r7
 8013592:	3001      	adds	r0, #1
 8013594:	d1c0      	bne.n	8013518 <_printf_float+0x304>
 8013596:	e69e      	b.n	80132d6 <_printf_float+0xc2>
 8013598:	2301      	movs	r3, #1
 801359a:	4631      	mov	r1, r6
 801359c:	4628      	mov	r0, r5
 801359e:	9205      	str	r2, [sp, #20]
 80135a0:	47b8      	blx	r7
 80135a2:	3001      	adds	r0, #1
 80135a4:	f43f ae97 	beq.w	80132d6 <_printf_float+0xc2>
 80135a8:	9a05      	ldr	r2, [sp, #20]
 80135aa:	f10b 0b01 	add.w	fp, fp, #1
 80135ae:	e7b9      	b.n	8013524 <_printf_float+0x310>
 80135b0:	ee18 3a10 	vmov	r3, s16
 80135b4:	4652      	mov	r2, sl
 80135b6:	4631      	mov	r1, r6
 80135b8:	4628      	mov	r0, r5
 80135ba:	47b8      	blx	r7
 80135bc:	3001      	adds	r0, #1
 80135be:	d1be      	bne.n	801353e <_printf_float+0x32a>
 80135c0:	e689      	b.n	80132d6 <_printf_float+0xc2>
 80135c2:	9a05      	ldr	r2, [sp, #20]
 80135c4:	464b      	mov	r3, r9
 80135c6:	4442      	add	r2, r8
 80135c8:	4631      	mov	r1, r6
 80135ca:	4628      	mov	r0, r5
 80135cc:	47b8      	blx	r7
 80135ce:	3001      	adds	r0, #1
 80135d0:	d1c1      	bne.n	8013556 <_printf_float+0x342>
 80135d2:	e680      	b.n	80132d6 <_printf_float+0xc2>
 80135d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80135d6:	2a01      	cmp	r2, #1
 80135d8:	dc01      	bgt.n	80135de <_printf_float+0x3ca>
 80135da:	07db      	lsls	r3, r3, #31
 80135dc:	d538      	bpl.n	8013650 <_printf_float+0x43c>
 80135de:	2301      	movs	r3, #1
 80135e0:	4642      	mov	r2, r8
 80135e2:	4631      	mov	r1, r6
 80135e4:	4628      	mov	r0, r5
 80135e6:	47b8      	blx	r7
 80135e8:	3001      	adds	r0, #1
 80135ea:	f43f ae74 	beq.w	80132d6 <_printf_float+0xc2>
 80135ee:	ee18 3a10 	vmov	r3, s16
 80135f2:	4652      	mov	r2, sl
 80135f4:	4631      	mov	r1, r6
 80135f6:	4628      	mov	r0, r5
 80135f8:	47b8      	blx	r7
 80135fa:	3001      	adds	r0, #1
 80135fc:	f43f ae6b 	beq.w	80132d6 <_printf_float+0xc2>
 8013600:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013604:	2200      	movs	r2, #0
 8013606:	2300      	movs	r3, #0
 8013608:	f7ed fa7e 	bl	8000b08 <__aeabi_dcmpeq>
 801360c:	b9d8      	cbnz	r0, 8013646 <_printf_float+0x432>
 801360e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013610:	f108 0201 	add.w	r2, r8, #1
 8013614:	3b01      	subs	r3, #1
 8013616:	4631      	mov	r1, r6
 8013618:	4628      	mov	r0, r5
 801361a:	47b8      	blx	r7
 801361c:	3001      	adds	r0, #1
 801361e:	d10e      	bne.n	801363e <_printf_float+0x42a>
 8013620:	e659      	b.n	80132d6 <_printf_float+0xc2>
 8013622:	2301      	movs	r3, #1
 8013624:	4652      	mov	r2, sl
 8013626:	4631      	mov	r1, r6
 8013628:	4628      	mov	r0, r5
 801362a:	47b8      	blx	r7
 801362c:	3001      	adds	r0, #1
 801362e:	f43f ae52 	beq.w	80132d6 <_printf_float+0xc2>
 8013632:	f108 0801 	add.w	r8, r8, #1
 8013636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013638:	3b01      	subs	r3, #1
 801363a:	4543      	cmp	r3, r8
 801363c:	dcf1      	bgt.n	8013622 <_printf_float+0x40e>
 801363e:	464b      	mov	r3, r9
 8013640:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013644:	e6dc      	b.n	8013400 <_printf_float+0x1ec>
 8013646:	f04f 0800 	mov.w	r8, #0
 801364a:	f104 0a1a 	add.w	sl, r4, #26
 801364e:	e7f2      	b.n	8013636 <_printf_float+0x422>
 8013650:	2301      	movs	r3, #1
 8013652:	4642      	mov	r2, r8
 8013654:	e7df      	b.n	8013616 <_printf_float+0x402>
 8013656:	2301      	movs	r3, #1
 8013658:	464a      	mov	r2, r9
 801365a:	4631      	mov	r1, r6
 801365c:	4628      	mov	r0, r5
 801365e:	47b8      	blx	r7
 8013660:	3001      	adds	r0, #1
 8013662:	f43f ae38 	beq.w	80132d6 <_printf_float+0xc2>
 8013666:	f108 0801 	add.w	r8, r8, #1
 801366a:	68e3      	ldr	r3, [r4, #12]
 801366c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801366e:	1a5b      	subs	r3, r3, r1
 8013670:	4543      	cmp	r3, r8
 8013672:	dcf0      	bgt.n	8013656 <_printf_float+0x442>
 8013674:	e6fa      	b.n	801346c <_printf_float+0x258>
 8013676:	f04f 0800 	mov.w	r8, #0
 801367a:	f104 0919 	add.w	r9, r4, #25
 801367e:	e7f4      	b.n	801366a <_printf_float+0x456>

08013680 <_printf_common>:
 8013680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013684:	4616      	mov	r6, r2
 8013686:	4699      	mov	r9, r3
 8013688:	688a      	ldr	r2, [r1, #8]
 801368a:	690b      	ldr	r3, [r1, #16]
 801368c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013690:	4293      	cmp	r3, r2
 8013692:	bfb8      	it	lt
 8013694:	4613      	movlt	r3, r2
 8013696:	6033      	str	r3, [r6, #0]
 8013698:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801369c:	4607      	mov	r7, r0
 801369e:	460c      	mov	r4, r1
 80136a0:	b10a      	cbz	r2, 80136a6 <_printf_common+0x26>
 80136a2:	3301      	adds	r3, #1
 80136a4:	6033      	str	r3, [r6, #0]
 80136a6:	6823      	ldr	r3, [r4, #0]
 80136a8:	0699      	lsls	r1, r3, #26
 80136aa:	bf42      	ittt	mi
 80136ac:	6833      	ldrmi	r3, [r6, #0]
 80136ae:	3302      	addmi	r3, #2
 80136b0:	6033      	strmi	r3, [r6, #0]
 80136b2:	6825      	ldr	r5, [r4, #0]
 80136b4:	f015 0506 	ands.w	r5, r5, #6
 80136b8:	d106      	bne.n	80136c8 <_printf_common+0x48>
 80136ba:	f104 0a19 	add.w	sl, r4, #25
 80136be:	68e3      	ldr	r3, [r4, #12]
 80136c0:	6832      	ldr	r2, [r6, #0]
 80136c2:	1a9b      	subs	r3, r3, r2
 80136c4:	42ab      	cmp	r3, r5
 80136c6:	dc26      	bgt.n	8013716 <_printf_common+0x96>
 80136c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80136cc:	1e13      	subs	r3, r2, #0
 80136ce:	6822      	ldr	r2, [r4, #0]
 80136d0:	bf18      	it	ne
 80136d2:	2301      	movne	r3, #1
 80136d4:	0692      	lsls	r2, r2, #26
 80136d6:	d42b      	bmi.n	8013730 <_printf_common+0xb0>
 80136d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80136dc:	4649      	mov	r1, r9
 80136de:	4638      	mov	r0, r7
 80136e0:	47c0      	blx	r8
 80136e2:	3001      	adds	r0, #1
 80136e4:	d01e      	beq.n	8013724 <_printf_common+0xa4>
 80136e6:	6823      	ldr	r3, [r4, #0]
 80136e8:	68e5      	ldr	r5, [r4, #12]
 80136ea:	6832      	ldr	r2, [r6, #0]
 80136ec:	f003 0306 	and.w	r3, r3, #6
 80136f0:	2b04      	cmp	r3, #4
 80136f2:	bf08      	it	eq
 80136f4:	1aad      	subeq	r5, r5, r2
 80136f6:	68a3      	ldr	r3, [r4, #8]
 80136f8:	6922      	ldr	r2, [r4, #16]
 80136fa:	bf0c      	ite	eq
 80136fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013700:	2500      	movne	r5, #0
 8013702:	4293      	cmp	r3, r2
 8013704:	bfc4      	itt	gt
 8013706:	1a9b      	subgt	r3, r3, r2
 8013708:	18ed      	addgt	r5, r5, r3
 801370a:	2600      	movs	r6, #0
 801370c:	341a      	adds	r4, #26
 801370e:	42b5      	cmp	r5, r6
 8013710:	d11a      	bne.n	8013748 <_printf_common+0xc8>
 8013712:	2000      	movs	r0, #0
 8013714:	e008      	b.n	8013728 <_printf_common+0xa8>
 8013716:	2301      	movs	r3, #1
 8013718:	4652      	mov	r2, sl
 801371a:	4649      	mov	r1, r9
 801371c:	4638      	mov	r0, r7
 801371e:	47c0      	blx	r8
 8013720:	3001      	adds	r0, #1
 8013722:	d103      	bne.n	801372c <_printf_common+0xac>
 8013724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801372c:	3501      	adds	r5, #1
 801372e:	e7c6      	b.n	80136be <_printf_common+0x3e>
 8013730:	18e1      	adds	r1, r4, r3
 8013732:	1c5a      	adds	r2, r3, #1
 8013734:	2030      	movs	r0, #48	; 0x30
 8013736:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801373a:	4422      	add	r2, r4
 801373c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013740:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013744:	3302      	adds	r3, #2
 8013746:	e7c7      	b.n	80136d8 <_printf_common+0x58>
 8013748:	2301      	movs	r3, #1
 801374a:	4622      	mov	r2, r4
 801374c:	4649      	mov	r1, r9
 801374e:	4638      	mov	r0, r7
 8013750:	47c0      	blx	r8
 8013752:	3001      	adds	r0, #1
 8013754:	d0e6      	beq.n	8013724 <_printf_common+0xa4>
 8013756:	3601      	adds	r6, #1
 8013758:	e7d9      	b.n	801370e <_printf_common+0x8e>
	...

0801375c <_printf_i>:
 801375c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013760:	460c      	mov	r4, r1
 8013762:	4691      	mov	r9, r2
 8013764:	7e27      	ldrb	r7, [r4, #24]
 8013766:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013768:	2f78      	cmp	r7, #120	; 0x78
 801376a:	4680      	mov	r8, r0
 801376c:	469a      	mov	sl, r3
 801376e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013772:	d807      	bhi.n	8013784 <_printf_i+0x28>
 8013774:	2f62      	cmp	r7, #98	; 0x62
 8013776:	d80a      	bhi.n	801378e <_printf_i+0x32>
 8013778:	2f00      	cmp	r7, #0
 801377a:	f000 80d8 	beq.w	801392e <_printf_i+0x1d2>
 801377e:	2f58      	cmp	r7, #88	; 0x58
 8013780:	f000 80a3 	beq.w	80138ca <_printf_i+0x16e>
 8013784:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013788:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801378c:	e03a      	b.n	8013804 <_printf_i+0xa8>
 801378e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013792:	2b15      	cmp	r3, #21
 8013794:	d8f6      	bhi.n	8013784 <_printf_i+0x28>
 8013796:	a001      	add	r0, pc, #4	; (adr r0, 801379c <_printf_i+0x40>)
 8013798:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801379c:	080137f5 	.word	0x080137f5
 80137a0:	08013809 	.word	0x08013809
 80137a4:	08013785 	.word	0x08013785
 80137a8:	08013785 	.word	0x08013785
 80137ac:	08013785 	.word	0x08013785
 80137b0:	08013785 	.word	0x08013785
 80137b4:	08013809 	.word	0x08013809
 80137b8:	08013785 	.word	0x08013785
 80137bc:	08013785 	.word	0x08013785
 80137c0:	08013785 	.word	0x08013785
 80137c4:	08013785 	.word	0x08013785
 80137c8:	08013915 	.word	0x08013915
 80137cc:	08013839 	.word	0x08013839
 80137d0:	080138f7 	.word	0x080138f7
 80137d4:	08013785 	.word	0x08013785
 80137d8:	08013785 	.word	0x08013785
 80137dc:	08013937 	.word	0x08013937
 80137e0:	08013785 	.word	0x08013785
 80137e4:	08013839 	.word	0x08013839
 80137e8:	08013785 	.word	0x08013785
 80137ec:	08013785 	.word	0x08013785
 80137f0:	080138ff 	.word	0x080138ff
 80137f4:	680b      	ldr	r3, [r1, #0]
 80137f6:	1d1a      	adds	r2, r3, #4
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	600a      	str	r2, [r1, #0]
 80137fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013804:	2301      	movs	r3, #1
 8013806:	e0a3      	b.n	8013950 <_printf_i+0x1f4>
 8013808:	6825      	ldr	r5, [r4, #0]
 801380a:	6808      	ldr	r0, [r1, #0]
 801380c:	062e      	lsls	r6, r5, #24
 801380e:	f100 0304 	add.w	r3, r0, #4
 8013812:	d50a      	bpl.n	801382a <_printf_i+0xce>
 8013814:	6805      	ldr	r5, [r0, #0]
 8013816:	600b      	str	r3, [r1, #0]
 8013818:	2d00      	cmp	r5, #0
 801381a:	da03      	bge.n	8013824 <_printf_i+0xc8>
 801381c:	232d      	movs	r3, #45	; 0x2d
 801381e:	426d      	negs	r5, r5
 8013820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013824:	485e      	ldr	r0, [pc, #376]	; (80139a0 <_printf_i+0x244>)
 8013826:	230a      	movs	r3, #10
 8013828:	e019      	b.n	801385e <_printf_i+0x102>
 801382a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801382e:	6805      	ldr	r5, [r0, #0]
 8013830:	600b      	str	r3, [r1, #0]
 8013832:	bf18      	it	ne
 8013834:	b22d      	sxthne	r5, r5
 8013836:	e7ef      	b.n	8013818 <_printf_i+0xbc>
 8013838:	680b      	ldr	r3, [r1, #0]
 801383a:	6825      	ldr	r5, [r4, #0]
 801383c:	1d18      	adds	r0, r3, #4
 801383e:	6008      	str	r0, [r1, #0]
 8013840:	0628      	lsls	r0, r5, #24
 8013842:	d501      	bpl.n	8013848 <_printf_i+0xec>
 8013844:	681d      	ldr	r5, [r3, #0]
 8013846:	e002      	b.n	801384e <_printf_i+0xf2>
 8013848:	0669      	lsls	r1, r5, #25
 801384a:	d5fb      	bpl.n	8013844 <_printf_i+0xe8>
 801384c:	881d      	ldrh	r5, [r3, #0]
 801384e:	4854      	ldr	r0, [pc, #336]	; (80139a0 <_printf_i+0x244>)
 8013850:	2f6f      	cmp	r7, #111	; 0x6f
 8013852:	bf0c      	ite	eq
 8013854:	2308      	moveq	r3, #8
 8013856:	230a      	movne	r3, #10
 8013858:	2100      	movs	r1, #0
 801385a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801385e:	6866      	ldr	r6, [r4, #4]
 8013860:	60a6      	str	r6, [r4, #8]
 8013862:	2e00      	cmp	r6, #0
 8013864:	bfa2      	ittt	ge
 8013866:	6821      	ldrge	r1, [r4, #0]
 8013868:	f021 0104 	bicge.w	r1, r1, #4
 801386c:	6021      	strge	r1, [r4, #0]
 801386e:	b90d      	cbnz	r5, 8013874 <_printf_i+0x118>
 8013870:	2e00      	cmp	r6, #0
 8013872:	d04d      	beq.n	8013910 <_printf_i+0x1b4>
 8013874:	4616      	mov	r6, r2
 8013876:	fbb5 f1f3 	udiv	r1, r5, r3
 801387a:	fb03 5711 	mls	r7, r3, r1, r5
 801387e:	5dc7      	ldrb	r7, [r0, r7]
 8013880:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013884:	462f      	mov	r7, r5
 8013886:	42bb      	cmp	r3, r7
 8013888:	460d      	mov	r5, r1
 801388a:	d9f4      	bls.n	8013876 <_printf_i+0x11a>
 801388c:	2b08      	cmp	r3, #8
 801388e:	d10b      	bne.n	80138a8 <_printf_i+0x14c>
 8013890:	6823      	ldr	r3, [r4, #0]
 8013892:	07df      	lsls	r7, r3, #31
 8013894:	d508      	bpl.n	80138a8 <_printf_i+0x14c>
 8013896:	6923      	ldr	r3, [r4, #16]
 8013898:	6861      	ldr	r1, [r4, #4]
 801389a:	4299      	cmp	r1, r3
 801389c:	bfde      	ittt	le
 801389e:	2330      	movle	r3, #48	; 0x30
 80138a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80138a4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80138a8:	1b92      	subs	r2, r2, r6
 80138aa:	6122      	str	r2, [r4, #16]
 80138ac:	f8cd a000 	str.w	sl, [sp]
 80138b0:	464b      	mov	r3, r9
 80138b2:	aa03      	add	r2, sp, #12
 80138b4:	4621      	mov	r1, r4
 80138b6:	4640      	mov	r0, r8
 80138b8:	f7ff fee2 	bl	8013680 <_printf_common>
 80138bc:	3001      	adds	r0, #1
 80138be:	d14c      	bne.n	801395a <_printf_i+0x1fe>
 80138c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80138c4:	b004      	add	sp, #16
 80138c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138ca:	4835      	ldr	r0, [pc, #212]	; (80139a0 <_printf_i+0x244>)
 80138cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80138d0:	6823      	ldr	r3, [r4, #0]
 80138d2:	680e      	ldr	r6, [r1, #0]
 80138d4:	061f      	lsls	r7, r3, #24
 80138d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80138da:	600e      	str	r6, [r1, #0]
 80138dc:	d514      	bpl.n	8013908 <_printf_i+0x1ac>
 80138de:	07d9      	lsls	r1, r3, #31
 80138e0:	bf44      	itt	mi
 80138e2:	f043 0320 	orrmi.w	r3, r3, #32
 80138e6:	6023      	strmi	r3, [r4, #0]
 80138e8:	b91d      	cbnz	r5, 80138f2 <_printf_i+0x196>
 80138ea:	6823      	ldr	r3, [r4, #0]
 80138ec:	f023 0320 	bic.w	r3, r3, #32
 80138f0:	6023      	str	r3, [r4, #0]
 80138f2:	2310      	movs	r3, #16
 80138f4:	e7b0      	b.n	8013858 <_printf_i+0xfc>
 80138f6:	6823      	ldr	r3, [r4, #0]
 80138f8:	f043 0320 	orr.w	r3, r3, #32
 80138fc:	6023      	str	r3, [r4, #0]
 80138fe:	2378      	movs	r3, #120	; 0x78
 8013900:	4828      	ldr	r0, [pc, #160]	; (80139a4 <_printf_i+0x248>)
 8013902:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013906:	e7e3      	b.n	80138d0 <_printf_i+0x174>
 8013908:	065e      	lsls	r6, r3, #25
 801390a:	bf48      	it	mi
 801390c:	b2ad      	uxthmi	r5, r5
 801390e:	e7e6      	b.n	80138de <_printf_i+0x182>
 8013910:	4616      	mov	r6, r2
 8013912:	e7bb      	b.n	801388c <_printf_i+0x130>
 8013914:	680b      	ldr	r3, [r1, #0]
 8013916:	6826      	ldr	r6, [r4, #0]
 8013918:	6960      	ldr	r0, [r4, #20]
 801391a:	1d1d      	adds	r5, r3, #4
 801391c:	600d      	str	r5, [r1, #0]
 801391e:	0635      	lsls	r5, r6, #24
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	d501      	bpl.n	8013928 <_printf_i+0x1cc>
 8013924:	6018      	str	r0, [r3, #0]
 8013926:	e002      	b.n	801392e <_printf_i+0x1d2>
 8013928:	0671      	lsls	r1, r6, #25
 801392a:	d5fb      	bpl.n	8013924 <_printf_i+0x1c8>
 801392c:	8018      	strh	r0, [r3, #0]
 801392e:	2300      	movs	r3, #0
 8013930:	6123      	str	r3, [r4, #16]
 8013932:	4616      	mov	r6, r2
 8013934:	e7ba      	b.n	80138ac <_printf_i+0x150>
 8013936:	680b      	ldr	r3, [r1, #0]
 8013938:	1d1a      	adds	r2, r3, #4
 801393a:	600a      	str	r2, [r1, #0]
 801393c:	681e      	ldr	r6, [r3, #0]
 801393e:	6862      	ldr	r2, [r4, #4]
 8013940:	2100      	movs	r1, #0
 8013942:	4630      	mov	r0, r6
 8013944:	f7ec fc6c 	bl	8000220 <memchr>
 8013948:	b108      	cbz	r0, 801394e <_printf_i+0x1f2>
 801394a:	1b80      	subs	r0, r0, r6
 801394c:	6060      	str	r0, [r4, #4]
 801394e:	6863      	ldr	r3, [r4, #4]
 8013950:	6123      	str	r3, [r4, #16]
 8013952:	2300      	movs	r3, #0
 8013954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013958:	e7a8      	b.n	80138ac <_printf_i+0x150>
 801395a:	6923      	ldr	r3, [r4, #16]
 801395c:	4632      	mov	r2, r6
 801395e:	4649      	mov	r1, r9
 8013960:	4640      	mov	r0, r8
 8013962:	47d0      	blx	sl
 8013964:	3001      	adds	r0, #1
 8013966:	d0ab      	beq.n	80138c0 <_printf_i+0x164>
 8013968:	6823      	ldr	r3, [r4, #0]
 801396a:	079b      	lsls	r3, r3, #30
 801396c:	d413      	bmi.n	8013996 <_printf_i+0x23a>
 801396e:	68e0      	ldr	r0, [r4, #12]
 8013970:	9b03      	ldr	r3, [sp, #12]
 8013972:	4298      	cmp	r0, r3
 8013974:	bfb8      	it	lt
 8013976:	4618      	movlt	r0, r3
 8013978:	e7a4      	b.n	80138c4 <_printf_i+0x168>
 801397a:	2301      	movs	r3, #1
 801397c:	4632      	mov	r2, r6
 801397e:	4649      	mov	r1, r9
 8013980:	4640      	mov	r0, r8
 8013982:	47d0      	blx	sl
 8013984:	3001      	adds	r0, #1
 8013986:	d09b      	beq.n	80138c0 <_printf_i+0x164>
 8013988:	3501      	adds	r5, #1
 801398a:	68e3      	ldr	r3, [r4, #12]
 801398c:	9903      	ldr	r1, [sp, #12]
 801398e:	1a5b      	subs	r3, r3, r1
 8013990:	42ab      	cmp	r3, r5
 8013992:	dcf2      	bgt.n	801397a <_printf_i+0x21e>
 8013994:	e7eb      	b.n	801396e <_printf_i+0x212>
 8013996:	2500      	movs	r5, #0
 8013998:	f104 0619 	add.w	r6, r4, #25
 801399c:	e7f5      	b.n	801398a <_printf_i+0x22e>
 801399e:	bf00      	nop
 80139a0:	080194b2 	.word	0x080194b2
 80139a4:	080194c3 	.word	0x080194c3

080139a8 <_sbrk_r>:
 80139a8:	b538      	push	{r3, r4, r5, lr}
 80139aa:	4d06      	ldr	r5, [pc, #24]	; (80139c4 <_sbrk_r+0x1c>)
 80139ac:	2300      	movs	r3, #0
 80139ae:	4604      	mov	r4, r0
 80139b0:	4608      	mov	r0, r1
 80139b2:	602b      	str	r3, [r5, #0]
 80139b4:	f7ef fdb6 	bl	8003524 <_sbrk>
 80139b8:	1c43      	adds	r3, r0, #1
 80139ba:	d102      	bne.n	80139c2 <_sbrk_r+0x1a>
 80139bc:	682b      	ldr	r3, [r5, #0]
 80139be:	b103      	cbz	r3, 80139c2 <_sbrk_r+0x1a>
 80139c0:	6023      	str	r3, [r4, #0]
 80139c2:	bd38      	pop	{r3, r4, r5, pc}
 80139c4:	20001d18 	.word	0x20001d18

080139c8 <siprintf>:
 80139c8:	b40e      	push	{r1, r2, r3}
 80139ca:	b500      	push	{lr}
 80139cc:	b09c      	sub	sp, #112	; 0x70
 80139ce:	ab1d      	add	r3, sp, #116	; 0x74
 80139d0:	9002      	str	r0, [sp, #8]
 80139d2:	9006      	str	r0, [sp, #24]
 80139d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80139d8:	4809      	ldr	r0, [pc, #36]	; (8013a00 <siprintf+0x38>)
 80139da:	9107      	str	r1, [sp, #28]
 80139dc:	9104      	str	r1, [sp, #16]
 80139de:	4909      	ldr	r1, [pc, #36]	; (8013a04 <siprintf+0x3c>)
 80139e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80139e4:	9105      	str	r1, [sp, #20]
 80139e6:	6800      	ldr	r0, [r0, #0]
 80139e8:	9301      	str	r3, [sp, #4]
 80139ea:	a902      	add	r1, sp, #8
 80139ec:	f001 faa2 	bl	8014f34 <_svfiprintf_r>
 80139f0:	9b02      	ldr	r3, [sp, #8]
 80139f2:	2200      	movs	r2, #0
 80139f4:	701a      	strb	r2, [r3, #0]
 80139f6:	b01c      	add	sp, #112	; 0x70
 80139f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80139fc:	b003      	add	sp, #12
 80139fe:	4770      	bx	lr
 8013a00:	20000780 	.word	0x20000780
 8013a04:	ffff0208 	.word	0xffff0208

08013a08 <quorem>:
 8013a08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a0c:	6903      	ldr	r3, [r0, #16]
 8013a0e:	690c      	ldr	r4, [r1, #16]
 8013a10:	42a3      	cmp	r3, r4
 8013a12:	4607      	mov	r7, r0
 8013a14:	f2c0 8081 	blt.w	8013b1a <quorem+0x112>
 8013a18:	3c01      	subs	r4, #1
 8013a1a:	f101 0814 	add.w	r8, r1, #20
 8013a1e:	f100 0514 	add.w	r5, r0, #20
 8013a22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013a26:	9301      	str	r3, [sp, #4]
 8013a28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013a2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013a30:	3301      	adds	r3, #1
 8013a32:	429a      	cmp	r2, r3
 8013a34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013a38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013a3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8013a40:	d331      	bcc.n	8013aa6 <quorem+0x9e>
 8013a42:	f04f 0e00 	mov.w	lr, #0
 8013a46:	4640      	mov	r0, r8
 8013a48:	46ac      	mov	ip, r5
 8013a4a:	46f2      	mov	sl, lr
 8013a4c:	f850 2b04 	ldr.w	r2, [r0], #4
 8013a50:	b293      	uxth	r3, r2
 8013a52:	fb06 e303 	mla	r3, r6, r3, lr
 8013a56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013a5a:	b29b      	uxth	r3, r3
 8013a5c:	ebaa 0303 	sub.w	r3, sl, r3
 8013a60:	0c12      	lsrs	r2, r2, #16
 8013a62:	f8dc a000 	ldr.w	sl, [ip]
 8013a66:	fb06 e202 	mla	r2, r6, r2, lr
 8013a6a:	fa13 f38a 	uxtah	r3, r3, sl
 8013a6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013a72:	fa1f fa82 	uxth.w	sl, r2
 8013a76:	f8dc 2000 	ldr.w	r2, [ip]
 8013a7a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8013a7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013a82:	b29b      	uxth	r3, r3
 8013a84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013a88:	4581      	cmp	r9, r0
 8013a8a:	f84c 3b04 	str.w	r3, [ip], #4
 8013a8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013a92:	d2db      	bcs.n	8013a4c <quorem+0x44>
 8013a94:	f855 300b 	ldr.w	r3, [r5, fp]
 8013a98:	b92b      	cbnz	r3, 8013aa6 <quorem+0x9e>
 8013a9a:	9b01      	ldr	r3, [sp, #4]
 8013a9c:	3b04      	subs	r3, #4
 8013a9e:	429d      	cmp	r5, r3
 8013aa0:	461a      	mov	r2, r3
 8013aa2:	d32e      	bcc.n	8013b02 <quorem+0xfa>
 8013aa4:	613c      	str	r4, [r7, #16]
 8013aa6:	4638      	mov	r0, r7
 8013aa8:	f001 f8b4 	bl	8014c14 <__mcmp>
 8013aac:	2800      	cmp	r0, #0
 8013aae:	db24      	blt.n	8013afa <quorem+0xf2>
 8013ab0:	3601      	adds	r6, #1
 8013ab2:	4628      	mov	r0, r5
 8013ab4:	f04f 0c00 	mov.w	ip, #0
 8013ab8:	f858 2b04 	ldr.w	r2, [r8], #4
 8013abc:	f8d0 e000 	ldr.w	lr, [r0]
 8013ac0:	b293      	uxth	r3, r2
 8013ac2:	ebac 0303 	sub.w	r3, ip, r3
 8013ac6:	0c12      	lsrs	r2, r2, #16
 8013ac8:	fa13 f38e 	uxtah	r3, r3, lr
 8013acc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013ad0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013ad4:	b29b      	uxth	r3, r3
 8013ad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013ada:	45c1      	cmp	r9, r8
 8013adc:	f840 3b04 	str.w	r3, [r0], #4
 8013ae0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013ae4:	d2e8      	bcs.n	8013ab8 <quorem+0xb0>
 8013ae6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013aea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013aee:	b922      	cbnz	r2, 8013afa <quorem+0xf2>
 8013af0:	3b04      	subs	r3, #4
 8013af2:	429d      	cmp	r5, r3
 8013af4:	461a      	mov	r2, r3
 8013af6:	d30a      	bcc.n	8013b0e <quorem+0x106>
 8013af8:	613c      	str	r4, [r7, #16]
 8013afa:	4630      	mov	r0, r6
 8013afc:	b003      	add	sp, #12
 8013afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b02:	6812      	ldr	r2, [r2, #0]
 8013b04:	3b04      	subs	r3, #4
 8013b06:	2a00      	cmp	r2, #0
 8013b08:	d1cc      	bne.n	8013aa4 <quorem+0x9c>
 8013b0a:	3c01      	subs	r4, #1
 8013b0c:	e7c7      	b.n	8013a9e <quorem+0x96>
 8013b0e:	6812      	ldr	r2, [r2, #0]
 8013b10:	3b04      	subs	r3, #4
 8013b12:	2a00      	cmp	r2, #0
 8013b14:	d1f0      	bne.n	8013af8 <quorem+0xf0>
 8013b16:	3c01      	subs	r4, #1
 8013b18:	e7eb      	b.n	8013af2 <quorem+0xea>
 8013b1a:	2000      	movs	r0, #0
 8013b1c:	e7ee      	b.n	8013afc <quorem+0xf4>
	...

08013b20 <_dtoa_r>:
 8013b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b24:	ed2d 8b02 	vpush	{d8}
 8013b28:	ec57 6b10 	vmov	r6, r7, d0
 8013b2c:	b095      	sub	sp, #84	; 0x54
 8013b2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013b30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013b34:	9105      	str	r1, [sp, #20]
 8013b36:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013b3a:	4604      	mov	r4, r0
 8013b3c:	9209      	str	r2, [sp, #36]	; 0x24
 8013b3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013b40:	b975      	cbnz	r5, 8013b60 <_dtoa_r+0x40>
 8013b42:	2010      	movs	r0, #16
 8013b44:	f7ff f9f6 	bl	8012f34 <malloc>
 8013b48:	4602      	mov	r2, r0
 8013b4a:	6260      	str	r0, [r4, #36]	; 0x24
 8013b4c:	b920      	cbnz	r0, 8013b58 <_dtoa_r+0x38>
 8013b4e:	4bb2      	ldr	r3, [pc, #712]	; (8013e18 <_dtoa_r+0x2f8>)
 8013b50:	21ea      	movs	r1, #234	; 0xea
 8013b52:	48b2      	ldr	r0, [pc, #712]	; (8013e1c <_dtoa_r+0x2fc>)
 8013b54:	f001 faee 	bl	8015134 <__assert_func>
 8013b58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013b5c:	6005      	str	r5, [r0, #0]
 8013b5e:	60c5      	str	r5, [r0, #12]
 8013b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b62:	6819      	ldr	r1, [r3, #0]
 8013b64:	b151      	cbz	r1, 8013b7c <_dtoa_r+0x5c>
 8013b66:	685a      	ldr	r2, [r3, #4]
 8013b68:	604a      	str	r2, [r1, #4]
 8013b6a:	2301      	movs	r3, #1
 8013b6c:	4093      	lsls	r3, r2
 8013b6e:	608b      	str	r3, [r1, #8]
 8013b70:	4620      	mov	r0, r4
 8013b72:	f000 fe11 	bl	8014798 <_Bfree>
 8013b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b78:	2200      	movs	r2, #0
 8013b7a:	601a      	str	r2, [r3, #0]
 8013b7c:	1e3b      	subs	r3, r7, #0
 8013b7e:	bfb9      	ittee	lt
 8013b80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013b84:	9303      	strlt	r3, [sp, #12]
 8013b86:	2300      	movge	r3, #0
 8013b88:	f8c8 3000 	strge.w	r3, [r8]
 8013b8c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013b90:	4ba3      	ldr	r3, [pc, #652]	; (8013e20 <_dtoa_r+0x300>)
 8013b92:	bfbc      	itt	lt
 8013b94:	2201      	movlt	r2, #1
 8013b96:	f8c8 2000 	strlt.w	r2, [r8]
 8013b9a:	ea33 0309 	bics.w	r3, r3, r9
 8013b9e:	d11b      	bne.n	8013bd8 <_dtoa_r+0xb8>
 8013ba0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013ba2:	f242 730f 	movw	r3, #9999	; 0x270f
 8013ba6:	6013      	str	r3, [r2, #0]
 8013ba8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013bac:	4333      	orrs	r3, r6
 8013bae:	f000 857a 	beq.w	80146a6 <_dtoa_r+0xb86>
 8013bb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013bb4:	b963      	cbnz	r3, 8013bd0 <_dtoa_r+0xb0>
 8013bb6:	4b9b      	ldr	r3, [pc, #620]	; (8013e24 <_dtoa_r+0x304>)
 8013bb8:	e024      	b.n	8013c04 <_dtoa_r+0xe4>
 8013bba:	4b9b      	ldr	r3, [pc, #620]	; (8013e28 <_dtoa_r+0x308>)
 8013bbc:	9300      	str	r3, [sp, #0]
 8013bbe:	3308      	adds	r3, #8
 8013bc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013bc2:	6013      	str	r3, [r2, #0]
 8013bc4:	9800      	ldr	r0, [sp, #0]
 8013bc6:	b015      	add	sp, #84	; 0x54
 8013bc8:	ecbd 8b02 	vpop	{d8}
 8013bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bd0:	4b94      	ldr	r3, [pc, #592]	; (8013e24 <_dtoa_r+0x304>)
 8013bd2:	9300      	str	r3, [sp, #0]
 8013bd4:	3303      	adds	r3, #3
 8013bd6:	e7f3      	b.n	8013bc0 <_dtoa_r+0xa0>
 8013bd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013bdc:	2200      	movs	r2, #0
 8013bde:	ec51 0b17 	vmov	r0, r1, d7
 8013be2:	2300      	movs	r3, #0
 8013be4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013be8:	f7ec ff8e 	bl	8000b08 <__aeabi_dcmpeq>
 8013bec:	4680      	mov	r8, r0
 8013bee:	b158      	cbz	r0, 8013c08 <_dtoa_r+0xe8>
 8013bf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013bf2:	2301      	movs	r3, #1
 8013bf4:	6013      	str	r3, [r2, #0]
 8013bf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	f000 8551 	beq.w	80146a0 <_dtoa_r+0xb80>
 8013bfe:	488b      	ldr	r0, [pc, #556]	; (8013e2c <_dtoa_r+0x30c>)
 8013c00:	6018      	str	r0, [r3, #0]
 8013c02:	1e43      	subs	r3, r0, #1
 8013c04:	9300      	str	r3, [sp, #0]
 8013c06:	e7dd      	b.n	8013bc4 <_dtoa_r+0xa4>
 8013c08:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013c0c:	aa12      	add	r2, sp, #72	; 0x48
 8013c0e:	a913      	add	r1, sp, #76	; 0x4c
 8013c10:	4620      	mov	r0, r4
 8013c12:	f001 f8a3 	bl	8014d5c <__d2b>
 8013c16:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013c1a:	4683      	mov	fp, r0
 8013c1c:	2d00      	cmp	r5, #0
 8013c1e:	d07c      	beq.n	8013d1a <_dtoa_r+0x1fa>
 8013c20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c22:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8013c26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013c2a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8013c2e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013c32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013c36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013c3a:	4b7d      	ldr	r3, [pc, #500]	; (8013e30 <_dtoa_r+0x310>)
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	4630      	mov	r0, r6
 8013c40:	4639      	mov	r1, r7
 8013c42:	f7ec fb41 	bl	80002c8 <__aeabi_dsub>
 8013c46:	a36e      	add	r3, pc, #440	; (adr r3, 8013e00 <_dtoa_r+0x2e0>)
 8013c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c4c:	f7ec fcf4 	bl	8000638 <__aeabi_dmul>
 8013c50:	a36d      	add	r3, pc, #436	; (adr r3, 8013e08 <_dtoa_r+0x2e8>)
 8013c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c56:	f7ec fb39 	bl	80002cc <__adddf3>
 8013c5a:	4606      	mov	r6, r0
 8013c5c:	4628      	mov	r0, r5
 8013c5e:	460f      	mov	r7, r1
 8013c60:	f7ec fc80 	bl	8000564 <__aeabi_i2d>
 8013c64:	a36a      	add	r3, pc, #424	; (adr r3, 8013e10 <_dtoa_r+0x2f0>)
 8013c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c6a:	f7ec fce5 	bl	8000638 <__aeabi_dmul>
 8013c6e:	4602      	mov	r2, r0
 8013c70:	460b      	mov	r3, r1
 8013c72:	4630      	mov	r0, r6
 8013c74:	4639      	mov	r1, r7
 8013c76:	f7ec fb29 	bl	80002cc <__adddf3>
 8013c7a:	4606      	mov	r6, r0
 8013c7c:	460f      	mov	r7, r1
 8013c7e:	f7ec ff8b 	bl	8000b98 <__aeabi_d2iz>
 8013c82:	2200      	movs	r2, #0
 8013c84:	4682      	mov	sl, r0
 8013c86:	2300      	movs	r3, #0
 8013c88:	4630      	mov	r0, r6
 8013c8a:	4639      	mov	r1, r7
 8013c8c:	f7ec ff46 	bl	8000b1c <__aeabi_dcmplt>
 8013c90:	b148      	cbz	r0, 8013ca6 <_dtoa_r+0x186>
 8013c92:	4650      	mov	r0, sl
 8013c94:	f7ec fc66 	bl	8000564 <__aeabi_i2d>
 8013c98:	4632      	mov	r2, r6
 8013c9a:	463b      	mov	r3, r7
 8013c9c:	f7ec ff34 	bl	8000b08 <__aeabi_dcmpeq>
 8013ca0:	b908      	cbnz	r0, 8013ca6 <_dtoa_r+0x186>
 8013ca2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013ca6:	f1ba 0f16 	cmp.w	sl, #22
 8013caa:	d854      	bhi.n	8013d56 <_dtoa_r+0x236>
 8013cac:	4b61      	ldr	r3, [pc, #388]	; (8013e34 <_dtoa_r+0x314>)
 8013cae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013cba:	f7ec ff2f 	bl	8000b1c <__aeabi_dcmplt>
 8013cbe:	2800      	cmp	r0, #0
 8013cc0:	d04b      	beq.n	8013d5a <_dtoa_r+0x23a>
 8013cc2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	930e      	str	r3, [sp, #56]	; 0x38
 8013cca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013ccc:	1b5d      	subs	r5, r3, r5
 8013cce:	1e6b      	subs	r3, r5, #1
 8013cd0:	9304      	str	r3, [sp, #16]
 8013cd2:	bf43      	ittte	mi
 8013cd4:	2300      	movmi	r3, #0
 8013cd6:	f1c5 0801 	rsbmi	r8, r5, #1
 8013cda:	9304      	strmi	r3, [sp, #16]
 8013cdc:	f04f 0800 	movpl.w	r8, #0
 8013ce0:	f1ba 0f00 	cmp.w	sl, #0
 8013ce4:	db3b      	blt.n	8013d5e <_dtoa_r+0x23e>
 8013ce6:	9b04      	ldr	r3, [sp, #16]
 8013ce8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8013cec:	4453      	add	r3, sl
 8013cee:	9304      	str	r3, [sp, #16]
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	9306      	str	r3, [sp, #24]
 8013cf4:	9b05      	ldr	r3, [sp, #20]
 8013cf6:	2b09      	cmp	r3, #9
 8013cf8:	d869      	bhi.n	8013dce <_dtoa_r+0x2ae>
 8013cfa:	2b05      	cmp	r3, #5
 8013cfc:	bfc4      	itt	gt
 8013cfe:	3b04      	subgt	r3, #4
 8013d00:	9305      	strgt	r3, [sp, #20]
 8013d02:	9b05      	ldr	r3, [sp, #20]
 8013d04:	f1a3 0302 	sub.w	r3, r3, #2
 8013d08:	bfcc      	ite	gt
 8013d0a:	2500      	movgt	r5, #0
 8013d0c:	2501      	movle	r5, #1
 8013d0e:	2b03      	cmp	r3, #3
 8013d10:	d869      	bhi.n	8013de6 <_dtoa_r+0x2c6>
 8013d12:	e8df f003 	tbb	[pc, r3]
 8013d16:	4e2c      	.short	0x4e2c
 8013d18:	5a4c      	.short	0x5a4c
 8013d1a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8013d1e:	441d      	add	r5, r3
 8013d20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013d24:	2b20      	cmp	r3, #32
 8013d26:	bfc1      	itttt	gt
 8013d28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013d2c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013d30:	fa09 f303 	lslgt.w	r3, r9, r3
 8013d34:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013d38:	bfda      	itte	le
 8013d3a:	f1c3 0320 	rsble	r3, r3, #32
 8013d3e:	fa06 f003 	lslle.w	r0, r6, r3
 8013d42:	4318      	orrgt	r0, r3
 8013d44:	f7ec fbfe 	bl	8000544 <__aeabi_ui2d>
 8013d48:	2301      	movs	r3, #1
 8013d4a:	4606      	mov	r6, r0
 8013d4c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013d50:	3d01      	subs	r5, #1
 8013d52:	9310      	str	r3, [sp, #64]	; 0x40
 8013d54:	e771      	b.n	8013c3a <_dtoa_r+0x11a>
 8013d56:	2301      	movs	r3, #1
 8013d58:	e7b6      	b.n	8013cc8 <_dtoa_r+0x1a8>
 8013d5a:	900e      	str	r0, [sp, #56]	; 0x38
 8013d5c:	e7b5      	b.n	8013cca <_dtoa_r+0x1aa>
 8013d5e:	f1ca 0300 	rsb	r3, sl, #0
 8013d62:	9306      	str	r3, [sp, #24]
 8013d64:	2300      	movs	r3, #0
 8013d66:	eba8 080a 	sub.w	r8, r8, sl
 8013d6a:	930d      	str	r3, [sp, #52]	; 0x34
 8013d6c:	e7c2      	b.n	8013cf4 <_dtoa_r+0x1d4>
 8013d6e:	2300      	movs	r3, #0
 8013d70:	9308      	str	r3, [sp, #32]
 8013d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	dc39      	bgt.n	8013dec <_dtoa_r+0x2cc>
 8013d78:	f04f 0901 	mov.w	r9, #1
 8013d7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8013d80:	464b      	mov	r3, r9
 8013d82:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013d86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013d88:	2200      	movs	r2, #0
 8013d8a:	6042      	str	r2, [r0, #4]
 8013d8c:	2204      	movs	r2, #4
 8013d8e:	f102 0614 	add.w	r6, r2, #20
 8013d92:	429e      	cmp	r6, r3
 8013d94:	6841      	ldr	r1, [r0, #4]
 8013d96:	d92f      	bls.n	8013df8 <_dtoa_r+0x2d8>
 8013d98:	4620      	mov	r0, r4
 8013d9a:	f000 fcbd 	bl	8014718 <_Balloc>
 8013d9e:	9000      	str	r0, [sp, #0]
 8013da0:	2800      	cmp	r0, #0
 8013da2:	d14b      	bne.n	8013e3c <_dtoa_r+0x31c>
 8013da4:	4b24      	ldr	r3, [pc, #144]	; (8013e38 <_dtoa_r+0x318>)
 8013da6:	4602      	mov	r2, r0
 8013da8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013dac:	e6d1      	b.n	8013b52 <_dtoa_r+0x32>
 8013dae:	2301      	movs	r3, #1
 8013db0:	e7de      	b.n	8013d70 <_dtoa_r+0x250>
 8013db2:	2300      	movs	r3, #0
 8013db4:	9308      	str	r3, [sp, #32]
 8013db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013db8:	eb0a 0903 	add.w	r9, sl, r3
 8013dbc:	f109 0301 	add.w	r3, r9, #1
 8013dc0:	2b01      	cmp	r3, #1
 8013dc2:	9301      	str	r3, [sp, #4]
 8013dc4:	bfb8      	it	lt
 8013dc6:	2301      	movlt	r3, #1
 8013dc8:	e7dd      	b.n	8013d86 <_dtoa_r+0x266>
 8013dca:	2301      	movs	r3, #1
 8013dcc:	e7f2      	b.n	8013db4 <_dtoa_r+0x294>
 8013dce:	2501      	movs	r5, #1
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	9305      	str	r3, [sp, #20]
 8013dd4:	9508      	str	r5, [sp, #32]
 8013dd6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8013dda:	2200      	movs	r2, #0
 8013ddc:	f8cd 9004 	str.w	r9, [sp, #4]
 8013de0:	2312      	movs	r3, #18
 8013de2:	9209      	str	r2, [sp, #36]	; 0x24
 8013de4:	e7cf      	b.n	8013d86 <_dtoa_r+0x266>
 8013de6:	2301      	movs	r3, #1
 8013de8:	9308      	str	r3, [sp, #32]
 8013dea:	e7f4      	b.n	8013dd6 <_dtoa_r+0x2b6>
 8013dec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013df0:	f8cd 9004 	str.w	r9, [sp, #4]
 8013df4:	464b      	mov	r3, r9
 8013df6:	e7c6      	b.n	8013d86 <_dtoa_r+0x266>
 8013df8:	3101      	adds	r1, #1
 8013dfa:	6041      	str	r1, [r0, #4]
 8013dfc:	0052      	lsls	r2, r2, #1
 8013dfe:	e7c6      	b.n	8013d8e <_dtoa_r+0x26e>
 8013e00:	636f4361 	.word	0x636f4361
 8013e04:	3fd287a7 	.word	0x3fd287a7
 8013e08:	8b60c8b3 	.word	0x8b60c8b3
 8013e0c:	3fc68a28 	.word	0x3fc68a28
 8013e10:	509f79fb 	.word	0x509f79fb
 8013e14:	3fd34413 	.word	0x3fd34413
 8013e18:	080194e1 	.word	0x080194e1
 8013e1c:	080194f8 	.word	0x080194f8
 8013e20:	7ff00000 	.word	0x7ff00000
 8013e24:	080194dd 	.word	0x080194dd
 8013e28:	080194d4 	.word	0x080194d4
 8013e2c:	080194b1 	.word	0x080194b1
 8013e30:	3ff80000 	.word	0x3ff80000
 8013e34:	080195f0 	.word	0x080195f0
 8013e38:	08019557 	.word	0x08019557
 8013e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e3e:	9a00      	ldr	r2, [sp, #0]
 8013e40:	601a      	str	r2, [r3, #0]
 8013e42:	9b01      	ldr	r3, [sp, #4]
 8013e44:	2b0e      	cmp	r3, #14
 8013e46:	f200 80ad 	bhi.w	8013fa4 <_dtoa_r+0x484>
 8013e4a:	2d00      	cmp	r5, #0
 8013e4c:	f000 80aa 	beq.w	8013fa4 <_dtoa_r+0x484>
 8013e50:	f1ba 0f00 	cmp.w	sl, #0
 8013e54:	dd36      	ble.n	8013ec4 <_dtoa_r+0x3a4>
 8013e56:	4ac3      	ldr	r2, [pc, #780]	; (8014164 <_dtoa_r+0x644>)
 8013e58:	f00a 030f 	and.w	r3, sl, #15
 8013e5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013e60:	ed93 7b00 	vldr	d7, [r3]
 8013e64:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013e68:	ea4f 172a 	mov.w	r7, sl, asr #4
 8013e6c:	eeb0 8a47 	vmov.f32	s16, s14
 8013e70:	eef0 8a67 	vmov.f32	s17, s15
 8013e74:	d016      	beq.n	8013ea4 <_dtoa_r+0x384>
 8013e76:	4bbc      	ldr	r3, [pc, #752]	; (8014168 <_dtoa_r+0x648>)
 8013e78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013e7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013e80:	f7ec fd04 	bl	800088c <__aeabi_ddiv>
 8013e84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013e88:	f007 070f 	and.w	r7, r7, #15
 8013e8c:	2503      	movs	r5, #3
 8013e8e:	4eb6      	ldr	r6, [pc, #728]	; (8014168 <_dtoa_r+0x648>)
 8013e90:	b957      	cbnz	r7, 8013ea8 <_dtoa_r+0x388>
 8013e92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e96:	ec53 2b18 	vmov	r2, r3, d8
 8013e9a:	f7ec fcf7 	bl	800088c <__aeabi_ddiv>
 8013e9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ea2:	e029      	b.n	8013ef8 <_dtoa_r+0x3d8>
 8013ea4:	2502      	movs	r5, #2
 8013ea6:	e7f2      	b.n	8013e8e <_dtoa_r+0x36e>
 8013ea8:	07f9      	lsls	r1, r7, #31
 8013eaa:	d508      	bpl.n	8013ebe <_dtoa_r+0x39e>
 8013eac:	ec51 0b18 	vmov	r0, r1, d8
 8013eb0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013eb4:	f7ec fbc0 	bl	8000638 <__aeabi_dmul>
 8013eb8:	ec41 0b18 	vmov	d8, r0, r1
 8013ebc:	3501      	adds	r5, #1
 8013ebe:	107f      	asrs	r7, r7, #1
 8013ec0:	3608      	adds	r6, #8
 8013ec2:	e7e5      	b.n	8013e90 <_dtoa_r+0x370>
 8013ec4:	f000 80a6 	beq.w	8014014 <_dtoa_r+0x4f4>
 8013ec8:	f1ca 0600 	rsb	r6, sl, #0
 8013ecc:	4ba5      	ldr	r3, [pc, #660]	; (8014164 <_dtoa_r+0x644>)
 8013ece:	4fa6      	ldr	r7, [pc, #664]	; (8014168 <_dtoa_r+0x648>)
 8013ed0:	f006 020f 	and.w	r2, r6, #15
 8013ed4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013edc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013ee0:	f7ec fbaa 	bl	8000638 <__aeabi_dmul>
 8013ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ee8:	1136      	asrs	r6, r6, #4
 8013eea:	2300      	movs	r3, #0
 8013eec:	2502      	movs	r5, #2
 8013eee:	2e00      	cmp	r6, #0
 8013ef0:	f040 8085 	bne.w	8013ffe <_dtoa_r+0x4de>
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d1d2      	bne.n	8013e9e <_dtoa_r+0x37e>
 8013ef8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	f000 808c 	beq.w	8014018 <_dtoa_r+0x4f8>
 8013f00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013f04:	4b99      	ldr	r3, [pc, #612]	; (801416c <_dtoa_r+0x64c>)
 8013f06:	2200      	movs	r2, #0
 8013f08:	4630      	mov	r0, r6
 8013f0a:	4639      	mov	r1, r7
 8013f0c:	f7ec fe06 	bl	8000b1c <__aeabi_dcmplt>
 8013f10:	2800      	cmp	r0, #0
 8013f12:	f000 8081 	beq.w	8014018 <_dtoa_r+0x4f8>
 8013f16:	9b01      	ldr	r3, [sp, #4]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d07d      	beq.n	8014018 <_dtoa_r+0x4f8>
 8013f1c:	f1b9 0f00 	cmp.w	r9, #0
 8013f20:	dd3c      	ble.n	8013f9c <_dtoa_r+0x47c>
 8013f22:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8013f26:	9307      	str	r3, [sp, #28]
 8013f28:	2200      	movs	r2, #0
 8013f2a:	4b91      	ldr	r3, [pc, #580]	; (8014170 <_dtoa_r+0x650>)
 8013f2c:	4630      	mov	r0, r6
 8013f2e:	4639      	mov	r1, r7
 8013f30:	f7ec fb82 	bl	8000638 <__aeabi_dmul>
 8013f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f38:	3501      	adds	r5, #1
 8013f3a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8013f3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013f42:	4628      	mov	r0, r5
 8013f44:	f7ec fb0e 	bl	8000564 <__aeabi_i2d>
 8013f48:	4632      	mov	r2, r6
 8013f4a:	463b      	mov	r3, r7
 8013f4c:	f7ec fb74 	bl	8000638 <__aeabi_dmul>
 8013f50:	4b88      	ldr	r3, [pc, #544]	; (8014174 <_dtoa_r+0x654>)
 8013f52:	2200      	movs	r2, #0
 8013f54:	f7ec f9ba 	bl	80002cc <__adddf3>
 8013f58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f60:	9303      	str	r3, [sp, #12]
 8013f62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d15c      	bne.n	8014022 <_dtoa_r+0x502>
 8013f68:	4b83      	ldr	r3, [pc, #524]	; (8014178 <_dtoa_r+0x658>)
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	4630      	mov	r0, r6
 8013f6e:	4639      	mov	r1, r7
 8013f70:	f7ec f9aa 	bl	80002c8 <__aeabi_dsub>
 8013f74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013f78:	4606      	mov	r6, r0
 8013f7a:	460f      	mov	r7, r1
 8013f7c:	f7ec fdec 	bl	8000b58 <__aeabi_dcmpgt>
 8013f80:	2800      	cmp	r0, #0
 8013f82:	f040 8296 	bne.w	80144b2 <_dtoa_r+0x992>
 8013f86:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013f8a:	4630      	mov	r0, r6
 8013f8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013f90:	4639      	mov	r1, r7
 8013f92:	f7ec fdc3 	bl	8000b1c <__aeabi_dcmplt>
 8013f96:	2800      	cmp	r0, #0
 8013f98:	f040 8288 	bne.w	80144ac <_dtoa_r+0x98c>
 8013f9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013fa0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013fa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	f2c0 8158 	blt.w	801425c <_dtoa_r+0x73c>
 8013fac:	f1ba 0f0e 	cmp.w	sl, #14
 8013fb0:	f300 8154 	bgt.w	801425c <_dtoa_r+0x73c>
 8013fb4:	4b6b      	ldr	r3, [pc, #428]	; (8014164 <_dtoa_r+0x644>)
 8013fb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013fba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	f280 80e3 	bge.w	801418c <_dtoa_r+0x66c>
 8013fc6:	9b01      	ldr	r3, [sp, #4]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	f300 80df 	bgt.w	801418c <_dtoa_r+0x66c>
 8013fce:	f040 826d 	bne.w	80144ac <_dtoa_r+0x98c>
 8013fd2:	4b69      	ldr	r3, [pc, #420]	; (8014178 <_dtoa_r+0x658>)
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	4640      	mov	r0, r8
 8013fd8:	4649      	mov	r1, r9
 8013fda:	f7ec fb2d 	bl	8000638 <__aeabi_dmul>
 8013fde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013fe2:	f7ec fdaf 	bl	8000b44 <__aeabi_dcmpge>
 8013fe6:	9e01      	ldr	r6, [sp, #4]
 8013fe8:	4637      	mov	r7, r6
 8013fea:	2800      	cmp	r0, #0
 8013fec:	f040 8243 	bne.w	8014476 <_dtoa_r+0x956>
 8013ff0:	9d00      	ldr	r5, [sp, #0]
 8013ff2:	2331      	movs	r3, #49	; 0x31
 8013ff4:	f805 3b01 	strb.w	r3, [r5], #1
 8013ff8:	f10a 0a01 	add.w	sl, sl, #1
 8013ffc:	e23f      	b.n	801447e <_dtoa_r+0x95e>
 8013ffe:	07f2      	lsls	r2, r6, #31
 8014000:	d505      	bpl.n	801400e <_dtoa_r+0x4ee>
 8014002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014006:	f7ec fb17 	bl	8000638 <__aeabi_dmul>
 801400a:	3501      	adds	r5, #1
 801400c:	2301      	movs	r3, #1
 801400e:	1076      	asrs	r6, r6, #1
 8014010:	3708      	adds	r7, #8
 8014012:	e76c      	b.n	8013eee <_dtoa_r+0x3ce>
 8014014:	2502      	movs	r5, #2
 8014016:	e76f      	b.n	8013ef8 <_dtoa_r+0x3d8>
 8014018:	9b01      	ldr	r3, [sp, #4]
 801401a:	f8cd a01c 	str.w	sl, [sp, #28]
 801401e:	930c      	str	r3, [sp, #48]	; 0x30
 8014020:	e78d      	b.n	8013f3e <_dtoa_r+0x41e>
 8014022:	9900      	ldr	r1, [sp, #0]
 8014024:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014026:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014028:	4b4e      	ldr	r3, [pc, #312]	; (8014164 <_dtoa_r+0x644>)
 801402a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801402e:	4401      	add	r1, r0
 8014030:	9102      	str	r1, [sp, #8]
 8014032:	9908      	ldr	r1, [sp, #32]
 8014034:	eeb0 8a47 	vmov.f32	s16, s14
 8014038:	eef0 8a67 	vmov.f32	s17, s15
 801403c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014040:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014044:	2900      	cmp	r1, #0
 8014046:	d045      	beq.n	80140d4 <_dtoa_r+0x5b4>
 8014048:	494c      	ldr	r1, [pc, #304]	; (801417c <_dtoa_r+0x65c>)
 801404a:	2000      	movs	r0, #0
 801404c:	f7ec fc1e 	bl	800088c <__aeabi_ddiv>
 8014050:	ec53 2b18 	vmov	r2, r3, d8
 8014054:	f7ec f938 	bl	80002c8 <__aeabi_dsub>
 8014058:	9d00      	ldr	r5, [sp, #0]
 801405a:	ec41 0b18 	vmov	d8, r0, r1
 801405e:	4639      	mov	r1, r7
 8014060:	4630      	mov	r0, r6
 8014062:	f7ec fd99 	bl	8000b98 <__aeabi_d2iz>
 8014066:	900c      	str	r0, [sp, #48]	; 0x30
 8014068:	f7ec fa7c 	bl	8000564 <__aeabi_i2d>
 801406c:	4602      	mov	r2, r0
 801406e:	460b      	mov	r3, r1
 8014070:	4630      	mov	r0, r6
 8014072:	4639      	mov	r1, r7
 8014074:	f7ec f928 	bl	80002c8 <__aeabi_dsub>
 8014078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801407a:	3330      	adds	r3, #48	; 0x30
 801407c:	f805 3b01 	strb.w	r3, [r5], #1
 8014080:	ec53 2b18 	vmov	r2, r3, d8
 8014084:	4606      	mov	r6, r0
 8014086:	460f      	mov	r7, r1
 8014088:	f7ec fd48 	bl	8000b1c <__aeabi_dcmplt>
 801408c:	2800      	cmp	r0, #0
 801408e:	d165      	bne.n	801415c <_dtoa_r+0x63c>
 8014090:	4632      	mov	r2, r6
 8014092:	463b      	mov	r3, r7
 8014094:	4935      	ldr	r1, [pc, #212]	; (801416c <_dtoa_r+0x64c>)
 8014096:	2000      	movs	r0, #0
 8014098:	f7ec f916 	bl	80002c8 <__aeabi_dsub>
 801409c:	ec53 2b18 	vmov	r2, r3, d8
 80140a0:	f7ec fd3c 	bl	8000b1c <__aeabi_dcmplt>
 80140a4:	2800      	cmp	r0, #0
 80140a6:	f040 80b9 	bne.w	801421c <_dtoa_r+0x6fc>
 80140aa:	9b02      	ldr	r3, [sp, #8]
 80140ac:	429d      	cmp	r5, r3
 80140ae:	f43f af75 	beq.w	8013f9c <_dtoa_r+0x47c>
 80140b2:	4b2f      	ldr	r3, [pc, #188]	; (8014170 <_dtoa_r+0x650>)
 80140b4:	ec51 0b18 	vmov	r0, r1, d8
 80140b8:	2200      	movs	r2, #0
 80140ba:	f7ec fabd 	bl	8000638 <__aeabi_dmul>
 80140be:	4b2c      	ldr	r3, [pc, #176]	; (8014170 <_dtoa_r+0x650>)
 80140c0:	ec41 0b18 	vmov	d8, r0, r1
 80140c4:	2200      	movs	r2, #0
 80140c6:	4630      	mov	r0, r6
 80140c8:	4639      	mov	r1, r7
 80140ca:	f7ec fab5 	bl	8000638 <__aeabi_dmul>
 80140ce:	4606      	mov	r6, r0
 80140d0:	460f      	mov	r7, r1
 80140d2:	e7c4      	b.n	801405e <_dtoa_r+0x53e>
 80140d4:	ec51 0b17 	vmov	r0, r1, d7
 80140d8:	f7ec faae 	bl	8000638 <__aeabi_dmul>
 80140dc:	9b02      	ldr	r3, [sp, #8]
 80140de:	9d00      	ldr	r5, [sp, #0]
 80140e0:	930c      	str	r3, [sp, #48]	; 0x30
 80140e2:	ec41 0b18 	vmov	d8, r0, r1
 80140e6:	4639      	mov	r1, r7
 80140e8:	4630      	mov	r0, r6
 80140ea:	f7ec fd55 	bl	8000b98 <__aeabi_d2iz>
 80140ee:	9011      	str	r0, [sp, #68]	; 0x44
 80140f0:	f7ec fa38 	bl	8000564 <__aeabi_i2d>
 80140f4:	4602      	mov	r2, r0
 80140f6:	460b      	mov	r3, r1
 80140f8:	4630      	mov	r0, r6
 80140fa:	4639      	mov	r1, r7
 80140fc:	f7ec f8e4 	bl	80002c8 <__aeabi_dsub>
 8014100:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014102:	3330      	adds	r3, #48	; 0x30
 8014104:	f805 3b01 	strb.w	r3, [r5], #1
 8014108:	9b02      	ldr	r3, [sp, #8]
 801410a:	429d      	cmp	r5, r3
 801410c:	4606      	mov	r6, r0
 801410e:	460f      	mov	r7, r1
 8014110:	f04f 0200 	mov.w	r2, #0
 8014114:	d134      	bne.n	8014180 <_dtoa_r+0x660>
 8014116:	4b19      	ldr	r3, [pc, #100]	; (801417c <_dtoa_r+0x65c>)
 8014118:	ec51 0b18 	vmov	r0, r1, d8
 801411c:	f7ec f8d6 	bl	80002cc <__adddf3>
 8014120:	4602      	mov	r2, r0
 8014122:	460b      	mov	r3, r1
 8014124:	4630      	mov	r0, r6
 8014126:	4639      	mov	r1, r7
 8014128:	f7ec fd16 	bl	8000b58 <__aeabi_dcmpgt>
 801412c:	2800      	cmp	r0, #0
 801412e:	d175      	bne.n	801421c <_dtoa_r+0x6fc>
 8014130:	ec53 2b18 	vmov	r2, r3, d8
 8014134:	4911      	ldr	r1, [pc, #68]	; (801417c <_dtoa_r+0x65c>)
 8014136:	2000      	movs	r0, #0
 8014138:	f7ec f8c6 	bl	80002c8 <__aeabi_dsub>
 801413c:	4602      	mov	r2, r0
 801413e:	460b      	mov	r3, r1
 8014140:	4630      	mov	r0, r6
 8014142:	4639      	mov	r1, r7
 8014144:	f7ec fcea 	bl	8000b1c <__aeabi_dcmplt>
 8014148:	2800      	cmp	r0, #0
 801414a:	f43f af27 	beq.w	8013f9c <_dtoa_r+0x47c>
 801414e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014150:	1e6b      	subs	r3, r5, #1
 8014152:	930c      	str	r3, [sp, #48]	; 0x30
 8014154:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014158:	2b30      	cmp	r3, #48	; 0x30
 801415a:	d0f8      	beq.n	801414e <_dtoa_r+0x62e>
 801415c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014160:	e04a      	b.n	80141f8 <_dtoa_r+0x6d8>
 8014162:	bf00      	nop
 8014164:	080195f0 	.word	0x080195f0
 8014168:	080195c8 	.word	0x080195c8
 801416c:	3ff00000 	.word	0x3ff00000
 8014170:	40240000 	.word	0x40240000
 8014174:	401c0000 	.word	0x401c0000
 8014178:	40140000 	.word	0x40140000
 801417c:	3fe00000 	.word	0x3fe00000
 8014180:	4baf      	ldr	r3, [pc, #700]	; (8014440 <_dtoa_r+0x920>)
 8014182:	f7ec fa59 	bl	8000638 <__aeabi_dmul>
 8014186:	4606      	mov	r6, r0
 8014188:	460f      	mov	r7, r1
 801418a:	e7ac      	b.n	80140e6 <_dtoa_r+0x5c6>
 801418c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014190:	9d00      	ldr	r5, [sp, #0]
 8014192:	4642      	mov	r2, r8
 8014194:	464b      	mov	r3, r9
 8014196:	4630      	mov	r0, r6
 8014198:	4639      	mov	r1, r7
 801419a:	f7ec fb77 	bl	800088c <__aeabi_ddiv>
 801419e:	f7ec fcfb 	bl	8000b98 <__aeabi_d2iz>
 80141a2:	9002      	str	r0, [sp, #8]
 80141a4:	f7ec f9de 	bl	8000564 <__aeabi_i2d>
 80141a8:	4642      	mov	r2, r8
 80141aa:	464b      	mov	r3, r9
 80141ac:	f7ec fa44 	bl	8000638 <__aeabi_dmul>
 80141b0:	4602      	mov	r2, r0
 80141b2:	460b      	mov	r3, r1
 80141b4:	4630      	mov	r0, r6
 80141b6:	4639      	mov	r1, r7
 80141b8:	f7ec f886 	bl	80002c8 <__aeabi_dsub>
 80141bc:	9e02      	ldr	r6, [sp, #8]
 80141be:	9f01      	ldr	r7, [sp, #4]
 80141c0:	3630      	adds	r6, #48	; 0x30
 80141c2:	f805 6b01 	strb.w	r6, [r5], #1
 80141c6:	9e00      	ldr	r6, [sp, #0]
 80141c8:	1bae      	subs	r6, r5, r6
 80141ca:	42b7      	cmp	r7, r6
 80141cc:	4602      	mov	r2, r0
 80141ce:	460b      	mov	r3, r1
 80141d0:	d137      	bne.n	8014242 <_dtoa_r+0x722>
 80141d2:	f7ec f87b 	bl	80002cc <__adddf3>
 80141d6:	4642      	mov	r2, r8
 80141d8:	464b      	mov	r3, r9
 80141da:	4606      	mov	r6, r0
 80141dc:	460f      	mov	r7, r1
 80141de:	f7ec fcbb 	bl	8000b58 <__aeabi_dcmpgt>
 80141e2:	b9c8      	cbnz	r0, 8014218 <_dtoa_r+0x6f8>
 80141e4:	4642      	mov	r2, r8
 80141e6:	464b      	mov	r3, r9
 80141e8:	4630      	mov	r0, r6
 80141ea:	4639      	mov	r1, r7
 80141ec:	f7ec fc8c 	bl	8000b08 <__aeabi_dcmpeq>
 80141f0:	b110      	cbz	r0, 80141f8 <_dtoa_r+0x6d8>
 80141f2:	9b02      	ldr	r3, [sp, #8]
 80141f4:	07d9      	lsls	r1, r3, #31
 80141f6:	d40f      	bmi.n	8014218 <_dtoa_r+0x6f8>
 80141f8:	4620      	mov	r0, r4
 80141fa:	4659      	mov	r1, fp
 80141fc:	f000 facc 	bl	8014798 <_Bfree>
 8014200:	2300      	movs	r3, #0
 8014202:	702b      	strb	r3, [r5, #0]
 8014204:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014206:	f10a 0001 	add.w	r0, sl, #1
 801420a:	6018      	str	r0, [r3, #0]
 801420c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801420e:	2b00      	cmp	r3, #0
 8014210:	f43f acd8 	beq.w	8013bc4 <_dtoa_r+0xa4>
 8014214:	601d      	str	r5, [r3, #0]
 8014216:	e4d5      	b.n	8013bc4 <_dtoa_r+0xa4>
 8014218:	f8cd a01c 	str.w	sl, [sp, #28]
 801421c:	462b      	mov	r3, r5
 801421e:	461d      	mov	r5, r3
 8014220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014224:	2a39      	cmp	r2, #57	; 0x39
 8014226:	d108      	bne.n	801423a <_dtoa_r+0x71a>
 8014228:	9a00      	ldr	r2, [sp, #0]
 801422a:	429a      	cmp	r2, r3
 801422c:	d1f7      	bne.n	801421e <_dtoa_r+0x6fe>
 801422e:	9a07      	ldr	r2, [sp, #28]
 8014230:	9900      	ldr	r1, [sp, #0]
 8014232:	3201      	adds	r2, #1
 8014234:	9207      	str	r2, [sp, #28]
 8014236:	2230      	movs	r2, #48	; 0x30
 8014238:	700a      	strb	r2, [r1, #0]
 801423a:	781a      	ldrb	r2, [r3, #0]
 801423c:	3201      	adds	r2, #1
 801423e:	701a      	strb	r2, [r3, #0]
 8014240:	e78c      	b.n	801415c <_dtoa_r+0x63c>
 8014242:	4b7f      	ldr	r3, [pc, #508]	; (8014440 <_dtoa_r+0x920>)
 8014244:	2200      	movs	r2, #0
 8014246:	f7ec f9f7 	bl	8000638 <__aeabi_dmul>
 801424a:	2200      	movs	r2, #0
 801424c:	2300      	movs	r3, #0
 801424e:	4606      	mov	r6, r0
 8014250:	460f      	mov	r7, r1
 8014252:	f7ec fc59 	bl	8000b08 <__aeabi_dcmpeq>
 8014256:	2800      	cmp	r0, #0
 8014258:	d09b      	beq.n	8014192 <_dtoa_r+0x672>
 801425a:	e7cd      	b.n	80141f8 <_dtoa_r+0x6d8>
 801425c:	9a08      	ldr	r2, [sp, #32]
 801425e:	2a00      	cmp	r2, #0
 8014260:	f000 80c4 	beq.w	80143ec <_dtoa_r+0x8cc>
 8014264:	9a05      	ldr	r2, [sp, #20]
 8014266:	2a01      	cmp	r2, #1
 8014268:	f300 80a8 	bgt.w	80143bc <_dtoa_r+0x89c>
 801426c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801426e:	2a00      	cmp	r2, #0
 8014270:	f000 80a0 	beq.w	80143b4 <_dtoa_r+0x894>
 8014274:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014278:	9e06      	ldr	r6, [sp, #24]
 801427a:	4645      	mov	r5, r8
 801427c:	9a04      	ldr	r2, [sp, #16]
 801427e:	2101      	movs	r1, #1
 8014280:	441a      	add	r2, r3
 8014282:	4620      	mov	r0, r4
 8014284:	4498      	add	r8, r3
 8014286:	9204      	str	r2, [sp, #16]
 8014288:	f000 fb42 	bl	8014910 <__i2b>
 801428c:	4607      	mov	r7, r0
 801428e:	2d00      	cmp	r5, #0
 8014290:	dd0b      	ble.n	80142aa <_dtoa_r+0x78a>
 8014292:	9b04      	ldr	r3, [sp, #16]
 8014294:	2b00      	cmp	r3, #0
 8014296:	dd08      	ble.n	80142aa <_dtoa_r+0x78a>
 8014298:	42ab      	cmp	r3, r5
 801429a:	9a04      	ldr	r2, [sp, #16]
 801429c:	bfa8      	it	ge
 801429e:	462b      	movge	r3, r5
 80142a0:	eba8 0803 	sub.w	r8, r8, r3
 80142a4:	1aed      	subs	r5, r5, r3
 80142a6:	1ad3      	subs	r3, r2, r3
 80142a8:	9304      	str	r3, [sp, #16]
 80142aa:	9b06      	ldr	r3, [sp, #24]
 80142ac:	b1fb      	cbz	r3, 80142ee <_dtoa_r+0x7ce>
 80142ae:	9b08      	ldr	r3, [sp, #32]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	f000 809f 	beq.w	80143f4 <_dtoa_r+0x8d4>
 80142b6:	2e00      	cmp	r6, #0
 80142b8:	dd11      	ble.n	80142de <_dtoa_r+0x7be>
 80142ba:	4639      	mov	r1, r7
 80142bc:	4632      	mov	r2, r6
 80142be:	4620      	mov	r0, r4
 80142c0:	f000 fbe2 	bl	8014a88 <__pow5mult>
 80142c4:	465a      	mov	r2, fp
 80142c6:	4601      	mov	r1, r0
 80142c8:	4607      	mov	r7, r0
 80142ca:	4620      	mov	r0, r4
 80142cc:	f000 fb36 	bl	801493c <__multiply>
 80142d0:	4659      	mov	r1, fp
 80142d2:	9007      	str	r0, [sp, #28]
 80142d4:	4620      	mov	r0, r4
 80142d6:	f000 fa5f 	bl	8014798 <_Bfree>
 80142da:	9b07      	ldr	r3, [sp, #28]
 80142dc:	469b      	mov	fp, r3
 80142de:	9b06      	ldr	r3, [sp, #24]
 80142e0:	1b9a      	subs	r2, r3, r6
 80142e2:	d004      	beq.n	80142ee <_dtoa_r+0x7ce>
 80142e4:	4659      	mov	r1, fp
 80142e6:	4620      	mov	r0, r4
 80142e8:	f000 fbce 	bl	8014a88 <__pow5mult>
 80142ec:	4683      	mov	fp, r0
 80142ee:	2101      	movs	r1, #1
 80142f0:	4620      	mov	r0, r4
 80142f2:	f000 fb0d 	bl	8014910 <__i2b>
 80142f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	4606      	mov	r6, r0
 80142fc:	dd7c      	ble.n	80143f8 <_dtoa_r+0x8d8>
 80142fe:	461a      	mov	r2, r3
 8014300:	4601      	mov	r1, r0
 8014302:	4620      	mov	r0, r4
 8014304:	f000 fbc0 	bl	8014a88 <__pow5mult>
 8014308:	9b05      	ldr	r3, [sp, #20]
 801430a:	2b01      	cmp	r3, #1
 801430c:	4606      	mov	r6, r0
 801430e:	dd76      	ble.n	80143fe <_dtoa_r+0x8de>
 8014310:	2300      	movs	r3, #0
 8014312:	9306      	str	r3, [sp, #24]
 8014314:	6933      	ldr	r3, [r6, #16]
 8014316:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801431a:	6918      	ldr	r0, [r3, #16]
 801431c:	f000 faa8 	bl	8014870 <__hi0bits>
 8014320:	f1c0 0020 	rsb	r0, r0, #32
 8014324:	9b04      	ldr	r3, [sp, #16]
 8014326:	4418      	add	r0, r3
 8014328:	f010 001f 	ands.w	r0, r0, #31
 801432c:	f000 8086 	beq.w	801443c <_dtoa_r+0x91c>
 8014330:	f1c0 0320 	rsb	r3, r0, #32
 8014334:	2b04      	cmp	r3, #4
 8014336:	dd7f      	ble.n	8014438 <_dtoa_r+0x918>
 8014338:	f1c0 001c 	rsb	r0, r0, #28
 801433c:	9b04      	ldr	r3, [sp, #16]
 801433e:	4403      	add	r3, r0
 8014340:	4480      	add	r8, r0
 8014342:	4405      	add	r5, r0
 8014344:	9304      	str	r3, [sp, #16]
 8014346:	f1b8 0f00 	cmp.w	r8, #0
 801434a:	dd05      	ble.n	8014358 <_dtoa_r+0x838>
 801434c:	4659      	mov	r1, fp
 801434e:	4642      	mov	r2, r8
 8014350:	4620      	mov	r0, r4
 8014352:	f000 fbf3 	bl	8014b3c <__lshift>
 8014356:	4683      	mov	fp, r0
 8014358:	9b04      	ldr	r3, [sp, #16]
 801435a:	2b00      	cmp	r3, #0
 801435c:	dd05      	ble.n	801436a <_dtoa_r+0x84a>
 801435e:	4631      	mov	r1, r6
 8014360:	461a      	mov	r2, r3
 8014362:	4620      	mov	r0, r4
 8014364:	f000 fbea 	bl	8014b3c <__lshift>
 8014368:	4606      	mov	r6, r0
 801436a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801436c:	2b00      	cmp	r3, #0
 801436e:	d069      	beq.n	8014444 <_dtoa_r+0x924>
 8014370:	4631      	mov	r1, r6
 8014372:	4658      	mov	r0, fp
 8014374:	f000 fc4e 	bl	8014c14 <__mcmp>
 8014378:	2800      	cmp	r0, #0
 801437a:	da63      	bge.n	8014444 <_dtoa_r+0x924>
 801437c:	2300      	movs	r3, #0
 801437e:	4659      	mov	r1, fp
 8014380:	220a      	movs	r2, #10
 8014382:	4620      	mov	r0, r4
 8014384:	f000 fa2a 	bl	80147dc <__multadd>
 8014388:	9b08      	ldr	r3, [sp, #32]
 801438a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801438e:	4683      	mov	fp, r0
 8014390:	2b00      	cmp	r3, #0
 8014392:	f000 818f 	beq.w	80146b4 <_dtoa_r+0xb94>
 8014396:	4639      	mov	r1, r7
 8014398:	2300      	movs	r3, #0
 801439a:	220a      	movs	r2, #10
 801439c:	4620      	mov	r0, r4
 801439e:	f000 fa1d 	bl	80147dc <__multadd>
 80143a2:	f1b9 0f00 	cmp.w	r9, #0
 80143a6:	4607      	mov	r7, r0
 80143a8:	f300 808e 	bgt.w	80144c8 <_dtoa_r+0x9a8>
 80143ac:	9b05      	ldr	r3, [sp, #20]
 80143ae:	2b02      	cmp	r3, #2
 80143b0:	dc50      	bgt.n	8014454 <_dtoa_r+0x934>
 80143b2:	e089      	b.n	80144c8 <_dtoa_r+0x9a8>
 80143b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80143b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80143ba:	e75d      	b.n	8014278 <_dtoa_r+0x758>
 80143bc:	9b01      	ldr	r3, [sp, #4]
 80143be:	1e5e      	subs	r6, r3, #1
 80143c0:	9b06      	ldr	r3, [sp, #24]
 80143c2:	42b3      	cmp	r3, r6
 80143c4:	bfbf      	itttt	lt
 80143c6:	9b06      	ldrlt	r3, [sp, #24]
 80143c8:	9606      	strlt	r6, [sp, #24]
 80143ca:	1af2      	sublt	r2, r6, r3
 80143cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80143ce:	bfb6      	itet	lt
 80143d0:	189b      	addlt	r3, r3, r2
 80143d2:	1b9e      	subge	r6, r3, r6
 80143d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80143d6:	9b01      	ldr	r3, [sp, #4]
 80143d8:	bfb8      	it	lt
 80143da:	2600      	movlt	r6, #0
 80143dc:	2b00      	cmp	r3, #0
 80143de:	bfb5      	itete	lt
 80143e0:	eba8 0503 	sublt.w	r5, r8, r3
 80143e4:	9b01      	ldrge	r3, [sp, #4]
 80143e6:	2300      	movlt	r3, #0
 80143e8:	4645      	movge	r5, r8
 80143ea:	e747      	b.n	801427c <_dtoa_r+0x75c>
 80143ec:	9e06      	ldr	r6, [sp, #24]
 80143ee:	9f08      	ldr	r7, [sp, #32]
 80143f0:	4645      	mov	r5, r8
 80143f2:	e74c      	b.n	801428e <_dtoa_r+0x76e>
 80143f4:	9a06      	ldr	r2, [sp, #24]
 80143f6:	e775      	b.n	80142e4 <_dtoa_r+0x7c4>
 80143f8:	9b05      	ldr	r3, [sp, #20]
 80143fa:	2b01      	cmp	r3, #1
 80143fc:	dc18      	bgt.n	8014430 <_dtoa_r+0x910>
 80143fe:	9b02      	ldr	r3, [sp, #8]
 8014400:	b9b3      	cbnz	r3, 8014430 <_dtoa_r+0x910>
 8014402:	9b03      	ldr	r3, [sp, #12]
 8014404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014408:	b9a3      	cbnz	r3, 8014434 <_dtoa_r+0x914>
 801440a:	9b03      	ldr	r3, [sp, #12]
 801440c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014410:	0d1b      	lsrs	r3, r3, #20
 8014412:	051b      	lsls	r3, r3, #20
 8014414:	b12b      	cbz	r3, 8014422 <_dtoa_r+0x902>
 8014416:	9b04      	ldr	r3, [sp, #16]
 8014418:	3301      	adds	r3, #1
 801441a:	9304      	str	r3, [sp, #16]
 801441c:	f108 0801 	add.w	r8, r8, #1
 8014420:	2301      	movs	r3, #1
 8014422:	9306      	str	r3, [sp, #24]
 8014424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014426:	2b00      	cmp	r3, #0
 8014428:	f47f af74 	bne.w	8014314 <_dtoa_r+0x7f4>
 801442c:	2001      	movs	r0, #1
 801442e:	e779      	b.n	8014324 <_dtoa_r+0x804>
 8014430:	2300      	movs	r3, #0
 8014432:	e7f6      	b.n	8014422 <_dtoa_r+0x902>
 8014434:	9b02      	ldr	r3, [sp, #8]
 8014436:	e7f4      	b.n	8014422 <_dtoa_r+0x902>
 8014438:	d085      	beq.n	8014346 <_dtoa_r+0x826>
 801443a:	4618      	mov	r0, r3
 801443c:	301c      	adds	r0, #28
 801443e:	e77d      	b.n	801433c <_dtoa_r+0x81c>
 8014440:	40240000 	.word	0x40240000
 8014444:	9b01      	ldr	r3, [sp, #4]
 8014446:	2b00      	cmp	r3, #0
 8014448:	dc38      	bgt.n	80144bc <_dtoa_r+0x99c>
 801444a:	9b05      	ldr	r3, [sp, #20]
 801444c:	2b02      	cmp	r3, #2
 801444e:	dd35      	ble.n	80144bc <_dtoa_r+0x99c>
 8014450:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014454:	f1b9 0f00 	cmp.w	r9, #0
 8014458:	d10d      	bne.n	8014476 <_dtoa_r+0x956>
 801445a:	4631      	mov	r1, r6
 801445c:	464b      	mov	r3, r9
 801445e:	2205      	movs	r2, #5
 8014460:	4620      	mov	r0, r4
 8014462:	f000 f9bb 	bl	80147dc <__multadd>
 8014466:	4601      	mov	r1, r0
 8014468:	4606      	mov	r6, r0
 801446a:	4658      	mov	r0, fp
 801446c:	f000 fbd2 	bl	8014c14 <__mcmp>
 8014470:	2800      	cmp	r0, #0
 8014472:	f73f adbd 	bgt.w	8013ff0 <_dtoa_r+0x4d0>
 8014476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014478:	9d00      	ldr	r5, [sp, #0]
 801447a:	ea6f 0a03 	mvn.w	sl, r3
 801447e:	f04f 0800 	mov.w	r8, #0
 8014482:	4631      	mov	r1, r6
 8014484:	4620      	mov	r0, r4
 8014486:	f000 f987 	bl	8014798 <_Bfree>
 801448a:	2f00      	cmp	r7, #0
 801448c:	f43f aeb4 	beq.w	80141f8 <_dtoa_r+0x6d8>
 8014490:	f1b8 0f00 	cmp.w	r8, #0
 8014494:	d005      	beq.n	80144a2 <_dtoa_r+0x982>
 8014496:	45b8      	cmp	r8, r7
 8014498:	d003      	beq.n	80144a2 <_dtoa_r+0x982>
 801449a:	4641      	mov	r1, r8
 801449c:	4620      	mov	r0, r4
 801449e:	f000 f97b 	bl	8014798 <_Bfree>
 80144a2:	4639      	mov	r1, r7
 80144a4:	4620      	mov	r0, r4
 80144a6:	f000 f977 	bl	8014798 <_Bfree>
 80144aa:	e6a5      	b.n	80141f8 <_dtoa_r+0x6d8>
 80144ac:	2600      	movs	r6, #0
 80144ae:	4637      	mov	r7, r6
 80144b0:	e7e1      	b.n	8014476 <_dtoa_r+0x956>
 80144b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80144b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80144b8:	4637      	mov	r7, r6
 80144ba:	e599      	b.n	8013ff0 <_dtoa_r+0x4d0>
 80144bc:	9b08      	ldr	r3, [sp, #32]
 80144be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	f000 80fd 	beq.w	80146c2 <_dtoa_r+0xba2>
 80144c8:	2d00      	cmp	r5, #0
 80144ca:	dd05      	ble.n	80144d8 <_dtoa_r+0x9b8>
 80144cc:	4639      	mov	r1, r7
 80144ce:	462a      	mov	r2, r5
 80144d0:	4620      	mov	r0, r4
 80144d2:	f000 fb33 	bl	8014b3c <__lshift>
 80144d6:	4607      	mov	r7, r0
 80144d8:	9b06      	ldr	r3, [sp, #24]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d05c      	beq.n	8014598 <_dtoa_r+0xa78>
 80144de:	6879      	ldr	r1, [r7, #4]
 80144e0:	4620      	mov	r0, r4
 80144e2:	f000 f919 	bl	8014718 <_Balloc>
 80144e6:	4605      	mov	r5, r0
 80144e8:	b928      	cbnz	r0, 80144f6 <_dtoa_r+0x9d6>
 80144ea:	4b80      	ldr	r3, [pc, #512]	; (80146ec <_dtoa_r+0xbcc>)
 80144ec:	4602      	mov	r2, r0
 80144ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80144f2:	f7ff bb2e 	b.w	8013b52 <_dtoa_r+0x32>
 80144f6:	693a      	ldr	r2, [r7, #16]
 80144f8:	3202      	adds	r2, #2
 80144fa:	0092      	lsls	r2, r2, #2
 80144fc:	f107 010c 	add.w	r1, r7, #12
 8014500:	300c      	adds	r0, #12
 8014502:	f7fe fd27 	bl	8012f54 <memcpy>
 8014506:	2201      	movs	r2, #1
 8014508:	4629      	mov	r1, r5
 801450a:	4620      	mov	r0, r4
 801450c:	f000 fb16 	bl	8014b3c <__lshift>
 8014510:	9b00      	ldr	r3, [sp, #0]
 8014512:	3301      	adds	r3, #1
 8014514:	9301      	str	r3, [sp, #4]
 8014516:	9b00      	ldr	r3, [sp, #0]
 8014518:	444b      	add	r3, r9
 801451a:	9307      	str	r3, [sp, #28]
 801451c:	9b02      	ldr	r3, [sp, #8]
 801451e:	f003 0301 	and.w	r3, r3, #1
 8014522:	46b8      	mov	r8, r7
 8014524:	9306      	str	r3, [sp, #24]
 8014526:	4607      	mov	r7, r0
 8014528:	9b01      	ldr	r3, [sp, #4]
 801452a:	4631      	mov	r1, r6
 801452c:	3b01      	subs	r3, #1
 801452e:	4658      	mov	r0, fp
 8014530:	9302      	str	r3, [sp, #8]
 8014532:	f7ff fa69 	bl	8013a08 <quorem>
 8014536:	4603      	mov	r3, r0
 8014538:	3330      	adds	r3, #48	; 0x30
 801453a:	9004      	str	r0, [sp, #16]
 801453c:	4641      	mov	r1, r8
 801453e:	4658      	mov	r0, fp
 8014540:	9308      	str	r3, [sp, #32]
 8014542:	f000 fb67 	bl	8014c14 <__mcmp>
 8014546:	463a      	mov	r2, r7
 8014548:	4681      	mov	r9, r0
 801454a:	4631      	mov	r1, r6
 801454c:	4620      	mov	r0, r4
 801454e:	f000 fb7d 	bl	8014c4c <__mdiff>
 8014552:	68c2      	ldr	r2, [r0, #12]
 8014554:	9b08      	ldr	r3, [sp, #32]
 8014556:	4605      	mov	r5, r0
 8014558:	bb02      	cbnz	r2, 801459c <_dtoa_r+0xa7c>
 801455a:	4601      	mov	r1, r0
 801455c:	4658      	mov	r0, fp
 801455e:	f000 fb59 	bl	8014c14 <__mcmp>
 8014562:	9b08      	ldr	r3, [sp, #32]
 8014564:	4602      	mov	r2, r0
 8014566:	4629      	mov	r1, r5
 8014568:	4620      	mov	r0, r4
 801456a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801456e:	f000 f913 	bl	8014798 <_Bfree>
 8014572:	9b05      	ldr	r3, [sp, #20]
 8014574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014576:	9d01      	ldr	r5, [sp, #4]
 8014578:	ea43 0102 	orr.w	r1, r3, r2
 801457c:	9b06      	ldr	r3, [sp, #24]
 801457e:	430b      	orrs	r3, r1
 8014580:	9b08      	ldr	r3, [sp, #32]
 8014582:	d10d      	bne.n	80145a0 <_dtoa_r+0xa80>
 8014584:	2b39      	cmp	r3, #57	; 0x39
 8014586:	d029      	beq.n	80145dc <_dtoa_r+0xabc>
 8014588:	f1b9 0f00 	cmp.w	r9, #0
 801458c:	dd01      	ble.n	8014592 <_dtoa_r+0xa72>
 801458e:	9b04      	ldr	r3, [sp, #16]
 8014590:	3331      	adds	r3, #49	; 0x31
 8014592:	9a02      	ldr	r2, [sp, #8]
 8014594:	7013      	strb	r3, [r2, #0]
 8014596:	e774      	b.n	8014482 <_dtoa_r+0x962>
 8014598:	4638      	mov	r0, r7
 801459a:	e7b9      	b.n	8014510 <_dtoa_r+0x9f0>
 801459c:	2201      	movs	r2, #1
 801459e:	e7e2      	b.n	8014566 <_dtoa_r+0xa46>
 80145a0:	f1b9 0f00 	cmp.w	r9, #0
 80145a4:	db06      	blt.n	80145b4 <_dtoa_r+0xa94>
 80145a6:	9905      	ldr	r1, [sp, #20]
 80145a8:	ea41 0909 	orr.w	r9, r1, r9
 80145ac:	9906      	ldr	r1, [sp, #24]
 80145ae:	ea59 0101 	orrs.w	r1, r9, r1
 80145b2:	d120      	bne.n	80145f6 <_dtoa_r+0xad6>
 80145b4:	2a00      	cmp	r2, #0
 80145b6:	ddec      	ble.n	8014592 <_dtoa_r+0xa72>
 80145b8:	4659      	mov	r1, fp
 80145ba:	2201      	movs	r2, #1
 80145bc:	4620      	mov	r0, r4
 80145be:	9301      	str	r3, [sp, #4]
 80145c0:	f000 fabc 	bl	8014b3c <__lshift>
 80145c4:	4631      	mov	r1, r6
 80145c6:	4683      	mov	fp, r0
 80145c8:	f000 fb24 	bl	8014c14 <__mcmp>
 80145cc:	2800      	cmp	r0, #0
 80145ce:	9b01      	ldr	r3, [sp, #4]
 80145d0:	dc02      	bgt.n	80145d8 <_dtoa_r+0xab8>
 80145d2:	d1de      	bne.n	8014592 <_dtoa_r+0xa72>
 80145d4:	07da      	lsls	r2, r3, #31
 80145d6:	d5dc      	bpl.n	8014592 <_dtoa_r+0xa72>
 80145d8:	2b39      	cmp	r3, #57	; 0x39
 80145da:	d1d8      	bne.n	801458e <_dtoa_r+0xa6e>
 80145dc:	9a02      	ldr	r2, [sp, #8]
 80145de:	2339      	movs	r3, #57	; 0x39
 80145e0:	7013      	strb	r3, [r2, #0]
 80145e2:	462b      	mov	r3, r5
 80145e4:	461d      	mov	r5, r3
 80145e6:	3b01      	subs	r3, #1
 80145e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80145ec:	2a39      	cmp	r2, #57	; 0x39
 80145ee:	d050      	beq.n	8014692 <_dtoa_r+0xb72>
 80145f0:	3201      	adds	r2, #1
 80145f2:	701a      	strb	r2, [r3, #0]
 80145f4:	e745      	b.n	8014482 <_dtoa_r+0x962>
 80145f6:	2a00      	cmp	r2, #0
 80145f8:	dd03      	ble.n	8014602 <_dtoa_r+0xae2>
 80145fa:	2b39      	cmp	r3, #57	; 0x39
 80145fc:	d0ee      	beq.n	80145dc <_dtoa_r+0xabc>
 80145fe:	3301      	adds	r3, #1
 8014600:	e7c7      	b.n	8014592 <_dtoa_r+0xa72>
 8014602:	9a01      	ldr	r2, [sp, #4]
 8014604:	9907      	ldr	r1, [sp, #28]
 8014606:	f802 3c01 	strb.w	r3, [r2, #-1]
 801460a:	428a      	cmp	r2, r1
 801460c:	d02a      	beq.n	8014664 <_dtoa_r+0xb44>
 801460e:	4659      	mov	r1, fp
 8014610:	2300      	movs	r3, #0
 8014612:	220a      	movs	r2, #10
 8014614:	4620      	mov	r0, r4
 8014616:	f000 f8e1 	bl	80147dc <__multadd>
 801461a:	45b8      	cmp	r8, r7
 801461c:	4683      	mov	fp, r0
 801461e:	f04f 0300 	mov.w	r3, #0
 8014622:	f04f 020a 	mov.w	r2, #10
 8014626:	4641      	mov	r1, r8
 8014628:	4620      	mov	r0, r4
 801462a:	d107      	bne.n	801463c <_dtoa_r+0xb1c>
 801462c:	f000 f8d6 	bl	80147dc <__multadd>
 8014630:	4680      	mov	r8, r0
 8014632:	4607      	mov	r7, r0
 8014634:	9b01      	ldr	r3, [sp, #4]
 8014636:	3301      	adds	r3, #1
 8014638:	9301      	str	r3, [sp, #4]
 801463a:	e775      	b.n	8014528 <_dtoa_r+0xa08>
 801463c:	f000 f8ce 	bl	80147dc <__multadd>
 8014640:	4639      	mov	r1, r7
 8014642:	4680      	mov	r8, r0
 8014644:	2300      	movs	r3, #0
 8014646:	220a      	movs	r2, #10
 8014648:	4620      	mov	r0, r4
 801464a:	f000 f8c7 	bl	80147dc <__multadd>
 801464e:	4607      	mov	r7, r0
 8014650:	e7f0      	b.n	8014634 <_dtoa_r+0xb14>
 8014652:	f1b9 0f00 	cmp.w	r9, #0
 8014656:	9a00      	ldr	r2, [sp, #0]
 8014658:	bfcc      	ite	gt
 801465a:	464d      	movgt	r5, r9
 801465c:	2501      	movle	r5, #1
 801465e:	4415      	add	r5, r2
 8014660:	f04f 0800 	mov.w	r8, #0
 8014664:	4659      	mov	r1, fp
 8014666:	2201      	movs	r2, #1
 8014668:	4620      	mov	r0, r4
 801466a:	9301      	str	r3, [sp, #4]
 801466c:	f000 fa66 	bl	8014b3c <__lshift>
 8014670:	4631      	mov	r1, r6
 8014672:	4683      	mov	fp, r0
 8014674:	f000 face 	bl	8014c14 <__mcmp>
 8014678:	2800      	cmp	r0, #0
 801467a:	dcb2      	bgt.n	80145e2 <_dtoa_r+0xac2>
 801467c:	d102      	bne.n	8014684 <_dtoa_r+0xb64>
 801467e:	9b01      	ldr	r3, [sp, #4]
 8014680:	07db      	lsls	r3, r3, #31
 8014682:	d4ae      	bmi.n	80145e2 <_dtoa_r+0xac2>
 8014684:	462b      	mov	r3, r5
 8014686:	461d      	mov	r5, r3
 8014688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801468c:	2a30      	cmp	r2, #48	; 0x30
 801468e:	d0fa      	beq.n	8014686 <_dtoa_r+0xb66>
 8014690:	e6f7      	b.n	8014482 <_dtoa_r+0x962>
 8014692:	9a00      	ldr	r2, [sp, #0]
 8014694:	429a      	cmp	r2, r3
 8014696:	d1a5      	bne.n	80145e4 <_dtoa_r+0xac4>
 8014698:	f10a 0a01 	add.w	sl, sl, #1
 801469c:	2331      	movs	r3, #49	; 0x31
 801469e:	e779      	b.n	8014594 <_dtoa_r+0xa74>
 80146a0:	4b13      	ldr	r3, [pc, #76]	; (80146f0 <_dtoa_r+0xbd0>)
 80146a2:	f7ff baaf 	b.w	8013c04 <_dtoa_r+0xe4>
 80146a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	f47f aa86 	bne.w	8013bba <_dtoa_r+0x9a>
 80146ae:	4b11      	ldr	r3, [pc, #68]	; (80146f4 <_dtoa_r+0xbd4>)
 80146b0:	f7ff baa8 	b.w	8013c04 <_dtoa_r+0xe4>
 80146b4:	f1b9 0f00 	cmp.w	r9, #0
 80146b8:	dc03      	bgt.n	80146c2 <_dtoa_r+0xba2>
 80146ba:	9b05      	ldr	r3, [sp, #20]
 80146bc:	2b02      	cmp	r3, #2
 80146be:	f73f aec9 	bgt.w	8014454 <_dtoa_r+0x934>
 80146c2:	9d00      	ldr	r5, [sp, #0]
 80146c4:	4631      	mov	r1, r6
 80146c6:	4658      	mov	r0, fp
 80146c8:	f7ff f99e 	bl	8013a08 <quorem>
 80146cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80146d0:	f805 3b01 	strb.w	r3, [r5], #1
 80146d4:	9a00      	ldr	r2, [sp, #0]
 80146d6:	1aaa      	subs	r2, r5, r2
 80146d8:	4591      	cmp	r9, r2
 80146da:	ddba      	ble.n	8014652 <_dtoa_r+0xb32>
 80146dc:	4659      	mov	r1, fp
 80146de:	2300      	movs	r3, #0
 80146e0:	220a      	movs	r2, #10
 80146e2:	4620      	mov	r0, r4
 80146e4:	f000 f87a 	bl	80147dc <__multadd>
 80146e8:	4683      	mov	fp, r0
 80146ea:	e7eb      	b.n	80146c4 <_dtoa_r+0xba4>
 80146ec:	08019557 	.word	0x08019557
 80146f0:	080194b0 	.word	0x080194b0
 80146f4:	080194d4 	.word	0x080194d4

080146f8 <_localeconv_r>:
 80146f8:	4800      	ldr	r0, [pc, #0]	; (80146fc <_localeconv_r+0x4>)
 80146fa:	4770      	bx	lr
 80146fc:	200008d4 	.word	0x200008d4

08014700 <__malloc_lock>:
 8014700:	4801      	ldr	r0, [pc, #4]	; (8014708 <__malloc_lock+0x8>)
 8014702:	f000 bd48 	b.w	8015196 <__retarget_lock_acquire_recursive>
 8014706:	bf00      	nop
 8014708:	20001d20 	.word	0x20001d20

0801470c <__malloc_unlock>:
 801470c:	4801      	ldr	r0, [pc, #4]	; (8014714 <__malloc_unlock+0x8>)
 801470e:	f000 bd43 	b.w	8015198 <__retarget_lock_release_recursive>
 8014712:	bf00      	nop
 8014714:	20001d20 	.word	0x20001d20

08014718 <_Balloc>:
 8014718:	b570      	push	{r4, r5, r6, lr}
 801471a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801471c:	4604      	mov	r4, r0
 801471e:	460d      	mov	r5, r1
 8014720:	b976      	cbnz	r6, 8014740 <_Balloc+0x28>
 8014722:	2010      	movs	r0, #16
 8014724:	f7fe fc06 	bl	8012f34 <malloc>
 8014728:	4602      	mov	r2, r0
 801472a:	6260      	str	r0, [r4, #36]	; 0x24
 801472c:	b920      	cbnz	r0, 8014738 <_Balloc+0x20>
 801472e:	4b18      	ldr	r3, [pc, #96]	; (8014790 <_Balloc+0x78>)
 8014730:	4818      	ldr	r0, [pc, #96]	; (8014794 <_Balloc+0x7c>)
 8014732:	2166      	movs	r1, #102	; 0x66
 8014734:	f000 fcfe 	bl	8015134 <__assert_func>
 8014738:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801473c:	6006      	str	r6, [r0, #0]
 801473e:	60c6      	str	r6, [r0, #12]
 8014740:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014742:	68f3      	ldr	r3, [r6, #12]
 8014744:	b183      	cbz	r3, 8014768 <_Balloc+0x50>
 8014746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014748:	68db      	ldr	r3, [r3, #12]
 801474a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801474e:	b9b8      	cbnz	r0, 8014780 <_Balloc+0x68>
 8014750:	2101      	movs	r1, #1
 8014752:	fa01 f605 	lsl.w	r6, r1, r5
 8014756:	1d72      	adds	r2, r6, #5
 8014758:	0092      	lsls	r2, r2, #2
 801475a:	4620      	mov	r0, r4
 801475c:	f000 fb5a 	bl	8014e14 <_calloc_r>
 8014760:	b160      	cbz	r0, 801477c <_Balloc+0x64>
 8014762:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014766:	e00e      	b.n	8014786 <_Balloc+0x6e>
 8014768:	2221      	movs	r2, #33	; 0x21
 801476a:	2104      	movs	r1, #4
 801476c:	4620      	mov	r0, r4
 801476e:	f000 fb51 	bl	8014e14 <_calloc_r>
 8014772:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014774:	60f0      	str	r0, [r6, #12]
 8014776:	68db      	ldr	r3, [r3, #12]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d1e4      	bne.n	8014746 <_Balloc+0x2e>
 801477c:	2000      	movs	r0, #0
 801477e:	bd70      	pop	{r4, r5, r6, pc}
 8014780:	6802      	ldr	r2, [r0, #0]
 8014782:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014786:	2300      	movs	r3, #0
 8014788:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801478c:	e7f7      	b.n	801477e <_Balloc+0x66>
 801478e:	bf00      	nop
 8014790:	080194e1 	.word	0x080194e1
 8014794:	08019568 	.word	0x08019568

08014798 <_Bfree>:
 8014798:	b570      	push	{r4, r5, r6, lr}
 801479a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801479c:	4605      	mov	r5, r0
 801479e:	460c      	mov	r4, r1
 80147a0:	b976      	cbnz	r6, 80147c0 <_Bfree+0x28>
 80147a2:	2010      	movs	r0, #16
 80147a4:	f7fe fbc6 	bl	8012f34 <malloc>
 80147a8:	4602      	mov	r2, r0
 80147aa:	6268      	str	r0, [r5, #36]	; 0x24
 80147ac:	b920      	cbnz	r0, 80147b8 <_Bfree+0x20>
 80147ae:	4b09      	ldr	r3, [pc, #36]	; (80147d4 <_Bfree+0x3c>)
 80147b0:	4809      	ldr	r0, [pc, #36]	; (80147d8 <_Bfree+0x40>)
 80147b2:	218a      	movs	r1, #138	; 0x8a
 80147b4:	f000 fcbe 	bl	8015134 <__assert_func>
 80147b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80147bc:	6006      	str	r6, [r0, #0]
 80147be:	60c6      	str	r6, [r0, #12]
 80147c0:	b13c      	cbz	r4, 80147d2 <_Bfree+0x3a>
 80147c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80147c4:	6862      	ldr	r2, [r4, #4]
 80147c6:	68db      	ldr	r3, [r3, #12]
 80147c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80147cc:	6021      	str	r1, [r4, #0]
 80147ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80147d2:	bd70      	pop	{r4, r5, r6, pc}
 80147d4:	080194e1 	.word	0x080194e1
 80147d8:	08019568 	.word	0x08019568

080147dc <__multadd>:
 80147dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147e0:	690e      	ldr	r6, [r1, #16]
 80147e2:	4607      	mov	r7, r0
 80147e4:	4698      	mov	r8, r3
 80147e6:	460c      	mov	r4, r1
 80147e8:	f101 0014 	add.w	r0, r1, #20
 80147ec:	2300      	movs	r3, #0
 80147ee:	6805      	ldr	r5, [r0, #0]
 80147f0:	b2a9      	uxth	r1, r5
 80147f2:	fb02 8101 	mla	r1, r2, r1, r8
 80147f6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80147fa:	0c2d      	lsrs	r5, r5, #16
 80147fc:	fb02 c505 	mla	r5, r2, r5, ip
 8014800:	b289      	uxth	r1, r1
 8014802:	3301      	adds	r3, #1
 8014804:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8014808:	429e      	cmp	r6, r3
 801480a:	f840 1b04 	str.w	r1, [r0], #4
 801480e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8014812:	dcec      	bgt.n	80147ee <__multadd+0x12>
 8014814:	f1b8 0f00 	cmp.w	r8, #0
 8014818:	d022      	beq.n	8014860 <__multadd+0x84>
 801481a:	68a3      	ldr	r3, [r4, #8]
 801481c:	42b3      	cmp	r3, r6
 801481e:	dc19      	bgt.n	8014854 <__multadd+0x78>
 8014820:	6861      	ldr	r1, [r4, #4]
 8014822:	4638      	mov	r0, r7
 8014824:	3101      	adds	r1, #1
 8014826:	f7ff ff77 	bl	8014718 <_Balloc>
 801482a:	4605      	mov	r5, r0
 801482c:	b928      	cbnz	r0, 801483a <__multadd+0x5e>
 801482e:	4602      	mov	r2, r0
 8014830:	4b0d      	ldr	r3, [pc, #52]	; (8014868 <__multadd+0x8c>)
 8014832:	480e      	ldr	r0, [pc, #56]	; (801486c <__multadd+0x90>)
 8014834:	21b5      	movs	r1, #181	; 0xb5
 8014836:	f000 fc7d 	bl	8015134 <__assert_func>
 801483a:	6922      	ldr	r2, [r4, #16]
 801483c:	3202      	adds	r2, #2
 801483e:	f104 010c 	add.w	r1, r4, #12
 8014842:	0092      	lsls	r2, r2, #2
 8014844:	300c      	adds	r0, #12
 8014846:	f7fe fb85 	bl	8012f54 <memcpy>
 801484a:	4621      	mov	r1, r4
 801484c:	4638      	mov	r0, r7
 801484e:	f7ff ffa3 	bl	8014798 <_Bfree>
 8014852:	462c      	mov	r4, r5
 8014854:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014858:	3601      	adds	r6, #1
 801485a:	f8c3 8014 	str.w	r8, [r3, #20]
 801485e:	6126      	str	r6, [r4, #16]
 8014860:	4620      	mov	r0, r4
 8014862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014866:	bf00      	nop
 8014868:	08019557 	.word	0x08019557
 801486c:	08019568 	.word	0x08019568

08014870 <__hi0bits>:
 8014870:	0c03      	lsrs	r3, r0, #16
 8014872:	041b      	lsls	r3, r3, #16
 8014874:	b9d3      	cbnz	r3, 80148ac <__hi0bits+0x3c>
 8014876:	0400      	lsls	r0, r0, #16
 8014878:	2310      	movs	r3, #16
 801487a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801487e:	bf04      	itt	eq
 8014880:	0200      	lsleq	r0, r0, #8
 8014882:	3308      	addeq	r3, #8
 8014884:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014888:	bf04      	itt	eq
 801488a:	0100      	lsleq	r0, r0, #4
 801488c:	3304      	addeq	r3, #4
 801488e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014892:	bf04      	itt	eq
 8014894:	0080      	lsleq	r0, r0, #2
 8014896:	3302      	addeq	r3, #2
 8014898:	2800      	cmp	r0, #0
 801489a:	db05      	blt.n	80148a8 <__hi0bits+0x38>
 801489c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80148a0:	f103 0301 	add.w	r3, r3, #1
 80148a4:	bf08      	it	eq
 80148a6:	2320      	moveq	r3, #32
 80148a8:	4618      	mov	r0, r3
 80148aa:	4770      	bx	lr
 80148ac:	2300      	movs	r3, #0
 80148ae:	e7e4      	b.n	801487a <__hi0bits+0xa>

080148b0 <__lo0bits>:
 80148b0:	6803      	ldr	r3, [r0, #0]
 80148b2:	f013 0207 	ands.w	r2, r3, #7
 80148b6:	4601      	mov	r1, r0
 80148b8:	d00b      	beq.n	80148d2 <__lo0bits+0x22>
 80148ba:	07da      	lsls	r2, r3, #31
 80148bc:	d424      	bmi.n	8014908 <__lo0bits+0x58>
 80148be:	0798      	lsls	r0, r3, #30
 80148c0:	bf49      	itett	mi
 80148c2:	085b      	lsrmi	r3, r3, #1
 80148c4:	089b      	lsrpl	r3, r3, #2
 80148c6:	2001      	movmi	r0, #1
 80148c8:	600b      	strmi	r3, [r1, #0]
 80148ca:	bf5c      	itt	pl
 80148cc:	600b      	strpl	r3, [r1, #0]
 80148ce:	2002      	movpl	r0, #2
 80148d0:	4770      	bx	lr
 80148d2:	b298      	uxth	r0, r3
 80148d4:	b9b0      	cbnz	r0, 8014904 <__lo0bits+0x54>
 80148d6:	0c1b      	lsrs	r3, r3, #16
 80148d8:	2010      	movs	r0, #16
 80148da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80148de:	bf04      	itt	eq
 80148e0:	0a1b      	lsreq	r3, r3, #8
 80148e2:	3008      	addeq	r0, #8
 80148e4:	071a      	lsls	r2, r3, #28
 80148e6:	bf04      	itt	eq
 80148e8:	091b      	lsreq	r3, r3, #4
 80148ea:	3004      	addeq	r0, #4
 80148ec:	079a      	lsls	r2, r3, #30
 80148ee:	bf04      	itt	eq
 80148f0:	089b      	lsreq	r3, r3, #2
 80148f2:	3002      	addeq	r0, #2
 80148f4:	07da      	lsls	r2, r3, #31
 80148f6:	d403      	bmi.n	8014900 <__lo0bits+0x50>
 80148f8:	085b      	lsrs	r3, r3, #1
 80148fa:	f100 0001 	add.w	r0, r0, #1
 80148fe:	d005      	beq.n	801490c <__lo0bits+0x5c>
 8014900:	600b      	str	r3, [r1, #0]
 8014902:	4770      	bx	lr
 8014904:	4610      	mov	r0, r2
 8014906:	e7e8      	b.n	80148da <__lo0bits+0x2a>
 8014908:	2000      	movs	r0, #0
 801490a:	4770      	bx	lr
 801490c:	2020      	movs	r0, #32
 801490e:	4770      	bx	lr

08014910 <__i2b>:
 8014910:	b510      	push	{r4, lr}
 8014912:	460c      	mov	r4, r1
 8014914:	2101      	movs	r1, #1
 8014916:	f7ff feff 	bl	8014718 <_Balloc>
 801491a:	4602      	mov	r2, r0
 801491c:	b928      	cbnz	r0, 801492a <__i2b+0x1a>
 801491e:	4b05      	ldr	r3, [pc, #20]	; (8014934 <__i2b+0x24>)
 8014920:	4805      	ldr	r0, [pc, #20]	; (8014938 <__i2b+0x28>)
 8014922:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014926:	f000 fc05 	bl	8015134 <__assert_func>
 801492a:	2301      	movs	r3, #1
 801492c:	6144      	str	r4, [r0, #20]
 801492e:	6103      	str	r3, [r0, #16]
 8014930:	bd10      	pop	{r4, pc}
 8014932:	bf00      	nop
 8014934:	08019557 	.word	0x08019557
 8014938:	08019568 	.word	0x08019568

0801493c <__multiply>:
 801493c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014940:	4614      	mov	r4, r2
 8014942:	690a      	ldr	r2, [r1, #16]
 8014944:	6923      	ldr	r3, [r4, #16]
 8014946:	429a      	cmp	r2, r3
 8014948:	bfb8      	it	lt
 801494a:	460b      	movlt	r3, r1
 801494c:	460d      	mov	r5, r1
 801494e:	bfbc      	itt	lt
 8014950:	4625      	movlt	r5, r4
 8014952:	461c      	movlt	r4, r3
 8014954:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014958:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801495c:	68ab      	ldr	r3, [r5, #8]
 801495e:	6869      	ldr	r1, [r5, #4]
 8014960:	eb0a 0709 	add.w	r7, sl, r9
 8014964:	42bb      	cmp	r3, r7
 8014966:	b085      	sub	sp, #20
 8014968:	bfb8      	it	lt
 801496a:	3101      	addlt	r1, #1
 801496c:	f7ff fed4 	bl	8014718 <_Balloc>
 8014970:	b930      	cbnz	r0, 8014980 <__multiply+0x44>
 8014972:	4602      	mov	r2, r0
 8014974:	4b42      	ldr	r3, [pc, #264]	; (8014a80 <__multiply+0x144>)
 8014976:	4843      	ldr	r0, [pc, #268]	; (8014a84 <__multiply+0x148>)
 8014978:	f240 115d 	movw	r1, #349	; 0x15d
 801497c:	f000 fbda 	bl	8015134 <__assert_func>
 8014980:	f100 0614 	add.w	r6, r0, #20
 8014984:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014988:	4633      	mov	r3, r6
 801498a:	2200      	movs	r2, #0
 801498c:	4543      	cmp	r3, r8
 801498e:	d31e      	bcc.n	80149ce <__multiply+0x92>
 8014990:	f105 0c14 	add.w	ip, r5, #20
 8014994:	f104 0314 	add.w	r3, r4, #20
 8014998:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801499c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80149a0:	9202      	str	r2, [sp, #8]
 80149a2:	ebac 0205 	sub.w	r2, ip, r5
 80149a6:	3a15      	subs	r2, #21
 80149a8:	f022 0203 	bic.w	r2, r2, #3
 80149ac:	3204      	adds	r2, #4
 80149ae:	f105 0115 	add.w	r1, r5, #21
 80149b2:	458c      	cmp	ip, r1
 80149b4:	bf38      	it	cc
 80149b6:	2204      	movcc	r2, #4
 80149b8:	9201      	str	r2, [sp, #4]
 80149ba:	9a02      	ldr	r2, [sp, #8]
 80149bc:	9303      	str	r3, [sp, #12]
 80149be:	429a      	cmp	r2, r3
 80149c0:	d808      	bhi.n	80149d4 <__multiply+0x98>
 80149c2:	2f00      	cmp	r7, #0
 80149c4:	dc55      	bgt.n	8014a72 <__multiply+0x136>
 80149c6:	6107      	str	r7, [r0, #16]
 80149c8:	b005      	add	sp, #20
 80149ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149ce:	f843 2b04 	str.w	r2, [r3], #4
 80149d2:	e7db      	b.n	801498c <__multiply+0x50>
 80149d4:	f8b3 a000 	ldrh.w	sl, [r3]
 80149d8:	f1ba 0f00 	cmp.w	sl, #0
 80149dc:	d020      	beq.n	8014a20 <__multiply+0xe4>
 80149de:	f105 0e14 	add.w	lr, r5, #20
 80149e2:	46b1      	mov	r9, r6
 80149e4:	2200      	movs	r2, #0
 80149e6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80149ea:	f8d9 b000 	ldr.w	fp, [r9]
 80149ee:	b2a1      	uxth	r1, r4
 80149f0:	fa1f fb8b 	uxth.w	fp, fp
 80149f4:	fb0a b101 	mla	r1, sl, r1, fp
 80149f8:	4411      	add	r1, r2
 80149fa:	f8d9 2000 	ldr.w	r2, [r9]
 80149fe:	0c24      	lsrs	r4, r4, #16
 8014a00:	0c12      	lsrs	r2, r2, #16
 8014a02:	fb0a 2404 	mla	r4, sl, r4, r2
 8014a06:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8014a0a:	b289      	uxth	r1, r1
 8014a0c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014a10:	45f4      	cmp	ip, lr
 8014a12:	f849 1b04 	str.w	r1, [r9], #4
 8014a16:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8014a1a:	d8e4      	bhi.n	80149e6 <__multiply+0xaa>
 8014a1c:	9901      	ldr	r1, [sp, #4]
 8014a1e:	5072      	str	r2, [r6, r1]
 8014a20:	9a03      	ldr	r2, [sp, #12]
 8014a22:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014a26:	3304      	adds	r3, #4
 8014a28:	f1b9 0f00 	cmp.w	r9, #0
 8014a2c:	d01f      	beq.n	8014a6e <__multiply+0x132>
 8014a2e:	6834      	ldr	r4, [r6, #0]
 8014a30:	f105 0114 	add.w	r1, r5, #20
 8014a34:	46b6      	mov	lr, r6
 8014a36:	f04f 0a00 	mov.w	sl, #0
 8014a3a:	880a      	ldrh	r2, [r1, #0]
 8014a3c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014a40:	fb09 b202 	mla	r2, r9, r2, fp
 8014a44:	4492      	add	sl, r2
 8014a46:	b2a4      	uxth	r4, r4
 8014a48:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014a4c:	f84e 4b04 	str.w	r4, [lr], #4
 8014a50:	f851 4b04 	ldr.w	r4, [r1], #4
 8014a54:	f8be 2000 	ldrh.w	r2, [lr]
 8014a58:	0c24      	lsrs	r4, r4, #16
 8014a5a:	fb09 2404 	mla	r4, r9, r4, r2
 8014a5e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014a62:	458c      	cmp	ip, r1
 8014a64:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014a68:	d8e7      	bhi.n	8014a3a <__multiply+0xfe>
 8014a6a:	9a01      	ldr	r2, [sp, #4]
 8014a6c:	50b4      	str	r4, [r6, r2]
 8014a6e:	3604      	adds	r6, #4
 8014a70:	e7a3      	b.n	80149ba <__multiply+0x7e>
 8014a72:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d1a5      	bne.n	80149c6 <__multiply+0x8a>
 8014a7a:	3f01      	subs	r7, #1
 8014a7c:	e7a1      	b.n	80149c2 <__multiply+0x86>
 8014a7e:	bf00      	nop
 8014a80:	08019557 	.word	0x08019557
 8014a84:	08019568 	.word	0x08019568

08014a88 <__pow5mult>:
 8014a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a8c:	4615      	mov	r5, r2
 8014a8e:	f012 0203 	ands.w	r2, r2, #3
 8014a92:	4606      	mov	r6, r0
 8014a94:	460f      	mov	r7, r1
 8014a96:	d007      	beq.n	8014aa8 <__pow5mult+0x20>
 8014a98:	4c25      	ldr	r4, [pc, #148]	; (8014b30 <__pow5mult+0xa8>)
 8014a9a:	3a01      	subs	r2, #1
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014aa2:	f7ff fe9b 	bl	80147dc <__multadd>
 8014aa6:	4607      	mov	r7, r0
 8014aa8:	10ad      	asrs	r5, r5, #2
 8014aaa:	d03d      	beq.n	8014b28 <__pow5mult+0xa0>
 8014aac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014aae:	b97c      	cbnz	r4, 8014ad0 <__pow5mult+0x48>
 8014ab0:	2010      	movs	r0, #16
 8014ab2:	f7fe fa3f 	bl	8012f34 <malloc>
 8014ab6:	4602      	mov	r2, r0
 8014ab8:	6270      	str	r0, [r6, #36]	; 0x24
 8014aba:	b928      	cbnz	r0, 8014ac8 <__pow5mult+0x40>
 8014abc:	4b1d      	ldr	r3, [pc, #116]	; (8014b34 <__pow5mult+0xac>)
 8014abe:	481e      	ldr	r0, [pc, #120]	; (8014b38 <__pow5mult+0xb0>)
 8014ac0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014ac4:	f000 fb36 	bl	8015134 <__assert_func>
 8014ac8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014acc:	6004      	str	r4, [r0, #0]
 8014ace:	60c4      	str	r4, [r0, #12]
 8014ad0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014ad4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014ad8:	b94c      	cbnz	r4, 8014aee <__pow5mult+0x66>
 8014ada:	f240 2171 	movw	r1, #625	; 0x271
 8014ade:	4630      	mov	r0, r6
 8014ae0:	f7ff ff16 	bl	8014910 <__i2b>
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	f8c8 0008 	str.w	r0, [r8, #8]
 8014aea:	4604      	mov	r4, r0
 8014aec:	6003      	str	r3, [r0, #0]
 8014aee:	f04f 0900 	mov.w	r9, #0
 8014af2:	07eb      	lsls	r3, r5, #31
 8014af4:	d50a      	bpl.n	8014b0c <__pow5mult+0x84>
 8014af6:	4639      	mov	r1, r7
 8014af8:	4622      	mov	r2, r4
 8014afa:	4630      	mov	r0, r6
 8014afc:	f7ff ff1e 	bl	801493c <__multiply>
 8014b00:	4639      	mov	r1, r7
 8014b02:	4680      	mov	r8, r0
 8014b04:	4630      	mov	r0, r6
 8014b06:	f7ff fe47 	bl	8014798 <_Bfree>
 8014b0a:	4647      	mov	r7, r8
 8014b0c:	106d      	asrs	r5, r5, #1
 8014b0e:	d00b      	beq.n	8014b28 <__pow5mult+0xa0>
 8014b10:	6820      	ldr	r0, [r4, #0]
 8014b12:	b938      	cbnz	r0, 8014b24 <__pow5mult+0x9c>
 8014b14:	4622      	mov	r2, r4
 8014b16:	4621      	mov	r1, r4
 8014b18:	4630      	mov	r0, r6
 8014b1a:	f7ff ff0f 	bl	801493c <__multiply>
 8014b1e:	6020      	str	r0, [r4, #0]
 8014b20:	f8c0 9000 	str.w	r9, [r0]
 8014b24:	4604      	mov	r4, r0
 8014b26:	e7e4      	b.n	8014af2 <__pow5mult+0x6a>
 8014b28:	4638      	mov	r0, r7
 8014b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b2e:	bf00      	nop
 8014b30:	080196b8 	.word	0x080196b8
 8014b34:	080194e1 	.word	0x080194e1
 8014b38:	08019568 	.word	0x08019568

08014b3c <__lshift>:
 8014b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b40:	460c      	mov	r4, r1
 8014b42:	6849      	ldr	r1, [r1, #4]
 8014b44:	6923      	ldr	r3, [r4, #16]
 8014b46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014b4a:	68a3      	ldr	r3, [r4, #8]
 8014b4c:	4607      	mov	r7, r0
 8014b4e:	4691      	mov	r9, r2
 8014b50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014b54:	f108 0601 	add.w	r6, r8, #1
 8014b58:	42b3      	cmp	r3, r6
 8014b5a:	db0b      	blt.n	8014b74 <__lshift+0x38>
 8014b5c:	4638      	mov	r0, r7
 8014b5e:	f7ff fddb 	bl	8014718 <_Balloc>
 8014b62:	4605      	mov	r5, r0
 8014b64:	b948      	cbnz	r0, 8014b7a <__lshift+0x3e>
 8014b66:	4602      	mov	r2, r0
 8014b68:	4b28      	ldr	r3, [pc, #160]	; (8014c0c <__lshift+0xd0>)
 8014b6a:	4829      	ldr	r0, [pc, #164]	; (8014c10 <__lshift+0xd4>)
 8014b6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014b70:	f000 fae0 	bl	8015134 <__assert_func>
 8014b74:	3101      	adds	r1, #1
 8014b76:	005b      	lsls	r3, r3, #1
 8014b78:	e7ee      	b.n	8014b58 <__lshift+0x1c>
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	f100 0114 	add.w	r1, r0, #20
 8014b80:	f100 0210 	add.w	r2, r0, #16
 8014b84:	4618      	mov	r0, r3
 8014b86:	4553      	cmp	r3, sl
 8014b88:	db33      	blt.n	8014bf2 <__lshift+0xb6>
 8014b8a:	6920      	ldr	r0, [r4, #16]
 8014b8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014b90:	f104 0314 	add.w	r3, r4, #20
 8014b94:	f019 091f 	ands.w	r9, r9, #31
 8014b98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014b9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014ba0:	d02b      	beq.n	8014bfa <__lshift+0xbe>
 8014ba2:	f1c9 0e20 	rsb	lr, r9, #32
 8014ba6:	468a      	mov	sl, r1
 8014ba8:	2200      	movs	r2, #0
 8014baa:	6818      	ldr	r0, [r3, #0]
 8014bac:	fa00 f009 	lsl.w	r0, r0, r9
 8014bb0:	4302      	orrs	r2, r0
 8014bb2:	f84a 2b04 	str.w	r2, [sl], #4
 8014bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bba:	459c      	cmp	ip, r3
 8014bbc:	fa22 f20e 	lsr.w	r2, r2, lr
 8014bc0:	d8f3      	bhi.n	8014baa <__lshift+0x6e>
 8014bc2:	ebac 0304 	sub.w	r3, ip, r4
 8014bc6:	3b15      	subs	r3, #21
 8014bc8:	f023 0303 	bic.w	r3, r3, #3
 8014bcc:	3304      	adds	r3, #4
 8014bce:	f104 0015 	add.w	r0, r4, #21
 8014bd2:	4584      	cmp	ip, r0
 8014bd4:	bf38      	it	cc
 8014bd6:	2304      	movcc	r3, #4
 8014bd8:	50ca      	str	r2, [r1, r3]
 8014bda:	b10a      	cbz	r2, 8014be0 <__lshift+0xa4>
 8014bdc:	f108 0602 	add.w	r6, r8, #2
 8014be0:	3e01      	subs	r6, #1
 8014be2:	4638      	mov	r0, r7
 8014be4:	612e      	str	r6, [r5, #16]
 8014be6:	4621      	mov	r1, r4
 8014be8:	f7ff fdd6 	bl	8014798 <_Bfree>
 8014bec:	4628      	mov	r0, r5
 8014bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bf2:	f842 0f04 	str.w	r0, [r2, #4]!
 8014bf6:	3301      	adds	r3, #1
 8014bf8:	e7c5      	b.n	8014b86 <__lshift+0x4a>
 8014bfa:	3904      	subs	r1, #4
 8014bfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c00:	f841 2f04 	str.w	r2, [r1, #4]!
 8014c04:	459c      	cmp	ip, r3
 8014c06:	d8f9      	bhi.n	8014bfc <__lshift+0xc0>
 8014c08:	e7ea      	b.n	8014be0 <__lshift+0xa4>
 8014c0a:	bf00      	nop
 8014c0c:	08019557 	.word	0x08019557
 8014c10:	08019568 	.word	0x08019568

08014c14 <__mcmp>:
 8014c14:	b530      	push	{r4, r5, lr}
 8014c16:	6902      	ldr	r2, [r0, #16]
 8014c18:	690c      	ldr	r4, [r1, #16]
 8014c1a:	1b12      	subs	r2, r2, r4
 8014c1c:	d10e      	bne.n	8014c3c <__mcmp+0x28>
 8014c1e:	f100 0314 	add.w	r3, r0, #20
 8014c22:	3114      	adds	r1, #20
 8014c24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014c28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014c2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014c30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014c34:	42a5      	cmp	r5, r4
 8014c36:	d003      	beq.n	8014c40 <__mcmp+0x2c>
 8014c38:	d305      	bcc.n	8014c46 <__mcmp+0x32>
 8014c3a:	2201      	movs	r2, #1
 8014c3c:	4610      	mov	r0, r2
 8014c3e:	bd30      	pop	{r4, r5, pc}
 8014c40:	4283      	cmp	r3, r0
 8014c42:	d3f3      	bcc.n	8014c2c <__mcmp+0x18>
 8014c44:	e7fa      	b.n	8014c3c <__mcmp+0x28>
 8014c46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014c4a:	e7f7      	b.n	8014c3c <__mcmp+0x28>

08014c4c <__mdiff>:
 8014c4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c50:	460c      	mov	r4, r1
 8014c52:	4606      	mov	r6, r0
 8014c54:	4611      	mov	r1, r2
 8014c56:	4620      	mov	r0, r4
 8014c58:	4617      	mov	r7, r2
 8014c5a:	f7ff ffdb 	bl	8014c14 <__mcmp>
 8014c5e:	1e05      	subs	r5, r0, #0
 8014c60:	d110      	bne.n	8014c84 <__mdiff+0x38>
 8014c62:	4629      	mov	r1, r5
 8014c64:	4630      	mov	r0, r6
 8014c66:	f7ff fd57 	bl	8014718 <_Balloc>
 8014c6a:	b930      	cbnz	r0, 8014c7a <__mdiff+0x2e>
 8014c6c:	4b39      	ldr	r3, [pc, #228]	; (8014d54 <__mdiff+0x108>)
 8014c6e:	4602      	mov	r2, r0
 8014c70:	f240 2132 	movw	r1, #562	; 0x232
 8014c74:	4838      	ldr	r0, [pc, #224]	; (8014d58 <__mdiff+0x10c>)
 8014c76:	f000 fa5d 	bl	8015134 <__assert_func>
 8014c7a:	2301      	movs	r3, #1
 8014c7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014c80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c84:	bfa4      	itt	ge
 8014c86:	463b      	movge	r3, r7
 8014c88:	4627      	movge	r7, r4
 8014c8a:	4630      	mov	r0, r6
 8014c8c:	6879      	ldr	r1, [r7, #4]
 8014c8e:	bfa6      	itte	ge
 8014c90:	461c      	movge	r4, r3
 8014c92:	2500      	movge	r5, #0
 8014c94:	2501      	movlt	r5, #1
 8014c96:	f7ff fd3f 	bl	8014718 <_Balloc>
 8014c9a:	b920      	cbnz	r0, 8014ca6 <__mdiff+0x5a>
 8014c9c:	4b2d      	ldr	r3, [pc, #180]	; (8014d54 <__mdiff+0x108>)
 8014c9e:	4602      	mov	r2, r0
 8014ca0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014ca4:	e7e6      	b.n	8014c74 <__mdiff+0x28>
 8014ca6:	693e      	ldr	r6, [r7, #16]
 8014ca8:	60c5      	str	r5, [r0, #12]
 8014caa:	6925      	ldr	r5, [r4, #16]
 8014cac:	f107 0114 	add.w	r1, r7, #20
 8014cb0:	f104 0914 	add.w	r9, r4, #20
 8014cb4:	f100 0e14 	add.w	lr, r0, #20
 8014cb8:	f107 0210 	add.w	r2, r7, #16
 8014cbc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014cc0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8014cc4:	46f2      	mov	sl, lr
 8014cc6:	2700      	movs	r7, #0
 8014cc8:	f859 3b04 	ldr.w	r3, [r9], #4
 8014ccc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014cd0:	fa1f f883 	uxth.w	r8, r3
 8014cd4:	fa17 f78b 	uxtah	r7, r7, fp
 8014cd8:	0c1b      	lsrs	r3, r3, #16
 8014cda:	eba7 0808 	sub.w	r8, r7, r8
 8014cde:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014ce2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014ce6:	fa1f f888 	uxth.w	r8, r8
 8014cea:	141f      	asrs	r7, r3, #16
 8014cec:	454d      	cmp	r5, r9
 8014cee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014cf2:	f84a 3b04 	str.w	r3, [sl], #4
 8014cf6:	d8e7      	bhi.n	8014cc8 <__mdiff+0x7c>
 8014cf8:	1b2b      	subs	r3, r5, r4
 8014cfa:	3b15      	subs	r3, #21
 8014cfc:	f023 0303 	bic.w	r3, r3, #3
 8014d00:	3304      	adds	r3, #4
 8014d02:	3415      	adds	r4, #21
 8014d04:	42a5      	cmp	r5, r4
 8014d06:	bf38      	it	cc
 8014d08:	2304      	movcc	r3, #4
 8014d0a:	4419      	add	r1, r3
 8014d0c:	4473      	add	r3, lr
 8014d0e:	469e      	mov	lr, r3
 8014d10:	460d      	mov	r5, r1
 8014d12:	4565      	cmp	r5, ip
 8014d14:	d30e      	bcc.n	8014d34 <__mdiff+0xe8>
 8014d16:	f10c 0203 	add.w	r2, ip, #3
 8014d1a:	1a52      	subs	r2, r2, r1
 8014d1c:	f022 0203 	bic.w	r2, r2, #3
 8014d20:	3903      	subs	r1, #3
 8014d22:	458c      	cmp	ip, r1
 8014d24:	bf38      	it	cc
 8014d26:	2200      	movcc	r2, #0
 8014d28:	441a      	add	r2, r3
 8014d2a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014d2e:	b17b      	cbz	r3, 8014d50 <__mdiff+0x104>
 8014d30:	6106      	str	r6, [r0, #16]
 8014d32:	e7a5      	b.n	8014c80 <__mdiff+0x34>
 8014d34:	f855 8b04 	ldr.w	r8, [r5], #4
 8014d38:	fa17 f488 	uxtah	r4, r7, r8
 8014d3c:	1422      	asrs	r2, r4, #16
 8014d3e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8014d42:	b2a4      	uxth	r4, r4
 8014d44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014d48:	f84e 4b04 	str.w	r4, [lr], #4
 8014d4c:	1417      	asrs	r7, r2, #16
 8014d4e:	e7e0      	b.n	8014d12 <__mdiff+0xc6>
 8014d50:	3e01      	subs	r6, #1
 8014d52:	e7ea      	b.n	8014d2a <__mdiff+0xde>
 8014d54:	08019557 	.word	0x08019557
 8014d58:	08019568 	.word	0x08019568

08014d5c <__d2b>:
 8014d5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014d60:	4689      	mov	r9, r1
 8014d62:	2101      	movs	r1, #1
 8014d64:	ec57 6b10 	vmov	r6, r7, d0
 8014d68:	4690      	mov	r8, r2
 8014d6a:	f7ff fcd5 	bl	8014718 <_Balloc>
 8014d6e:	4604      	mov	r4, r0
 8014d70:	b930      	cbnz	r0, 8014d80 <__d2b+0x24>
 8014d72:	4602      	mov	r2, r0
 8014d74:	4b25      	ldr	r3, [pc, #148]	; (8014e0c <__d2b+0xb0>)
 8014d76:	4826      	ldr	r0, [pc, #152]	; (8014e10 <__d2b+0xb4>)
 8014d78:	f240 310a 	movw	r1, #778	; 0x30a
 8014d7c:	f000 f9da 	bl	8015134 <__assert_func>
 8014d80:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014d84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014d88:	bb35      	cbnz	r5, 8014dd8 <__d2b+0x7c>
 8014d8a:	2e00      	cmp	r6, #0
 8014d8c:	9301      	str	r3, [sp, #4]
 8014d8e:	d028      	beq.n	8014de2 <__d2b+0x86>
 8014d90:	4668      	mov	r0, sp
 8014d92:	9600      	str	r6, [sp, #0]
 8014d94:	f7ff fd8c 	bl	80148b0 <__lo0bits>
 8014d98:	9900      	ldr	r1, [sp, #0]
 8014d9a:	b300      	cbz	r0, 8014dde <__d2b+0x82>
 8014d9c:	9a01      	ldr	r2, [sp, #4]
 8014d9e:	f1c0 0320 	rsb	r3, r0, #32
 8014da2:	fa02 f303 	lsl.w	r3, r2, r3
 8014da6:	430b      	orrs	r3, r1
 8014da8:	40c2      	lsrs	r2, r0
 8014daa:	6163      	str	r3, [r4, #20]
 8014dac:	9201      	str	r2, [sp, #4]
 8014dae:	9b01      	ldr	r3, [sp, #4]
 8014db0:	61a3      	str	r3, [r4, #24]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	bf14      	ite	ne
 8014db6:	2202      	movne	r2, #2
 8014db8:	2201      	moveq	r2, #1
 8014dba:	6122      	str	r2, [r4, #16]
 8014dbc:	b1d5      	cbz	r5, 8014df4 <__d2b+0x98>
 8014dbe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014dc2:	4405      	add	r5, r0
 8014dc4:	f8c9 5000 	str.w	r5, [r9]
 8014dc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014dcc:	f8c8 0000 	str.w	r0, [r8]
 8014dd0:	4620      	mov	r0, r4
 8014dd2:	b003      	add	sp, #12
 8014dd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014dd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014ddc:	e7d5      	b.n	8014d8a <__d2b+0x2e>
 8014dde:	6161      	str	r1, [r4, #20]
 8014de0:	e7e5      	b.n	8014dae <__d2b+0x52>
 8014de2:	a801      	add	r0, sp, #4
 8014de4:	f7ff fd64 	bl	80148b0 <__lo0bits>
 8014de8:	9b01      	ldr	r3, [sp, #4]
 8014dea:	6163      	str	r3, [r4, #20]
 8014dec:	2201      	movs	r2, #1
 8014dee:	6122      	str	r2, [r4, #16]
 8014df0:	3020      	adds	r0, #32
 8014df2:	e7e3      	b.n	8014dbc <__d2b+0x60>
 8014df4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014df8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014dfc:	f8c9 0000 	str.w	r0, [r9]
 8014e00:	6918      	ldr	r0, [r3, #16]
 8014e02:	f7ff fd35 	bl	8014870 <__hi0bits>
 8014e06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014e0a:	e7df      	b.n	8014dcc <__d2b+0x70>
 8014e0c:	08019557 	.word	0x08019557
 8014e10:	08019568 	.word	0x08019568

08014e14 <_calloc_r>:
 8014e14:	b513      	push	{r0, r1, r4, lr}
 8014e16:	434a      	muls	r2, r1
 8014e18:	4611      	mov	r1, r2
 8014e1a:	9201      	str	r2, [sp, #4]
 8014e1c:	f7fe f900 	bl	8013020 <_malloc_r>
 8014e20:	4604      	mov	r4, r0
 8014e22:	b118      	cbz	r0, 8014e2c <_calloc_r+0x18>
 8014e24:	9a01      	ldr	r2, [sp, #4]
 8014e26:	2100      	movs	r1, #0
 8014e28:	f7fe f8a2 	bl	8012f70 <memset>
 8014e2c:	4620      	mov	r0, r4
 8014e2e:	b002      	add	sp, #8
 8014e30:	bd10      	pop	{r4, pc}

08014e32 <_realloc_r>:
 8014e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e34:	4607      	mov	r7, r0
 8014e36:	4614      	mov	r4, r2
 8014e38:	460e      	mov	r6, r1
 8014e3a:	b921      	cbnz	r1, 8014e46 <_realloc_r+0x14>
 8014e3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014e40:	4611      	mov	r1, r2
 8014e42:	f7fe b8ed 	b.w	8013020 <_malloc_r>
 8014e46:	b922      	cbnz	r2, 8014e52 <_realloc_r+0x20>
 8014e48:	f7fe f89a 	bl	8012f80 <_free_r>
 8014e4c:	4625      	mov	r5, r4
 8014e4e:	4628      	mov	r0, r5
 8014e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e52:	f000 f9ce 	bl	80151f2 <_malloc_usable_size_r>
 8014e56:	42a0      	cmp	r0, r4
 8014e58:	d20f      	bcs.n	8014e7a <_realloc_r+0x48>
 8014e5a:	4621      	mov	r1, r4
 8014e5c:	4638      	mov	r0, r7
 8014e5e:	f7fe f8df 	bl	8013020 <_malloc_r>
 8014e62:	4605      	mov	r5, r0
 8014e64:	2800      	cmp	r0, #0
 8014e66:	d0f2      	beq.n	8014e4e <_realloc_r+0x1c>
 8014e68:	4631      	mov	r1, r6
 8014e6a:	4622      	mov	r2, r4
 8014e6c:	f7fe f872 	bl	8012f54 <memcpy>
 8014e70:	4631      	mov	r1, r6
 8014e72:	4638      	mov	r0, r7
 8014e74:	f7fe f884 	bl	8012f80 <_free_r>
 8014e78:	e7e9      	b.n	8014e4e <_realloc_r+0x1c>
 8014e7a:	4635      	mov	r5, r6
 8014e7c:	e7e7      	b.n	8014e4e <_realloc_r+0x1c>

08014e7e <__ssputs_r>:
 8014e7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e82:	688e      	ldr	r6, [r1, #8]
 8014e84:	429e      	cmp	r6, r3
 8014e86:	4682      	mov	sl, r0
 8014e88:	460c      	mov	r4, r1
 8014e8a:	4690      	mov	r8, r2
 8014e8c:	461f      	mov	r7, r3
 8014e8e:	d838      	bhi.n	8014f02 <__ssputs_r+0x84>
 8014e90:	898a      	ldrh	r2, [r1, #12]
 8014e92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014e96:	d032      	beq.n	8014efe <__ssputs_r+0x80>
 8014e98:	6825      	ldr	r5, [r4, #0]
 8014e9a:	6909      	ldr	r1, [r1, #16]
 8014e9c:	eba5 0901 	sub.w	r9, r5, r1
 8014ea0:	6965      	ldr	r5, [r4, #20]
 8014ea2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014ea6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014eaa:	3301      	adds	r3, #1
 8014eac:	444b      	add	r3, r9
 8014eae:	106d      	asrs	r5, r5, #1
 8014eb0:	429d      	cmp	r5, r3
 8014eb2:	bf38      	it	cc
 8014eb4:	461d      	movcc	r5, r3
 8014eb6:	0553      	lsls	r3, r2, #21
 8014eb8:	d531      	bpl.n	8014f1e <__ssputs_r+0xa0>
 8014eba:	4629      	mov	r1, r5
 8014ebc:	f7fe f8b0 	bl	8013020 <_malloc_r>
 8014ec0:	4606      	mov	r6, r0
 8014ec2:	b950      	cbnz	r0, 8014eda <__ssputs_r+0x5c>
 8014ec4:	230c      	movs	r3, #12
 8014ec6:	f8ca 3000 	str.w	r3, [sl]
 8014eca:	89a3      	ldrh	r3, [r4, #12]
 8014ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ed0:	81a3      	strh	r3, [r4, #12]
 8014ed2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014eda:	6921      	ldr	r1, [r4, #16]
 8014edc:	464a      	mov	r2, r9
 8014ede:	f7fe f839 	bl	8012f54 <memcpy>
 8014ee2:	89a3      	ldrh	r3, [r4, #12]
 8014ee4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014eec:	81a3      	strh	r3, [r4, #12]
 8014eee:	6126      	str	r6, [r4, #16]
 8014ef0:	6165      	str	r5, [r4, #20]
 8014ef2:	444e      	add	r6, r9
 8014ef4:	eba5 0509 	sub.w	r5, r5, r9
 8014ef8:	6026      	str	r6, [r4, #0]
 8014efa:	60a5      	str	r5, [r4, #8]
 8014efc:	463e      	mov	r6, r7
 8014efe:	42be      	cmp	r6, r7
 8014f00:	d900      	bls.n	8014f04 <__ssputs_r+0x86>
 8014f02:	463e      	mov	r6, r7
 8014f04:	4632      	mov	r2, r6
 8014f06:	6820      	ldr	r0, [r4, #0]
 8014f08:	4641      	mov	r1, r8
 8014f0a:	f000 f958 	bl	80151be <memmove>
 8014f0e:	68a3      	ldr	r3, [r4, #8]
 8014f10:	6822      	ldr	r2, [r4, #0]
 8014f12:	1b9b      	subs	r3, r3, r6
 8014f14:	4432      	add	r2, r6
 8014f16:	60a3      	str	r3, [r4, #8]
 8014f18:	6022      	str	r2, [r4, #0]
 8014f1a:	2000      	movs	r0, #0
 8014f1c:	e7db      	b.n	8014ed6 <__ssputs_r+0x58>
 8014f1e:	462a      	mov	r2, r5
 8014f20:	f7ff ff87 	bl	8014e32 <_realloc_r>
 8014f24:	4606      	mov	r6, r0
 8014f26:	2800      	cmp	r0, #0
 8014f28:	d1e1      	bne.n	8014eee <__ssputs_r+0x70>
 8014f2a:	6921      	ldr	r1, [r4, #16]
 8014f2c:	4650      	mov	r0, sl
 8014f2e:	f7fe f827 	bl	8012f80 <_free_r>
 8014f32:	e7c7      	b.n	8014ec4 <__ssputs_r+0x46>

08014f34 <_svfiprintf_r>:
 8014f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f38:	4698      	mov	r8, r3
 8014f3a:	898b      	ldrh	r3, [r1, #12]
 8014f3c:	061b      	lsls	r3, r3, #24
 8014f3e:	b09d      	sub	sp, #116	; 0x74
 8014f40:	4607      	mov	r7, r0
 8014f42:	460d      	mov	r5, r1
 8014f44:	4614      	mov	r4, r2
 8014f46:	d50e      	bpl.n	8014f66 <_svfiprintf_r+0x32>
 8014f48:	690b      	ldr	r3, [r1, #16]
 8014f4a:	b963      	cbnz	r3, 8014f66 <_svfiprintf_r+0x32>
 8014f4c:	2140      	movs	r1, #64	; 0x40
 8014f4e:	f7fe f867 	bl	8013020 <_malloc_r>
 8014f52:	6028      	str	r0, [r5, #0]
 8014f54:	6128      	str	r0, [r5, #16]
 8014f56:	b920      	cbnz	r0, 8014f62 <_svfiprintf_r+0x2e>
 8014f58:	230c      	movs	r3, #12
 8014f5a:	603b      	str	r3, [r7, #0]
 8014f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f60:	e0d1      	b.n	8015106 <_svfiprintf_r+0x1d2>
 8014f62:	2340      	movs	r3, #64	; 0x40
 8014f64:	616b      	str	r3, [r5, #20]
 8014f66:	2300      	movs	r3, #0
 8014f68:	9309      	str	r3, [sp, #36]	; 0x24
 8014f6a:	2320      	movs	r3, #32
 8014f6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f70:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f74:	2330      	movs	r3, #48	; 0x30
 8014f76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015120 <_svfiprintf_r+0x1ec>
 8014f7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014f7e:	f04f 0901 	mov.w	r9, #1
 8014f82:	4623      	mov	r3, r4
 8014f84:	469a      	mov	sl, r3
 8014f86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f8a:	b10a      	cbz	r2, 8014f90 <_svfiprintf_r+0x5c>
 8014f8c:	2a25      	cmp	r2, #37	; 0x25
 8014f8e:	d1f9      	bne.n	8014f84 <_svfiprintf_r+0x50>
 8014f90:	ebba 0b04 	subs.w	fp, sl, r4
 8014f94:	d00b      	beq.n	8014fae <_svfiprintf_r+0x7a>
 8014f96:	465b      	mov	r3, fp
 8014f98:	4622      	mov	r2, r4
 8014f9a:	4629      	mov	r1, r5
 8014f9c:	4638      	mov	r0, r7
 8014f9e:	f7ff ff6e 	bl	8014e7e <__ssputs_r>
 8014fa2:	3001      	adds	r0, #1
 8014fa4:	f000 80aa 	beq.w	80150fc <_svfiprintf_r+0x1c8>
 8014fa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014faa:	445a      	add	r2, fp
 8014fac:	9209      	str	r2, [sp, #36]	; 0x24
 8014fae:	f89a 3000 	ldrb.w	r3, [sl]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	f000 80a2 	beq.w	80150fc <_svfiprintf_r+0x1c8>
 8014fb8:	2300      	movs	r3, #0
 8014fba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014fbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014fc2:	f10a 0a01 	add.w	sl, sl, #1
 8014fc6:	9304      	str	r3, [sp, #16]
 8014fc8:	9307      	str	r3, [sp, #28]
 8014fca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014fce:	931a      	str	r3, [sp, #104]	; 0x68
 8014fd0:	4654      	mov	r4, sl
 8014fd2:	2205      	movs	r2, #5
 8014fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fd8:	4851      	ldr	r0, [pc, #324]	; (8015120 <_svfiprintf_r+0x1ec>)
 8014fda:	f7eb f921 	bl	8000220 <memchr>
 8014fde:	9a04      	ldr	r2, [sp, #16]
 8014fe0:	b9d8      	cbnz	r0, 801501a <_svfiprintf_r+0xe6>
 8014fe2:	06d0      	lsls	r0, r2, #27
 8014fe4:	bf44      	itt	mi
 8014fe6:	2320      	movmi	r3, #32
 8014fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014fec:	0711      	lsls	r1, r2, #28
 8014fee:	bf44      	itt	mi
 8014ff0:	232b      	movmi	r3, #43	; 0x2b
 8014ff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ff6:	f89a 3000 	ldrb.w	r3, [sl]
 8014ffa:	2b2a      	cmp	r3, #42	; 0x2a
 8014ffc:	d015      	beq.n	801502a <_svfiprintf_r+0xf6>
 8014ffe:	9a07      	ldr	r2, [sp, #28]
 8015000:	4654      	mov	r4, sl
 8015002:	2000      	movs	r0, #0
 8015004:	f04f 0c0a 	mov.w	ip, #10
 8015008:	4621      	mov	r1, r4
 801500a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801500e:	3b30      	subs	r3, #48	; 0x30
 8015010:	2b09      	cmp	r3, #9
 8015012:	d94e      	bls.n	80150b2 <_svfiprintf_r+0x17e>
 8015014:	b1b0      	cbz	r0, 8015044 <_svfiprintf_r+0x110>
 8015016:	9207      	str	r2, [sp, #28]
 8015018:	e014      	b.n	8015044 <_svfiprintf_r+0x110>
 801501a:	eba0 0308 	sub.w	r3, r0, r8
 801501e:	fa09 f303 	lsl.w	r3, r9, r3
 8015022:	4313      	orrs	r3, r2
 8015024:	9304      	str	r3, [sp, #16]
 8015026:	46a2      	mov	sl, r4
 8015028:	e7d2      	b.n	8014fd0 <_svfiprintf_r+0x9c>
 801502a:	9b03      	ldr	r3, [sp, #12]
 801502c:	1d19      	adds	r1, r3, #4
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	9103      	str	r1, [sp, #12]
 8015032:	2b00      	cmp	r3, #0
 8015034:	bfbb      	ittet	lt
 8015036:	425b      	neglt	r3, r3
 8015038:	f042 0202 	orrlt.w	r2, r2, #2
 801503c:	9307      	strge	r3, [sp, #28]
 801503e:	9307      	strlt	r3, [sp, #28]
 8015040:	bfb8      	it	lt
 8015042:	9204      	strlt	r2, [sp, #16]
 8015044:	7823      	ldrb	r3, [r4, #0]
 8015046:	2b2e      	cmp	r3, #46	; 0x2e
 8015048:	d10c      	bne.n	8015064 <_svfiprintf_r+0x130>
 801504a:	7863      	ldrb	r3, [r4, #1]
 801504c:	2b2a      	cmp	r3, #42	; 0x2a
 801504e:	d135      	bne.n	80150bc <_svfiprintf_r+0x188>
 8015050:	9b03      	ldr	r3, [sp, #12]
 8015052:	1d1a      	adds	r2, r3, #4
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	9203      	str	r2, [sp, #12]
 8015058:	2b00      	cmp	r3, #0
 801505a:	bfb8      	it	lt
 801505c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015060:	3402      	adds	r4, #2
 8015062:	9305      	str	r3, [sp, #20]
 8015064:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015130 <_svfiprintf_r+0x1fc>
 8015068:	7821      	ldrb	r1, [r4, #0]
 801506a:	2203      	movs	r2, #3
 801506c:	4650      	mov	r0, sl
 801506e:	f7eb f8d7 	bl	8000220 <memchr>
 8015072:	b140      	cbz	r0, 8015086 <_svfiprintf_r+0x152>
 8015074:	2340      	movs	r3, #64	; 0x40
 8015076:	eba0 000a 	sub.w	r0, r0, sl
 801507a:	fa03 f000 	lsl.w	r0, r3, r0
 801507e:	9b04      	ldr	r3, [sp, #16]
 8015080:	4303      	orrs	r3, r0
 8015082:	3401      	adds	r4, #1
 8015084:	9304      	str	r3, [sp, #16]
 8015086:	f814 1b01 	ldrb.w	r1, [r4], #1
 801508a:	4826      	ldr	r0, [pc, #152]	; (8015124 <_svfiprintf_r+0x1f0>)
 801508c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015090:	2206      	movs	r2, #6
 8015092:	f7eb f8c5 	bl	8000220 <memchr>
 8015096:	2800      	cmp	r0, #0
 8015098:	d038      	beq.n	801510c <_svfiprintf_r+0x1d8>
 801509a:	4b23      	ldr	r3, [pc, #140]	; (8015128 <_svfiprintf_r+0x1f4>)
 801509c:	bb1b      	cbnz	r3, 80150e6 <_svfiprintf_r+0x1b2>
 801509e:	9b03      	ldr	r3, [sp, #12]
 80150a0:	3307      	adds	r3, #7
 80150a2:	f023 0307 	bic.w	r3, r3, #7
 80150a6:	3308      	adds	r3, #8
 80150a8:	9303      	str	r3, [sp, #12]
 80150aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150ac:	4433      	add	r3, r6
 80150ae:	9309      	str	r3, [sp, #36]	; 0x24
 80150b0:	e767      	b.n	8014f82 <_svfiprintf_r+0x4e>
 80150b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80150b6:	460c      	mov	r4, r1
 80150b8:	2001      	movs	r0, #1
 80150ba:	e7a5      	b.n	8015008 <_svfiprintf_r+0xd4>
 80150bc:	2300      	movs	r3, #0
 80150be:	3401      	adds	r4, #1
 80150c0:	9305      	str	r3, [sp, #20]
 80150c2:	4619      	mov	r1, r3
 80150c4:	f04f 0c0a 	mov.w	ip, #10
 80150c8:	4620      	mov	r0, r4
 80150ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80150ce:	3a30      	subs	r2, #48	; 0x30
 80150d0:	2a09      	cmp	r2, #9
 80150d2:	d903      	bls.n	80150dc <_svfiprintf_r+0x1a8>
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d0c5      	beq.n	8015064 <_svfiprintf_r+0x130>
 80150d8:	9105      	str	r1, [sp, #20]
 80150da:	e7c3      	b.n	8015064 <_svfiprintf_r+0x130>
 80150dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80150e0:	4604      	mov	r4, r0
 80150e2:	2301      	movs	r3, #1
 80150e4:	e7f0      	b.n	80150c8 <_svfiprintf_r+0x194>
 80150e6:	ab03      	add	r3, sp, #12
 80150e8:	9300      	str	r3, [sp, #0]
 80150ea:	462a      	mov	r2, r5
 80150ec:	4b0f      	ldr	r3, [pc, #60]	; (801512c <_svfiprintf_r+0x1f8>)
 80150ee:	a904      	add	r1, sp, #16
 80150f0:	4638      	mov	r0, r7
 80150f2:	f7fe f88f 	bl	8013214 <_printf_float>
 80150f6:	1c42      	adds	r2, r0, #1
 80150f8:	4606      	mov	r6, r0
 80150fa:	d1d6      	bne.n	80150aa <_svfiprintf_r+0x176>
 80150fc:	89ab      	ldrh	r3, [r5, #12]
 80150fe:	065b      	lsls	r3, r3, #25
 8015100:	f53f af2c 	bmi.w	8014f5c <_svfiprintf_r+0x28>
 8015104:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015106:	b01d      	add	sp, #116	; 0x74
 8015108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801510c:	ab03      	add	r3, sp, #12
 801510e:	9300      	str	r3, [sp, #0]
 8015110:	462a      	mov	r2, r5
 8015112:	4b06      	ldr	r3, [pc, #24]	; (801512c <_svfiprintf_r+0x1f8>)
 8015114:	a904      	add	r1, sp, #16
 8015116:	4638      	mov	r0, r7
 8015118:	f7fe fb20 	bl	801375c <_printf_i>
 801511c:	e7eb      	b.n	80150f6 <_svfiprintf_r+0x1c2>
 801511e:	bf00      	nop
 8015120:	080196c4 	.word	0x080196c4
 8015124:	080196ce 	.word	0x080196ce
 8015128:	08013215 	.word	0x08013215
 801512c:	08014e7f 	.word	0x08014e7f
 8015130:	080196ca 	.word	0x080196ca

08015134 <__assert_func>:
 8015134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015136:	4614      	mov	r4, r2
 8015138:	461a      	mov	r2, r3
 801513a:	4b09      	ldr	r3, [pc, #36]	; (8015160 <__assert_func+0x2c>)
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	4605      	mov	r5, r0
 8015140:	68d8      	ldr	r0, [r3, #12]
 8015142:	b14c      	cbz	r4, 8015158 <__assert_func+0x24>
 8015144:	4b07      	ldr	r3, [pc, #28]	; (8015164 <__assert_func+0x30>)
 8015146:	9100      	str	r1, [sp, #0]
 8015148:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801514c:	4906      	ldr	r1, [pc, #24]	; (8015168 <__assert_func+0x34>)
 801514e:	462b      	mov	r3, r5
 8015150:	f000 f80e 	bl	8015170 <fiprintf>
 8015154:	f000 fa7c 	bl	8015650 <abort>
 8015158:	4b04      	ldr	r3, [pc, #16]	; (801516c <__assert_func+0x38>)
 801515a:	461c      	mov	r4, r3
 801515c:	e7f3      	b.n	8015146 <__assert_func+0x12>
 801515e:	bf00      	nop
 8015160:	20000780 	.word	0x20000780
 8015164:	080196d5 	.word	0x080196d5
 8015168:	080196e2 	.word	0x080196e2
 801516c:	08019710 	.word	0x08019710

08015170 <fiprintf>:
 8015170:	b40e      	push	{r1, r2, r3}
 8015172:	b503      	push	{r0, r1, lr}
 8015174:	4601      	mov	r1, r0
 8015176:	ab03      	add	r3, sp, #12
 8015178:	4805      	ldr	r0, [pc, #20]	; (8015190 <fiprintf+0x20>)
 801517a:	f853 2b04 	ldr.w	r2, [r3], #4
 801517e:	6800      	ldr	r0, [r0, #0]
 8015180:	9301      	str	r3, [sp, #4]
 8015182:	f000 f867 	bl	8015254 <_vfiprintf_r>
 8015186:	b002      	add	sp, #8
 8015188:	f85d eb04 	ldr.w	lr, [sp], #4
 801518c:	b003      	add	sp, #12
 801518e:	4770      	bx	lr
 8015190:	20000780 	.word	0x20000780

08015194 <__retarget_lock_init_recursive>:
 8015194:	4770      	bx	lr

08015196 <__retarget_lock_acquire_recursive>:
 8015196:	4770      	bx	lr

08015198 <__retarget_lock_release_recursive>:
 8015198:	4770      	bx	lr

0801519a <__ascii_mbtowc>:
 801519a:	b082      	sub	sp, #8
 801519c:	b901      	cbnz	r1, 80151a0 <__ascii_mbtowc+0x6>
 801519e:	a901      	add	r1, sp, #4
 80151a0:	b142      	cbz	r2, 80151b4 <__ascii_mbtowc+0x1a>
 80151a2:	b14b      	cbz	r3, 80151b8 <__ascii_mbtowc+0x1e>
 80151a4:	7813      	ldrb	r3, [r2, #0]
 80151a6:	600b      	str	r3, [r1, #0]
 80151a8:	7812      	ldrb	r2, [r2, #0]
 80151aa:	1e10      	subs	r0, r2, #0
 80151ac:	bf18      	it	ne
 80151ae:	2001      	movne	r0, #1
 80151b0:	b002      	add	sp, #8
 80151b2:	4770      	bx	lr
 80151b4:	4610      	mov	r0, r2
 80151b6:	e7fb      	b.n	80151b0 <__ascii_mbtowc+0x16>
 80151b8:	f06f 0001 	mvn.w	r0, #1
 80151bc:	e7f8      	b.n	80151b0 <__ascii_mbtowc+0x16>

080151be <memmove>:
 80151be:	4288      	cmp	r0, r1
 80151c0:	b510      	push	{r4, lr}
 80151c2:	eb01 0402 	add.w	r4, r1, r2
 80151c6:	d902      	bls.n	80151ce <memmove+0x10>
 80151c8:	4284      	cmp	r4, r0
 80151ca:	4623      	mov	r3, r4
 80151cc:	d807      	bhi.n	80151de <memmove+0x20>
 80151ce:	1e43      	subs	r3, r0, #1
 80151d0:	42a1      	cmp	r1, r4
 80151d2:	d008      	beq.n	80151e6 <memmove+0x28>
 80151d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80151d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80151dc:	e7f8      	b.n	80151d0 <memmove+0x12>
 80151de:	4402      	add	r2, r0
 80151e0:	4601      	mov	r1, r0
 80151e2:	428a      	cmp	r2, r1
 80151e4:	d100      	bne.n	80151e8 <memmove+0x2a>
 80151e6:	bd10      	pop	{r4, pc}
 80151e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80151ec:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80151f0:	e7f7      	b.n	80151e2 <memmove+0x24>

080151f2 <_malloc_usable_size_r>:
 80151f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80151f6:	1f18      	subs	r0, r3, #4
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	bfbc      	itt	lt
 80151fc:	580b      	ldrlt	r3, [r1, r0]
 80151fe:	18c0      	addlt	r0, r0, r3
 8015200:	4770      	bx	lr

08015202 <__sfputc_r>:
 8015202:	6893      	ldr	r3, [r2, #8]
 8015204:	3b01      	subs	r3, #1
 8015206:	2b00      	cmp	r3, #0
 8015208:	b410      	push	{r4}
 801520a:	6093      	str	r3, [r2, #8]
 801520c:	da08      	bge.n	8015220 <__sfputc_r+0x1e>
 801520e:	6994      	ldr	r4, [r2, #24]
 8015210:	42a3      	cmp	r3, r4
 8015212:	db01      	blt.n	8015218 <__sfputc_r+0x16>
 8015214:	290a      	cmp	r1, #10
 8015216:	d103      	bne.n	8015220 <__sfputc_r+0x1e>
 8015218:	f85d 4b04 	ldr.w	r4, [sp], #4
 801521c:	f000 b94a 	b.w	80154b4 <__swbuf_r>
 8015220:	6813      	ldr	r3, [r2, #0]
 8015222:	1c58      	adds	r0, r3, #1
 8015224:	6010      	str	r0, [r2, #0]
 8015226:	7019      	strb	r1, [r3, #0]
 8015228:	4608      	mov	r0, r1
 801522a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801522e:	4770      	bx	lr

08015230 <__sfputs_r>:
 8015230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015232:	4606      	mov	r6, r0
 8015234:	460f      	mov	r7, r1
 8015236:	4614      	mov	r4, r2
 8015238:	18d5      	adds	r5, r2, r3
 801523a:	42ac      	cmp	r4, r5
 801523c:	d101      	bne.n	8015242 <__sfputs_r+0x12>
 801523e:	2000      	movs	r0, #0
 8015240:	e007      	b.n	8015252 <__sfputs_r+0x22>
 8015242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015246:	463a      	mov	r2, r7
 8015248:	4630      	mov	r0, r6
 801524a:	f7ff ffda 	bl	8015202 <__sfputc_r>
 801524e:	1c43      	adds	r3, r0, #1
 8015250:	d1f3      	bne.n	801523a <__sfputs_r+0xa>
 8015252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015254 <_vfiprintf_r>:
 8015254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015258:	460d      	mov	r5, r1
 801525a:	b09d      	sub	sp, #116	; 0x74
 801525c:	4614      	mov	r4, r2
 801525e:	4698      	mov	r8, r3
 8015260:	4606      	mov	r6, r0
 8015262:	b118      	cbz	r0, 801526c <_vfiprintf_r+0x18>
 8015264:	6983      	ldr	r3, [r0, #24]
 8015266:	b90b      	cbnz	r3, 801526c <_vfiprintf_r+0x18>
 8015268:	f000 fb14 	bl	8015894 <__sinit>
 801526c:	4b89      	ldr	r3, [pc, #548]	; (8015494 <_vfiprintf_r+0x240>)
 801526e:	429d      	cmp	r5, r3
 8015270:	d11b      	bne.n	80152aa <_vfiprintf_r+0x56>
 8015272:	6875      	ldr	r5, [r6, #4]
 8015274:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015276:	07d9      	lsls	r1, r3, #31
 8015278:	d405      	bmi.n	8015286 <_vfiprintf_r+0x32>
 801527a:	89ab      	ldrh	r3, [r5, #12]
 801527c:	059a      	lsls	r2, r3, #22
 801527e:	d402      	bmi.n	8015286 <_vfiprintf_r+0x32>
 8015280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015282:	f7ff ff88 	bl	8015196 <__retarget_lock_acquire_recursive>
 8015286:	89ab      	ldrh	r3, [r5, #12]
 8015288:	071b      	lsls	r3, r3, #28
 801528a:	d501      	bpl.n	8015290 <_vfiprintf_r+0x3c>
 801528c:	692b      	ldr	r3, [r5, #16]
 801528e:	b9eb      	cbnz	r3, 80152cc <_vfiprintf_r+0x78>
 8015290:	4629      	mov	r1, r5
 8015292:	4630      	mov	r0, r6
 8015294:	f000 f96e 	bl	8015574 <__swsetup_r>
 8015298:	b1c0      	cbz	r0, 80152cc <_vfiprintf_r+0x78>
 801529a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801529c:	07dc      	lsls	r4, r3, #31
 801529e:	d50e      	bpl.n	80152be <_vfiprintf_r+0x6a>
 80152a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80152a4:	b01d      	add	sp, #116	; 0x74
 80152a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152aa:	4b7b      	ldr	r3, [pc, #492]	; (8015498 <_vfiprintf_r+0x244>)
 80152ac:	429d      	cmp	r5, r3
 80152ae:	d101      	bne.n	80152b4 <_vfiprintf_r+0x60>
 80152b0:	68b5      	ldr	r5, [r6, #8]
 80152b2:	e7df      	b.n	8015274 <_vfiprintf_r+0x20>
 80152b4:	4b79      	ldr	r3, [pc, #484]	; (801549c <_vfiprintf_r+0x248>)
 80152b6:	429d      	cmp	r5, r3
 80152b8:	bf08      	it	eq
 80152ba:	68f5      	ldreq	r5, [r6, #12]
 80152bc:	e7da      	b.n	8015274 <_vfiprintf_r+0x20>
 80152be:	89ab      	ldrh	r3, [r5, #12]
 80152c0:	0598      	lsls	r0, r3, #22
 80152c2:	d4ed      	bmi.n	80152a0 <_vfiprintf_r+0x4c>
 80152c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80152c6:	f7ff ff67 	bl	8015198 <__retarget_lock_release_recursive>
 80152ca:	e7e9      	b.n	80152a0 <_vfiprintf_r+0x4c>
 80152cc:	2300      	movs	r3, #0
 80152ce:	9309      	str	r3, [sp, #36]	; 0x24
 80152d0:	2320      	movs	r3, #32
 80152d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80152d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80152da:	2330      	movs	r3, #48	; 0x30
 80152dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80154a0 <_vfiprintf_r+0x24c>
 80152e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80152e4:	f04f 0901 	mov.w	r9, #1
 80152e8:	4623      	mov	r3, r4
 80152ea:	469a      	mov	sl, r3
 80152ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80152f0:	b10a      	cbz	r2, 80152f6 <_vfiprintf_r+0xa2>
 80152f2:	2a25      	cmp	r2, #37	; 0x25
 80152f4:	d1f9      	bne.n	80152ea <_vfiprintf_r+0x96>
 80152f6:	ebba 0b04 	subs.w	fp, sl, r4
 80152fa:	d00b      	beq.n	8015314 <_vfiprintf_r+0xc0>
 80152fc:	465b      	mov	r3, fp
 80152fe:	4622      	mov	r2, r4
 8015300:	4629      	mov	r1, r5
 8015302:	4630      	mov	r0, r6
 8015304:	f7ff ff94 	bl	8015230 <__sfputs_r>
 8015308:	3001      	adds	r0, #1
 801530a:	f000 80aa 	beq.w	8015462 <_vfiprintf_r+0x20e>
 801530e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015310:	445a      	add	r2, fp
 8015312:	9209      	str	r2, [sp, #36]	; 0x24
 8015314:	f89a 3000 	ldrb.w	r3, [sl]
 8015318:	2b00      	cmp	r3, #0
 801531a:	f000 80a2 	beq.w	8015462 <_vfiprintf_r+0x20e>
 801531e:	2300      	movs	r3, #0
 8015320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015328:	f10a 0a01 	add.w	sl, sl, #1
 801532c:	9304      	str	r3, [sp, #16]
 801532e:	9307      	str	r3, [sp, #28]
 8015330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015334:	931a      	str	r3, [sp, #104]	; 0x68
 8015336:	4654      	mov	r4, sl
 8015338:	2205      	movs	r2, #5
 801533a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801533e:	4858      	ldr	r0, [pc, #352]	; (80154a0 <_vfiprintf_r+0x24c>)
 8015340:	f7ea ff6e 	bl	8000220 <memchr>
 8015344:	9a04      	ldr	r2, [sp, #16]
 8015346:	b9d8      	cbnz	r0, 8015380 <_vfiprintf_r+0x12c>
 8015348:	06d1      	lsls	r1, r2, #27
 801534a:	bf44      	itt	mi
 801534c:	2320      	movmi	r3, #32
 801534e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015352:	0713      	lsls	r3, r2, #28
 8015354:	bf44      	itt	mi
 8015356:	232b      	movmi	r3, #43	; 0x2b
 8015358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801535c:	f89a 3000 	ldrb.w	r3, [sl]
 8015360:	2b2a      	cmp	r3, #42	; 0x2a
 8015362:	d015      	beq.n	8015390 <_vfiprintf_r+0x13c>
 8015364:	9a07      	ldr	r2, [sp, #28]
 8015366:	4654      	mov	r4, sl
 8015368:	2000      	movs	r0, #0
 801536a:	f04f 0c0a 	mov.w	ip, #10
 801536e:	4621      	mov	r1, r4
 8015370:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015374:	3b30      	subs	r3, #48	; 0x30
 8015376:	2b09      	cmp	r3, #9
 8015378:	d94e      	bls.n	8015418 <_vfiprintf_r+0x1c4>
 801537a:	b1b0      	cbz	r0, 80153aa <_vfiprintf_r+0x156>
 801537c:	9207      	str	r2, [sp, #28]
 801537e:	e014      	b.n	80153aa <_vfiprintf_r+0x156>
 8015380:	eba0 0308 	sub.w	r3, r0, r8
 8015384:	fa09 f303 	lsl.w	r3, r9, r3
 8015388:	4313      	orrs	r3, r2
 801538a:	9304      	str	r3, [sp, #16]
 801538c:	46a2      	mov	sl, r4
 801538e:	e7d2      	b.n	8015336 <_vfiprintf_r+0xe2>
 8015390:	9b03      	ldr	r3, [sp, #12]
 8015392:	1d19      	adds	r1, r3, #4
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	9103      	str	r1, [sp, #12]
 8015398:	2b00      	cmp	r3, #0
 801539a:	bfbb      	ittet	lt
 801539c:	425b      	neglt	r3, r3
 801539e:	f042 0202 	orrlt.w	r2, r2, #2
 80153a2:	9307      	strge	r3, [sp, #28]
 80153a4:	9307      	strlt	r3, [sp, #28]
 80153a6:	bfb8      	it	lt
 80153a8:	9204      	strlt	r2, [sp, #16]
 80153aa:	7823      	ldrb	r3, [r4, #0]
 80153ac:	2b2e      	cmp	r3, #46	; 0x2e
 80153ae:	d10c      	bne.n	80153ca <_vfiprintf_r+0x176>
 80153b0:	7863      	ldrb	r3, [r4, #1]
 80153b2:	2b2a      	cmp	r3, #42	; 0x2a
 80153b4:	d135      	bne.n	8015422 <_vfiprintf_r+0x1ce>
 80153b6:	9b03      	ldr	r3, [sp, #12]
 80153b8:	1d1a      	adds	r2, r3, #4
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	9203      	str	r2, [sp, #12]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	bfb8      	it	lt
 80153c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80153c6:	3402      	adds	r4, #2
 80153c8:	9305      	str	r3, [sp, #20]
 80153ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80154b0 <_vfiprintf_r+0x25c>
 80153ce:	7821      	ldrb	r1, [r4, #0]
 80153d0:	2203      	movs	r2, #3
 80153d2:	4650      	mov	r0, sl
 80153d4:	f7ea ff24 	bl	8000220 <memchr>
 80153d8:	b140      	cbz	r0, 80153ec <_vfiprintf_r+0x198>
 80153da:	2340      	movs	r3, #64	; 0x40
 80153dc:	eba0 000a 	sub.w	r0, r0, sl
 80153e0:	fa03 f000 	lsl.w	r0, r3, r0
 80153e4:	9b04      	ldr	r3, [sp, #16]
 80153e6:	4303      	orrs	r3, r0
 80153e8:	3401      	adds	r4, #1
 80153ea:	9304      	str	r3, [sp, #16]
 80153ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153f0:	482c      	ldr	r0, [pc, #176]	; (80154a4 <_vfiprintf_r+0x250>)
 80153f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80153f6:	2206      	movs	r2, #6
 80153f8:	f7ea ff12 	bl	8000220 <memchr>
 80153fc:	2800      	cmp	r0, #0
 80153fe:	d03f      	beq.n	8015480 <_vfiprintf_r+0x22c>
 8015400:	4b29      	ldr	r3, [pc, #164]	; (80154a8 <_vfiprintf_r+0x254>)
 8015402:	bb1b      	cbnz	r3, 801544c <_vfiprintf_r+0x1f8>
 8015404:	9b03      	ldr	r3, [sp, #12]
 8015406:	3307      	adds	r3, #7
 8015408:	f023 0307 	bic.w	r3, r3, #7
 801540c:	3308      	adds	r3, #8
 801540e:	9303      	str	r3, [sp, #12]
 8015410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015412:	443b      	add	r3, r7
 8015414:	9309      	str	r3, [sp, #36]	; 0x24
 8015416:	e767      	b.n	80152e8 <_vfiprintf_r+0x94>
 8015418:	fb0c 3202 	mla	r2, ip, r2, r3
 801541c:	460c      	mov	r4, r1
 801541e:	2001      	movs	r0, #1
 8015420:	e7a5      	b.n	801536e <_vfiprintf_r+0x11a>
 8015422:	2300      	movs	r3, #0
 8015424:	3401      	adds	r4, #1
 8015426:	9305      	str	r3, [sp, #20]
 8015428:	4619      	mov	r1, r3
 801542a:	f04f 0c0a 	mov.w	ip, #10
 801542e:	4620      	mov	r0, r4
 8015430:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015434:	3a30      	subs	r2, #48	; 0x30
 8015436:	2a09      	cmp	r2, #9
 8015438:	d903      	bls.n	8015442 <_vfiprintf_r+0x1ee>
 801543a:	2b00      	cmp	r3, #0
 801543c:	d0c5      	beq.n	80153ca <_vfiprintf_r+0x176>
 801543e:	9105      	str	r1, [sp, #20]
 8015440:	e7c3      	b.n	80153ca <_vfiprintf_r+0x176>
 8015442:	fb0c 2101 	mla	r1, ip, r1, r2
 8015446:	4604      	mov	r4, r0
 8015448:	2301      	movs	r3, #1
 801544a:	e7f0      	b.n	801542e <_vfiprintf_r+0x1da>
 801544c:	ab03      	add	r3, sp, #12
 801544e:	9300      	str	r3, [sp, #0]
 8015450:	462a      	mov	r2, r5
 8015452:	4b16      	ldr	r3, [pc, #88]	; (80154ac <_vfiprintf_r+0x258>)
 8015454:	a904      	add	r1, sp, #16
 8015456:	4630      	mov	r0, r6
 8015458:	f7fd fedc 	bl	8013214 <_printf_float>
 801545c:	4607      	mov	r7, r0
 801545e:	1c78      	adds	r0, r7, #1
 8015460:	d1d6      	bne.n	8015410 <_vfiprintf_r+0x1bc>
 8015462:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015464:	07d9      	lsls	r1, r3, #31
 8015466:	d405      	bmi.n	8015474 <_vfiprintf_r+0x220>
 8015468:	89ab      	ldrh	r3, [r5, #12]
 801546a:	059a      	lsls	r2, r3, #22
 801546c:	d402      	bmi.n	8015474 <_vfiprintf_r+0x220>
 801546e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015470:	f7ff fe92 	bl	8015198 <__retarget_lock_release_recursive>
 8015474:	89ab      	ldrh	r3, [r5, #12]
 8015476:	065b      	lsls	r3, r3, #25
 8015478:	f53f af12 	bmi.w	80152a0 <_vfiprintf_r+0x4c>
 801547c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801547e:	e711      	b.n	80152a4 <_vfiprintf_r+0x50>
 8015480:	ab03      	add	r3, sp, #12
 8015482:	9300      	str	r3, [sp, #0]
 8015484:	462a      	mov	r2, r5
 8015486:	4b09      	ldr	r3, [pc, #36]	; (80154ac <_vfiprintf_r+0x258>)
 8015488:	a904      	add	r1, sp, #16
 801548a:	4630      	mov	r0, r6
 801548c:	f7fe f966 	bl	801375c <_printf_i>
 8015490:	e7e4      	b.n	801545c <_vfiprintf_r+0x208>
 8015492:	bf00      	nop
 8015494:	0801983c 	.word	0x0801983c
 8015498:	0801985c 	.word	0x0801985c
 801549c:	0801981c 	.word	0x0801981c
 80154a0:	080196c4 	.word	0x080196c4
 80154a4:	080196ce 	.word	0x080196ce
 80154a8:	08013215 	.word	0x08013215
 80154ac:	08015231 	.word	0x08015231
 80154b0:	080196ca 	.word	0x080196ca

080154b4 <__swbuf_r>:
 80154b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154b6:	460e      	mov	r6, r1
 80154b8:	4614      	mov	r4, r2
 80154ba:	4605      	mov	r5, r0
 80154bc:	b118      	cbz	r0, 80154c6 <__swbuf_r+0x12>
 80154be:	6983      	ldr	r3, [r0, #24]
 80154c0:	b90b      	cbnz	r3, 80154c6 <__swbuf_r+0x12>
 80154c2:	f000 f9e7 	bl	8015894 <__sinit>
 80154c6:	4b21      	ldr	r3, [pc, #132]	; (801554c <__swbuf_r+0x98>)
 80154c8:	429c      	cmp	r4, r3
 80154ca:	d12b      	bne.n	8015524 <__swbuf_r+0x70>
 80154cc:	686c      	ldr	r4, [r5, #4]
 80154ce:	69a3      	ldr	r3, [r4, #24]
 80154d0:	60a3      	str	r3, [r4, #8]
 80154d2:	89a3      	ldrh	r3, [r4, #12]
 80154d4:	071a      	lsls	r2, r3, #28
 80154d6:	d52f      	bpl.n	8015538 <__swbuf_r+0x84>
 80154d8:	6923      	ldr	r3, [r4, #16]
 80154da:	b36b      	cbz	r3, 8015538 <__swbuf_r+0x84>
 80154dc:	6923      	ldr	r3, [r4, #16]
 80154de:	6820      	ldr	r0, [r4, #0]
 80154e0:	1ac0      	subs	r0, r0, r3
 80154e2:	6963      	ldr	r3, [r4, #20]
 80154e4:	b2f6      	uxtb	r6, r6
 80154e6:	4283      	cmp	r3, r0
 80154e8:	4637      	mov	r7, r6
 80154ea:	dc04      	bgt.n	80154f6 <__swbuf_r+0x42>
 80154ec:	4621      	mov	r1, r4
 80154ee:	4628      	mov	r0, r5
 80154f0:	f000 f93c 	bl	801576c <_fflush_r>
 80154f4:	bb30      	cbnz	r0, 8015544 <__swbuf_r+0x90>
 80154f6:	68a3      	ldr	r3, [r4, #8]
 80154f8:	3b01      	subs	r3, #1
 80154fa:	60a3      	str	r3, [r4, #8]
 80154fc:	6823      	ldr	r3, [r4, #0]
 80154fe:	1c5a      	adds	r2, r3, #1
 8015500:	6022      	str	r2, [r4, #0]
 8015502:	701e      	strb	r6, [r3, #0]
 8015504:	6963      	ldr	r3, [r4, #20]
 8015506:	3001      	adds	r0, #1
 8015508:	4283      	cmp	r3, r0
 801550a:	d004      	beq.n	8015516 <__swbuf_r+0x62>
 801550c:	89a3      	ldrh	r3, [r4, #12]
 801550e:	07db      	lsls	r3, r3, #31
 8015510:	d506      	bpl.n	8015520 <__swbuf_r+0x6c>
 8015512:	2e0a      	cmp	r6, #10
 8015514:	d104      	bne.n	8015520 <__swbuf_r+0x6c>
 8015516:	4621      	mov	r1, r4
 8015518:	4628      	mov	r0, r5
 801551a:	f000 f927 	bl	801576c <_fflush_r>
 801551e:	b988      	cbnz	r0, 8015544 <__swbuf_r+0x90>
 8015520:	4638      	mov	r0, r7
 8015522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015524:	4b0a      	ldr	r3, [pc, #40]	; (8015550 <__swbuf_r+0x9c>)
 8015526:	429c      	cmp	r4, r3
 8015528:	d101      	bne.n	801552e <__swbuf_r+0x7a>
 801552a:	68ac      	ldr	r4, [r5, #8]
 801552c:	e7cf      	b.n	80154ce <__swbuf_r+0x1a>
 801552e:	4b09      	ldr	r3, [pc, #36]	; (8015554 <__swbuf_r+0xa0>)
 8015530:	429c      	cmp	r4, r3
 8015532:	bf08      	it	eq
 8015534:	68ec      	ldreq	r4, [r5, #12]
 8015536:	e7ca      	b.n	80154ce <__swbuf_r+0x1a>
 8015538:	4621      	mov	r1, r4
 801553a:	4628      	mov	r0, r5
 801553c:	f000 f81a 	bl	8015574 <__swsetup_r>
 8015540:	2800      	cmp	r0, #0
 8015542:	d0cb      	beq.n	80154dc <__swbuf_r+0x28>
 8015544:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015548:	e7ea      	b.n	8015520 <__swbuf_r+0x6c>
 801554a:	bf00      	nop
 801554c:	0801983c 	.word	0x0801983c
 8015550:	0801985c 	.word	0x0801985c
 8015554:	0801981c 	.word	0x0801981c

08015558 <__ascii_wctomb>:
 8015558:	b149      	cbz	r1, 801556e <__ascii_wctomb+0x16>
 801555a:	2aff      	cmp	r2, #255	; 0xff
 801555c:	bf85      	ittet	hi
 801555e:	238a      	movhi	r3, #138	; 0x8a
 8015560:	6003      	strhi	r3, [r0, #0]
 8015562:	700a      	strbls	r2, [r1, #0]
 8015564:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8015568:	bf98      	it	ls
 801556a:	2001      	movls	r0, #1
 801556c:	4770      	bx	lr
 801556e:	4608      	mov	r0, r1
 8015570:	4770      	bx	lr
	...

08015574 <__swsetup_r>:
 8015574:	4b32      	ldr	r3, [pc, #200]	; (8015640 <__swsetup_r+0xcc>)
 8015576:	b570      	push	{r4, r5, r6, lr}
 8015578:	681d      	ldr	r5, [r3, #0]
 801557a:	4606      	mov	r6, r0
 801557c:	460c      	mov	r4, r1
 801557e:	b125      	cbz	r5, 801558a <__swsetup_r+0x16>
 8015580:	69ab      	ldr	r3, [r5, #24]
 8015582:	b913      	cbnz	r3, 801558a <__swsetup_r+0x16>
 8015584:	4628      	mov	r0, r5
 8015586:	f000 f985 	bl	8015894 <__sinit>
 801558a:	4b2e      	ldr	r3, [pc, #184]	; (8015644 <__swsetup_r+0xd0>)
 801558c:	429c      	cmp	r4, r3
 801558e:	d10f      	bne.n	80155b0 <__swsetup_r+0x3c>
 8015590:	686c      	ldr	r4, [r5, #4]
 8015592:	89a3      	ldrh	r3, [r4, #12]
 8015594:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015598:	0719      	lsls	r1, r3, #28
 801559a:	d42c      	bmi.n	80155f6 <__swsetup_r+0x82>
 801559c:	06dd      	lsls	r5, r3, #27
 801559e:	d411      	bmi.n	80155c4 <__swsetup_r+0x50>
 80155a0:	2309      	movs	r3, #9
 80155a2:	6033      	str	r3, [r6, #0]
 80155a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80155a8:	81a3      	strh	r3, [r4, #12]
 80155aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80155ae:	e03e      	b.n	801562e <__swsetup_r+0xba>
 80155b0:	4b25      	ldr	r3, [pc, #148]	; (8015648 <__swsetup_r+0xd4>)
 80155b2:	429c      	cmp	r4, r3
 80155b4:	d101      	bne.n	80155ba <__swsetup_r+0x46>
 80155b6:	68ac      	ldr	r4, [r5, #8]
 80155b8:	e7eb      	b.n	8015592 <__swsetup_r+0x1e>
 80155ba:	4b24      	ldr	r3, [pc, #144]	; (801564c <__swsetup_r+0xd8>)
 80155bc:	429c      	cmp	r4, r3
 80155be:	bf08      	it	eq
 80155c0:	68ec      	ldreq	r4, [r5, #12]
 80155c2:	e7e6      	b.n	8015592 <__swsetup_r+0x1e>
 80155c4:	0758      	lsls	r0, r3, #29
 80155c6:	d512      	bpl.n	80155ee <__swsetup_r+0x7a>
 80155c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80155ca:	b141      	cbz	r1, 80155de <__swsetup_r+0x6a>
 80155cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80155d0:	4299      	cmp	r1, r3
 80155d2:	d002      	beq.n	80155da <__swsetup_r+0x66>
 80155d4:	4630      	mov	r0, r6
 80155d6:	f7fd fcd3 	bl	8012f80 <_free_r>
 80155da:	2300      	movs	r3, #0
 80155dc:	6363      	str	r3, [r4, #52]	; 0x34
 80155de:	89a3      	ldrh	r3, [r4, #12]
 80155e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80155e4:	81a3      	strh	r3, [r4, #12]
 80155e6:	2300      	movs	r3, #0
 80155e8:	6063      	str	r3, [r4, #4]
 80155ea:	6923      	ldr	r3, [r4, #16]
 80155ec:	6023      	str	r3, [r4, #0]
 80155ee:	89a3      	ldrh	r3, [r4, #12]
 80155f0:	f043 0308 	orr.w	r3, r3, #8
 80155f4:	81a3      	strh	r3, [r4, #12]
 80155f6:	6923      	ldr	r3, [r4, #16]
 80155f8:	b94b      	cbnz	r3, 801560e <__swsetup_r+0x9a>
 80155fa:	89a3      	ldrh	r3, [r4, #12]
 80155fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015604:	d003      	beq.n	801560e <__swsetup_r+0x9a>
 8015606:	4621      	mov	r1, r4
 8015608:	4630      	mov	r0, r6
 801560a:	f000 fa05 	bl	8015a18 <__smakebuf_r>
 801560e:	89a0      	ldrh	r0, [r4, #12]
 8015610:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015614:	f010 0301 	ands.w	r3, r0, #1
 8015618:	d00a      	beq.n	8015630 <__swsetup_r+0xbc>
 801561a:	2300      	movs	r3, #0
 801561c:	60a3      	str	r3, [r4, #8]
 801561e:	6963      	ldr	r3, [r4, #20]
 8015620:	425b      	negs	r3, r3
 8015622:	61a3      	str	r3, [r4, #24]
 8015624:	6923      	ldr	r3, [r4, #16]
 8015626:	b943      	cbnz	r3, 801563a <__swsetup_r+0xc6>
 8015628:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801562c:	d1ba      	bne.n	80155a4 <__swsetup_r+0x30>
 801562e:	bd70      	pop	{r4, r5, r6, pc}
 8015630:	0781      	lsls	r1, r0, #30
 8015632:	bf58      	it	pl
 8015634:	6963      	ldrpl	r3, [r4, #20]
 8015636:	60a3      	str	r3, [r4, #8]
 8015638:	e7f4      	b.n	8015624 <__swsetup_r+0xb0>
 801563a:	2000      	movs	r0, #0
 801563c:	e7f7      	b.n	801562e <__swsetup_r+0xba>
 801563e:	bf00      	nop
 8015640:	20000780 	.word	0x20000780
 8015644:	0801983c 	.word	0x0801983c
 8015648:	0801985c 	.word	0x0801985c
 801564c:	0801981c 	.word	0x0801981c

08015650 <abort>:
 8015650:	b508      	push	{r3, lr}
 8015652:	2006      	movs	r0, #6
 8015654:	f000 fa48 	bl	8015ae8 <raise>
 8015658:	2001      	movs	r0, #1
 801565a:	f000 fe07 	bl	801626c <_exit>
	...

08015660 <__sflush_r>:
 8015660:	898a      	ldrh	r2, [r1, #12]
 8015662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015666:	4605      	mov	r5, r0
 8015668:	0710      	lsls	r0, r2, #28
 801566a:	460c      	mov	r4, r1
 801566c:	d458      	bmi.n	8015720 <__sflush_r+0xc0>
 801566e:	684b      	ldr	r3, [r1, #4]
 8015670:	2b00      	cmp	r3, #0
 8015672:	dc05      	bgt.n	8015680 <__sflush_r+0x20>
 8015674:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015676:	2b00      	cmp	r3, #0
 8015678:	dc02      	bgt.n	8015680 <__sflush_r+0x20>
 801567a:	2000      	movs	r0, #0
 801567c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015680:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015682:	2e00      	cmp	r6, #0
 8015684:	d0f9      	beq.n	801567a <__sflush_r+0x1a>
 8015686:	2300      	movs	r3, #0
 8015688:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801568c:	682f      	ldr	r7, [r5, #0]
 801568e:	602b      	str	r3, [r5, #0]
 8015690:	d032      	beq.n	80156f8 <__sflush_r+0x98>
 8015692:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015694:	89a3      	ldrh	r3, [r4, #12]
 8015696:	075a      	lsls	r2, r3, #29
 8015698:	d505      	bpl.n	80156a6 <__sflush_r+0x46>
 801569a:	6863      	ldr	r3, [r4, #4]
 801569c:	1ac0      	subs	r0, r0, r3
 801569e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80156a0:	b10b      	cbz	r3, 80156a6 <__sflush_r+0x46>
 80156a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80156a4:	1ac0      	subs	r0, r0, r3
 80156a6:	2300      	movs	r3, #0
 80156a8:	4602      	mov	r2, r0
 80156aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80156ac:	6a21      	ldr	r1, [r4, #32]
 80156ae:	4628      	mov	r0, r5
 80156b0:	47b0      	blx	r6
 80156b2:	1c43      	adds	r3, r0, #1
 80156b4:	89a3      	ldrh	r3, [r4, #12]
 80156b6:	d106      	bne.n	80156c6 <__sflush_r+0x66>
 80156b8:	6829      	ldr	r1, [r5, #0]
 80156ba:	291d      	cmp	r1, #29
 80156bc:	d82c      	bhi.n	8015718 <__sflush_r+0xb8>
 80156be:	4a2a      	ldr	r2, [pc, #168]	; (8015768 <__sflush_r+0x108>)
 80156c0:	40ca      	lsrs	r2, r1
 80156c2:	07d6      	lsls	r6, r2, #31
 80156c4:	d528      	bpl.n	8015718 <__sflush_r+0xb8>
 80156c6:	2200      	movs	r2, #0
 80156c8:	6062      	str	r2, [r4, #4]
 80156ca:	04d9      	lsls	r1, r3, #19
 80156cc:	6922      	ldr	r2, [r4, #16]
 80156ce:	6022      	str	r2, [r4, #0]
 80156d0:	d504      	bpl.n	80156dc <__sflush_r+0x7c>
 80156d2:	1c42      	adds	r2, r0, #1
 80156d4:	d101      	bne.n	80156da <__sflush_r+0x7a>
 80156d6:	682b      	ldr	r3, [r5, #0]
 80156d8:	b903      	cbnz	r3, 80156dc <__sflush_r+0x7c>
 80156da:	6560      	str	r0, [r4, #84]	; 0x54
 80156dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80156de:	602f      	str	r7, [r5, #0]
 80156e0:	2900      	cmp	r1, #0
 80156e2:	d0ca      	beq.n	801567a <__sflush_r+0x1a>
 80156e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80156e8:	4299      	cmp	r1, r3
 80156ea:	d002      	beq.n	80156f2 <__sflush_r+0x92>
 80156ec:	4628      	mov	r0, r5
 80156ee:	f7fd fc47 	bl	8012f80 <_free_r>
 80156f2:	2000      	movs	r0, #0
 80156f4:	6360      	str	r0, [r4, #52]	; 0x34
 80156f6:	e7c1      	b.n	801567c <__sflush_r+0x1c>
 80156f8:	6a21      	ldr	r1, [r4, #32]
 80156fa:	2301      	movs	r3, #1
 80156fc:	4628      	mov	r0, r5
 80156fe:	47b0      	blx	r6
 8015700:	1c41      	adds	r1, r0, #1
 8015702:	d1c7      	bne.n	8015694 <__sflush_r+0x34>
 8015704:	682b      	ldr	r3, [r5, #0]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d0c4      	beq.n	8015694 <__sflush_r+0x34>
 801570a:	2b1d      	cmp	r3, #29
 801570c:	d001      	beq.n	8015712 <__sflush_r+0xb2>
 801570e:	2b16      	cmp	r3, #22
 8015710:	d101      	bne.n	8015716 <__sflush_r+0xb6>
 8015712:	602f      	str	r7, [r5, #0]
 8015714:	e7b1      	b.n	801567a <__sflush_r+0x1a>
 8015716:	89a3      	ldrh	r3, [r4, #12]
 8015718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801571c:	81a3      	strh	r3, [r4, #12]
 801571e:	e7ad      	b.n	801567c <__sflush_r+0x1c>
 8015720:	690f      	ldr	r7, [r1, #16]
 8015722:	2f00      	cmp	r7, #0
 8015724:	d0a9      	beq.n	801567a <__sflush_r+0x1a>
 8015726:	0793      	lsls	r3, r2, #30
 8015728:	680e      	ldr	r6, [r1, #0]
 801572a:	bf08      	it	eq
 801572c:	694b      	ldreq	r3, [r1, #20]
 801572e:	600f      	str	r7, [r1, #0]
 8015730:	bf18      	it	ne
 8015732:	2300      	movne	r3, #0
 8015734:	eba6 0807 	sub.w	r8, r6, r7
 8015738:	608b      	str	r3, [r1, #8]
 801573a:	f1b8 0f00 	cmp.w	r8, #0
 801573e:	dd9c      	ble.n	801567a <__sflush_r+0x1a>
 8015740:	6a21      	ldr	r1, [r4, #32]
 8015742:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015744:	4643      	mov	r3, r8
 8015746:	463a      	mov	r2, r7
 8015748:	4628      	mov	r0, r5
 801574a:	47b0      	blx	r6
 801574c:	2800      	cmp	r0, #0
 801574e:	dc06      	bgt.n	801575e <__sflush_r+0xfe>
 8015750:	89a3      	ldrh	r3, [r4, #12]
 8015752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015756:	81a3      	strh	r3, [r4, #12]
 8015758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801575c:	e78e      	b.n	801567c <__sflush_r+0x1c>
 801575e:	4407      	add	r7, r0
 8015760:	eba8 0800 	sub.w	r8, r8, r0
 8015764:	e7e9      	b.n	801573a <__sflush_r+0xda>
 8015766:	bf00      	nop
 8015768:	20400001 	.word	0x20400001

0801576c <_fflush_r>:
 801576c:	b538      	push	{r3, r4, r5, lr}
 801576e:	690b      	ldr	r3, [r1, #16]
 8015770:	4605      	mov	r5, r0
 8015772:	460c      	mov	r4, r1
 8015774:	b913      	cbnz	r3, 801577c <_fflush_r+0x10>
 8015776:	2500      	movs	r5, #0
 8015778:	4628      	mov	r0, r5
 801577a:	bd38      	pop	{r3, r4, r5, pc}
 801577c:	b118      	cbz	r0, 8015786 <_fflush_r+0x1a>
 801577e:	6983      	ldr	r3, [r0, #24]
 8015780:	b90b      	cbnz	r3, 8015786 <_fflush_r+0x1a>
 8015782:	f000 f887 	bl	8015894 <__sinit>
 8015786:	4b14      	ldr	r3, [pc, #80]	; (80157d8 <_fflush_r+0x6c>)
 8015788:	429c      	cmp	r4, r3
 801578a:	d11b      	bne.n	80157c4 <_fflush_r+0x58>
 801578c:	686c      	ldr	r4, [r5, #4]
 801578e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015792:	2b00      	cmp	r3, #0
 8015794:	d0ef      	beq.n	8015776 <_fflush_r+0xa>
 8015796:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015798:	07d0      	lsls	r0, r2, #31
 801579a:	d404      	bmi.n	80157a6 <_fflush_r+0x3a>
 801579c:	0599      	lsls	r1, r3, #22
 801579e:	d402      	bmi.n	80157a6 <_fflush_r+0x3a>
 80157a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80157a2:	f7ff fcf8 	bl	8015196 <__retarget_lock_acquire_recursive>
 80157a6:	4628      	mov	r0, r5
 80157a8:	4621      	mov	r1, r4
 80157aa:	f7ff ff59 	bl	8015660 <__sflush_r>
 80157ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80157b0:	07da      	lsls	r2, r3, #31
 80157b2:	4605      	mov	r5, r0
 80157b4:	d4e0      	bmi.n	8015778 <_fflush_r+0xc>
 80157b6:	89a3      	ldrh	r3, [r4, #12]
 80157b8:	059b      	lsls	r3, r3, #22
 80157ba:	d4dd      	bmi.n	8015778 <_fflush_r+0xc>
 80157bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80157be:	f7ff fceb 	bl	8015198 <__retarget_lock_release_recursive>
 80157c2:	e7d9      	b.n	8015778 <_fflush_r+0xc>
 80157c4:	4b05      	ldr	r3, [pc, #20]	; (80157dc <_fflush_r+0x70>)
 80157c6:	429c      	cmp	r4, r3
 80157c8:	d101      	bne.n	80157ce <_fflush_r+0x62>
 80157ca:	68ac      	ldr	r4, [r5, #8]
 80157cc:	e7df      	b.n	801578e <_fflush_r+0x22>
 80157ce:	4b04      	ldr	r3, [pc, #16]	; (80157e0 <_fflush_r+0x74>)
 80157d0:	429c      	cmp	r4, r3
 80157d2:	bf08      	it	eq
 80157d4:	68ec      	ldreq	r4, [r5, #12]
 80157d6:	e7da      	b.n	801578e <_fflush_r+0x22>
 80157d8:	0801983c 	.word	0x0801983c
 80157dc:	0801985c 	.word	0x0801985c
 80157e0:	0801981c 	.word	0x0801981c

080157e4 <std>:
 80157e4:	2300      	movs	r3, #0
 80157e6:	b510      	push	{r4, lr}
 80157e8:	4604      	mov	r4, r0
 80157ea:	e9c0 3300 	strd	r3, r3, [r0]
 80157ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80157f2:	6083      	str	r3, [r0, #8]
 80157f4:	8181      	strh	r1, [r0, #12]
 80157f6:	6643      	str	r3, [r0, #100]	; 0x64
 80157f8:	81c2      	strh	r2, [r0, #14]
 80157fa:	6183      	str	r3, [r0, #24]
 80157fc:	4619      	mov	r1, r3
 80157fe:	2208      	movs	r2, #8
 8015800:	305c      	adds	r0, #92	; 0x5c
 8015802:	f7fd fbb5 	bl	8012f70 <memset>
 8015806:	4b05      	ldr	r3, [pc, #20]	; (801581c <std+0x38>)
 8015808:	6263      	str	r3, [r4, #36]	; 0x24
 801580a:	4b05      	ldr	r3, [pc, #20]	; (8015820 <std+0x3c>)
 801580c:	62a3      	str	r3, [r4, #40]	; 0x28
 801580e:	4b05      	ldr	r3, [pc, #20]	; (8015824 <std+0x40>)
 8015810:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015812:	4b05      	ldr	r3, [pc, #20]	; (8015828 <std+0x44>)
 8015814:	6224      	str	r4, [r4, #32]
 8015816:	6323      	str	r3, [r4, #48]	; 0x30
 8015818:	bd10      	pop	{r4, pc}
 801581a:	bf00      	nop
 801581c:	08015b21 	.word	0x08015b21
 8015820:	08015b43 	.word	0x08015b43
 8015824:	08015b7b 	.word	0x08015b7b
 8015828:	08015b9f 	.word	0x08015b9f

0801582c <_cleanup_r>:
 801582c:	4901      	ldr	r1, [pc, #4]	; (8015834 <_cleanup_r+0x8>)
 801582e:	f000 b8af 	b.w	8015990 <_fwalk_reent>
 8015832:	bf00      	nop
 8015834:	0801576d 	.word	0x0801576d

08015838 <__sfmoreglue>:
 8015838:	b570      	push	{r4, r5, r6, lr}
 801583a:	1e4a      	subs	r2, r1, #1
 801583c:	2568      	movs	r5, #104	; 0x68
 801583e:	4355      	muls	r5, r2
 8015840:	460e      	mov	r6, r1
 8015842:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015846:	f7fd fbeb 	bl	8013020 <_malloc_r>
 801584a:	4604      	mov	r4, r0
 801584c:	b140      	cbz	r0, 8015860 <__sfmoreglue+0x28>
 801584e:	2100      	movs	r1, #0
 8015850:	e9c0 1600 	strd	r1, r6, [r0]
 8015854:	300c      	adds	r0, #12
 8015856:	60a0      	str	r0, [r4, #8]
 8015858:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801585c:	f7fd fb88 	bl	8012f70 <memset>
 8015860:	4620      	mov	r0, r4
 8015862:	bd70      	pop	{r4, r5, r6, pc}

08015864 <__sfp_lock_acquire>:
 8015864:	4801      	ldr	r0, [pc, #4]	; (801586c <__sfp_lock_acquire+0x8>)
 8015866:	f7ff bc96 	b.w	8015196 <__retarget_lock_acquire_recursive>
 801586a:	bf00      	nop
 801586c:	20001d24 	.word	0x20001d24

08015870 <__sfp_lock_release>:
 8015870:	4801      	ldr	r0, [pc, #4]	; (8015878 <__sfp_lock_release+0x8>)
 8015872:	f7ff bc91 	b.w	8015198 <__retarget_lock_release_recursive>
 8015876:	bf00      	nop
 8015878:	20001d24 	.word	0x20001d24

0801587c <__sinit_lock_acquire>:
 801587c:	4801      	ldr	r0, [pc, #4]	; (8015884 <__sinit_lock_acquire+0x8>)
 801587e:	f7ff bc8a 	b.w	8015196 <__retarget_lock_acquire_recursive>
 8015882:	bf00      	nop
 8015884:	20001d1f 	.word	0x20001d1f

08015888 <__sinit_lock_release>:
 8015888:	4801      	ldr	r0, [pc, #4]	; (8015890 <__sinit_lock_release+0x8>)
 801588a:	f7ff bc85 	b.w	8015198 <__retarget_lock_release_recursive>
 801588e:	bf00      	nop
 8015890:	20001d1f 	.word	0x20001d1f

08015894 <__sinit>:
 8015894:	b510      	push	{r4, lr}
 8015896:	4604      	mov	r4, r0
 8015898:	f7ff fff0 	bl	801587c <__sinit_lock_acquire>
 801589c:	69a3      	ldr	r3, [r4, #24]
 801589e:	b11b      	cbz	r3, 80158a8 <__sinit+0x14>
 80158a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80158a4:	f7ff bff0 	b.w	8015888 <__sinit_lock_release>
 80158a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80158ac:	6523      	str	r3, [r4, #80]	; 0x50
 80158ae:	4b13      	ldr	r3, [pc, #76]	; (80158fc <__sinit+0x68>)
 80158b0:	4a13      	ldr	r2, [pc, #76]	; (8015900 <__sinit+0x6c>)
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80158b6:	42a3      	cmp	r3, r4
 80158b8:	bf04      	itt	eq
 80158ba:	2301      	moveq	r3, #1
 80158bc:	61a3      	streq	r3, [r4, #24]
 80158be:	4620      	mov	r0, r4
 80158c0:	f000 f820 	bl	8015904 <__sfp>
 80158c4:	6060      	str	r0, [r4, #4]
 80158c6:	4620      	mov	r0, r4
 80158c8:	f000 f81c 	bl	8015904 <__sfp>
 80158cc:	60a0      	str	r0, [r4, #8]
 80158ce:	4620      	mov	r0, r4
 80158d0:	f000 f818 	bl	8015904 <__sfp>
 80158d4:	2200      	movs	r2, #0
 80158d6:	60e0      	str	r0, [r4, #12]
 80158d8:	2104      	movs	r1, #4
 80158da:	6860      	ldr	r0, [r4, #4]
 80158dc:	f7ff ff82 	bl	80157e4 <std>
 80158e0:	68a0      	ldr	r0, [r4, #8]
 80158e2:	2201      	movs	r2, #1
 80158e4:	2109      	movs	r1, #9
 80158e6:	f7ff ff7d 	bl	80157e4 <std>
 80158ea:	68e0      	ldr	r0, [r4, #12]
 80158ec:	2202      	movs	r2, #2
 80158ee:	2112      	movs	r1, #18
 80158f0:	f7ff ff78 	bl	80157e4 <std>
 80158f4:	2301      	movs	r3, #1
 80158f6:	61a3      	str	r3, [r4, #24]
 80158f8:	e7d2      	b.n	80158a0 <__sinit+0xc>
 80158fa:	bf00      	nop
 80158fc:	0801949c 	.word	0x0801949c
 8015900:	0801582d 	.word	0x0801582d

08015904 <__sfp>:
 8015904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015906:	4607      	mov	r7, r0
 8015908:	f7ff ffac 	bl	8015864 <__sfp_lock_acquire>
 801590c:	4b1e      	ldr	r3, [pc, #120]	; (8015988 <__sfp+0x84>)
 801590e:	681e      	ldr	r6, [r3, #0]
 8015910:	69b3      	ldr	r3, [r6, #24]
 8015912:	b913      	cbnz	r3, 801591a <__sfp+0x16>
 8015914:	4630      	mov	r0, r6
 8015916:	f7ff ffbd 	bl	8015894 <__sinit>
 801591a:	3648      	adds	r6, #72	; 0x48
 801591c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015920:	3b01      	subs	r3, #1
 8015922:	d503      	bpl.n	801592c <__sfp+0x28>
 8015924:	6833      	ldr	r3, [r6, #0]
 8015926:	b30b      	cbz	r3, 801596c <__sfp+0x68>
 8015928:	6836      	ldr	r6, [r6, #0]
 801592a:	e7f7      	b.n	801591c <__sfp+0x18>
 801592c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015930:	b9d5      	cbnz	r5, 8015968 <__sfp+0x64>
 8015932:	4b16      	ldr	r3, [pc, #88]	; (801598c <__sfp+0x88>)
 8015934:	60e3      	str	r3, [r4, #12]
 8015936:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801593a:	6665      	str	r5, [r4, #100]	; 0x64
 801593c:	f7ff fc2a 	bl	8015194 <__retarget_lock_init_recursive>
 8015940:	f7ff ff96 	bl	8015870 <__sfp_lock_release>
 8015944:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015948:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801594c:	6025      	str	r5, [r4, #0]
 801594e:	61a5      	str	r5, [r4, #24]
 8015950:	2208      	movs	r2, #8
 8015952:	4629      	mov	r1, r5
 8015954:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015958:	f7fd fb0a 	bl	8012f70 <memset>
 801595c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015960:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015964:	4620      	mov	r0, r4
 8015966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015968:	3468      	adds	r4, #104	; 0x68
 801596a:	e7d9      	b.n	8015920 <__sfp+0x1c>
 801596c:	2104      	movs	r1, #4
 801596e:	4638      	mov	r0, r7
 8015970:	f7ff ff62 	bl	8015838 <__sfmoreglue>
 8015974:	4604      	mov	r4, r0
 8015976:	6030      	str	r0, [r6, #0]
 8015978:	2800      	cmp	r0, #0
 801597a:	d1d5      	bne.n	8015928 <__sfp+0x24>
 801597c:	f7ff ff78 	bl	8015870 <__sfp_lock_release>
 8015980:	230c      	movs	r3, #12
 8015982:	603b      	str	r3, [r7, #0]
 8015984:	e7ee      	b.n	8015964 <__sfp+0x60>
 8015986:	bf00      	nop
 8015988:	0801949c 	.word	0x0801949c
 801598c:	ffff0001 	.word	0xffff0001

08015990 <_fwalk_reent>:
 8015990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015994:	4606      	mov	r6, r0
 8015996:	4688      	mov	r8, r1
 8015998:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801599c:	2700      	movs	r7, #0
 801599e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80159a2:	f1b9 0901 	subs.w	r9, r9, #1
 80159a6:	d505      	bpl.n	80159b4 <_fwalk_reent+0x24>
 80159a8:	6824      	ldr	r4, [r4, #0]
 80159aa:	2c00      	cmp	r4, #0
 80159ac:	d1f7      	bne.n	801599e <_fwalk_reent+0xe>
 80159ae:	4638      	mov	r0, r7
 80159b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159b4:	89ab      	ldrh	r3, [r5, #12]
 80159b6:	2b01      	cmp	r3, #1
 80159b8:	d907      	bls.n	80159ca <_fwalk_reent+0x3a>
 80159ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80159be:	3301      	adds	r3, #1
 80159c0:	d003      	beq.n	80159ca <_fwalk_reent+0x3a>
 80159c2:	4629      	mov	r1, r5
 80159c4:	4630      	mov	r0, r6
 80159c6:	47c0      	blx	r8
 80159c8:	4307      	orrs	r7, r0
 80159ca:	3568      	adds	r5, #104	; 0x68
 80159cc:	e7e9      	b.n	80159a2 <_fwalk_reent+0x12>

080159ce <__swhatbuf_r>:
 80159ce:	b570      	push	{r4, r5, r6, lr}
 80159d0:	460e      	mov	r6, r1
 80159d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159d6:	2900      	cmp	r1, #0
 80159d8:	b096      	sub	sp, #88	; 0x58
 80159da:	4614      	mov	r4, r2
 80159dc:	461d      	mov	r5, r3
 80159de:	da07      	bge.n	80159f0 <__swhatbuf_r+0x22>
 80159e0:	2300      	movs	r3, #0
 80159e2:	602b      	str	r3, [r5, #0]
 80159e4:	89b3      	ldrh	r3, [r6, #12]
 80159e6:	061a      	lsls	r2, r3, #24
 80159e8:	d410      	bmi.n	8015a0c <__swhatbuf_r+0x3e>
 80159ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80159ee:	e00e      	b.n	8015a0e <__swhatbuf_r+0x40>
 80159f0:	466a      	mov	r2, sp
 80159f2:	f000 f8fb 	bl	8015bec <_fstat_r>
 80159f6:	2800      	cmp	r0, #0
 80159f8:	dbf2      	blt.n	80159e0 <__swhatbuf_r+0x12>
 80159fa:	9a01      	ldr	r2, [sp, #4]
 80159fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015a00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015a04:	425a      	negs	r2, r3
 8015a06:	415a      	adcs	r2, r3
 8015a08:	602a      	str	r2, [r5, #0]
 8015a0a:	e7ee      	b.n	80159ea <__swhatbuf_r+0x1c>
 8015a0c:	2340      	movs	r3, #64	; 0x40
 8015a0e:	2000      	movs	r0, #0
 8015a10:	6023      	str	r3, [r4, #0]
 8015a12:	b016      	add	sp, #88	; 0x58
 8015a14:	bd70      	pop	{r4, r5, r6, pc}
	...

08015a18 <__smakebuf_r>:
 8015a18:	898b      	ldrh	r3, [r1, #12]
 8015a1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015a1c:	079d      	lsls	r5, r3, #30
 8015a1e:	4606      	mov	r6, r0
 8015a20:	460c      	mov	r4, r1
 8015a22:	d507      	bpl.n	8015a34 <__smakebuf_r+0x1c>
 8015a24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015a28:	6023      	str	r3, [r4, #0]
 8015a2a:	6123      	str	r3, [r4, #16]
 8015a2c:	2301      	movs	r3, #1
 8015a2e:	6163      	str	r3, [r4, #20]
 8015a30:	b002      	add	sp, #8
 8015a32:	bd70      	pop	{r4, r5, r6, pc}
 8015a34:	ab01      	add	r3, sp, #4
 8015a36:	466a      	mov	r2, sp
 8015a38:	f7ff ffc9 	bl	80159ce <__swhatbuf_r>
 8015a3c:	9900      	ldr	r1, [sp, #0]
 8015a3e:	4605      	mov	r5, r0
 8015a40:	4630      	mov	r0, r6
 8015a42:	f7fd faed 	bl	8013020 <_malloc_r>
 8015a46:	b948      	cbnz	r0, 8015a5c <__smakebuf_r+0x44>
 8015a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a4c:	059a      	lsls	r2, r3, #22
 8015a4e:	d4ef      	bmi.n	8015a30 <__smakebuf_r+0x18>
 8015a50:	f023 0303 	bic.w	r3, r3, #3
 8015a54:	f043 0302 	orr.w	r3, r3, #2
 8015a58:	81a3      	strh	r3, [r4, #12]
 8015a5a:	e7e3      	b.n	8015a24 <__smakebuf_r+0xc>
 8015a5c:	4b0d      	ldr	r3, [pc, #52]	; (8015a94 <__smakebuf_r+0x7c>)
 8015a5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015a60:	89a3      	ldrh	r3, [r4, #12]
 8015a62:	6020      	str	r0, [r4, #0]
 8015a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a68:	81a3      	strh	r3, [r4, #12]
 8015a6a:	9b00      	ldr	r3, [sp, #0]
 8015a6c:	6163      	str	r3, [r4, #20]
 8015a6e:	9b01      	ldr	r3, [sp, #4]
 8015a70:	6120      	str	r0, [r4, #16]
 8015a72:	b15b      	cbz	r3, 8015a8c <__smakebuf_r+0x74>
 8015a74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015a78:	4630      	mov	r0, r6
 8015a7a:	f000 f8c9 	bl	8015c10 <_isatty_r>
 8015a7e:	b128      	cbz	r0, 8015a8c <__smakebuf_r+0x74>
 8015a80:	89a3      	ldrh	r3, [r4, #12]
 8015a82:	f023 0303 	bic.w	r3, r3, #3
 8015a86:	f043 0301 	orr.w	r3, r3, #1
 8015a8a:	81a3      	strh	r3, [r4, #12]
 8015a8c:	89a0      	ldrh	r0, [r4, #12]
 8015a8e:	4305      	orrs	r5, r0
 8015a90:	81a5      	strh	r5, [r4, #12]
 8015a92:	e7cd      	b.n	8015a30 <__smakebuf_r+0x18>
 8015a94:	0801582d 	.word	0x0801582d

08015a98 <_raise_r>:
 8015a98:	291f      	cmp	r1, #31
 8015a9a:	b538      	push	{r3, r4, r5, lr}
 8015a9c:	4604      	mov	r4, r0
 8015a9e:	460d      	mov	r5, r1
 8015aa0:	d904      	bls.n	8015aac <_raise_r+0x14>
 8015aa2:	2316      	movs	r3, #22
 8015aa4:	6003      	str	r3, [r0, #0]
 8015aa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015aaa:	bd38      	pop	{r3, r4, r5, pc}
 8015aac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015aae:	b112      	cbz	r2, 8015ab6 <_raise_r+0x1e>
 8015ab0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015ab4:	b94b      	cbnz	r3, 8015aca <_raise_r+0x32>
 8015ab6:	4620      	mov	r0, r4
 8015ab8:	f000 f830 	bl	8015b1c <_getpid_r>
 8015abc:	462a      	mov	r2, r5
 8015abe:	4601      	mov	r1, r0
 8015ac0:	4620      	mov	r0, r4
 8015ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ac6:	f000 b817 	b.w	8015af8 <_kill_r>
 8015aca:	2b01      	cmp	r3, #1
 8015acc:	d00a      	beq.n	8015ae4 <_raise_r+0x4c>
 8015ace:	1c59      	adds	r1, r3, #1
 8015ad0:	d103      	bne.n	8015ada <_raise_r+0x42>
 8015ad2:	2316      	movs	r3, #22
 8015ad4:	6003      	str	r3, [r0, #0]
 8015ad6:	2001      	movs	r0, #1
 8015ad8:	e7e7      	b.n	8015aaa <_raise_r+0x12>
 8015ada:	2400      	movs	r4, #0
 8015adc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015ae0:	4628      	mov	r0, r5
 8015ae2:	4798      	blx	r3
 8015ae4:	2000      	movs	r0, #0
 8015ae6:	e7e0      	b.n	8015aaa <_raise_r+0x12>

08015ae8 <raise>:
 8015ae8:	4b02      	ldr	r3, [pc, #8]	; (8015af4 <raise+0xc>)
 8015aea:	4601      	mov	r1, r0
 8015aec:	6818      	ldr	r0, [r3, #0]
 8015aee:	f7ff bfd3 	b.w	8015a98 <_raise_r>
 8015af2:	bf00      	nop
 8015af4:	20000780 	.word	0x20000780

08015af8 <_kill_r>:
 8015af8:	b538      	push	{r3, r4, r5, lr}
 8015afa:	4d07      	ldr	r5, [pc, #28]	; (8015b18 <_kill_r+0x20>)
 8015afc:	2300      	movs	r3, #0
 8015afe:	4604      	mov	r4, r0
 8015b00:	4608      	mov	r0, r1
 8015b02:	4611      	mov	r1, r2
 8015b04:	602b      	str	r3, [r5, #0]
 8015b06:	f000 fb91 	bl	801622c <_kill>
 8015b0a:	1c43      	adds	r3, r0, #1
 8015b0c:	d102      	bne.n	8015b14 <_kill_r+0x1c>
 8015b0e:	682b      	ldr	r3, [r5, #0]
 8015b10:	b103      	cbz	r3, 8015b14 <_kill_r+0x1c>
 8015b12:	6023      	str	r3, [r4, #0]
 8015b14:	bd38      	pop	{r3, r4, r5, pc}
 8015b16:	bf00      	nop
 8015b18:	20001d18 	.word	0x20001d18

08015b1c <_getpid_r>:
 8015b1c:	f000 bb76 	b.w	801620c <_getpid>

08015b20 <__sread>:
 8015b20:	b510      	push	{r4, lr}
 8015b22:	460c      	mov	r4, r1
 8015b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b28:	f000 f894 	bl	8015c54 <_read_r>
 8015b2c:	2800      	cmp	r0, #0
 8015b2e:	bfab      	itete	ge
 8015b30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015b32:	89a3      	ldrhlt	r3, [r4, #12]
 8015b34:	181b      	addge	r3, r3, r0
 8015b36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015b3a:	bfac      	ite	ge
 8015b3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8015b3e:	81a3      	strhlt	r3, [r4, #12]
 8015b40:	bd10      	pop	{r4, pc}

08015b42 <__swrite>:
 8015b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b46:	461f      	mov	r7, r3
 8015b48:	898b      	ldrh	r3, [r1, #12]
 8015b4a:	05db      	lsls	r3, r3, #23
 8015b4c:	4605      	mov	r5, r0
 8015b4e:	460c      	mov	r4, r1
 8015b50:	4616      	mov	r6, r2
 8015b52:	d505      	bpl.n	8015b60 <__swrite+0x1e>
 8015b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b58:	2302      	movs	r3, #2
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	f000 f868 	bl	8015c30 <_lseek_r>
 8015b60:	89a3      	ldrh	r3, [r4, #12]
 8015b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015b6a:	81a3      	strh	r3, [r4, #12]
 8015b6c:	4632      	mov	r2, r6
 8015b6e:	463b      	mov	r3, r7
 8015b70:	4628      	mov	r0, r5
 8015b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b76:	f000 b817 	b.w	8015ba8 <_write_r>

08015b7a <__sseek>:
 8015b7a:	b510      	push	{r4, lr}
 8015b7c:	460c      	mov	r4, r1
 8015b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b82:	f000 f855 	bl	8015c30 <_lseek_r>
 8015b86:	1c43      	adds	r3, r0, #1
 8015b88:	89a3      	ldrh	r3, [r4, #12]
 8015b8a:	bf15      	itete	ne
 8015b8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8015b8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015b92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015b96:	81a3      	strheq	r3, [r4, #12]
 8015b98:	bf18      	it	ne
 8015b9a:	81a3      	strhne	r3, [r4, #12]
 8015b9c:	bd10      	pop	{r4, pc}

08015b9e <__sclose>:
 8015b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ba2:	f000 b813 	b.w	8015bcc <_close_r>
	...

08015ba8 <_write_r>:
 8015ba8:	b538      	push	{r3, r4, r5, lr}
 8015baa:	4d07      	ldr	r5, [pc, #28]	; (8015bc8 <_write_r+0x20>)
 8015bac:	4604      	mov	r4, r0
 8015bae:	4608      	mov	r0, r1
 8015bb0:	4611      	mov	r1, r2
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	602a      	str	r2, [r5, #0]
 8015bb6:	461a      	mov	r2, r3
 8015bb8:	f000 fb50 	bl	801625c <_write>
 8015bbc:	1c43      	adds	r3, r0, #1
 8015bbe:	d102      	bne.n	8015bc6 <_write_r+0x1e>
 8015bc0:	682b      	ldr	r3, [r5, #0]
 8015bc2:	b103      	cbz	r3, 8015bc6 <_write_r+0x1e>
 8015bc4:	6023      	str	r3, [r4, #0]
 8015bc6:	bd38      	pop	{r3, r4, r5, pc}
 8015bc8:	20001d18 	.word	0x20001d18

08015bcc <_close_r>:
 8015bcc:	b538      	push	{r3, r4, r5, lr}
 8015bce:	4d06      	ldr	r5, [pc, #24]	; (8015be8 <_close_r+0x1c>)
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	4604      	mov	r4, r0
 8015bd4:	4608      	mov	r0, r1
 8015bd6:	602b      	str	r3, [r5, #0]
 8015bd8:	f000 fb08 	bl	80161ec <_close>
 8015bdc:	1c43      	adds	r3, r0, #1
 8015bde:	d102      	bne.n	8015be6 <_close_r+0x1a>
 8015be0:	682b      	ldr	r3, [r5, #0]
 8015be2:	b103      	cbz	r3, 8015be6 <_close_r+0x1a>
 8015be4:	6023      	str	r3, [r4, #0]
 8015be6:	bd38      	pop	{r3, r4, r5, pc}
 8015be8:	20001d18 	.word	0x20001d18

08015bec <_fstat_r>:
 8015bec:	b538      	push	{r3, r4, r5, lr}
 8015bee:	4d07      	ldr	r5, [pc, #28]	; (8015c0c <_fstat_r+0x20>)
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	4604      	mov	r4, r0
 8015bf4:	4608      	mov	r0, r1
 8015bf6:	4611      	mov	r1, r2
 8015bf8:	602b      	str	r3, [r5, #0]
 8015bfa:	f000 faff 	bl	80161fc <_fstat>
 8015bfe:	1c43      	adds	r3, r0, #1
 8015c00:	d102      	bne.n	8015c08 <_fstat_r+0x1c>
 8015c02:	682b      	ldr	r3, [r5, #0]
 8015c04:	b103      	cbz	r3, 8015c08 <_fstat_r+0x1c>
 8015c06:	6023      	str	r3, [r4, #0]
 8015c08:	bd38      	pop	{r3, r4, r5, pc}
 8015c0a:	bf00      	nop
 8015c0c:	20001d18 	.word	0x20001d18

08015c10 <_isatty_r>:
 8015c10:	b538      	push	{r3, r4, r5, lr}
 8015c12:	4d06      	ldr	r5, [pc, #24]	; (8015c2c <_isatty_r+0x1c>)
 8015c14:	2300      	movs	r3, #0
 8015c16:	4604      	mov	r4, r0
 8015c18:	4608      	mov	r0, r1
 8015c1a:	602b      	str	r3, [r5, #0]
 8015c1c:	f000 fafe 	bl	801621c <_isatty>
 8015c20:	1c43      	adds	r3, r0, #1
 8015c22:	d102      	bne.n	8015c2a <_isatty_r+0x1a>
 8015c24:	682b      	ldr	r3, [r5, #0]
 8015c26:	b103      	cbz	r3, 8015c2a <_isatty_r+0x1a>
 8015c28:	6023      	str	r3, [r4, #0]
 8015c2a:	bd38      	pop	{r3, r4, r5, pc}
 8015c2c:	20001d18 	.word	0x20001d18

08015c30 <_lseek_r>:
 8015c30:	b538      	push	{r3, r4, r5, lr}
 8015c32:	4d07      	ldr	r5, [pc, #28]	; (8015c50 <_lseek_r+0x20>)
 8015c34:	4604      	mov	r4, r0
 8015c36:	4608      	mov	r0, r1
 8015c38:	4611      	mov	r1, r2
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	602a      	str	r2, [r5, #0]
 8015c3e:	461a      	mov	r2, r3
 8015c40:	f000 fafc 	bl	801623c <_lseek>
 8015c44:	1c43      	adds	r3, r0, #1
 8015c46:	d102      	bne.n	8015c4e <_lseek_r+0x1e>
 8015c48:	682b      	ldr	r3, [r5, #0]
 8015c4a:	b103      	cbz	r3, 8015c4e <_lseek_r+0x1e>
 8015c4c:	6023      	str	r3, [r4, #0]
 8015c4e:	bd38      	pop	{r3, r4, r5, pc}
 8015c50:	20001d18 	.word	0x20001d18

08015c54 <_read_r>:
 8015c54:	b538      	push	{r3, r4, r5, lr}
 8015c56:	4d07      	ldr	r5, [pc, #28]	; (8015c74 <_read_r+0x20>)
 8015c58:	4604      	mov	r4, r0
 8015c5a:	4608      	mov	r0, r1
 8015c5c:	4611      	mov	r1, r2
 8015c5e:	2200      	movs	r2, #0
 8015c60:	602a      	str	r2, [r5, #0]
 8015c62:	461a      	mov	r2, r3
 8015c64:	f000 faf2 	bl	801624c <_read>
 8015c68:	1c43      	adds	r3, r0, #1
 8015c6a:	d102      	bne.n	8015c72 <_read_r+0x1e>
 8015c6c:	682b      	ldr	r3, [r5, #0]
 8015c6e:	b103      	cbz	r3, 8015c72 <_read_r+0x1e>
 8015c70:	6023      	str	r3, [r4, #0]
 8015c72:	bd38      	pop	{r3, r4, r5, pc}
 8015c74:	20001d18 	.word	0x20001d18

08015c78 <fabsf>:
 8015c78:	ee10 3a10 	vmov	r3, s0
 8015c7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015c80:	ee00 3a10 	vmov	s0, r3
 8015c84:	4770      	bx	lr
	...

08015c88 <tanhf>:
 8015c88:	b510      	push	{r4, lr}
 8015c8a:	ee10 4a10 	vmov	r4, s0
 8015c8e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015c92:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015c96:	ed2d 8b02 	vpush	{d8}
 8015c9a:	eeb0 7a40 	vmov.f32	s14, s0
 8015c9e:	db0c      	blt.n	8015cba <tanhf+0x32>
 8015ca0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015ca4:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8015ca8:	2c00      	cmp	r4, #0
 8015caa:	bfac      	ite	ge
 8015cac:	ee37 0a80 	vaddge.f32	s0, s15, s0
 8015cb0:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 8015cb4:	ecbd 8b02 	vpop	{d8}
 8015cb8:	bd10      	pop	{r4, pc}
 8015cba:	4a1b      	ldr	r2, [pc, #108]	; (8015d28 <tanhf+0xa0>)
 8015cbc:	4293      	cmp	r3, r2
 8015cbe:	dc30      	bgt.n	8015d22 <tanhf+0x9a>
 8015cc0:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8015cc4:	da06      	bge.n	8015cd4 <tanhf+0x4c>
 8015cc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015cca:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015cce:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015cd2:	e7ef      	b.n	8015cb4 <tanhf+0x2c>
 8015cd4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015cd8:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8015cdc:	db12      	blt.n	8015d04 <tanhf+0x7c>
 8015cde:	f7ff ffcb 	bl	8015c78 <fabsf>
 8015ce2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015ce6:	f000 f953 	bl	8015f90 <expm1f>
 8015cea:	ee30 0a08 	vadd.f32	s0, s0, s16
 8015cee:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8015cf2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015cf6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015cfa:	2c00      	cmp	r4, #0
 8015cfc:	bfb8      	it	lt
 8015cfe:	eeb1 0a40 	vneglt.f32	s0, s0
 8015d02:	e7d7      	b.n	8015cb4 <tanhf+0x2c>
 8015d04:	f7ff ffb8 	bl	8015c78 <fabsf>
 8015d08:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8015d0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015d10:	f000 f93e 	bl	8015f90 <expm1f>
 8015d14:	ee70 7a08 	vadd.f32	s15, s0, s16
 8015d18:	eeb1 7a40 	vneg.f32	s14, s0
 8015d1c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015d20:	e7eb      	b.n	8015cfa <tanhf+0x72>
 8015d22:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015d26:	e7e8      	b.n	8015cfa <tanhf+0x72>
 8015d28:	41afffff 	.word	0x41afffff

08015d2c <expf>:
 8015d2c:	b508      	push	{r3, lr}
 8015d2e:	ed2d 8b02 	vpush	{d8}
 8015d32:	eef0 8a40 	vmov.f32	s17, s0
 8015d36:	f000 f837 	bl	8015da8 <__ieee754_expf>
 8015d3a:	4b16      	ldr	r3, [pc, #88]	; (8015d94 <expf+0x68>)
 8015d3c:	f993 3000 	ldrsb.w	r3, [r3]
 8015d40:	3301      	adds	r3, #1
 8015d42:	eeb0 8a40 	vmov.f32	s16, s0
 8015d46:	d011      	beq.n	8015d6c <expf+0x40>
 8015d48:	eeb0 0a68 	vmov.f32	s0, s17
 8015d4c:	f000 fa40 	bl	80161d0 <finitef>
 8015d50:	b160      	cbz	r0, 8015d6c <expf+0x40>
 8015d52:	eddf 7a11 	vldr	s15, [pc, #68]	; 8015d98 <expf+0x6c>
 8015d56:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d5e:	dd0a      	ble.n	8015d76 <expf+0x4a>
 8015d60:	f7fd f8be 	bl	8012ee0 <__errno>
 8015d64:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8015d9c <expf+0x70>
 8015d68:	2322      	movs	r3, #34	; 0x22
 8015d6a:	6003      	str	r3, [r0, #0]
 8015d6c:	eeb0 0a48 	vmov.f32	s0, s16
 8015d70:	ecbd 8b02 	vpop	{d8}
 8015d74:	bd08      	pop	{r3, pc}
 8015d76:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8015da0 <expf+0x74>
 8015d7a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d82:	d5f3      	bpl.n	8015d6c <expf+0x40>
 8015d84:	f7fd f8ac 	bl	8012ee0 <__errno>
 8015d88:	2322      	movs	r3, #34	; 0x22
 8015d8a:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8015da4 <expf+0x78>
 8015d8e:	6003      	str	r3, [r0, #0]
 8015d90:	e7ec      	b.n	8015d6c <expf+0x40>
 8015d92:	bf00      	nop
 8015d94:	20000950 	.word	0x20000950
 8015d98:	42b17180 	.word	0x42b17180
 8015d9c:	7f800000 	.word	0x7f800000
 8015da0:	c2cff1b5 	.word	0xc2cff1b5
 8015da4:	00000000 	.word	0x00000000

08015da8 <__ieee754_expf>:
 8015da8:	ee10 2a10 	vmov	r2, s0
 8015dac:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8015db0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015db4:	d902      	bls.n	8015dbc <__ieee754_expf+0x14>
 8015db6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015dba:	4770      	bx	lr
 8015dbc:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8015dc0:	d106      	bne.n	8015dd0 <__ieee754_expf+0x28>
 8015dc2:	eddf 7a51 	vldr	s15, [pc, #324]	; 8015f08 <__ieee754_expf+0x160>
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	bf18      	it	ne
 8015dca:	eeb0 0a67 	vmovne.f32	s0, s15
 8015dce:	4770      	bx	lr
 8015dd0:	484e      	ldr	r0, [pc, #312]	; (8015f0c <__ieee754_expf+0x164>)
 8015dd2:	4282      	cmp	r2, r0
 8015dd4:	dd04      	ble.n	8015de0 <__ieee754_expf+0x38>
 8015dd6:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8015f10 <__ieee754_expf+0x168>
 8015dda:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015dde:	4770      	bx	lr
 8015de0:	2a00      	cmp	r2, #0
 8015de2:	da03      	bge.n	8015dec <__ieee754_expf+0x44>
 8015de4:	4a4b      	ldr	r2, [pc, #300]	; (8015f14 <__ieee754_expf+0x16c>)
 8015de6:	4291      	cmp	r1, r2
 8015de8:	f200 808a 	bhi.w	8015f00 <__ieee754_expf+0x158>
 8015dec:	4a4a      	ldr	r2, [pc, #296]	; (8015f18 <__ieee754_expf+0x170>)
 8015dee:	4291      	cmp	r1, r2
 8015df0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8015df4:	d954      	bls.n	8015ea0 <__ieee754_expf+0xf8>
 8015df6:	4a49      	ldr	r2, [pc, #292]	; (8015f1c <__ieee754_expf+0x174>)
 8015df8:	4291      	cmp	r1, r2
 8015dfa:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8015dfe:	d836      	bhi.n	8015e6e <__ieee754_expf+0xc6>
 8015e00:	4947      	ldr	r1, [pc, #284]	; (8015f20 <__ieee754_expf+0x178>)
 8015e02:	4411      	add	r1, r2
 8015e04:	ed91 7a00 	vldr	s14, [r1]
 8015e08:	4946      	ldr	r1, [pc, #280]	; (8015f24 <__ieee754_expf+0x17c>)
 8015e0a:	440a      	add	r2, r1
 8015e0c:	edd2 7a00 	vldr	s15, [r2]
 8015e10:	ee30 7a47 	vsub.f32	s14, s0, s14
 8015e14:	f1c3 0201 	rsb	r2, r3, #1
 8015e18:	1ad2      	subs	r2, r2, r3
 8015e1a:	ee37 0a67 	vsub.f32	s0, s14, s15
 8015e1e:	ee60 6a00 	vmul.f32	s13, s0, s0
 8015e22:	eddf 5a41 	vldr	s11, [pc, #260]	; 8015f28 <__ieee754_expf+0x180>
 8015e26:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8015f2c <__ieee754_expf+0x184>
 8015e2a:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8015e2e:	eddf 5a40 	vldr	s11, [pc, #256]	; 8015f30 <__ieee754_expf+0x188>
 8015e32:	eee5 5a26 	vfma.f32	s11, s10, s13
 8015e36:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8015f34 <__ieee754_expf+0x18c>
 8015e3a:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8015e3e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8015f38 <__ieee754_expf+0x190>
 8015e42:	eee5 5a26 	vfma.f32	s11, s10, s13
 8015e46:	eeb0 5a40 	vmov.f32	s10, s0
 8015e4a:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8015e4e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8015e52:	eef0 6a45 	vmov.f32	s13, s10
 8015e56:	ee20 5a05 	vmul.f32	s10, s0, s10
 8015e5a:	bb92      	cbnz	r2, 8015ec2 <__ieee754_expf+0x11a>
 8015e5c:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8015e60:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8015e64:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015e68:	ee36 0a40 	vsub.f32	s0, s12, s0
 8015e6c:	4770      	bx	lr
 8015e6e:	4b33      	ldr	r3, [pc, #204]	; (8015f3c <__ieee754_expf+0x194>)
 8015e70:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8015f40 <__ieee754_expf+0x198>
 8015e74:	4413      	add	r3, r2
 8015e76:	edd3 7a00 	vldr	s15, [r3]
 8015e7a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015e7e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8015f44 <__ieee754_expf+0x19c>
 8015e82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015e86:	ee17 2a90 	vmov	r2, s15
 8015e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015e8e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8015e92:	eeb0 7a40 	vmov.f32	s14, s0
 8015e96:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8015f48 <__ieee754_expf+0x1a0>
 8015e9a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015e9e:	e7bc      	b.n	8015e1a <__ieee754_expf+0x72>
 8015ea0:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8015ea4:	d20b      	bcs.n	8015ebe <__ieee754_expf+0x116>
 8015ea6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8015f10 <__ieee754_expf+0x168>
 8015eaa:	ee70 6a26 	vadd.f32	s13, s0, s13
 8015eae:	eef4 6ac6 	vcmpe.f32	s13, s12
 8015eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eb6:	dd02      	ble.n	8015ebe <__ieee754_expf+0x116>
 8015eb8:	ee30 0a06 	vadd.f32	s0, s0, s12
 8015ebc:	4770      	bx	lr
 8015ebe:	2200      	movs	r2, #0
 8015ec0:	e7ad      	b.n	8015e1e <__ieee754_expf+0x76>
 8015ec2:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8015ec6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8015eca:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8015ece:	bfb8      	it	lt
 8015ed0:	3264      	addlt	r2, #100	; 0x64
 8015ed2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015ed6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8015eda:	ee76 7a40 	vsub.f32	s15, s12, s0
 8015ede:	ee17 3a90 	vmov	r3, s15
 8015ee2:	bfab      	itete	ge
 8015ee4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8015ee8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8015eec:	ee00 3a10 	vmovge	s0, r3
 8015ef0:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8015f4c <__ieee754_expf+0x1a4>
 8015ef4:	bfbc      	itt	lt
 8015ef6:	ee00 3a10 	vmovlt	s0, r3
 8015efa:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8015efe:	4770      	bx	lr
 8015f00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015f08 <__ieee754_expf+0x160>
 8015f04:	4770      	bx	lr
 8015f06:	bf00      	nop
 8015f08:	00000000 	.word	0x00000000
 8015f0c:	42b17217 	.word	0x42b17217
 8015f10:	7149f2ca 	.word	0x7149f2ca
 8015f14:	42cff1b5 	.word	0x42cff1b5
 8015f18:	3eb17218 	.word	0x3eb17218
 8015f1c:	3f851591 	.word	0x3f851591
 8015f20:	08019884 	.word	0x08019884
 8015f24:	0801988c 	.word	0x0801988c
 8015f28:	3331bb4c 	.word	0x3331bb4c
 8015f2c:	b5ddea0e 	.word	0xb5ddea0e
 8015f30:	388ab355 	.word	0x388ab355
 8015f34:	bb360b61 	.word	0xbb360b61
 8015f38:	3e2aaaab 	.word	0x3e2aaaab
 8015f3c:	0801987c 	.word	0x0801987c
 8015f40:	3fb8aa3b 	.word	0x3fb8aa3b
 8015f44:	3f317180 	.word	0x3f317180
 8015f48:	3717f7d1 	.word	0x3717f7d1
 8015f4c:	0d800000 	.word	0x0d800000

08015f50 <with_errnof>:
 8015f50:	b513      	push	{r0, r1, r4, lr}
 8015f52:	4604      	mov	r4, r0
 8015f54:	ed8d 0a01 	vstr	s0, [sp, #4]
 8015f58:	f7fc ffc2 	bl	8012ee0 <__errno>
 8015f5c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8015f60:	6004      	str	r4, [r0, #0]
 8015f62:	b002      	add	sp, #8
 8015f64:	bd10      	pop	{r4, pc}
	...

08015f68 <xflowf.constprop.0>:
 8015f68:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8015f84 <xflowf.constprop.0+0x1c>
 8015f6c:	eddf 7a06 	vldr	s15, [pc, #24]	; 8015f88 <xflowf.constprop.0+0x20>
 8015f70:	2800      	cmp	r0, #0
 8015f72:	bf08      	it	eq
 8015f74:	eef0 7a40 	vmoveq.f32	s15, s0
 8015f78:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015f7c:	2022      	movs	r0, #34	; 0x22
 8015f7e:	f7ff bfe7 	b.w	8015f50 <with_errnof>
 8015f82:	bf00      	nop
 8015f84:	70000000 	.word	0x70000000
 8015f88:	f0000000 	.word	0xf0000000

08015f8c <__math_oflowf>:
 8015f8c:	f7ff bfec 	b.w	8015f68 <xflowf.constprop.0>

08015f90 <expm1f>:
 8015f90:	ee10 2a10 	vmov	r2, s0
 8015f94:	497f      	ldr	r1, [pc, #508]	; (8016194 <expm1f+0x204>)
 8015f96:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8015f9a:	428b      	cmp	r3, r1
 8015f9c:	d921      	bls.n	8015fe2 <expm1f+0x52>
 8015f9e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015fa2:	d902      	bls.n	8015faa <expm1f+0x1a>
 8015fa4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015fa8:	4770      	bx	lr
 8015faa:	d106      	bne.n	8015fba <expm1f+0x2a>
 8015fac:	2a00      	cmp	r2, #0
 8015fae:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8015fb2:	bfb8      	it	lt
 8015fb4:	eeb0 0a67 	vmovlt.f32	s0, s15
 8015fb8:	4770      	bx	lr
 8015fba:	2a00      	cmp	r2, #0
 8015fbc:	db05      	blt.n	8015fca <expm1f+0x3a>
 8015fbe:	4976      	ldr	r1, [pc, #472]	; (8016198 <expm1f+0x208>)
 8015fc0:	428b      	cmp	r3, r1
 8015fc2:	d960      	bls.n	8016086 <expm1f+0xf6>
 8015fc4:	2000      	movs	r0, #0
 8015fc6:	f7ff bfe1 	b.w	8015f8c <__math_oflowf>
 8015fca:	eddf 7a74 	vldr	s15, [pc, #464]	; 801619c <expm1f+0x20c>
 8015fce:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015fd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fda:	d554      	bpl.n	8016086 <expm1f+0xf6>
 8015fdc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015fe0:	4770      	bx	lr
 8015fe2:	496f      	ldr	r1, [pc, #444]	; (80161a0 <expm1f+0x210>)
 8015fe4:	428b      	cmp	r3, r1
 8015fe6:	d96b      	bls.n	80160c0 <expm1f+0x130>
 8015fe8:	496e      	ldr	r1, [pc, #440]	; (80161a4 <expm1f+0x214>)
 8015fea:	428b      	cmp	r3, r1
 8015fec:	d84b      	bhi.n	8016086 <expm1f+0xf6>
 8015fee:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80161a8 <expm1f+0x218>
 8015ff2:	2a00      	cmp	r2, #0
 8015ff4:	bfa7      	ittee	ge
 8015ff6:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8015ffa:	eddf 7a6c 	vldrge	s15, [pc, #432]	; 80161ac <expm1f+0x21c>
 8015ffe:	eddf 7a6c 	vldrlt	s15, [pc, #432]	; 80161b0 <expm1f+0x220>
 8016002:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8016006:	bfac      	ite	ge
 8016008:	2301      	movge	r3, #1
 801600a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801600e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8016012:	ee37 7a40 	vsub.f32	s14, s14, s0
 8016016:	ee77 7a67 	vsub.f32	s15, s14, s15
 801601a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801601e:	ee20 5a25 	vmul.f32	s10, s0, s11
 8016022:	eddf 6a64 	vldr	s13, [pc, #400]	; 80161b4 <expm1f+0x224>
 8016026:	ed9f 6a64 	vldr	s12, [pc, #400]	; 80161b8 <expm1f+0x228>
 801602a:	ee20 7a05 	vmul.f32	s14, s0, s10
 801602e:	eea7 6a26 	vfma.f32	s12, s14, s13
 8016032:	eddf 6a62 	vldr	s13, [pc, #392]	; 80161bc <expm1f+0x22c>
 8016036:	eee6 6a07 	vfma.f32	s13, s12, s14
 801603a:	ed9f 6a61 	vldr	s12, [pc, #388]	; 80161c0 <expm1f+0x230>
 801603e:	eea6 6a87 	vfma.f32	s12, s13, s14
 8016042:	eddf 6a60 	vldr	s13, [pc, #384]	; 80161c4 <expm1f+0x234>
 8016046:	eee6 6a07 	vfma.f32	s13, s12, s14
 801604a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801604e:	eef0 4a46 	vmov.f32	s9, s12
 8016052:	eee6 4a87 	vfma.f32	s9, s13, s14
 8016056:	eef0 6a64 	vmov.f32	s13, s9
 801605a:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801605e:	eee5 4a66 	vfms.f32	s9, s10, s13
 8016062:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8016066:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 801606a:	eee0 6a64 	vfms.f32	s13, s0, s9
 801606e:	eef0 4a66 	vmov.f32	s9, s13
 8016072:	eec5 6a24 	vdiv.f32	s13, s10, s9
 8016076:	ee66 6a87 	vmul.f32	s13, s13, s14
 801607a:	bb7b      	cbnz	r3, 80160dc <expm1f+0x14c>
 801607c:	eef0 7a47 	vmov.f32	s15, s14
 8016080:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8016084:	e025      	b.n	80160d2 <expm1f+0x142>
 8016086:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801608a:	2a00      	cmp	r2, #0
 801608c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016090:	bfb8      	it	lt
 8016092:	eef0 7a47 	vmovlt.f32	s15, s14
 8016096:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80161c8 <expm1f+0x238>
 801609a:	eddf 6a44 	vldr	s13, [pc, #272]	; 80161ac <expm1f+0x21c>
 801609e:	ee40 7a07 	vmla.f32	s15, s0, s14
 80160a2:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80161a8 <expm1f+0x218>
 80160a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80160aa:	ee17 3a90 	vmov	r3, s15
 80160ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80160b2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80160b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80160ba:	eeb0 7a40 	vmov.f32	s14, s0
 80160be:	e7a6      	b.n	801600e <expm1f+0x7e>
 80160c0:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 80160c4:	d208      	bcs.n	80160d8 <expm1f+0x148>
 80160c6:	eddf 7a41 	vldr	s15, [pc, #260]	; 80161cc <expm1f+0x23c>
 80160ca:	ee70 7a27 	vadd.f32	s15, s0, s15
 80160ce:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80160d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80160d6:	4770      	bx	lr
 80160d8:	2300      	movs	r3, #0
 80160da:	e79e      	b.n	801601a <expm1f+0x8a>
 80160dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80160e0:	1c5a      	adds	r2, r3, #1
 80160e2:	eed6 7a80 	vfnms.f32	s15, s13, s0
 80160e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80160ea:	d106      	bne.n	80160fa <expm1f+0x16a>
 80160ec:	ee70 7a67 	vsub.f32	s15, s0, s15
 80160f0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80160f4:	eea7 0aa5 	vfma.f32	s0, s15, s11
 80160f8:	4770      	bx	lr
 80160fa:	2b01      	cmp	r3, #1
 80160fc:	d118      	bne.n	8016130 <expm1f+0x1a0>
 80160fe:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8016102:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801610a:	bf41      	itttt	mi
 801610c:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8016110:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 8016114:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 8016118:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 801611c:	bf5f      	itttt	pl
 801611e:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 8016122:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 8016126:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 801612a:	eeb0 0a46 	vmovpl.f32	s0, s12
 801612e:	4770      	bx	lr
 8016130:	1c5a      	adds	r2, r3, #1
 8016132:	2a39      	cmp	r2, #57	; 0x39
 8016134:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8016138:	d90b      	bls.n	8016152 <expm1f+0x1c2>
 801613a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801613e:	ee36 0a40 	vsub.f32	s0, s12, s0
 8016142:	ee10 3a10 	vmov	r3, s0
 8016146:	440b      	add	r3, r1
 8016148:	ee00 3a10 	vmov	s0, r3
 801614c:	ee30 0a46 	vsub.f32	s0, s0, s12
 8016150:	4770      	bx	lr
 8016152:	2b16      	cmp	r3, #22
 8016154:	dc11      	bgt.n	801617a <expm1f+0x1ea>
 8016156:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801615a:	fa42 f303 	asr.w	r3, r2, r3
 801615e:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8016162:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016166:	ee07 3a90 	vmov	s15, r3
 801616a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801616e:	ee10 3a10 	vmov	r3, s0
 8016172:	440b      	add	r3, r1
 8016174:	ee00 3a10 	vmov	s0, r3
 8016178:	4770      	bx	lr
 801617a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801617e:	05db      	lsls	r3, r3, #23
 8016180:	ee07 3a10 	vmov	s14, r3
 8016184:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016188:	ee30 0a67 	vsub.f32	s0, s0, s15
 801618c:	ee30 0a06 	vadd.f32	s0, s0, s12
 8016190:	e7ed      	b.n	801616e <expm1f+0x1de>
 8016192:	bf00      	nop
 8016194:	4195b843 	.word	0x4195b843
 8016198:	42b17217 	.word	0x42b17217
 801619c:	0da24260 	.word	0x0da24260
 80161a0:	3eb17218 	.word	0x3eb17218
 80161a4:	3f851591 	.word	0x3f851591
 80161a8:	3f317180 	.word	0x3f317180
 80161ac:	3717f7d1 	.word	0x3717f7d1
 80161b0:	b717f7d1 	.word	0xb717f7d1
 80161b4:	b457edbb 	.word	0xb457edbb
 80161b8:	36867e54 	.word	0x36867e54
 80161bc:	b8a670cd 	.word	0xb8a670cd
 80161c0:	3ad00d01 	.word	0x3ad00d01
 80161c4:	bd088889 	.word	0xbd088889
 80161c8:	3fb8aa3b 	.word	0x3fb8aa3b
 80161cc:	7149f2ca 	.word	0x7149f2ca

080161d0 <finitef>:
 80161d0:	b082      	sub	sp, #8
 80161d2:	ed8d 0a01 	vstr	s0, [sp, #4]
 80161d6:	9801      	ldr	r0, [sp, #4]
 80161d8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80161dc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80161e0:	bfac      	ite	ge
 80161e2:	2000      	movge	r0, #0
 80161e4:	2001      	movlt	r0, #1
 80161e6:	b002      	add	sp, #8
 80161e8:	4770      	bx	lr
	...

080161ec <_close>:
 80161ec:	4b02      	ldr	r3, [pc, #8]	; (80161f8 <_close+0xc>)
 80161ee:	2258      	movs	r2, #88	; 0x58
 80161f0:	601a      	str	r2, [r3, #0]
 80161f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80161f6:	4770      	bx	lr
 80161f8:	20001d18 	.word	0x20001d18

080161fc <_fstat>:
 80161fc:	4b02      	ldr	r3, [pc, #8]	; (8016208 <_fstat+0xc>)
 80161fe:	2258      	movs	r2, #88	; 0x58
 8016200:	601a      	str	r2, [r3, #0]
 8016202:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016206:	4770      	bx	lr
 8016208:	20001d18 	.word	0x20001d18

0801620c <_getpid>:
 801620c:	4b02      	ldr	r3, [pc, #8]	; (8016218 <_getpid+0xc>)
 801620e:	2258      	movs	r2, #88	; 0x58
 8016210:	601a      	str	r2, [r3, #0]
 8016212:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016216:	4770      	bx	lr
 8016218:	20001d18 	.word	0x20001d18

0801621c <_isatty>:
 801621c:	4b02      	ldr	r3, [pc, #8]	; (8016228 <_isatty+0xc>)
 801621e:	2258      	movs	r2, #88	; 0x58
 8016220:	601a      	str	r2, [r3, #0]
 8016222:	2000      	movs	r0, #0
 8016224:	4770      	bx	lr
 8016226:	bf00      	nop
 8016228:	20001d18 	.word	0x20001d18

0801622c <_kill>:
 801622c:	4b02      	ldr	r3, [pc, #8]	; (8016238 <_kill+0xc>)
 801622e:	2258      	movs	r2, #88	; 0x58
 8016230:	601a      	str	r2, [r3, #0]
 8016232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016236:	4770      	bx	lr
 8016238:	20001d18 	.word	0x20001d18

0801623c <_lseek>:
 801623c:	4b02      	ldr	r3, [pc, #8]	; (8016248 <_lseek+0xc>)
 801623e:	2258      	movs	r2, #88	; 0x58
 8016240:	601a      	str	r2, [r3, #0]
 8016242:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016246:	4770      	bx	lr
 8016248:	20001d18 	.word	0x20001d18

0801624c <_read>:
 801624c:	4b02      	ldr	r3, [pc, #8]	; (8016258 <_read+0xc>)
 801624e:	2258      	movs	r2, #88	; 0x58
 8016250:	601a      	str	r2, [r3, #0]
 8016252:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016256:	4770      	bx	lr
 8016258:	20001d18 	.word	0x20001d18

0801625c <_write>:
 801625c:	4b02      	ldr	r3, [pc, #8]	; (8016268 <_write+0xc>)
 801625e:	2258      	movs	r2, #88	; 0x58
 8016260:	601a      	str	r2, [r3, #0]
 8016262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016266:	4770      	bx	lr
 8016268:	20001d18 	.word	0x20001d18

0801626c <_exit>:
 801626c:	e7fe      	b.n	801626c <_exit>
	...

08016270 <_init>:
 8016270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016272:	bf00      	nop
 8016274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016276:	bc08      	pop	{r3}
 8016278:	469e      	mov	lr, r3
 801627a:	4770      	bx	lr

0801627c <_fini>:
 801627c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801627e:	bf00      	nop
 8016280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016282:	bc08      	pop	{r3}
 8016284:	469e      	mov	lr, r3
 8016286:	4770      	bx	lr
