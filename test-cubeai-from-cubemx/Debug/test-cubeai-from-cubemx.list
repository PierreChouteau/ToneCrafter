
test-cubeai-from-cubemx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009ec  0800d5a0  0800d5a0  0001d5a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df8c  0800df8c  000207b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800df8c  0800df8c  0001df8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df94  0800df94  000207b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df94  0800df94  0001df94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df98  0800df98  0001df98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007b4  20000000  0800df9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f64  200007b4  0800e750  000207b4  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20001718  0800e750  00021718  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000207b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026733  00000000  00000000  000207e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045d0  00000000  00000000  00046f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  0004b4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f8  00000000  00000000  0004cc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030e07  00000000  00000000  0004e290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef7e  00000000  00000000  0007f097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00128f6b  00000000  00000000  0009e015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  001c6f80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007574  00000000  00000000  001c7050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001ce5c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001ce690  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200007b4 	.word	0x200007b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d584 	.word	0x0800d584

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200007b8 	.word	0x200007b8
 800020c:	0800d584 	.word	0x0800d584

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f84:	f3bf 8f4f 	dsb	sy
}
 8000f88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f8a:	f3bf 8f6f 	isb	sy
}
 8000f8e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <SCB_EnableICache+0x48>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f98:	f3bf 8f4f 	dsb	sy
}
 8000f9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f9e:	f3bf 8f6f 	isb	sy
}
 8000fa2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <SCB_EnableICache+0x48>)
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <SCB_EnableICache+0x48>)
 8000faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb0:	f3bf 8f4f 	dsb	sy
}
 8000fb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fb6:	f3bf 8f6f 	isb	sy
}
 8000fba:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <SCB_EnableDCache+0x84>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000fda:	f3bf 8f4f 	dsb	sy
}
 8000fde:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <SCB_EnableDCache+0x84>)
 8000fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fe6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	0b5b      	lsrs	r3, r3, #13
 8000fec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ff0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	08db      	lsrs	r3, r3, #3
 8000ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ffa:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	015a      	lsls	r2, r3, #5
 8001000:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001004:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800100a:	4911      	ldr	r1, [pc, #68]	; (8001050 <SCB_EnableDCache+0x84>)
 800100c:	4313      	orrs	r3, r2
 800100e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1e5a      	subs	r2, r3, #1
 8001016:	60ba      	str	r2, [r7, #8]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1ef      	bne.n	8000ffc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	60fa      	str	r2, [r7, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1e5      	bne.n	8000ff2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001026:	f3bf 8f4f 	dsb	sy
}
 800102a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <SCB_EnableDCache+0x84>)
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	4a07      	ldr	r2, [pc, #28]	; (8001050 <SCB_EnableDCache+0x84>)
 8001032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001036:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001038:	f3bf 8f4f 	dsb	sy
}
 800103c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800103e:	f3bf 8f6f 	isb	sy
}
 8001042:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00
 8001054:	00000000 	.word	0x00000000

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b0d0      	sub	sp, #320	; 0x140
 800105c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  char buf[50];
  int buf_len = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_SINE_MODEL_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];

  // Pointer to our model
  ai_handle sine_model = AI_HANDLE_NULL;
 8001064:	2300      	movs	r3, #0
 8001066:	663b      	str	r3, [r7, #96]	; 0x60

  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 8001068:	4b9b      	ldr	r3, [pc, #620]	; (80012d8 <main+0x280>)
 800106a:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800106e:	461d      	mov	r5, r3
 8001070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001074:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001078:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 800107c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001080:	4a95      	ldr	r2, [pc, #596]	; (80012d8 <main+0x280>)
 8001082:	461c      	mov	r4, r3
 8001084:	4615      	mov	r5, r2
 8001086:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800108a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800108e:	e884 0003 	stmia.w	r4, {r0, r1}

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {
 8001092:	463b      	mov	r3, r7
 8001094:	4a91      	ldr	r2, [pc, #580]	; (80012dc <main+0x284>)
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	463b      	mov	r3, r7
 800109a:	2201      	movs	r2, #1
 800109c:	809a      	strh	r2, [r3, #4]
 800109e:	463b      	mov	r3, r7
 80010a0:	2201      	movs	r2, #1
 80010a2:	80da      	strh	r2, [r3, #6]
 80010a4:	463b      	mov	r3, r7
 80010a6:	2201      	movs	r2, #1
 80010a8:	811a      	strh	r2, [r3, #8]
 80010aa:	463b      	mov	r3, r7
 80010ac:	f240 5204 	movw	r2, #1284	; 0x504
 80010b0:	60da      	str	r2, [r3, #12]
    AI_SINE_MODEL_DATA_WEIGHTS(ai_sine_model_data_weights_get()),
 80010b2:	f007 ff95 	bl	8008fe0 <ai_sine_model_data_weights_get>
 80010b6:	4602      	mov	r2, r0
  ai_network_params ai_params = {
 80010b8:	463b      	mov	r3, r7
 80010ba:	611a      	str	r2, [r3, #16]
 80010bc:	463b      	mov	r3, r7
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
 80010c2:	463b      	mov	r3, r7
 80010c4:	4a86      	ldr	r2, [pc, #536]	; (80012e0 <main+0x288>)
 80010c6:	619a      	str	r2, [r3, #24]
 80010c8:	463b      	mov	r3, r7
 80010ca:	2201      	movs	r2, #1
 80010cc:	839a      	strh	r2, [r3, #28]
 80010ce:	463b      	mov	r3, r7
 80010d0:	2201      	movs	r2, #1
 80010d2:	83da      	strh	r2, [r3, #30]
 80010d4:	463b      	mov	r3, r7
 80010d6:	2201      	movs	r2, #1
 80010d8:	841a      	strh	r2, [r3, #32]
 80010da:	463b      	mov	r3, r7
 80010dc:	2280      	movs	r2, #128	; 0x80
 80010de:	625a      	str	r2, [r3, #36]	; 0x24
 80010e0:	463b      	mov	r3, r7
 80010e2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28
 80010e8:	463b      	mov	r3, r7
 80010ea:	2200      	movs	r2, #0
 80010ec:	62da      	str	r2, [r3, #44]	; 0x2c
    AI_SINE_MODEL_DATA_ACTIVATIONS(activations)
  };


  // Set pointers wrapper structs to our data buffers
  ai_input[0].n_batches = 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 80010f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80010f8:	65bb      	str	r3, [r7, #88]	; 0x58
  ai_output[0].n_batches = 1;
 80010fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010fe:	2201      	movs	r2, #1
 8001100:	809a      	strh	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001102:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001106:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800110a:	611a      	str	r2, [r3, #16]

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800110c:	f7ff ff38 	bl	8000f80 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001110:	f7ff ff5c 	bl	8000fcc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001114:	f000 ff37 	bl	8001f86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001118:	f000 f8f4 	bl	8001304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111c:	f000 fac0 	bl	80016a0 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001120:	f000 f9b0 	bl	8001484 <MX_ADC3_Init>
  MX_CRC_Init();
 8001124:	f000 fa00 	bl	8001528 <MX_CRC_Init>
//  MX_TIM1_Init();
//  MX_TIM2_Init();
//  MX_TIM3_Init();
//  MX_TIM5_Init();
//  MX_TIM8_Init();
  MX_TIM12_Init();
 8001128:	f000 fa20 	bl	800156c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800112c:	f000 fa58 	bl	80015e0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001130:	f000 fa86 	bl	8001640 <MX_USART6_UART_Init>
//  MX_FATFS_Init();
//  MX_USB_HOST_Init();
  /* USER CODE BEGIN 2 */

  // Start timer/counter
  HAL_TIM_Base_Start(&htim12);
 8001134:	486b      	ldr	r0, [pc, #428]	; (80012e4 <main+0x28c>)
 8001136:	f004 fd8f 	bl	8005c58 <HAL_TIM_Base_Start>

  // Greetings!
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 800113a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800113e:	496a      	ldr	r1, [pc, #424]	; (80012e8 <main+0x290>)
 8001140:	4618      	mov	r0, r3
 8001142:	f00a f885 	bl	800b250 <siprintf>
 8001146:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
  HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 800114a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800114e:	b29a      	uxth	r2, r3
 8001150:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8001154:	2364      	movs	r3, #100	; 0x64
 8001156:	4865      	ldr	r0, [pc, #404]	; (80012ec <main+0x294>)
 8001158:	f005 f83c 	bl	80061d4 <HAL_UART_Transmit>

  // Create instance of neural network
  ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 800115c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f007 fed6 	bl	8008f14 <ai_sine_model_create>
 8001168:	4603      	mov	r3, r0
 800116a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (ai_err.type != AI_ERROR_NONE)
 800116e:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 8001172:	2b00      	cmp	r3, #0
 8001174:	d011      	beq.n	800119a <main+0x142>
  {
    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8001176:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800117a:	495d      	ldr	r1, [pc, #372]	; (80012f0 <main+0x298>)
 800117c:	4618      	mov	r0, r3
 800117e:	f00a f867 	bl	800b250 <siprintf>
 8001182:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
    HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 8001186:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800118a:	b29a      	uxth	r2, r3
 800118c:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8001190:	2364      	movs	r3, #100	; 0x64
 8001192:	4856      	ldr	r0, [pc, #344]	; (80012ec <main+0x294>)
 8001194:	f005 f81e 	bl	80061d4 <HAL_UART_Transmit>
    while(1);
 8001198:	e7fe      	b.n	8001198 <main+0x140>
  }

  // Initialize neural network
  if (!ai_sine_model_init(sine_model, &ai_params))
 800119a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800119c:	463a      	mov	r2, r7
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f007 fecd 	bl	8008f40 <ai_sine_model_init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f083 0301 	eor.w	r3, r3, #1
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d011      	beq.n	80011d6 <main+0x17e>
  {
    buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 80011b2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011b6:	494f      	ldr	r1, [pc, #316]	; (80012f4 <main+0x29c>)
 80011b8:	4618      	mov	r0, r3
 80011ba:	f00a f849 	bl	800b250 <siprintf>
 80011be:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
    HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 80011c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80011cc:	2364      	movs	r3, #100	; 0x64
 80011ce:	4847      	ldr	r0, [pc, #284]	; (80012ec <main+0x294>)
 80011d0:	f005 f800 	bl	80061d4 <HAL_UART_Transmit>
    while(1);
 80011d4:	e7fe      	b.n	80011d4 <main+0x17c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80011d6:	f007 fc31 	bl	8008a3c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    LED_Toggle();
 80011da:	f000 fc33 	bl	8001a44 <LED_Toggle>
    HAL_Delay(500);
 80011de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011e2:	f000 ff2d 	bl	8002040 <HAL_Delay>

    // Fill input buffer (use test value)
	for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80011ec:	e00d      	b.n	800120a <main+0x1b2>
	{
	  ((ai_float *)in_data)[i] = (ai_float)test;
 80011ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80011f8:	4413      	add	r3, r2
 80011fa:	4a3f      	ldr	r2, [pc, #252]	; (80012f8 <main+0x2a0>)
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8001200:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001204:	3301      	adds	r3, #1
 8001206:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800120a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0ed      	beq.n	80011ee <main+0x196>
	}
	test += 0.1;
 8001212:	4b39      	ldr	r3, [pc, #228]	; (80012f8 <main+0x2a0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f9b6 	bl	8000588 <__aeabi_f2d>
 800121c:	a32c      	add	r3, pc, #176	; (adr r3, 80012d0 <main+0x278>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7ff f853 	bl	80002cc <__adddf3>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fcdb 	bl	8000be8 <__aeabi_d2f>
 8001232:	4603      	mov	r3, r0
 8001234:	4a30      	ldr	r2, [pc, #192]	; (80012f8 <main+0x2a0>)
 8001236:	6013      	str	r3, [r2, #0]

	// Get current timestamp
	timestamp = htim12.Instance->CNT;
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <main+0x28c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	// Perform inference
	nbatch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 8001242:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001244:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001248:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800124c:	4618      	mov	r0, r3
 800124e:	f007 feb6 	bl	8008fbe <ai_sine_model_run>
 8001252:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
	if (nbatch != 1) {
 8001256:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800125a:	2b01      	cmp	r3, #1
 800125c:	d010      	beq.n	8001280 <main+0x228>
	  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 800125e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001262:	4926      	ldr	r1, [pc, #152]	; (80012fc <main+0x2a4>)
 8001264:	4618      	mov	r0, r3
 8001266:	f009 fff3 	bl	800b250 <siprintf>
 800126a:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	  HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 800126e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001272:	b29a      	uxth	r2, r3
 8001274:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8001278:	2364      	movs	r3, #100	; 0x64
 800127a:	481c      	ldr	r0, [pc, #112]	; (80012ec <main+0x294>)
 800127c:	f004 ffaa 	bl	80061d4 <HAL_UART_Transmit>
	}

	// Read output (predicted y) of neural network
	y_val = ((float *)out_data)[0];
 8001280:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

	// Print output of neural network along with inference time (microseconds)
	buf_len = sprintf(buf, "Output: %f | Duration: %lu\r\n", y_val, htim12.Instance->CNT - timestamp);
 800128a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800128e:	f7ff f97b 	bl	8000588 <__aeabi_f2d>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4913      	ldr	r1, [pc, #76]	; (80012e4 <main+0x28c>)
 8001298:	6809      	ldr	r1, [r1, #0]
 800129a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800129c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80012a0:	1a41      	subs	r1, r0, r1
 80012a2:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 80012a6:	9100      	str	r1, [sp, #0]
 80012a8:	4915      	ldr	r1, [pc, #84]	; (8001300 <main+0x2a8>)
 80012aa:	f009 ffd1 	bl	800b250 <siprintf>
 80012ae:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 80012b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80012bc:	2364      	movs	r3, #100	; 0x64
 80012be:	480b      	ldr	r0, [pc, #44]	; (80012ec <main+0x294>)
 80012c0:	f004 ff88 	bl	80061d4 <HAL_UART_Transmit>

	// Wait before doing it again
	HAL_Delay(500);
 80012c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012c8:	f000 feba 	bl	8002040 <HAL_Delay>
    MX_USB_HOST_Process();
 80012cc:	e783      	b.n	80011d6 <main+0x17e>
 80012ce:	bf00      	nop
 80012d0:	9999999a 	.word	0x9999999a
 80012d4:	3fb99999 	.word	0x3fb99999
 80012d8:	0800d64c 	.word	0x0800d64c
 80012dc:	40040440 	.word	0x40040440
 80012e0:	00040440 	.word	0x00040440
 80012e4:	20000f14 	.word	0x20000f14
 80012e8:	0800d5a0 	.word	0x0800d5a0
 80012ec:	20000e04 	.word	0x20000e04
 80012f0:	0800d5bc 	.word	0x0800d5bc
 80012f4:	0800d5e4 	.word	0x0800d5e4
 80012f8:	200007d0 	.word	0x200007d0
 80012fc:	0800d608 	.word	0x0800d608
 8001300:	0800d62c 	.word	0x0800d62c

08001304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b0b4      	sub	sp, #208	; 0xd0
 8001308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800130e:	2230      	movs	r2, #48	; 0x30
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f009 fa70 	bl	800a7f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001318:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	2284      	movs	r2, #132	; 0x84
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f009 fa61 	bl	800a7f8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001336:	f003 fb6d 	bl	8004a14 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	4b4f      	ldr	r3, [pc, #316]	; (8001478 <SystemClock_Config+0x174>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	4a4e      	ldr	r2, [pc, #312]	; (8001478 <SystemClock_Config+0x174>)
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001344:	6413      	str	r3, [r2, #64]	; 0x40
 8001346:	4b4c      	ldr	r3, [pc, #304]	; (8001478 <SystemClock_Config+0x174>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001352:	4b4a      	ldr	r3, [pc, #296]	; (800147c <SystemClock_Config+0x178>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a49      	ldr	r2, [pc, #292]	; (800147c <SystemClock_Config+0x178>)
 8001358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	4b47      	ldr	r3, [pc, #284]	; (800147c <SystemClock_Config+0x178>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800136a:	2309      	movs	r3, #9
 800136c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001378:	2301      	movs	r3, #1
 800137a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137e:	2302      	movs	r3, #2
 8001380:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001384:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001388:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800138c:	2319      	movs	r3, #25
 800138e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001392:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001396:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800139a:	2302      	movs	r3, #2
 800139c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80013a0:	2309      	movs	r3, #9
 80013a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f003 fb92 	bl	8004ad4 <HAL_RCC_OscConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80013b6:	f000 fb4f 	bl	8001a58 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013ba:	f003 fb3b 	bl	8004a34 <HAL_PWREx_EnableOverDrive>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013c4:	f000 fb48 	bl	8001a58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c8:	230f      	movs	r3, #15
 80013ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ce:	2302      	movs	r3, #2
 80013d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80013ea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80013ee:	2106      	movs	r1, #6
 80013f0:	4618      	mov	r0, r3
 80013f2:	f003 fe13 	bl	800501c <HAL_RCC_ClockConfig>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80013fc:	f000 fb2c 	bl	8001a58 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001400:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <SystemClock_Config+0x17c>)
 8001402:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001404:	2364      	movs	r3, #100	; 0x64
 8001406:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001408:	2302      	movs	r3, #2
 800140a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800140c:	2302      	movs	r3, #2
 800140e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001410:	2302      	movs	r3, #2
 8001412:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001414:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001418:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800141a:	2305      	movs	r3, #5
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800141e:	2302      	movs	r3, #2
 8001420:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001422:	2303      	movs	r3, #3
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001426:	2301      	movs	r3, #1
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800142a:	2301      	movs	r3, #1
 800142c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800142e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001432:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001438:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800143a:	2300      	movs	r3, #0
 800143c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800143e:	2300      	movs	r3, #0
 8001440:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001442:	2300      	movs	r3, #0
 8001444:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001446:	2300      	movs	r3, #0
 8001448:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800144a:	2300      	movs	r3, #0
 800144c:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800144e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001452:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145c:	f107 0308 	add.w	r3, r7, #8
 8001460:	4618      	mov	r0, r3
 8001462:	f003 ffb1 	bl	80053c8 <HAL_RCCEx_PeriphCLKConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 800146c:	f000 faf4 	bl	8001a58 <Error_Handler>
  }
}
 8001470:	bf00      	nop
 8001472:	37d0      	adds	r7, #208	; 0xd0
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40023800 	.word	0x40023800
 800147c:	40007000 	.word	0x40007000
 8001480:	01b14868 	.word	0x01b14868

08001484 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800148a:	463b      	mov	r3, r7
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <MX_ADC3_Init+0x98>)
 8001498:	4a21      	ldr	r2, [pc, #132]	; (8001520 <MX_ADC3_Init+0x9c>)
 800149a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <MX_ADC3_Init+0x98>)
 800149e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014a2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <MX_ADC3_Init+0x98>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <MX_ADC3_Init+0x98>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_ADC3_Init+0x98>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <MX_ADC3_Init+0x98>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <MX_ADC3_Init+0x98>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <MX_ADC3_Init+0x98>)
 80014c6:	4a17      	ldr	r2, [pc, #92]	; (8001524 <MX_ADC3_Init+0xa0>)
 80014c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_ADC3_Init+0x98>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <MX_ADC3_Init+0x98>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_ADC3_Init+0x98>)
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_ADC3_Init+0x98>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <MX_ADC3_Init+0x98>)
 80014e6:	f000 fdcf 	bl	8002088 <HAL_ADC_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80014f0:	f000 fab2 	bl	8001a58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80014f4:	2304      	movs	r3, #4
 80014f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014f8:	2301      	movs	r3, #1
 80014fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001500:	463b      	mov	r3, r7
 8001502:	4619      	mov	r1, r3
 8001504:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_ADC3_Init+0x98>)
 8001506:	f000 fe03 	bl	8002110 <HAL_ADC_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001510:	f000 faa2 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000c7c 	.word	0x20000c7c
 8001520:	40012200 	.word	0x40012200
 8001524:	0f000001 	.word	0x0f000001

08001528 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <MX_CRC_Init+0x3c>)
 800152e:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <MX_CRC_Init+0x40>)
 8001530:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_CRC_Init+0x3c>)
 8001534:	2200      	movs	r2, #0
 8001536:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <MX_CRC_Init+0x3c>)
 800153a:	2200      	movs	r2, #0
 800153c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_CRC_Init+0x3c>)
 8001540:	2200      	movs	r2, #0
 8001542:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <MX_CRC_Init+0x3c>)
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_CRC_Init+0x3c>)
 800154c:	2201      	movs	r2, #1
 800154e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001550:	4804      	ldr	r0, [pc, #16]	; (8001564 <MX_CRC_Init+0x3c>)
 8001552:	f001 f907 	bl	8002764 <HAL_CRC_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800155c:	f000 fa7c 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000a94 	.word	0x20000a94
 8001568:	40023000 	.word	0x40023000

0800156c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001572:	463b      	mov	r3, r7
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <MX_TIM12_Init+0x6c>)
 8001580:	4a16      	ldr	r2, [pc, #88]	; (80015dc <MX_TIM12_Init+0x70>)
 8001582:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 80 - 1;
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <MX_TIM12_Init+0x6c>)
 8001586:	224f      	movs	r2, #79	; 0x4f
 8001588:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <MX_TIM12_Init+0x6c>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_TIM12_Init+0x6c>)
 8001592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001596:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <MX_TIM12_Init+0x6c>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_TIM12_Init+0x6c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <MX_TIM12_Init+0x6c>)
 80015a6:	f004 faff 	bl	8005ba8 <HAL_TIM_Base_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 80015b0:	f000 fa52 	bl	8001a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80015ba:	463b      	mov	r3, r7
 80015bc:	4619      	mov	r1, r3
 80015be:	4806      	ldr	r0, [pc, #24]	; (80015d8 <MX_TIM12_Init+0x6c>)
 80015c0:	f004 fbba 	bl	8005d38 <HAL_TIM_ConfigClockSource>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80015ca:	f000 fa45 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000f14 	.word	0x20000f14
 80015dc:	40001800 	.word	0x40001800

080015e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <MX_USART1_UART_Init+0x58>)
 80015e6:	4a15      	ldr	r2, [pc, #84]	; (800163c <MX_USART1_UART_Init+0x5c>)
 80015e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ea:	4b13      	ldr	r3, [pc, #76]	; (8001638 <MX_USART1_UART_Init+0x58>)
 80015ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <MX_USART1_UART_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <MX_USART1_UART_Init+0x58>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <MX_USART1_UART_Init+0x58>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <MX_USART1_UART_Init+0x58>)
 8001606:	220c      	movs	r2, #12
 8001608:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <MX_USART1_UART_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <MX_USART1_UART_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <MX_USART1_UART_Init+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <MX_USART1_UART_Init+0x58>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_USART1_UART_Init+0x58>)
 8001624:	f004 fd88 	bl	8006138 <HAL_UART_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800162e:	f000 fa13 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000d14 	.word	0x20000d14
 800163c:	40011000 	.word	0x40011000

08001640 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <MX_USART6_UART_Init+0x58>)
 8001646:	4a15      	ldr	r2, [pc, #84]	; (800169c <MX_USART6_UART_Init+0x5c>)
 8001648:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <MX_USART6_UART_Init+0x58>)
 800164c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001650:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <MX_USART6_UART_Init+0x58>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <MX_USART6_UART_Init+0x58>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <MX_USART6_UART_Init+0x58>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <MX_USART6_UART_Init+0x58>)
 8001666:	220c      	movs	r2, #12
 8001668:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <MX_USART6_UART_Init+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <MX_USART6_UART_Init+0x58>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <MX_USART6_UART_Init+0x58>)
 8001678:	2200      	movs	r2, #0
 800167a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <MX_USART6_UART_Init+0x58>)
 800167e:	2200      	movs	r2, #0
 8001680:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_USART6_UART_Init+0x58>)
 8001684:	f004 fd58 	bl	8006138 <HAL_UART_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800168e:	f000 f9e3 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000e04 	.word	0x20000e04
 800169c:	40011400 	.word	0x40011400

080016a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b090      	sub	sp, #64	; 0x40
 80016a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016b6:	4baf      	ldr	r3, [pc, #700]	; (8001974 <MX_GPIO_Init+0x2d4>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4aae      	ldr	r2, [pc, #696]	; (8001974 <MX_GPIO_Init+0x2d4>)
 80016bc:	f043 0310 	orr.w	r3, r3, #16
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4bac      	ldr	r3, [pc, #688]	; (8001974 <MX_GPIO_Init+0x2d4>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0310 	and.w	r3, r3, #16
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80016cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ce:	4ba9      	ldr	r3, [pc, #676]	; (8001974 <MX_GPIO_Init+0x2d4>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4aa8      	ldr	r2, [pc, #672]	; (8001974 <MX_GPIO_Init+0x2d4>)
 80016d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4ba6      	ldr	r3, [pc, #664]	; (8001974 <MX_GPIO_Init+0x2d4>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	4ba3      	ldr	r3, [pc, #652]	; (8001974 <MX_GPIO_Init+0x2d4>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4aa2      	ldr	r2, [pc, #648]	; (8001974 <MX_GPIO_Init+0x2d4>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4ba0      	ldr	r3, [pc, #640]	; (8001974 <MX_GPIO_Init+0x2d4>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	623b      	str	r3, [r7, #32]
 80016fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016fe:	4b9d      	ldr	r3, [pc, #628]	; (8001974 <MX_GPIO_Init+0x2d4>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a9c      	ldr	r2, [pc, #624]	; (8001974 <MX_GPIO_Init+0x2d4>)
 8001704:	f043 0308 	orr.w	r3, r3, #8
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b9a      	ldr	r3, [pc, #616]	; (8001974 <MX_GPIO_Init+0x2d4>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	61fb      	str	r3, [r7, #28]
 8001714:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001716:	4b97      	ldr	r3, [pc, #604]	; (8001974 <MX_GPIO_Init+0x2d4>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a96      	ldr	r2, [pc, #600]	; (8001974 <MX_GPIO_Init+0x2d4>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b94      	ldr	r3, [pc, #592]	; (8001974 <MX_GPIO_Init+0x2d4>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	61bb      	str	r3, [r7, #24]
 800172c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	4b91      	ldr	r3, [pc, #580]	; (8001974 <MX_GPIO_Init+0x2d4>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a90      	ldr	r2, [pc, #576]	; (8001974 <MX_GPIO_Init+0x2d4>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b8e      	ldr	r3, [pc, #568]	; (8001974 <MX_GPIO_Init+0x2d4>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001746:	4b8b      	ldr	r3, [pc, #556]	; (8001974 <MX_GPIO_Init+0x2d4>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a8a      	ldr	r2, [pc, #552]	; (8001974 <MX_GPIO_Init+0x2d4>)
 800174c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b88      	ldr	r3, [pc, #544]	; (8001974 <MX_GPIO_Init+0x2d4>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800175e:	4b85      	ldr	r3, [pc, #532]	; (8001974 <MX_GPIO_Init+0x2d4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a84      	ldr	r2, [pc, #528]	; (8001974 <MX_GPIO_Init+0x2d4>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b82      	ldr	r3, [pc, #520]	; (8001974 <MX_GPIO_Init+0x2d4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001776:	4b7f      	ldr	r3, [pc, #508]	; (8001974 <MX_GPIO_Init+0x2d4>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a7e      	ldr	r2, [pc, #504]	; (8001974 <MX_GPIO_Init+0x2d4>)
 800177c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b7c      	ldr	r3, [pc, #496]	; (8001974 <MX_GPIO_Init+0x2d4>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800178e:	4b79      	ldr	r3, [pc, #484]	; (8001974 <MX_GPIO_Init+0x2d4>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a78      	ldr	r2, [pc, #480]	; (8001974 <MX_GPIO_Init+0x2d4>)
 8001794:	f043 0320 	orr.w	r3, r3, #32
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b76      	ldr	r3, [pc, #472]	; (8001974 <MX_GPIO_Init+0x2d4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0320 	and.w	r3, r3, #32
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017a6:	4b73      	ldr	r3, [pc, #460]	; (8001974 <MX_GPIO_Init+0x2d4>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a72      	ldr	r2, [pc, #456]	; (8001974 <MX_GPIO_Init+0x2d4>)
 80017ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b70      	ldr	r3, [pc, #448]	; (8001974 <MX_GPIO_Init+0x2d4>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80017be:	2201      	movs	r2, #1
 80017c0:	2120      	movs	r1, #32
 80017c2:	486d      	ldr	r0, [pc, #436]	; (8001978 <MX_GPIO_Init+0x2d8>)
 80017c4:	f001 fb74 	bl	8002eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	210e      	movs	r1, #14
 80017cc:	486b      	ldr	r0, [pc, #428]	; (800197c <MX_GPIO_Init+0x2dc>)
 80017ce:	f001 fb6f 	bl	8002eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80017d2:	2201      	movs	r2, #1
 80017d4:	2108      	movs	r1, #8
 80017d6:	486a      	ldr	r0, [pc, #424]	; (8001980 <MX_GPIO_Init+0x2e0>)
 80017d8:	f001 fb6a 	bl	8002eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e2:	4866      	ldr	r0, [pc, #408]	; (800197c <MX_GPIO_Init+0x2dc>)
 80017e4:	f001 fb64 	bl	8002eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ee:	4865      	ldr	r0, [pc, #404]	; (8001984 <MX_GPIO_Init+0x2e4>)
 80017f0:	f001 fb5e 	bl	8002eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	21c8      	movs	r1, #200	; 0xc8
 80017f8:	4863      	ldr	r0, [pc, #396]	; (8001988 <MX_GPIO_Init+0x2e8>)
 80017fa:	f001 fb59 	bl	8002eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80017fe:	2308      	movs	r3, #8
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001802:	2300      	movs	r3, #0
 8001804:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800180a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800180e:	4619      	mov	r1, r3
 8001810:	485e      	ldr	r0, [pc, #376]	; (800198c <MX_GPIO_Init+0x2ec>)
 8001812:	f001 f9a1 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001816:	f643 4323 	movw	r3, #15395	; 0x3c23
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001828:	230a      	movs	r3, #10
 800182a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001830:	4619      	mov	r1, r3
 8001832:	4857      	ldr	r0, [pc, #348]	; (8001990 <MX_GPIO_Init+0x2f0>)
 8001834:	f001 f990 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183e:	2300      	movs	r3, #0
 8001840:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184a:	4619      	mov	r1, r3
 800184c:	4851      	ldr	r0, [pc, #324]	; (8001994 <MX_GPIO_Init+0x2f4>)
 800184e:	f001 f983 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001852:	2340      	movs	r3, #64	; 0x40
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001856:	4b50      	ldr	r3, [pc, #320]	; (8001998 <MX_GPIO_Init+0x2f8>)
 8001858:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800185e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001862:	4619      	mov	r1, r3
 8001864:	4844      	ldr	r0, [pc, #272]	; (8001978 <MX_GPIO_Init+0x2d8>)
 8001866:	f001 f977 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800186a:	2320      	movs	r3, #32
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186e:	2301      	movs	r3, #1
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187e:	4619      	mov	r1, r3
 8001880:	483d      	ldr	r0, [pc, #244]	; (8001978 <MX_GPIO_Init+0x2d8>)
 8001882:	f001 f969 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 8001886:	f241 030e 	movw	r3, #4110	; 0x100e
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188c:	2301      	movs	r3, #1
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800189c:	4619      	mov	r1, r3
 800189e:	4837      	ldr	r0, [pc, #220]	; (800197c <MX_GPIO_Init+0x2dc>)
 80018a0:	f001 f95a 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80018a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018aa:	2300      	movs	r3, #0
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80018b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b6:	4619      	mov	r1, r3
 80018b8:	4838      	ldr	r0, [pc, #224]	; (800199c <MX_GPIO_Init+0x2fc>)
 80018ba:	f001 f94d 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80018be:	2308      	movs	r3, #8
 80018c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d2:	4619      	mov	r1, r3
 80018d4:	482a      	ldr	r0, [pc, #168]	; (8001980 <MX_GPIO_Init+0x2e0>)
 80018d6:	f001 f93f 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80018da:	2310      	movs	r3, #16
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018de:	2300      	movs	r3, #0
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ea:	4619      	mov	r1, r3
 80018ec:	4822      	ldr	r0, [pc, #136]	; (8001978 <MX_GPIO_Init+0x2d8>)
 80018ee:	f001 f933 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80018f2:	f248 0304 	movw	r3, #32772	; 0x8004
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f8:	2300      	movs	r3, #0
 80018fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001904:	4619      	mov	r1, r3
 8001906:	481f      	ldr	r0, [pc, #124]	; (8001984 <MX_GPIO_Init+0x2e4>)
 8001908:	f001 f926 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800190c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001912:	2301      	movs	r3, #1
 8001914:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800191e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001922:	4619      	mov	r1, r3
 8001924:	4817      	ldr	r0, [pc, #92]	; (8001984 <MX_GPIO_Init+0x2e4>)
 8001926:	f001 f917 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800192a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <MX_GPIO_Init+0x2f8>)
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001938:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800193c:	4619      	mov	r1, r3
 800193e:	480f      	ldr	r0, [pc, #60]	; (800197c <MX_GPIO_Init+0x2dc>)
 8001940:	f001 f90a 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001944:	2310      	movs	r3, #16
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001950:	2303      	movs	r3, #3
 8001952:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001954:	230a      	movs	r3, #10
 8001956:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195c:	4619      	mov	r1, r3
 800195e:	4809      	ldr	r0, [pc, #36]	; (8001984 <MX_GPIO_Init+0x2e4>)
 8001960:	f001 f8fa 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001964:	23c8      	movs	r3, #200	; 0xc8
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001968:	2301      	movs	r3, #1
 800196a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	637b      	str	r3, [r7, #52]	; 0x34
 8001970:	e016      	b.n	80019a0 <MX_GPIO_Init+0x300>
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800
 8001978:	40020c00 	.word	0x40020c00
 800197c:	40022000 	.word	0x40022000
 8001980:	40022800 	.word	0x40022800
 8001984:	40021c00 	.word	0x40021c00
 8001988:	40021800 	.word	0x40021800
 800198c:	40021000 	.word	0x40021000
 8001990:	40020400 	.word	0x40020400
 8001994:	40022400 	.word	0x40022400
 8001998:	10120000 	.word	0x10120000
 800199c:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a8:	4619      	mov	r1, r3
 80019aa:	4822      	ldr	r0, [pc, #136]	; (8001a34 <MX_GPIO_Init+0x394>)
 80019ac:	f001 f8d4 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80019b0:	2305      	movs	r3, #5
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019c0:	230a      	movs	r3, #10
 80019c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c8:	4619      	mov	r1, r3
 80019ca:	481b      	ldr	r0, [pc, #108]	; (8001a38 <MX_GPIO_Init+0x398>)
 80019cc:	f001 f8c4 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80019d0:	2304      	movs	r3, #4
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d4:	2300      	movs	r3, #0
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80019dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e0:	4619      	mov	r1, r3
 80019e2:	4814      	ldr	r0, [pc, #80]	; (8001a34 <MX_GPIO_Init+0x394>)
 80019e4:	f001 f8b8 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80019e8:	2328      	movs	r3, #40	; 0x28
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019f8:	230a      	movs	r3, #10
 80019fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a00:	4619      	mov	r1, r3
 8001a02:	480e      	ldr	r0, [pc, #56]	; (8001a3c <MX_GPIO_Init+0x39c>)
 8001a04:	f001 f8a8 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001a08:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a1a:	2305      	movs	r3, #5
 8001a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a22:	4619      	mov	r1, r3
 8001a24:	4806      	ldr	r0, [pc, #24]	; (8001a40 <MX_GPIO_Init+0x3a0>)
 8001a26:	f001 f897 	bl	8002b58 <HAL_GPIO_Init>

}
 8001a2a:	bf00      	nop
 8001a2c:	3740      	adds	r7, #64	; 0x40
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40021800 	.word	0x40021800
 8001a38:	40020800 	.word	0x40020800
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	40020400 	.word	0x40020400

08001a44 <LED_Toggle>:
void LED_Off(){

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
}

void LED_Toggle(){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 8001a48:	2102      	movs	r1, #2
 8001a4a:	4802      	ldr	r0, [pc, #8]	; (8001a54 <LED_Toggle+0x10>)
 8001a4c:	f001 fa49 	bl	8002ee2 <HAL_GPIO_TogglePin>
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40022000 	.word	0x40022000

08001a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a5c:	b672      	cpsid	i
}
 8001a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <Error_Handler+0x8>
	...

08001a64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_MspInit+0x44>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <HAL_MspInit+0x44>)
 8001a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a74:	6413      	str	r3, [r2, #64]	; 0x40
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_MspInit+0x44>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_MspInit+0x44>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <HAL_MspInit+0x44>)
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_MspInit+0x44>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800

08001aac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a21      	ldr	r2, [pc, #132]	; (8001b50 <HAL_ADC_MspInit+0xa4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d13c      	bne.n	8001b48 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ace:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <HAL_ADC_MspInit+0xa8>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	4a20      	ldr	r2, [pc, #128]	; (8001b54 <HAL_ADC_MspInit+0xa8>)
 8001ad4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ada:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <HAL_ADC_MspInit+0xa8>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <HAL_ADC_MspInit+0xa8>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a1a      	ldr	r2, [pc, #104]	; (8001b54 <HAL_ADC_MspInit+0xa8>)
 8001aec:	f043 0320 	orr.w	r3, r3, #32
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <HAL_ADC_MspInit+0xa8>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0320 	and.w	r3, r3, #32
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_ADC_MspInit+0xa8>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <HAL_ADC_MspInit+0xa8>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_ADC_MspInit+0xa8>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001b16:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001b1a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480b      	ldr	r0, [pc, #44]	; (8001b58 <HAL_ADC_MspInit+0xac>)
 8001b2c:	f001 f814 	bl	8002b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001b30:	2301      	movs	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b34:	2303      	movs	r3, #3
 8001b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4619      	mov	r1, r3
 8001b42:	4806      	ldr	r0, [pc, #24]	; (8001b5c <HAL_ADC_MspInit+0xb0>)
 8001b44:	f001 f808 	bl	8002b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001b48:	bf00      	nop
 8001b4a:	3728      	adds	r7, #40	; 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40012200 	.word	0x40012200
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40021400 	.word	0x40021400
 8001b5c:	40020000 	.word	0x40020000

08001b60 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <HAL_CRC_MspInit+0x38>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d10b      	bne.n	8001b8a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_CRC_MspInit+0x3c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <HAL_CRC_MspInit+0x3c>)
 8001b78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <HAL_CRC_MspInit+0x3c>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40023000 	.word	0x40023000
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08e      	sub	sp, #56	; 0x38
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a44      	ldr	r2, [pc, #272]	; (8001cd0 <HAL_TIM_Base_MspInit+0x130>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d10c      	bne.n	8001bdc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bc2:	4b44      	ldr	r3, [pc, #272]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	4a43      	ldr	r2, [pc, #268]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	4b41      	ldr	r3, [pc, #260]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	623b      	str	r3, [r7, #32]
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001bda:	e074      	b.n	8001cc6 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be4:	d10c      	bne.n	8001c00 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001be6:	4b3b      	ldr	r3, [pc, #236]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a3a      	ldr	r2, [pc, #232]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf2:	4b38      	ldr	r3, [pc, #224]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	61fb      	str	r3, [r7, #28]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
}
 8001bfe:	e062      	b.n	8001cc6 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM3)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a34      	ldr	r2, [pc, #208]	; (8001cd8 <HAL_TIM_Base_MspInit+0x138>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d10c      	bne.n	8001c24 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c0a:	4b32      	ldr	r3, [pc, #200]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	4a31      	ldr	r2, [pc, #196]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	6413      	str	r3, [r2, #64]	; 0x40
 8001c16:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	69bb      	ldr	r3, [r7, #24]
}
 8001c22:	e050      	b.n	8001cc6 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM5)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a2c      	ldr	r2, [pc, #176]	; (8001cdc <HAL_TIM_Base_MspInit+0x13c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d10c      	bne.n	8001c48 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c2e:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	4a28      	ldr	r2, [pc, #160]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c34:	f043 0308 	orr.w	r3, r3, #8
 8001c38:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	697b      	ldr	r3, [r7, #20]
}
 8001c46:	e03e      	b.n	8001cc6 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM8)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a24      	ldr	r2, [pc, #144]	; (8001ce0 <HAL_TIM_Base_MspInit+0x140>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d10c      	bne.n	8001c6c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]
}
 8001c6a:	e02c      	b.n	8001cc6 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM12)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <HAL_TIM_Base_MspInit+0x144>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d127      	bne.n	8001cc6 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a16      	ldr	r2, [pc, #88]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a10      	ldr	r2, [pc, #64]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001ca6:	2340      	movs	r3, #64	; 0x40
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001cb6:	2309      	movs	r3, #9
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4809      	ldr	r0, [pc, #36]	; (8001ce8 <HAL_TIM_Base_MspInit+0x148>)
 8001cc2:	f000 ff49 	bl	8002b58 <HAL_GPIO_Init>
}
 8001cc6:	bf00      	nop
 8001cc8:	3738      	adds	r7, #56	; 0x38
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40010000 	.word	0x40010000
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40000400 	.word	0x40000400
 8001cdc:	40000c00 	.word	0x40000c00
 8001ce0:	40010400 	.word	0x40010400
 8001ce4:	40001800 	.word	0x40001800
 8001ce8:	40021c00 	.word	0x40021c00

08001cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08c      	sub	sp, #48	; 0x30
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a3c      	ldr	r2, [pc, #240]	; (8001dfc <HAL_UART_MspInit+0x110>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d145      	bne.n	8001d9a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d0e:	4b3c      	ldr	r3, [pc, #240]	; (8001e00 <HAL_UART_MspInit+0x114>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	4a3b      	ldr	r2, [pc, #236]	; (8001e00 <HAL_UART_MspInit+0x114>)
 8001d14:	f043 0310 	orr.w	r3, r3, #16
 8001d18:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1a:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <HAL_UART_MspInit+0x114>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <HAL_UART_MspInit+0x114>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a35      	ldr	r2, [pc, #212]	; (8001e00 <HAL_UART_MspInit+0x114>)
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b33      	ldr	r3, [pc, #204]	; (8001e00 <HAL_UART_MspInit+0x114>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	4b30      	ldr	r3, [pc, #192]	; (8001e00 <HAL_UART_MspInit+0x114>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a2f      	ldr	r2, [pc, #188]	; (8001e00 <HAL_UART_MspInit+0x114>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	; (8001e00 <HAL_UART_MspInit+0x114>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d66:	2307      	movs	r3, #7
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001d6a:	f107 031c 	add.w	r3, r7, #28
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4824      	ldr	r0, [pc, #144]	; (8001e04 <HAL_UART_MspInit+0x118>)
 8001d72:	f000 fef1 	bl	8002b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d88:	2307      	movs	r3, #7
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001d8c:	f107 031c 	add.w	r3, r7, #28
 8001d90:	4619      	mov	r1, r3
 8001d92:	481d      	ldr	r0, [pc, #116]	; (8001e08 <HAL_UART_MspInit+0x11c>)
 8001d94:	f000 fee0 	bl	8002b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d98:	e02c      	b.n	8001df4 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a1b      	ldr	r2, [pc, #108]	; (8001e0c <HAL_UART_MspInit+0x120>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d127      	bne.n	8001df4 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001da4:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <HAL_UART_MspInit+0x114>)
 8001da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da8:	4a15      	ldr	r2, [pc, #84]	; (8001e00 <HAL_UART_MspInit+0x114>)
 8001daa:	f043 0320 	orr.w	r3, r3, #32
 8001dae:	6453      	str	r3, [r2, #68]	; 0x44
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <HAL_UART_MspInit+0x114>)
 8001db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db4:	f003 0320 	and.w	r3, r3, #32
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbc:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_UART_MspInit+0x114>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <HAL_UART_MspInit+0x114>)
 8001dc2:	f043 0304 	orr.w	r3, r3, #4
 8001dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <HAL_UART_MspInit+0x114>)
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001dd4:	23c0      	movs	r3, #192	; 0xc0
 8001dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001de4:	2308      	movs	r3, #8
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	4619      	mov	r1, r3
 8001dee:	4808      	ldr	r0, [pc, #32]	; (8001e10 <HAL_UART_MspInit+0x124>)
 8001df0:	f000 feb2 	bl	8002b58 <HAL_GPIO_Init>
}
 8001df4:	bf00      	nop
 8001df6:	3730      	adds	r7, #48	; 0x30
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40011000 	.word	0x40011000
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40020400 	.word	0x40020400
 8001e08:	40020000 	.word	0x40020000
 8001e0c:	40011400 	.word	0x40011400
 8001e10:	40020800 	.word	0x40020800

08001e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <NMI_Handler+0x4>

08001e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <HardFault_Handler+0x4>

08001e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <MemManage_Handler+0x4>

08001e26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <BusFault_Handler+0x4>

08001e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <UsageFault_Handler+0x4>

08001e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e60:	f000 f8ce 	bl	8002000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <OTG_FS_IRQHandler+0x10>)
 8001e6e:	f001 fa37 	bl	80032e0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20001404 	.word	0x20001404

08001e7c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <LTDC_IRQHandler+0x10>)
 8001e82:	f002 fd05 	bl	8004890 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000bd4 	.word	0x20000bd4

08001e90 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <DMA2D_IRQHandler+0x10>)
 8001e96:	f000 fd4f 	bl	8002938 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000e88 	.word	0x20000e88

08001ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eac:	4a14      	ldr	r2, [pc, #80]	; (8001f00 <_sbrk+0x5c>)
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <_sbrk+0x60>)
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <_sbrk+0x64>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <_sbrk+0x64>)
 8001ec2:	4a12      	ldr	r2, [pc, #72]	; (8001f0c <_sbrk+0x68>)
 8001ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <_sbrk+0x64>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d207      	bcs.n	8001ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed4:	f008 fc50 	bl	800a778 <__errno>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	220c      	movs	r2, #12
 8001edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ee2:	e009      	b.n	8001ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <_sbrk+0x64>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eea:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <_sbrk+0x64>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	4a05      	ldr	r2, [pc, #20]	; (8001f08 <_sbrk+0x64>)
 8001ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20050000 	.word	0x20050000
 8001f04:	00000800 	.word	0x00000800
 8001f08:	200007d4 	.word	0x200007d4
 8001f0c:	20001718 	.word	0x20001718

08001f10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <SystemInit+0x20>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1a:	4a05      	ldr	r2, [pc, #20]	; (8001f30 <SystemInit+0x20>)
 8001f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f38:	480d      	ldr	r0, [pc, #52]	; (8001f70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f3a:	490e      	ldr	r1, [pc, #56]	; (8001f74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f3c:	4a0e      	ldr	r2, [pc, #56]	; (8001f78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f40:	e002      	b.n	8001f48 <LoopCopyDataInit>

08001f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f46:	3304      	adds	r3, #4

08001f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f4c:	d3f9      	bcc.n	8001f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4e:	4a0b      	ldr	r2, [pc, #44]	; (8001f7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f50:	4c0b      	ldr	r4, [pc, #44]	; (8001f80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f54:	e001      	b.n	8001f5a <LoopFillZerobss>

08001f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f58:	3204      	adds	r2, #4

08001f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f5c:	d3fb      	bcc.n	8001f56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f5e:	f7ff ffd7 	bl	8001f10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f62:	f008 fc0f 	bl	800a784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f66:	f7ff f877 	bl	8001058 <main>
  bx  lr    
 8001f6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f6c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f74:	200007b4 	.word	0x200007b4
  ldr r2, =_sidata
 8001f78:	0800df9c 	.word	0x0800df9c
  ldr r2, =_sbss
 8001f7c:	200007b4 	.word	0x200007b4
  ldr r4, =_ebss
 8001f80:	20001718 	.word	0x20001718

08001f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f84:	e7fe      	b.n	8001f84 <ADC_IRQHandler>

08001f86 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f8a:	2003      	movs	r0, #3
 8001f8c:	f000 fbb6 	bl	80026fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f90:	200f      	movs	r0, #15
 8001f92:	f000 f805 	bl	8001fa0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001f96:	f7ff fd65 	bl	8001a64 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_InitTick+0x54>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_InitTick+0x58>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fbc3 	bl	800274a <HAL_SYSTICK_Config>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00e      	b.n	8001fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b0f      	cmp	r3, #15
 8001fd2:	d80a      	bhi.n	8001fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fdc:	f000 fb99 	bl	8002712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe0:	4a06      	ldr	r2, [pc, #24]	; (8001ffc <HAL_InitTick+0x5c>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	20000008 	.word	0x20000008
 8001ffc:	20000004 	.word	0x20000004

08002000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_IncTick+0x20>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_IncTick+0x24>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4413      	add	r3, r2
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <HAL_IncTick+0x24>)
 8002012:	6013      	str	r3, [r2, #0]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000008 	.word	0x20000008
 8002024:	20001028 	.word	0x20001028

08002028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return uwTick;
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <HAL_GetTick+0x14>)
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20001028 	.word	0x20001028

08002040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002048:	f7ff ffee 	bl	8002028 <HAL_GetTick>
 800204c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002058:	d005      	beq.n	8002066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_Delay+0x44>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4413      	add	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002066:	bf00      	nop
 8002068:	f7ff ffde 	bl	8002028 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	429a      	cmp	r2, r3
 8002076:	d8f7      	bhi.n	8002068 <HAL_Delay+0x28>
  {
  }
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000008 	.word	0x20000008

08002088 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e031      	b.n	8002102 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff fd00 	bl	8001aac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d116      	bne.n	80020f4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <HAL_ADC_Init+0x84>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	f043 0202 	orr.w	r2, r3, #2
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f964 	bl	80023a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f023 0303 	bic.w	r3, r3, #3
 80020ea:	f043 0201 	orr.w	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	641a      	str	r2, [r3, #64]	; 0x40
 80020f2:	e001      	b.n	80020f8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002100:	7bfb      	ldrb	r3, [r7, #15]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	ffffeefd 	.word	0xffffeefd

08002110 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_ADC_ConfigChannel+0x1c>
 8002128:	2302      	movs	r3, #2
 800212a:	e12a      	b.n	8002382 <HAL_ADC_ConfigChannel+0x272>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b09      	cmp	r3, #9
 800213a:	d93a      	bls.n	80021b2 <HAL_ADC_ConfigChannel+0xa2>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002144:	d035      	beq.n	80021b2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68d9      	ldr	r1, [r3, #12]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	b29b      	uxth	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	4613      	mov	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4413      	add	r3, r2
 800215a:	3b1e      	subs	r3, #30
 800215c:	2207      	movs	r2, #7
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43da      	mvns	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	400a      	ands	r2, r1
 800216a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a87      	ldr	r2, [pc, #540]	; (8002390 <HAL_ADC_ConfigChannel+0x280>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d10a      	bne.n	800218c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68d9      	ldr	r1, [r3, #12]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	061a      	lsls	r2, r3, #24
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800218a:	e035      	b.n	80021f8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68d9      	ldr	r1, [r3, #12]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	4618      	mov	r0, r3
 800219e:	4603      	mov	r3, r0
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4403      	add	r3, r0
 80021a4:	3b1e      	subs	r3, #30
 80021a6:	409a      	lsls	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021b0:	e022      	b.n	80021f8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6919      	ldr	r1, [r3, #16]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	4613      	mov	r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4413      	add	r3, r2
 80021c6:	2207      	movs	r2, #7
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43da      	mvns	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	400a      	ands	r2, r1
 80021d4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6919      	ldr	r1, [r3, #16]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	4618      	mov	r0, r3
 80021e8:	4603      	mov	r3, r0
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4403      	add	r3, r0
 80021ee:	409a      	lsls	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b06      	cmp	r3, #6
 80021fe:	d824      	bhi.n	800224a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3b05      	subs	r3, #5
 8002212:	221f      	movs	r2, #31
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43da      	mvns	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	400a      	ands	r2, r1
 8002220:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	b29b      	uxth	r3, r3
 800222e:	4618      	mov	r0, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	3b05      	subs	r3, #5
 800223c:	fa00 f203 	lsl.w	r2, r0, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	635a      	str	r2, [r3, #52]	; 0x34
 8002248:	e04c      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d824      	bhi.n	800229c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	3b23      	subs	r3, #35	; 0x23
 8002264:	221f      	movs	r2, #31
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43da      	mvns	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	400a      	ands	r2, r1
 8002272:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	4618      	mov	r0, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	3b23      	subs	r3, #35	; 0x23
 800228e:	fa00 f203 	lsl.w	r2, r0, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	631a      	str	r2, [r3, #48]	; 0x30
 800229a:	e023      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	3b41      	subs	r3, #65	; 0x41
 80022ae:	221f      	movs	r2, #31
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43da      	mvns	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	400a      	ands	r2, r1
 80022bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	4618      	mov	r0, r3
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	3b41      	subs	r3, #65	; 0x41
 80022d8:	fa00 f203 	lsl.w	r2, r0, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a2a      	ldr	r2, [pc, #168]	; (8002394 <HAL_ADC_ConfigChannel+0x284>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d10a      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x1f4>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022f6:	d105      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80022f8:	4b27      	ldr	r3, [pc, #156]	; (8002398 <HAL_ADC_ConfigChannel+0x288>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	4a26      	ldr	r2, [pc, #152]	; (8002398 <HAL_ADC_ConfigChannel+0x288>)
 80022fe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002302:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a22      	ldr	r2, [pc, #136]	; (8002394 <HAL_ADC_ConfigChannel+0x284>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d109      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x212>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b12      	cmp	r3, #18
 8002314:	d105      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002316:	4b20      	ldr	r3, [pc, #128]	; (8002398 <HAL_ADC_ConfigChannel+0x288>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4a1f      	ldr	r2, [pc, #124]	; (8002398 <HAL_ADC_ConfigChannel+0x288>)
 800231c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002320:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a1b      	ldr	r2, [pc, #108]	; (8002394 <HAL_ADC_ConfigChannel+0x284>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d125      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x268>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a17      	ldr	r2, [pc, #92]	; (8002390 <HAL_ADC_ConfigChannel+0x280>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d003      	beq.n	800233e <HAL_ADC_ConfigChannel+0x22e>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b11      	cmp	r3, #17
 800233c:	d11c      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800233e:	4b16      	ldr	r3, [pc, #88]	; (8002398 <HAL_ADC_ConfigChannel+0x288>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	4a15      	ldr	r2, [pc, #84]	; (8002398 <HAL_ADC_ConfigChannel+0x288>)
 8002344:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002348:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a10      	ldr	r2, [pc, #64]	; (8002390 <HAL_ADC_ConfigChannel+0x280>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d111      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <HAL_ADC_ConfigChannel+0x28c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a11      	ldr	r2, [pc, #68]	; (80023a0 <HAL_ADC_ConfigChannel+0x290>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	0c9a      	lsrs	r2, r3, #18
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800236a:	e002      	b.n	8002372 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	3b01      	subs	r3, #1
 8002370:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f9      	bne.n	800236c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	10000012 	.word	0x10000012
 8002394:	40012000 	.word	0x40012000
 8002398:	40012300 	.word	0x40012300
 800239c:	20000000 	.word	0x20000000
 80023a0:	431bde83 	.word	0x431bde83

080023a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80023ac:	4b78      	ldr	r3, [pc, #480]	; (8002590 <ADC_Init+0x1ec>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4a77      	ldr	r2, [pc, #476]	; (8002590 <ADC_Init+0x1ec>)
 80023b2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80023b6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80023b8:	4b75      	ldr	r3, [pc, #468]	; (8002590 <ADC_Init+0x1ec>)
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4973      	ldr	r1, [pc, #460]	; (8002590 <ADC_Init+0x1ec>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	021a      	lsls	r2, r3, #8
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6859      	ldr	r1, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800241a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6899      	ldr	r1, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	4a58      	ldr	r2, [pc, #352]	; (8002594 <ADC_Init+0x1f0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d022      	beq.n	800247e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002446:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6899      	ldr	r1, [r3, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002468:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6899      	ldr	r1, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	e00f      	b.n	800249e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800248c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800249c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0202 	bic.w	r2, r2, #2
 80024ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6899      	ldr	r1, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	005a      	lsls	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d01b      	beq.n	8002504 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6859      	ldr	r1, [r3, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	3b01      	subs	r3, #1
 80024f8:	035a      	lsls	r2, r3, #13
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	e007      	b.n	8002514 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002512:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	3b01      	subs	r3, #1
 8002530:	051a      	lsls	r2, r3, #20
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002548:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6899      	ldr	r1, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002556:	025a      	lsls	r2, r3, #9
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800256e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6899      	ldr	r1, [r3, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	029a      	lsls	r2, r3, #10
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	609a      	str	r2, [r3, #8]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	40012300 	.word	0x40012300
 8002594:	0f000001 	.word	0x0f000001

08002598 <__NVIC_SetPriorityGrouping>:
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <__NVIC_SetPriorityGrouping+0x40>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025b4:	4013      	ands	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <__NVIC_SetPriorityGrouping+0x44>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c6:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <__NVIC_SetPriorityGrouping+0x40>)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	60d3      	str	r3, [r2, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000ed00 	.word	0xe000ed00
 80025dc:	05fa0000 	.word	0x05fa0000

080025e0 <__NVIC_GetPriorityGrouping>:
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <__NVIC_GetPriorityGrouping+0x18>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	0a1b      	lsrs	r3, r3, #8
 80025ea:	f003 0307 	and.w	r3, r3, #7
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <__NVIC_SetPriority>:
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	2b00      	cmp	r3, #0
 800260e:	db0a      	blt.n	8002626 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	490c      	ldr	r1, [pc, #48]	; (8002648 <__NVIC_SetPriority+0x4c>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	0112      	lsls	r2, r2, #4
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	440b      	add	r3, r1
 8002620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002624:	e00a      	b.n	800263c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4908      	ldr	r1, [pc, #32]	; (800264c <__NVIC_SetPriority+0x50>)
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	3b04      	subs	r3, #4
 8002634:	0112      	lsls	r2, r2, #4
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	440b      	add	r3, r1
 800263a:	761a      	strb	r2, [r3, #24]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	e000e100 	.word	0xe000e100
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <NVIC_EncodePriority>:
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f1c3 0307 	rsb	r3, r3, #7
 800266a:	2b04      	cmp	r3, #4
 800266c:	bf28      	it	cs
 800266e:	2304      	movcs	r3, #4
 8002670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3304      	adds	r3, #4
 8002676:	2b06      	cmp	r3, #6
 8002678:	d902      	bls.n	8002680 <NVIC_EncodePriority+0x30>
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3b03      	subs	r3, #3
 800267e:	e000      	b.n	8002682 <NVIC_EncodePriority+0x32>
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	401a      	ands	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002698:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	43d9      	mvns	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	4313      	orrs	r3, r2
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3724      	adds	r7, #36	; 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c8:	d301      	bcc.n	80026ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ca:	2301      	movs	r3, #1
 80026cc:	e00f      	b.n	80026ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ce:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <SysTick_Config+0x40>)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026d6:	210f      	movs	r1, #15
 80026d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026dc:	f7ff ff8e 	bl	80025fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <SysTick_Config+0x40>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026e6:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <SysTick_Config+0x40>)
 80026e8:	2207      	movs	r2, #7
 80026ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	e000e010 	.word	0xe000e010

080026fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff ff47 	bl	8002598 <__NVIC_SetPriorityGrouping>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002712:	b580      	push	{r7, lr}
 8002714:	b086      	sub	sp, #24
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
 800271e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002724:	f7ff ff5c 	bl	80025e0 <__NVIC_GetPriorityGrouping>
 8002728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68b9      	ldr	r1, [r7, #8]
 800272e:	6978      	ldr	r0, [r7, #20]
 8002730:	f7ff ff8e 	bl	8002650 <NVIC_EncodePriority>
 8002734:	4602      	mov	r2, r0
 8002736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff5d 	bl	80025fc <__NVIC_SetPriority>
}
 8002742:	bf00      	nop
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff ffb0 	bl	80026b8 <SysTick_Config>
 8002758:	4603      	mov	r3, r0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e054      	b.n	8002820 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	7f5b      	ldrb	r3, [r3, #29]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d105      	bne.n	800278c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff f9ea 	bl	8001b60 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	791b      	ldrb	r3, [r3, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10c      	bne.n	80027b4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a22      	ldr	r2, [pc, #136]	; (8002828 <HAL_CRC_Init+0xc4>)
 80027a0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0218 	bic.w	r2, r2, #24
 80027b0:	609a      	str	r2, [r3, #8]
 80027b2:	e00c      	b.n	80027ce <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6899      	ldr	r1, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	461a      	mov	r2, r3
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f834 	bl	800282c <HAL_CRCEx_Polynomial_Set>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e028      	b.n	8002820 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	795b      	ldrb	r3, [r3, #5]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d105      	bne.n	80027e2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027de:	611a      	str	r2, [r3, #16]
 80027e0:	e004      	b.n	80027ec <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6912      	ldr	r2, [r2, #16]
 80027ea:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699a      	ldr	r2, [r3, #24]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	04c11db7 	.word	0x04c11db7

0800282c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800283c:	231f      	movs	r3, #31
 800283e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002840:	bf00      	nop
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1e5a      	subs	r2, r3, #1
 8002846:	613a      	str	r2, [r7, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d009      	beq.n	8002860 <HAL_CRCEx_Polynomial_Set+0x34>
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_CRCEx_Polynomial_Set+0x16>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b18      	cmp	r3, #24
 8002864:	d846      	bhi.n	80028f4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002866:	a201      	add	r2, pc, #4	; (adr r2, 800286c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286c:	080028fb 	.word	0x080028fb
 8002870:	080028f5 	.word	0x080028f5
 8002874:	080028f5 	.word	0x080028f5
 8002878:	080028f5 	.word	0x080028f5
 800287c:	080028f5 	.word	0x080028f5
 8002880:	080028f5 	.word	0x080028f5
 8002884:	080028f5 	.word	0x080028f5
 8002888:	080028f5 	.word	0x080028f5
 800288c:	080028e9 	.word	0x080028e9
 8002890:	080028f5 	.word	0x080028f5
 8002894:	080028f5 	.word	0x080028f5
 8002898:	080028f5 	.word	0x080028f5
 800289c:	080028f5 	.word	0x080028f5
 80028a0:	080028f5 	.word	0x080028f5
 80028a4:	080028f5 	.word	0x080028f5
 80028a8:	080028f5 	.word	0x080028f5
 80028ac:	080028dd 	.word	0x080028dd
 80028b0:	080028f5 	.word	0x080028f5
 80028b4:	080028f5 	.word	0x080028f5
 80028b8:	080028f5 	.word	0x080028f5
 80028bc:	080028f5 	.word	0x080028f5
 80028c0:	080028f5 	.word	0x080028f5
 80028c4:	080028f5 	.word	0x080028f5
 80028c8:	080028f5 	.word	0x080028f5
 80028cc:	080028d1 	.word	0x080028d1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	2b06      	cmp	r3, #6
 80028d4:	d913      	bls.n	80028fe <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80028da:	e010      	b.n	80028fe <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	2b07      	cmp	r3, #7
 80028e0:	d90f      	bls.n	8002902 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80028e6:	e00c      	b.n	8002902 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	2b0f      	cmp	r3, #15
 80028ec:	d90b      	bls.n	8002906 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80028f2:	e008      	b.n	8002906 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	75fb      	strb	r3, [r7, #23]
      break;
 80028f8:	e006      	b.n	8002908 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80028fa:	bf00      	nop
 80028fc:	e004      	b.n	8002908 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80028fe:	bf00      	nop
 8002900:	e002      	b.n	8002908 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002902:	bf00      	nop
 8002904:	e000      	b.n	8002908 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002906:	bf00      	nop
  }
  if (status == HAL_OK)
 8002908:	7dfb      	ldrb	r3, [r7, #23]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10d      	bne.n	800292a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f023 0118 	bic.w	r1, r3, #24
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	430a      	orrs	r2, r1
 8002928:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800292a:	7dfb      	ldrb	r3, [r7, #23]
}
 800292c:	4618      	mov	r0, r3
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d026      	beq.n	80029a8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d021      	beq.n	80029a8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002972:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002978:	f043 0201 	orr.w	r2, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2204      	movs	r2, #4
 800298c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d026      	beq.n	8002a00 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d021      	beq.n	8002a00 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029ca:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2220      	movs	r2, #32
 80029d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d8:	f043 0202 	orr.w	r2, r3, #2
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2204      	movs	r2, #4
 80029e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d026      	beq.n	8002a58 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d021      	beq.n	8002a58 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a22:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2208      	movs	r2, #8
 8002a2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a30:	f043 0204 	orr.w	r2, r3, #4
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d013      	beq.n	8002a8a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00e      	beq.n	8002a8a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2204      	movs	r2, #4
 8002a82:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f853 	bl	8002b30 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d024      	beq.n	8002ade <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01f      	beq.n	8002ade <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002aac:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d01f      	beq.n	8002b28 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d01a      	beq.n	8002b28 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b00:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2210      	movs	r2, #16
 8002b08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f80e 	bl	8002b44 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002b28:	bf00      	nop
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b089      	sub	sp, #36	; 0x24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	e175      	b.n	8002e64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b78:	2201      	movs	r2, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	f040 8164 	bne.w	8002e5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d00b      	beq.n	8002bb6 <HAL_GPIO_Init+0x5e>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d007      	beq.n	8002bb6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002baa:	2b11      	cmp	r3, #17
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b12      	cmp	r3, #18
 8002bb4:	d130      	bne.n	8002c18 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bec:	2201      	movs	r2, #1
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 0201 	and.w	r2, r3, #1
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	2203      	movs	r2, #3
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d003      	beq.n	8002c58 <HAL_GPIO_Init+0x100>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b12      	cmp	r3, #18
 8002c56:	d123      	bne.n	8002ca0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	08da      	lsrs	r2, r3, #3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3208      	adds	r2, #8
 8002c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	220f      	movs	r2, #15
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	08da      	lsrs	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3208      	adds	r2, #8
 8002c9a:	69b9      	ldr	r1, [r7, #24]
 8002c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0203 	and.w	r2, r3, #3
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80be 	beq.w	8002e5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce2:	4b66      	ldr	r3, [pc, #408]	; (8002e7c <HAL_GPIO_Init+0x324>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	4a65      	ldr	r2, [pc, #404]	; (8002e7c <HAL_GPIO_Init+0x324>)
 8002ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cec:	6453      	str	r3, [r2, #68]	; 0x44
 8002cee:	4b63      	ldr	r3, [pc, #396]	; (8002e7c <HAL_GPIO_Init+0x324>)
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cfa:	4a61      	ldr	r2, [pc, #388]	; (8002e80 <HAL_GPIO_Init+0x328>)
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	089b      	lsrs	r3, r3, #2
 8002d00:	3302      	adds	r3, #2
 8002d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	220f      	movs	r2, #15
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a58      	ldr	r2, [pc, #352]	; (8002e84 <HAL_GPIO_Init+0x32c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d037      	beq.n	8002d96 <HAL_GPIO_Init+0x23e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a57      	ldr	r2, [pc, #348]	; (8002e88 <HAL_GPIO_Init+0x330>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d031      	beq.n	8002d92 <HAL_GPIO_Init+0x23a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a56      	ldr	r2, [pc, #344]	; (8002e8c <HAL_GPIO_Init+0x334>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d02b      	beq.n	8002d8e <HAL_GPIO_Init+0x236>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a55      	ldr	r2, [pc, #340]	; (8002e90 <HAL_GPIO_Init+0x338>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d025      	beq.n	8002d8a <HAL_GPIO_Init+0x232>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a54      	ldr	r2, [pc, #336]	; (8002e94 <HAL_GPIO_Init+0x33c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d01f      	beq.n	8002d86 <HAL_GPIO_Init+0x22e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a53      	ldr	r2, [pc, #332]	; (8002e98 <HAL_GPIO_Init+0x340>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d019      	beq.n	8002d82 <HAL_GPIO_Init+0x22a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a52      	ldr	r2, [pc, #328]	; (8002e9c <HAL_GPIO_Init+0x344>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <HAL_GPIO_Init+0x226>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a51      	ldr	r2, [pc, #324]	; (8002ea0 <HAL_GPIO_Init+0x348>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00d      	beq.n	8002d7a <HAL_GPIO_Init+0x222>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a50      	ldr	r2, [pc, #320]	; (8002ea4 <HAL_GPIO_Init+0x34c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d007      	beq.n	8002d76 <HAL_GPIO_Init+0x21e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4f      	ldr	r2, [pc, #316]	; (8002ea8 <HAL_GPIO_Init+0x350>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d101      	bne.n	8002d72 <HAL_GPIO_Init+0x21a>
 8002d6e:	2309      	movs	r3, #9
 8002d70:	e012      	b.n	8002d98 <HAL_GPIO_Init+0x240>
 8002d72:	230a      	movs	r3, #10
 8002d74:	e010      	b.n	8002d98 <HAL_GPIO_Init+0x240>
 8002d76:	2308      	movs	r3, #8
 8002d78:	e00e      	b.n	8002d98 <HAL_GPIO_Init+0x240>
 8002d7a:	2307      	movs	r3, #7
 8002d7c:	e00c      	b.n	8002d98 <HAL_GPIO_Init+0x240>
 8002d7e:	2306      	movs	r3, #6
 8002d80:	e00a      	b.n	8002d98 <HAL_GPIO_Init+0x240>
 8002d82:	2305      	movs	r3, #5
 8002d84:	e008      	b.n	8002d98 <HAL_GPIO_Init+0x240>
 8002d86:	2304      	movs	r3, #4
 8002d88:	e006      	b.n	8002d98 <HAL_GPIO_Init+0x240>
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e004      	b.n	8002d98 <HAL_GPIO_Init+0x240>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e002      	b.n	8002d98 <HAL_GPIO_Init+0x240>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_GPIO_Init+0x240>
 8002d96:	2300      	movs	r3, #0
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	f002 0203 	and.w	r2, r2, #3
 8002d9e:	0092      	lsls	r2, r2, #2
 8002da0:	4093      	lsls	r3, r2
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002da8:	4935      	ldr	r1, [pc, #212]	; (8002e80 <HAL_GPIO_Init+0x328>)
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	089b      	lsrs	r3, r3, #2
 8002dae:	3302      	adds	r3, #2
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db6:	4b3d      	ldr	r3, [pc, #244]	; (8002eac <HAL_GPIO_Init+0x354>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dda:	4a34      	ldr	r2, [pc, #208]	; (8002eac <HAL_GPIO_Init+0x354>)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002de0:	4b32      	ldr	r3, [pc, #200]	; (8002eac <HAL_GPIO_Init+0x354>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e04:	4a29      	ldr	r2, [pc, #164]	; (8002eac <HAL_GPIO_Init+0x354>)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e0a:	4b28      	ldr	r3, [pc, #160]	; (8002eac <HAL_GPIO_Init+0x354>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	43db      	mvns	r3, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4013      	ands	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e2e:	4a1f      	ldr	r2, [pc, #124]	; (8002eac <HAL_GPIO_Init+0x354>)
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e34:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <HAL_GPIO_Init+0x354>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e58:	4a14      	ldr	r2, [pc, #80]	; (8002eac <HAL_GPIO_Init+0x354>)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3301      	adds	r3, #1
 8002e62:	61fb      	str	r3, [r7, #28]
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	2b0f      	cmp	r3, #15
 8002e68:	f67f ae86 	bls.w	8002b78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	3724      	adds	r7, #36	; 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40013800 	.word	0x40013800
 8002e84:	40020000 	.word	0x40020000
 8002e88:	40020400 	.word	0x40020400
 8002e8c:	40020800 	.word	0x40020800
 8002e90:	40020c00 	.word	0x40020c00
 8002e94:	40021000 	.word	0x40021000
 8002e98:	40021400 	.word	0x40021400
 8002e9c:	40021800 	.word	0x40021800
 8002ea0:	40021c00 	.word	0x40021c00
 8002ea4:	40022000 	.word	0x40022000
 8002ea8:	40022400 	.word	0x40022400
 8002eac:	40013c00 	.word	0x40013c00

08002eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	807b      	strh	r3, [r7, #2]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ec0:	787b      	ldrb	r3, [r7, #1]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ecc:	e003      	b.n	8002ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ece:	887b      	ldrh	r3, [r7, #2]
 8002ed0:	041a      	lsls	r2, r3, #16
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	619a      	str	r2, [r3, #24]
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b085      	sub	sp, #20
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	460b      	mov	r3, r1
 8002eec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ef4:	887a      	ldrh	r2, [r7, #2]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	041a      	lsls	r2, r3, #16
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	43d9      	mvns	r1, r3
 8002f00:	887b      	ldrh	r3, [r7, #2]
 8002f02:	400b      	ands	r3, r1
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	619a      	str	r2, [r3, #24]
}
 8002f0a:	bf00      	nop
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002f16:	b590      	push	{r4, r7, lr}
 8002f18:	b089      	sub	sp, #36	; 0x24
 8002f1a:	af04      	add	r7, sp, #16
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	4608      	mov	r0, r1
 8002f20:	4611      	mov	r1, r2
 8002f22:	461a      	mov	r2, r3
 8002f24:	4603      	mov	r3, r0
 8002f26:	70fb      	strb	r3, [r7, #3]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	70bb      	strb	r3, [r7, #2]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_HCD_HC_Init+0x28>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e076      	b.n	800302c <HAL_HCD_HC_Init+0x116>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002f46:	78fb      	ldrb	r3, [r7, #3]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	212c      	movs	r1, #44	; 0x2c
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	333d      	adds	r3, #61	; 0x3d
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	212c      	movs	r1, #44	; 0x2c
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	3338      	adds	r3, #56	; 0x38
 8002f66:	787a      	ldrb	r2, [r7, #1]
 8002f68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002f6a:	78fb      	ldrb	r3, [r7, #3]
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	212c      	movs	r1, #44	; 0x2c
 8002f70:	fb01 f303 	mul.w	r3, r1, r3
 8002f74:	4413      	add	r3, r2
 8002f76:	3340      	adds	r3, #64	; 0x40
 8002f78:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002f7a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	212c      	movs	r1, #44	; 0x2c
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	3339      	adds	r3, #57	; 0x39
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	212c      	movs	r1, #44	; 0x2c
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	333f      	adds	r3, #63	; 0x3f
 8002f9c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002fa0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	78ba      	ldrb	r2, [r7, #2]
 8002fa6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002faa:	b2d0      	uxtb	r0, r2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	212c      	movs	r1, #44	; 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	333a      	adds	r3, #58	; 0x3a
 8002fb8:	4602      	mov	r2, r0
 8002fba:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002fbc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	da09      	bge.n	8002fd8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	212c      	movs	r1, #44	; 0x2c
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	333b      	adds	r3, #59	; 0x3b
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	701a      	strb	r2, [r3, #0]
 8002fd6:	e008      	b.n	8002fea <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	212c      	movs	r1, #44	; 0x2c
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	333b      	adds	r3, #59	; 0x3b
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	212c      	movs	r1, #44	; 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	333c      	adds	r3, #60	; 0x3c
 8002ff8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ffc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	787c      	ldrb	r4, [r7, #1]
 8003004:	78ba      	ldrb	r2, [r7, #2]
 8003006:	78f9      	ldrb	r1, [r7, #3]
 8003008:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800300a:	9302      	str	r3, [sp, #8]
 800300c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003010:	9301      	str	r3, [sp, #4]
 8003012:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	4623      	mov	r3, r4
 800301a:	f003 fec1 	bl	8006da0 <USB_HC_Init>
 800301e:	4603      	mov	r3, r0
 8003020:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	bd90      	pop	{r4, r7, pc}

08003034 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	4608      	mov	r0, r1
 800303e:	4611      	mov	r1, r2
 8003040:	461a      	mov	r2, r3
 8003042:	4603      	mov	r3, r0
 8003044:	70fb      	strb	r3, [r7, #3]
 8003046:	460b      	mov	r3, r1
 8003048:	70bb      	strb	r3, [r7, #2]
 800304a:	4613      	mov	r3, r2
 800304c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800304e:	78fb      	ldrb	r3, [r7, #3]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	333b      	adds	r3, #59	; 0x3b
 800305c:	78ba      	ldrb	r2, [r7, #2]
 800305e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	212c      	movs	r1, #44	; 0x2c
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	4413      	add	r3, r2
 800306c:	333f      	adds	r3, #63	; 0x3f
 800306e:	787a      	ldrb	r2, [r7, #1]
 8003070:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003072:	7c3b      	ldrb	r3, [r7, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d112      	bne.n	800309e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	212c      	movs	r1, #44	; 0x2c
 800307e:	fb01 f303 	mul.w	r3, r1, r3
 8003082:	4413      	add	r3, r2
 8003084:	3342      	adds	r3, #66	; 0x42
 8003086:	2203      	movs	r2, #3
 8003088:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	212c      	movs	r1, #44	; 0x2c
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	333d      	adds	r3, #61	; 0x3d
 8003098:	7f3a      	ldrb	r2, [r7, #28]
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	e008      	b.n	80030b0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	3342      	adds	r3, #66	; 0x42
 80030ac:	2202      	movs	r2, #2
 80030ae:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80030b0:	787b      	ldrb	r3, [r7, #1]
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	f200 80c6 	bhi.w	8003244 <HAL_HCD_HC_SubmitRequest+0x210>
 80030b8:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80030ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030be:	bf00      	nop
 80030c0:	080030d1 	.word	0x080030d1
 80030c4:	08003231 	.word	0x08003231
 80030c8:	08003135 	.word	0x08003135
 80030cc:	080031b3 	.word	0x080031b3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80030d0:	7c3b      	ldrb	r3, [r7, #16]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	f040 80b8 	bne.w	8003248 <HAL_HCD_HC_SubmitRequest+0x214>
 80030d8:	78bb      	ldrb	r3, [r7, #2]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f040 80b4 	bne.w	8003248 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80030e0:	8b3b      	ldrh	r3, [r7, #24]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d108      	bne.n	80030f8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	212c      	movs	r1, #44	; 0x2c
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	4413      	add	r3, r2
 80030f2:	3355      	adds	r3, #85	; 0x55
 80030f4:	2201      	movs	r2, #1
 80030f6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	212c      	movs	r1, #44	; 0x2c
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	3355      	adds	r3, #85	; 0x55
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d109      	bne.n	8003120 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	212c      	movs	r1, #44	; 0x2c
 8003112:	fb01 f303 	mul.w	r3, r1, r3
 8003116:	4413      	add	r3, r2
 8003118:	3342      	adds	r3, #66	; 0x42
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800311e:	e093      	b.n	8003248 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	212c      	movs	r1, #44	; 0x2c
 8003126:	fb01 f303 	mul.w	r3, r1, r3
 800312a:	4413      	add	r3, r2
 800312c:	3342      	adds	r3, #66	; 0x42
 800312e:	2202      	movs	r2, #2
 8003130:	701a      	strb	r2, [r3, #0]
      break;
 8003132:	e089      	b.n	8003248 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003134:	78bb      	ldrb	r3, [r7, #2]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d11d      	bne.n	8003176 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	212c      	movs	r1, #44	; 0x2c
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	3355      	adds	r3, #85	; 0x55
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	212c      	movs	r1, #44	; 0x2c
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	4413      	add	r3, r2
 800315a:	3342      	adds	r3, #66	; 0x42
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003160:	e073      	b.n	800324a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	4413      	add	r3, r2
 800316e:	3342      	adds	r3, #66	; 0x42
 8003170:	2202      	movs	r2, #2
 8003172:	701a      	strb	r2, [r3, #0]
      break;
 8003174:	e069      	b.n	800324a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003176:	78fb      	ldrb	r3, [r7, #3]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	212c      	movs	r1, #44	; 0x2c
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	4413      	add	r3, r2
 8003182:	3354      	adds	r3, #84	; 0x54
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	212c      	movs	r1, #44	; 0x2c
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	4413      	add	r3, r2
 8003196:	3342      	adds	r3, #66	; 0x42
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
      break;
 800319c:	e055      	b.n	800324a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	212c      	movs	r1, #44	; 0x2c
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	3342      	adds	r3, #66	; 0x42
 80031ac:	2202      	movs	r2, #2
 80031ae:	701a      	strb	r2, [r3, #0]
      break;
 80031b0:	e04b      	b.n	800324a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80031b2:	78bb      	ldrb	r3, [r7, #2]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d11d      	bne.n	80031f4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	212c      	movs	r1, #44	; 0x2c
 80031be:	fb01 f303 	mul.w	r3, r1, r3
 80031c2:	4413      	add	r3, r2
 80031c4:	3355      	adds	r3, #85	; 0x55
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d109      	bne.n	80031e0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	212c      	movs	r1, #44	; 0x2c
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	3342      	adds	r3, #66	; 0x42
 80031da:	2200      	movs	r2, #0
 80031dc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80031de:	e034      	b.n	800324a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	212c      	movs	r1, #44	; 0x2c
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	3342      	adds	r3, #66	; 0x42
 80031ee:	2202      	movs	r2, #2
 80031f0:	701a      	strb	r2, [r3, #0]
      break;
 80031f2:	e02a      	b.n	800324a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	212c      	movs	r1, #44	; 0x2c
 80031fa:	fb01 f303 	mul.w	r3, r1, r3
 80031fe:	4413      	add	r3, r2
 8003200:	3354      	adds	r3, #84	; 0x54
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d109      	bne.n	800321c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	212c      	movs	r1, #44	; 0x2c
 800320e:	fb01 f303 	mul.w	r3, r1, r3
 8003212:	4413      	add	r3, r2
 8003214:	3342      	adds	r3, #66	; 0x42
 8003216:	2200      	movs	r2, #0
 8003218:	701a      	strb	r2, [r3, #0]
      break;
 800321a:	e016      	b.n	800324a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	212c      	movs	r1, #44	; 0x2c
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	4413      	add	r3, r2
 8003228:	3342      	adds	r3, #66	; 0x42
 800322a:	2202      	movs	r2, #2
 800322c:	701a      	strb	r2, [r3, #0]
      break;
 800322e:	e00c      	b.n	800324a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	212c      	movs	r1, #44	; 0x2c
 8003236:	fb01 f303 	mul.w	r3, r1, r3
 800323a:	4413      	add	r3, r2
 800323c:	3342      	adds	r3, #66	; 0x42
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]
      break;
 8003242:	e002      	b.n	800324a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003244:	bf00      	nop
 8003246:	e000      	b.n	800324a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003248:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	212c      	movs	r1, #44	; 0x2c
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	4413      	add	r3, r2
 8003256:	3344      	adds	r3, #68	; 0x44
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	8b3a      	ldrh	r2, [r7, #24]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	202c      	movs	r0, #44	; 0x2c
 8003264:	fb00 f303 	mul.w	r3, r0, r3
 8003268:	440b      	add	r3, r1
 800326a:	334c      	adds	r3, #76	; 0x4c
 800326c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	212c      	movs	r1, #44	; 0x2c
 8003274:	fb01 f303 	mul.w	r3, r1, r3
 8003278:	4413      	add	r3, r2
 800327a:	3360      	adds	r3, #96	; 0x60
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	212c      	movs	r1, #44	; 0x2c
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	4413      	add	r3, r2
 800328c:	3350      	adds	r3, #80	; 0x50
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	212c      	movs	r1, #44	; 0x2c
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	4413      	add	r3, r2
 800329e:	3339      	adds	r3, #57	; 0x39
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80032a4:	78fb      	ldrb	r3, [r7, #3]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	212c      	movs	r1, #44	; 0x2c
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	3361      	adds	r3, #97	; 0x61
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	78fb      	ldrb	r3, [r7, #3]
 80032bc:	222c      	movs	r2, #44	; 0x2c
 80032be:	fb02 f303 	mul.w	r3, r2, r3
 80032c2:	3338      	adds	r3, #56	; 0x38
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	18d1      	adds	r1, r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	f003 fe74 	bl	8006fbc <USB_HC_StartXfer>
 80032d4:	4603      	mov	r3, r0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop

080032e0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f003 fc8f 	bl	8006c1a <USB_GetMode>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b01      	cmp	r3, #1
 8003300:	f040 80ef 	bne.w	80034e2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f003 fc73 	bl	8006bf4 <USB_ReadInterrupts>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 80e5 	beq.w	80034e0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f003 fc6a 	bl	8006bf4 <USB_ReadInterrupts>
 8003320:	4603      	mov	r3, r0
 8003322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003326:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800332a:	d104      	bne.n	8003336 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003334:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f003 fc5a 	bl	8006bf4 <USB_ReadInterrupts>
 8003340:	4603      	mov	r3, r0
 8003342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800334a:	d104      	bne.n	8003356 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003354:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f003 fc4a 	bl	8006bf4 <USB_ReadInterrupts>
 8003360:	4603      	mov	r3, r0
 8003362:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003366:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800336a:	d104      	bne.n	8003376 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003374:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f003 fc3a 	bl	8006bf4 <USB_ReadInterrupts>
 8003380:	4603      	mov	r3, r0
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b02      	cmp	r3, #2
 8003388:	d103      	bne.n	8003392 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2202      	movs	r2, #2
 8003390:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f003 fc2c 	bl	8006bf4 <USB_ReadInterrupts>
 800339c:	4603      	mov	r3, r0
 800339e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033a6:	d115      	bne.n	80033d4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80033b0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d108      	bne.n	80033d4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f005 fb60 	bl	8008a88 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2101      	movs	r1, #1
 80033ce:	4618      	mov	r0, r3
 80033d0:	f003 fc31 	bl	8006c36 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f003 fc0b 	bl	8006bf4 <USB_ReadInterrupts>
 80033de:	4603      	mov	r3, r0
 80033e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033e8:	d102      	bne.n	80033f0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f001 f9dd 	bl	80047aa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f003 fbfd 	bl	8006bf4 <USB_ReadInterrupts>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b08      	cmp	r3, #8
 8003402:	d106      	bne.n	8003412 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f005 fb23 	bl	8008a50 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2208      	movs	r2, #8
 8003410:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f003 fbec 	bl	8006bf4 <USB_ReadInterrupts>
 800341c:	4603      	mov	r3, r0
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	2b10      	cmp	r3, #16
 8003424:	d101      	bne.n	800342a <HAL_HCD_IRQHandler+0x14a>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <HAL_HCD_IRQHandler+0x14c>
 800342a:	2300      	movs	r3, #0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d012      	beq.n	8003456 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0210 	bic.w	r2, r2, #16
 800343e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f001 f8e0 	bl	8004606 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699a      	ldr	r2, [r3, #24]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0210 	orr.w	r2, r2, #16
 8003454:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f003 fbca 	bl	8006bf4 <USB_ReadInterrupts>
 8003460:	4603      	mov	r3, r0
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800346a:	d13a      	bne.n	80034e2 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f003 fee5 	bl	8007240 <USB_HC_ReadInterrupt>
 8003476:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	e025      	b.n	80034ca <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	fa22 f303 	lsr.w	r3, r2, r3
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d018      	beq.n	80034c4 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4413      	add	r3, r2
 800349a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a8:	d106      	bne.n	80034b8 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	4619      	mov	r1, r3
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f889 	bl	80035c8 <HCD_HC_IN_IRQHandler>
 80034b6:	e005      	b.n	80034c4 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	4619      	mov	r1, r3
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fca4 	bl	8003e0c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	3301      	adds	r3, #1
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d3d4      	bcc.n	800347e <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034dc:	615a      	str	r2, [r3, #20]
 80034de:	e000      	b.n	80034e2 <HAL_HCD_IRQHandler+0x202>
      return;
 80034e0:	bf00      	nop
    }
  }
}
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_HCD_Start+0x16>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e013      	b.n	8003526 <HAL_HCD_Start+0x3e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f003 faa9 	bl	8006a62 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2101      	movs	r1, #1
 8003516:	4618      	mov	r0, r3
 8003518:	f003 fbf1 	bl	8006cfe <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_HCD_Stop+0x16>
 8003540:	2302      	movs	r3, #2
 8003542:	e00d      	b.n	8003560 <HAL_HCD_Stop+0x32>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f003 ffdf 	bl	8007514 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f003 fb98 	bl	8006caa <USB_ResetPort>
 800357a:	4603      	mov	r3, r0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	212c      	movs	r1, #44	; 0x2c
 8003596:	fb01 f303 	mul.w	r3, r1, r3
 800359a:	4413      	add	r3, r2
 800359c:	3360      	adds	r3, #96	; 0x60
 800359e:	781b      	ldrb	r3, [r3, #0]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f003 fbd9 	bl	8006d70 <USB_GetHostSpeed>
 80035be:	4603      	mov	r3, r0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80035de:	78fb      	ldrb	r3, [r7, #3]
 80035e0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d119      	bne.n	800362c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003604:	461a      	mov	r2, r3
 8003606:	2304      	movs	r3, #4
 8003608:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	015a      	lsls	r2, r3, #5
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4413      	add	r3, r2
 8003612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	0151      	lsls	r1, r2, #5
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	440a      	add	r2, r1
 8003620:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003624:	f043 0302 	orr.w	r3, r3, #2
 8003628:	60d3      	str	r3, [r2, #12]
 800362a:	e101      	b.n	8003830 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4413      	add	r3, r2
 8003634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003642:	d12b      	bne.n	800369c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4413      	add	r3, r2
 800364c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003650:	461a      	mov	r2, r3
 8003652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003656:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	212c      	movs	r1, #44	; 0x2c
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	4413      	add	r3, r2
 8003664:	3361      	adds	r3, #97	; 0x61
 8003666:	2207      	movs	r2, #7
 8003668:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4413      	add	r3, r2
 8003672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	0151      	lsls	r1, r2, #5
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	440a      	add	r2, r1
 8003680:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003684:	f043 0302 	orr.w	r3, r3, #2
 8003688:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	4611      	mov	r1, r2
 8003694:	4618      	mov	r0, r3
 8003696:	f003 fde4 	bl	8007262 <USB_HC_Halt>
 800369a:	e0c9      	b.n	8003830 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	d109      	bne.n	80036c6 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036be:	461a      	mov	r2, r3
 80036c0:	2320      	movs	r3, #32
 80036c2:	6093      	str	r3, [r2, #8]
 80036c4:	e0b4      	b.n	8003830 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d133      	bne.n	8003744 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	0151      	lsls	r1, r2, #5
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	440a      	add	r2, r1
 80036f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036f6:	f043 0302 	orr.w	r3, r3, #2
 80036fa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	212c      	movs	r1, #44	; 0x2c
 8003702:	fb01 f303 	mul.w	r3, r1, r3
 8003706:	4413      	add	r3, r2
 8003708:	3361      	adds	r3, #97	; 0x61
 800370a:	2205      	movs	r2, #5
 800370c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	4413      	add	r3, r2
 8003716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371a:	461a      	mov	r2, r3
 800371c:	2310      	movs	r3, #16
 800371e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4413      	add	r3, r2
 8003728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372c:	461a      	mov	r2, r3
 800372e:	2308      	movs	r3, #8
 8003730:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f003 fd90 	bl	8007262 <USB_HC_Halt>
 8003742:	e075      	b.n	8003830 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4413      	add	r3, r2
 800374c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375a:	d134      	bne.n	80037c6 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	4413      	add	r3, r2
 8003764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	0151      	lsls	r1, r2, #5
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	440a      	add	r2, r1
 8003772:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003776:	f043 0302 	orr.w	r3, r3, #2
 800377a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	212c      	movs	r1, #44	; 0x2c
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	3361      	adds	r3, #97	; 0x61
 800378a:	2208      	movs	r2, #8
 800378c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4413      	add	r3, r2
 8003796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379a:	461a      	mov	r2, r3
 800379c:	2310      	movs	r3, #16
 800379e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ac:	461a      	mov	r2, r3
 80037ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037b2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	4611      	mov	r1, r2
 80037be:	4618      	mov	r0, r3
 80037c0:	f003 fd4f 	bl	8007262 <USB_HC_Halt>
 80037c4:	e034      	b.n	8003830 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d8:	2b80      	cmp	r3, #128	; 0x80
 80037da:	d129      	bne.n	8003830 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	0151      	lsls	r1, r2, #5
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	440a      	add	r2, r1
 80037f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037f6:	f043 0302 	orr.w	r3, r3, #2
 80037fa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	212c      	movs	r1, #44	; 0x2c
 8003802:	fb01 f303 	mul.w	r3, r1, r3
 8003806:	4413      	add	r3, r2
 8003808:	3361      	adds	r3, #97	; 0x61
 800380a:	2206      	movs	r2, #6
 800380c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	4611      	mov	r1, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f003 fd22 	bl	8007262 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4413      	add	r3, r2
 8003826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382a:	461a      	mov	r2, r3
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4413      	add	r3, r2
 8003838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003846:	d122      	bne.n	800388e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	4413      	add	r3, r2
 8003850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	0151      	lsls	r1, r2, #5
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	440a      	add	r2, r1
 800385e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003862:	f043 0302 	orr.w	r3, r3, #2
 8003866:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	4611      	mov	r1, r2
 8003872:	4618      	mov	r0, r3
 8003874:	f003 fcf5 	bl	8007262 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4413      	add	r3, r2
 8003880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003884:	461a      	mov	r2, r3
 8003886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800388a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800388c:	e2ba      	b.n	8003e04 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4413      	add	r3, r2
 8003896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	f040 811b 	bne.w	8003adc <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d019      	beq.n	80038e2 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	212c      	movs	r1, #44	; 0x2c
 80038b4:	fb01 f303 	mul.w	r3, r1, r3
 80038b8:	4413      	add	r3, r2
 80038ba:	3348      	adds	r3, #72	; 0x48
 80038bc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	0159      	lsls	r1, r3, #5
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	440b      	add	r3, r1
 80038c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80038d0:	1ad2      	subs	r2, r2, r3
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	202c      	movs	r0, #44	; 0x2c
 80038d8:	fb00 f303 	mul.w	r3, r0, r3
 80038dc:	440b      	add	r3, r1
 80038de:	3350      	adds	r3, #80	; 0x50
 80038e0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	212c      	movs	r1, #44	; 0x2c
 80038e8:	fb01 f303 	mul.w	r3, r1, r3
 80038ec:	4413      	add	r3, r2
 80038ee:	3361      	adds	r3, #97	; 0x61
 80038f0:	2201      	movs	r2, #1
 80038f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	212c      	movs	r1, #44	; 0x2c
 80038fa:	fb01 f303 	mul.w	r3, r1, r3
 80038fe:	4413      	add	r3, r2
 8003900:	335c      	adds	r3, #92	; 0x5c
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4413      	add	r3, r2
 800390e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003912:	461a      	mov	r2, r3
 8003914:	2301      	movs	r3, #1
 8003916:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	212c      	movs	r1, #44	; 0x2c
 800391e:	fb01 f303 	mul.w	r3, r1, r3
 8003922:	4413      	add	r3, r2
 8003924:	333f      	adds	r3, #63	; 0x3f
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d009      	beq.n	8003940 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	212c      	movs	r1, #44	; 0x2c
 8003932:	fb01 f303 	mul.w	r3, r1, r3
 8003936:	4413      	add	r3, r2
 8003938:	333f      	adds	r3, #63	; 0x3f
 800393a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800393c:	2b02      	cmp	r3, #2
 800393e:	d121      	bne.n	8003984 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4413      	add	r3, r2
 8003948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	0151      	lsls	r1, r2, #5
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	440a      	add	r2, r1
 8003956:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800395a:	f043 0302 	orr.w	r3, r3, #2
 800395e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	4611      	mov	r1, r2
 800396a:	4618      	mov	r0, r3
 800396c:	f003 fc79 	bl	8007262 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4413      	add	r3, r2
 8003978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397c:	461a      	mov	r2, r3
 800397e:	2310      	movs	r3, #16
 8003980:	6093      	str	r3, [r2, #8]
 8003982:	e066      	b.n	8003a52 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	212c      	movs	r1, #44	; 0x2c
 800398a:	fb01 f303 	mul.w	r3, r1, r3
 800398e:	4413      	add	r3, r2
 8003990:	333f      	adds	r3, #63	; 0x3f
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b03      	cmp	r3, #3
 8003996:	d127      	bne.n	80039e8 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	0151      	lsls	r1, r2, #5
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	440a      	add	r2, r1
 80039ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039b6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	212c      	movs	r1, #44	; 0x2c
 80039be:	fb01 f303 	mul.w	r3, r1, r3
 80039c2:	4413      	add	r3, r2
 80039c4:	3360      	adds	r3, #96	; 0x60
 80039c6:	2201      	movs	r2, #1
 80039c8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	b2d9      	uxtb	r1, r3
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	202c      	movs	r0, #44	; 0x2c
 80039d4:	fb00 f303 	mul.w	r3, r0, r3
 80039d8:	4413      	add	r3, r2
 80039da:	3360      	adds	r3, #96	; 0x60
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f005 f85f 	bl	8008aa4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80039e6:	e034      	b.n	8003a52 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	212c      	movs	r1, #44	; 0x2c
 80039ee:	fb01 f303 	mul.w	r3, r1, r3
 80039f2:	4413      	add	r3, r2
 80039f4:	333f      	adds	r3, #63	; 0x3f
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d12a      	bne.n	8003a52 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	212c      	movs	r1, #44	; 0x2c
 8003a02:	fb01 f303 	mul.w	r3, r1, r3
 8003a06:	4413      	add	r3, r2
 8003a08:	3360      	adds	r3, #96	; 0x60
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	212c      	movs	r1, #44	; 0x2c
 8003a14:	fb01 f303 	mul.w	r3, r1, r3
 8003a18:	4413      	add	r3, r2
 8003a1a:	3354      	adds	r3, #84	; 0x54
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	f083 0301 	eor.w	r3, r3, #1
 8003a22:	b2d8      	uxtb	r0, r3
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	212c      	movs	r1, #44	; 0x2c
 8003a2a:	fb01 f303 	mul.w	r3, r1, r3
 8003a2e:	4413      	add	r3, r2
 8003a30:	3354      	adds	r3, #84	; 0x54
 8003a32:	4602      	mov	r2, r0
 8003a34:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	b2d9      	uxtb	r1, r3
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	202c      	movs	r0, #44	; 0x2c
 8003a40:	fb00 f303 	mul.w	r3, r0, r3
 8003a44:	4413      	add	r3, r2
 8003a46:	3360      	adds	r3, #96	; 0x60
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f005 f829 	bl	8008aa4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d12b      	bne.n	8003ab2 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	212c      	movs	r1, #44	; 0x2c
 8003a60:	fb01 f303 	mul.w	r3, r1, r3
 8003a64:	4413      	add	r3, r2
 8003a66:	3348      	adds	r3, #72	; 0x48
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	202c      	movs	r0, #44	; 0x2c
 8003a70:	fb00 f202 	mul.w	r2, r0, r2
 8003a74:	440a      	add	r2, r1
 8003a76:	3240      	adds	r2, #64	; 0x40
 8003a78:	8812      	ldrh	r2, [r2, #0]
 8003a7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 81be 	beq.w	8003e04 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	212c      	movs	r1, #44	; 0x2c
 8003a8e:	fb01 f303 	mul.w	r3, r1, r3
 8003a92:	4413      	add	r3, r2
 8003a94:	3354      	adds	r3, #84	; 0x54
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	f083 0301 	eor.w	r3, r3, #1
 8003a9c:	b2d8      	uxtb	r0, r3
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	212c      	movs	r1, #44	; 0x2c
 8003aa4:	fb01 f303 	mul.w	r3, r1, r3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3354      	adds	r3, #84	; 0x54
 8003aac:	4602      	mov	r2, r0
 8003aae:	701a      	strb	r2, [r3, #0]
}
 8003ab0:	e1a8      	b.n	8003e04 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	212c      	movs	r1, #44	; 0x2c
 8003ab8:	fb01 f303 	mul.w	r3, r1, r3
 8003abc:	4413      	add	r3, r2
 8003abe:	3354      	adds	r3, #84	; 0x54
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	f083 0301 	eor.w	r3, r3, #1
 8003ac6:	b2d8      	uxtb	r0, r3
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	212c      	movs	r1, #44	; 0x2c
 8003ace:	fb01 f303 	mul.w	r3, r1, r3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3354      	adds	r3, #84	; 0x54
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	701a      	strb	r2, [r3, #0]
}
 8003ada:	e193      	b.n	8003e04 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	f040 8106 	bne.w	8003d00 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	0151      	lsls	r1, r2, #5
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	440a      	add	r2, r1
 8003b0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b0e:	f023 0302 	bic.w	r3, r3, #2
 8003b12:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	212c      	movs	r1, #44	; 0x2c
 8003b1a:	fb01 f303 	mul.w	r3, r1, r3
 8003b1e:	4413      	add	r3, r2
 8003b20:	3361      	adds	r3, #97	; 0x61
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d109      	bne.n	8003b3c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	212c      	movs	r1, #44	; 0x2c
 8003b2e:	fb01 f303 	mul.w	r3, r1, r3
 8003b32:	4413      	add	r3, r2
 8003b34:	3360      	adds	r3, #96	; 0x60
 8003b36:	2201      	movs	r2, #1
 8003b38:	701a      	strb	r2, [r3, #0]
 8003b3a:	e0c9      	b.n	8003cd0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	212c      	movs	r1, #44	; 0x2c
 8003b42:	fb01 f303 	mul.w	r3, r1, r3
 8003b46:	4413      	add	r3, r2
 8003b48:	3361      	adds	r3, #97	; 0x61
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b05      	cmp	r3, #5
 8003b4e:	d109      	bne.n	8003b64 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	212c      	movs	r1, #44	; 0x2c
 8003b56:	fb01 f303 	mul.w	r3, r1, r3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3360      	adds	r3, #96	; 0x60
 8003b5e:	2205      	movs	r2, #5
 8003b60:	701a      	strb	r2, [r3, #0]
 8003b62:	e0b5      	b.n	8003cd0 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	212c      	movs	r1, #44	; 0x2c
 8003b6a:	fb01 f303 	mul.w	r3, r1, r3
 8003b6e:	4413      	add	r3, r2
 8003b70:	3361      	adds	r3, #97	; 0x61
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b06      	cmp	r3, #6
 8003b76:	d009      	beq.n	8003b8c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	212c      	movs	r1, #44	; 0x2c
 8003b7e:	fb01 f303 	mul.w	r3, r1, r3
 8003b82:	4413      	add	r3, r2
 8003b84:	3361      	adds	r3, #97	; 0x61
 8003b86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d150      	bne.n	8003c2e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	212c      	movs	r1, #44	; 0x2c
 8003b92:	fb01 f303 	mul.w	r3, r1, r3
 8003b96:	4413      	add	r3, r2
 8003b98:	335c      	adds	r3, #92	; 0x5c
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	202c      	movs	r0, #44	; 0x2c
 8003ba4:	fb00 f303 	mul.w	r3, r0, r3
 8003ba8:	440b      	add	r3, r1
 8003baa:	335c      	adds	r3, #92	; 0x5c
 8003bac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	212c      	movs	r1, #44	; 0x2c
 8003bb4:	fb01 f303 	mul.w	r3, r1, r3
 8003bb8:	4413      	add	r3, r2
 8003bba:	335c      	adds	r3, #92	; 0x5c
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d912      	bls.n	8003be8 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	212c      	movs	r1, #44	; 0x2c
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	4413      	add	r3, r2
 8003bce:	335c      	adds	r3, #92	; 0x5c
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	212c      	movs	r1, #44	; 0x2c
 8003bda:	fb01 f303 	mul.w	r3, r1, r3
 8003bde:	4413      	add	r3, r2
 8003be0:	3360      	adds	r3, #96	; 0x60
 8003be2:	2204      	movs	r2, #4
 8003be4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003be6:	e073      	b.n	8003cd0 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	212c      	movs	r1, #44	; 0x2c
 8003bee:	fb01 f303 	mul.w	r3, r1, r3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3360      	adds	r3, #96	; 0x60
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c10:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c18:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c26:	461a      	mov	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c2c:	e050      	b.n	8003cd0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	212c      	movs	r1, #44	; 0x2c
 8003c34:	fb01 f303 	mul.w	r3, r1, r3
 8003c38:	4413      	add	r3, r2
 8003c3a:	3361      	adds	r3, #97	; 0x61
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d122      	bne.n	8003c88 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	212c      	movs	r1, #44	; 0x2c
 8003c48:	fb01 f303 	mul.w	r3, r1, r3
 8003c4c:	4413      	add	r3, r2
 8003c4e:	3360      	adds	r3, #96	; 0x60
 8003c50:	2202      	movs	r2, #2
 8003c52:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c6a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c72:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c80:	461a      	mov	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e023      	b.n	8003cd0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	212c      	movs	r1, #44	; 0x2c
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	3361      	adds	r3, #97	; 0x61
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b07      	cmp	r3, #7
 8003c9a:	d119      	bne.n	8003cd0 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	212c      	movs	r1, #44	; 0x2c
 8003ca2:	fb01 f303 	mul.w	r3, r1, r3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	335c      	adds	r3, #92	; 0x5c
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	202c      	movs	r0, #44	; 0x2c
 8003cb4:	fb00 f303 	mul.w	r3, r0, r3
 8003cb8:	440b      	add	r3, r1
 8003cba:	335c      	adds	r3, #92	; 0x5c
 8003cbc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	212c      	movs	r1, #44	; 0x2c
 8003cc4:	fb01 f303 	mul.w	r3, r1, r3
 8003cc8:	4413      	add	r3, r2
 8003cca:	3360      	adds	r3, #96	; 0x60
 8003ccc:	2204      	movs	r2, #4
 8003cce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cdc:	461a      	mov	r2, r3
 8003cde:	2302      	movs	r3, #2
 8003ce0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	b2d9      	uxtb	r1, r3
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	202c      	movs	r0, #44	; 0x2c
 8003cec:	fb00 f303 	mul.w	r3, r0, r3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3360      	adds	r3, #96	; 0x60
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f004 fed3 	bl	8008aa4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003cfe:	e081      	b.n	8003e04 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	2b10      	cmp	r3, #16
 8003d14:	d176      	bne.n	8003e04 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	212c      	movs	r1, #44	; 0x2c
 8003d1c:	fb01 f303 	mul.w	r3, r1, r3
 8003d20:	4413      	add	r3, r2
 8003d22:	333f      	adds	r3, #63	; 0x3f
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d121      	bne.n	8003d6e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	212c      	movs	r1, #44	; 0x2c
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	4413      	add	r3, r2
 8003d36:	335c      	adds	r3, #92	; 0x5c
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	0151      	lsls	r1, r2, #5
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	440a      	add	r2, r1
 8003d52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d56:	f043 0302 	orr.w	r3, r3, #2
 8003d5a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	4611      	mov	r1, r2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f003 fa7b 	bl	8007262 <USB_HC_Halt>
 8003d6c:	e041      	b.n	8003df2 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	212c      	movs	r1, #44	; 0x2c
 8003d74:	fb01 f303 	mul.w	r3, r1, r3
 8003d78:	4413      	add	r3, r2
 8003d7a:	333f      	adds	r3, #63	; 0x3f
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d009      	beq.n	8003d96 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	212c      	movs	r1, #44	; 0x2c
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	333f      	adds	r3, #63	; 0x3f
 8003d90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d12d      	bne.n	8003df2 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	212c      	movs	r1, #44	; 0x2c
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	4413      	add	r3, r2
 8003da2:	335c      	adds	r3, #92	; 0x5c
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d120      	bne.n	8003df2 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	212c      	movs	r1, #44	; 0x2c
 8003db6:	fb01 f303 	mul.w	r3, r1, r3
 8003dba:	4413      	add	r3, r2
 8003dbc:	3361      	adds	r3, #97	; 0x61
 8003dbe:	2203      	movs	r2, #3
 8003dc0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	0151      	lsls	r1, r2, #5
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	440a      	add	r2, r1
 8003dd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ddc:	f043 0302 	orr.w	r3, r3, #2
 8003de0:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	4611      	mov	r1, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f003 fa38 	bl	8007262 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfe:	461a      	mov	r2, r3
 8003e00:	2310      	movs	r3, #16
 8003e02:	6093      	str	r3, [r2, #8]
}
 8003e04:	bf00      	nop
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	460b      	mov	r3, r1
 8003e16:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003e22:	78fb      	ldrb	r3, [r7, #3]
 8003e24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d119      	bne.n	8003e70 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e48:	461a      	mov	r2, r3
 8003e4a:	2304      	movs	r3, #4
 8003e4c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	0151      	lsls	r1, r2, #5
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	440a      	add	r2, r1
 8003e64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e68:	f043 0302 	orr.w	r3, r3, #2
 8003e6c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003e6e:	e3c6      	b.n	80045fe <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d13e      	bne.n	8003f04 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e92:	461a      	mov	r2, r3
 8003e94:	2320      	movs	r3, #32
 8003e96:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	212c      	movs	r1, #44	; 0x2c
 8003e9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	333d      	adds	r3, #61	; 0x3d
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	f040 83a8 	bne.w	80045fe <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	212c      	movs	r1, #44	; 0x2c
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	333d      	adds	r3, #61	; 0x3d
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	212c      	movs	r1, #44	; 0x2c
 8003ec6:	fb01 f303 	mul.w	r3, r1, r3
 8003eca:	4413      	add	r3, r2
 8003ecc:	3360      	adds	r3, #96	; 0x60
 8003ece:	2202      	movs	r2, #2
 8003ed0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	0151      	lsls	r1, r2, #5
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	440a      	add	r2, r1
 8003ee8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003eec:	f043 0302 	orr.w	r3, r3, #2
 8003ef0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	4611      	mov	r1, r2
 8003efc:	4618      	mov	r0, r3
 8003efe:	f003 f9b0 	bl	8007262 <USB_HC_Halt>
}
 8003f02:	e37c      	b.n	80045fe <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f1a:	d122      	bne.n	8003f62 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	0151      	lsls	r1, r2, #5
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	440a      	add	r2, r1
 8003f32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f36:	f043 0302 	orr.w	r3, r3, #2
 8003f3a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	4611      	mov	r1, r2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f003 f98b 	bl	8007262 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f5e:	6093      	str	r3, [r2, #8]
}
 8003f60:	e34d      	b.n	80045fe <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d150      	bne.n	800401a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	212c      	movs	r1, #44	; 0x2c
 8003f7e:	fb01 f303 	mul.w	r3, r1, r3
 8003f82:	4413      	add	r3, r2
 8003f84:	335c      	adds	r3, #92	; 0x5c
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9c:	2b40      	cmp	r3, #64	; 0x40
 8003f9e:	d111      	bne.n	8003fc4 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	212c      	movs	r1, #44	; 0x2c
 8003fa6:	fb01 f303 	mul.w	r3, r1, r3
 8003faa:	4413      	add	r3, r2
 8003fac:	333d      	adds	r3, #61	; 0x3d
 8003fae:	2201      	movs	r2, #1
 8003fb0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	2340      	movs	r3, #64	; 0x40
 8003fc2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	0151      	lsls	r1, r2, #5
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	440a      	add	r2, r1
 8003fda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fde:	f043 0302 	orr.w	r3, r3, #2
 8003fe2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	4611      	mov	r1, r2
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f003 f937 	bl	8007262 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004000:	461a      	mov	r2, r3
 8004002:	2301      	movs	r3, #1
 8004004:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	212c      	movs	r1, #44	; 0x2c
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	4413      	add	r3, r2
 8004012:	3361      	adds	r3, #97	; 0x61
 8004014:	2201      	movs	r2, #1
 8004016:	701a      	strb	r2, [r3, #0]
}
 8004018:	e2f1      	b.n	80045fe <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	4413      	add	r3, r2
 8004022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402c:	2b40      	cmp	r3, #64	; 0x40
 800402e:	d13c      	bne.n	80040aa <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	212c      	movs	r1, #44	; 0x2c
 8004036:	fb01 f303 	mul.w	r3, r1, r3
 800403a:	4413      	add	r3, r2
 800403c:	3361      	adds	r3, #97	; 0x61
 800403e:	2204      	movs	r2, #4
 8004040:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	212c      	movs	r1, #44	; 0x2c
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	4413      	add	r3, r2
 800404e:	333d      	adds	r3, #61	; 0x3d
 8004050:	2201      	movs	r2, #1
 8004052:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	212c      	movs	r1, #44	; 0x2c
 800405a:	fb01 f303 	mul.w	r3, r1, r3
 800405e:	4413      	add	r3, r2
 8004060:	335c      	adds	r3, #92	; 0x5c
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	4413      	add	r3, r2
 800406e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	0151      	lsls	r1, r2, #5
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	440a      	add	r2, r1
 800407c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004080:	f043 0302 	orr.w	r3, r3, #2
 8004084:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	4611      	mov	r1, r2
 8004090:	4618      	mov	r0, r3
 8004092:	f003 f8e6 	bl	8007262 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	4413      	add	r3, r2
 800409e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a2:	461a      	mov	r2, r3
 80040a4:	2340      	movs	r3, #64	; 0x40
 80040a6:	6093      	str	r3, [r2, #8]
}
 80040a8:	e2a9      	b.n	80045fe <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d12a      	bne.n	8004116 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040cc:	461a      	mov	r2, r3
 80040ce:	2308      	movs	r3, #8
 80040d0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	0151      	lsls	r1, r2, #5
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	440a      	add	r2, r1
 80040e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040ec:	f043 0302 	orr.w	r3, r3, #2
 80040f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	4611      	mov	r1, r2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f003 f8b0 	bl	8007262 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	212c      	movs	r1, #44	; 0x2c
 8004108:	fb01 f303 	mul.w	r3, r1, r3
 800410c:	4413      	add	r3, r2
 800410e:	3361      	adds	r3, #97	; 0x61
 8004110:	2205      	movs	r2, #5
 8004112:	701a      	strb	r2, [r3, #0]
}
 8004114:	e273      	b.n	80045fe <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	4413      	add	r3, r2
 800411e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b10      	cmp	r3, #16
 800412a:	d150      	bne.n	80041ce <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	212c      	movs	r1, #44	; 0x2c
 8004132:	fb01 f303 	mul.w	r3, r1, r3
 8004136:	4413      	add	r3, r2
 8004138:	335c      	adds	r3, #92	; 0x5c
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	212c      	movs	r1, #44	; 0x2c
 8004144:	fb01 f303 	mul.w	r3, r1, r3
 8004148:	4413      	add	r3, r2
 800414a:	3361      	adds	r3, #97	; 0x61
 800414c:	2203      	movs	r2, #3
 800414e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	212c      	movs	r1, #44	; 0x2c
 8004156:	fb01 f303 	mul.w	r3, r1, r3
 800415a:	4413      	add	r3, r2
 800415c:	333d      	adds	r3, #61	; 0x3d
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d112      	bne.n	800418a <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	212c      	movs	r1, #44	; 0x2c
 800416a:	fb01 f303 	mul.w	r3, r1, r3
 800416e:	4413      	add	r3, r2
 8004170:	333c      	adds	r3, #60	; 0x3c
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d108      	bne.n	800418a <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	212c      	movs	r1, #44	; 0x2c
 800417e:	fb01 f303 	mul.w	r3, r1, r3
 8004182:	4413      	add	r3, r2
 8004184:	333d      	adds	r3, #61	; 0x3d
 8004186:	2201      	movs	r2, #1
 8004188:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	4413      	add	r3, r2
 8004192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	0151      	lsls	r1, r2, #5
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	440a      	add	r2, r1
 80041a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041a4:	f043 0302 	orr.w	r3, r3, #2
 80041a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	4611      	mov	r1, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f003 f854 	bl	8007262 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c6:	461a      	mov	r2, r3
 80041c8:	2310      	movs	r3, #16
 80041ca:	6093      	str	r3, [r2, #8]
}
 80041cc:	e217      	b.n	80045fe <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e0:	2b80      	cmp	r3, #128	; 0x80
 80041e2:	d174      	bne.n	80042ce <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d121      	bne.n	8004230 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	212c      	movs	r1, #44	; 0x2c
 80041f2:	fb01 f303 	mul.w	r3, r1, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	3361      	adds	r3, #97	; 0x61
 80041fa:	2206      	movs	r2, #6
 80041fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	4413      	add	r3, r2
 8004206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	0151      	lsls	r1, r2, #5
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	440a      	add	r2, r1
 8004214:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004218:	f043 0302 	orr.w	r3, r3, #2
 800421c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	4611      	mov	r1, r2
 8004228:	4618      	mov	r0, r3
 800422a:	f003 f81a 	bl	8007262 <USB_HC_Halt>
 800422e:	e044      	b.n	80042ba <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	212c      	movs	r1, #44	; 0x2c
 8004236:	fb01 f303 	mul.w	r3, r1, r3
 800423a:	4413      	add	r3, r2
 800423c:	335c      	adds	r3, #92	; 0x5c
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	202c      	movs	r0, #44	; 0x2c
 8004248:	fb00 f303 	mul.w	r3, r0, r3
 800424c:	440b      	add	r3, r1
 800424e:	335c      	adds	r3, #92	; 0x5c
 8004250:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	212c      	movs	r1, #44	; 0x2c
 8004258:	fb01 f303 	mul.w	r3, r1, r3
 800425c:	4413      	add	r3, r2
 800425e:	335c      	adds	r3, #92	; 0x5c
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d920      	bls.n	80042a8 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	212c      	movs	r1, #44	; 0x2c
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	4413      	add	r3, r2
 8004272:	335c      	adds	r3, #92	; 0x5c
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	212c      	movs	r1, #44	; 0x2c
 800427e:	fb01 f303 	mul.w	r3, r1, r3
 8004282:	4413      	add	r3, r2
 8004284:	3360      	adds	r3, #96	; 0x60
 8004286:	2204      	movs	r2, #4
 8004288:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	b2d9      	uxtb	r1, r3
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	202c      	movs	r0, #44	; 0x2c
 8004294:	fb00 f303 	mul.w	r3, r0, r3
 8004298:	4413      	add	r3, r2
 800429a:	3360      	adds	r3, #96	; 0x60
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f004 fbff 	bl	8008aa4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80042a6:	e008      	b.n	80042ba <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	212c      	movs	r1, #44	; 0x2c
 80042ae:	fb01 f303 	mul.w	r3, r1, r3
 80042b2:	4413      	add	r3, r2
 80042b4:	3360      	adds	r3, #96	; 0x60
 80042b6:	2202      	movs	r2, #2
 80042b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c6:	461a      	mov	r2, r3
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	6093      	str	r3, [r2, #8]
}
 80042cc:	e197      	b.n	80045fe <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e4:	d134      	bne.n	8004350 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	0151      	lsls	r1, r2, #5
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	440a      	add	r2, r1
 80042fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004300:	f043 0302 	orr.w	r3, r3, #2
 8004304:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	4611      	mov	r1, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f002 ffa6 	bl	8007262 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	4413      	add	r3, r2
 800431e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004322:	461a      	mov	r2, r3
 8004324:	2310      	movs	r3, #16
 8004326:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	4413      	add	r3, r2
 8004330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004334:	461a      	mov	r2, r3
 8004336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800433a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	212c      	movs	r1, #44	; 0x2c
 8004342:	fb01 f303 	mul.w	r3, r1, r3
 8004346:	4413      	add	r3, r2
 8004348:	3361      	adds	r3, #97	; 0x61
 800434a:	2208      	movs	r2, #8
 800434c:	701a      	strb	r2, [r3, #0]
}
 800434e:	e156      	b.n	80045fe <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	4413      	add	r3, r2
 8004358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b02      	cmp	r3, #2
 8004364:	f040 814b 	bne.w	80045fe <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	4413      	add	r3, r2
 8004370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	0151      	lsls	r1, r2, #5
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	440a      	add	r2, r1
 800437e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004382:	f023 0302 	bic.w	r3, r3, #2
 8004386:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	212c      	movs	r1, #44	; 0x2c
 800438e:	fb01 f303 	mul.w	r3, r1, r3
 8004392:	4413      	add	r3, r2
 8004394:	3361      	adds	r3, #97	; 0x61
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d179      	bne.n	8004490 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	212c      	movs	r1, #44	; 0x2c
 80043a2:	fb01 f303 	mul.w	r3, r1, r3
 80043a6:	4413      	add	r3, r2
 80043a8:	3360      	adds	r3, #96	; 0x60
 80043aa:	2201      	movs	r2, #1
 80043ac:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	212c      	movs	r1, #44	; 0x2c
 80043b4:	fb01 f303 	mul.w	r3, r1, r3
 80043b8:	4413      	add	r3, r2
 80043ba:	333f      	adds	r3, #63	; 0x3f
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d00a      	beq.n	80043d8 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	212c      	movs	r1, #44	; 0x2c
 80043c8:	fb01 f303 	mul.w	r3, r1, r3
 80043cc:	4413      	add	r3, r2
 80043ce:	333f      	adds	r3, #63	; 0x3f
 80043d0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	f040 80fc 	bne.w	80045d0 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d142      	bne.n	8004466 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	212c      	movs	r1, #44	; 0x2c
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	4413      	add	r3, r2
 80043ec:	334c      	adds	r3, #76	; 0x4c
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 80ed 	beq.w	80045d0 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	212c      	movs	r1, #44	; 0x2c
 80043fc:	fb01 f303 	mul.w	r3, r1, r3
 8004400:	4413      	add	r3, r2
 8004402:	334c      	adds	r3, #76	; 0x4c
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	202c      	movs	r0, #44	; 0x2c
 800440c:	fb00 f202 	mul.w	r2, r0, r2
 8004410:	440a      	add	r2, r1
 8004412:	3240      	adds	r2, #64	; 0x40
 8004414:	8812      	ldrh	r2, [r2, #0]
 8004416:	4413      	add	r3, r2
 8004418:	3b01      	subs	r3, #1
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	202c      	movs	r0, #44	; 0x2c
 8004420:	fb00 f202 	mul.w	r2, r0, r2
 8004424:	440a      	add	r2, r1
 8004426:	3240      	adds	r2, #64	; 0x40
 8004428:	8812      	ldrh	r2, [r2, #0]
 800442a:	fbb3 f3f2 	udiv	r3, r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 80ca 	beq.w	80045d0 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	212c      	movs	r1, #44	; 0x2c
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	4413      	add	r3, r2
 8004448:	3355      	adds	r3, #85	; 0x55
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	f083 0301 	eor.w	r3, r3, #1
 8004450:	b2d8      	uxtb	r0, r3
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	212c      	movs	r1, #44	; 0x2c
 8004458:	fb01 f303 	mul.w	r3, r1, r3
 800445c:	4413      	add	r3, r2
 800445e:	3355      	adds	r3, #85	; 0x55
 8004460:	4602      	mov	r2, r0
 8004462:	701a      	strb	r2, [r3, #0]
 8004464:	e0b4      	b.n	80045d0 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	212c      	movs	r1, #44	; 0x2c
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	4413      	add	r3, r2
 8004472:	3355      	adds	r3, #85	; 0x55
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	f083 0301 	eor.w	r3, r3, #1
 800447a:	b2d8      	uxtb	r0, r3
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	212c      	movs	r1, #44	; 0x2c
 8004482:	fb01 f303 	mul.w	r3, r1, r3
 8004486:	4413      	add	r3, r2
 8004488:	3355      	adds	r3, #85	; 0x55
 800448a:	4602      	mov	r2, r0
 800448c:	701a      	strb	r2, [r3, #0]
 800448e:	e09f      	b.n	80045d0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	212c      	movs	r1, #44	; 0x2c
 8004496:	fb01 f303 	mul.w	r3, r1, r3
 800449a:	4413      	add	r3, r2
 800449c:	3361      	adds	r3, #97	; 0x61
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d109      	bne.n	80044b8 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	212c      	movs	r1, #44	; 0x2c
 80044aa:	fb01 f303 	mul.w	r3, r1, r3
 80044ae:	4413      	add	r3, r2
 80044b0:	3360      	adds	r3, #96	; 0x60
 80044b2:	2202      	movs	r2, #2
 80044b4:	701a      	strb	r2, [r3, #0]
 80044b6:	e08b      	b.n	80045d0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	212c      	movs	r1, #44	; 0x2c
 80044be:	fb01 f303 	mul.w	r3, r1, r3
 80044c2:	4413      	add	r3, r2
 80044c4:	3361      	adds	r3, #97	; 0x61
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	d109      	bne.n	80044e0 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	212c      	movs	r1, #44	; 0x2c
 80044d2:	fb01 f303 	mul.w	r3, r1, r3
 80044d6:	4413      	add	r3, r2
 80044d8:	3360      	adds	r3, #96	; 0x60
 80044da:	2202      	movs	r2, #2
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	e077      	b.n	80045d0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	212c      	movs	r1, #44	; 0x2c
 80044e6:	fb01 f303 	mul.w	r3, r1, r3
 80044ea:	4413      	add	r3, r2
 80044ec:	3361      	adds	r3, #97	; 0x61
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b05      	cmp	r3, #5
 80044f2:	d109      	bne.n	8004508 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	212c      	movs	r1, #44	; 0x2c
 80044fa:	fb01 f303 	mul.w	r3, r1, r3
 80044fe:	4413      	add	r3, r2
 8004500:	3360      	adds	r3, #96	; 0x60
 8004502:	2205      	movs	r2, #5
 8004504:	701a      	strb	r2, [r3, #0]
 8004506:	e063      	b.n	80045d0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	212c      	movs	r1, #44	; 0x2c
 800450e:	fb01 f303 	mul.w	r3, r1, r3
 8004512:	4413      	add	r3, r2
 8004514:	3361      	adds	r3, #97	; 0x61
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b06      	cmp	r3, #6
 800451a:	d009      	beq.n	8004530 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	212c      	movs	r1, #44	; 0x2c
 8004522:	fb01 f303 	mul.w	r3, r1, r3
 8004526:	4413      	add	r3, r2
 8004528:	3361      	adds	r3, #97	; 0x61
 800452a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800452c:	2b08      	cmp	r3, #8
 800452e:	d14f      	bne.n	80045d0 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	212c      	movs	r1, #44	; 0x2c
 8004536:	fb01 f303 	mul.w	r3, r1, r3
 800453a:	4413      	add	r3, r2
 800453c:	335c      	adds	r3, #92	; 0x5c
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	202c      	movs	r0, #44	; 0x2c
 8004548:	fb00 f303 	mul.w	r3, r0, r3
 800454c:	440b      	add	r3, r1
 800454e:	335c      	adds	r3, #92	; 0x5c
 8004550:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	212c      	movs	r1, #44	; 0x2c
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	4413      	add	r3, r2
 800455e:	335c      	adds	r3, #92	; 0x5c
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d912      	bls.n	800458c <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	212c      	movs	r1, #44	; 0x2c
 800456c:	fb01 f303 	mul.w	r3, r1, r3
 8004570:	4413      	add	r3, r2
 8004572:	335c      	adds	r3, #92	; 0x5c
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	212c      	movs	r1, #44	; 0x2c
 800457e:	fb01 f303 	mul.w	r3, r1, r3
 8004582:	4413      	add	r3, r2
 8004584:	3360      	adds	r3, #96	; 0x60
 8004586:	2204      	movs	r2, #4
 8004588:	701a      	strb	r2, [r3, #0]
 800458a:	e021      	b.n	80045d0 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	212c      	movs	r1, #44	; 0x2c
 8004592:	fb01 f303 	mul.w	r3, r1, r3
 8004596:	4413      	add	r3, r2
 8004598:	3360      	adds	r3, #96	; 0x60
 800459a:	2202      	movs	r2, #2
 800459c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045b4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045bc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ca:	461a      	mov	r2, r3
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045dc:	461a      	mov	r2, r3
 80045de:	2302      	movs	r3, #2
 80045e0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	b2d9      	uxtb	r1, r3
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	202c      	movs	r0, #44	; 0x2c
 80045ec:	fb00 f303 	mul.w	r3, r0, r3
 80045f0:	4413      	add	r3, r2
 80045f2:	3360      	adds	r3, #96	; 0x60
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f004 fa53 	bl	8008aa4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80045fe:	bf00      	nop
 8004600:	3720      	adds	r7, #32
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b08a      	sub	sp, #40	; 0x28
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	0c5b      	lsrs	r3, r3, #17
 800462c:	f003 030f 	and.w	r3, r3, #15
 8004630:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	091b      	lsrs	r3, r3, #4
 8004636:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800463a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d004      	beq.n	800464c <HCD_RXQLVL_IRQHandler+0x46>
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b05      	cmp	r3, #5
 8004646:	f000 80a9 	beq.w	800479c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800464a:	e0aa      	b.n	80047a2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 80a6 	beq.w	80047a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	212c      	movs	r1, #44	; 0x2c
 800465a:	fb01 f303 	mul.w	r3, r1, r3
 800465e:	4413      	add	r3, r2
 8004660:	3344      	adds	r3, #68	; 0x44
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 809b 	beq.w	80047a0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	212c      	movs	r1, #44	; 0x2c
 8004670:	fb01 f303 	mul.w	r3, r1, r3
 8004674:	4413      	add	r3, r2
 8004676:	3350      	adds	r3, #80	; 0x50
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	441a      	add	r2, r3
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	202c      	movs	r0, #44	; 0x2c
 8004684:	fb00 f303 	mul.w	r3, r0, r3
 8004688:	440b      	add	r3, r1
 800468a:	334c      	adds	r3, #76	; 0x4c
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d87a      	bhi.n	8004788 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	212c      	movs	r1, #44	; 0x2c
 800469c:	fb01 f303 	mul.w	r3, r1, r3
 80046a0:	4413      	add	r3, r2
 80046a2:	3344      	adds	r3, #68	; 0x44
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	b292      	uxth	r2, r2
 80046aa:	4619      	mov	r1, r3
 80046ac:	f002 fa79 	bl	8006ba2 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	212c      	movs	r1, #44	; 0x2c
 80046b6:	fb01 f303 	mul.w	r3, r1, r3
 80046ba:	4413      	add	r3, r2
 80046bc:	3344      	adds	r3, #68	; 0x44
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	441a      	add	r2, r3
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	202c      	movs	r0, #44	; 0x2c
 80046ca:	fb00 f303 	mul.w	r3, r0, r3
 80046ce:	440b      	add	r3, r1
 80046d0:	3344      	adds	r3, #68	; 0x44
 80046d2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	212c      	movs	r1, #44	; 0x2c
 80046da:	fb01 f303 	mul.w	r3, r1, r3
 80046de:	4413      	add	r3, r2
 80046e0:	3350      	adds	r3, #80	; 0x50
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	441a      	add	r2, r3
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	202c      	movs	r0, #44	; 0x2c
 80046ee:	fb00 f303 	mul.w	r3, r0, r3
 80046f2:	440b      	add	r3, r1
 80046f4:	3350      	adds	r3, #80	; 0x50
 80046f6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	0cdb      	lsrs	r3, r3, #19
 8004708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800470c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	212c      	movs	r1, #44	; 0x2c
 8004714:	fb01 f303 	mul.w	r3, r1, r3
 8004718:	4413      	add	r3, r2
 800471a:	3340      	adds	r3, #64	; 0x40
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	4293      	cmp	r3, r2
 8004724:	d13c      	bne.n	80047a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d039      	beq.n	80047a0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	4413      	add	r3, r2
 8004734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004742:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800474a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	4413      	add	r3, r2
 8004754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004758:	461a      	mov	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	212c      	movs	r1, #44	; 0x2c
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	4413      	add	r3, r2
 800476a:	3354      	adds	r3, #84	; 0x54
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	f083 0301 	eor.w	r3, r3, #1
 8004772:	b2d8      	uxtb	r0, r3
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	212c      	movs	r1, #44	; 0x2c
 800477a:	fb01 f303 	mul.w	r3, r1, r3
 800477e:	4413      	add	r3, r2
 8004780:	3354      	adds	r3, #84	; 0x54
 8004782:	4602      	mov	r2, r0
 8004784:	701a      	strb	r2, [r3, #0]
      break;
 8004786:	e00b      	b.n	80047a0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	212c      	movs	r1, #44	; 0x2c
 800478e:	fb01 f303 	mul.w	r3, r1, r3
 8004792:	4413      	add	r3, r2
 8004794:	3360      	adds	r3, #96	; 0x60
 8004796:	2204      	movs	r2, #4
 8004798:	701a      	strb	r2, [r3, #0]
      break;
 800479a:	e001      	b.n	80047a0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800479c:	bf00      	nop
 800479e:	e000      	b.n	80047a2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80047a0:	bf00      	nop
  }
}
 80047a2:	bf00      	nop
 80047a4:	3728      	adds	r7, #40	; 0x28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b086      	sub	sp, #24
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80047d6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d10b      	bne.n	80047fa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d102      	bne.n	80047f2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f004 f93d 	bl	8008a6c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f043 0302 	orr.w	r3, r3, #2
 80047f8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b08      	cmp	r3, #8
 8004802:	d132      	bne.n	800486a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f043 0308 	orr.w	r3, r3, #8
 800480a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b04      	cmp	r3, #4
 8004814:	d126      	bne.n	8004864 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	2b02      	cmp	r3, #2
 800481c:	d113      	bne.n	8004846 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004824:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004828:	d106      	bne.n	8004838 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2102      	movs	r1, #2
 8004830:	4618      	mov	r0, r3
 8004832:	f002 fa00 	bl	8006c36 <USB_InitFSLSPClkSel>
 8004836:	e011      	b.n	800485c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2101      	movs	r1, #1
 800483e:	4618      	mov	r0, r3
 8004840:	f002 f9f9 	bl	8006c36 <USB_InitFSLSPClkSel>
 8004844:	e00a      	b.n	800485c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d106      	bne.n	800485c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004854:	461a      	mov	r2, r3
 8004856:	f64e 2360 	movw	r3, #60000	; 0xea60
 800485a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f004 f92f 	bl	8008ac0 <HAL_HCD_PortEnabled_Callback>
 8004862:	e002      	b.n	800486a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f004 f939 	bl	8008adc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f003 0320 	and.w	r3, r3, #32
 8004870:	2b20      	cmp	r3, #32
 8004872:	d103      	bne.n	800487c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f043 0320 	orr.w	r3, r3, #32
 800487a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004882:	461a      	mov	r2, r3
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	6013      	str	r3, [r2, #0]
}
 8004888:	bf00      	nop
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d023      	beq.n	80048fa <HAL_LTDC_IRQHandler+0x6a>
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01e      	beq.n	80048fa <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0204 	bic.w	r2, r2, #4
 80048ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2204      	movs	r2, #4
 80048d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048da:	f043 0201 	orr.w	r2, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2204      	movs	r2, #4
 80048e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f86f 	bl	80049d8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d023      	beq.n	800494c <HAL_LTDC_IRQHandler+0xbc>
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d01e      	beq.n	800494c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0202 	bic.w	r2, r2, #2
 800491c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2202      	movs	r2, #2
 8004924:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800492c:	f043 0202 	orr.w	r2, r3, #2
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2204      	movs	r2, #4
 800493a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f846 	bl	80049d8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d01b      	beq.n	800498e <HAL_LTDC_IRQHandler+0xfe>
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d016      	beq.n	800498e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0201 	bic.w	r2, r2, #1
 800496e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2201      	movs	r2, #1
 8004976:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f82f 	bl	80049ec <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01b      	beq.n	80049d0 <HAL_LTDC_IRQHandler+0x140>
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d016      	beq.n	80049d0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0208 	bic.w	r2, r2, #8
 80049b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2208      	movs	r2, #8
 80049b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f818 	bl	8004a00 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a18:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a04      	ldr	r2, [pc, #16]	; (8004a30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a22:	6013      	str	r3, [r2, #0]
}
 8004a24:	bf00      	nop
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40007000 	.word	0x40007000

08004a34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a3e:	4b23      	ldr	r3, [pc, #140]	; (8004acc <HAL_PWREx_EnableOverDrive+0x98>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	4a22      	ldr	r2, [pc, #136]	; (8004acc <HAL_PWREx_EnableOverDrive+0x98>)
 8004a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a48:	6413      	str	r3, [r2, #64]	; 0x40
 8004a4a:	4b20      	ldr	r3, [pc, #128]	; (8004acc <HAL_PWREx_EnableOverDrive+0x98>)
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a56:	4b1e      	ldr	r3, [pc, #120]	; (8004ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1d      	ldr	r2, [pc, #116]	; (8004ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a60:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a62:	f7fd fae1 	bl	8002028 <HAL_GetTick>
 8004a66:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a68:	e009      	b.n	8004a7e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a6a:	f7fd fadd 	bl	8002028 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a78:	d901      	bls.n	8004a7e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e022      	b.n	8004ac4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a7e:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a8a:	d1ee      	bne.n	8004a6a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a8c:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a0f      	ldr	r2, [pc, #60]	; (8004ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a96:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a98:	f7fd fac6 	bl	8002028 <HAL_GetTick>
 8004a9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a9e:	e009      	b.n	8004ab4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004aa0:	f7fd fac2 	bl	8002028 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aae:	d901      	bls.n	8004ab4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e007      	b.n	8004ac4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ab4:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ac0:	d1ee      	bne.n	8004aa0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	40007000 	.word	0x40007000

08004ad4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004adc:	2300      	movs	r3, #0
 8004ade:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e291      	b.n	800500e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 8087 	beq.w	8004c06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004af8:	4b96      	ldr	r3, [pc, #600]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 030c 	and.w	r3, r3, #12
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d00c      	beq.n	8004b1e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b04:	4b93      	ldr	r3, [pc, #588]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 030c 	and.w	r3, r3, #12
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d112      	bne.n	8004b36 <HAL_RCC_OscConfig+0x62>
 8004b10:	4b90      	ldr	r3, [pc, #576]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b1c:	d10b      	bne.n	8004b36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b1e:	4b8d      	ldr	r3, [pc, #564]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d06c      	beq.n	8004c04 <HAL_RCC_OscConfig+0x130>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d168      	bne.n	8004c04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e26b      	b.n	800500e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b3e:	d106      	bne.n	8004b4e <HAL_RCC_OscConfig+0x7a>
 8004b40:	4b84      	ldr	r3, [pc, #528]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a83      	ldr	r2, [pc, #524]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	e02e      	b.n	8004bac <HAL_RCC_OscConfig+0xd8>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10c      	bne.n	8004b70 <HAL_RCC_OscConfig+0x9c>
 8004b56:	4b7f      	ldr	r3, [pc, #508]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a7e      	ldr	r2, [pc, #504]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	4b7c      	ldr	r3, [pc, #496]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a7b      	ldr	r2, [pc, #492]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	e01d      	b.n	8004bac <HAL_RCC_OscConfig+0xd8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b78:	d10c      	bne.n	8004b94 <HAL_RCC_OscConfig+0xc0>
 8004b7a:	4b76      	ldr	r3, [pc, #472]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a75      	ldr	r2, [pc, #468]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	4b73      	ldr	r3, [pc, #460]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a72      	ldr	r2, [pc, #456]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	e00b      	b.n	8004bac <HAL_RCC_OscConfig+0xd8>
 8004b94:	4b6f      	ldr	r3, [pc, #444]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a6e      	ldr	r2, [pc, #440]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	4b6c      	ldr	r3, [pc, #432]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a6b      	ldr	r2, [pc, #428]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d013      	beq.n	8004bdc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7fd fa38 	bl	8002028 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bbc:	f7fd fa34 	bl	8002028 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b64      	cmp	r3, #100	; 0x64
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e21f      	b.n	800500e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bce:	4b61      	ldr	r3, [pc, #388]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCC_OscConfig+0xe8>
 8004bda:	e014      	b.n	8004c06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bdc:	f7fd fa24 	bl	8002028 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be4:	f7fd fa20 	bl	8002028 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b64      	cmp	r3, #100	; 0x64
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e20b      	b.n	800500e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bf6:	4b57      	ldr	r3, [pc, #348]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f0      	bne.n	8004be4 <HAL_RCC_OscConfig+0x110>
 8004c02:	e000      	b.n	8004c06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d069      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c12:	4b50      	ldr	r3, [pc, #320]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 030c 	and.w	r3, r3, #12
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00b      	beq.n	8004c36 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c1e:	4b4d      	ldr	r3, [pc, #308]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 030c 	and.w	r3, r3, #12
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d11c      	bne.n	8004c64 <HAL_RCC_OscConfig+0x190>
 8004c2a:	4b4a      	ldr	r3, [pc, #296]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d116      	bne.n	8004c64 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c36:	4b47      	ldr	r3, [pc, #284]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d005      	beq.n	8004c4e <HAL_RCC_OscConfig+0x17a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d001      	beq.n	8004c4e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e1df      	b.n	800500e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c4e:	4b41      	ldr	r3, [pc, #260]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	493d      	ldr	r1, [pc, #244]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c62:	e040      	b.n	8004ce6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d023      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c6c:	4b39      	ldr	r3, [pc, #228]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a38      	ldr	r2, [pc, #224]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c78:	f7fd f9d6 	bl	8002028 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c80:	f7fd f9d2 	bl	8002028 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e1bd      	b.n	800500e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c92:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9e:	4b2d      	ldr	r3, [pc, #180]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	4929      	ldr	r1, [pc, #164]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	600b      	str	r3, [r1, #0]
 8004cb2:	e018      	b.n	8004ce6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cb4:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a26      	ldr	r2, [pc, #152]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004cba:	f023 0301 	bic.w	r3, r3, #1
 8004cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc0:	f7fd f9b2 	bl	8002028 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cc8:	f7fd f9ae 	bl	8002028 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e199      	b.n	800500e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cda:	4b1e      	ldr	r3, [pc, #120]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f0      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d038      	beq.n	8004d64 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d019      	beq.n	8004d2e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cfa:	4b16      	ldr	r3, [pc, #88]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfe:	4a15      	ldr	r2, [pc, #84]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004d00:	f043 0301 	orr.w	r3, r3, #1
 8004d04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d06:	f7fd f98f 	bl	8002028 <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d0c:	e008      	b.n	8004d20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d0e:	f7fd f98b 	bl	8002028 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e176      	b.n	800500e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0f0      	beq.n	8004d0e <HAL_RCC_OscConfig+0x23a>
 8004d2c:	e01a      	b.n	8004d64 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d2e:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d32:	4a08      	ldr	r2, [pc, #32]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004d34:	f023 0301 	bic.w	r3, r3, #1
 8004d38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d3a:	f7fd f975 	bl	8002028 <HAL_GetTick>
 8004d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d40:	e00a      	b.n	8004d58 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d42:	f7fd f971 	bl	8002028 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d903      	bls.n	8004d58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e15c      	b.n	800500e <HAL_RCC_OscConfig+0x53a>
 8004d54:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d58:	4b91      	ldr	r3, [pc, #580]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1ee      	bne.n	8004d42 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 80a4 	beq.w	8004eba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d72:	4b8b      	ldr	r3, [pc, #556]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10d      	bne.n	8004d9a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d7e:	4b88      	ldr	r3, [pc, #544]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	4a87      	ldr	r2, [pc, #540]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d88:	6413      	str	r3, [r2, #64]	; 0x40
 8004d8a:	4b85      	ldr	r3, [pc, #532]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d92:	60bb      	str	r3, [r7, #8]
 8004d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d96:	2301      	movs	r3, #1
 8004d98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d9a:	4b82      	ldr	r3, [pc, #520]	; (8004fa4 <HAL_RCC_OscConfig+0x4d0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d118      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004da6:	4b7f      	ldr	r3, [pc, #508]	; (8004fa4 <HAL_RCC_OscConfig+0x4d0>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a7e      	ldr	r2, [pc, #504]	; (8004fa4 <HAL_RCC_OscConfig+0x4d0>)
 8004dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004db2:	f7fd f939 	bl	8002028 <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004db8:	e008      	b.n	8004dcc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dba:	f7fd f935 	bl	8002028 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b64      	cmp	r3, #100	; 0x64
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e120      	b.n	800500e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dcc:	4b75      	ldr	r3, [pc, #468]	; (8004fa4 <HAL_RCC_OscConfig+0x4d0>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0f0      	beq.n	8004dba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d106      	bne.n	8004dee <HAL_RCC_OscConfig+0x31a>
 8004de0:	4b6f      	ldr	r3, [pc, #444]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de4:	4a6e      	ldr	r2, [pc, #440]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004de6:	f043 0301 	orr.w	r3, r3, #1
 8004dea:	6713      	str	r3, [r2, #112]	; 0x70
 8004dec:	e02d      	b.n	8004e4a <HAL_RCC_OscConfig+0x376>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10c      	bne.n	8004e10 <HAL_RCC_OscConfig+0x33c>
 8004df6:	4b6a      	ldr	r3, [pc, #424]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfa:	4a69      	ldr	r2, [pc, #420]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004dfc:	f023 0301 	bic.w	r3, r3, #1
 8004e00:	6713      	str	r3, [r2, #112]	; 0x70
 8004e02:	4b67      	ldr	r3, [pc, #412]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e06:	4a66      	ldr	r2, [pc, #408]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004e08:	f023 0304 	bic.w	r3, r3, #4
 8004e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e0e:	e01c      	b.n	8004e4a <HAL_RCC_OscConfig+0x376>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2b05      	cmp	r3, #5
 8004e16:	d10c      	bne.n	8004e32 <HAL_RCC_OscConfig+0x35e>
 8004e18:	4b61      	ldr	r3, [pc, #388]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1c:	4a60      	ldr	r2, [pc, #384]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004e1e:	f043 0304 	orr.w	r3, r3, #4
 8004e22:	6713      	str	r3, [r2, #112]	; 0x70
 8004e24:	4b5e      	ldr	r3, [pc, #376]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e28:	4a5d      	ldr	r2, [pc, #372]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e30:	e00b      	b.n	8004e4a <HAL_RCC_OscConfig+0x376>
 8004e32:	4b5b      	ldr	r3, [pc, #364]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e36:	4a5a      	ldr	r2, [pc, #360]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004e38:	f023 0301 	bic.w	r3, r3, #1
 8004e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e3e:	4b58      	ldr	r3, [pc, #352]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e42:	4a57      	ldr	r2, [pc, #348]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004e44:	f023 0304 	bic.w	r3, r3, #4
 8004e48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d015      	beq.n	8004e7e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e52:	f7fd f8e9 	bl	8002028 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e58:	e00a      	b.n	8004e70 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e5a:	f7fd f8e5 	bl	8002028 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e0ce      	b.n	800500e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e70:	4b4b      	ldr	r3, [pc, #300]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0ee      	beq.n	8004e5a <HAL_RCC_OscConfig+0x386>
 8004e7c:	e014      	b.n	8004ea8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7e:	f7fd f8d3 	bl	8002028 <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e84:	e00a      	b.n	8004e9c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e86:	f7fd f8cf 	bl	8002028 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e0b8      	b.n	800500e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e9c:	4b40      	ldr	r3, [pc, #256]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1ee      	bne.n	8004e86 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ea8:	7dfb      	ldrb	r3, [r7, #23]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d105      	bne.n	8004eba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eae:	4b3c      	ldr	r3, [pc, #240]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	4a3b      	ldr	r2, [pc, #236]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 80a4 	beq.w	800500c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ec4:	4b36      	ldr	r3, [pc, #216]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 030c 	and.w	r3, r3, #12
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d06b      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d149      	bne.n	8004f6c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed8:	4b31      	ldr	r3, [pc, #196]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a30      	ldr	r2, [pc, #192]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004ede:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee4:	f7fd f8a0 	bl	8002028 <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eec:	f7fd f89c 	bl	8002028 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e087      	b.n	800500e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004efe:	4b28      	ldr	r3, [pc, #160]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f0      	bne.n	8004eec <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69da      	ldr	r2, [r3, #28]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	019b      	lsls	r3, r3, #6
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f20:	085b      	lsrs	r3, r3, #1
 8004f22:	3b01      	subs	r3, #1
 8004f24:	041b      	lsls	r3, r3, #16
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	061b      	lsls	r3, r3, #24
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	4a1b      	ldr	r2, [pc, #108]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004f32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f36:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f38:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a18      	ldr	r2, [pc, #96]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fd f870 	bl	8002028 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4c:	f7fd f86c 	bl	8002028 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e057      	b.n	800500e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f5e:	4b10      	ldr	r3, [pc, #64]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0x478>
 8004f6a:	e04f      	b.n	800500c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a0b      	ldr	r2, [pc, #44]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004f72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f78:	f7fd f856 	bl	8002028 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f80:	f7fd f852 	bl	8002028 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e03d      	b.n	800500e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f92:	4b03      	ldr	r3, [pc, #12]	; (8004fa0 <HAL_RCC_OscConfig+0x4cc>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f0      	bne.n	8004f80 <HAL_RCC_OscConfig+0x4ac>
 8004f9e:	e035      	b.n	800500c <HAL_RCC_OscConfig+0x538>
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004fa8:	4b1b      	ldr	r3, [pc, #108]	; (8005018 <HAL_RCC_OscConfig+0x544>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d028      	beq.n	8005008 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d121      	bne.n	8005008 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d11a      	bne.n	8005008 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fd8:	4013      	ands	r3, r2
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fde:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d111      	bne.n	8005008 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fee:	085b      	lsrs	r3, r3, #1
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d107      	bne.n	8005008 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005002:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005004:	429a      	cmp	r2, r3
 8005006:	d001      	beq.n	800500c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e000      	b.n	800500e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	40023800 	.word	0x40023800

0800501c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e0d0      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005034:	4b6a      	ldr	r3, [pc, #424]	; (80051e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d910      	bls.n	8005064 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005042:	4b67      	ldr	r3, [pc, #412]	; (80051e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f023 020f 	bic.w	r2, r3, #15
 800504a:	4965      	ldr	r1, [pc, #404]	; (80051e0 <HAL_RCC_ClockConfig+0x1c4>)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	4313      	orrs	r3, r2
 8005050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005052:	4b63      	ldr	r3, [pc, #396]	; (80051e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d001      	beq.n	8005064 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0b8      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d020      	beq.n	80050b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800507c:	4b59      	ldr	r3, [pc, #356]	; (80051e4 <HAL_RCC_ClockConfig+0x1c8>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	4a58      	ldr	r2, [pc, #352]	; (80051e4 <HAL_RCC_ClockConfig+0x1c8>)
 8005082:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005086:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005094:	4b53      	ldr	r3, [pc, #332]	; (80051e4 <HAL_RCC_ClockConfig+0x1c8>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	4a52      	ldr	r2, [pc, #328]	; (80051e4 <HAL_RCC_ClockConfig+0x1c8>)
 800509a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800509e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050a0:	4b50      	ldr	r3, [pc, #320]	; (80051e4 <HAL_RCC_ClockConfig+0x1c8>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	494d      	ldr	r1, [pc, #308]	; (80051e4 <HAL_RCC_ClockConfig+0x1c8>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d040      	beq.n	8005140 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d107      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c6:	4b47      	ldr	r3, [pc, #284]	; (80051e4 <HAL_RCC_ClockConfig+0x1c8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d115      	bne.n	80050fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e07f      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d107      	bne.n	80050ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050de:	4b41      	ldr	r3, [pc, #260]	; (80051e4 <HAL_RCC_ClockConfig+0x1c8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d109      	bne.n	80050fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e073      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ee:	4b3d      	ldr	r3, [pc, #244]	; (80051e4 <HAL_RCC_ClockConfig+0x1c8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e06b      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050fe:	4b39      	ldr	r3, [pc, #228]	; (80051e4 <HAL_RCC_ClockConfig+0x1c8>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f023 0203 	bic.w	r2, r3, #3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	4936      	ldr	r1, [pc, #216]	; (80051e4 <HAL_RCC_ClockConfig+0x1c8>)
 800510c:	4313      	orrs	r3, r2
 800510e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005110:	f7fc ff8a 	bl	8002028 <HAL_GetTick>
 8005114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005116:	e00a      	b.n	800512e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005118:	f7fc ff86 	bl	8002028 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	f241 3288 	movw	r2, #5000	; 0x1388
 8005126:	4293      	cmp	r3, r2
 8005128:	d901      	bls.n	800512e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e053      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800512e:	4b2d      	ldr	r3, [pc, #180]	; (80051e4 <HAL_RCC_ClockConfig+0x1c8>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 020c 	and.w	r2, r3, #12
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	429a      	cmp	r2, r3
 800513e:	d1eb      	bne.n	8005118 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005140:	4b27      	ldr	r3, [pc, #156]	; (80051e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d210      	bcs.n	8005170 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514e:	4b24      	ldr	r3, [pc, #144]	; (80051e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f023 020f 	bic.w	r2, r3, #15
 8005156:	4922      	ldr	r1, [pc, #136]	; (80051e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	4313      	orrs	r3, r2
 800515c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800515e:	4b20      	ldr	r3, [pc, #128]	; (80051e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	429a      	cmp	r2, r3
 800516a:	d001      	beq.n	8005170 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e032      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d008      	beq.n	800518e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800517c:	4b19      	ldr	r3, [pc, #100]	; (80051e4 <HAL_RCC_ClockConfig+0x1c8>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	4916      	ldr	r1, [pc, #88]	; (80051e4 <HAL_RCC_ClockConfig+0x1c8>)
 800518a:	4313      	orrs	r3, r2
 800518c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d009      	beq.n	80051ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800519a:	4b12      	ldr	r3, [pc, #72]	; (80051e4 <HAL_RCC_ClockConfig+0x1c8>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	490e      	ldr	r1, [pc, #56]	; (80051e4 <HAL_RCC_ClockConfig+0x1c8>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051ae:	f000 f821 	bl	80051f4 <HAL_RCC_GetSysClockFreq>
 80051b2:	4602      	mov	r2, r0
 80051b4:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <HAL_RCC_ClockConfig+0x1c8>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	091b      	lsrs	r3, r3, #4
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	490a      	ldr	r1, [pc, #40]	; (80051e8 <HAL_RCC_ClockConfig+0x1cc>)
 80051c0:	5ccb      	ldrb	r3, [r1, r3]
 80051c2:	fa22 f303 	lsr.w	r3, r2, r3
 80051c6:	4a09      	ldr	r2, [pc, #36]	; (80051ec <HAL_RCC_ClockConfig+0x1d0>)
 80051c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051ca:	4b09      	ldr	r3, [pc, #36]	; (80051f0 <HAL_RCC_ClockConfig+0x1d4>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fc fee6 	bl	8001fa0 <HAL_InitTick>

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40023c00 	.word	0x40023c00
 80051e4:	40023800 	.word	0x40023800
 80051e8:	0800d668 	.word	0x0800d668
 80051ec:	20000000 	.word	0x20000000
 80051f0:	20000004 	.word	0x20000004

080051f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051f4:	b5b0      	push	{r4, r5, r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80051fa:	2100      	movs	r1, #0
 80051fc:	6079      	str	r1, [r7, #4]
 80051fe:	2100      	movs	r1, #0
 8005200:	60f9      	str	r1, [r7, #12]
 8005202:	2100      	movs	r1, #0
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005206:	2100      	movs	r1, #0
 8005208:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800520a:	4952      	ldr	r1, [pc, #328]	; (8005354 <HAL_RCC_GetSysClockFreq+0x160>)
 800520c:	6889      	ldr	r1, [r1, #8]
 800520e:	f001 010c 	and.w	r1, r1, #12
 8005212:	2908      	cmp	r1, #8
 8005214:	d00d      	beq.n	8005232 <HAL_RCC_GetSysClockFreq+0x3e>
 8005216:	2908      	cmp	r1, #8
 8005218:	f200 8094 	bhi.w	8005344 <HAL_RCC_GetSysClockFreq+0x150>
 800521c:	2900      	cmp	r1, #0
 800521e:	d002      	beq.n	8005226 <HAL_RCC_GetSysClockFreq+0x32>
 8005220:	2904      	cmp	r1, #4
 8005222:	d003      	beq.n	800522c <HAL_RCC_GetSysClockFreq+0x38>
 8005224:	e08e      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005226:	4b4c      	ldr	r3, [pc, #304]	; (8005358 <HAL_RCC_GetSysClockFreq+0x164>)
 8005228:	60bb      	str	r3, [r7, #8]
      break;
 800522a:	e08e      	b.n	800534a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800522c:	4b4b      	ldr	r3, [pc, #300]	; (800535c <HAL_RCC_GetSysClockFreq+0x168>)
 800522e:	60bb      	str	r3, [r7, #8]
      break;
 8005230:	e08b      	b.n	800534a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005232:	4948      	ldr	r1, [pc, #288]	; (8005354 <HAL_RCC_GetSysClockFreq+0x160>)
 8005234:	6849      	ldr	r1, [r1, #4]
 8005236:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800523a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800523c:	4945      	ldr	r1, [pc, #276]	; (8005354 <HAL_RCC_GetSysClockFreq+0x160>)
 800523e:	6849      	ldr	r1, [r1, #4]
 8005240:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005244:	2900      	cmp	r1, #0
 8005246:	d024      	beq.n	8005292 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005248:	4942      	ldr	r1, [pc, #264]	; (8005354 <HAL_RCC_GetSysClockFreq+0x160>)
 800524a:	6849      	ldr	r1, [r1, #4]
 800524c:	0989      	lsrs	r1, r1, #6
 800524e:	4608      	mov	r0, r1
 8005250:	f04f 0100 	mov.w	r1, #0
 8005254:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005258:	f04f 0500 	mov.w	r5, #0
 800525c:	ea00 0204 	and.w	r2, r0, r4
 8005260:	ea01 0305 	and.w	r3, r1, r5
 8005264:	493d      	ldr	r1, [pc, #244]	; (800535c <HAL_RCC_GetSysClockFreq+0x168>)
 8005266:	fb01 f003 	mul.w	r0, r1, r3
 800526a:	2100      	movs	r1, #0
 800526c:	fb01 f102 	mul.w	r1, r1, r2
 8005270:	1844      	adds	r4, r0, r1
 8005272:	493a      	ldr	r1, [pc, #232]	; (800535c <HAL_RCC_GetSysClockFreq+0x168>)
 8005274:	fba2 0101 	umull	r0, r1, r2, r1
 8005278:	1863      	adds	r3, r4, r1
 800527a:	4619      	mov	r1, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	461a      	mov	r2, r3
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	f7fb fd00 	bl	8000c88 <__aeabi_uldivmod>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4613      	mov	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	e04a      	b.n	8005328 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005292:	4b30      	ldr	r3, [pc, #192]	; (8005354 <HAL_RCC_GetSysClockFreq+0x160>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	099b      	lsrs	r3, r3, #6
 8005298:	461a      	mov	r2, r3
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052a2:	f04f 0100 	mov.w	r1, #0
 80052a6:	ea02 0400 	and.w	r4, r2, r0
 80052aa:	ea03 0501 	and.w	r5, r3, r1
 80052ae:	4620      	mov	r0, r4
 80052b0:	4629      	mov	r1, r5
 80052b2:	f04f 0200 	mov.w	r2, #0
 80052b6:	f04f 0300 	mov.w	r3, #0
 80052ba:	014b      	lsls	r3, r1, #5
 80052bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052c0:	0142      	lsls	r2, r0, #5
 80052c2:	4610      	mov	r0, r2
 80052c4:	4619      	mov	r1, r3
 80052c6:	1b00      	subs	r0, r0, r4
 80052c8:	eb61 0105 	sbc.w	r1, r1, r5
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	018b      	lsls	r3, r1, #6
 80052d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052da:	0182      	lsls	r2, r0, #6
 80052dc:	1a12      	subs	r2, r2, r0
 80052de:	eb63 0301 	sbc.w	r3, r3, r1
 80052e2:	f04f 0000 	mov.w	r0, #0
 80052e6:	f04f 0100 	mov.w	r1, #0
 80052ea:	00d9      	lsls	r1, r3, #3
 80052ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052f0:	00d0      	lsls	r0, r2, #3
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	1912      	adds	r2, r2, r4
 80052f8:	eb45 0303 	adc.w	r3, r5, r3
 80052fc:	f04f 0000 	mov.w	r0, #0
 8005300:	f04f 0100 	mov.w	r1, #0
 8005304:	0299      	lsls	r1, r3, #10
 8005306:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800530a:	0290      	lsls	r0, r2, #10
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4610      	mov	r0, r2
 8005312:	4619      	mov	r1, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	461a      	mov	r2, r3
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	f7fb fcb4 	bl	8000c88 <__aeabi_uldivmod>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4613      	mov	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005328:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <HAL_RCC_GetSysClockFreq+0x160>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	0c1b      	lsrs	r3, r3, #16
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	3301      	adds	r3, #1
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005340:	60bb      	str	r3, [r7, #8]
      break;
 8005342:	e002      	b.n	800534a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005344:	4b04      	ldr	r3, [pc, #16]	; (8005358 <HAL_RCC_GetSysClockFreq+0x164>)
 8005346:	60bb      	str	r3, [r7, #8]
      break;
 8005348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800534a:	68bb      	ldr	r3, [r7, #8]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bdb0      	pop	{r4, r5, r7, pc}
 8005354:	40023800 	.word	0x40023800
 8005358:	00f42400 	.word	0x00f42400
 800535c:	017d7840 	.word	0x017d7840

08005360 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005364:	4b03      	ldr	r3, [pc, #12]	; (8005374 <HAL_RCC_GetHCLKFreq+0x14>)
 8005366:	681b      	ldr	r3, [r3, #0]
}
 8005368:	4618      	mov	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	20000000 	.word	0x20000000

08005378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800537c:	f7ff fff0 	bl	8005360 <HAL_RCC_GetHCLKFreq>
 8005380:	4602      	mov	r2, r0
 8005382:	4b05      	ldr	r3, [pc, #20]	; (8005398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	0a9b      	lsrs	r3, r3, #10
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	4903      	ldr	r1, [pc, #12]	; (800539c <HAL_RCC_GetPCLK1Freq+0x24>)
 800538e:	5ccb      	ldrb	r3, [r1, r3]
 8005390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005394:	4618      	mov	r0, r3
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40023800 	.word	0x40023800
 800539c:	0800d678 	.word	0x0800d678

080053a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053a4:	f7ff ffdc 	bl	8005360 <HAL_RCC_GetHCLKFreq>
 80053a8:	4602      	mov	r2, r0
 80053aa:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	0b5b      	lsrs	r3, r3, #13
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	4903      	ldr	r1, [pc, #12]	; (80053c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053b6:	5ccb      	ldrb	r3, [r1, r3]
 80053b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053bc:	4618      	mov	r0, r3
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	40023800 	.word	0x40023800
 80053c4:	0800d678 	.word	0x0800d678

080053c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80053d4:	2300      	movs	r3, #0
 80053d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80053dc:	2300      	movs	r3, #0
 80053de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d012      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053f0:	4b69      	ldr	r3, [pc, #420]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	4a68      	ldr	r2, [pc, #416]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80053fa:	6093      	str	r3, [r2, #8]
 80053fc:	4b66      	ldr	r3, [pc, #408]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005404:	4964      	ldr	r1, [pc, #400]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005406:	4313      	orrs	r3, r2
 8005408:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005412:	2301      	movs	r3, #1
 8005414:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d017      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005422:	4b5d      	ldr	r3, [pc, #372]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005428:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005430:	4959      	ldr	r1, [pc, #356]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005432:	4313      	orrs	r3, r2
 8005434:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005440:	d101      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005442:	2301      	movs	r3, #1
 8005444:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800544e:	2301      	movs	r3, #1
 8005450:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d017      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800545e:	4b4e      	ldr	r3, [pc, #312]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005464:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	494a      	ldr	r1, [pc, #296]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800547c:	d101      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800547e:	2301      	movs	r3, #1
 8005480:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800548a:	2301      	movs	r3, #1
 800548c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800549a:	2301      	movs	r3, #1
 800549c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 808b 	beq.w	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054ac:	4b3a      	ldr	r3, [pc, #232]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	4a39      	ldr	r2, [pc, #228]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b6:	6413      	str	r3, [r2, #64]	; 0x40
 80054b8:	4b37      	ldr	r3, [pc, #220]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054c0:	60bb      	str	r3, [r7, #8]
 80054c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80054c4:	4b35      	ldr	r3, [pc, #212]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a34      	ldr	r2, [pc, #208]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d0:	f7fc fdaa 	bl	8002028 <HAL_GetTick>
 80054d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054d6:	e008      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054d8:	f7fc fda6 	bl	8002028 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b64      	cmp	r3, #100	; 0x64
 80054e4:	d901      	bls.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e357      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054ea:	4b2c      	ldr	r3, [pc, #176]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0f0      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054f6:	4b28      	ldr	r3, [pc, #160]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d035      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	429a      	cmp	r2, r3
 8005512:	d02e      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005514:	4b20      	ldr	r3, [pc, #128]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800551c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800551e:	4b1e      	ldr	r3, [pc, #120]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005522:	4a1d      	ldr	r2, [pc, #116]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005528:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800552a:	4b1b      	ldr	r3, [pc, #108]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800552c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552e:	4a1a      	ldr	r2, [pc, #104]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005534:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005536:	4a18      	ldr	r2, [pc, #96]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800553c:	4b16      	ldr	r3, [pc, #88]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800553e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b01      	cmp	r3, #1
 8005546:	d114      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005548:	f7fc fd6e 	bl	8002028 <HAL_GetTick>
 800554c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800554e:	e00a      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005550:	f7fc fd6a 	bl	8002028 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	f241 3288 	movw	r2, #5000	; 0x1388
 800555e:	4293      	cmp	r3, r2
 8005560:	d901      	bls.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e319      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005566:	4b0c      	ldr	r3, [pc, #48]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0ee      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800557e:	d111      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005580:	4b05      	ldr	r3, [pc, #20]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800558c:	4b04      	ldr	r3, [pc, #16]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800558e:	400b      	ands	r3, r1
 8005590:	4901      	ldr	r1, [pc, #4]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005592:	4313      	orrs	r3, r2
 8005594:	608b      	str	r3, [r1, #8]
 8005596:	e00b      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005598:	40023800 	.word	0x40023800
 800559c:	40007000 	.word	0x40007000
 80055a0:	0ffffcff 	.word	0x0ffffcff
 80055a4:	4bb1      	ldr	r3, [pc, #708]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	4ab0      	ldr	r2, [pc, #704]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80055aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80055ae:	6093      	str	r3, [r2, #8]
 80055b0:	4bae      	ldr	r3, [pc, #696]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80055b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055bc:	49ab      	ldr	r1, [pc, #684]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0310 	and.w	r3, r3, #16
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d010      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055ce:	4ba7      	ldr	r3, [pc, #668]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80055d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055d4:	4aa5      	ldr	r2, [pc, #660]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80055d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80055de:	4ba3      	ldr	r3, [pc, #652]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80055e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	49a0      	ldr	r1, [pc, #640]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00a      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055fc:	4b9b      	ldr	r3, [pc, #620]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80055fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005602:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800560a:	4998      	ldr	r1, [pc, #608]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800560c:	4313      	orrs	r3, r2
 800560e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800561e:	4b93      	ldr	r3, [pc, #588]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005624:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800562c:	498f      	ldr	r1, [pc, #572]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800562e:	4313      	orrs	r3, r2
 8005630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00a      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005640:	4b8a      	ldr	r3, [pc, #552]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005646:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800564e:	4987      	ldr	r1, [pc, #540]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005650:	4313      	orrs	r3, r2
 8005652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005662:	4b82      	ldr	r3, [pc, #520]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005668:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	497e      	ldr	r1, [pc, #504]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005672:	4313      	orrs	r3, r2
 8005674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00a      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005684:	4b79      	ldr	r3, [pc, #484]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568a:	f023 0203 	bic.w	r2, r3, #3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005692:	4976      	ldr	r1, [pc, #472]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005694:	4313      	orrs	r3, r2
 8005696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056a6:	4b71      	ldr	r3, [pc, #452]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80056a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ac:	f023 020c 	bic.w	r2, r3, #12
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b4:	496d      	ldr	r1, [pc, #436]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00a      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056c8:	4b68      	ldr	r3, [pc, #416]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80056ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d6:	4965      	ldr	r1, [pc, #404]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056ea:	4b60      	ldr	r3, [pc, #384]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80056ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f8:	495c      	ldr	r1, [pc, #368]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00a      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800570c:	4b57      	ldr	r3, [pc, #348]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800570e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005712:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571a:	4954      	ldr	r1, [pc, #336]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800571c:	4313      	orrs	r3, r2
 800571e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800572e:	4b4f      	ldr	r3, [pc, #316]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005734:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573c:	494b      	ldr	r1, [pc, #300]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800573e:	4313      	orrs	r3, r2
 8005740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005750:	4b46      	ldr	r3, [pc, #280]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005756:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575e:	4943      	ldr	r1, [pc, #268]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005760:	4313      	orrs	r3, r2
 8005762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00a      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005772:	4b3e      	ldr	r3, [pc, #248]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005778:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005780:	493a      	ldr	r1, [pc, #232]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005782:	4313      	orrs	r3, r2
 8005784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00a      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005794:	4b35      	ldr	r3, [pc, #212]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057a2:	4932      	ldr	r1, [pc, #200]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d011      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80057b6:	4b2d      	ldr	r3, [pc, #180]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80057b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057c4:	4929      	ldr	r1, [pc, #164]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057d4:	d101      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80057d6:	2301      	movs	r3, #1
 80057d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80057e6:	2301      	movs	r3, #1
 80057e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057f6:	4b1d      	ldr	r3, [pc, #116]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80057f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005804:	4919      	ldr	r1, [pc, #100]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00b      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005818:	4b14      	ldr	r3, [pc, #80]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800581a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005828:	4910      	ldr	r1, [pc, #64]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d006      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 80d9 	beq.w	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005844:	4b09      	ldr	r3, [pc, #36]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a08      	ldr	r2, [pc, #32]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800584a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800584e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005850:	f7fc fbea 	bl	8002028 <HAL_GetTick>
 8005854:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005856:	e00b      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005858:	f7fc fbe6 	bl	8002028 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b64      	cmp	r3, #100	; 0x64
 8005864:	d904      	bls.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e197      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800586a:	bf00      	nop
 800586c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005870:	4b6c      	ldr	r3, [pc, #432]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1ed      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d021      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588c:	2b00      	cmp	r3, #0
 800588e:	d11d      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005890:	4b64      	ldr	r3, [pc, #400]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005896:	0c1b      	lsrs	r3, r3, #16
 8005898:	f003 0303 	and.w	r3, r3, #3
 800589c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800589e:	4b61      	ldr	r3, [pc, #388]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058a4:	0e1b      	lsrs	r3, r3, #24
 80058a6:	f003 030f 	and.w	r3, r3, #15
 80058aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	019a      	lsls	r2, r3, #6
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	041b      	lsls	r3, r3, #16
 80058b6:	431a      	orrs	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	061b      	lsls	r3, r3, #24
 80058bc:	431a      	orrs	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	071b      	lsls	r3, r3, #28
 80058c4:	4957      	ldr	r1, [pc, #348]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d004      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058e0:	d00a      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d02e      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058f6:	d129      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058f8:	4b4a      	ldr	r3, [pc, #296]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058fe:	0c1b      	lsrs	r3, r3, #16
 8005900:	f003 0303 	and.w	r3, r3, #3
 8005904:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005906:	4b47      	ldr	r3, [pc, #284]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800590c:	0f1b      	lsrs	r3, r3, #28
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	019a      	lsls	r2, r3, #6
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	041b      	lsls	r3, r3, #16
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	061b      	lsls	r3, r3, #24
 8005926:	431a      	orrs	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	071b      	lsls	r3, r3, #28
 800592c:	493d      	ldr	r1, [pc, #244]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005934:	4b3b      	ldr	r3, [pc, #236]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800593a:	f023 021f 	bic.w	r2, r3, #31
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	3b01      	subs	r3, #1
 8005944:	4937      	ldr	r1, [pc, #220]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01d      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005958:	4b32      	ldr	r3, [pc, #200]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800595a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800595e:	0e1b      	lsrs	r3, r3, #24
 8005960:	f003 030f 	and.w	r3, r3, #15
 8005964:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005966:	4b2f      	ldr	r3, [pc, #188]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800596c:	0f1b      	lsrs	r3, r3, #28
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	019a      	lsls	r2, r3, #6
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	041b      	lsls	r3, r3, #16
 8005980:	431a      	orrs	r2, r3
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	061b      	lsls	r3, r3, #24
 8005986:	431a      	orrs	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	071b      	lsls	r3, r3, #28
 800598c:	4925      	ldr	r1, [pc, #148]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800598e:	4313      	orrs	r3, r2
 8005990:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d011      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	019a      	lsls	r2, r3, #6
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	041b      	lsls	r3, r3, #16
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	061b      	lsls	r3, r3, #24
 80059b4:	431a      	orrs	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	071b      	lsls	r3, r3, #28
 80059bc:	4919      	ldr	r1, [pc, #100]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059c4:	4b17      	ldr	r3, [pc, #92]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a16      	ldr	r2, [pc, #88]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059d0:	f7fc fb2a 	bl	8002028 <HAL_GetTick>
 80059d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059d8:	f7fc fb26 	bl	8002028 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b64      	cmp	r3, #100	; 0x64
 80059e4:	d901      	bls.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e0d7      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059ea:	4b0e      	ldr	r3, [pc, #56]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	f040 80cd 	bne.w	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80059fe:	4b09      	ldr	r3, [pc, #36]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a08      	ldr	r2, [pc, #32]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a0a:	f7fc fb0d 	bl	8002028 <HAL_GetTick>
 8005a0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a10:	e00a      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a12:	f7fc fb09 	bl	8002028 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b64      	cmp	r3, #100	; 0x64
 8005a1e:	d903      	bls.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e0ba      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005a24:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a28:	4b5e      	ldr	r3, [pc, #376]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a34:	d0ed      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d009      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d02e      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d12a      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a5e:	4b51      	ldr	r3, [pc, #324]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a64:	0c1b      	lsrs	r3, r3, #16
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a6c:	4b4d      	ldr	r3, [pc, #308]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a72:	0f1b      	lsrs	r3, r3, #28
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	019a      	lsls	r2, r3, #6
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	041b      	lsls	r3, r3, #16
 8005a84:	431a      	orrs	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	061b      	lsls	r3, r3, #24
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	071b      	lsls	r3, r3, #28
 8005a92:	4944      	ldr	r1, [pc, #272]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a9a:	4b42      	ldr	r3, [pc, #264]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aa0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	493d      	ldr	r1, [pc, #244]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d022      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ac8:	d11d      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005aca:	4b36      	ldr	r3, [pc, #216]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad0:	0e1b      	lsrs	r3, r3, #24
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ad8:	4b32      	ldr	r3, [pc, #200]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ade:	0f1b      	lsrs	r3, r3, #28
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	019a      	lsls	r2, r3, #6
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	041b      	lsls	r3, r3, #16
 8005af2:	431a      	orrs	r2, r3
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	061b      	lsls	r3, r3, #24
 8005af8:	431a      	orrs	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	071b      	lsls	r3, r3, #28
 8005afe:	4929      	ldr	r1, [pc, #164]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d028      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b12:	4b24      	ldr	r3, [pc, #144]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b18:	0e1b      	lsrs	r3, r3, #24
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b20:	4b20      	ldr	r3, [pc, #128]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b26:	0c1b      	lsrs	r3, r3, #16
 8005b28:	f003 0303 	and.w	r3, r3, #3
 8005b2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	019a      	lsls	r2, r3, #6
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	041b      	lsls	r3, r3, #16
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	061b      	lsls	r3, r3, #24
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	071b      	lsls	r3, r3, #28
 8005b46:	4917      	ldr	r1, [pc, #92]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b4e:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	4911      	ldr	r1, [pc, #68]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b64:	4b0f      	ldr	r3, [pc, #60]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a0e      	ldr	r2, [pc, #56]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b70:	f7fc fa5a 	bl	8002028 <HAL_GetTick>
 8005b74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b76:	e008      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b78:	f7fc fa56 	bl	8002028 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b64      	cmp	r3, #100	; 0x64
 8005b84:	d901      	bls.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e007      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b96:	d1ef      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3720      	adds	r7, #32
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40023800 	.word	0x40023800

08005ba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e049      	b.n	8005c4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fb ffe6 	bl	8001ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3304      	adds	r3, #4
 8005be4:	4619      	mov	r1, r3
 8005be6:	4610      	mov	r0, r2
 8005be8:	f000 f96c 	bl	8005ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d001      	beq.n	8005c70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e04c      	b.n	8005d0a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a26      	ldr	r2, [pc, #152]	; (8005d18 <HAL_TIM_Base_Start+0xc0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d022      	beq.n	8005cc8 <HAL_TIM_Base_Start+0x70>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c8a:	d01d      	beq.n	8005cc8 <HAL_TIM_Base_Start+0x70>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a22      	ldr	r2, [pc, #136]	; (8005d1c <HAL_TIM_Base_Start+0xc4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d018      	beq.n	8005cc8 <HAL_TIM_Base_Start+0x70>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a21      	ldr	r2, [pc, #132]	; (8005d20 <HAL_TIM_Base_Start+0xc8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d013      	beq.n	8005cc8 <HAL_TIM_Base_Start+0x70>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a1f      	ldr	r2, [pc, #124]	; (8005d24 <HAL_TIM_Base_Start+0xcc>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00e      	beq.n	8005cc8 <HAL_TIM_Base_Start+0x70>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a1e      	ldr	r2, [pc, #120]	; (8005d28 <HAL_TIM_Base_Start+0xd0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d009      	beq.n	8005cc8 <HAL_TIM_Base_Start+0x70>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a1c      	ldr	r2, [pc, #112]	; (8005d2c <HAL_TIM_Base_Start+0xd4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d004      	beq.n	8005cc8 <HAL_TIM_Base_Start+0x70>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1b      	ldr	r2, [pc, #108]	; (8005d30 <HAL_TIM_Base_Start+0xd8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d115      	bne.n	8005cf4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	4b19      	ldr	r3, [pc, #100]	; (8005d34 <HAL_TIM_Base_Start+0xdc>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b06      	cmp	r3, #6
 8005cd8:	d015      	beq.n	8005d06 <HAL_TIM_Base_Start+0xae>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce0:	d011      	beq.n	8005d06 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f042 0201 	orr.w	r2, r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf2:	e008      	b.n	8005d06 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	e000      	b.n	8005d08 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40010000 	.word	0x40010000
 8005d1c:	40000400 	.word	0x40000400
 8005d20:	40000800 	.word	0x40000800
 8005d24:	40000c00 	.word	0x40000c00
 8005d28:	40010400 	.word	0x40010400
 8005d2c:	40014000 	.word	0x40014000
 8005d30:	40001800 	.word	0x40001800
 8005d34:	00010007 	.word	0x00010007

08005d38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d101      	bne.n	8005d50 <HAL_TIM_ConfigClockSource+0x18>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	e0b3      	b.n	8005eb8 <HAL_TIM_ConfigClockSource+0x180>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4b55      	ldr	r3, [pc, #340]	; (8005ec0 <HAL_TIM_ConfigClockSource+0x188>)
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d88:	d03e      	beq.n	8005e08 <HAL_TIM_ConfigClockSource+0xd0>
 8005d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d8e:	f200 8087 	bhi.w	8005ea0 <HAL_TIM_ConfigClockSource+0x168>
 8005d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d96:	f000 8085 	beq.w	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d9e:	d87f      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x168>
 8005da0:	2b70      	cmp	r3, #112	; 0x70
 8005da2:	d01a      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0xa2>
 8005da4:	2b70      	cmp	r3, #112	; 0x70
 8005da6:	d87b      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x168>
 8005da8:	2b60      	cmp	r3, #96	; 0x60
 8005daa:	d050      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0x116>
 8005dac:	2b60      	cmp	r3, #96	; 0x60
 8005dae:	d877      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x168>
 8005db0:	2b50      	cmp	r3, #80	; 0x50
 8005db2:	d03c      	beq.n	8005e2e <HAL_TIM_ConfigClockSource+0xf6>
 8005db4:	2b50      	cmp	r3, #80	; 0x50
 8005db6:	d873      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x168>
 8005db8:	2b40      	cmp	r3, #64	; 0x40
 8005dba:	d058      	beq.n	8005e6e <HAL_TIM_ConfigClockSource+0x136>
 8005dbc:	2b40      	cmp	r3, #64	; 0x40
 8005dbe:	d86f      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x168>
 8005dc0:	2b30      	cmp	r3, #48	; 0x30
 8005dc2:	d064      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0x156>
 8005dc4:	2b30      	cmp	r3, #48	; 0x30
 8005dc6:	d86b      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x168>
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d060      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0x156>
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	d867      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x168>
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d05c      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0x156>
 8005dd4:	2b10      	cmp	r3, #16
 8005dd6:	d05a      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005dd8:	e062      	b.n	8005ea0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6818      	ldr	r0, [r3, #0]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	6899      	ldr	r1, [r3, #8]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f000 f985 	bl	80060f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005dfc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	609a      	str	r2, [r3, #8]
      break;
 8005e06:	e04e      	b.n	8005ea6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6818      	ldr	r0, [r3, #0]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	6899      	ldr	r1, [r3, #8]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f000 f96e 	bl	80060f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e2a:	609a      	str	r2, [r3, #8]
      break;
 8005e2c:	e03b      	b.n	8005ea6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	6859      	ldr	r1, [r3, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f000 f8e2 	bl	8006004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2150      	movs	r1, #80	; 0x50
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 f93b 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 8005e4c:	e02b      	b.n	8005ea6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6818      	ldr	r0, [r3, #0]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	6859      	ldr	r1, [r3, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f000 f901 	bl	8006062 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2160      	movs	r1, #96	; 0x60
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 f92b 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 8005e6c:	e01b      	b.n	8005ea6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6818      	ldr	r0, [r3, #0]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	6859      	ldr	r1, [r3, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f000 f8c2 	bl	8006004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2140      	movs	r1, #64	; 0x40
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 f91b 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 8005e8c:	e00b      	b.n	8005ea6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4619      	mov	r1, r3
 8005e98:	4610      	mov	r0, r2
 8005e9a:	f000 f912 	bl	80060c2 <TIM_ITRx_SetConfig>
        break;
 8005e9e:	e002      	b.n	8005ea6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005ea0:	bf00      	nop
 8005ea2:	e000      	b.n	8005ea6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005ea4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	fffeff88 	.word	0xfffeff88

08005ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a40      	ldr	r2, [pc, #256]	; (8005fd8 <TIM_Base_SetConfig+0x114>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d013      	beq.n	8005f04 <TIM_Base_SetConfig+0x40>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee2:	d00f      	beq.n	8005f04 <TIM_Base_SetConfig+0x40>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a3d      	ldr	r2, [pc, #244]	; (8005fdc <TIM_Base_SetConfig+0x118>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00b      	beq.n	8005f04 <TIM_Base_SetConfig+0x40>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a3c      	ldr	r2, [pc, #240]	; (8005fe0 <TIM_Base_SetConfig+0x11c>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d007      	beq.n	8005f04 <TIM_Base_SetConfig+0x40>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a3b      	ldr	r2, [pc, #236]	; (8005fe4 <TIM_Base_SetConfig+0x120>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d003      	beq.n	8005f04 <TIM_Base_SetConfig+0x40>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a3a      	ldr	r2, [pc, #232]	; (8005fe8 <TIM_Base_SetConfig+0x124>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d108      	bne.n	8005f16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a2f      	ldr	r2, [pc, #188]	; (8005fd8 <TIM_Base_SetConfig+0x114>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d02b      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f24:	d027      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a2c      	ldr	r2, [pc, #176]	; (8005fdc <TIM_Base_SetConfig+0x118>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d023      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a2b      	ldr	r2, [pc, #172]	; (8005fe0 <TIM_Base_SetConfig+0x11c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d01f      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a2a      	ldr	r2, [pc, #168]	; (8005fe4 <TIM_Base_SetConfig+0x120>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d01b      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a29      	ldr	r2, [pc, #164]	; (8005fe8 <TIM_Base_SetConfig+0x124>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d017      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a28      	ldr	r2, [pc, #160]	; (8005fec <TIM_Base_SetConfig+0x128>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d013      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a27      	ldr	r2, [pc, #156]	; (8005ff0 <TIM_Base_SetConfig+0x12c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00f      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a26      	ldr	r2, [pc, #152]	; (8005ff4 <TIM_Base_SetConfig+0x130>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00b      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a25      	ldr	r2, [pc, #148]	; (8005ff8 <TIM_Base_SetConfig+0x134>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d007      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a24      	ldr	r2, [pc, #144]	; (8005ffc <TIM_Base_SetConfig+0x138>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d003      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a23      	ldr	r2, [pc, #140]	; (8006000 <TIM_Base_SetConfig+0x13c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d108      	bne.n	8005f88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a0a      	ldr	r2, [pc, #40]	; (8005fd8 <TIM_Base_SetConfig+0x114>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d003      	beq.n	8005fbc <TIM_Base_SetConfig+0xf8>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a0c      	ldr	r2, [pc, #48]	; (8005fe8 <TIM_Base_SetConfig+0x124>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d103      	bne.n	8005fc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	691a      	ldr	r2, [r3, #16]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	615a      	str	r2, [r3, #20]
}
 8005fca:	bf00      	nop
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	40010000 	.word	0x40010000
 8005fdc:	40000400 	.word	0x40000400
 8005fe0:	40000800 	.word	0x40000800
 8005fe4:	40000c00 	.word	0x40000c00
 8005fe8:	40010400 	.word	0x40010400
 8005fec:	40014000 	.word	0x40014000
 8005ff0:	40014400 	.word	0x40014400
 8005ff4:	40014800 	.word	0x40014800
 8005ff8:	40001800 	.word	0x40001800
 8005ffc:	40001c00 	.word	0x40001c00
 8006000:	40002000 	.word	0x40002000

08006004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f023 0201 	bic.w	r2, r3, #1
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800602e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f023 030a 	bic.w	r3, r3, #10
 8006040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	621a      	str	r2, [r3, #32]
}
 8006056:	bf00      	nop
 8006058:	371c      	adds	r7, #28
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006062:	b480      	push	{r7}
 8006064:	b087      	sub	sp, #28
 8006066:	af00      	add	r7, sp, #0
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	60b9      	str	r1, [r7, #8]
 800606c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	f023 0210 	bic.w	r2, r3, #16
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800608c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	031b      	lsls	r3, r3, #12
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	4313      	orrs	r3, r2
 8006096:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800609e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	621a      	str	r2, [r3, #32]
}
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b085      	sub	sp, #20
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4313      	orrs	r3, r2
 80060e0:	f043 0307 	orr.w	r3, r3, #7
 80060e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	609a      	str	r2, [r3, #8]
}
 80060ec:	bf00      	nop
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006112:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	021a      	lsls	r2, r3, #8
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	431a      	orrs	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	4313      	orrs	r3, r2
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	609a      	str	r2, [r3, #8]
}
 800612c:	bf00      	nop
 800612e:	371c      	adds	r7, #28
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e040      	b.n	80061cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800614e:	2b00      	cmp	r3, #0
 8006150:	d106      	bne.n	8006160 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7fb fdc6 	bl	8001cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2224      	movs	r2, #36	; 0x24
 8006164:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0201 	bic.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f8c0 	bl	80062fc <UART_SetConfig>
 800617c:	4603      	mov	r3, r0
 800617e:	2b01      	cmp	r3, #1
 8006180:	d101      	bne.n	8006186 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e022      	b.n	80061cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	2b00      	cmp	r3, #0
 800618c:	d002      	beq.n	8006194 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fb16 	bl	80067c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689a      	ldr	r2, [r3, #8]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0201 	orr.w	r2, r2, #1
 80061c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fb9d 	bl	8006904 <UART_CheckIdleState>
 80061ca:	4603      	mov	r3, r0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08a      	sub	sp, #40	; 0x28
 80061d8:	af02      	add	r7, sp, #8
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	603b      	str	r3, [r7, #0]
 80061e0:	4613      	mov	r3, r2
 80061e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061e8:	2b20      	cmp	r3, #32
 80061ea:	f040 8081 	bne.w	80062f0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <HAL_UART_Transmit+0x26>
 80061f4:	88fb      	ldrh	r3, [r7, #6]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e079      	b.n	80062f2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_UART_Transmit+0x38>
 8006208:	2302      	movs	r3, #2
 800620a:	e072      	b.n	80062f2 <HAL_UART_Transmit+0x11e>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2221      	movs	r2, #33	; 0x21
 8006220:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006222:	f7fb ff01 	bl	8002028 <HAL_GetTick>
 8006226:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	88fa      	ldrh	r2, [r7, #6]
 800622c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	88fa      	ldrh	r2, [r7, #6]
 8006234:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006240:	d108      	bne.n	8006254 <HAL_UART_Transmit+0x80>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d104      	bne.n	8006254 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800624a:	2300      	movs	r3, #0
 800624c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	61bb      	str	r3, [r7, #24]
 8006252:	e003      	b.n	800625c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006258:	2300      	movs	r3, #0
 800625a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006264:	e02c      	b.n	80062c0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2200      	movs	r2, #0
 800626e:	2180      	movs	r1, #128	; 0x80
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 fb7a 	bl	800696a <UART_WaitOnFlagUntilTimeout>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e038      	b.n	80062f2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10b      	bne.n	800629e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	461a      	mov	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006294:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	3302      	adds	r3, #2
 800629a:	61bb      	str	r3, [r7, #24]
 800629c:	e007      	b.n	80062ae <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	781a      	ldrb	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	3301      	adds	r3, #1
 80062ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	3b01      	subs	r3, #1
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1cc      	bne.n	8006266 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	2200      	movs	r2, #0
 80062d4:	2140      	movs	r1, #64	; 0x40
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 fb47 	bl	800696a <UART_WaitOnFlagUntilTimeout>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e005      	b.n	80062f2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2220      	movs	r2, #32
 80062ea:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	e000      	b.n	80062f2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80062f0:	2302      	movs	r3, #2
  }
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3720      	adds	r7, #32
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b088      	sub	sp, #32
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006304:	2300      	movs	r3, #0
 8006306:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	431a      	orrs	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	4ba7      	ldr	r3, [pc, #668]	; (80065c4 <UART_SetConfig+0x2c8>)
 8006328:	4013      	ands	r3, r2
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6812      	ldr	r2, [r2, #0]
 800632e:	6979      	ldr	r1, [r7, #20]
 8006330:	430b      	orrs	r3, r1
 8006332:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68da      	ldr	r2, [r3, #12]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	4313      	orrs	r3, r2
 8006358:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	430a      	orrs	r2, r1
 800636c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a95      	ldr	r2, [pc, #596]	; (80065c8 <UART_SetConfig+0x2cc>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d120      	bne.n	80063ba <UART_SetConfig+0xbe>
 8006378:	4b94      	ldr	r3, [pc, #592]	; (80065cc <UART_SetConfig+0x2d0>)
 800637a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800637e:	f003 0303 	and.w	r3, r3, #3
 8006382:	2b03      	cmp	r3, #3
 8006384:	d816      	bhi.n	80063b4 <UART_SetConfig+0xb8>
 8006386:	a201      	add	r2, pc, #4	; (adr r2, 800638c <UART_SetConfig+0x90>)
 8006388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638c:	0800639d 	.word	0x0800639d
 8006390:	080063a9 	.word	0x080063a9
 8006394:	080063a3 	.word	0x080063a3
 8006398:	080063af 	.word	0x080063af
 800639c:	2301      	movs	r3, #1
 800639e:	77fb      	strb	r3, [r7, #31]
 80063a0:	e14f      	b.n	8006642 <UART_SetConfig+0x346>
 80063a2:	2302      	movs	r3, #2
 80063a4:	77fb      	strb	r3, [r7, #31]
 80063a6:	e14c      	b.n	8006642 <UART_SetConfig+0x346>
 80063a8:	2304      	movs	r3, #4
 80063aa:	77fb      	strb	r3, [r7, #31]
 80063ac:	e149      	b.n	8006642 <UART_SetConfig+0x346>
 80063ae:	2308      	movs	r3, #8
 80063b0:	77fb      	strb	r3, [r7, #31]
 80063b2:	e146      	b.n	8006642 <UART_SetConfig+0x346>
 80063b4:	2310      	movs	r3, #16
 80063b6:	77fb      	strb	r3, [r7, #31]
 80063b8:	e143      	b.n	8006642 <UART_SetConfig+0x346>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a84      	ldr	r2, [pc, #528]	; (80065d0 <UART_SetConfig+0x2d4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d132      	bne.n	800642a <UART_SetConfig+0x12e>
 80063c4:	4b81      	ldr	r3, [pc, #516]	; (80065cc <UART_SetConfig+0x2d0>)
 80063c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ca:	f003 030c 	and.w	r3, r3, #12
 80063ce:	2b0c      	cmp	r3, #12
 80063d0:	d828      	bhi.n	8006424 <UART_SetConfig+0x128>
 80063d2:	a201      	add	r2, pc, #4	; (adr r2, 80063d8 <UART_SetConfig+0xdc>)
 80063d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d8:	0800640d 	.word	0x0800640d
 80063dc:	08006425 	.word	0x08006425
 80063e0:	08006425 	.word	0x08006425
 80063e4:	08006425 	.word	0x08006425
 80063e8:	08006419 	.word	0x08006419
 80063ec:	08006425 	.word	0x08006425
 80063f0:	08006425 	.word	0x08006425
 80063f4:	08006425 	.word	0x08006425
 80063f8:	08006413 	.word	0x08006413
 80063fc:	08006425 	.word	0x08006425
 8006400:	08006425 	.word	0x08006425
 8006404:	08006425 	.word	0x08006425
 8006408:	0800641f 	.word	0x0800641f
 800640c:	2300      	movs	r3, #0
 800640e:	77fb      	strb	r3, [r7, #31]
 8006410:	e117      	b.n	8006642 <UART_SetConfig+0x346>
 8006412:	2302      	movs	r3, #2
 8006414:	77fb      	strb	r3, [r7, #31]
 8006416:	e114      	b.n	8006642 <UART_SetConfig+0x346>
 8006418:	2304      	movs	r3, #4
 800641a:	77fb      	strb	r3, [r7, #31]
 800641c:	e111      	b.n	8006642 <UART_SetConfig+0x346>
 800641e:	2308      	movs	r3, #8
 8006420:	77fb      	strb	r3, [r7, #31]
 8006422:	e10e      	b.n	8006642 <UART_SetConfig+0x346>
 8006424:	2310      	movs	r3, #16
 8006426:	77fb      	strb	r3, [r7, #31]
 8006428:	e10b      	b.n	8006642 <UART_SetConfig+0x346>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a69      	ldr	r2, [pc, #420]	; (80065d4 <UART_SetConfig+0x2d8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d120      	bne.n	8006476 <UART_SetConfig+0x17a>
 8006434:	4b65      	ldr	r3, [pc, #404]	; (80065cc <UART_SetConfig+0x2d0>)
 8006436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800643e:	2b30      	cmp	r3, #48	; 0x30
 8006440:	d013      	beq.n	800646a <UART_SetConfig+0x16e>
 8006442:	2b30      	cmp	r3, #48	; 0x30
 8006444:	d814      	bhi.n	8006470 <UART_SetConfig+0x174>
 8006446:	2b20      	cmp	r3, #32
 8006448:	d009      	beq.n	800645e <UART_SetConfig+0x162>
 800644a:	2b20      	cmp	r3, #32
 800644c:	d810      	bhi.n	8006470 <UART_SetConfig+0x174>
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <UART_SetConfig+0x15c>
 8006452:	2b10      	cmp	r3, #16
 8006454:	d006      	beq.n	8006464 <UART_SetConfig+0x168>
 8006456:	e00b      	b.n	8006470 <UART_SetConfig+0x174>
 8006458:	2300      	movs	r3, #0
 800645a:	77fb      	strb	r3, [r7, #31]
 800645c:	e0f1      	b.n	8006642 <UART_SetConfig+0x346>
 800645e:	2302      	movs	r3, #2
 8006460:	77fb      	strb	r3, [r7, #31]
 8006462:	e0ee      	b.n	8006642 <UART_SetConfig+0x346>
 8006464:	2304      	movs	r3, #4
 8006466:	77fb      	strb	r3, [r7, #31]
 8006468:	e0eb      	b.n	8006642 <UART_SetConfig+0x346>
 800646a:	2308      	movs	r3, #8
 800646c:	77fb      	strb	r3, [r7, #31]
 800646e:	e0e8      	b.n	8006642 <UART_SetConfig+0x346>
 8006470:	2310      	movs	r3, #16
 8006472:	77fb      	strb	r3, [r7, #31]
 8006474:	e0e5      	b.n	8006642 <UART_SetConfig+0x346>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a57      	ldr	r2, [pc, #348]	; (80065d8 <UART_SetConfig+0x2dc>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d120      	bne.n	80064c2 <UART_SetConfig+0x1c6>
 8006480:	4b52      	ldr	r3, [pc, #328]	; (80065cc <UART_SetConfig+0x2d0>)
 8006482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006486:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800648a:	2bc0      	cmp	r3, #192	; 0xc0
 800648c:	d013      	beq.n	80064b6 <UART_SetConfig+0x1ba>
 800648e:	2bc0      	cmp	r3, #192	; 0xc0
 8006490:	d814      	bhi.n	80064bc <UART_SetConfig+0x1c0>
 8006492:	2b80      	cmp	r3, #128	; 0x80
 8006494:	d009      	beq.n	80064aa <UART_SetConfig+0x1ae>
 8006496:	2b80      	cmp	r3, #128	; 0x80
 8006498:	d810      	bhi.n	80064bc <UART_SetConfig+0x1c0>
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <UART_SetConfig+0x1a8>
 800649e:	2b40      	cmp	r3, #64	; 0x40
 80064a0:	d006      	beq.n	80064b0 <UART_SetConfig+0x1b4>
 80064a2:	e00b      	b.n	80064bc <UART_SetConfig+0x1c0>
 80064a4:	2300      	movs	r3, #0
 80064a6:	77fb      	strb	r3, [r7, #31]
 80064a8:	e0cb      	b.n	8006642 <UART_SetConfig+0x346>
 80064aa:	2302      	movs	r3, #2
 80064ac:	77fb      	strb	r3, [r7, #31]
 80064ae:	e0c8      	b.n	8006642 <UART_SetConfig+0x346>
 80064b0:	2304      	movs	r3, #4
 80064b2:	77fb      	strb	r3, [r7, #31]
 80064b4:	e0c5      	b.n	8006642 <UART_SetConfig+0x346>
 80064b6:	2308      	movs	r3, #8
 80064b8:	77fb      	strb	r3, [r7, #31]
 80064ba:	e0c2      	b.n	8006642 <UART_SetConfig+0x346>
 80064bc:	2310      	movs	r3, #16
 80064be:	77fb      	strb	r3, [r7, #31]
 80064c0:	e0bf      	b.n	8006642 <UART_SetConfig+0x346>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a45      	ldr	r2, [pc, #276]	; (80065dc <UART_SetConfig+0x2e0>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d125      	bne.n	8006518 <UART_SetConfig+0x21c>
 80064cc:	4b3f      	ldr	r3, [pc, #252]	; (80065cc <UART_SetConfig+0x2d0>)
 80064ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064da:	d017      	beq.n	800650c <UART_SetConfig+0x210>
 80064dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064e0:	d817      	bhi.n	8006512 <UART_SetConfig+0x216>
 80064e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064e6:	d00b      	beq.n	8006500 <UART_SetConfig+0x204>
 80064e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ec:	d811      	bhi.n	8006512 <UART_SetConfig+0x216>
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <UART_SetConfig+0x1fe>
 80064f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064f6:	d006      	beq.n	8006506 <UART_SetConfig+0x20a>
 80064f8:	e00b      	b.n	8006512 <UART_SetConfig+0x216>
 80064fa:	2300      	movs	r3, #0
 80064fc:	77fb      	strb	r3, [r7, #31]
 80064fe:	e0a0      	b.n	8006642 <UART_SetConfig+0x346>
 8006500:	2302      	movs	r3, #2
 8006502:	77fb      	strb	r3, [r7, #31]
 8006504:	e09d      	b.n	8006642 <UART_SetConfig+0x346>
 8006506:	2304      	movs	r3, #4
 8006508:	77fb      	strb	r3, [r7, #31]
 800650a:	e09a      	b.n	8006642 <UART_SetConfig+0x346>
 800650c:	2308      	movs	r3, #8
 800650e:	77fb      	strb	r3, [r7, #31]
 8006510:	e097      	b.n	8006642 <UART_SetConfig+0x346>
 8006512:	2310      	movs	r3, #16
 8006514:	77fb      	strb	r3, [r7, #31]
 8006516:	e094      	b.n	8006642 <UART_SetConfig+0x346>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a30      	ldr	r2, [pc, #192]	; (80065e0 <UART_SetConfig+0x2e4>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d125      	bne.n	800656e <UART_SetConfig+0x272>
 8006522:	4b2a      	ldr	r3, [pc, #168]	; (80065cc <UART_SetConfig+0x2d0>)
 8006524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006528:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800652c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006530:	d017      	beq.n	8006562 <UART_SetConfig+0x266>
 8006532:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006536:	d817      	bhi.n	8006568 <UART_SetConfig+0x26c>
 8006538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800653c:	d00b      	beq.n	8006556 <UART_SetConfig+0x25a>
 800653e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006542:	d811      	bhi.n	8006568 <UART_SetConfig+0x26c>
 8006544:	2b00      	cmp	r3, #0
 8006546:	d003      	beq.n	8006550 <UART_SetConfig+0x254>
 8006548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800654c:	d006      	beq.n	800655c <UART_SetConfig+0x260>
 800654e:	e00b      	b.n	8006568 <UART_SetConfig+0x26c>
 8006550:	2301      	movs	r3, #1
 8006552:	77fb      	strb	r3, [r7, #31]
 8006554:	e075      	b.n	8006642 <UART_SetConfig+0x346>
 8006556:	2302      	movs	r3, #2
 8006558:	77fb      	strb	r3, [r7, #31]
 800655a:	e072      	b.n	8006642 <UART_SetConfig+0x346>
 800655c:	2304      	movs	r3, #4
 800655e:	77fb      	strb	r3, [r7, #31]
 8006560:	e06f      	b.n	8006642 <UART_SetConfig+0x346>
 8006562:	2308      	movs	r3, #8
 8006564:	77fb      	strb	r3, [r7, #31]
 8006566:	e06c      	b.n	8006642 <UART_SetConfig+0x346>
 8006568:	2310      	movs	r3, #16
 800656a:	77fb      	strb	r3, [r7, #31]
 800656c:	e069      	b.n	8006642 <UART_SetConfig+0x346>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a1c      	ldr	r2, [pc, #112]	; (80065e4 <UART_SetConfig+0x2e8>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d137      	bne.n	80065e8 <UART_SetConfig+0x2ec>
 8006578:	4b14      	ldr	r3, [pc, #80]	; (80065cc <UART_SetConfig+0x2d0>)
 800657a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800657e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006582:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006586:	d017      	beq.n	80065b8 <UART_SetConfig+0x2bc>
 8006588:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800658c:	d817      	bhi.n	80065be <UART_SetConfig+0x2c2>
 800658e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006592:	d00b      	beq.n	80065ac <UART_SetConfig+0x2b0>
 8006594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006598:	d811      	bhi.n	80065be <UART_SetConfig+0x2c2>
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <UART_SetConfig+0x2aa>
 800659e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a2:	d006      	beq.n	80065b2 <UART_SetConfig+0x2b6>
 80065a4:	e00b      	b.n	80065be <UART_SetConfig+0x2c2>
 80065a6:	2300      	movs	r3, #0
 80065a8:	77fb      	strb	r3, [r7, #31]
 80065aa:	e04a      	b.n	8006642 <UART_SetConfig+0x346>
 80065ac:	2302      	movs	r3, #2
 80065ae:	77fb      	strb	r3, [r7, #31]
 80065b0:	e047      	b.n	8006642 <UART_SetConfig+0x346>
 80065b2:	2304      	movs	r3, #4
 80065b4:	77fb      	strb	r3, [r7, #31]
 80065b6:	e044      	b.n	8006642 <UART_SetConfig+0x346>
 80065b8:	2308      	movs	r3, #8
 80065ba:	77fb      	strb	r3, [r7, #31]
 80065bc:	e041      	b.n	8006642 <UART_SetConfig+0x346>
 80065be:	2310      	movs	r3, #16
 80065c0:	77fb      	strb	r3, [r7, #31]
 80065c2:	e03e      	b.n	8006642 <UART_SetConfig+0x346>
 80065c4:	efff69f3 	.word	0xefff69f3
 80065c8:	40011000 	.word	0x40011000
 80065cc:	40023800 	.word	0x40023800
 80065d0:	40004400 	.word	0x40004400
 80065d4:	40004800 	.word	0x40004800
 80065d8:	40004c00 	.word	0x40004c00
 80065dc:	40005000 	.word	0x40005000
 80065e0:	40011400 	.word	0x40011400
 80065e4:	40007800 	.word	0x40007800
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a71      	ldr	r2, [pc, #452]	; (80067b4 <UART_SetConfig+0x4b8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d125      	bne.n	800663e <UART_SetConfig+0x342>
 80065f2:	4b71      	ldr	r3, [pc, #452]	; (80067b8 <UART_SetConfig+0x4bc>)
 80065f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80065fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006600:	d017      	beq.n	8006632 <UART_SetConfig+0x336>
 8006602:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006606:	d817      	bhi.n	8006638 <UART_SetConfig+0x33c>
 8006608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800660c:	d00b      	beq.n	8006626 <UART_SetConfig+0x32a>
 800660e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006612:	d811      	bhi.n	8006638 <UART_SetConfig+0x33c>
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <UART_SetConfig+0x324>
 8006618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800661c:	d006      	beq.n	800662c <UART_SetConfig+0x330>
 800661e:	e00b      	b.n	8006638 <UART_SetConfig+0x33c>
 8006620:	2300      	movs	r3, #0
 8006622:	77fb      	strb	r3, [r7, #31]
 8006624:	e00d      	b.n	8006642 <UART_SetConfig+0x346>
 8006626:	2302      	movs	r3, #2
 8006628:	77fb      	strb	r3, [r7, #31]
 800662a:	e00a      	b.n	8006642 <UART_SetConfig+0x346>
 800662c:	2304      	movs	r3, #4
 800662e:	77fb      	strb	r3, [r7, #31]
 8006630:	e007      	b.n	8006642 <UART_SetConfig+0x346>
 8006632:	2308      	movs	r3, #8
 8006634:	77fb      	strb	r3, [r7, #31]
 8006636:	e004      	b.n	8006642 <UART_SetConfig+0x346>
 8006638:	2310      	movs	r3, #16
 800663a:	77fb      	strb	r3, [r7, #31]
 800663c:	e001      	b.n	8006642 <UART_SetConfig+0x346>
 800663e:	2310      	movs	r3, #16
 8006640:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800664a:	d15b      	bne.n	8006704 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800664c:	7ffb      	ldrb	r3, [r7, #31]
 800664e:	2b08      	cmp	r3, #8
 8006650:	d827      	bhi.n	80066a2 <UART_SetConfig+0x3a6>
 8006652:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <UART_SetConfig+0x35c>)
 8006654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006658:	0800667d 	.word	0x0800667d
 800665c:	08006685 	.word	0x08006685
 8006660:	0800668d 	.word	0x0800668d
 8006664:	080066a3 	.word	0x080066a3
 8006668:	08006693 	.word	0x08006693
 800666c:	080066a3 	.word	0x080066a3
 8006670:	080066a3 	.word	0x080066a3
 8006674:	080066a3 	.word	0x080066a3
 8006678:	0800669b 	.word	0x0800669b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800667c:	f7fe fe7c 	bl	8005378 <HAL_RCC_GetPCLK1Freq>
 8006680:	61b8      	str	r0, [r7, #24]
        break;
 8006682:	e013      	b.n	80066ac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006684:	f7fe fe8c 	bl	80053a0 <HAL_RCC_GetPCLK2Freq>
 8006688:	61b8      	str	r0, [r7, #24]
        break;
 800668a:	e00f      	b.n	80066ac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800668c:	4b4b      	ldr	r3, [pc, #300]	; (80067bc <UART_SetConfig+0x4c0>)
 800668e:	61bb      	str	r3, [r7, #24]
        break;
 8006690:	e00c      	b.n	80066ac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006692:	f7fe fdaf 	bl	80051f4 <HAL_RCC_GetSysClockFreq>
 8006696:	61b8      	str	r0, [r7, #24]
        break;
 8006698:	e008      	b.n	80066ac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800669a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800669e:	61bb      	str	r3, [r7, #24]
        break;
 80066a0:	e004      	b.n	80066ac <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	77bb      	strb	r3, [r7, #30]
        break;
 80066aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d074      	beq.n	800679c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	005a      	lsls	r2, r3, #1
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	085b      	lsrs	r3, r3, #1
 80066bc:	441a      	add	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	2b0f      	cmp	r3, #15
 80066ce:	d916      	bls.n	80066fe <UART_SetConfig+0x402>
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d6:	d212      	bcs.n	80066fe <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	f023 030f 	bic.w	r3, r3, #15
 80066e0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	085b      	lsrs	r3, r3, #1
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	f003 0307 	and.w	r3, r3, #7
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	89fb      	ldrh	r3, [r7, #14]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	89fa      	ldrh	r2, [r7, #14]
 80066fa:	60da      	str	r2, [r3, #12]
 80066fc:	e04e      	b.n	800679c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	77bb      	strb	r3, [r7, #30]
 8006702:	e04b      	b.n	800679c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006704:	7ffb      	ldrb	r3, [r7, #31]
 8006706:	2b08      	cmp	r3, #8
 8006708:	d827      	bhi.n	800675a <UART_SetConfig+0x45e>
 800670a:	a201      	add	r2, pc, #4	; (adr r2, 8006710 <UART_SetConfig+0x414>)
 800670c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006710:	08006735 	.word	0x08006735
 8006714:	0800673d 	.word	0x0800673d
 8006718:	08006745 	.word	0x08006745
 800671c:	0800675b 	.word	0x0800675b
 8006720:	0800674b 	.word	0x0800674b
 8006724:	0800675b 	.word	0x0800675b
 8006728:	0800675b 	.word	0x0800675b
 800672c:	0800675b 	.word	0x0800675b
 8006730:	08006753 	.word	0x08006753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006734:	f7fe fe20 	bl	8005378 <HAL_RCC_GetPCLK1Freq>
 8006738:	61b8      	str	r0, [r7, #24]
        break;
 800673a:	e013      	b.n	8006764 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800673c:	f7fe fe30 	bl	80053a0 <HAL_RCC_GetPCLK2Freq>
 8006740:	61b8      	str	r0, [r7, #24]
        break;
 8006742:	e00f      	b.n	8006764 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006744:	4b1d      	ldr	r3, [pc, #116]	; (80067bc <UART_SetConfig+0x4c0>)
 8006746:	61bb      	str	r3, [r7, #24]
        break;
 8006748:	e00c      	b.n	8006764 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800674a:	f7fe fd53 	bl	80051f4 <HAL_RCC_GetSysClockFreq>
 800674e:	61b8      	str	r0, [r7, #24]
        break;
 8006750:	e008      	b.n	8006764 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006756:	61bb      	str	r3, [r7, #24]
        break;
 8006758:	e004      	b.n	8006764 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	77bb      	strb	r3, [r7, #30]
        break;
 8006762:	bf00      	nop
    }

    if (pclk != 0U)
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d018      	beq.n	800679c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	085a      	lsrs	r2, r3, #1
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	441a      	add	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	fbb2 f3f3 	udiv	r3, r2, r3
 800677c:	b29b      	uxth	r3, r3
 800677e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	2b0f      	cmp	r3, #15
 8006784:	d908      	bls.n	8006798 <UART_SetConfig+0x49c>
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800678c:	d204      	bcs.n	8006798 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	60da      	str	r2, [r3, #12]
 8006796:	e001      	b.n	800679c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80067a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3720      	adds	r7, #32
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	40007c00 	.word	0x40007c00
 80067b8:	40023800 	.word	0x40023800
 80067bc:	00f42400 	.word	0x00f42400

080067c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00a      	beq.n	80067ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00a      	beq.n	800682e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	f003 0308 	and.w	r3, r3, #8
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	f003 0310 	and.w	r3, r3, #16
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006876:	f003 0320 	and.w	r3, r3, #32
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01a      	beq.n	80068d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068be:	d10a      	bne.n	80068d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00a      	beq.n	80068f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	605a      	str	r2, [r3, #4]
  }
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af02      	add	r7, sp, #8
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006914:	f7fb fb88 	bl	8002028 <HAL_GetTick>
 8006918:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0308 	and.w	r3, r3, #8
 8006924:	2b08      	cmp	r3, #8
 8006926:	d10e      	bne.n	8006946 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f817 	bl	800696a <UART_WaitOnFlagUntilTimeout>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e00d      	b.n	8006962 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2220      	movs	r2, #32
 800694a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2220      	movs	r2, #32
 8006950:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b084      	sub	sp, #16
 800696e:	af00      	add	r7, sp, #0
 8006970:	60f8      	str	r0, [r7, #12]
 8006972:	60b9      	str	r1, [r7, #8]
 8006974:	603b      	str	r3, [r7, #0]
 8006976:	4613      	mov	r3, r2
 8006978:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800697a:	e05e      	b.n	8006a3a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006982:	d05a      	beq.n	8006a3a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006984:	f7fb fb50 	bl	8002028 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	429a      	cmp	r2, r3
 8006992:	d302      	bcc.n	800699a <UART_WaitOnFlagUntilTimeout+0x30>
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d11b      	bne.n	80069d2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80069a8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f022 0201 	bic.w	r2, r2, #1
 80069b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2220      	movs	r2, #32
 80069be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2220      	movs	r2, #32
 80069c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e043      	b.n	8006a5a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0304 	and.w	r3, r3, #4
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d02c      	beq.n	8006a3a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ee:	d124      	bne.n	8006a3a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a08:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 0201 	bic.w	r2, r2, #1
 8006a18:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2220      	movs	r2, #32
 8006a24:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e00f      	b.n	8006a5a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	69da      	ldr	r2, [r3, #28]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	4013      	ands	r3, r2
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	bf0c      	ite	eq
 8006a4a:	2301      	moveq	r3, #1
 8006a4c:	2300      	movne	r3, #0
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	461a      	mov	r2, r3
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d091      	beq.n	800697c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f043 0201 	orr.w	r2, r3, #1
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f023 0201 	bic.w	r2, r3, #1
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
	...

08006aa8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	019b      	lsls	r3, r3, #6
 8006aba:	f043 0220 	orr.w	r2, r3, #32
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4a09      	ldr	r2, [pc, #36]	; (8006af0 <USB_FlushTxFifo+0x48>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d901      	bls.n	8006ad4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e006      	b.n	8006ae2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	f003 0320 	and.w	r3, r3, #32
 8006adc:	2b20      	cmp	r3, #32
 8006ade:	d0f0      	beq.n	8006ac2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	00030d40 	.word	0x00030d40

08006af4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2210      	movs	r2, #16
 8006b04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4a09      	ldr	r2, [pc, #36]	; (8006b34 <USB_FlushRxFifo+0x40>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d901      	bls.n	8006b18 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e006      	b.n	8006b26 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	f003 0310 	and.w	r3, r3, #16
 8006b20:	2b10      	cmp	r3, #16
 8006b22:	d0f0      	beq.n	8006b06 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	00030d40 	.word	0x00030d40

08006b38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b089      	sub	sp, #36	; 0x24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	4611      	mov	r1, r2
 8006b44:	461a      	mov	r2, r3
 8006b46:	460b      	mov	r3, r1
 8006b48:	71fb      	strb	r3, [r7, #7]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006b56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d11a      	bne.n	8006b94 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006b5e:	88bb      	ldrh	r3, [r7, #4]
 8006b60:	3303      	adds	r3, #3
 8006b62:	089b      	lsrs	r3, r3, #2
 8006b64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006b66:	2300      	movs	r3, #0
 8006b68:	61bb      	str	r3, [r7, #24]
 8006b6a:	e00f      	b.n	8006b8c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006b6c:	79fb      	ldrb	r3, [r7, #7]
 8006b6e:	031a      	lsls	r2, r3, #12
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b78:	461a      	mov	r2, r3
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	3304      	adds	r3, #4
 8006b84:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	61bb      	str	r3, [r7, #24]
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d3eb      	bcc.n	8006b6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3724      	adds	r7, #36	; 0x24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b089      	sub	sp, #36	; 0x24
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	60f8      	str	r0, [r7, #12]
 8006baa:	60b9      	str	r1, [r7, #8]
 8006bac:	4613      	mov	r3, r2
 8006bae:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006bb8:	88fb      	ldrh	r3, [r7, #6]
 8006bba:	3303      	adds	r3, #3
 8006bbc:	089b      	lsrs	r3, r3, #2
 8006bbe:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	61bb      	str	r3, [r7, #24]
 8006bc4:	e00b      	b.n	8006bde <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	601a      	str	r2, [r3, #0]
    pDest++;
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	61bb      	str	r3, [r7, #24]
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d3ef      	bcc.n	8006bc6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006be6:	69fb      	ldr	r3, [r7, #28]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3724      	adds	r7, #36	; 0x24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b083      	sub	sp, #12
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	f003 0301 	and.w	r3, r3, #1
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b085      	sub	sp, #20
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c54:	f023 0303 	bic.w	r3, r3, #3
 8006c58:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	78fb      	ldrb	r3, [r7, #3]
 8006c64:	f003 0303 	and.w	r3, r3, #3
 8006c68:	68f9      	ldr	r1, [r7, #12]
 8006c6a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006c72:	78fb      	ldrb	r3, [r7, #3]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d107      	bne.n	8006c88 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006c84:	6053      	str	r3, [r2, #4]
 8006c86:	e009      	b.n	8006c9c <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006c88:	78fb      	ldrb	r3, [r7, #3]
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d106      	bne.n	8006c9c <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c94:	461a      	mov	r2, r3
 8006c96:	f241 7370 	movw	r3, #6000	; 0x1770
 8006c9a:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b084      	sub	sp, #16
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006cca:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006cda:	2064      	movs	r0, #100	; 0x64
 8006cdc:	f7fb f9b0 	bl	8002040 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cec:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006cee:	200a      	movs	r0, #10
 8006cf0:	f7fb f9a6 	bl	8002040 <HAL_Delay>

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b085      	sub	sp, #20
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	460b      	mov	r3, r1
 8006d08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006d22:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d109      	bne.n	8006d42 <USB_DriveVbus+0x44>
 8006d2e:	78fb      	ldrb	r3, [r7, #3]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d106      	bne.n	8006d42 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006d3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d40:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d4c:	d109      	bne.n	8006d62 <USB_DriveVbus+0x64>
 8006d4e:	78fb      	ldrb	r3, [r7, #3]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d106      	bne.n	8006d62 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006d5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d60:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	0c5b      	lsrs	r3, r3, #17
 8006d8e:	f003 0303 	and.w	r3, r3, #3
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
	...

08006da0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	4608      	mov	r0, r1
 8006daa:	4611      	mov	r1, r2
 8006dac:	461a      	mov	r2, r3
 8006dae:	4603      	mov	r3, r0
 8006db0:	70fb      	strb	r3, [r7, #3]
 8006db2:	460b      	mov	r3, r1
 8006db4:	70bb      	strb	r3, [r7, #2]
 8006db6:	4613      	mov	r3, r2
 8006db8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006dc2:	78fb      	ldrb	r3, [r7, #3]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dd4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006dd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d87e      	bhi.n	8006edc <USB_HC_Init+0x13c>
 8006dde:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <USB_HC_Init+0x44>)
 8006de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de4:	08006df5 	.word	0x08006df5
 8006de8:	08006e9f 	.word	0x08006e9f
 8006dec:	08006df5 	.word	0x08006df5
 8006df0:	08006e61 	.word	0x08006e61
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006df4:	78fb      	ldrb	r3, [r7, #3]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e00:	461a      	mov	r2, r3
 8006e02:	f240 439d 	movw	r3, #1181	; 0x49d
 8006e06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006e08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	da10      	bge.n	8006e32 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006e10:	78fb      	ldrb	r3, [r7, #3]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	78fa      	ldrb	r2, [r7, #3]
 8006e20:	0151      	lsls	r1, r2, #5
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	440a      	add	r2, r1
 8006e26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e2e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006e30:	e057      	b.n	8006ee2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d051      	beq.n	8006ee2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006e3e:	78fb      	ldrb	r3, [r7, #3]
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	78fa      	ldrb	r2, [r7, #3]
 8006e4e:	0151      	lsls	r1, r2, #5
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	440a      	add	r2, r1
 8006e54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e58:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006e5c:	60d3      	str	r3, [r2, #12]
      break;
 8006e5e:	e040      	b.n	8006ee2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e60:	78fb      	ldrb	r3, [r7, #3]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006e72:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006e74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	da34      	bge.n	8006ee6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006e7c:	78fb      	ldrb	r3, [r7, #3]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	78fa      	ldrb	r2, [r7, #3]
 8006e8c:	0151      	lsls	r1, r2, #5
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	440a      	add	r2, r1
 8006e92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e9a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006e9c:	e023      	b.n	8006ee6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e9e:	78fb      	ldrb	r3, [r7, #3]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eaa:	461a      	mov	r2, r3
 8006eac:	f240 2325 	movw	r3, #549	; 0x225
 8006eb0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006eb2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	da17      	bge.n	8006eea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006eba:	78fb      	ldrb	r3, [r7, #3]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	78fa      	ldrb	r2, [r7, #3]
 8006eca:	0151      	lsls	r1, r2, #5
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	440a      	add	r2, r1
 8006ed0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ed4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006ed8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006eda:	e006      	b.n	8006eea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	77fb      	strb	r3, [r7, #31]
      break;
 8006ee0:	e004      	b.n	8006eec <USB_HC_Init+0x14c>
      break;
 8006ee2:	bf00      	nop
 8006ee4:	e002      	b.n	8006eec <USB_HC_Init+0x14c>
      break;
 8006ee6:	bf00      	nop
 8006ee8:	e000      	b.n	8006eec <USB_HC_Init+0x14c>
      break;
 8006eea:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ef2:	699a      	ldr	r2, [r3, #24]
 8006ef4:	78fb      	ldrb	r3, [r7, #3]
 8006ef6:	f003 030f 	and.w	r3, r3, #15
 8006efa:	2101      	movs	r1, #1
 8006efc:	fa01 f303 	lsl.w	r3, r1, r3
 8006f00:	6939      	ldr	r1, [r7, #16]
 8006f02:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006f06:	4313      	orrs	r3, r2
 8006f08:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006f16:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	da03      	bge.n	8006f26 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f22:	61bb      	str	r3, [r7, #24]
 8006f24:	e001      	b.n	8006f2a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7ff ff20 	bl	8006d70 <USB_GetHostSpeed>
 8006f30:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006f32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d106      	bne.n	8006f48 <USB_HC_Init+0x1a8>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d003      	beq.n	8006f48 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006f40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f44:	617b      	str	r3, [r7, #20]
 8006f46:	e001      	b.n	8006f4c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f4c:	787b      	ldrb	r3, [r7, #1]
 8006f4e:	059b      	lsls	r3, r3, #22
 8006f50:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006f54:	78bb      	ldrb	r3, [r7, #2]
 8006f56:	02db      	lsls	r3, r3, #11
 8006f58:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f5c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f62:	049b      	lsls	r3, r3, #18
 8006f64:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006f68:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f6a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006f6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f70:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f76:	78fb      	ldrb	r3, [r7, #3]
 8006f78:	0159      	lsls	r1, r3, #5
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	440b      	add	r3, r1
 8006f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f82:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f88:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006f8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d10f      	bne.n	8006fb2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006f92:	78fb      	ldrb	r3, [r7, #3]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	78fa      	ldrb	r2, [r7, #3]
 8006fa2:	0151      	lsls	r1, r2, #5
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	440a      	add	r2, r1
 8006fa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fb0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006fb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3720      	adds	r7, #32
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08c      	sub	sp, #48	; 0x30
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	785b      	ldrb	r3, [r3, #1]
 8006fd2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fd8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d02d      	beq.n	8007042 <USB_HC_StartXfer+0x86>
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	791b      	ldrb	r3, [r3, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d129      	bne.n	8007042 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006fee:	79fb      	ldrb	r3, [r7, #7]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d117      	bne.n	8007024 <USB_HC_StartXfer+0x68>
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	79db      	ldrb	r3, [r3, #7]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <USB_HC_StartXfer+0x48>
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	79db      	ldrb	r3, [r3, #7]
 8007000:	2b02      	cmp	r3, #2
 8007002:	d10f      	bne.n	8007024 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	4413      	add	r3, r2
 800700c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	69fa      	ldr	r2, [r7, #28]
 8007014:	0151      	lsls	r1, r2, #5
 8007016:	6a3a      	ldr	r2, [r7, #32]
 8007018:	440a      	add	r2, r1
 800701a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800701e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007022:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007024:	79fb      	ldrb	r3, [r7, #7]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10b      	bne.n	8007042 <USB_HC_StartXfer+0x86>
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	795b      	ldrb	r3, [r3, #5]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d107      	bne.n	8007042 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	785b      	ldrb	r3, [r3, #1]
 8007036:	4619      	mov	r1, r3
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 fa2f 	bl	800749c <USB_DoPing>
      return HAL_OK;
 800703e:	2300      	movs	r3, #0
 8007040:	e0f8      	b.n	8007234 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d018      	beq.n	800707c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	8912      	ldrh	r2, [r2, #8]
 8007052:	4413      	add	r3, r2
 8007054:	3b01      	subs	r3, #1
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	8912      	ldrh	r2, [r2, #8]
 800705a:	fbb3 f3f2 	udiv	r3, r3, r2
 800705e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007060:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007062:	8b7b      	ldrh	r3, [r7, #26]
 8007064:	429a      	cmp	r2, r3
 8007066:	d90b      	bls.n	8007080 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007068:	8b7b      	ldrh	r3, [r7, #26]
 800706a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800706c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	8912      	ldrh	r2, [r2, #8]
 8007072:	fb02 f203 	mul.w	r2, r2, r3
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	611a      	str	r2, [r3, #16]
 800707a:	e001      	b.n	8007080 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800707c:	2301      	movs	r3, #1
 800707e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	78db      	ldrb	r3, [r3, #3]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d007      	beq.n	8007098 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007088:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	8912      	ldrh	r2, [r2, #8]
 800708e:	fb02 f203 	mul.w	r2, r2, r3
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	611a      	str	r2, [r3, #16]
 8007096:	e003      	b.n	80070a0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	695a      	ldr	r2, [r3, #20]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80070a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80070aa:	04d9      	lsls	r1, r3, #19
 80070ac:	4b63      	ldr	r3, [pc, #396]	; (800723c <USB_HC_StartXfer+0x280>)
 80070ae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80070b0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	7a9b      	ldrb	r3, [r3, #10]
 80070b6:	075b      	lsls	r3, r3, #29
 80070b8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80070bc:	69f9      	ldr	r1, [r7, #28]
 80070be:	0148      	lsls	r0, r1, #5
 80070c0:	6a39      	ldr	r1, [r7, #32]
 80070c2:	4401      	add	r1, r0
 80070c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80070c8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80070ca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80070cc:	79fb      	ldrb	r3, [r7, #7]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d009      	beq.n	80070e6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	68d9      	ldr	r1, [r3, #12]
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070e2:	460a      	mov	r2, r1
 80070e4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	bf0c      	ite	eq
 80070f6:	2301      	moveq	r3, #1
 80070f8:	2300      	movne	r3, #0
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	4413      	add	r3, r2
 8007106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	69fa      	ldr	r2, [r7, #28]
 800710e:	0151      	lsls	r1, r2, #5
 8007110:	6a3a      	ldr	r2, [r7, #32]
 8007112:	440a      	add	r2, r1
 8007114:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007118:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800711c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	4413      	add	r3, r2
 8007126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	7e7b      	ldrb	r3, [r7, #25]
 800712e:	075b      	lsls	r3, r3, #29
 8007130:	69f9      	ldr	r1, [r7, #28]
 8007132:	0148      	lsls	r0, r1, #5
 8007134:	6a39      	ldr	r1, [r7, #32]
 8007136:	4401      	add	r1, r0
 8007138:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800713c:	4313      	orrs	r3, r2
 800713e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	4413      	add	r3, r2
 8007148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007156:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	78db      	ldrb	r3, [r3, #3]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d004      	beq.n	800716a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007166:	613b      	str	r3, [r7, #16]
 8007168:	e003      	b.n	8007172 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007170:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007178:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	015a      	lsls	r2, r3, #5
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	4413      	add	r3, r2
 8007182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007186:	461a      	mov	r2, r3
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800718c:	79fb      	ldrb	r3, [r7, #7]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	e04e      	b.n	8007234 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	78db      	ldrb	r3, [r3, #3]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d149      	bne.n	8007232 <USB_HC_StartXfer+0x276>
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d045      	beq.n	8007232 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	79db      	ldrb	r3, [r3, #7]
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d830      	bhi.n	8007210 <USB_HC_StartXfer+0x254>
 80071ae:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <USB_HC_StartXfer+0x1f8>)
 80071b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b4:	080071c5 	.word	0x080071c5
 80071b8:	080071e9 	.word	0x080071e9
 80071bc:	080071c5 	.word	0x080071c5
 80071c0:	080071e9 	.word	0x080071e9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	3303      	adds	r3, #3
 80071ca:	089b      	lsrs	r3, r3, #2
 80071cc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80071ce:	8afa      	ldrh	r2, [r7, #22]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d91c      	bls.n	8007214 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	f043 0220 	orr.w	r2, r3, #32
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	619a      	str	r2, [r3, #24]
        }
        break;
 80071e6:	e015      	b.n	8007214 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	3303      	adds	r3, #3
 80071ee:	089b      	lsrs	r3, r3, #2
 80071f0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80071f2:	8afa      	ldrh	r2, [r7, #22]
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	429a      	cmp	r2, r3
 8007200:	d90a      	bls.n	8007218 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	619a      	str	r2, [r3, #24]
        }
        break;
 800720e:	e003      	b.n	8007218 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007210:	bf00      	nop
 8007212:	e002      	b.n	800721a <USB_HC_StartXfer+0x25e>
        break;
 8007214:	bf00      	nop
 8007216:	e000      	b.n	800721a <USB_HC_StartXfer+0x25e>
        break;
 8007218:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	68d9      	ldr	r1, [r3, #12]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	785a      	ldrb	r2, [r3, #1]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	b29b      	uxth	r3, r3
 8007228:	2000      	movs	r0, #0
 800722a:	9000      	str	r0, [sp, #0]
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f7ff fc83 	bl	8006b38 <USB_WritePacket>
  }

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3728      	adds	r7, #40	; 0x28
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	1ff80000 	.word	0x1ff80000

08007240 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	b29b      	uxth	r3, r3
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007262:	b480      	push	{r7}
 8007264:	b089      	sub	sp, #36	; 0x24
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	460b      	mov	r3, r1
 800726c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007272:	78fb      	ldrb	r3, [r7, #3]
 8007274:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	4413      	add	r3, r2
 8007282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	0c9b      	lsrs	r3, r3, #18
 800728a:	f003 0303 	and.w	r3, r3, #3
 800728e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	4413      	add	r3, r2
 8007298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	0fdb      	lsrs	r3, r3, #31
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b20      	cmp	r3, #32
 80072b0:	d104      	bne.n	80072bc <USB_HC_Halt+0x5a>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	e0e8      	b.n	800748e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <USB_HC_Halt+0x66>
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d173      	bne.n	80073b0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	0151      	lsls	r1, r2, #5
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	440a      	add	r2, r1
 80072de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072e6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f003 0320 	and.w	r3, r3, #32
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f040 80cb 	bne.w	800748c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d143      	bne.n	800738a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	4413      	add	r3, r2
 800730a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	0151      	lsls	r1, r2, #5
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	440a      	add	r2, r1
 8007318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800731c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007320:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	4413      	add	r3, r2
 800732a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	0151      	lsls	r1, r2, #5
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	440a      	add	r2, r1
 8007338:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800733c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007340:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	4413      	add	r3, r2
 800734a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	0151      	lsls	r1, r2, #5
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	440a      	add	r2, r1
 8007358:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800735c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007360:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	3301      	adds	r3, #1
 8007366:	61fb      	str	r3, [r7, #28]
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800736e:	d81d      	bhi.n	80073ac <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	4413      	add	r3, r2
 8007378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007382:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007386:	d0ec      	beq.n	8007362 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007388:	e080      	b.n	800748c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	4413      	add	r3, r2
 8007392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	0151      	lsls	r1, r2, #5
 800739c:	69ba      	ldr	r2, [r7, #24]
 800739e:	440a      	add	r2, r1
 80073a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073a8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80073aa:	e06f      	b.n	800748c <USB_HC_Halt+0x22a>
            break;
 80073ac:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80073ae:	e06d      	b.n	800748c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	015a      	lsls	r2, r3, #5
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	0151      	lsls	r1, r2, #5
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	440a      	add	r2, r1
 80073c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073ce:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d143      	bne.n	8007468 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	0151      	lsls	r1, r2, #5
 80073f2:	69ba      	ldr	r2, [r7, #24]
 80073f4:	440a      	add	r2, r1
 80073f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	015a      	lsls	r2, r3, #5
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	4413      	add	r3, r2
 8007408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	0151      	lsls	r1, r2, #5
 8007412:	69ba      	ldr	r2, [r7, #24]
 8007414:	440a      	add	r2, r1
 8007416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800741a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800741e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	4413      	add	r3, r2
 8007428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	0151      	lsls	r1, r2, #5
 8007432:	69ba      	ldr	r2, [r7, #24]
 8007434:	440a      	add	r2, r1
 8007436:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800743a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800743e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	3301      	adds	r3, #1
 8007444:	61fb      	str	r3, [r7, #28]
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800744c:	d81d      	bhi.n	800748a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	4413      	add	r3, r2
 8007456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007464:	d0ec      	beq.n	8007440 <USB_HC_Halt+0x1de>
 8007466:	e011      	b.n	800748c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	4413      	add	r3, r2
 8007470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	0151      	lsls	r1, r2, #5
 800747a:	69ba      	ldr	r2, [r7, #24]
 800747c:	440a      	add	r2, r1
 800747e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007482:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	e000      	b.n	800748c <USB_HC_Halt+0x22a>
          break;
 800748a:	bf00      	nop
    }
  }

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3724      	adds	r7, #36	; 0x24
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
	...

0800749c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800749c:	b480      	push	{r7}
 800749e:	b087      	sub	sp, #28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	460b      	mov	r3, r1
 80074a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80074ac:	78fb      	ldrb	r3, [r7, #3]
 80074ae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80074b0:	2301      	movs	r3, #1
 80074b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	04da      	lsls	r2, r3, #19
 80074b8:	4b15      	ldr	r3, [pc, #84]	; (8007510 <USB_DoPing+0x74>)
 80074ba:	4013      	ands	r3, r2
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	0151      	lsls	r1, r2, #5
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	440a      	add	r2, r1
 80074c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074cc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	015a      	lsls	r2, r3, #5
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	4413      	add	r3, r2
 80074d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80074e4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074ec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	015a      	lsls	r2, r3, #5
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	4413      	add	r3, r2
 80074f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074fa:	461a      	mov	r2, r3
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	371c      	adds	r7, #28
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	1ff80000 	.word	0x1ff80000

08007514 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007520:	2300      	movs	r3, #0
 8007522:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7ff faad 	bl	8006a84 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800752a:	2110      	movs	r1, #16
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f7ff fabb 	bl	8006aa8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7ff fade 	bl	8006af4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007538:	2300      	movs	r3, #0
 800753a:	613b      	str	r3, [r7, #16]
 800753c:	e01f      	b.n	800757e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	4413      	add	r3, r2
 8007546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007554:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800755c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007564:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	4413      	add	r3, r2
 800756e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007572:	461a      	mov	r2, r3
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	3301      	adds	r3, #1
 800757c:	613b      	str	r3, [r7, #16]
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	2b0f      	cmp	r3, #15
 8007582:	d9dc      	bls.n	800753e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007584:	2300      	movs	r3, #0
 8007586:	613b      	str	r3, [r7, #16]
 8007588:	e034      	b.n	80075f4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	4413      	add	r3, r2
 8007592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075a0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075b0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075be:	461a      	mov	r2, r3
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	3301      	adds	r3, #1
 80075c8:	617b      	str	r3, [r7, #20]
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075d0:	d80c      	bhi.n	80075ec <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	015a      	lsls	r2, r3, #5
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075e8:	d0ec      	beq.n	80075c4 <USB_StopHost+0xb0>
 80075ea:	e000      	b.n	80075ee <USB_StopHost+0xda>
        break;
 80075ec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	3301      	adds	r3, #1
 80075f2:	613b      	str	r3, [r7, #16]
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	2b0f      	cmp	r3, #15
 80075f8:	d9c7      	bls.n	800758a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007600:	461a      	mov	r2, r3
 8007602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007606:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800760e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7ff fa26 	bl	8006a62 <USB_EnableGlobalInt>

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3718      	adds	r7, #24
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800762c:	2300      	movs	r3, #0
 800762e:	60fb      	str	r3, [r7, #12]
 8007630:	e009      	b.n	8007646 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	33e0      	adds	r3, #224	; 0xe0
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	2200      	movs	r2, #0
 800763e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	3301      	adds	r3, #1
 8007644:	60fb      	str	r3, [r7, #12]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2b0e      	cmp	r3, #14
 800764a:	d9f2      	bls.n	8007632 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800764c:	2300      	movs	r3, #0
 800764e:	60fb      	str	r3, [r7, #12]
 8007650:	e009      	b.n	8007666 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4413      	add	r3, r2
 8007658:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800765c:	2200      	movs	r2, #0
 800765e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	3301      	adds	r3, #1
 8007664:	60fb      	str	r3, [r7, #12]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800766c:	d3f1      	bcc.n	8007652 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2240      	movs	r2, #64	; 0x40
 8007692:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 fa11 	bl	8008af8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80076d6:	2101      	movs	r1, #1
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f001 faf8 	bl	8008cce <USBH_LL_DriverVBUS>

  return USBH_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b088      	sub	sp, #32
 80076ec:	af04      	add	r7, sp, #16
 80076ee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80076f0:	2302      	movs	r3, #2
 80076f2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80076f4:	2300      	movs	r3, #0
 80076f6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b01      	cmp	r3, #1
 8007702:	d102      	bne.n	800770a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2203      	movs	r2, #3
 8007708:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b0b      	cmp	r3, #11
 8007712:	f200 81b3 	bhi.w	8007a7c <USBH_Process+0x394>
 8007716:	a201      	add	r2, pc, #4	; (adr r2, 800771c <USBH_Process+0x34>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	0800774d 	.word	0x0800774d
 8007720:	0800777f 	.word	0x0800777f
 8007724:	080077e7 	.word	0x080077e7
 8007728:	08007a17 	.word	0x08007a17
 800772c:	08007a7d 	.word	0x08007a7d
 8007730:	0800788b 	.word	0x0800788b
 8007734:	080079bd 	.word	0x080079bd
 8007738:	080078c1 	.word	0x080078c1
 800773c:	080078e1 	.word	0x080078e1
 8007740:	08007901 	.word	0x08007901
 8007744:	0800792f 	.word	0x0800792f
 8007748:	080079ff 	.word	0x080079ff
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 8193 	beq.w	8007a80 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007760:	20c8      	movs	r0, #200	; 0xc8
 8007762:	f001 facb 	bl	8008cfc <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f001 fa23 	bl	8008bb2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800777c:	e180      	b.n	8007a80 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007784:	2b01      	cmp	r3, #1
 8007786:	d107      	bne.n	8007798 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007796:	e182      	b.n	8007a9e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800779e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077a2:	d914      	bls.n	80077ce <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80077aa:	3301      	adds	r3, #1
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d903      	bls.n	80077c6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	220d      	movs	r2, #13
 80077c2:	701a      	strb	r2, [r3, #0]
      break;
 80077c4:	e16b      	b.n	8007a9e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	701a      	strb	r2, [r3, #0]
      break;
 80077cc:	e167      	b.n	8007a9e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80077d4:	f103 020a 	add.w	r2, r3, #10
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80077de:	200a      	movs	r0, #10
 80077e0:	f001 fa8c 	bl	8008cfc <USBH_Delay>
      break;
 80077e4:	e15b      	b.n	8007a9e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d005      	beq.n	80077fc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077f6:	2104      	movs	r1, #4
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80077fc:	2064      	movs	r0, #100	; 0x64
 80077fe:	f001 fa7d 	bl	8008cfc <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f001 f9ae 	bl	8008b64 <USBH_LL_GetSpeed>
 8007808:	4603      	mov	r3, r0
 800780a:	461a      	mov	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2205      	movs	r2, #5
 8007816:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007818:	2100      	movs	r1, #0
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f001 f8aa 	bl	8008974 <USBH_AllocPipe>
 8007820:	4603      	mov	r3, r0
 8007822:	461a      	mov	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007828:	2180      	movs	r1, #128	; 0x80
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f001 f8a2 	bl	8008974 <USBH_AllocPipe>
 8007830:	4603      	mov	r3, r0
 8007832:	461a      	mov	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	7919      	ldrb	r1, [r3, #4]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800784c:	b292      	uxth	r2, r2
 800784e:	9202      	str	r2, [sp, #8]
 8007850:	2200      	movs	r2, #0
 8007852:	9201      	str	r2, [sp, #4]
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	4603      	mov	r3, r0
 8007858:	2280      	movs	r2, #128	; 0x80
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 f86b 	bl	8008936 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	7959      	ldrb	r1, [r3, #5]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007874:	b292      	uxth	r2, r2
 8007876:	9202      	str	r2, [sp, #8]
 8007878:	2200      	movs	r2, #0
 800787a:	9201      	str	r2, [sp, #4]
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	4603      	mov	r3, r0
 8007880:	2200      	movs	r2, #0
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f001 f857 	bl	8008936 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007888:	e109      	b.n	8007a9e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f90c 	bl	8007aa8 <USBH_HandleEnum>
 8007890:	4603      	mov	r3, r0
 8007892:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007894:	7bbb      	ldrb	r3, [r7, #14]
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	f040 80f3 	bne.w	8007a84 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d103      	bne.n	80078b8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2208      	movs	r2, #8
 80078b4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80078b6:	e0e5      	b.n	8007a84 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2207      	movs	r2, #7
 80078bc:	701a      	strb	r2, [r3, #0]
      break;
 80078be:	e0e1      	b.n	8007a84 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 80de 	beq.w	8007a88 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078d2:	2101      	movs	r1, #1
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2208      	movs	r2, #8
 80078dc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80078de:	e0d3      	b.n	8007a88 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	4619      	mov	r1, r3
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fc11 	bl	8008112 <USBH_SetCfg>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f040 80ca 	bne.w	8007a8c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2209      	movs	r2, #9
 80078fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80078fe:	e0c5      	b.n	8007a8c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007906:	f003 0320 	and.w	r3, r3, #32
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00b      	beq.n	8007926 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800790e:	2101      	movs	r1, #1
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fc21 	bl	8008158 <USBH_SetFeature>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	f040 80b9 	bne.w	8007a90 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	220a      	movs	r2, #10
 8007922:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007924:	e0b4      	b.n	8007a90 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	220a      	movs	r2, #10
 800792a:	701a      	strb	r2, [r3, #0]
      break;
 800792c:	e0b0      	b.n	8007a90 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007934:	2b00      	cmp	r3, #0
 8007936:	f000 80ad 	beq.w	8007a94 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007942:	2300      	movs	r3, #0
 8007944:	73fb      	strb	r3, [r7, #15]
 8007946:	e016      	b.n	8007976 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007948:	7bfa      	ldrb	r2, [r7, #15]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	32de      	adds	r2, #222	; 0xde
 800794e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007952:	791a      	ldrb	r2, [r3, #4]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800795a:	429a      	cmp	r2, r3
 800795c:	d108      	bne.n	8007970 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800795e:	7bfa      	ldrb	r2, [r7, #15]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	32de      	adds	r2, #222	; 0xde
 8007964:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800796e:	e005      	b.n	800797c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	3301      	adds	r3, #1
 8007974:	73fb      	strb	r3, [r7, #15]
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d0e5      	beq.n	8007948 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007982:	2b00      	cmp	r3, #0
 8007984:	d016      	beq.n	80079b4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	4798      	blx	r3
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d109      	bne.n	80079ac <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2206      	movs	r2, #6
 800799c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079a4:	2103      	movs	r1, #3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80079aa:	e073      	b.n	8007a94 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	220d      	movs	r2, #13
 80079b0:	701a      	strb	r2, [r3, #0]
      break;
 80079b2:	e06f      	b.n	8007a94 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	220d      	movs	r2, #13
 80079b8:	701a      	strb	r2, [r3, #0]
      break;
 80079ba:	e06b      	b.n	8007a94 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d017      	beq.n	80079f6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	4798      	blx	r3
 80079d2:	4603      	mov	r3, r0
 80079d4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d103      	bne.n	80079e6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	220b      	movs	r2, #11
 80079e2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80079e4:	e058      	b.n	8007a98 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80079e6:	7bbb      	ldrb	r3, [r7, #14]
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d154      	bne.n	8007a98 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	220d      	movs	r2, #13
 80079f2:	701a      	strb	r2, [r3, #0]
      break;
 80079f4:	e050      	b.n	8007a98 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	220d      	movs	r2, #13
 80079fa:	701a      	strb	r2, [r3, #0]
      break;
 80079fc:	e04c      	b.n	8007a98 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d049      	beq.n	8007a9c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a0e:	695b      	ldr	r3, [r3, #20]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	4798      	blx	r3
      }
      break;
 8007a14:	e042      	b.n	8007a9c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7ff fdfe 	bl	8007620 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d009      	beq.n	8007a42 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d005      	beq.n	8007a58 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a52:	2105      	movs	r1, #5
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d107      	bne.n	8007a74 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7ff fe2b 	bl	80076c8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a72:	e014      	b.n	8007a9e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 f83f 	bl	8008af8 <USBH_LL_Start>
      break;
 8007a7a:	e010      	b.n	8007a9e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007a7c:	bf00      	nop
 8007a7e:	e00e      	b.n	8007a9e <USBH_Process+0x3b6>
      break;
 8007a80:	bf00      	nop
 8007a82:	e00c      	b.n	8007a9e <USBH_Process+0x3b6>
      break;
 8007a84:	bf00      	nop
 8007a86:	e00a      	b.n	8007a9e <USBH_Process+0x3b6>
    break;
 8007a88:	bf00      	nop
 8007a8a:	e008      	b.n	8007a9e <USBH_Process+0x3b6>
      break;
 8007a8c:	bf00      	nop
 8007a8e:	e006      	b.n	8007a9e <USBH_Process+0x3b6>
      break;
 8007a90:	bf00      	nop
 8007a92:	e004      	b.n	8007a9e <USBH_Process+0x3b6>
      break;
 8007a94:	bf00      	nop
 8007a96:	e002      	b.n	8007a9e <USBH_Process+0x3b6>
      break;
 8007a98:	bf00      	nop
 8007a9a:	e000      	b.n	8007a9e <USBH_Process+0x3b6>
      break;
 8007a9c:	bf00      	nop
  }
  return USBH_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b088      	sub	sp, #32
 8007aac:	af04      	add	r7, sp, #16
 8007aae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	785b      	ldrb	r3, [r3, #1]
 8007abc:	2b07      	cmp	r3, #7
 8007abe:	f200 81c1 	bhi.w	8007e44 <USBH_HandleEnum+0x39c>
 8007ac2:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <USBH_HandleEnum+0x20>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007ae9 	.word	0x08007ae9
 8007acc:	08007ba7 	.word	0x08007ba7
 8007ad0:	08007c11 	.word	0x08007c11
 8007ad4:	08007c9f 	.word	0x08007c9f
 8007ad8:	08007d09 	.word	0x08007d09
 8007adc:	08007d79 	.word	0x08007d79
 8007ae0:	08007dbf 	.word	0x08007dbf
 8007ae4:	08007e05 	.word	0x08007e05
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007ae8:	2108      	movs	r1, #8
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fa41 	bl	8007f72 <USBH_Get_DevDesc>
 8007af0:	4603      	mov	r3, r0
 8007af2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d130      	bne.n	8007b5c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	7919      	ldrb	r1, [r3, #4]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007b1e:	b292      	uxth	r2, r2
 8007b20:	9202      	str	r2, [sp, #8]
 8007b22:	2200      	movs	r2, #0
 8007b24:	9201      	str	r2, [sp, #4]
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2280      	movs	r2, #128	; 0x80
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 ff02 	bl	8008936 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	7959      	ldrb	r1, [r3, #5]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b46:	b292      	uxth	r2, r2
 8007b48:	9202      	str	r2, [sp, #8]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	9201      	str	r2, [sp, #4]
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	4603      	mov	r3, r0
 8007b52:	2200      	movs	r2, #0
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 feee 	bl	8008936 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b5a:	e175      	b.n	8007e48 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b5c:	7bbb      	ldrb	r3, [r7, #14]
 8007b5e:	2b03      	cmp	r3, #3
 8007b60:	f040 8172 	bne.w	8007e48 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	b2da      	uxtb	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b7a:	2b03      	cmp	r3, #3
 8007b7c:	d903      	bls.n	8007b86 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	220d      	movs	r2, #13
 8007b82:	701a      	strb	r2, [r3, #0]
      break;
 8007b84:	e160      	b.n	8007e48 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	795b      	ldrb	r3, [r3, #5]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 ff12 	bl	80089b6 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	791b      	ldrb	r3, [r3, #4]
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 ff0c 	bl	80089b6 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	701a      	strb	r2, [r3, #0]
      break;
 8007ba4:	e150      	b.n	8007e48 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007ba6:	2112      	movs	r1, #18
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f9e2 	bl	8007f72 <USBH_Get_DevDesc>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bb2:	7bbb      	ldrb	r3, [r7, #14]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d103      	bne.n	8007bc0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007bbe:	e145      	b.n	8007e4c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bc0:	7bbb      	ldrb	r3, [r7, #14]
 8007bc2:	2b03      	cmp	r3, #3
 8007bc4:	f040 8142 	bne.w	8007e4c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bce:	3301      	adds	r3, #1
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d903      	bls.n	8007bea <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	220d      	movs	r2, #13
 8007be6:	701a      	strb	r2, [r3, #0]
      break;
 8007be8:	e130      	b.n	8007e4c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	795b      	ldrb	r3, [r3, #5]
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fee0 	bl	80089b6 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	791b      	ldrb	r3, [r3, #4]
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 feda 	bl	80089b6 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	701a      	strb	r2, [r3, #0]
      break;
 8007c0e:	e11d      	b.n	8007e4c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007c10:	2101      	movs	r1, #1
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fa59 	bl	80080ca <USBH_SetAddress>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c1c:	7bbb      	ldrb	r3, [r7, #14]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d132      	bne.n	8007c88 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007c22:	2002      	movs	r0, #2
 8007c24:	f001 f86a 	bl	8008cfc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2203      	movs	r2, #3
 8007c34:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	7919      	ldrb	r1, [r3, #4]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007c4a:	b292      	uxth	r2, r2
 8007c4c:	9202      	str	r2, [sp, #8]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	9201      	str	r2, [sp, #4]
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	4603      	mov	r3, r0
 8007c56:	2280      	movs	r2, #128	; 0x80
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fe6c 	bl	8008936 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	7959      	ldrb	r1, [r3, #5]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c72:	b292      	uxth	r2, r2
 8007c74:	9202      	str	r2, [sp, #8]
 8007c76:	2200      	movs	r2, #0
 8007c78:	9201      	str	r2, [sp, #4]
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2200      	movs	r2, #0
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fe58 	bl	8008936 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007c86:	e0e3      	b.n	8007e50 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c88:	7bbb      	ldrb	r3, [r7, #14]
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	f040 80e0 	bne.w	8007e50 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	220d      	movs	r2, #13
 8007c94:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	705a      	strb	r2, [r3, #1]
      break;
 8007c9c:	e0d8      	b.n	8007e50 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007c9e:	2109      	movs	r1, #9
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f98e 	bl	8007fc2 <USBH_Get_CfgDesc>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007caa:	7bbb      	ldrb	r3, [r7, #14]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d103      	bne.n	8007cb8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2204      	movs	r2, #4
 8007cb4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007cb6:	e0cd      	b.n	8007e54 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cb8:	7bbb      	ldrb	r3, [r7, #14]
 8007cba:	2b03      	cmp	r3, #3
 8007cbc:	f040 80ca 	bne.w	8007e54 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	d903      	bls.n	8007ce2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	220d      	movs	r2, #13
 8007cde:	701a      	strb	r2, [r3, #0]
      break;
 8007ce0:	e0b8      	b.n	8007e54 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	795b      	ldrb	r3, [r3, #5]
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fe64 	bl	80089b6 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	791b      	ldrb	r3, [r3, #4]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fe5e 	bl	80089b6 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	701a      	strb	r2, [r3, #0]
      break;
 8007d06:	e0a5      	b.n	8007e54 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f956 	bl	8007fc2 <USBH_Get_CfgDesc>
 8007d16:	4603      	mov	r3, r0
 8007d18:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d103      	bne.n	8007d28 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2205      	movs	r2, #5
 8007d24:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d26:	e097      	b.n	8007e58 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d28:	7bbb      	ldrb	r3, [r7, #14]
 8007d2a:	2b03      	cmp	r3, #3
 8007d2c:	f040 8094 	bne.w	8007e58 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d36:	3301      	adds	r3, #1
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d903      	bls.n	8007d52 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	220d      	movs	r2, #13
 8007d4e:	701a      	strb	r2, [r3, #0]
      break;
 8007d50:	e082      	b.n	8007e58 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	795b      	ldrb	r3, [r3, #5]
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fe2c 	bl	80089b6 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	791b      	ldrb	r3, [r3, #4]
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fe26 	bl	80089b6 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	701a      	strb	r2, [r3, #0]
      break;
 8007d76:	e06f      	b.n	8007e58 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d019      	beq.n	8007db6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007d8e:	23ff      	movs	r3, #255	; 0xff
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f93a 	bl	800800a <USBH_Get_StringDesc>
 8007d96:	4603      	mov	r3, r0
 8007d98:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d9a:	7bbb      	ldrb	r3, [r7, #14]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d103      	bne.n	8007da8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2206      	movs	r2, #6
 8007da4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007da6:	e059      	b.n	8007e5c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d156      	bne.n	8007e5c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2206      	movs	r2, #6
 8007db2:	705a      	strb	r2, [r3, #1]
      break;
 8007db4:	e052      	b.n	8007e5c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2206      	movs	r2, #6
 8007dba:	705a      	strb	r2, [r3, #1]
      break;
 8007dbc:	e04e      	b.n	8007e5c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d019      	beq.n	8007dfc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007dd4:	23ff      	movs	r3, #255	; 0xff
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f917 	bl	800800a <USBH_Get_StringDesc>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007de0:	7bbb      	ldrb	r3, [r7, #14]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d103      	bne.n	8007dee <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2207      	movs	r2, #7
 8007dea:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007dec:	e038      	b.n	8007e60 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dee:	7bbb      	ldrb	r3, [r7, #14]
 8007df0:	2b03      	cmp	r3, #3
 8007df2:	d135      	bne.n	8007e60 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2207      	movs	r2, #7
 8007df8:	705a      	strb	r2, [r3, #1]
      break;
 8007dfa:	e031      	b.n	8007e60 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2207      	movs	r2, #7
 8007e00:	705a      	strb	r2, [r3, #1]
      break;
 8007e02:	e02d      	b.n	8007e60 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d017      	beq.n	8007e3e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007e1a:	23ff      	movs	r3, #255	; 0xff
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f8f4 	bl	800800a <USBH_Get_StringDesc>
 8007e22:	4603      	mov	r3, r0
 8007e24:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e26:	7bbb      	ldrb	r3, [r7, #14]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d102      	bne.n	8007e32 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007e30:	e018      	b.n	8007e64 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	2b03      	cmp	r3, #3
 8007e36:	d115      	bne.n	8007e64 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e3c:	e012      	b.n	8007e64 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	73fb      	strb	r3, [r7, #15]
      break;
 8007e42:	e00f      	b.n	8007e64 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007e44:	bf00      	nop
 8007e46:	e00e      	b.n	8007e66 <USBH_HandleEnum+0x3be>
      break;
 8007e48:	bf00      	nop
 8007e4a:	e00c      	b.n	8007e66 <USBH_HandleEnum+0x3be>
      break;
 8007e4c:	bf00      	nop
 8007e4e:	e00a      	b.n	8007e66 <USBH_HandleEnum+0x3be>
      break;
 8007e50:	bf00      	nop
 8007e52:	e008      	b.n	8007e66 <USBH_HandleEnum+0x3be>
      break;
 8007e54:	bf00      	nop
 8007e56:	e006      	b.n	8007e66 <USBH_HandleEnum+0x3be>
      break;
 8007e58:	bf00      	nop
 8007e5a:	e004      	b.n	8007e66 <USBH_HandleEnum+0x3be>
      break;
 8007e5c:	bf00      	nop
 8007e5e:	e002      	b.n	8007e66 <USBH_HandleEnum+0x3be>
      break;
 8007e60:	bf00      	nop
 8007e62:	e000      	b.n	8007e66 <USBH_HandleEnum+0x3be>
      break;
 8007e64:	bf00      	nop
  }
  return Status;
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e7e:	1c5a      	adds	r2, r3, #1
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f804 	bl	8007e94 <USBH_HandleSof>
}
 8007e8c:	bf00      	nop
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b0b      	cmp	r3, #11
 8007ea4:	d10a      	bne.n	8007ebc <USBH_HandleSof+0x28>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d005      	beq.n	8007ebc <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	4798      	blx	r3
  }
}
 8007ebc:	bf00      	nop
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007ed4:	bf00      	nop
}
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007ef0:	bf00      	nop
}
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b082      	sub	sp, #8
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fdef 	bl	8008b2e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	791b      	ldrb	r3, [r3, #4]
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fd2d 	bl	80089b6 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	795b      	ldrb	r3, [r3, #5]
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fd27 	bl	80089b6 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b086      	sub	sp, #24
 8007f76:	af02      	add	r7, sp, #8
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007f84:	78fb      	ldrb	r3, [r7, #3]
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f90:	2100      	movs	r1, #0
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f864 	bl	8008060 <USBH_GetDescriptor>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	73fb      	strb	r3, [r7, #15]
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10a      	bne.n	8007fb8 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007fae:	78fa      	ldrb	r2, [r7, #3]
 8007fb0:	b292      	uxth	r2, r2
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	f000 f8f4 	bl	80081a0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b086      	sub	sp, #24
 8007fc6:	af02      	add	r7, sp, #8
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	460b      	mov	r3, r1
 8007fcc:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	331c      	adds	r3, #28
 8007fd2:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007fd4:	887b      	ldrh	r3, [r7, #2]
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fde:	2100      	movs	r1, #0
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f83d 	bl	8008060 <USBH_GetDescriptor>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	72fb      	strb	r3, [r7, #11]
 8007fea:	7afb      	ldrb	r3, [r7, #11]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d107      	bne.n	8008000 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007ff6:	887a      	ldrh	r2, [r7, #2]
 8007ff8:	68f9      	ldr	r1, [r7, #12]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 f940 	bl	8008280 <USBH_ParseCfgDesc>
  }

  return status;
 8008000:	7afb      	ldrb	r3, [r7, #11]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b088      	sub	sp, #32
 800800e:	af02      	add	r7, sp, #8
 8008010:	60f8      	str	r0, [r7, #12]
 8008012:	607a      	str	r2, [r7, #4]
 8008014:	461a      	mov	r2, r3
 8008016:	460b      	mov	r3, r1
 8008018:	72fb      	strb	r3, [r7, #11]
 800801a:	4613      	mov	r3, r2
 800801c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800801e:	7afb      	ldrb	r3, [r7, #11]
 8008020:	b29b      	uxth	r3, r3
 8008022:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008026:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800802e:	893b      	ldrh	r3, [r7, #8]
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	460b      	mov	r3, r1
 8008034:	2100      	movs	r1, #0
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 f812 	bl	8008060 <USBH_GetDescriptor>
 800803c:	4603      	mov	r3, r0
 800803e:	75fb      	strb	r3, [r7, #23]
 8008040:	7dfb      	ldrb	r3, [r7, #23]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d107      	bne.n	8008056 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800804c:	893a      	ldrh	r2, [r7, #8]
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	4618      	mov	r0, r3
 8008052:	f000 fa13 	bl	800847c <USBH_ParseStringDesc>
  }

  return status;
 8008056:	7dfb      	ldrb	r3, [r7, #23]
}
 8008058:	4618      	mov	r0, r3
 800805a:	3718      	adds	r7, #24
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	607b      	str	r3, [r7, #4]
 800806a:	460b      	mov	r3, r1
 800806c:	72fb      	strb	r3, [r7, #11]
 800806e:	4613      	mov	r3, r2
 8008070:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	789b      	ldrb	r3, [r3, #2]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d11c      	bne.n	80080b4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800807a:	7afb      	ldrb	r3, [r7, #11]
 800807c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008080:	b2da      	uxtb	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2206      	movs	r2, #6
 800808a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	893a      	ldrh	r2, [r7, #8]
 8008090:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008092:	893b      	ldrh	r3, [r7, #8]
 8008094:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008098:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800809c:	d104      	bne.n	80080a8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f240 4209 	movw	r2, #1033	; 0x409
 80080a4:	829a      	strh	r2, [r3, #20]
 80080a6:	e002      	b.n	80080ae <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	8b3a      	ldrh	r2, [r7, #24]
 80080b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80080b4:	8b3b      	ldrh	r3, [r7, #24]
 80080b6:	461a      	mov	r2, r3
 80080b8:	6879      	ldr	r1, [r7, #4]
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 fa2c 	bl	8008518 <USBH_CtlReq>
 80080c0:	4603      	mov	r3, r0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b082      	sub	sp, #8
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	460b      	mov	r3, r1
 80080d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	789b      	ldrb	r3, [r3, #2]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d10f      	bne.n	80080fe <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2205      	movs	r2, #5
 80080e8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80080ea:	78fb      	ldrb	r3, [r7, #3]
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80080fe:	2200      	movs	r2, #0
 8008100:	2100      	movs	r1, #0
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fa08 	bl	8008518 <USBH_CtlReq>
 8008108:	4603      	mov	r3, r0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	460b      	mov	r3, r1
 800811c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	789b      	ldrb	r3, [r3, #2]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d10e      	bne.n	8008144 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2209      	movs	r2, #9
 8008130:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	887a      	ldrh	r2, [r7, #2]
 8008136:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008144:	2200      	movs	r2, #0
 8008146:	2100      	movs	r1, #0
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f9e5 	bl	8008518 <USBH_CtlReq>
 800814e:	4603      	mov	r3, r0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	789b      	ldrb	r3, [r3, #2]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d10f      	bne.n	800818c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2203      	movs	r2, #3
 8008176:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008178:	78fb      	ldrb	r3, [r7, #3]
 800817a:	b29a      	uxth	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800818c:	2200      	movs	r2, #0
 800818e:	2100      	movs	r1, #0
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f9c1 	bl	8008518 <USBH_CtlReq>
 8008196:	4603      	mov	r3, r0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	4613      	mov	r3, r2
 80081ac:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	781a      	ldrb	r2, [r3, #0]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	785a      	ldrb	r2, [r3, #1]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	3302      	adds	r3, #2
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	3303      	adds	r3, #3
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	021b      	lsls	r3, r3, #8
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	4313      	orrs	r3, r2
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	791a      	ldrb	r2, [r3, #4]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	795a      	ldrb	r2, [r3, #5]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	799a      	ldrb	r2, [r3, #6]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	79da      	ldrb	r2, [r3, #7]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80081fa:	88fb      	ldrh	r3, [r7, #6]
 80081fc:	2b08      	cmp	r3, #8
 80081fe:	d939      	bls.n	8008274 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	3308      	adds	r3, #8
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	b29a      	uxth	r2, r3
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	3309      	adds	r3, #9
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	b29b      	uxth	r3, r3
 8008210:	021b      	lsls	r3, r3, #8
 8008212:	b29b      	uxth	r3, r3
 8008214:	4313      	orrs	r3, r2
 8008216:	b29a      	uxth	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	330a      	adds	r3, #10
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	b29a      	uxth	r2, r3
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	330b      	adds	r3, #11
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	b29b      	uxth	r3, r3
 800822c:	021b      	lsls	r3, r3, #8
 800822e:	b29b      	uxth	r3, r3
 8008230:	4313      	orrs	r3, r2
 8008232:	b29a      	uxth	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	330c      	adds	r3, #12
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	b29a      	uxth	r2, r3
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	330d      	adds	r3, #13
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	b29b      	uxth	r3, r3
 8008248:	021b      	lsls	r3, r3, #8
 800824a:	b29b      	uxth	r3, r3
 800824c:	4313      	orrs	r3, r2
 800824e:	b29a      	uxth	r2, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	7b9a      	ldrb	r2, [r3, #14]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	7bda      	ldrb	r2, [r3, #15]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	7c1a      	ldrb	r2, [r3, #16]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	7c5a      	ldrb	r2, [r3, #17]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	745a      	strb	r2, [r3, #17]
  }
}
 8008274:	bf00      	nop
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b08a      	sub	sp, #40	; 0x28
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	4613      	mov	r3, r2
 800828c:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008292:	2300      	movs	r3, #0
 8008294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008298:	2300      	movs	r3, #0
 800829a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	781a      	ldrb	r2, [r3, #0]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	785a      	ldrb	r2, [r3, #1]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	3302      	adds	r3, #2
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	3303      	adds	r3, #3
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	021b      	lsls	r3, r3, #8
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	4313      	orrs	r3, r2
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	791a      	ldrb	r2, [r3, #4]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	795a      	ldrb	r2, [r3, #5]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	799a      	ldrb	r2, [r3, #6]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	79da      	ldrb	r2, [r3, #7]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	7a1a      	ldrb	r2, [r3, #8]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80082f6:	88fb      	ldrh	r3, [r7, #6]
 80082f8:	2b09      	cmp	r3, #9
 80082fa:	d95f      	bls.n	80083bc <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80082fc:	2309      	movs	r3, #9
 80082fe:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008300:	2300      	movs	r3, #0
 8008302:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008304:	e051      	b.n	80083aa <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008306:	f107 0316 	add.w	r3, r7, #22
 800830a:	4619      	mov	r1, r3
 800830c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800830e:	f000 f8e8 	bl	80084e2 <USBH_GetNextDesc>
 8008312:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	785b      	ldrb	r3, [r3, #1]
 8008318:	2b04      	cmp	r3, #4
 800831a:	d146      	bne.n	80083aa <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800831c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008320:	221a      	movs	r2, #26
 8008322:	fb02 f303 	mul.w	r3, r2, r3
 8008326:	3308      	adds	r3, #8
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	4413      	add	r3, r2
 800832c:	3302      	adds	r3, #2
 800832e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008332:	69f8      	ldr	r0, [r7, #28]
 8008334:	f000 f846 	bl	80083c4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800833e:	2300      	movs	r3, #0
 8008340:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008342:	e022      	b.n	800838a <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008344:	f107 0316 	add.w	r3, r7, #22
 8008348:	4619      	mov	r1, r3
 800834a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800834c:	f000 f8c9 	bl	80084e2 <USBH_GetNextDesc>
 8008350:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	785b      	ldrb	r3, [r3, #1]
 8008356:	2b05      	cmp	r3, #5
 8008358:	d117      	bne.n	800838a <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800835a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800835e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008362:	3201      	adds	r2, #1
 8008364:	00d2      	lsls	r2, r2, #3
 8008366:	211a      	movs	r1, #26
 8008368:	fb01 f303 	mul.w	r3, r1, r3
 800836c:	4413      	add	r3, r2
 800836e:	3308      	adds	r3, #8
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	4413      	add	r3, r2
 8008374:	3304      	adds	r3, #4
 8008376:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008378:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800837a:	69b8      	ldr	r0, [r7, #24]
 800837c:	f000 f851 	bl	8008422 <USBH_ParseEPDesc>
            ep_ix++;
 8008380:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008384:	3301      	adds	r3, #1
 8008386:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	791b      	ldrb	r3, [r3, #4]
 800838e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008392:	429a      	cmp	r2, r3
 8008394:	d204      	bcs.n	80083a0 <USBH_ParseCfgDesc+0x120>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	885a      	ldrh	r2, [r3, #2]
 800839a:	8afb      	ldrh	r3, [r7, #22]
 800839c:	429a      	cmp	r2, r3
 800839e:	d8d1      	bhi.n	8008344 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80083a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083a4:	3301      	adds	r3, #1
 80083a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80083aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d804      	bhi.n	80083bc <USBH_ParseCfgDesc+0x13c>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	885a      	ldrh	r2, [r3, #2]
 80083b6:	8afb      	ldrh	r3, [r7, #22]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d8a4      	bhi.n	8008306 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80083bc:	bf00      	nop
 80083be:	3728      	adds	r7, #40	; 0x28
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	781a      	ldrb	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	785a      	ldrb	r2, [r3, #1]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	789a      	ldrb	r2, [r3, #2]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	78da      	ldrb	r2, [r3, #3]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	791a      	ldrb	r2, [r3, #4]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	795a      	ldrb	r2, [r3, #5]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	799a      	ldrb	r2, [r3, #6]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	79da      	ldrb	r2, [r3, #7]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	7a1a      	ldrb	r2, [r3, #8]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	721a      	strb	r2, [r3, #8]
}
 8008416:	bf00      	nop
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008422:	b480      	push	{r7}
 8008424:	b083      	sub	sp, #12
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	781a      	ldrb	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	785a      	ldrb	r2, [r3, #1]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	789a      	ldrb	r2, [r3, #2]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	78da      	ldrb	r2, [r3, #3]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	3304      	adds	r3, #4
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	b29a      	uxth	r2, r3
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	3305      	adds	r3, #5
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	b29b      	uxth	r3, r3
 800845c:	021b      	lsls	r3, r3, #8
 800845e:	b29b      	uxth	r3, r3
 8008460:	4313      	orrs	r3, r2
 8008462:	b29a      	uxth	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	799a      	ldrb	r2, [r3, #6]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	719a      	strb	r2, [r3, #6]
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800847c:	b480      	push	{r7}
 800847e:	b087      	sub	sp, #28
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	4613      	mov	r3, r2
 8008488:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	3301      	adds	r3, #1
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	2b03      	cmp	r3, #3
 8008492:	d120      	bne.n	80084d6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	1e9a      	subs	r2, r3, #2
 800849a:	88fb      	ldrh	r3, [r7, #6]
 800849c:	4293      	cmp	r3, r2
 800849e:	bf28      	it	cs
 80084a0:	4613      	movcs	r3, r2
 80084a2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	3302      	adds	r3, #2
 80084a8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80084aa:	2300      	movs	r3, #0
 80084ac:	82fb      	strh	r3, [r7, #22]
 80084ae:	e00b      	b.n	80084c8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80084b0:	8afb      	ldrh	r3, [r7, #22]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	4413      	add	r3, r2
 80084b6:	781a      	ldrb	r2, [r3, #0]
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	701a      	strb	r2, [r3, #0]
      pdest++;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	3301      	adds	r3, #1
 80084c0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80084c2:	8afb      	ldrh	r3, [r7, #22]
 80084c4:	3302      	adds	r3, #2
 80084c6:	82fb      	strh	r3, [r7, #22]
 80084c8:	8afa      	ldrh	r2, [r7, #22]
 80084ca:	8abb      	ldrh	r3, [r7, #20]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d3ef      	bcc.n	80084b0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2200      	movs	r2, #0
 80084d4:	701a      	strb	r2, [r3, #0]
  }
}
 80084d6:	bf00      	nop
 80084d8:	371c      	adds	r7, #28
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b085      	sub	sp, #20
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	881a      	ldrh	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	4413      	add	r3, r2
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4413      	add	r3, r2
 8008508:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800850a:	68fb      	ldr	r3, [r7, #12]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	4613      	mov	r3, r2
 8008524:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008526:	2301      	movs	r3, #1
 8008528:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	789b      	ldrb	r3, [r3, #2]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d002      	beq.n	8008538 <USBH_CtlReq+0x20>
 8008532:	2b02      	cmp	r3, #2
 8008534:	d00f      	beq.n	8008556 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008536:	e027      	b.n	8008588 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	88fa      	ldrh	r2, [r7, #6]
 8008542:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2201      	movs	r2, #1
 8008548:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2202      	movs	r2, #2
 800854e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008550:	2301      	movs	r3, #1
 8008552:	75fb      	strb	r3, [r7, #23]
      break;
 8008554:	e018      	b.n	8008588 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f000 f81c 	bl	8008594 <USBH_HandleControl>
 800855c:	4603      	mov	r3, r0
 800855e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008560:	7dfb      	ldrb	r3, [r7, #23]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d002      	beq.n	800856c <USBH_CtlReq+0x54>
 8008566:	7dfb      	ldrb	r3, [r7, #23]
 8008568:	2b03      	cmp	r3, #3
 800856a:	d106      	bne.n	800857a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2201      	movs	r2, #1
 8008570:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	761a      	strb	r2, [r3, #24]
      break;
 8008578:	e005      	b.n	8008586 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800857a:	7dfb      	ldrb	r3, [r7, #23]
 800857c:	2b02      	cmp	r3, #2
 800857e:	d102      	bne.n	8008586 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2201      	movs	r2, #1
 8008584:	709a      	strb	r2, [r3, #2]
      break;
 8008586:	bf00      	nop
  }
  return status;
 8008588:	7dfb      	ldrb	r3, [r7, #23]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3718      	adds	r7, #24
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af02      	add	r7, sp, #8
 800859a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800859c:	2301      	movs	r3, #1
 800859e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	7e1b      	ldrb	r3, [r3, #24]
 80085a8:	3b01      	subs	r3, #1
 80085aa:	2b0a      	cmp	r3, #10
 80085ac:	f200 8156 	bhi.w	800885c <USBH_HandleControl+0x2c8>
 80085b0:	a201      	add	r2, pc, #4	; (adr r2, 80085b8 <USBH_HandleControl+0x24>)
 80085b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b6:	bf00      	nop
 80085b8:	080085e5 	.word	0x080085e5
 80085bc:	080085ff 	.word	0x080085ff
 80085c0:	08008669 	.word	0x08008669
 80085c4:	0800868f 	.word	0x0800868f
 80085c8:	080086c7 	.word	0x080086c7
 80085cc:	080086f1 	.word	0x080086f1
 80085d0:	08008743 	.word	0x08008743
 80085d4:	08008765 	.word	0x08008765
 80085d8:	080087a1 	.word	0x080087a1
 80085dc:	080087c7 	.word	0x080087c7
 80085e0:	08008805 	.word	0x08008805
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f103 0110 	add.w	r1, r3, #16
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	795b      	ldrb	r3, [r3, #5]
 80085ee:	461a      	mov	r2, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f943 	bl	800887c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2202      	movs	r2, #2
 80085fa:	761a      	strb	r2, [r3, #24]
      break;
 80085fc:	e139      	b.n	8008872 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	795b      	ldrb	r3, [r3, #5]
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fb4f 	bl	8008ca8 <USBH_LL_GetURBState>
 800860a:	4603      	mov	r3, r0
 800860c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800860e:	7bbb      	ldrb	r3, [r7, #14]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d11e      	bne.n	8008652 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	7c1b      	ldrb	r3, [r3, #16]
 8008618:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800861c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	8adb      	ldrh	r3, [r3, #22]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00a      	beq.n	800863c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008626:	7b7b      	ldrb	r3, [r7, #13]
 8008628:	2b80      	cmp	r3, #128	; 0x80
 800862a:	d103      	bne.n	8008634 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2203      	movs	r2, #3
 8008630:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008632:	e115      	b.n	8008860 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2205      	movs	r2, #5
 8008638:	761a      	strb	r2, [r3, #24]
      break;
 800863a:	e111      	b.n	8008860 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800863c:	7b7b      	ldrb	r3, [r7, #13]
 800863e:	2b80      	cmp	r3, #128	; 0x80
 8008640:	d103      	bne.n	800864a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2209      	movs	r2, #9
 8008646:	761a      	strb	r2, [r3, #24]
      break;
 8008648:	e10a      	b.n	8008860 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2207      	movs	r2, #7
 800864e:	761a      	strb	r2, [r3, #24]
      break;
 8008650:	e106      	b.n	8008860 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008652:	7bbb      	ldrb	r3, [r7, #14]
 8008654:	2b04      	cmp	r3, #4
 8008656:	d003      	beq.n	8008660 <USBH_HandleControl+0xcc>
 8008658:	7bbb      	ldrb	r3, [r7, #14]
 800865a:	2b02      	cmp	r3, #2
 800865c:	f040 8100 	bne.w	8008860 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	220b      	movs	r2, #11
 8008664:	761a      	strb	r2, [r3, #24]
      break;
 8008666:	e0fb      	b.n	8008860 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800866e:	b29a      	uxth	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6899      	ldr	r1, [r3, #8]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	899a      	ldrh	r2, [r3, #12]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	791b      	ldrb	r3, [r3, #4]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f93a 	bl	80088fa <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2204      	movs	r2, #4
 800868a:	761a      	strb	r2, [r3, #24]
      break;
 800868c:	e0f1      	b.n	8008872 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	791b      	ldrb	r3, [r3, #4]
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fb07 	bl	8008ca8 <USBH_LL_GetURBState>
 800869a:	4603      	mov	r3, r0
 800869c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d102      	bne.n	80086aa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2209      	movs	r2, #9
 80086a8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	2b05      	cmp	r3, #5
 80086ae:	d102      	bne.n	80086b6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80086b0:	2303      	movs	r3, #3
 80086b2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80086b4:	e0d6      	b.n	8008864 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	2b04      	cmp	r3, #4
 80086ba:	f040 80d3 	bne.w	8008864 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	220b      	movs	r2, #11
 80086c2:	761a      	strb	r2, [r3, #24]
      break;
 80086c4:	e0ce      	b.n	8008864 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6899      	ldr	r1, [r3, #8]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	899a      	ldrh	r2, [r3, #12]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	795b      	ldrb	r3, [r3, #5]
 80086d2:	2001      	movs	r0, #1
 80086d4:	9000      	str	r0, [sp, #0]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f8ea 	bl	80088b0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2206      	movs	r2, #6
 80086ec:	761a      	strb	r2, [r3, #24]
      break;
 80086ee:	e0c0      	b.n	8008872 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	795b      	ldrb	r3, [r3, #5]
 80086f4:	4619      	mov	r1, r3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fad6 	bl	8008ca8 <USBH_LL_GetURBState>
 80086fc:	4603      	mov	r3, r0
 80086fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008700:	7bbb      	ldrb	r3, [r7, #14]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d103      	bne.n	800870e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2207      	movs	r2, #7
 800870a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800870c:	e0ac      	b.n	8008868 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800870e:	7bbb      	ldrb	r3, [r7, #14]
 8008710:	2b05      	cmp	r3, #5
 8008712:	d105      	bne.n	8008720 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	220c      	movs	r2, #12
 8008718:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800871a:	2303      	movs	r3, #3
 800871c:	73fb      	strb	r3, [r7, #15]
      break;
 800871e:	e0a3      	b.n	8008868 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008720:	7bbb      	ldrb	r3, [r7, #14]
 8008722:	2b02      	cmp	r3, #2
 8008724:	d103      	bne.n	800872e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2205      	movs	r2, #5
 800872a:	761a      	strb	r2, [r3, #24]
      break;
 800872c:	e09c      	b.n	8008868 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800872e:	7bbb      	ldrb	r3, [r7, #14]
 8008730:	2b04      	cmp	r3, #4
 8008732:	f040 8099 	bne.w	8008868 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	220b      	movs	r2, #11
 800873a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800873c:	2302      	movs	r3, #2
 800873e:	73fb      	strb	r3, [r7, #15]
      break;
 8008740:	e092      	b.n	8008868 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	791b      	ldrb	r3, [r3, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	2100      	movs	r1, #0
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f8d5 	bl	80088fa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008756:	b29a      	uxth	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2208      	movs	r2, #8
 8008760:	761a      	strb	r2, [r3, #24]

      break;
 8008762:	e086      	b.n	8008872 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	791b      	ldrb	r3, [r3, #4]
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fa9c 	bl	8008ca8 <USBH_LL_GetURBState>
 8008770:	4603      	mov	r3, r0
 8008772:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008774:	7bbb      	ldrb	r3, [r7, #14]
 8008776:	2b01      	cmp	r3, #1
 8008778:	d105      	bne.n	8008786 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	220d      	movs	r2, #13
 800877e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008780:	2300      	movs	r3, #0
 8008782:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008784:	e072      	b.n	800886c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008786:	7bbb      	ldrb	r3, [r7, #14]
 8008788:	2b04      	cmp	r3, #4
 800878a:	d103      	bne.n	8008794 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	220b      	movs	r2, #11
 8008790:	761a      	strb	r2, [r3, #24]
      break;
 8008792:	e06b      	b.n	800886c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008794:	7bbb      	ldrb	r3, [r7, #14]
 8008796:	2b05      	cmp	r3, #5
 8008798:	d168      	bne.n	800886c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800879a:	2303      	movs	r3, #3
 800879c:	73fb      	strb	r3, [r7, #15]
      break;
 800879e:	e065      	b.n	800886c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	795b      	ldrb	r3, [r3, #5]
 80087a4:	2201      	movs	r2, #1
 80087a6:	9200      	str	r2, [sp, #0]
 80087a8:	2200      	movs	r2, #0
 80087aa:	2100      	movs	r1, #0
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f87f 	bl	80088b0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	220a      	movs	r2, #10
 80087c2:	761a      	strb	r2, [r3, #24]
      break;
 80087c4:	e055      	b.n	8008872 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	795b      	ldrb	r3, [r3, #5]
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fa6b 	bl	8008ca8 <USBH_LL_GetURBState>
 80087d2:	4603      	mov	r3, r0
 80087d4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d105      	bne.n	80087e8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	220d      	movs	r2, #13
 80087e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80087e6:	e043      	b.n	8008870 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80087e8:	7bbb      	ldrb	r3, [r7, #14]
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d103      	bne.n	80087f6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2209      	movs	r2, #9
 80087f2:	761a      	strb	r2, [r3, #24]
      break;
 80087f4:	e03c      	b.n	8008870 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80087f6:	7bbb      	ldrb	r3, [r7, #14]
 80087f8:	2b04      	cmp	r3, #4
 80087fa:	d139      	bne.n	8008870 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	220b      	movs	r2, #11
 8008800:	761a      	strb	r2, [r3, #24]
      break;
 8008802:	e035      	b.n	8008870 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	7e5b      	ldrb	r3, [r3, #25]
 8008808:	3301      	adds	r3, #1
 800880a:	b2da      	uxtb	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	765a      	strb	r2, [r3, #25]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	7e5b      	ldrb	r3, [r3, #25]
 8008814:	2b02      	cmp	r3, #2
 8008816:	d806      	bhi.n	8008826 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008824:	e025      	b.n	8008872 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800882c:	2106      	movs	r1, #6
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	795b      	ldrb	r3, [r3, #5]
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f8b9 	bl	80089b6 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	791b      	ldrb	r3, [r3, #4]
 8008848:	4619      	mov	r1, r3
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f8b3 	bl	80089b6 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008856:	2302      	movs	r3, #2
 8008858:	73fb      	strb	r3, [r7, #15]
      break;
 800885a:	e00a      	b.n	8008872 <USBH_HandleControl+0x2de>

    default:
      break;
 800885c:	bf00      	nop
 800885e:	e008      	b.n	8008872 <USBH_HandleControl+0x2de>
      break;
 8008860:	bf00      	nop
 8008862:	e006      	b.n	8008872 <USBH_HandleControl+0x2de>
      break;
 8008864:	bf00      	nop
 8008866:	e004      	b.n	8008872 <USBH_HandleControl+0x2de>
      break;
 8008868:	bf00      	nop
 800886a:	e002      	b.n	8008872 <USBH_HandleControl+0x2de>
      break;
 800886c:	bf00      	nop
 800886e:	e000      	b.n	8008872 <USBH_HandleControl+0x2de>
      break;
 8008870:	bf00      	nop
  }

  return status;
 8008872:	7bfb      	ldrb	r3, [r7, #15]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b088      	sub	sp, #32
 8008880:	af04      	add	r7, sp, #16
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	4613      	mov	r3, r2
 8008888:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800888a:	79f9      	ldrb	r1, [r7, #7]
 800888c:	2300      	movs	r3, #0
 800888e:	9303      	str	r3, [sp, #12]
 8008890:	2308      	movs	r3, #8
 8008892:	9302      	str	r3, [sp, #8]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	9301      	str	r3, [sp, #4]
 8008898:	2300      	movs	r3, #0
 800889a:	9300      	str	r3, [sp, #0]
 800889c:	2300      	movs	r3, #0
 800889e:	2200      	movs	r2, #0
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 f9d0 	bl	8008c46 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b088      	sub	sp, #32
 80088b4:	af04      	add	r7, sp, #16
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	4611      	mov	r1, r2
 80088bc:	461a      	mov	r2, r3
 80088be:	460b      	mov	r3, r1
 80088c0:	80fb      	strh	r3, [r7, #6]
 80088c2:	4613      	mov	r3, r2
 80088c4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d001      	beq.n	80088d4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80088d4:	7979      	ldrb	r1, [r7, #5]
 80088d6:	7e3b      	ldrb	r3, [r7, #24]
 80088d8:	9303      	str	r3, [sp, #12]
 80088da:	88fb      	ldrh	r3, [r7, #6]
 80088dc:	9302      	str	r3, [sp, #8]
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	9301      	str	r3, [sp, #4]
 80088e2:	2301      	movs	r3, #1
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	2300      	movs	r3, #0
 80088e8:	2200      	movs	r2, #0
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 f9ab 	bl	8008c46 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b088      	sub	sp, #32
 80088fe:	af04      	add	r7, sp, #16
 8008900:	60f8      	str	r0, [r7, #12]
 8008902:	60b9      	str	r1, [r7, #8]
 8008904:	4611      	mov	r1, r2
 8008906:	461a      	mov	r2, r3
 8008908:	460b      	mov	r3, r1
 800890a:	80fb      	strh	r3, [r7, #6]
 800890c:	4613      	mov	r3, r2
 800890e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008910:	7979      	ldrb	r1, [r7, #5]
 8008912:	2300      	movs	r3, #0
 8008914:	9303      	str	r3, [sp, #12]
 8008916:	88fb      	ldrh	r3, [r7, #6]
 8008918:	9302      	str	r3, [sp, #8]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	2301      	movs	r3, #1
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	2300      	movs	r3, #0
 8008924:	2201      	movs	r2, #1
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f000 f98d 	bl	8008c46 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800892c:	2300      	movs	r3, #0

}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b086      	sub	sp, #24
 800893a:	af04      	add	r7, sp, #16
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	4608      	mov	r0, r1
 8008940:	4611      	mov	r1, r2
 8008942:	461a      	mov	r2, r3
 8008944:	4603      	mov	r3, r0
 8008946:	70fb      	strb	r3, [r7, #3]
 8008948:	460b      	mov	r3, r1
 800894a:	70bb      	strb	r3, [r7, #2]
 800894c:	4613      	mov	r3, r2
 800894e:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008950:	7878      	ldrb	r0, [r7, #1]
 8008952:	78ba      	ldrb	r2, [r7, #2]
 8008954:	78f9      	ldrb	r1, [r7, #3]
 8008956:	8b3b      	ldrh	r3, [r7, #24]
 8008958:	9302      	str	r3, [sp, #8]
 800895a:	7d3b      	ldrb	r3, [r7, #20]
 800895c:	9301      	str	r3, [sp, #4]
 800895e:	7c3b      	ldrb	r3, [r7, #16]
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	4603      	mov	r3, r0
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f93f 	bl	8008be8 <USBH_LL_OpenPipe>

  return USBH_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3708      	adds	r7, #8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	460b      	mov	r3, r1
 800897e:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f836 	bl	80089f2 <USBH_GetFreePipe>
 8008986:	4603      	mov	r3, r0
 8008988:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800898a:	89fb      	ldrh	r3, [r7, #14]
 800898c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008990:	4293      	cmp	r3, r2
 8008992:	d00a      	beq.n	80089aa <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008994:	78fa      	ldrb	r2, [r7, #3]
 8008996:	89fb      	ldrh	r3, [r7, #14]
 8008998:	f003 030f 	and.w	r3, r3, #15
 800899c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089a0:	6879      	ldr	r1, [r7, #4]
 80089a2:	33e0      	adds	r3, #224	; 0xe0
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	440b      	add	r3, r1
 80089a8:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80089aa:	89fb      	ldrh	r3, [r7, #14]
 80089ac:	b2db      	uxtb	r3, r3
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b083      	sub	sp, #12
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	460b      	mov	r3, r1
 80089c0:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80089c2:	78fb      	ldrb	r3, [r7, #3]
 80089c4:	2b0a      	cmp	r3, #10
 80089c6:	d80d      	bhi.n	80089e4 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80089c8:	78fb      	ldrb	r3, [r7, #3]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	33e0      	adds	r3, #224	; 0xe0
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	78fb      	ldrb	r3, [r7, #3]
 80089d6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80089da:	6879      	ldr	r1, [r7, #4]
 80089dc:	33e0      	adds	r3, #224	; 0xe0
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	440b      	add	r3, r1
 80089e2:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	370c      	adds	r7, #12
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b085      	sub	sp, #20
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80089fa:	2300      	movs	r3, #0
 80089fc:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80089fe:	2300      	movs	r3, #0
 8008a00:	73fb      	strb	r3, [r7, #15]
 8008a02:	e00f      	b.n	8008a24 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	33e0      	adds	r3, #224	; 0xe0
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d102      	bne.n	8008a1e <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	e007      	b.n	8008a2e <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008a1e:	7bfb      	ldrb	r3, [r7, #15]
 8008a20:	3301      	adds	r3, #1
 8008a22:	73fb      	strb	r3, [r7, #15]
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
 8008a26:	2b0a      	cmp	r3, #10
 8008a28:	d9ec      	bls.n	8008a04 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008a2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3714      	adds	r7, #20
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
	...

08008a3c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008a40:	4802      	ldr	r0, [pc, #8]	; (8008a4c <MX_USB_HOST_Process+0x10>)
 8008a42:	f7fe fe51 	bl	80076e8 <USBH_Process>
}
 8008a46:	bf00      	nop
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	2000102c 	.word	0x2000102c

08008a50 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7ff fa06 	bl	8007e70 <USBH_LL_IncTimer>
}
 8008a64:	bf00      	nop
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7ff fa3e 	bl	8007efc <USBH_LL_Connect>
}
 8008a80:	bf00      	nop
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7ff fa47 	bl	8007f2a <USBH_LL_Disconnect>
}
 8008a9c:	bf00      	nop
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	460b      	mov	r3, r1
 8008aae:	70fb      	strb	r3, [r7, #3]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008ab4:	bf00      	nop
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7ff f9f8 	bl	8007ec4 <USBH_LL_PortEnabled>
}
 8008ad4:	bf00      	nop
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff f9f8 	bl	8007ee0 <USBH_LL_PortDisabled>
}
 8008af0:	bf00      	nop
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b00:	2300      	movs	r3, #0
 8008b02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fa fcea 	bl	80034e8 <HAL_HCD_Start>
 8008b14:	4603      	mov	r3, r0
 8008b16:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b18:	7bfb      	ldrb	r3, [r7, #15]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f000 f8fa 	bl	8008d14 <USBH_Get_USB_Status>
 8008b20:	4603      	mov	r3, r0
 8008b22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b24:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b084      	sub	sp, #16
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fa fcf2 	bl	800352e <HAL_HCD_Stop>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 f8df 	bl	8008d14 <USBH_Get_USB_Status>
 8008b56:	4603      	mov	r3, r0
 8008b58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7fa fd18 	bl	80035ac <HAL_HCD_GetCurrentSpeed>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d00c      	beq.n	8008b9c <USBH_LL_GetSpeed+0x38>
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d80d      	bhi.n	8008ba2 <USBH_LL_GetSpeed+0x3e>
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <USBH_LL_GetSpeed+0x2c>
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d003      	beq.n	8008b96 <USBH_LL_GetSpeed+0x32>
 8008b8e:	e008      	b.n	8008ba2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73fb      	strb	r3, [r7, #15]
    break;
 8008b94:	e008      	b.n	8008ba8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008b96:	2301      	movs	r3, #1
 8008b98:	73fb      	strb	r3, [r7, #15]
    break;
 8008b9a:	e005      	b.n	8008ba8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8008ba0:	e002      	b.n	8008ba8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ba6:	bf00      	nop
  }
  return  speed;
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7fa fccd 	bl	8003568 <HAL_HCD_ResetPort>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f000 f89d 	bl	8008d14 <USBH_Get_USB_Status>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bde:	7bbb      	ldrb	r3, [r7, #14]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008be8:	b590      	push	{r4, r7, lr}
 8008bea:	b089      	sub	sp, #36	; 0x24
 8008bec:	af04      	add	r7, sp, #16
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	4608      	mov	r0, r1
 8008bf2:	4611      	mov	r1, r2
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	70fb      	strb	r3, [r7, #3]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	70bb      	strb	r3, [r7, #2]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c10:	787c      	ldrb	r4, [r7, #1]
 8008c12:	78ba      	ldrb	r2, [r7, #2]
 8008c14:	78f9      	ldrb	r1, [r7, #3]
 8008c16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c18:	9302      	str	r3, [sp, #8]
 8008c1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008c1e:	9301      	str	r3, [sp, #4]
 8008c20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c24:	9300      	str	r3, [sp, #0]
 8008c26:	4623      	mov	r3, r4
 8008c28:	f7fa f975 	bl	8002f16 <HAL_HCD_HC_Init>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f000 f86e 	bl	8008d14 <USBH_Get_USB_Status>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd90      	pop	{r4, r7, pc}

08008c46 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008c46:	b590      	push	{r4, r7, lr}
 8008c48:	b089      	sub	sp, #36	; 0x24
 8008c4a:	af04      	add	r7, sp, #16
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	4608      	mov	r0, r1
 8008c50:	4611      	mov	r1, r2
 8008c52:	461a      	mov	r2, r3
 8008c54:	4603      	mov	r3, r0
 8008c56:	70fb      	strb	r3, [r7, #3]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	70bb      	strb	r3, [r7, #2]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c6e:	787c      	ldrb	r4, [r7, #1]
 8008c70:	78ba      	ldrb	r2, [r7, #2]
 8008c72:	78f9      	ldrb	r1, [r7, #3]
 8008c74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c78:	9303      	str	r3, [sp, #12]
 8008c7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c7c:	9302      	str	r3, [sp, #8]
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	4623      	mov	r3, r4
 8008c8a:	f7fa f9d3 	bl	8003034 <HAL_HCD_HC_SubmitRequest>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 f83d 	bl	8008d14 <USBH_Get_USB_Status>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd90      	pop	{r4, r7, pc}

08008ca8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cba:	78fa      	ldrb	r2, [r7, #3]
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fa fc60 	bl	8003584 <HAL_HCD_HC_GetURBState>
 8008cc4:	4603      	mov	r3, r0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b082      	sub	sp, #8
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d103      	bne.n	8008cec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008ce4:	78fb      	ldrb	r3, [r7, #3]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 f840 	bl	8008d6c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008cec:	20c8      	movs	r0, #200	; 0xc8
 8008cee:	f7f9 f9a7 	bl	8002040 <HAL_Delay>
  return USBH_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7f9 f99b 	bl	8002040 <HAL_Delay>
}
 8008d0a:	bf00      	nop
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
	...

08008d14 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d22:	79fb      	ldrb	r3, [r7, #7]
 8008d24:	2b03      	cmp	r3, #3
 8008d26:	d817      	bhi.n	8008d58 <USBH_Get_USB_Status+0x44>
 8008d28:	a201      	add	r2, pc, #4	; (adr r2, 8008d30 <USBH_Get_USB_Status+0x1c>)
 8008d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2e:	bf00      	nop
 8008d30:	08008d41 	.word	0x08008d41
 8008d34:	08008d47 	.word	0x08008d47
 8008d38:	08008d4d 	.word	0x08008d4d
 8008d3c:	08008d53 	.word	0x08008d53
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]
    break;
 8008d44:	e00b      	b.n	8008d5e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008d46:	2302      	movs	r3, #2
 8008d48:	73fb      	strb	r3, [r7, #15]
    break;
 8008d4a:	e008      	b.n	8008d5e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d50:	e005      	b.n	8008d5e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008d52:	2302      	movs	r3, #2
 8008d54:	73fb      	strb	r3, [r7, #15]
    break;
 8008d56:	e002      	b.n	8008d5e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008d58:	2302      	movs	r3, #2
 8008d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d5c:	bf00      	nop
  }
  return usb_status;
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	4603      	mov	r3, r0
 8008d74:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008d76:	79fb      	ldrb	r3, [r7, #7]
 8008d78:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008d7a:	79fb      	ldrb	r3, [r7, #7]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d102      	bne.n	8008d86 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008d80:	2301      	movs	r3, #1
 8008d82:	73fb      	strb	r3, [r7, #15]
 8008d84:	e001      	b.n	8008d8a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008d86:	2300      	movs	r3, #0
 8008d88:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8008d8a:	7bfb      	ldrb	r3, [r7, #15]
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	2120      	movs	r1, #32
 8008d90:	4803      	ldr	r0, [pc, #12]	; (8008da0 <MX_DriverVbusFS+0x34>)
 8008d92:	f7fa f88d 	bl	8002eb0 <HAL_GPIO_WritePin>
}
 8008d96:	bf00      	nop
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	40020c00 	.word	0x40020c00

08008da4 <sine_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	3303      	adds	r3, #3
 8008db4:	f023 0303 	bic.w	r3, r3, #3
 8008db8:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    dense_10_input_output_array.data = AI_PTR(NULL);
 8008dba:	4b16      	ldr	r3, [pc, #88]	; (8008e14 <sine_model_configure_activations+0x70>)
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	609a      	str	r2, [r3, #8]
    dense_10_input_output_array.data_start = AI_PTR(NULL);
 8008dc0:	4b14      	ldr	r3, [pc, #80]	; (8008e14 <sine_model_configure_activations+0x70>)
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 8008dc6:	4a14      	ldr	r2, [pc, #80]	; (8008e18 <sine_model_configure_activations+0x74>)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 8008dcc:	4a12      	ldr	r2, [pc, #72]	; (8008e18 <sine_model_configure_activations+0x74>)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 0);
 8008dd2:	4a12      	ldr	r2, [pc, #72]	; (8008e1c <sine_model_configure_activations+0x78>)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 0);
 8008dd8:	4a10      	ldr	r2, [pc, #64]	; (8008e1c <sine_model_configure_activations+0x78>)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 64);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	3340      	adds	r3, #64	; 0x40
 8008de2:	4a0f      	ldr	r2, [pc, #60]	; (8008e20 <sine_model_configure_activations+0x7c>)
 8008de4:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 64);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	3340      	adds	r3, #64	; 0x40
 8008dea:	4a0d      	ldr	r2, [pc, #52]	; (8008e20 <sine_model_configure_activations+0x7c>)
 8008dec:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 0);
 8008dee:	4a0d      	ldr	r2, [pc, #52]	; (8008e24 <sine_model_configure_activations+0x80>)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 0);
 8008df4:	4a0b      	ldr	r2, [pc, #44]	; (8008e24 <sine_model_configure_activations+0x80>)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(NULL);
 8008dfa:	4b0b      	ldr	r3, [pc, #44]	; (8008e28 <sine_model_configure_activations+0x84>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	609a      	str	r2, [r3, #8]
    dense_2_output_array.data_start = AI_PTR(NULL);
 8008e00:	4b09      	ldr	r3, [pc, #36]	; (8008e28 <sine_model_configure_activations+0x84>)
 8008e02:	2200      	movs	r2, #0
 8008e04:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8008e06:	2301      	movs	r3, #1
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	200000cc 	.word	0x200000cc
 8008e18:	200000dc 	.word	0x200000dc
 8008e1c:	200000ec 	.word	0x200000ec
 8008e20:	200000fc 	.word	0x200000fc
 8008e24:	2000010c 	.word	0x2000010c
 8008e28:	2000011c 	.word	0x2000011c

08008e2c <sine_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8008e3c:	4b2f      	ldr	r3, [pc, #188]	; (8008efc <sine_model_configure_weights+0xd0>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e44:	4a2d      	ldr	r2, [pc, #180]	; (8008efc <sine_model_configure_weights+0xd0>)
 8008e46:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 1280);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e4e:	4a2b      	ldr	r2, [pc, #172]	; (8008efc <sine_model_configure_weights+0xd0>)
 8008e50:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 1280);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e58:	4a28      	ldr	r2, [pc, #160]	; (8008efc <sine_model_configure_weights+0xd0>)
 8008e5a:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8008e5c:	4b28      	ldr	r3, [pc, #160]	; (8008f00 <sine_model_configure_weights+0xd4>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e64:	4a26      	ldr	r2, [pc, #152]	; (8008f00 <sine_model_configure_weights+0xd4>)
 8008e66:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 1216);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008e6e:	4a24      	ldr	r2, [pc, #144]	; (8008f00 <sine_model_configure_weights+0xd4>)
 8008e70:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 1216);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008e78:	4a21      	ldr	r2, [pc, #132]	; (8008f00 <sine_model_configure_weights+0xd4>)
 8008e7a:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8008e7c:	4b21      	ldr	r3, [pc, #132]	; (8008f04 <sine_model_configure_weights+0xd8>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e84:	4a1f      	ldr	r2, [pc, #124]	; (8008f04 <sine_model_configure_weights+0xd8>)
 8008e86:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 1152);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8008e8e:	4a1d      	ldr	r2, [pc, #116]	; (8008f04 <sine_model_configure_weights+0xd8>)
 8008e90:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 1152);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8008e98:	4a1a      	ldr	r2, [pc, #104]	; (8008f04 <sine_model_configure_weights+0xd8>)
 8008e9a:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8008e9c:	4b1a      	ldr	r3, [pc, #104]	; (8008f08 <sine_model_configure_weights+0xdc>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ea4:	4a18      	ldr	r2, [pc, #96]	; (8008f08 <sine_model_configure_weights+0xdc>)
 8008ea6:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 128);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	3380      	adds	r3, #128	; 0x80
 8008eac:	4a16      	ldr	r2, [pc, #88]	; (8008f08 <sine_model_configure_weights+0xdc>)
 8008eae:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 128);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	3380      	adds	r3, #128	; 0x80
 8008eb4:	4a14      	ldr	r2, [pc, #80]	; (8008f08 <sine_model_configure_weights+0xdc>)
 8008eb6:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8008eb8:	4b14      	ldr	r3, [pc, #80]	; (8008f0c <sine_model_configure_weights+0xe0>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ec0:	4a12      	ldr	r2, [pc, #72]	; (8008f0c <sine_model_configure_weights+0xe0>)
 8008ec2:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 64);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	3340      	adds	r3, #64	; 0x40
 8008ec8:	4a10      	ldr	r2, [pc, #64]	; (8008f0c <sine_model_configure_weights+0xe0>)
 8008eca:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 64);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3340      	adds	r3, #64	; 0x40
 8008ed0:	4a0e      	ldr	r2, [pc, #56]	; (8008f0c <sine_model_configure_weights+0xe0>)
 8008ed2:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8008ed4:	4b0e      	ldr	r3, [pc, #56]	; (8008f10 <sine_model_configure_weights+0xe4>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008edc:	4a0c      	ldr	r2, [pc, #48]	; (8008f10 <sine_model_configure_weights+0xe4>)
 8008ede:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 8008ee0:	4a0b      	ldr	r2, [pc, #44]	; (8008f10 <sine_model_configure_weights+0xe4>)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 8008ee6:	4a0a      	ldr	r2, [pc, #40]	; (8008f10 <sine_model_configure_weights+0xe4>)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8008eec:	2301      	movs	r3, #1
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	2000006c 	.word	0x2000006c
 8008f00:	2000007c 	.word	0x2000007c
 8008f04:	2000008c 	.word	0x2000008c
 8008f08:	2000009c 	.word	0x2000009c
 8008f0c:	200000ac 	.word	0x200000ac
 8008f10:	200000bc 	.word	0x200000bc

08008f14 <ai_sine_model_create>:
}

AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af02      	add	r7, sp, #8
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8008f1e:	2300      	movs	r3, #0
 8008f20:	9301      	str	r3, [sp, #4]
 8008f22:	2303      	movs	r3, #3
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	2301      	movs	r3, #1
 8008f28:	4a04      	ldr	r2, [pc, #16]	; (8008f3c <ai_sine_model_create+0x28>)
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f861 	bl	8008ff4 <ai_platform_network_create>
 8008f32:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	2000000c 	.word	0x2000000c

08008f40 <ai_sine_model_init>:
}

AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8008f4a:	6839      	ldr	r1, [r7, #0]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f8d5 	bl	80090fc <ai_platform_network_init>
 8008f52:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d101      	bne.n	8008f5e <ai_sine_model_init+0x1e>
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	e02b      	b.n	8008fb6 <ai_sine_model_init+0x76>

  ai_bool ok = true;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_weights(net_ctx, &params->params);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	4619      	mov	r1, r3
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f7ff ff60 	bl	8008e2c <sine_model_configure_weights>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	461a      	mov	r2, r3
 8008f70:	7afb      	ldrb	r3, [r7, #11]
 8008f72:	4013      	ands	r3, r2
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	bf14      	ite	ne
 8008f78:	2301      	movne	r3, #1
 8008f7a:	2300      	moveq	r3, #0
 8008f7c:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, &params->activations);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	3318      	adds	r3, #24
 8008f82:	4619      	mov	r1, r3
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f7ff ff0d 	bl	8008da4 <sine_model_configure_activations>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	7afb      	ldrb	r3, [r7, #11]
 8008f90:	4013      	ands	r3, r2
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	bf14      	ite	ne
 8008f96:	2301      	movne	r3, #1
 8008f98:	2300      	moveq	r3, #0
 8008f9a:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f995 	bl	80092cc <ai_platform_network_post_init>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	7afb      	ldrb	r3, [r7, #11]
 8008fa8:	4013      	ands	r3, r2
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	bf14      	ite	ne
 8008fae:	2301      	movne	r3, #1
 8008fb0:	2300      	moveq	r3, #0
 8008fb2:	72fb      	strb	r3, [r7, #11]

  return ok;
 8008fb4:	7afb      	ldrb	r3, [r7, #11]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	60f8      	str	r0, [r7, #12]
 8008fc6:	60b9      	str	r1, [r7, #8]
 8008fc8:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	68b9      	ldr	r1, [r7, #8]
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 fa28 	bl	8009424 <ai_platform_network_process>
 8008fd4:	4603      	mov	r3, r0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
	...

08008fe0 <ai_sine_model_data_weights_get>:
#include "sine_model_data.h"

ai_handle ai_sine_model_data_weights_get(void)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	af00      	add	r7, sp, #0
    0x86, 0xe3, 0x3e, 0x64, 0x12, 0x87, 0xbf, 0xa6, 0xd1,
    0xdf, 0xbe, 0x81, 0x04, 0x1e, 0xbf, 0x95, 0x9f, 0xfc,
    0xbe, 0x44, 0xad, 0x2b, 0x3e, 0xe1, 0x0c, 0x85, 0xbe
  };

  return AI_HANDLE_PTR(s_sine_model_weights);
 8008fe4:	4b02      	ldr	r3, [pc, #8]	; (8008ff0 <ai_sine_model_data_weights_get+0x10>)

}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr
 8008ff0:	0800d6a8 	.word	0x0800d6a8

08008ff4 <ai_platform_network_create>:
 8008ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ff6:	4d36      	ldr	r5, [pc, #216]	; (80090d0 <ai_platform_network_create+0xdc>)
 8008ff8:	b083      	sub	sp, #12
 8008ffa:	4e36      	ldr	r6, [pc, #216]	; (80090d4 <ai_platform_network_create+0xe0>)
 8008ffc:	6829      	ldr	r1, [r5, #0]
 8008ffe:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8009002:	f021 0101 	bic.w	r1, r1, #1
 8009006:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800900a:	6029      	str	r1, [r5, #0]
 800900c:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 8009010:	6831      	ldr	r1, [r6, #0]
 8009012:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8009016:	194d      	adds	r5, r1, r5
 8009018:	2d01      	cmp	r5, #1
 800901a:	d92f      	bls.n	800907c <ai_platform_network_create+0x88>
 800901c:	f240 4549 	movw	r5, #1097	; 0x449
 8009020:	42a9      	cmp	r1, r5
 8009022:	d02b      	beq.n	800907c <ai_platform_network_create+0x88>
 8009024:	492c      	ldr	r1, [pc, #176]	; (80090d8 <ai_platform_network_create+0xe4>)
 8009026:	6809      	ldr	r1, [r1, #0]
 8009028:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800902c:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8009030:	d015      	beq.n	800905e <ai_platform_network_create+0x6a>
 8009032:	2800      	cmp	r0, #0
 8009034:	d031      	beq.n	800909a <ai_platform_network_create+0xa6>
 8009036:	461e      	mov	r6, r3
 8009038:	4613      	mov	r3, r2
 800903a:	4a28      	ldr	r2, [pc, #160]	; (80090dc <ai_platform_network_create+0xe8>)
 800903c:	4605      	mov	r5, r0
 800903e:	601a      	str	r2, [r3, #0]
 8009040:	6003      	str	r3, [r0, #0]
 8009042:	f000 fc9f 	bl	8009984 <core_init>
 8009046:	2800      	cmp	r0, #0
 8009048:	d02b      	beq.n	80090a2 <ai_platform_network_create+0xae>
 800904a:	0223      	lsls	r3, r4, #8
 800904c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009050:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8009054:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8009058:	d92e      	bls.n	80090b8 <ai_platform_network_create+0xc4>
 800905a:	2301      	movs	r3, #1
 800905c:	e022      	b.n	80090a4 <ai_platform_network_create+0xb0>
 800905e:	4920      	ldr	r1, [pc, #128]	; (80090e0 <ai_platform_network_create+0xec>)
 8009060:	2501      	movs	r5, #1
 8009062:	460e      	mov	r6, r1
 8009064:	600d      	str	r5, [r1, #0]
 8009066:	6831      	ldr	r1, [r6, #0]
 8009068:	2900      	cmp	r1, #0
 800906a:	d1fc      	bne.n	8009066 <ai_platform_network_create+0x72>
 800906c:	491d      	ldr	r1, [pc, #116]	; (80090e4 <ai_platform_network_create+0xf0>)
 800906e:	4e1e      	ldr	r6, [pc, #120]	; (80090e8 <ai_platform_network_create+0xf4>)
 8009070:	4d1e      	ldr	r5, [pc, #120]	; (80090ec <ai_platform_network_create+0xf8>)
 8009072:	600e      	str	r6, [r1, #0]
 8009074:	6809      	ldr	r1, [r1, #0]
 8009076:	42a9      	cmp	r1, r5
 8009078:	d0db      	beq.n	8009032 <ai_platform_network_create+0x3e>
 800907a:	e7fe      	b.n	800907a <ai_platform_network_create+0x86>
 800907c:	491c      	ldr	r1, [pc, #112]	; (80090f0 <ai_platform_network_create+0xfc>)
 800907e:	2501      	movs	r5, #1
 8009080:	460e      	mov	r6, r1
 8009082:	600d      	str	r5, [r1, #0]
 8009084:	6831      	ldr	r1, [r6, #0]
 8009086:	2900      	cmp	r1, #0
 8009088:	d1fc      	bne.n	8009084 <ai_platform_network_create+0x90>
 800908a:	491a      	ldr	r1, [pc, #104]	; (80090f4 <ai_platform_network_create+0x100>)
 800908c:	4e16      	ldr	r6, [pc, #88]	; (80090e8 <ai_platform_network_create+0xf4>)
 800908e:	4d17      	ldr	r5, [pc, #92]	; (80090ec <ai_platform_network_create+0xf8>)
 8009090:	600e      	str	r6, [r1, #0]
 8009092:	6809      	ldr	r1, [r1, #0]
 8009094:	42a9      	cmp	r1, r5
 8009096:	d0cc      	beq.n	8009032 <ai_platform_network_create+0x3e>
 8009098:	e7fe      	b.n	8009098 <ai_platform_network_create+0xa4>
 800909a:	f241 0010 	movw	r0, #4112	; 0x1010
 800909e:	b003      	add	sp, #12
 80090a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090a2:	2330      	movs	r3, #48	; 0x30
 80090a4:	2100      	movs	r1, #0
 80090a6:	2210      	movs	r2, #16
 80090a8:	6029      	str	r1, [r5, #0]
 80090aa:	2000      	movs	r0, #0
 80090ac:	f363 0007 	bfi	r0, r3, #0, #8
 80090b0:	f362 201f 	bfi	r0, r2, #8, #24
 80090b4:	b003      	add	sp, #12
 80090b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090b8:	4b0f      	ldr	r3, [pc, #60]	; (80090f8 <ai_platform_network_create+0x104>)
 80090ba:	a802      	add	r0, sp, #8
 80090bc:	f840 3d04 	str.w	r3, [r0, #-4]!
 80090c0:	f001 fa82 	bl	800a5c8 <ai_check_custom_types>
 80090c4:	b110      	cbz	r0, 80090cc <ai_platform_network_create+0xd8>
 80090c6:	2200      	movs	r2, #0
 80090c8:	4613      	mov	r3, r2
 80090ca:	e7ee      	b.n	80090aa <ai_platform_network_create+0xb6>
 80090cc:	2302      	movs	r3, #2
 80090ce:	e7e9      	b.n	80090a4 <ai_platform_network_create+0xb0>
 80090d0:	e0002000 	.word	0xe0002000
 80090d4:	e0042000 	.word	0xe0042000
 80090d8:	5c001000 	.word	0x5c001000
 80090dc:	a1c00100 	.word	0xa1c00100
 80090e0:	58024c08 	.word	0x58024c08
 80090e4:	58024c00 	.word	0x58024c00
 80090e8:	f407a5c2 	.word	0xf407a5c2
 80090ec:	b5e8b5cd 	.word	0xb5e8b5cd
 80090f0:	40023008 	.word	0x40023008
 80090f4:	40023000 	.word	0x40023000
 80090f8:	84048403 	.word	0x84048403

080090fc <ai_platform_network_init>:
 80090fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fe:	2800      	cmp	r0, #0
 8009100:	d05e      	beq.n	80091c0 <ai_platform_network_init+0xc4>
 8009102:	4b68      	ldr	r3, [pc, #416]	; (80092a4 <ai_platform_network_init+0x1a8>)
 8009104:	6802      	ldr	r2, [r0, #0]
 8009106:	429a      	cmp	r2, r3
 8009108:	d15a      	bne.n	80091c0 <ai_platform_network_init+0xc4>
 800910a:	4a67      	ldr	r2, [pc, #412]	; (80092a8 <ai_platform_network_init+0x1ac>)
 800910c:	4c67      	ldr	r4, [pc, #412]	; (80092ac <ai_platform_network_init+0x1b0>)
 800910e:	6813      	ldr	r3, [r2, #0]
 8009110:	f023 0301 	bic.w	r3, r3, #1
 8009114:	6013      	str	r3, [r2, #0]
 8009116:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800911a:	6823      	ldr	r3, [r4, #0]
 800911c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009120:	189a      	adds	r2, r3, r2
 8009122:	2a01      	cmp	r2, #1
 8009124:	d93d      	bls.n	80091a2 <ai_platform_network_init+0xa6>
 8009126:	f240 4249 	movw	r2, #1097	; 0x449
 800912a:	4293      	cmp	r3, r2
 800912c:	d039      	beq.n	80091a2 <ai_platform_network_init+0xa6>
 800912e:	4b60      	ldr	r3, [pc, #384]	; (80092b0 <ai_platform_network_init+0x1b4>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009136:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800913a:	d06b      	beq.n	8009214 <ai_platform_network_init+0x118>
 800913c:	4605      	mov	r5, r0
 800913e:	460c      	mov	r4, r1
 8009140:	2900      	cmp	r1, #0
 8009142:	f000 80a8 	beq.w	8009296 <ai_platform_network_init+0x19a>
 8009146:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 8009148:	690e      	ldr	r6, [r1, #16]
 800914a:	2f00      	cmp	r7, #0
 800914c:	f000 8092 	beq.w	8009274 <ai_platform_network_init+0x178>
 8009150:	2e00      	cmp	r6, #0
 8009152:	d07d      	beq.n	8009250 <ai_platform_network_init+0x154>
 8009154:	f104 0718 	add.w	r7, r4, #24
 8009158:	f105 0c18 	add.w	ip, r5, #24
 800915c:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8009160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009162:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009166:	e894 0003 	ldmia.w	r4, {r0, r1}
 800916a:	2403      	movs	r4, #3
 800916c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009170:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009172:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009174:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009178:	e886 0003 	stmia.w	r6, {r0, r1}
 800917c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800917e:	60ec      	str	r4, [r5, #12]
 8009180:	b16a      	cbz	r2, 800919e <ai_platform_network_init+0xa2>
 8009182:	68d3      	ldr	r3, [r2, #12]
 8009184:	6095      	str	r5, [r2, #8]
 8009186:	b153      	cbz	r3, 800919e <ai_platform_network_init+0xa2>
 8009188:	429a      	cmp	r2, r3
 800918a:	d104      	bne.n	8009196 <ai_platform_network_init+0x9a>
 800918c:	e007      	b.n	800919e <ai_platform_network_init+0xa2>
 800918e:	429a      	cmp	r2, r3
 8009190:	4613      	mov	r3, r2
 8009192:	d004      	beq.n	800919e <ai_platform_network_init+0xa2>
 8009194:	b11a      	cbz	r2, 800919e <ai_platform_network_init+0xa2>
 8009196:	68da      	ldr	r2, [r3, #12]
 8009198:	609d      	str	r5, [r3, #8]
 800919a:	2a00      	cmp	r2, #0
 800919c:	d1f7      	bne.n	800918e <ai_platform_network_init+0x92>
 800919e:	4628      	mov	r0, r5
 80091a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091a2:	4b44      	ldr	r3, [pc, #272]	; (80092b4 <ai_platform_network_init+0x1b8>)
 80091a4:	2201      	movs	r2, #1
 80091a6:	461c      	mov	r4, r3
 80091a8:	601a      	str	r2, [r3, #0]
 80091aa:	6823      	ldr	r3, [r4, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1fc      	bne.n	80091aa <ai_platform_network_init+0xae>
 80091b0:	4b41      	ldr	r3, [pc, #260]	; (80092b8 <ai_platform_network_init+0x1bc>)
 80091b2:	4c42      	ldr	r4, [pc, #264]	; (80092bc <ai_platform_network_init+0x1c0>)
 80091b4:	4a42      	ldr	r2, [pc, #264]	; (80092c0 <ai_platform_network_init+0x1c4>)
 80091b6:	601c      	str	r4, [r3, #0]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d0be      	beq.n	800913c <ai_platform_network_init+0x40>
 80091be:	e7fe      	b.n	80091be <ai_platform_network_init+0xc2>
 80091c0:	4a39      	ldr	r2, [pc, #228]	; (80092a8 <ai_platform_network_init+0x1ac>)
 80091c2:	493a      	ldr	r1, [pc, #232]	; (80092ac <ai_platform_network_init+0x1b0>)
 80091c4:	6813      	ldr	r3, [r2, #0]
 80091c6:	f023 0301 	bic.w	r3, r3, #1
 80091ca:	6013      	str	r3, [r2, #0]
 80091cc:	680b      	ldr	r3, [r1, #0]
 80091ce:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80091d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80091d6:	185a      	adds	r2, r3, r1
 80091d8:	2a01      	cmp	r2, #1
 80091da:	d90c      	bls.n	80091f6 <ai_platform_network_init+0xfa>
 80091dc:	f240 4249 	movw	r2, #1097	; 0x449
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d008      	beq.n	80091f6 <ai_platform_network_init+0xfa>
 80091e4:	4b32      	ldr	r3, [pc, #200]	; (80092b0 <ai_platform_network_init+0x1b4>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80091ec:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80091f0:	d01f      	beq.n	8009232 <ai_platform_network_init+0x136>
 80091f2:	2000      	movs	r0, #0
 80091f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091f6:	4b2f      	ldr	r3, [pc, #188]	; (80092b4 <ai_platform_network_init+0x1b8>)
 80091f8:	2201      	movs	r2, #1
 80091fa:	4619      	mov	r1, r3
 80091fc:	601a      	str	r2, [r3, #0]
 80091fe:	680b      	ldr	r3, [r1, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1fc      	bne.n	80091fe <ai_platform_network_init+0x102>
 8009204:	4b2c      	ldr	r3, [pc, #176]	; (80092b8 <ai_platform_network_init+0x1bc>)
 8009206:	492d      	ldr	r1, [pc, #180]	; (80092bc <ai_platform_network_init+0x1c0>)
 8009208:	4a2d      	ldr	r2, [pc, #180]	; (80092c0 <ai_platform_network_init+0x1c4>)
 800920a:	6019      	str	r1, [r3, #0]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4293      	cmp	r3, r2
 8009210:	d0ef      	beq.n	80091f2 <ai_platform_network_init+0xf6>
 8009212:	e7fe      	b.n	8009212 <ai_platform_network_init+0x116>
 8009214:	4b2b      	ldr	r3, [pc, #172]	; (80092c4 <ai_platform_network_init+0x1c8>)
 8009216:	2201      	movs	r2, #1
 8009218:	461c      	mov	r4, r3
 800921a:	601a      	str	r2, [r3, #0]
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1fc      	bne.n	800921c <ai_platform_network_init+0x120>
 8009222:	4b29      	ldr	r3, [pc, #164]	; (80092c8 <ai_platform_network_init+0x1cc>)
 8009224:	4c25      	ldr	r4, [pc, #148]	; (80092bc <ai_platform_network_init+0x1c0>)
 8009226:	4a26      	ldr	r2, [pc, #152]	; (80092c0 <ai_platform_network_init+0x1c4>)
 8009228:	601c      	str	r4, [r3, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4293      	cmp	r3, r2
 800922e:	d085      	beq.n	800913c <ai_platform_network_init+0x40>
 8009230:	e7fe      	b.n	8009230 <ai_platform_network_init+0x134>
 8009232:	4b24      	ldr	r3, [pc, #144]	; (80092c4 <ai_platform_network_init+0x1c8>)
 8009234:	2201      	movs	r2, #1
 8009236:	4619      	mov	r1, r3
 8009238:	601a      	str	r2, [r3, #0]
 800923a:	680b      	ldr	r3, [r1, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1fc      	bne.n	800923a <ai_platform_network_init+0x13e>
 8009240:	4b21      	ldr	r3, [pc, #132]	; (80092c8 <ai_platform_network_init+0x1cc>)
 8009242:	491e      	ldr	r1, [pc, #120]	; (80092bc <ai_platform_network_init+0x1c0>)
 8009244:	4a1e      	ldr	r2, [pc, #120]	; (80092c0 <ai_platform_network_init+0x1c4>)
 8009246:	6019      	str	r1, [r3, #0]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4293      	cmp	r3, r2
 800924c:	d0d1      	beq.n	80091f2 <ai_platform_network_init+0xf6>
 800924e:	e7fe      	b.n	800924e <ai_platform_network_init+0x152>
 8009250:	8921      	ldrh	r1, [r4, #8]
 8009252:	88e2      	ldrh	r2, [r4, #6]
 8009254:	68e3      	ldr	r3, [r4, #12]
 8009256:	fb02 f201 	mul.w	r2, r2, r1
 800925a:	fb03 f302 	mul.w	r3, r3, r2
 800925e:	2b00      	cmp	r3, #0
 8009260:	f43f af78 	beq.w	8009154 <ai_platform_network_init+0x58>
 8009264:	f105 0010 	add.w	r0, r5, #16
 8009268:	2212      	movs	r2, #18
 800926a:	2110      	movs	r1, #16
 800926c:	f000 fb8c 	bl	8009988 <core_set_error>
 8009270:	4630      	mov	r0, r6
 8009272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009274:	8c09      	ldrh	r1, [r1, #32]
 8009276:	8be2      	ldrh	r2, [r4, #30]
 8009278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800927a:	fb02 f201 	mul.w	r2, r2, r1
 800927e:	fb03 f302 	mul.w	r3, r3, r2
 8009282:	2b00      	cmp	r3, #0
 8009284:	f43f af64 	beq.w	8009150 <ai_platform_network_init+0x54>
 8009288:	2213      	movs	r2, #19
 800928a:	2110      	movs	r1, #16
 800928c:	3010      	adds	r0, #16
 800928e:	f000 fb7b 	bl	8009988 <core_set_error>
 8009292:	4638      	mov	r0, r7
 8009294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009296:	2211      	movs	r2, #17
 8009298:	2110      	movs	r1, #16
 800929a:	3010      	adds	r0, #16
 800929c:	f000 fb74 	bl	8009988 <core_set_error>
 80092a0:	4620      	mov	r0, r4
 80092a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092a4:	a1c00100 	.word	0xa1c00100
 80092a8:	e0002000 	.word	0xe0002000
 80092ac:	e0042000 	.word	0xe0042000
 80092b0:	5c001000 	.word	0x5c001000
 80092b4:	40023008 	.word	0x40023008
 80092b8:	40023000 	.word	0x40023000
 80092bc:	f407a5c2 	.word	0xf407a5c2
 80092c0:	b5e8b5cd 	.word	0xb5e8b5cd
 80092c4:	58024c08 	.word	0x58024c08
 80092c8:	58024c00 	.word	0x58024c00

080092cc <ai_platform_network_post_init>:
 80092cc:	b538      	push	{r3, r4, r5, lr}
 80092ce:	b118      	cbz	r0, 80092d8 <ai_platform_network_post_init+0xc>
 80092d0:	4b4a      	ldr	r3, [pc, #296]	; (80093fc <ai_platform_network_post_init+0x130>)
 80092d2:	6802      	ldr	r2, [r0, #0]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d029      	beq.n	800932c <ai_platform_network_post_init+0x60>
 80092d8:	4a49      	ldr	r2, [pc, #292]	; (8009400 <ai_platform_network_post_init+0x134>)
 80092da:	494a      	ldr	r1, [pc, #296]	; (8009404 <ai_platform_network_post_init+0x138>)
 80092dc:	6813      	ldr	r3, [r2, #0]
 80092de:	f023 0301 	bic.w	r3, r3, #1
 80092e2:	6013      	str	r3, [r2, #0]
 80092e4:	680b      	ldr	r3, [r1, #0]
 80092e6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80092ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80092ee:	185a      	adds	r2, r3, r1
 80092f0:	2a01      	cmp	r2, #1
 80092f2:	d90c      	bls.n	800930e <ai_platform_network_post_init+0x42>
 80092f4:	f240 4249 	movw	r2, #1097	; 0x449
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d008      	beq.n	800930e <ai_platform_network_post_init+0x42>
 80092fc:	4b42      	ldr	r3, [pc, #264]	; (8009408 <ai_platform_network_post_init+0x13c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009304:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009308:	d044      	beq.n	8009394 <ai_platform_network_post_init+0xc8>
 800930a:	2000      	movs	r0, #0
 800930c:	bd38      	pop	{r3, r4, r5, pc}
 800930e:	4b3f      	ldr	r3, [pc, #252]	; (800940c <ai_platform_network_post_init+0x140>)
 8009310:	2201      	movs	r2, #1
 8009312:	4619      	mov	r1, r3
 8009314:	601a      	str	r2, [r3, #0]
 8009316:	680b      	ldr	r3, [r1, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1fc      	bne.n	8009316 <ai_platform_network_post_init+0x4a>
 800931c:	4b3c      	ldr	r3, [pc, #240]	; (8009410 <ai_platform_network_post_init+0x144>)
 800931e:	493d      	ldr	r1, [pc, #244]	; (8009414 <ai_platform_network_post_init+0x148>)
 8009320:	4a3d      	ldr	r2, [pc, #244]	; (8009418 <ai_platform_network_post_init+0x14c>)
 8009322:	6019      	str	r1, [r3, #0]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4293      	cmp	r3, r2
 8009328:	d0ef      	beq.n	800930a <ai_platform_network_post_init+0x3e>
 800932a:	e7fe      	b.n	800932a <ai_platform_network_post_init+0x5e>
 800932c:	4a34      	ldr	r2, [pc, #208]	; (8009400 <ai_platform_network_post_init+0x134>)
 800932e:	4935      	ldr	r1, [pc, #212]	; (8009404 <ai_platform_network_post_init+0x138>)
 8009330:	6813      	ldr	r3, [r2, #0]
 8009332:	f023 0301 	bic.w	r3, r3, #1
 8009336:	6013      	str	r3, [r2, #0]
 8009338:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800933c:	680b      	ldr	r3, [r1, #0]
 800933e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009342:	189a      	adds	r2, r3, r2
 8009344:	2a01      	cmp	r2, #1
 8009346:	d94a      	bls.n	80093de <ai_platform_network_post_init+0x112>
 8009348:	f240 4249 	movw	r2, #1097	; 0x449
 800934c:	4293      	cmp	r3, r2
 800934e:	d046      	beq.n	80093de <ai_platform_network_post_init+0x112>
 8009350:	4b2d      	ldr	r3, [pc, #180]	; (8009408 <ai_platform_network_post_init+0x13c>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009358:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800935c:	d030      	beq.n	80093c0 <ai_platform_network_post_init+0xf4>
 800935e:	68c3      	ldr	r3, [r0, #12]
 8009360:	4604      	mov	r4, r0
 8009362:	f013 0502 	ands.w	r5, r3, #2
 8009366:	d024      	beq.n	80093b2 <ai_platform_network_post_init+0xe6>
 8009368:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800936a:	b18b      	cbz	r3, 8009390 <ai_platform_network_post_init+0xc4>
 800936c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800936e:	b90d      	cbnz	r5, 8009374 <ai_platform_network_post_init+0xa8>
 8009370:	e00e      	b.n	8009390 <ai_platform_network_post_init+0xc4>
 8009372:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009374:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009376:	4629      	mov	r1, r5
 8009378:	2000      	movs	r0, #0
 800937a:	4798      	blx	r3
 800937c:	68ea      	ldr	r2, [r5, #12]
 800937e:	1b53      	subs	r3, r2, r5
 8009380:	4615      	mov	r5, r2
 8009382:	bf18      	it	ne
 8009384:	2301      	movne	r3, #1
 8009386:	2a00      	cmp	r2, #0
 8009388:	bf08      	it	eq
 800938a:	2300      	moveq	r3, #0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1f0      	bne.n	8009372 <ai_platform_network_post_init+0xa6>
 8009390:	2001      	movs	r0, #1
 8009392:	bd38      	pop	{r3, r4, r5, pc}
 8009394:	4b21      	ldr	r3, [pc, #132]	; (800941c <ai_platform_network_post_init+0x150>)
 8009396:	2201      	movs	r2, #1
 8009398:	4619      	mov	r1, r3
 800939a:	601a      	str	r2, [r3, #0]
 800939c:	680b      	ldr	r3, [r1, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1fc      	bne.n	800939c <ai_platform_network_post_init+0xd0>
 80093a2:	4b1f      	ldr	r3, [pc, #124]	; (8009420 <ai_platform_network_post_init+0x154>)
 80093a4:	491b      	ldr	r1, [pc, #108]	; (8009414 <ai_platform_network_post_init+0x148>)
 80093a6:	4a1c      	ldr	r2, [pc, #112]	; (8009418 <ai_platform_network_post_init+0x14c>)
 80093a8:	6019      	str	r1, [r3, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d0ac      	beq.n	800930a <ai_platform_network_post_init+0x3e>
 80093b0:	e7fe      	b.n	80093b0 <ai_platform_network_post_init+0xe4>
 80093b2:	2210      	movs	r2, #16
 80093b4:	2111      	movs	r1, #17
 80093b6:	3010      	adds	r0, #16
 80093b8:	f000 fae6 	bl	8009988 <core_set_error>
 80093bc:	4628      	mov	r0, r5
 80093be:	bd38      	pop	{r3, r4, r5, pc}
 80093c0:	4b16      	ldr	r3, [pc, #88]	; (800941c <ai_platform_network_post_init+0x150>)
 80093c2:	2201      	movs	r2, #1
 80093c4:	4619      	mov	r1, r3
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	680b      	ldr	r3, [r1, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1fc      	bne.n	80093c8 <ai_platform_network_post_init+0xfc>
 80093ce:	4b14      	ldr	r3, [pc, #80]	; (8009420 <ai_platform_network_post_init+0x154>)
 80093d0:	4910      	ldr	r1, [pc, #64]	; (8009414 <ai_platform_network_post_init+0x148>)
 80093d2:	4a11      	ldr	r2, [pc, #68]	; (8009418 <ai_platform_network_post_init+0x14c>)
 80093d4:	6019      	str	r1, [r3, #0]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4293      	cmp	r3, r2
 80093da:	d0c0      	beq.n	800935e <ai_platform_network_post_init+0x92>
 80093dc:	e7fe      	b.n	80093dc <ai_platform_network_post_init+0x110>
 80093de:	4b0b      	ldr	r3, [pc, #44]	; (800940c <ai_platform_network_post_init+0x140>)
 80093e0:	2201      	movs	r2, #1
 80093e2:	4619      	mov	r1, r3
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	680b      	ldr	r3, [r1, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1fc      	bne.n	80093e6 <ai_platform_network_post_init+0x11a>
 80093ec:	4b08      	ldr	r3, [pc, #32]	; (8009410 <ai_platform_network_post_init+0x144>)
 80093ee:	4909      	ldr	r1, [pc, #36]	; (8009414 <ai_platform_network_post_init+0x148>)
 80093f0:	4a09      	ldr	r2, [pc, #36]	; (8009418 <ai_platform_network_post_init+0x14c>)
 80093f2:	6019      	str	r1, [r3, #0]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d0b1      	beq.n	800935e <ai_platform_network_post_init+0x92>
 80093fa:	e7fe      	b.n	80093fa <ai_platform_network_post_init+0x12e>
 80093fc:	a1c00100 	.word	0xa1c00100
 8009400:	e0002000 	.word	0xe0002000
 8009404:	e0042000 	.word	0xe0042000
 8009408:	5c001000 	.word	0x5c001000
 800940c:	40023008 	.word	0x40023008
 8009410:	40023000 	.word	0x40023000
 8009414:	f407a5c2 	.word	0xf407a5c2
 8009418:	b5e8b5cd 	.word	0xb5e8b5cd
 800941c:	58024c08 	.word	0x58024c08
 8009420:	58024c00 	.word	0x58024c00

08009424 <ai_platform_network_process>:
 8009424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009428:	4692      	mov	sl, r2
 800942a:	b083      	sub	sp, #12
 800942c:	4604      	mov	r4, r0
 800942e:	b120      	cbz	r0, 800943a <ai_platform_network_process+0x16>
 8009430:	4b86      	ldr	r3, [pc, #536]	; (800964c <ai_platform_network_process+0x228>)
 8009432:	6802      	ldr	r2, [r0, #0]
 8009434:	429a      	cmp	r2, r3
 8009436:	bf18      	it	ne
 8009438:	2400      	movne	r4, #0
 800943a:	4a85      	ldr	r2, [pc, #532]	; (8009650 <ai_platform_network_process+0x22c>)
 800943c:	4885      	ldr	r0, [pc, #532]	; (8009654 <ai_platform_network_process+0x230>)
 800943e:	6813      	ldr	r3, [r2, #0]
 8009440:	f023 0301 	bic.w	r3, r3, #1
 8009444:	6013      	str	r3, [r2, #0]
 8009446:	6803      	ldr	r3, [r0, #0]
 8009448:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 800944c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009450:	181a      	adds	r2, r3, r0
 8009452:	2a01      	cmp	r2, #1
 8009454:	f240 80c6 	bls.w	80095e4 <ai_platform_network_process+0x1c0>
 8009458:	f240 4249 	movw	r2, #1097	; 0x449
 800945c:	4293      	cmp	r3, r2
 800945e:	f000 80c1 	beq.w	80095e4 <ai_platform_network_process+0x1c0>
 8009462:	4b7d      	ldr	r3, [pc, #500]	; (8009658 <ai_platform_network_process+0x234>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800946a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800946e:	f000 80a9 	beq.w	80095c4 <ai_platform_network_process+0x1a0>
 8009472:	2c00      	cmp	r4, #0
 8009474:	f000 80db 	beq.w	800962e <ai_platform_network_process+0x20a>
 8009478:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800947c:	68e0      	ldr	r0, [r4, #12]
 800947e:	461a      	mov	r2, r3
 8009480:	f000 0003 	and.w	r0, r0, #3
 8009484:	2b00      	cmp	r3, #0
 8009486:	f000 80bd 	beq.w	8009604 <ai_platform_network_process+0x1e0>
 800948a:	2600      	movs	r6, #0
 800948c:	2803      	cmp	r0, #3
 800948e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009490:	6166      	str	r6, [r4, #20]
 8009492:	f040 80c6 	bne.w	8009622 <ai_platform_network_process+0x1fe>
 8009496:	2900      	cmp	r1, #0
 8009498:	f000 80b7 	beq.w	800960a <ai_platform_network_process+0x1e6>
 800949c:	fab5 f085 	clz	r0, r5
 80094a0:	0940      	lsrs	r0, r0, #5
 80094a2:	2800      	cmp	r0, #0
 80094a4:	f040 80b1 	bne.w	800960a <ai_platform_network_process+0x1e6>
 80094a8:	882e      	ldrh	r6, [r5, #0]
 80094aa:	2e00      	cmp	r6, #0
 80094ac:	f000 80ad 	beq.w	800960a <ai_platform_network_process+0x1e6>
 80094b0:	888f      	ldrh	r7, [r1, #4]
 80094b2:	686e      	ldr	r6, [r5, #4]
 80094b4:	9701      	str	r7, [sp, #4]
 80094b6:	2e00      	cmp	r6, #0
 80094b8:	f000 825f 	beq.w	800997a <ai_platform_network_process+0x556>
 80094bc:	6836      	ldr	r6, [r6, #0]
 80094be:	2e00      	cmp	r6, #0
 80094c0:	f000 825b 	beq.w	800997a <ai_platform_network_process+0x556>
 80094c4:	68ab      	ldr	r3, [r5, #8]
 80094c6:	f8d3 9000 	ldr.w	r9, [r3]
 80094ca:	f1b9 0f00 	cmp.w	r9, #0
 80094ce:	f000 809c 	beq.w	800960a <ai_platform_network_process+0x1e6>
 80094d2:	460f      	mov	r7, r1
 80094d4:	4680      	mov	r8, r0
 80094d6:	e05e      	b.n	8009596 <ai_platform_network_process+0x172>
 80094d8:	68f3      	ldr	r3, [r6, #12]
 80094da:	68da      	ldr	r2, [r3, #12]
 80094dc:	455a      	cmp	r2, fp
 80094de:	d168      	bne.n	80095b2 <ai_platform_network_process+0x18e>
 80094e0:	689a      	ldr	r2, [r3, #8]
 80094e2:	4572      	cmp	r2, lr
 80094e4:	d165      	bne.n	80095b2 <ai_platform_network_process+0x18e>
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	459c      	cmp	ip, r3
 80094ea:	d162      	bne.n	80095b2 <ai_platform_network_process+0x18e>
 80094ec:	6800      	ldr	r0, [r0, #0]
 80094ee:	f001 f91b 	bl	800a728 <ai_array_get_byte_size>
 80094f2:	68f2      	ldr	r2, [r6, #12]
 80094f4:	6973      	ldr	r3, [r6, #20]
 80094f6:	68d2      	ldr	r2, [r2, #12]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	fb03 f302 	mul.w	r3, r3, r2
 80094fe:	4298      	cmp	r0, r3
 8009500:	d357      	bcc.n	80095b2 <ai_platform_network_process+0x18e>
 8009502:	69b3      	ldr	r3, [r6, #24]
 8009504:	6818      	ldr	r0, [r3, #0]
 8009506:	f001 f8c3 	bl	800a690 <ai_array_to_buffer_fmt>
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	4043      	eors	r3, r0
 800950e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8009512:	f040 8229 	bne.w	8009968 <ai_platform_network_process+0x544>
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	2b00      	cmp	r3, #0
 800951a:	f000 821d 	beq.w	8009958 <ai_platform_network_process+0x534>
 800951e:	88bb      	ldrh	r3, [r7, #4]
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 808a 	beq.w	800963a <ai_platform_network_process+0x216>
 8009526:	9a01      	ldr	r2, [sp, #4]
 8009528:	68f1      	ldr	r1, [r6, #12]
 800952a:	429a      	cmp	r2, r3
 800952c:	68c9      	ldr	r1, [r1, #12]
 800952e:	bf38      	it	cc
 8009530:	461a      	movcc	r2, r3
 8009532:	9201      	str	r2, [sp, #4]
 8009534:	6972      	ldr	r2, [r6, #20]
 8009536:	68d3      	ldr	r3, [r2, #12]
 8009538:	fb03 f301 	mul.w	r3, r3, r1
 800953c:	f8c9 3008 	str.w	r3, [r9, #8]
 8009540:	88ba      	ldrh	r2, [r7, #4]
 8009542:	fb03 f302 	mul.w	r3, r3, r2
 8009546:	f8c9 300c 	str.w	r3, [r9, #12]
 800954a:	6939      	ldr	r1, [r7, #16]
 800954c:	f8c9 1004 	str.w	r1, [r9, #4]
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	4413      	add	r3, r2
 8009554:	f8c9 3000 	str.w	r3, [r9]
 8009558:	69b0      	ldr	r0, [r6, #24]
 800955a:	6803      	ldr	r3, [r0, #0]
 800955c:	009a      	lsls	r2, r3, #2
 800955e:	d408      	bmi.n	8009572 <ai_platform_network_process+0x14e>
 8009560:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009564:	1a9b      	subs	r3, r3, r2
 8009566:	4419      	add	r1, r3
 8009568:	6081      	str	r1, [r0, #8]
 800956a:	69b3      	ldr	r3, [r6, #24]
 800956c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8009570:	60da      	str	r2, [r3, #12]
 8009572:	f108 0801 	add.w	r8, r8, #1
 8009576:	882b      	ldrh	r3, [r5, #0]
 8009578:	4598      	cmp	r8, r3
 800957a:	d27b      	bcs.n	8009674 <ai_platform_network_process+0x250>
 800957c:	686b      	ldr	r3, [r5, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d078      	beq.n	8009674 <ai_platform_network_process+0x250>
 8009582:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8009586:	2e00      	cmp	r6, #0
 8009588:	d074      	beq.n	8009674 <ai_platform_network_process+0x250>
 800958a:	68ab      	ldr	r3, [r5, #8]
 800958c:	3718      	adds	r7, #24
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 8009594:	d039      	beq.n	800960a <ai_platform_network_process+0x1e6>
 8009596:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 800959a:	f8b7 b006 	ldrh.w	fp, [r7, #6]
 800959e:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 80095a2:	fb0b f30e 	mul.w	r3, fp, lr
 80095a6:	69b0      	ldr	r0, [r6, #24]
 80095a8:	fb0c f303 	mul.w	r3, ip, r3
 80095ac:	6841      	ldr	r1, [r0, #4]
 80095ae:	4299      	cmp	r1, r3
 80095b0:	d292      	bcs.n	80094d8 <ai_platform_network_process+0xb4>
 80095b2:	f104 0010 	add.w	r0, r4, #16
 80095b6:	2218      	movs	r2, #24
 80095b8:	2112      	movs	r1, #18
 80095ba:	f04f 0b00 	mov.w	fp, #0
 80095be:	f000 f9e3 	bl	8009988 <core_set_error>
 80095c2:	e02a      	b.n	800961a <ai_platform_network_process+0x1f6>
 80095c4:	4b25      	ldr	r3, [pc, #148]	; (800965c <ai_platform_network_process+0x238>)
 80095c6:	2201      	movs	r2, #1
 80095c8:	4618      	mov	r0, r3
 80095ca:	601a      	str	r2, [r3, #0]
 80095cc:	6803      	ldr	r3, [r0, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1fc      	bne.n	80095cc <ai_platform_network_process+0x1a8>
 80095d2:	4b23      	ldr	r3, [pc, #140]	; (8009660 <ai_platform_network_process+0x23c>)
 80095d4:	4823      	ldr	r0, [pc, #140]	; (8009664 <ai_platform_network_process+0x240>)
 80095d6:	4a24      	ldr	r2, [pc, #144]	; (8009668 <ai_platform_network_process+0x244>)
 80095d8:	6018      	str	r0, [r3, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4293      	cmp	r3, r2
 80095de:	f43f af48 	beq.w	8009472 <ai_platform_network_process+0x4e>
 80095e2:	e7fe      	b.n	80095e2 <ai_platform_network_process+0x1be>
 80095e4:	4b21      	ldr	r3, [pc, #132]	; (800966c <ai_platform_network_process+0x248>)
 80095e6:	2201      	movs	r2, #1
 80095e8:	4618      	mov	r0, r3
 80095ea:	601a      	str	r2, [r3, #0]
 80095ec:	6803      	ldr	r3, [r0, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1fc      	bne.n	80095ec <ai_platform_network_process+0x1c8>
 80095f2:	4b1f      	ldr	r3, [pc, #124]	; (8009670 <ai_platform_network_process+0x24c>)
 80095f4:	481b      	ldr	r0, [pc, #108]	; (8009664 <ai_platform_network_process+0x240>)
 80095f6:	4a1c      	ldr	r2, [pc, #112]	; (8009668 <ai_platform_network_process+0x244>)
 80095f8:	6018      	str	r0, [r3, #0]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4293      	cmp	r3, r2
 80095fe:	f43f af38 	beq.w	8009472 <ai_platform_network_process+0x4e>
 8009602:	e7fe      	b.n	8009602 <ai_platform_network_process+0x1de>
 8009604:	2803      	cmp	r0, #3
 8009606:	6163      	str	r3, [r4, #20]
 8009608:	d10b      	bne.n	8009622 <ai_platform_network_process+0x1fe>
 800960a:	f04f 0b00 	mov.w	fp, #0
 800960e:	f104 0010 	add.w	r0, r4, #16
 8009612:	2217      	movs	r2, #23
 8009614:	2112      	movs	r1, #18
 8009616:	f000 f9b7 	bl	8009988 <core_set_error>
 800961a:	4658      	mov	r0, fp
 800961c:	b003      	add	sp, #12
 800961e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009622:	f104 0010 	add.w	r0, r4, #16
 8009626:	2230      	movs	r2, #48	; 0x30
 8009628:	2111      	movs	r1, #17
 800962a:	f000 f9ad 	bl	8009988 <core_set_error>
 800962e:	f04f 0b00 	mov.w	fp, #0
 8009632:	4658      	mov	r0, fp
 8009634:	b003      	add	sp, #12
 8009636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963a:	f104 0010 	add.w	r0, r4, #16
 800963e:	2221      	movs	r2, #33	; 0x21
 8009640:	2112      	movs	r1, #18
 8009642:	469b      	mov	fp, r3
 8009644:	f000 f9a0 	bl	8009988 <core_set_error>
 8009648:	e7e7      	b.n	800961a <ai_platform_network_process+0x1f6>
 800964a:	bf00      	nop
 800964c:	a1c00100 	.word	0xa1c00100
 8009650:	e0002000 	.word	0xe0002000
 8009654:	e0042000 	.word	0xe0042000
 8009658:	5c001000 	.word	0x5c001000
 800965c:	58024c08 	.word	0x58024c08
 8009660:	58024c00 	.word	0x58024c00
 8009664:	f407a5c2 	.word	0xf407a5c2
 8009668:	b5e8b5cd 	.word	0xb5e8b5cd
 800966c:	40023008 	.word	0x40023008
 8009670:	40023000 	.word	0x40023000
 8009674:	f1ba 0f00 	cmp.w	sl, #0
 8009678:	f000 808c 	beq.w	8009794 <ai_platform_network_process+0x370>
 800967c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8009680:	2b01      	cmp	r3, #1
 8009682:	f240 813b 	bls.w	80098fc <ai_platform_network_process+0x4d8>
 8009686:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009688:	f115 0f0c 	cmn.w	r5, #12
 800968c:	f000 8136 	beq.w	80098fc <ai_platform_network_process+0x4d8>
 8009690:	89ab      	ldrh	r3, [r5, #12]
 8009692:	2b00      	cmp	r3, #0
 8009694:	f000 8132 	beq.w	80098fc <ai_platform_network_process+0x4d8>
 8009698:	4656      	mov	r6, sl
 800969a:	f04f 0900 	mov.w	r9, #0
 800969e:	9400      	str	r4, [sp, #0]
 80096a0:	4599      	cmp	r9, r3
 80096a2:	d274      	bcs.n	800978e <ai_platform_network_process+0x36a>
 80096a4:	692b      	ldr	r3, [r5, #16]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d071      	beq.n	800978e <ai_platform_network_process+0x36a>
 80096aa:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 80096ae:	2f00      	cmp	r7, #0
 80096b0:	d06d      	beq.n	800978e <ai_platform_network_process+0x36a>
 80096b2:	696b      	ldr	r3, [r5, #20]
 80096b4:	ea4f 1409 	mov.w	r4, r9, lsl #4
 80096b8:	f8d3 8000 	ldr.w	r8, [r3]
 80096bc:	eb18 0a04 	adds.w	sl, r8, r4
 80096c0:	f000 8125 	beq.w	800990e <ai_platform_network_process+0x4ea>
 80096c4:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 80096c8:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 80096cc:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80096d0:	fb0b f30e 	mul.w	r3, fp, lr
 80096d4:	69b8      	ldr	r0, [r7, #24]
 80096d6:	fb0c f303 	mul.w	r3, ip, r3
 80096da:	6841      	ldr	r1, [r0, #4]
 80096dc:	4299      	cmp	r1, r3
 80096de:	f0c0 810c 	bcc.w	80098fa <ai_platform_network_process+0x4d6>
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	68da      	ldr	r2, [r3, #12]
 80096e6:	455a      	cmp	r2, fp
 80096e8:	f040 8107 	bne.w	80098fa <ai_platform_network_process+0x4d6>
 80096ec:	689a      	ldr	r2, [r3, #8]
 80096ee:	4572      	cmp	r2, lr
 80096f0:	f040 8103 	bne.w	80098fa <ai_platform_network_process+0x4d6>
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	459c      	cmp	ip, r3
 80096f8:	f040 80ff 	bne.w	80098fa <ai_platform_network_process+0x4d6>
 80096fc:	6800      	ldr	r0, [r0, #0]
 80096fe:	f001 f813 	bl	800a728 <ai_array_get_byte_size>
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	68d2      	ldr	r2, [r2, #12]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	fb03 f302 	mul.w	r3, r3, r2
 800970e:	4298      	cmp	r0, r3
 8009710:	f0c0 80f3 	bcc.w	80098fa <ai_platform_network_process+0x4d6>
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	6818      	ldr	r0, [r3, #0]
 8009718:	f000 ffba 	bl	800a690 <ai_array_to_buffer_fmt>
 800971c:	6833      	ldr	r3, [r6, #0]
 800971e:	4043      	eors	r3, r0
 8009720:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8009724:	f040 810e 	bne.w	8009944 <ai_platform_network_process+0x520>
 8009728:	6933      	ldr	r3, [r6, #16]
 800972a:	2b00      	cmp	r3, #0
 800972c:	f000 8101 	beq.w	8009932 <ai_platform_network_process+0x50e>
 8009730:	88b3      	ldrh	r3, [r6, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	f000 80f4 	beq.w	8009920 <ai_platform_network_process+0x4fc>
 8009738:	9a01      	ldr	r2, [sp, #4]
 800973a:	68f9      	ldr	r1, [r7, #12]
 800973c:	429a      	cmp	r2, r3
 800973e:	68c9      	ldr	r1, [r1, #12]
 8009740:	bf38      	it	cc
 8009742:	461a      	movcc	r2, r3
 8009744:	9201      	str	r2, [sp, #4]
 8009746:	697a      	ldr	r2, [r7, #20]
 8009748:	68d3      	ldr	r3, [r2, #12]
 800974a:	fb03 f301 	mul.w	r3, r3, r1
 800974e:	f8ca 3008 	str.w	r3, [sl, #8]
 8009752:	88b2      	ldrh	r2, [r6, #4]
 8009754:	fb03 f302 	mul.w	r3, r3, r2
 8009758:	f8ca 300c 	str.w	r3, [sl, #12]
 800975c:	6931      	ldr	r1, [r6, #16]
 800975e:	f8ca 1004 	str.w	r1, [sl, #4]
 8009762:	6932      	ldr	r2, [r6, #16]
 8009764:	4413      	add	r3, r2
 8009766:	f848 3004 	str.w	r3, [r8, r4]
 800976a:	69b8      	ldr	r0, [r7, #24]
 800976c:	6803      	ldr	r3, [r0, #0]
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	d408      	bmi.n	8009784 <ai_platform_network_process+0x360>
 8009772:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009776:	1a9b      	subs	r3, r3, r2
 8009778:	4419      	add	r1, r3
 800977a:	6081      	str	r1, [r0, #8]
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009782:	60da      	str	r2, [r3, #12]
 8009784:	f109 0901 	add.w	r9, r9, #1
 8009788:	3618      	adds	r6, #24
 800978a:	89ab      	ldrh	r3, [r5, #12]
 800978c:	e788      	b.n	80096a0 <ai_platform_network_process+0x27c>
 800978e:	e9dd 4300 	ldrd	r4, r3, [sp]
 8009792:	82a3      	strh	r3, [r4, #20]
 8009794:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8009798:	2a00      	cmp	r2, #0
 800979a:	f000 80a9 	beq.w	80098f0 <ai_platform_network_process+0x4cc>
 800979e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80097a0:	2a01      	cmp	r2, #1
 80097a2:	f240 80a8 	bls.w	80098f6 <ai_platform_network_process+0x4d2>
 80097a6:	f105 060c 	add.w	r6, r5, #12
 80097aa:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 80097ae:	8aa3      	ldrh	r3, [r4, #20]
 80097b0:	455b      	cmp	r3, fp
 80097b2:	f67f af32 	bls.w	800961a <ai_platform_network_process+0x1f6>
 80097b6:	9400      	str	r4, [sp, #0]
 80097b8:	2d00      	cmp	r5, #0
 80097ba:	d037      	beq.n	800982c <ai_platform_network_process+0x408>
 80097bc:	882b      	ldrh	r3, [r5, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d034      	beq.n	800982c <ai_platform_network_process+0x408>
 80097c2:	686b      	ldr	r3, [r5, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d031      	beq.n	800982c <ai_platform_network_process+0x408>
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d02e      	beq.n	800982c <ai_platform_network_process+0x408>
 80097ce:	f04f 0800 	mov.w	r8, #0
 80097d2:	e01a      	b.n	800980a <ai_platform_network_process+0x3e6>
 80097d4:	68d4      	ldr	r4, [r2, #12]
 80097d6:	1b00      	subs	r0, r0, r4
 80097d8:	4401      	add	r1, r0
 80097da:	6091      	str	r1, [r2, #8]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	699b      	ldr	r3, [r3, #24]
 80097e0:	60da      	str	r2, [r3, #12]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f108 0801 	add.w	r8, r8, #1
 80097e8:	68b9      	ldr	r1, [r7, #8]
 80097ea:	f85a 2009 	ldr.w	r2, [sl, r9]
 80097ee:	440b      	add	r3, r1
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d301      	bcc.n	80097f8 <ai_platform_network_process+0x3d4>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	607b      	str	r3, [r7, #4]
 80097fa:	882b      	ldrh	r3, [r5, #0]
 80097fc:	4598      	cmp	r8, r3
 80097fe:	d215      	bcs.n	800982c <ai_platform_network_process+0x408>
 8009800:	686b      	ldr	r3, [r5, #4]
 8009802:	b19b      	cbz	r3, 800982c <ai_platform_network_process+0x408>
 8009804:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009808:	b183      	cbz	r3, 800982c <ai_platform_network_process+0x408>
 800980a:	68a9      	ldr	r1, [r5, #8]
 800980c:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8009810:	699a      	ldr	r2, [r3, #24]
 8009812:	f8d1 a000 	ldr.w	sl, [r1]
 8009816:	6814      	ldr	r4, [r2, #0]
 8009818:	eb0a 0709 	add.w	r7, sl, r9
 800981c:	6890      	ldr	r0, [r2, #8]
 800981e:	00a4      	lsls	r4, r4, #2
 8009820:	6879      	ldr	r1, [r7, #4]
 8009822:	d5d7      	bpl.n	80097d4 <ai_platform_network_process+0x3b0>
 8009824:	68ba      	ldr	r2, [r7, #8]
 8009826:	f000 ffd9 	bl	800a7dc <memcpy>
 800982a:	e7da      	b.n	80097e2 <ai_platform_network_process+0x3be>
 800982c:	9800      	ldr	r0, [sp, #0]
 800982e:	f000 fef5 	bl	800a61c <ai_layers_forward_all>
 8009832:	2e00      	cmp	r6, #0
 8009834:	d04a      	beq.n	80098cc <ai_platform_network_process+0x4a8>
 8009836:	8833      	ldrh	r3, [r6, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d047      	beq.n	80098cc <ai_platform_network_process+0x4a8>
 800983c:	6873      	ldr	r3, [r6, #4]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d044      	beq.n	80098cc <ai_platform_network_process+0x4a8>
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d041      	beq.n	80098cc <ai_platform_network_process+0x4a8>
 8009848:	f04f 0800 	mov.w	r8, #0
 800984c:	e019      	b.n	8009882 <ai_platform_network_process+0x45e>
 800984e:	f85a 2009 	ldr.w	r2, [sl, r9]
 8009852:	4291      	cmp	r1, r2
 8009854:	d301      	bcc.n	800985a <ai_platform_network_process+0x436>
 8009856:	68f9      	ldr	r1, [r7, #12]
 8009858:	1a51      	subs	r1, r2, r1
 800985a:	6079      	str	r1, [r7, #4]
 800985c:	f108 0801 	add.w	r8, r8, #1
 8009860:	6998      	ldr	r0, [r3, #24]
 8009862:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 8009866:	1b12      	subs	r2, r2, r4
 8009868:	440a      	add	r2, r1
 800986a:	6082      	str	r2, [r0, #8]
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	699b      	ldr	r3, [r3, #24]
 8009870:	60da      	str	r2, [r3, #12]
 8009872:	8833      	ldrh	r3, [r6, #0]
 8009874:	4598      	cmp	r8, r3
 8009876:	d229      	bcs.n	80098cc <ai_platform_network_process+0x4a8>
 8009878:	6873      	ldr	r3, [r6, #4]
 800987a:	b33b      	cbz	r3, 80098cc <ai_platform_network_process+0x4a8>
 800987c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009880:	b323      	cbz	r3, 80098cc <ai_platform_network_process+0x4a8>
 8009882:	68b2      	ldr	r2, [r6, #8]
 8009884:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8009888:	f8d3 e018 	ldr.w	lr, [r3, #24]
 800988c:	f8d2 a000 	ldr.w	sl, [r2]
 8009890:	f8de 1000 	ldr.w	r1, [lr]
 8009894:	eb0a 0709 	add.w	r7, sl, r9
 8009898:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 800989c:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 80098a0:	eb00 0102 	add.w	r1, r0, r2
 80098a4:	d0d3      	beq.n	800984e <ai_platform_network_process+0x42a>
 80098a6:	f8de 1008 	ldr.w	r1, [lr, #8]
 80098aa:	f000 ff97 	bl	800a7dc <memcpy>
 80098ae:	f85a 2009 	ldr.w	r2, [sl, r9]
 80098b2:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 80098b6:	440b      	add	r3, r1
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d301      	bcc.n	80098c0 <ai_platform_network_process+0x49c>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	1ad3      	subs	r3, r2, r3
 80098c0:	607b      	str	r3, [r7, #4]
 80098c2:	f108 0801 	add.w	r8, r8, #1
 80098c6:	8833      	ldrh	r3, [r6, #0]
 80098c8:	4598      	cmp	r8, r3
 80098ca:	d3d5      	bcc.n	8009878 <ai_platform_network_process+0x454>
 80098cc:	9b00      	ldr	r3, [sp, #0]
 80098ce:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 80098d2:	461a      	mov	r2, r3
 80098d4:	8a9b      	ldrh	r3, [r3, #20]
 80098d6:	f10b 0b01 	add.w	fp, fp, #1
 80098da:	fa1f fb8b 	uxth.w	fp, fp
 80098de:	455b      	cmp	r3, fp
 80098e0:	f8a2 b016 	strh.w	fp, [r2, #22]
 80098e4:	f63f af68 	bhi.w	80097b8 <ai_platform_network_process+0x394>
 80098e8:	4658      	mov	r0, fp
 80098ea:	b003      	add	sp, #12
 80098ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f0:	4615      	mov	r5, r2
 80098f2:	4616      	mov	r6, r2
 80098f4:	e759      	b.n	80097aa <ai_platform_network_process+0x386>
 80098f6:	2600      	movs	r6, #0
 80098f8:	e757      	b.n	80097aa <ai_platform_network_process+0x386>
 80098fa:	9c00      	ldr	r4, [sp, #0]
 80098fc:	f104 0010 	add.w	r0, r4, #16
 8009900:	2218      	movs	r2, #24
 8009902:	2113      	movs	r1, #19
 8009904:	f04f 0b00 	mov.w	fp, #0
 8009908:	f000 f83e 	bl	8009988 <core_set_error>
 800990c:	e685      	b.n	800961a <ai_platform_network_process+0x1f6>
 800990e:	9c00      	ldr	r4, [sp, #0]
 8009910:	2217      	movs	r2, #23
 8009912:	2113      	movs	r1, #19
 8009914:	46d3      	mov	fp, sl
 8009916:	f104 0010 	add.w	r0, r4, #16
 800991a:	f000 f835 	bl	8009988 <core_set_error>
 800991e:	e67c      	b.n	800961a <ai_platform_network_process+0x1f6>
 8009920:	9c00      	ldr	r4, [sp, #0]
 8009922:	2221      	movs	r2, #33	; 0x21
 8009924:	2113      	movs	r1, #19
 8009926:	469b      	mov	fp, r3
 8009928:	f104 0010 	add.w	r0, r4, #16
 800992c:	f000 f82c 	bl	8009988 <core_set_error>
 8009930:	e673      	b.n	800961a <ai_platform_network_process+0x1f6>
 8009932:	9c00      	ldr	r4, [sp, #0]
 8009934:	2217      	movs	r2, #23
 8009936:	2113      	movs	r1, #19
 8009938:	469b      	mov	fp, r3
 800993a:	f104 0010 	add.w	r0, r4, #16
 800993e:	f000 f823 	bl	8009988 <core_set_error>
 8009942:	e66a      	b.n	800961a <ai_platform_network_process+0x1f6>
 8009944:	9c00      	ldr	r4, [sp, #0]
 8009946:	2219      	movs	r2, #25
 8009948:	2113      	movs	r1, #19
 800994a:	f04f 0b00 	mov.w	fp, #0
 800994e:	f104 0010 	add.w	r0, r4, #16
 8009952:	f000 f819 	bl	8009988 <core_set_error>
 8009956:	e660      	b.n	800961a <ai_platform_network_process+0x1f6>
 8009958:	f104 0010 	add.w	r0, r4, #16
 800995c:	2217      	movs	r2, #23
 800995e:	2112      	movs	r1, #18
 8009960:	469b      	mov	fp, r3
 8009962:	f000 f811 	bl	8009988 <core_set_error>
 8009966:	e658      	b.n	800961a <ai_platform_network_process+0x1f6>
 8009968:	f104 0010 	add.w	r0, r4, #16
 800996c:	2219      	movs	r2, #25
 800996e:	2112      	movs	r1, #18
 8009970:	f04f 0b00 	mov.w	fp, #0
 8009974:	f000 f808 	bl	8009988 <core_set_error>
 8009978:	e64f      	b.n	800961a <ai_platform_network_process+0x1f6>
 800997a:	f1ba 0f00 	cmp.w	sl, #0
 800997e:	f47f ae7f 	bne.w	8009680 <ai_platform_network_process+0x25c>
 8009982:	e70d      	b.n	80097a0 <ai_platform_network_process+0x37c>

08009984 <core_init>:
 8009984:	2001      	movs	r0, #1
 8009986:	4770      	bx	lr

08009988 <core_set_error>:
 8009988:	4603      	mov	r3, r0
 800998a:	7800      	ldrb	r0, [r0, #0]
 800998c:	b930      	cbnz	r0, 800999c <core_set_error+0x14>
 800998e:	7019      	strb	r1, [r3, #0]
 8009990:	2001      	movs	r0, #1
 8009992:	6819      	ldr	r1, [r3, #0]
 8009994:	f362 211f 	bfi	r1, r2, #8, #24
 8009998:	6019      	str	r1, [r3, #0]
 800999a:	4770      	bx	lr
 800999c:	2000      	movs	r0, #0
 800999e:	4770      	bx	lr

080099a0 <ai_dict8_dot_array_f32>:
 80099a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099a4:	9d06      	ldr	r5, [sp, #24]
 80099a6:	4c88      	ldr	r4, [pc, #544]	; (8009bc8 <ai_dict8_dot_array_f32+0x228>)
 80099a8:	2d07      	cmp	r5, #7
 80099aa:	442c      	add	r4, r5
 80099ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80099b0:	f104 0620 	add.w	r6, r4, #32
 80099b4:	d817      	bhi.n	80099e6 <ai_dict8_dot_array_f32+0x46>
 80099b6:	42b3      	cmp	r3, r6
 80099b8:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8009bcc <ai_dict8_dot_array_f32+0x22c>
 80099bc:	d20b      	bcs.n	80099d6 <ai_dict8_dot_array_f32+0x36>
 80099be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099c2:	ecf3 7a01 	vldmia	r3!, {s15}
 80099c6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80099ca:	42b3      	cmp	r3, r6
 80099cc:	edd4 6a00 	vldr	s13, [r4]
 80099d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80099d4:	d3f3      	bcc.n	80099be <ai_dict8_dot_array_f32+0x1e>
 80099d6:	edd0 7a00 	vldr	s15, [r0]
 80099da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099de:	ed80 7a00 	vstr	s14, [r0]
 80099e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e6:	f001 0503 	and.w	r5, r1, #3
 80099ea:	2d02      	cmp	r5, #2
 80099ec:	f000 80f0 	beq.w	8009bd0 <ai_dict8_dot_array_f32+0x230>
 80099f0:	2d03      	cmp	r5, #3
 80099f2:	f000 81ff 	beq.w	8009df4 <ai_dict8_dot_array_f32+0x454>
 80099f6:	2d01      	cmp	r5, #1
 80099f8:	f000 81f0 	beq.w	8009ddc <ai_dict8_dot_array_f32+0x43c>
 80099fc:	42a3      	cmp	r3, r4
 80099fe:	f200 81fc 	bhi.w	8009dfa <ai_dict8_dot_array_f32+0x45a>
 8009a02:	1ae4      	subs	r4, r4, r3
 8009a04:	f101 0810 	add.w	r8, r1, #16
 8009a08:	f101 0508 	add.w	r5, r1, #8
 8009a0c:	f103 0720 	add.w	r7, r3, #32
 8009a10:	0964      	lsrs	r4, r4, #5
 8009a12:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8009bcc <ai_dict8_dot_array_f32+0x22c>
 8009a16:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 8009a1a:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 8009a1e:	3508      	adds	r5, #8
 8009a20:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 8009a24:	3720      	adds	r7, #32
 8009a26:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8009a2a:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 8009a2e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8009a32:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 8009a36:	edde 7a00 	vldr	s15, [lr]
 8009a3a:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 8009a3e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009a42:	eddc 5a00 	vldr	s11, [ip]
 8009a46:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 8009a4a:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 8009a4e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009a52:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8009a56:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 8009a5a:	ed9c 4a00 	vldr	s8, [ip]
 8009a5e:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 8009a62:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8009a66:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 8009a6a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8009a6e:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 8009a72:	eee4 7a26 	vfma.f32	s15, s8, s13
 8009a76:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 8009a7a:	ed9c 4a00 	vldr	s8, [ip]
 8009a7e:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 8009a82:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 8009a86:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8009a8a:	eee4 7a05 	vfma.f32	s15, s8, s10
 8009a8e:	ed9e 5a00 	vldr	s10, [lr]
 8009a92:	ed9c 4a00 	vldr	s8, [ip]
 8009a96:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 8009a9a:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 8009a9e:	4545      	cmp	r5, r8
 8009aa0:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8009aa4:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8009aa8:	eee5 7a06 	vfma.f32	s15, s10, s12
 8009aac:	ed9e 5a00 	vldr	s10, [lr]
 8009ab0:	ed9c 6a00 	vldr	s12, [ip]
 8009ab4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009ab8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009abc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009ac0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ac4:	d1a9      	bne.n	8009a1a <ai_dict8_dot_array_f32+0x7a>
 8009ac6:	3401      	adds	r4, #1
 8009ac8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8009acc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8009ad0:	42b3      	cmp	r3, r6
 8009ad2:	d280      	bcs.n	80099d6 <ai_dict8_dot_array_f32+0x36>
 8009ad4:	461c      	mov	r4, r3
 8009ad6:	780d      	ldrb	r5, [r1, #0]
 8009ad8:	ecf4 6a01 	vldmia	r4!, {s13}
 8009adc:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009ae0:	42a6      	cmp	r6, r4
 8009ae2:	edd5 7a00 	vldr	s15, [r5]
 8009ae6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009aea:	f67f af74 	bls.w	80099d6 <ai_dict8_dot_array_f32+0x36>
 8009aee:	784d      	ldrb	r5, [r1, #1]
 8009af0:	f103 0408 	add.w	r4, r3, #8
 8009af4:	edd3 6a01 	vldr	s13, [r3, #4]
 8009af8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009afc:	42a6      	cmp	r6, r4
 8009afe:	edd5 7a00 	vldr	s15, [r5]
 8009b02:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009b06:	f67f af66 	bls.w	80099d6 <ai_dict8_dot_array_f32+0x36>
 8009b0a:	788d      	ldrb	r5, [r1, #2]
 8009b0c:	f103 040c 	add.w	r4, r3, #12
 8009b10:	edd3 6a02 	vldr	s13, [r3, #8]
 8009b14:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009b18:	42a6      	cmp	r6, r4
 8009b1a:	edd5 7a00 	vldr	s15, [r5]
 8009b1e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009b22:	f67f af58 	bls.w	80099d6 <ai_dict8_dot_array_f32+0x36>
 8009b26:	78cd      	ldrb	r5, [r1, #3]
 8009b28:	f103 0410 	add.w	r4, r3, #16
 8009b2c:	edd3 6a03 	vldr	s13, [r3, #12]
 8009b30:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009b34:	42a6      	cmp	r6, r4
 8009b36:	edd5 7a00 	vldr	s15, [r5]
 8009b3a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009b3e:	f67f af4a 	bls.w	80099d6 <ai_dict8_dot_array_f32+0x36>
 8009b42:	790d      	ldrb	r5, [r1, #4]
 8009b44:	f103 0414 	add.w	r4, r3, #20
 8009b48:	edd3 6a04 	vldr	s13, [r3, #16]
 8009b4c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009b50:	42a6      	cmp	r6, r4
 8009b52:	edd5 7a00 	vldr	s15, [r5]
 8009b56:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009b5a:	f67f af3c 	bls.w	80099d6 <ai_dict8_dot_array_f32+0x36>
 8009b5e:	794d      	ldrb	r5, [r1, #5]
 8009b60:	f103 0418 	add.w	r4, r3, #24
 8009b64:	edd3 6a05 	vldr	s13, [r3, #20]
 8009b68:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009b6c:	42a6      	cmp	r6, r4
 8009b6e:	edd5 7a00 	vldr	s15, [r5]
 8009b72:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009b76:	f67f af2e 	bls.w	80099d6 <ai_dict8_dot_array_f32+0x36>
 8009b7a:	798d      	ldrb	r5, [r1, #6]
 8009b7c:	f103 041c 	add.w	r4, r3, #28
 8009b80:	edd3 6a06 	vldr	s13, [r3, #24]
 8009b84:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009b88:	42a6      	cmp	r6, r4
 8009b8a:	edd5 7a00 	vldr	s15, [r5]
 8009b8e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009b92:	f67f af20 	bls.w	80099d6 <ai_dict8_dot_array_f32+0x36>
 8009b96:	79cd      	ldrb	r5, [r1, #7]
 8009b98:	f103 0420 	add.w	r4, r3, #32
 8009b9c:	edd3 6a07 	vldr	s13, [r3, #28]
 8009ba0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009ba4:	42a6      	cmp	r6, r4
 8009ba6:	edd5 7a00 	vldr	s15, [r5]
 8009baa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009bae:	f67f af12 	bls.w	80099d6 <ai_dict8_dot_array_f32+0x36>
 8009bb2:	7a09      	ldrb	r1, [r1, #8]
 8009bb4:	edd3 7a08 	vldr	s15, [r3, #32]
 8009bb8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009bbc:	edd2 6a00 	vldr	s13, [r2]
 8009bc0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009bc4:	e707      	b.n	80099d6 <ai_dict8_dot_array_f32+0x36>
 8009bc6:	bf00      	nop
 8009bc8:	3ffffff8 	.word	0x3ffffff8
 8009bcc:	00000000 	.word	0x00000000
 8009bd0:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8009bcc <ai_dict8_dot_array_f32+0x22c>
 8009bd4:	780d      	ldrb	r5, [r1, #0]
 8009bd6:	3304      	adds	r3, #4
 8009bd8:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009bdc:	3101      	adds	r1, #1
 8009bde:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009be2:	edd5 6a00 	vldr	s13, [r5]
 8009be6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009bea:	780d      	ldrb	r5, [r1, #0]
 8009bec:	1d1f      	adds	r7, r3, #4
 8009bee:	edd3 7a00 	vldr	s15, [r3]
 8009bf2:	f101 0c01 	add.w	ip, r1, #1
 8009bf6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009bfa:	42bc      	cmp	r4, r7
 8009bfc:	edd5 6a00 	vldr	s13, [r5]
 8009c00:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009c04:	d365      	bcc.n	8009cd2 <ai_dict8_dot_array_f32+0x332>
 8009c06:	3324      	adds	r3, #36	; 0x24
 8009c08:	f101 0e11 	add.w	lr, r1, #17
 8009c0c:	3109      	adds	r1, #9
 8009c0e:	eba6 0803 	sub.w	r8, r6, r3
 8009c12:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8009c16:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 8009c1a:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8009c1e:	3108      	adds	r1, #8
 8009c20:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 8009c24:	3320      	adds	r3, #32
 8009c26:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009c2a:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8009c2e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009c32:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 8009c36:	edd5 7a00 	vldr	s15, [r5]
 8009c3a:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 8009c3e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009c42:	edd4 5a00 	vldr	s11, [r4]
 8009c46:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 8009c4a:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 8009c4e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009c52:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009c56:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8009c5a:	ed94 4a00 	vldr	s8, [r4]
 8009c5e:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 8009c62:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009c66:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 8009c6a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009c6e:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 8009c72:	eee4 7a26 	vfma.f32	s15, s8, s13
 8009c76:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 8009c7a:	ed94 4a00 	vldr	s8, [r4]
 8009c7e:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 8009c82:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 8009c86:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009c8a:	eee4 7a05 	vfma.f32	s15, s8, s10
 8009c8e:	ed95 5a00 	vldr	s10, [r5]
 8009c92:	ed94 4a00 	vldr	s8, [r4]
 8009c96:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8009c9a:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 8009c9e:	458e      	cmp	lr, r1
 8009ca0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009ca4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009ca8:	eee5 7a06 	vfma.f32	s15, s10, s12
 8009cac:	ed95 5a00 	vldr	s10, [r5]
 8009cb0:	ed94 6a00 	vldr	s12, [r4]
 8009cb4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009cb8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009cbc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009cc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009cc4:	d1a9      	bne.n	8009c1a <ai_dict8_dot_array_f32+0x27a>
 8009cc6:	f108 0801 	add.w	r8, r8, #1
 8009cca:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 8009cce:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 8009cd2:	42b7      	cmp	r7, r6
 8009cd4:	f4bf ae7f 	bcs.w	80099d6 <ai_dict8_dot_array_f32+0x36>
 8009cd8:	463b      	mov	r3, r7
 8009cda:	f89c 1000 	ldrb.w	r1, [ip]
 8009cde:	ecf3 6a01 	vldmia	r3!, {s13}
 8009ce2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8009ce6:	429e      	cmp	r6, r3
 8009ce8:	edd1 7a00 	vldr	s15, [r1]
 8009cec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009cf0:	f67f ae71 	bls.w	80099d6 <ai_dict8_dot_array_f32+0x36>
 8009cf4:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8009cf8:	f107 0308 	add.w	r3, r7, #8
 8009cfc:	edd7 6a01 	vldr	s13, [r7, #4]
 8009d00:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8009d04:	429e      	cmp	r6, r3
 8009d06:	edd1 7a00 	vldr	s15, [r1]
 8009d0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d0e:	f67f ae62 	bls.w	80099d6 <ai_dict8_dot_array_f32+0x36>
 8009d12:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8009d16:	f107 030c 	add.w	r3, r7, #12
 8009d1a:	edd7 6a02 	vldr	s13, [r7, #8]
 8009d1e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8009d22:	429e      	cmp	r6, r3
 8009d24:	edd1 7a00 	vldr	s15, [r1]
 8009d28:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d2c:	f67f ae53 	bls.w	80099d6 <ai_dict8_dot_array_f32+0x36>
 8009d30:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8009d34:	f107 0310 	add.w	r3, r7, #16
 8009d38:	edd7 6a03 	vldr	s13, [r7, #12]
 8009d3c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8009d40:	429e      	cmp	r6, r3
 8009d42:	edd1 7a00 	vldr	s15, [r1]
 8009d46:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d4a:	f67f ae44 	bls.w	80099d6 <ai_dict8_dot_array_f32+0x36>
 8009d4e:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8009d52:	f107 0314 	add.w	r3, r7, #20
 8009d56:	edd7 6a04 	vldr	s13, [r7, #16]
 8009d5a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8009d5e:	429e      	cmp	r6, r3
 8009d60:	edd1 7a00 	vldr	s15, [r1]
 8009d64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d68:	f67f ae35 	bls.w	80099d6 <ai_dict8_dot_array_f32+0x36>
 8009d6c:	f89c 1005 	ldrb.w	r1, [ip, #5]
 8009d70:	f107 0318 	add.w	r3, r7, #24
 8009d74:	edd7 6a05 	vldr	s13, [r7, #20]
 8009d78:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8009d7c:	429e      	cmp	r6, r3
 8009d7e:	edd1 7a00 	vldr	s15, [r1]
 8009d82:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d86:	f67f ae26 	bls.w	80099d6 <ai_dict8_dot_array_f32+0x36>
 8009d8a:	f89c 1006 	ldrb.w	r1, [ip, #6]
 8009d8e:	f107 031c 	add.w	r3, r7, #28
 8009d92:	edd7 6a06 	vldr	s13, [r7, #24]
 8009d96:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8009d9a:	429e      	cmp	r6, r3
 8009d9c:	edd1 7a00 	vldr	s15, [r1]
 8009da0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009da4:	f67f ae17 	bls.w	80099d6 <ai_dict8_dot_array_f32+0x36>
 8009da8:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8009dac:	f107 0320 	add.w	r3, r7, #32
 8009db0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009db4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8009db8:	429e      	cmp	r6, r3
 8009dba:	edd1 7a00 	vldr	s15, [r1]
 8009dbe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009dc2:	f67f ae08 	bls.w	80099d6 <ai_dict8_dot_array_f32+0x36>
 8009dc6:	f89c 3008 	ldrb.w	r3, [ip, #8]
 8009dca:	edd7 7a08 	vldr	s15, [r7, #32]
 8009dce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009dd2:	edd2 6a00 	vldr	s13, [r2]
 8009dd6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009dda:	e5fc      	b.n	80099d6 <ai_dict8_dot_array_f32+0x36>
 8009ddc:	780d      	ldrb	r5, [r1, #0]
 8009dde:	3304      	adds	r3, #4
 8009de0:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009de4:	3101      	adds	r1, #1
 8009de6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009dea:	ed95 7a00 	vldr	s14, [r5]
 8009dee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009df2:	e6ef      	b.n	8009bd4 <ai_dict8_dot_array_f32+0x234>
 8009df4:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 8009bcc <ai_dict8_dot_array_f32+0x22c>
 8009df8:	e6f7      	b.n	8009bea <ai_dict8_dot_array_f32+0x24a>
 8009dfa:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 8009bcc <ai_dict8_dot_array_f32+0x22c>
 8009dfe:	e667      	b.n	8009ad0 <ai_dict8_dot_array_f32+0x130>

08009e00 <ai_dict4_dot_array_f32>:
 8009e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e04:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009e06:	f027 0c01 	bic.w	ip, r7, #1
 8009e0a:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8009e0e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8009e12:	f000 80ad 	beq.w	8009f70 <ai_dict4_dot_array_f32+0x170>
 8009e16:	1d0d      	adds	r5, r1, #4
 8009e18:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8009e1c:	f103 0420 	add.w	r4, r3, #32
 8009e20:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8009f78 <ai_dict4_dot_array_f32+0x178>
 8009e24:	eb05 0e09 	add.w	lr, r5, r9
 8009e28:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8009e2c:	3504      	adds	r5, #4
 8009e2e:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 8009e32:	3420      	adds	r4, #32
 8009e34:	f006 0a0f 	and.w	sl, r6, #15
 8009e38:	0936      	lsrs	r6, r6, #4
 8009e3a:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8009e3e:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8009e42:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 8009e46:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009e4a:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 8009e4e:	edda 7a00 	vldr	s15, [sl]
 8009e52:	edd6 5a00 	vldr	s11, [r6]
 8009e56:	ee67 7a85 	vmul.f32	s15, s15, s10
 8009e5a:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 8009e5e:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 8009e62:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8009e66:	f006 060f 	and.w	r6, r6, #15
 8009e6a:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8009e6e:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 8009e72:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8009e76:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 8009e7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009e7e:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 8009e82:	ed9a 3a00 	vldr	s6, [sl]
 8009e86:	ed96 5a00 	vldr	s10, [r6]
 8009e8a:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 8009e8e:	eee3 7a04 	vfma.f32	s15, s6, s8
 8009e92:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 8009e96:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8009e9a:	f00a 0a0f 	and.w	sl, sl, #15
 8009e9e:	45ae      	cmp	lr, r5
 8009ea0:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8009ea4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8009ea8:	ed9b 3a00 	vldr	s6, [fp]
 8009eac:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 8009eb0:	eee5 7a06 	vfma.f32	s15, s10, s12
 8009eb4:	ed9a 4a00 	vldr	s8, [sl]
 8009eb8:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 8009ebc:	f006 060f 	and.w	r6, r6, #15
 8009ec0:	ed9a 5a00 	vldr	s10, [sl]
 8009ec4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009ec8:	ed96 6a00 	vldr	s12, [r6]
 8009ecc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009ed0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009ed4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009ed8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009edc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ee0:	d1a2      	bne.n	8009e28 <ai_dict4_dot_array_f32+0x28>
 8009ee2:	4449      	add	r1, r9
 8009ee4:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8009ee8:	459c      	cmp	ip, r3
 8009eea:	d92d      	bls.n	8009f48 <ai_dict4_dot_array_f32+0x148>
 8009eec:	f10c 0c07 	add.w	ip, ip, #7
 8009ef0:	f103 0508 	add.w	r5, r3, #8
 8009ef4:	f103 0810 	add.w	r8, r3, #16
 8009ef8:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8009efc:	ebac 0c05 	sub.w	ip, ip, r5
 8009f00:	f02c 0407 	bic.w	r4, ip, #7
 8009f04:	44a0      	add	r8, r4
 8009f06:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8009f0a:	3508      	adds	r5, #8
 8009f0c:	ed55 5a03 	vldr	s11, [r5, #-12]
 8009f10:	f004 060f 	and.w	r6, r4, #15
 8009f14:	0924      	lsrs	r4, r4, #4
 8009f16:	ed55 6a04 	vldr	s13, [r5, #-16]
 8009f1a:	45a8      	cmp	r8, r5
 8009f1c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f20:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009f24:	edd6 7a00 	vldr	s15, [r6]
 8009f28:	ed94 6a00 	vldr	s12, [r4]
 8009f2c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009f30:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009f34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009f38:	d1e5      	bne.n	8009f06 <ai_dict4_dot_array_f32+0x106>
 8009f3a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8009f3e:	f10c 0c01 	add.w	ip, ip, #1
 8009f42:	4461      	add	r1, ip
 8009f44:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8009f48:	07fc      	lsls	r4, r7, #31
 8009f4a:	d509      	bpl.n	8009f60 <ai_dict4_dot_array_f32+0x160>
 8009f4c:	7809      	ldrb	r1, [r1, #0]
 8009f4e:	edd3 7a00 	vldr	s15, [r3]
 8009f52:	090b      	lsrs	r3, r1, #4
 8009f54:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009f58:	edd2 6a00 	vldr	s13, [r2]
 8009f5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009f60:	edd0 7a00 	vldr	s15, [r0]
 8009f64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f68:	ed80 7a00 	vstr	s14, [r0]
 8009f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f70:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8009f78 <ai_dict4_dot_array_f32+0x178>
 8009f74:	e7b8      	b.n	8009ee8 <ai_dict4_dot_array_f32+0xe8>
 8009f76:	bf00      	nop
 8009f78:	00000000 	.word	0x00000000

08009f7c <forward_dense>:
 8009f7c:	6942      	ldr	r2, [r0, #20]
 8009f7e:	8813      	ldrh	r3, [r2, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 81c8 	beq.w	800a316 <forward_dense+0x39a>
 8009f86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8a:	ed2d 8b08 	vpush	{d8-d11}
 8009f8e:	6851      	ldr	r1, [r2, #4]
 8009f90:	b091      	sub	sp, #68	; 0x44
 8009f92:	684d      	ldr	r5, [r1, #4]
 8009f94:	b105      	cbz	r5, 8009f98 <forward_dense+0x1c>
 8009f96:	682d      	ldr	r5, [r5, #0]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	f240 81b9 	bls.w	800a310 <forward_dense+0x394>
 8009f9e:	690a      	ldr	r2, [r1, #16]
 8009fa0:	b102      	cbz	r2, 8009fa4 <forward_dense+0x28>
 8009fa2:	6812      	ldr	r2, [r2, #0]
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	f000 81b8 	beq.w	800a31a <forward_dense+0x39e>
 8009faa:	69cb      	ldr	r3, [r1, #28]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f000 8209 	beq.w	800a3c4 <forward_dense+0x448>
 8009fb2:	6818      	ldr	r0, [r3, #0]
 8009fb4:	9008      	str	r0, [sp, #32]
 8009fb6:	f111 0018 	adds.w	r0, r1, #24
 8009fba:	f000 81dc 	beq.w	800a376 <forward_dense+0x3fa>
 8009fbe:	8b09      	ldrh	r1, [r1, #24]
 8009fc0:	2901      	cmp	r1, #1
 8009fc2:	f240 81fc 	bls.w	800a3be <forward_dense+0x442>
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f000 81d7 	beq.w	800a37a <forward_dense+0x3fe>
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	9306      	str	r3, [sp, #24]
 8009fd0:	9b08      	ldr	r3, [sp, #32]
 8009fd2:	68d6      	ldr	r6, [r2, #12]
 8009fd4:	699b      	ldr	r3, [r3, #24]
 8009fd6:	68b0      	ldr	r0, [r6, #8]
 8009fd8:	681f      	ldr	r7, [r3, #0]
 8009fda:	68f4      	ldr	r4, [r6, #12]
 8009fdc:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 8009fe0:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 8009fe4:	f3c7 4743 	ubfx	r7, r7, #17, #4
 8009fe8:	fb04 f000 	mul.w	r0, r4, r0
 8009fec:	fa4e f10c 	asr.w	r1, lr, ip
 8009ff0:	2f04      	cmp	r7, #4
 8009ff2:	9007      	str	r0, [sp, #28]
 8009ff4:	910b      	str	r1, [sp, #44]	; 0x2c
 8009ff6:	68e9      	ldr	r1, [r5, #12]
 8009ff8:	6870      	ldr	r0, [r6, #4]
 8009ffa:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8009ffe:	f000 81db 	beq.w	800a3b8 <forward_dense+0x43c>
 800a002:	2f08      	cmp	r7, #8
 800a004:	f000 81d8 	beq.w	800a3b8 <forward_dense+0x43c>
 800a008:	f04f 0a00 	mov.w	sl, #0
 800a00c:	6992      	ldr	r2, [r2, #24]
 800a00e:	0080      	lsls	r0, r0, #2
 800a010:	69a9      	ldr	r1, [r5, #24]
 800a012:	6894      	ldr	r4, [r2, #8]
 800a014:	9a08      	ldr	r2, [sp, #32]
 800a016:	9009      	str	r0, [sp, #36]	; 0x24
 800a018:	1826      	adds	r6, r4, r0
 800a01a:	6952      	ldr	r2, [r2, #20]
 800a01c:	9404      	str	r4, [sp, #16]
 800a01e:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800a022:	9a07      	ldr	r2, [sp, #28]
 800a024:	688f      	ldr	r7, [r1, #8]
 800a026:	2a00      	cmp	r2, #0
 800a028:	f000 81c1 	beq.w	800a3ae <forward_dense+0x432>
 800a02c:	f1a8 0210 	sub.w	r2, r8, #16
 800a030:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800a034:	689d      	ldr	r5, [r3, #8]
 800a036:	0912      	lsrs	r2, r2, #4
 800a038:	910a      	str	r1, [sp, #40]	; 0x28
 800a03a:	2100      	movs	r1, #0
 800a03c:	9b06      	ldr	r3, [sp, #24]
 800a03e:	3201      	adds	r2, #1
 800a040:	eddf 2acf 	vldr	s5, [pc, #828]	; 800a380 <forward_dense+0x404>
 800a044:	9105      	str	r1, [sp, #20]
 800a046:	f008 010f 	and.w	r1, r8, #15
 800a04a:	0192      	lsls	r2, r2, #6
 800a04c:	910d      	str	r1, [sp, #52]	; 0x34
 800a04e:	920c      	str	r2, [sp, #48]	; 0x30
 800a050:	2b00      	cmp	r3, #0
 800a052:	d042      	beq.n	800a0da <forward_dense+0x15e>
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	689c      	ldr	r4, [r3, #8]
 800a058:	9b04      	ldr	r3, [sp, #16]
 800a05a:	f1ba 0f00 	cmp.w	sl, #0
 800a05e:	d041      	beq.n	800a0e4 <forward_dense+0x168>
 800a060:	42b3      	cmp	r3, r6
 800a062:	d229      	bcs.n	800a0b8 <forward_dense+0x13c>
 800a064:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a066:	469b      	mov	fp, r3
 800a068:	ab0f      	add	r3, sp, #60	; 0x3c
 800a06a:	2a04      	cmp	r2, #4
 800a06c:	9303      	str	r3, [sp, #12]
 800a06e:	4633      	mov	r3, r6
 800a070:	4646      	mov	r6, r8
 800a072:	4698      	mov	r8, r3
 800a074:	f000 8154 	beq.w	800a320 <forward_dense+0x3a4>
 800a078:	2c00      	cmp	r4, #0
 800a07a:	f000 8183 	beq.w	800a384 <forward_dense+0x408>
 800a07e:	f8d4 c000 	ldr.w	ip, [r4]
 800a082:	463b      	mov	r3, r7
 800a084:	4629      	mov	r1, r5
 800a086:	9600      	str	r6, [sp, #0]
 800a088:	4652      	mov	r2, sl
 800a08a:	9803      	ldr	r0, [sp, #12]
 800a08c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800a090:	f7ff fc86 	bl	80099a0 <ai_dict8_dot_array_f32>
 800a094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a096:	3404      	adds	r4, #4
 800a098:	444d      	add	r5, r9
 800a09a:	f84b 3b04 	str.w	r3, [fp], #4
 800a09e:	45c3      	cmp	fp, r8
 800a0a0:	d3ea      	bcc.n	800a078 <forward_dense+0xfc>
 800a0a2:	4643      	mov	r3, r8
 800a0a4:	46b0      	mov	r8, r6
 800a0a6:	461e      	mov	r6, r3
 800a0a8:	9a04      	ldr	r2, [sp, #16]
 800a0aa:	43d3      	mvns	r3, r2
 800a0ac:	4433      	add	r3, r6
 800a0ae:	f023 0303 	bic.w	r3, r3, #3
 800a0b2:	3304      	adds	r3, #4
 800a0b4:	18d3      	adds	r3, r2, r3
 800a0b6:	9304      	str	r3, [sp, #16]
 800a0b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0ba:	9b05      	ldr	r3, [sp, #20]
 800a0bc:	4417      	add	r7, r2
 800a0be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	4416      	add	r6, r2
 800a0c4:	9a07      	ldr	r2, [sp, #28]
 800a0c6:	9305      	str	r3, [sp, #20]
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	f000 8170 	beq.w	800a3ae <forward_dense+0x432>
 800a0ce:	9b08      	ldr	r3, [sp, #32]
 800a0d0:	699b      	ldr	r3, [r3, #24]
 800a0d2:	689d      	ldr	r5, [r3, #8]
 800a0d4:	9b06      	ldr	r3, [sp, #24]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1bc      	bne.n	800a054 <forward_dense+0xd8>
 800a0da:	461c      	mov	r4, r3
 800a0dc:	9b04      	ldr	r3, [sp, #16]
 800a0de:	f1ba 0f00 	cmp.w	sl, #0
 800a0e2:	d1bd      	bne.n	800a060 <forward_dense+0xe4>
 800a0e4:	42b3      	cmp	r3, r6
 800a0e6:	d2e7      	bcs.n	800a0b8 <forward_dense+0x13c>
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0ec:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800a0f0:	eb07 0c03 	add.w	ip, r7, r3
 800a0f4:	469e      	mov	lr, r3
 800a0f6:	2c00      	cmp	r4, #0
 800a0f8:	f000 80fe 	beq.w	800a2f8 <forward_dense+0x37c>
 800a0fc:	f1b8 0f0f 	cmp.w	r8, #15
 800a100:	ed94 6a00 	vldr	s12, [r4]
 800a104:	f104 0404 	add.w	r4, r4, #4
 800a108:	f240 80fc 	bls.w	800a304 <forward_dense+0x388>
 800a10c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a110:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800a114:	4641      	mov	r1, r8
 800a116:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800a380 <forward_dense+0x404>
 800a11a:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 800a11e:	3910      	subs	r1, #16
 800a120:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 800a124:	3240      	adds	r2, #64	; 0x40
 800a126:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 800a12a:	290f      	cmp	r1, #15
 800a12c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a130:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 800a134:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 800a138:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800a13c:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 800a140:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a144:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 800a148:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 800a14c:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 800a150:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 800a154:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 800a158:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 800a15c:	eee2 7a03 	vfma.f32	s15, s4, s6
 800a160:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800a164:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 800a168:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800a16c:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800a170:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 800a174:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 800a178:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a17c:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 800a180:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 800a184:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 800a188:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 800a18c:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 800a190:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 800a194:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a198:	ed13 2a14 	vldr	s4, [r3, #-80]	; 0xffffffb0
 800a19c:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800a1a0:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 800a1a4:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 800a1a8:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 800a1ac:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 800a1b0:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a1b4:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 800a1b8:	ed12 7a11 	vldr	s14, [r2, #-68]	; 0xffffffbc
 800a1bc:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800a1c0:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800a1c4:	eee9 7a89 	vfma.f32	s15, s19, s18
 800a1c8:	eee8 7a88 	vfma.f32	s15, s17, s16
 800a1cc:	eee0 7a20 	vfma.f32	s15, s0, s1
 800a1d0:	eee1 7a21 	vfma.f32	s15, s2, s3
 800a1d4:	eee2 7a03 	vfma.f32	s15, s4, s6
 800a1d8:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a1dc:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a1e0:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a1e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a1e8:	d897      	bhi.n	800a11a <forward_dense+0x19e>
 800a1ea:	eb05 010e 	add.w	r1, r5, lr
 800a1ee:	465b      	mov	r3, fp
 800a1f0:	4662      	mov	r2, ip
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d075      	beq.n	800a2e2 <forward_dense+0x366>
 800a1f6:	ed91 7a00 	vldr	s14, [r1]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	edd2 7a00 	vldr	s15, [r2]
 800a200:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a204:	d06d      	beq.n	800a2e2 <forward_dense+0x366>
 800a206:	ed91 7a01 	vldr	s14, [r1, #4]
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	edd2 7a01 	vldr	s15, [r2, #4]
 800a210:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a214:	d065      	beq.n	800a2e2 <forward_dense+0x366>
 800a216:	ed91 7a02 	vldr	s14, [r1, #8]
 800a21a:	2b03      	cmp	r3, #3
 800a21c:	edd2 7a02 	vldr	s15, [r2, #8]
 800a220:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a224:	d05d      	beq.n	800a2e2 <forward_dense+0x366>
 800a226:	ed91 7a03 	vldr	s14, [r1, #12]
 800a22a:	2b04      	cmp	r3, #4
 800a22c:	edd2 7a03 	vldr	s15, [r2, #12]
 800a230:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a234:	d055      	beq.n	800a2e2 <forward_dense+0x366>
 800a236:	ed91 7a04 	vldr	s14, [r1, #16]
 800a23a:	2b05      	cmp	r3, #5
 800a23c:	edd2 7a04 	vldr	s15, [r2, #16]
 800a240:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a244:	d04d      	beq.n	800a2e2 <forward_dense+0x366>
 800a246:	ed91 7a05 	vldr	s14, [r1, #20]
 800a24a:	2b06      	cmp	r3, #6
 800a24c:	edd2 7a05 	vldr	s15, [r2, #20]
 800a250:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a254:	d045      	beq.n	800a2e2 <forward_dense+0x366>
 800a256:	ed91 7a06 	vldr	s14, [r1, #24]
 800a25a:	2b07      	cmp	r3, #7
 800a25c:	edd2 7a06 	vldr	s15, [r2, #24]
 800a260:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a264:	d03d      	beq.n	800a2e2 <forward_dense+0x366>
 800a266:	ed91 7a07 	vldr	s14, [r1, #28]
 800a26a:	2b08      	cmp	r3, #8
 800a26c:	edd2 7a07 	vldr	s15, [r2, #28]
 800a270:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a274:	d035      	beq.n	800a2e2 <forward_dense+0x366>
 800a276:	ed91 7a08 	vldr	s14, [r1, #32]
 800a27a:	2b09      	cmp	r3, #9
 800a27c:	edd2 7a08 	vldr	s15, [r2, #32]
 800a280:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a284:	d02d      	beq.n	800a2e2 <forward_dense+0x366>
 800a286:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800a28a:	2b0a      	cmp	r3, #10
 800a28c:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800a290:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a294:	d025      	beq.n	800a2e2 <forward_dense+0x366>
 800a296:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800a29a:	2b0b      	cmp	r3, #11
 800a29c:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800a2a0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a2a4:	d01d      	beq.n	800a2e2 <forward_dense+0x366>
 800a2a6:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800a2aa:	2b0c      	cmp	r3, #12
 800a2ac:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800a2b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a2b4:	d015      	beq.n	800a2e2 <forward_dense+0x366>
 800a2b6:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800a2ba:	2b0d      	cmp	r3, #13
 800a2bc:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800a2c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a2c4:	d00d      	beq.n	800a2e2 <forward_dense+0x366>
 800a2c6:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800a2ca:	2b0e      	cmp	r3, #14
 800a2cc:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800a2d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a2d4:	d005      	beq.n	800a2e2 <forward_dense+0x366>
 800a2d6:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800a2da:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800a2de:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a2e2:	ee76 6a26 	vadd.f32	s13, s12, s13
 800a2e6:	444d      	add	r5, r9
 800a2e8:	ece0 6a01 	vstmia	r0!, {s13}
 800a2ec:	42b0      	cmp	r0, r6
 800a2ee:	f4bf aedb 	bcs.w	800a0a8 <forward_dense+0x12c>
 800a2f2:	2c00      	cmp	r4, #0
 800a2f4:	f47f af02 	bne.w	800a0fc <forward_dense+0x180>
 800a2f8:	f1b8 0f0f 	cmp.w	r8, #15
 800a2fc:	eeb0 6a62 	vmov.f32	s12, s5
 800a300:	f63f af04 	bhi.w	800a10c <forward_dense+0x190>
 800a304:	4643      	mov	r3, r8
 800a306:	4629      	mov	r1, r5
 800a308:	463a      	mov	r2, r7
 800a30a:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800a380 <forward_dense+0x404>
 800a30e:	e770      	b.n	800a1f2 <forward_dense+0x276>
 800a310:	2300      	movs	r3, #0
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	deff      	udf	#255	; 0xff
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	deff      	udf	#255	; 0xff
 800a31a:	2300      	movs	r3, #0
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	deff      	udf	#255	; 0xff
 800a320:	b1a4      	cbz	r4, 800a34c <forward_dense+0x3d0>
 800a322:	f8d4 c000 	ldr.w	ip, [r4]
 800a326:	463b      	mov	r3, r7
 800a328:	4629      	mov	r1, r5
 800a32a:	9600      	str	r6, [sp, #0]
 800a32c:	4652      	mov	r2, sl
 800a32e:	9803      	ldr	r0, [sp, #12]
 800a330:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800a334:	f7ff fd64 	bl	8009e00 <ai_dict4_dot_array_f32>
 800a338:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a33a:	3404      	adds	r4, #4
 800a33c:	444d      	add	r5, r9
 800a33e:	f84b 3b04 	str.w	r3, [fp], #4
 800a342:	45c3      	cmp	fp, r8
 800a344:	f4bf aead 	bcs.w	800a0a2 <forward_dense+0x126>
 800a348:	2c00      	cmp	r4, #0
 800a34a:	d1ea      	bne.n	800a322 <forward_dense+0x3a6>
 800a34c:	4634      	mov	r4, r6
 800a34e:	4646      	mov	r6, r8
 800a350:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a354:	463b      	mov	r3, r7
 800a356:	4629      	mov	r1, r5
 800a358:	9400      	str	r4, [sp, #0]
 800a35a:	4652      	mov	r2, sl
 800a35c:	4640      	mov	r0, r8
 800a35e:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800a362:	f7ff fd4d 	bl	8009e00 <ai_dict4_dot_array_f32>
 800a366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a368:	444d      	add	r5, r9
 800a36a:	f84b 3b04 	str.w	r3, [fp], #4
 800a36e:	45b3      	cmp	fp, r6
 800a370:	d3f0      	bcc.n	800a354 <forward_dense+0x3d8>
 800a372:	46a0      	mov	r8, r4
 800a374:	e698      	b.n	800a0a8 <forward_dense+0x12c>
 800a376:	9006      	str	r0, [sp, #24]
 800a378:	e62a      	b.n	8009fd0 <forward_dense+0x54>
 800a37a:	9306      	str	r3, [sp, #24]
 800a37c:	e628      	b.n	8009fd0 <forward_dense+0x54>
 800a37e:	bf00      	nop
 800a380:	00000000 	.word	0x00000000
 800a384:	4634      	mov	r4, r6
 800a386:	4646      	mov	r6, r8
 800a388:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a38c:	463b      	mov	r3, r7
 800a38e:	4629      	mov	r1, r5
 800a390:	9400      	str	r4, [sp, #0]
 800a392:	4652      	mov	r2, sl
 800a394:	4640      	mov	r0, r8
 800a396:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800a39a:	f7ff fb01 	bl	80099a0 <ai_dict8_dot_array_f32>
 800a39e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3a0:	444d      	add	r5, r9
 800a3a2:	f84b 3b04 	str.w	r3, [fp], #4
 800a3a6:	45b3      	cmp	fp, r6
 800a3a8:	d3f0      	bcc.n	800a38c <forward_dense+0x410>
 800a3aa:	46a0      	mov	r8, r4
 800a3ac:	e67c      	b.n	800a0a8 <forward_dense+0x12c>
 800a3ae:	b011      	add	sp, #68	; 0x44
 800a3b0:	ecbd 8b08 	vpop	{d8-d11}
 800a3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b8:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800a3bc:	e626      	b.n	800a00c <forward_dense+0x90>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	9306      	str	r3, [sp, #24]
 800a3c2:	e605      	b.n	8009fd0 <forward_dense+0x54>
 800a3c4:	9308      	str	r3, [sp, #32]
 800a3c6:	e5f6      	b.n	8009fb6 <forward_dense+0x3a>

0800a3c8 <nl_func_relu_generic_array_f32>:
 800a3c8:	b470      	push	{r4, r5, r6}
 800a3ca:	edd3 6a02 	vldr	s13, [r3, #8]
 800a3ce:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800a3d2:	6880      	ldr	r0, [r0, #8]
 800a3d4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a3d8:	4414      	add	r4, r2
 800a3da:	688d      	ldr	r5, [r1, #8]
 800a3dc:	00a4      	lsls	r4, r4, #2
 800a3de:	ed93 7a00 	vldr	s14, [r3]
 800a3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e6:	ed93 6a01 	vldr	s12, [r3, #4]
 800a3ea:	eb00 0204 	add.w	r2, r0, r4
 800a3ee:	442c      	add	r4, r5
 800a3f0:	d420      	bmi.n	800a434 <nl_func_relu_generic_array_f32+0x6c>
 800a3f2:	42ac      	cmp	r4, r5
 800a3f4:	d33b      	bcc.n	800a46e <nl_func_relu_generic_array_f32+0xa6>
 800a3f6:	1d23      	adds	r3, r4, #4
 800a3f8:	3204      	adds	r2, #4
 800a3fa:	e010      	b.n	800a41e <nl_func_relu_generic_array_f32+0x56>
 800a3fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a400:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800a404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a408:	dd01      	ble.n	800a40e <nl_func_relu_generic_array_f32+0x46>
 800a40a:	ee65 7a86 	vmul.f32	s15, s11, s12
 800a40e:	f1a3 0408 	sub.w	r4, r3, #8
 800a412:	ed62 7a01 	vstmdb	r2!, {s15}
 800a416:	4603      	mov	r3, r0
 800a418:	6888      	ldr	r0, [r1, #8]
 800a41a:	4284      	cmp	r4, r0
 800a41c:	d327      	bcc.n	800a46e <nl_func_relu_generic_array_f32+0xa6>
 800a41e:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a422:	1f18      	subs	r0, r3, #4
 800a424:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a42c:	dce6      	bgt.n	800a3fc <nl_func_relu_generic_array_f32+0x34>
 800a42e:	eef0 7a66 	vmov.f32	s15, s13
 800a432:	e7ec      	b.n	800a40e <nl_func_relu_generic_array_f32+0x46>
 800a434:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800a438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a43c:	d019      	beq.n	800a472 <nl_func_relu_generic_array_f32+0xaa>
 800a43e:	42ac      	cmp	r4, r5
 800a440:	d315      	bcc.n	800a46e <nl_func_relu_generic_array_f32+0xa6>
 800a442:	1d23      	adds	r3, r4, #4
 800a444:	3204      	adds	r2, #4
 800a446:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a44a:	1f18      	subs	r0, r3, #4
 800a44c:	f1a3 0508 	sub.w	r5, r3, #8
 800a450:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a454:	4603      	mov	r3, r0
 800a456:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a45e:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a462:	d51c      	bpl.n	800a49e <nl_func_relu_generic_array_f32+0xd6>
 800a464:	ed62 6a01 	vstmdb	r2!, {s13}
 800a468:	6888      	ldr	r0, [r1, #8]
 800a46a:	42a8      	cmp	r0, r5
 800a46c:	d9eb      	bls.n	800a446 <nl_func_relu_generic_array_f32+0x7e>
 800a46e:	bc70      	pop	{r4, r5, r6}
 800a470:	4770      	bx	lr
 800a472:	42ac      	cmp	r4, r5
 800a474:	d3fb      	bcc.n	800a46e <nl_func_relu_generic_array_f32+0xa6>
 800a476:	1d23      	adds	r3, r4, #4
 800a478:	3204      	adds	r2, #4
 800a47a:	2600      	movs	r6, #0
 800a47c:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a480:	1f18      	subs	r0, r3, #4
 800a482:	f1a3 0508 	sub.w	r5, r3, #8
 800a486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a48a:	4603      	mov	r3, r0
 800a48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a490:	d80b      	bhi.n	800a4aa <nl_func_relu_generic_array_f32+0xe2>
 800a492:	ed62 7a01 	vstmdb	r2!, {s15}
 800a496:	6888      	ldr	r0, [r1, #8]
 800a498:	42a8      	cmp	r0, r5
 800a49a:	d9ef      	bls.n	800a47c <nl_func_relu_generic_array_f32+0xb4>
 800a49c:	e7e7      	b.n	800a46e <nl_func_relu_generic_array_f32+0xa6>
 800a49e:	ed62 7a01 	vstmdb	r2!, {s15}
 800a4a2:	6888      	ldr	r0, [r1, #8]
 800a4a4:	42a8      	cmp	r0, r5
 800a4a6:	d9ce      	bls.n	800a446 <nl_func_relu_generic_array_f32+0x7e>
 800a4a8:	e7e1      	b.n	800a46e <nl_func_relu_generic_array_f32+0xa6>
 800a4aa:	f842 6d04 	str.w	r6, [r2, #-4]!
 800a4ae:	6888      	ldr	r0, [r1, #8]
 800a4b0:	42a8      	cmp	r0, r5
 800a4b2:	d9e3      	bls.n	800a47c <nl_func_relu_generic_array_f32+0xb4>
 800a4b4:	e7db      	b.n	800a46e <nl_func_relu_generic_array_f32+0xa6>
 800a4b6:	bf00      	nop

0800a4b8 <forward_relu>:
 800a4b8:	6942      	ldr	r2, [r0, #20]
 800a4ba:	8813      	ldrh	r3, [r2, #0]
 800a4bc:	b33b      	cbz	r3, 800a50e <forward_relu+0x56>
 800a4be:	b4f0      	push	{r4, r5, r6, r7}
 800a4c0:	6852      	ldr	r2, [r2, #4]
 800a4c2:	6855      	ldr	r5, [r2, #4]
 800a4c4:	b105      	cbz	r5, 800a4c8 <forward_relu+0x10>
 800a4c6:	682d      	ldr	r5, [r5, #0]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d91d      	bls.n	800a508 <forward_relu+0x50>
 800a4cc:	6913      	ldr	r3, [r2, #16]
 800a4ce:	b103      	cbz	r3, 800a4d2 <forward_relu+0x1a>
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	6982      	ldr	r2, [r0, #24]
 800a4d4:	68ac      	ldr	r4, [r5, #8]
 800a4d6:	6998      	ldr	r0, [r3, #24]
 800a4d8:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800a4dc:	69a9      	ldr	r1, [r5, #24]
 800a4de:	2a00      	cmp	r2, #0
 800a4e0:	d040      	beq.n	800a564 <forward_relu+0xac>
 800a4e2:	e9d2 6301 	ldrd	r6, r3, [r2, #4]
 800a4e6:	2e01      	cmp	r6, #1
 800a4e8:	d013      	beq.n	800a512 <forward_relu+0x5a>
 800a4ea:	2c00      	cmp	r4, #0
 800a4ec:	d068      	beq.n	800a5c0 <forward_relu+0x108>
 800a4ee:	68ee      	ldr	r6, [r5, #12]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800a4f6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a4fa:	42a6      	cmp	r6, r4
 800a4fc:	fb05 f202 	mul.w	r2, r5, r2
 800a500:	d1f9      	bne.n	800a4f6 <forward_relu+0x3e>
 800a502:	bcf0      	pop	{r4, r5, r6, r7}
 800a504:	f7ff bf60 	b.w	800a3c8 <nl_func_relu_generic_array_f32>
 800a508:	2300      	movs	r3, #0
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	deff      	udf	#255	; 0xff
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	deff      	udf	#255	; 0xff
 800a512:	6887      	ldr	r7, [r0, #8]
 800a514:	688a      	ldr	r2, [r1, #8]
 800a516:	ed93 7a00 	vldr	s14, [r3]
 800a51a:	b184      	cbz	r4, 800a53e <forward_relu+0x86>
 800a51c:	68ed      	ldr	r5, [r5, #12]
 800a51e:	4630      	mov	r0, r6
 800a520:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800a524:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800a528:	42a5      	cmp	r5, r4
 800a52a:	fb03 f000 	mul.w	r0, r3, r0
 800a52e:	d1f9      	bne.n	800a524 <forward_relu+0x6c>
 800a530:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a534:	4403      	add	r3, r0
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	18d2      	adds	r2, r2, r3
 800a53a:	441f      	add	r7, r3
 800a53c:	d236      	bcs.n	800a5ac <forward_relu+0xf4>
 800a53e:	1d13      	adds	r3, r2, #4
 800a540:	2500      	movs	r5, #0
 800a542:	1d3a      	adds	r2, r7, #4
 800a544:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a548:	1f18      	subs	r0, r3, #4
 800a54a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a552:	d82d      	bhi.n	800a5b0 <forward_relu+0xf8>
 800a554:	ed62 7a01 	vstmdb	r2!, {s15}
 800a558:	3b08      	subs	r3, #8
 800a55a:	688c      	ldr	r4, [r1, #8]
 800a55c:	429c      	cmp	r4, r3
 800a55e:	d825      	bhi.n	800a5ac <forward_relu+0xf4>
 800a560:	4603      	mov	r3, r0
 800a562:	e7ef      	b.n	800a544 <forward_relu+0x8c>
 800a564:	6880      	ldr	r0, [r0, #8]
 800a566:	688b      	ldr	r3, [r1, #8]
 800a568:	b184      	cbz	r4, 800a58c <forward_relu+0xd4>
 800a56a:	68ee      	ldr	r6, [r5, #12]
 800a56c:	2201      	movs	r2, #1
 800a56e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800a572:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a576:	42a6      	cmp	r6, r4
 800a578:	fb05 f202 	mul.w	r2, r5, r2
 800a57c:	d1f9      	bne.n	800a572 <forward_relu+0xba>
 800a57e:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800a582:	4414      	add	r4, r2
 800a584:	00a2      	lsls	r2, r4, #2
 800a586:	189b      	adds	r3, r3, r2
 800a588:	4410      	add	r0, r2
 800a58a:	d20f      	bcs.n	800a5ac <forward_relu+0xf4>
 800a58c:	3304      	adds	r3, #4
 800a58e:	3004      	adds	r0, #4
 800a590:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a5c4 <forward_relu+0x10c>
 800a594:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a598:	f1a3 0208 	sub.w	r2, r3, #8
 800a59c:	3b04      	subs	r3, #4
 800a59e:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800a5a2:	ed60 7a01 	vstmdb	r0!, {s15}
 800a5a6:	688c      	ldr	r4, [r1, #8]
 800a5a8:	4294      	cmp	r4, r2
 800a5aa:	d9f3      	bls.n	800a594 <forward_relu+0xdc>
 800a5ac:	bcf0      	pop	{r4, r5, r6, r7}
 800a5ae:	4770      	bx	lr
 800a5b0:	f842 5d04 	str.w	r5, [r2, #-4]!
 800a5b4:	3b08      	subs	r3, #8
 800a5b6:	688c      	ldr	r4, [r1, #8]
 800a5b8:	429c      	cmp	r4, r3
 800a5ba:	d8f7      	bhi.n	800a5ac <forward_relu+0xf4>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	e7c1      	b.n	800a544 <forward_relu+0x8c>
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	e79e      	b.n	800a502 <forward_relu+0x4a>
 800a5c4:	00000000 	.word	0x00000000

0800a5c8 <ai_check_custom_types>:
 800a5c8:	4b13      	ldr	r3, [pc, #76]	; (800a618 <ai_check_custom_types+0x50>)
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	9301      	str	r3, [sp, #4]
 800a5d0:	b118      	cbz	r0, 800a5da <ai_check_custom_types+0x12>
 800a5d2:	7803      	ldrb	r3, [r0, #0]
 800a5d4:	2b03      	cmp	r3, #3
 800a5d6:	d002      	beq.n	800a5de <ai_check_custom_types+0x16>
 800a5d8:	2000      	movs	r0, #0
 800a5da:	b002      	add	sp, #8
 800a5dc:	4770      	bx	lr
 800a5de:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d004      	beq.n	800a5f0 <ai_check_custom_types+0x28>
 800a5e6:	2001      	movs	r0, #1
 800a5e8:	f080 0001 	eor.w	r0, r0, #1
 800a5ec:	b002      	add	sp, #8
 800a5ee:	4770      	bx	lr
 800a5f0:	7842      	ldrb	r2, [r0, #1]
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d1f4      	bne.n	800a5e6 <ai_check_custom_types+0x1e>
 800a5fc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800a600:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a604:	429a      	cmp	r2, r3
 800a606:	d1ee      	bne.n	800a5e6 <ai_check_custom_types+0x1e>
 800a608:	7842      	ldrb	r2, [r0, #1]
 800a60a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d1e9      	bne.n	800a5e6 <ai_check_custom_types+0x1e>
 800a612:	2000      	movs	r0, #0
 800a614:	e7e8      	b.n	800a5e8 <ai_check_custom_types+0x20>
 800a616:	bf00      	nop
 800a618:	0800d664 	.word	0x0800d664

0800a61c <ai_layers_forward_all>:
 800a61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a61e:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800a620:	4604      	mov	r4, r0
 800a622:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800a624:	b316      	cbz	r6, 800a66c <ai_layers_forward_all+0x50>
 800a626:	b1c5      	cbz	r5, 800a65a <ai_layers_forward_all+0x3e>
 800a628:	6545      	str	r5, [r0, #84]	; 0x54
 800a62a:	4629      	mov	r1, r5
 800a62c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800a62e:	2001      	movs	r0, #1
 800a630:	47b0      	blx	r6
 800a632:	2700      	movs	r7, #0
 800a634:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a636:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a638:	2002      	movs	r0, #2
 800a63a:	47b0      	blx	r6
 800a63c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800a63e:	692b      	ldr	r3, [r5, #16]
 800a640:	4628      	mov	r0, r5
 800a642:	4798      	blx	r3
 800a644:	68eb      	ldr	r3, [r5, #12]
 800a646:	2003      	movs	r0, #3
 800a648:	429d      	cmp	r5, r3
 800a64a:	4619      	mov	r1, r3
 800a64c:	d006      	beq.n	800a65c <ai_layers_forward_all+0x40>
 800a64e:	6563      	str	r3, [r4, #84]	; 0x54
 800a650:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a652:	47b0      	blx	r6
 800a654:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a656:	2900      	cmp	r1, #0
 800a658:	d1ed      	bne.n	800a636 <ai_layers_forward_all+0x1a>
 800a65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a65c:	2100      	movs	r1, #0
 800a65e:	6567      	str	r7, [r4, #84]	; 0x54
 800a660:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a662:	47b0      	blx	r6
 800a664:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a666:	2900      	cmp	r1, #0
 800a668:	d1e5      	bne.n	800a636 <ai_layers_forward_all+0x1a>
 800a66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a66c:	2d00      	cmp	r5, #0
 800a66e:	d0f4      	beq.n	800a65a <ai_layers_forward_all+0x3e>
 800a670:	6545      	str	r5, [r0, #84]	; 0x54
 800a672:	692b      	ldr	r3, [r5, #16]
 800a674:	4628      	mov	r0, r5
 800a676:	4798      	blx	r3
 800a678:	68eb      	ldr	r3, [r5, #12]
 800a67a:	42ab      	cmp	r3, r5
 800a67c:	461d      	mov	r5, r3
 800a67e:	d003      	beq.n	800a688 <ai_layers_forward_all+0x6c>
 800a680:	6563      	str	r3, [r4, #84]	; 0x54
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1f5      	bne.n	800a672 <ai_layers_forward_all+0x56>
 800a686:	e7e8      	b.n	800a65a <ai_layers_forward_all+0x3e>
 800a688:	2300      	movs	r3, #0
 800a68a:	6563      	str	r3, [r4, #84]	; 0x54
 800a68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a68e:	bf00      	nop

0800a690 <ai_array_to_buffer_fmt>:
 800a690:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800a694:	2b02      	cmp	r3, #2
 800a696:	d01f      	beq.n	800a6d8 <ai_array_to_buffer_fmt+0x48>
 800a698:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800a69c:	4a1b      	ldr	r2, [pc, #108]	; (800a70c <ai_array_to_buffer_fmt+0x7c>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d00a      	beq.n	800a6b8 <ai_array_to_buffer_fmt+0x28>
 800a6a2:	dc0d      	bgt.n	800a6c0 <ai_array_to_buffer_fmt+0x30>
 800a6a4:	4a1a      	ldr	r2, [pc, #104]	; (800a710 <ai_array_to_buffer_fmt+0x80>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d006      	beq.n	800a6b8 <ai_array_to_buffer_fmt+0x28>
 800a6aa:	dd1d      	ble.n	800a6e8 <ai_array_to_buffer_fmt+0x58>
 800a6ac:	4a19      	ldr	r2, [pc, #100]	; (800a714 <ai_array_to_buffer_fmt+0x84>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d002      	beq.n	800a6b8 <ai_array_to_buffer_fmt+0x28>
 800a6b2:	320f      	adds	r2, #15
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d10d      	bne.n	800a6d4 <ai_array_to_buffer_fmt+0x44>
 800a6b8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a6bc:	4318      	orrs	r0, r3
 800a6be:	4770      	bx	lr
 800a6c0:	4a15      	ldr	r2, [pc, #84]	; (800a718 <ai_array_to_buffer_fmt+0x88>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d0f8      	beq.n	800a6b8 <ai_array_to_buffer_fmt+0x28>
 800a6c6:	dd18      	ble.n	800a6fa <ai_array_to_buffer_fmt+0x6a>
 800a6c8:	4a14      	ldr	r2, [pc, #80]	; (800a71c <ai_array_to_buffer_fmt+0x8c>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d0f4      	beq.n	800a6b8 <ai_array_to_buffer_fmt+0x28>
 800a6ce:	4a14      	ldr	r2, [pc, #80]	; (800a720 <ai_array_to_buffer_fmt+0x90>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d0f1      	beq.n	800a6b8 <ai_array_to_buffer_fmt+0x28>
 800a6d4:	2340      	movs	r3, #64	; 0x40
 800a6d6:	e7ef      	b.n	800a6b8 <ai_array_to_buffer_fmt+0x28>
 800a6d8:	4b12      	ldr	r3, [pc, #72]	; (800a724 <ai_array_to_buffer_fmt+0x94>)
 800a6da:	4003      	ands	r3, r0
 800a6dc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a6e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a6e4:	4318      	orrs	r0, r3
 800a6e6:	4770      	bx	lr
 800a6e8:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d0e3      	beq.n	800a6b8 <ai_array_to_buffer_fmt+0x28>
 800a6f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d0df      	beq.n	800a6b8 <ai_array_to_buffer_fmt+0x28>
 800a6f8:	e7ec      	b.n	800a6d4 <ai_array_to_buffer_fmt+0x44>
 800a6fa:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d0da      	beq.n	800a6b8 <ai_array_to_buffer_fmt+0x28>
 800a702:	3207      	adds	r2, #7
 800a704:	4293      	cmp	r3, r2
 800a706:	d0d7      	beq.n	800a6b8 <ai_array_to_buffer_fmt+0x28>
 800a708:	e7e4      	b.n	800a6d4 <ai_array_to_buffer_fmt+0x44>
 800a70a:	bf00      	nop
 800a70c:	00840040 	.word	0x00840040
 800a710:	00040447 	.word	0x00040447
 800a714:	00040840 	.word	0x00040840
 800a718:	00840840 	.word	0x00840840
 800a71c:	0084084f 	.word	0x0084084f
 800a720:	01821040 	.word	0x01821040
 800a724:	00803fff 	.word	0x00803fff

0800a728 <ai_array_get_byte_size>:
 800a728:	b1e1      	cbz	r1, 800a764 <ai_array_get_byte_size+0x3c>
 800a72a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800a72e:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800a732:	b410      	push	{r4}
 800a734:	f3c0 3482 	ubfx	r4, r0, #14, #3
 800a738:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800a73c:	4423      	add	r3, r4
 800a73e:	2804      	cmp	r0, #4
 800a740:	fb01 f103 	mul.w	r1, r1, r3
 800a744:	f101 0107 	add.w	r1, r1, #7
 800a748:	f021 0107 	bic.w	r1, r1, #7
 800a74c:	fa21 f102 	lsr.w	r1, r1, r2
 800a750:	d00a      	beq.n	800a768 <ai_array_get_byte_size+0x40>
 800a752:	2808      	cmp	r0, #8
 800a754:	d101      	bne.n	800a75a <ai_array_get_byte_size+0x32>
 800a756:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800a75a:	3107      	adds	r1, #7
 800a75c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a760:	08c8      	lsrs	r0, r1, #3
 800a762:	4770      	bx	lr
 800a764:	4608      	mov	r0, r1
 800a766:	4770      	bx	lr
 800a768:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800a76c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a770:	3107      	adds	r1, #7
 800a772:	08c8      	lsrs	r0, r1, #3
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop

0800a778 <__errno>:
 800a778:	4b01      	ldr	r3, [pc, #4]	; (800a780 <__errno+0x8>)
 800a77a:	6818      	ldr	r0, [r3, #0]
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	200005e4 	.word	0x200005e4

0800a784 <__libc_init_array>:
 800a784:	b570      	push	{r4, r5, r6, lr}
 800a786:	4d0d      	ldr	r5, [pc, #52]	; (800a7bc <__libc_init_array+0x38>)
 800a788:	4c0d      	ldr	r4, [pc, #52]	; (800a7c0 <__libc_init_array+0x3c>)
 800a78a:	1b64      	subs	r4, r4, r5
 800a78c:	10a4      	asrs	r4, r4, #2
 800a78e:	2600      	movs	r6, #0
 800a790:	42a6      	cmp	r6, r4
 800a792:	d109      	bne.n	800a7a8 <__libc_init_array+0x24>
 800a794:	4d0b      	ldr	r5, [pc, #44]	; (800a7c4 <__libc_init_array+0x40>)
 800a796:	4c0c      	ldr	r4, [pc, #48]	; (800a7c8 <__libc_init_array+0x44>)
 800a798:	f002 fef4 	bl	800d584 <_init>
 800a79c:	1b64      	subs	r4, r4, r5
 800a79e:	10a4      	asrs	r4, r4, #2
 800a7a0:	2600      	movs	r6, #0
 800a7a2:	42a6      	cmp	r6, r4
 800a7a4:	d105      	bne.n	800a7b2 <__libc_init_array+0x2e>
 800a7a6:	bd70      	pop	{r4, r5, r6, pc}
 800a7a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7ac:	4798      	blx	r3
 800a7ae:	3601      	adds	r6, #1
 800a7b0:	e7ee      	b.n	800a790 <__libc_init_array+0xc>
 800a7b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7b6:	4798      	blx	r3
 800a7b8:	3601      	adds	r6, #1
 800a7ba:	e7f2      	b.n	800a7a2 <__libc_init_array+0x1e>
 800a7bc:	0800df94 	.word	0x0800df94
 800a7c0:	0800df94 	.word	0x0800df94
 800a7c4:	0800df94 	.word	0x0800df94
 800a7c8:	0800df98 	.word	0x0800df98

0800a7cc <malloc>:
 800a7cc:	4b02      	ldr	r3, [pc, #8]	; (800a7d8 <malloc+0xc>)
 800a7ce:	4601      	mov	r1, r0
 800a7d0:	6818      	ldr	r0, [r3, #0]
 800a7d2:	f000 b869 	b.w	800a8a8 <_malloc_r>
 800a7d6:	bf00      	nop
 800a7d8:	200005e4 	.word	0x200005e4

0800a7dc <memcpy>:
 800a7dc:	440a      	add	r2, r1
 800a7de:	4291      	cmp	r1, r2
 800a7e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a7e4:	d100      	bne.n	800a7e8 <memcpy+0xc>
 800a7e6:	4770      	bx	lr
 800a7e8:	b510      	push	{r4, lr}
 800a7ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7f2:	4291      	cmp	r1, r2
 800a7f4:	d1f9      	bne.n	800a7ea <memcpy+0xe>
 800a7f6:	bd10      	pop	{r4, pc}

0800a7f8 <memset>:
 800a7f8:	4402      	add	r2, r0
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d100      	bne.n	800a802 <memset+0xa>
 800a800:	4770      	bx	lr
 800a802:	f803 1b01 	strb.w	r1, [r3], #1
 800a806:	e7f9      	b.n	800a7fc <memset+0x4>

0800a808 <_free_r>:
 800a808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a80a:	2900      	cmp	r1, #0
 800a80c:	d048      	beq.n	800a8a0 <_free_r+0x98>
 800a80e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a812:	9001      	str	r0, [sp, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	f1a1 0404 	sub.w	r4, r1, #4
 800a81a:	bfb8      	it	lt
 800a81c:	18e4      	addlt	r4, r4, r3
 800a81e:	f001 fbb3 	bl	800bf88 <__malloc_lock>
 800a822:	4a20      	ldr	r2, [pc, #128]	; (800a8a4 <_free_r+0x9c>)
 800a824:	9801      	ldr	r0, [sp, #4]
 800a826:	6813      	ldr	r3, [r2, #0]
 800a828:	4615      	mov	r5, r2
 800a82a:	b933      	cbnz	r3, 800a83a <_free_r+0x32>
 800a82c:	6063      	str	r3, [r4, #4]
 800a82e:	6014      	str	r4, [r2, #0]
 800a830:	b003      	add	sp, #12
 800a832:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a836:	f001 bbad 	b.w	800bf94 <__malloc_unlock>
 800a83a:	42a3      	cmp	r3, r4
 800a83c:	d90b      	bls.n	800a856 <_free_r+0x4e>
 800a83e:	6821      	ldr	r1, [r4, #0]
 800a840:	1862      	adds	r2, r4, r1
 800a842:	4293      	cmp	r3, r2
 800a844:	bf04      	itt	eq
 800a846:	681a      	ldreq	r2, [r3, #0]
 800a848:	685b      	ldreq	r3, [r3, #4]
 800a84a:	6063      	str	r3, [r4, #4]
 800a84c:	bf04      	itt	eq
 800a84e:	1852      	addeq	r2, r2, r1
 800a850:	6022      	streq	r2, [r4, #0]
 800a852:	602c      	str	r4, [r5, #0]
 800a854:	e7ec      	b.n	800a830 <_free_r+0x28>
 800a856:	461a      	mov	r2, r3
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	b10b      	cbz	r3, 800a860 <_free_r+0x58>
 800a85c:	42a3      	cmp	r3, r4
 800a85e:	d9fa      	bls.n	800a856 <_free_r+0x4e>
 800a860:	6811      	ldr	r1, [r2, #0]
 800a862:	1855      	adds	r5, r2, r1
 800a864:	42a5      	cmp	r5, r4
 800a866:	d10b      	bne.n	800a880 <_free_r+0x78>
 800a868:	6824      	ldr	r4, [r4, #0]
 800a86a:	4421      	add	r1, r4
 800a86c:	1854      	adds	r4, r2, r1
 800a86e:	42a3      	cmp	r3, r4
 800a870:	6011      	str	r1, [r2, #0]
 800a872:	d1dd      	bne.n	800a830 <_free_r+0x28>
 800a874:	681c      	ldr	r4, [r3, #0]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	6053      	str	r3, [r2, #4]
 800a87a:	4421      	add	r1, r4
 800a87c:	6011      	str	r1, [r2, #0]
 800a87e:	e7d7      	b.n	800a830 <_free_r+0x28>
 800a880:	d902      	bls.n	800a888 <_free_r+0x80>
 800a882:	230c      	movs	r3, #12
 800a884:	6003      	str	r3, [r0, #0]
 800a886:	e7d3      	b.n	800a830 <_free_r+0x28>
 800a888:	6825      	ldr	r5, [r4, #0]
 800a88a:	1961      	adds	r1, r4, r5
 800a88c:	428b      	cmp	r3, r1
 800a88e:	bf04      	itt	eq
 800a890:	6819      	ldreq	r1, [r3, #0]
 800a892:	685b      	ldreq	r3, [r3, #4]
 800a894:	6063      	str	r3, [r4, #4]
 800a896:	bf04      	itt	eq
 800a898:	1949      	addeq	r1, r1, r5
 800a89a:	6021      	streq	r1, [r4, #0]
 800a89c:	6054      	str	r4, [r2, #4]
 800a89e:	e7c7      	b.n	800a830 <_free_r+0x28>
 800a8a0:	b003      	add	sp, #12
 800a8a2:	bd30      	pop	{r4, r5, pc}
 800a8a4:	20000854 	.word	0x20000854

0800a8a8 <_malloc_r>:
 800a8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8aa:	1ccd      	adds	r5, r1, #3
 800a8ac:	f025 0503 	bic.w	r5, r5, #3
 800a8b0:	3508      	adds	r5, #8
 800a8b2:	2d0c      	cmp	r5, #12
 800a8b4:	bf38      	it	cc
 800a8b6:	250c      	movcc	r5, #12
 800a8b8:	2d00      	cmp	r5, #0
 800a8ba:	4606      	mov	r6, r0
 800a8bc:	db01      	blt.n	800a8c2 <_malloc_r+0x1a>
 800a8be:	42a9      	cmp	r1, r5
 800a8c0:	d903      	bls.n	800a8ca <_malloc_r+0x22>
 800a8c2:	230c      	movs	r3, #12
 800a8c4:	6033      	str	r3, [r6, #0]
 800a8c6:	2000      	movs	r0, #0
 800a8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8ca:	f001 fb5d 	bl	800bf88 <__malloc_lock>
 800a8ce:	4921      	ldr	r1, [pc, #132]	; (800a954 <_malloc_r+0xac>)
 800a8d0:	680a      	ldr	r2, [r1, #0]
 800a8d2:	4614      	mov	r4, r2
 800a8d4:	b99c      	cbnz	r4, 800a8fe <_malloc_r+0x56>
 800a8d6:	4f20      	ldr	r7, [pc, #128]	; (800a958 <_malloc_r+0xb0>)
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	b923      	cbnz	r3, 800a8e6 <_malloc_r+0x3e>
 800a8dc:	4621      	mov	r1, r4
 800a8de:	4630      	mov	r0, r6
 800a8e0:	f000 fca6 	bl	800b230 <_sbrk_r>
 800a8e4:	6038      	str	r0, [r7, #0]
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	f000 fca1 	bl	800b230 <_sbrk_r>
 800a8ee:	1c43      	adds	r3, r0, #1
 800a8f0:	d123      	bne.n	800a93a <_malloc_r+0x92>
 800a8f2:	230c      	movs	r3, #12
 800a8f4:	6033      	str	r3, [r6, #0]
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	f001 fb4c 	bl	800bf94 <__malloc_unlock>
 800a8fc:	e7e3      	b.n	800a8c6 <_malloc_r+0x1e>
 800a8fe:	6823      	ldr	r3, [r4, #0]
 800a900:	1b5b      	subs	r3, r3, r5
 800a902:	d417      	bmi.n	800a934 <_malloc_r+0x8c>
 800a904:	2b0b      	cmp	r3, #11
 800a906:	d903      	bls.n	800a910 <_malloc_r+0x68>
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	441c      	add	r4, r3
 800a90c:	6025      	str	r5, [r4, #0]
 800a90e:	e004      	b.n	800a91a <_malloc_r+0x72>
 800a910:	6863      	ldr	r3, [r4, #4]
 800a912:	42a2      	cmp	r2, r4
 800a914:	bf0c      	ite	eq
 800a916:	600b      	streq	r3, [r1, #0]
 800a918:	6053      	strne	r3, [r2, #4]
 800a91a:	4630      	mov	r0, r6
 800a91c:	f001 fb3a 	bl	800bf94 <__malloc_unlock>
 800a920:	f104 000b 	add.w	r0, r4, #11
 800a924:	1d23      	adds	r3, r4, #4
 800a926:	f020 0007 	bic.w	r0, r0, #7
 800a92a:	1ac2      	subs	r2, r0, r3
 800a92c:	d0cc      	beq.n	800a8c8 <_malloc_r+0x20>
 800a92e:	1a1b      	subs	r3, r3, r0
 800a930:	50a3      	str	r3, [r4, r2]
 800a932:	e7c9      	b.n	800a8c8 <_malloc_r+0x20>
 800a934:	4622      	mov	r2, r4
 800a936:	6864      	ldr	r4, [r4, #4]
 800a938:	e7cc      	b.n	800a8d4 <_malloc_r+0x2c>
 800a93a:	1cc4      	adds	r4, r0, #3
 800a93c:	f024 0403 	bic.w	r4, r4, #3
 800a940:	42a0      	cmp	r0, r4
 800a942:	d0e3      	beq.n	800a90c <_malloc_r+0x64>
 800a944:	1a21      	subs	r1, r4, r0
 800a946:	4630      	mov	r0, r6
 800a948:	f000 fc72 	bl	800b230 <_sbrk_r>
 800a94c:	3001      	adds	r0, #1
 800a94e:	d1dd      	bne.n	800a90c <_malloc_r+0x64>
 800a950:	e7cf      	b.n	800a8f2 <_malloc_r+0x4a>
 800a952:	bf00      	nop
 800a954:	20000854 	.word	0x20000854
 800a958:	20000858 	.word	0x20000858

0800a95c <__cvt>:
 800a95c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a960:	ec55 4b10 	vmov	r4, r5, d0
 800a964:	2d00      	cmp	r5, #0
 800a966:	460e      	mov	r6, r1
 800a968:	4619      	mov	r1, r3
 800a96a:	462b      	mov	r3, r5
 800a96c:	bfbb      	ittet	lt
 800a96e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a972:	461d      	movlt	r5, r3
 800a974:	2300      	movge	r3, #0
 800a976:	232d      	movlt	r3, #45	; 0x2d
 800a978:	700b      	strb	r3, [r1, #0]
 800a97a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a97c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a980:	4691      	mov	r9, r2
 800a982:	f023 0820 	bic.w	r8, r3, #32
 800a986:	bfbc      	itt	lt
 800a988:	4622      	movlt	r2, r4
 800a98a:	4614      	movlt	r4, r2
 800a98c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a990:	d005      	beq.n	800a99e <__cvt+0x42>
 800a992:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a996:	d100      	bne.n	800a99a <__cvt+0x3e>
 800a998:	3601      	adds	r6, #1
 800a99a:	2102      	movs	r1, #2
 800a99c:	e000      	b.n	800a9a0 <__cvt+0x44>
 800a99e:	2103      	movs	r1, #3
 800a9a0:	ab03      	add	r3, sp, #12
 800a9a2:	9301      	str	r3, [sp, #4]
 800a9a4:	ab02      	add	r3, sp, #8
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	ec45 4b10 	vmov	d0, r4, r5
 800a9ac:	4653      	mov	r3, sl
 800a9ae:	4632      	mov	r2, r6
 800a9b0:	f000 fcfa 	bl	800b3a8 <_dtoa_r>
 800a9b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a9b8:	4607      	mov	r7, r0
 800a9ba:	d102      	bne.n	800a9c2 <__cvt+0x66>
 800a9bc:	f019 0f01 	tst.w	r9, #1
 800a9c0:	d022      	beq.n	800aa08 <__cvt+0xac>
 800a9c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a9c6:	eb07 0906 	add.w	r9, r7, r6
 800a9ca:	d110      	bne.n	800a9ee <__cvt+0x92>
 800a9cc:	783b      	ldrb	r3, [r7, #0]
 800a9ce:	2b30      	cmp	r3, #48	; 0x30
 800a9d0:	d10a      	bne.n	800a9e8 <__cvt+0x8c>
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	4629      	mov	r1, r5
 800a9da:	f7f6 f895 	bl	8000b08 <__aeabi_dcmpeq>
 800a9de:	b918      	cbnz	r0, 800a9e8 <__cvt+0x8c>
 800a9e0:	f1c6 0601 	rsb	r6, r6, #1
 800a9e4:	f8ca 6000 	str.w	r6, [sl]
 800a9e8:	f8da 3000 	ldr.w	r3, [sl]
 800a9ec:	4499      	add	r9, r3
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	4629      	mov	r1, r5
 800a9f6:	f7f6 f887 	bl	8000b08 <__aeabi_dcmpeq>
 800a9fa:	b108      	cbz	r0, 800aa00 <__cvt+0xa4>
 800a9fc:	f8cd 900c 	str.w	r9, [sp, #12]
 800aa00:	2230      	movs	r2, #48	; 0x30
 800aa02:	9b03      	ldr	r3, [sp, #12]
 800aa04:	454b      	cmp	r3, r9
 800aa06:	d307      	bcc.n	800aa18 <__cvt+0xbc>
 800aa08:	9b03      	ldr	r3, [sp, #12]
 800aa0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa0c:	1bdb      	subs	r3, r3, r7
 800aa0e:	4638      	mov	r0, r7
 800aa10:	6013      	str	r3, [r2, #0]
 800aa12:	b004      	add	sp, #16
 800aa14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa18:	1c59      	adds	r1, r3, #1
 800aa1a:	9103      	str	r1, [sp, #12]
 800aa1c:	701a      	strb	r2, [r3, #0]
 800aa1e:	e7f0      	b.n	800aa02 <__cvt+0xa6>

0800aa20 <__exponent>:
 800aa20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa22:	4603      	mov	r3, r0
 800aa24:	2900      	cmp	r1, #0
 800aa26:	bfb8      	it	lt
 800aa28:	4249      	neglt	r1, r1
 800aa2a:	f803 2b02 	strb.w	r2, [r3], #2
 800aa2e:	bfb4      	ite	lt
 800aa30:	222d      	movlt	r2, #45	; 0x2d
 800aa32:	222b      	movge	r2, #43	; 0x2b
 800aa34:	2909      	cmp	r1, #9
 800aa36:	7042      	strb	r2, [r0, #1]
 800aa38:	dd2a      	ble.n	800aa90 <__exponent+0x70>
 800aa3a:	f10d 0407 	add.w	r4, sp, #7
 800aa3e:	46a4      	mov	ip, r4
 800aa40:	270a      	movs	r7, #10
 800aa42:	46a6      	mov	lr, r4
 800aa44:	460a      	mov	r2, r1
 800aa46:	fb91 f6f7 	sdiv	r6, r1, r7
 800aa4a:	fb07 1516 	mls	r5, r7, r6, r1
 800aa4e:	3530      	adds	r5, #48	; 0x30
 800aa50:	2a63      	cmp	r2, #99	; 0x63
 800aa52:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800aa56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800aa5a:	4631      	mov	r1, r6
 800aa5c:	dcf1      	bgt.n	800aa42 <__exponent+0x22>
 800aa5e:	3130      	adds	r1, #48	; 0x30
 800aa60:	f1ae 0502 	sub.w	r5, lr, #2
 800aa64:	f804 1c01 	strb.w	r1, [r4, #-1]
 800aa68:	1c44      	adds	r4, r0, #1
 800aa6a:	4629      	mov	r1, r5
 800aa6c:	4561      	cmp	r1, ip
 800aa6e:	d30a      	bcc.n	800aa86 <__exponent+0x66>
 800aa70:	f10d 0209 	add.w	r2, sp, #9
 800aa74:	eba2 020e 	sub.w	r2, r2, lr
 800aa78:	4565      	cmp	r5, ip
 800aa7a:	bf88      	it	hi
 800aa7c:	2200      	movhi	r2, #0
 800aa7e:	4413      	add	r3, r2
 800aa80:	1a18      	subs	r0, r3, r0
 800aa82:	b003      	add	sp, #12
 800aa84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800aa8e:	e7ed      	b.n	800aa6c <__exponent+0x4c>
 800aa90:	2330      	movs	r3, #48	; 0x30
 800aa92:	3130      	adds	r1, #48	; 0x30
 800aa94:	7083      	strb	r3, [r0, #2]
 800aa96:	70c1      	strb	r1, [r0, #3]
 800aa98:	1d03      	adds	r3, r0, #4
 800aa9a:	e7f1      	b.n	800aa80 <__exponent+0x60>

0800aa9c <_printf_float>:
 800aa9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa0:	ed2d 8b02 	vpush	{d8}
 800aaa4:	b08d      	sub	sp, #52	; 0x34
 800aaa6:	460c      	mov	r4, r1
 800aaa8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aaac:	4616      	mov	r6, r2
 800aaae:	461f      	mov	r7, r3
 800aab0:	4605      	mov	r5, r0
 800aab2:	f001 fa65 	bl	800bf80 <_localeconv_r>
 800aab6:	f8d0 a000 	ldr.w	sl, [r0]
 800aaba:	4650      	mov	r0, sl
 800aabc:	f7f5 fba8 	bl	8000210 <strlen>
 800aac0:	2300      	movs	r3, #0
 800aac2:	930a      	str	r3, [sp, #40]	; 0x28
 800aac4:	6823      	ldr	r3, [r4, #0]
 800aac6:	9305      	str	r3, [sp, #20]
 800aac8:	f8d8 3000 	ldr.w	r3, [r8]
 800aacc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aad0:	3307      	adds	r3, #7
 800aad2:	f023 0307 	bic.w	r3, r3, #7
 800aad6:	f103 0208 	add.w	r2, r3, #8
 800aada:	f8c8 2000 	str.w	r2, [r8]
 800aade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aae6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aaea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aaee:	9307      	str	r3, [sp, #28]
 800aaf0:	f8cd 8018 	str.w	r8, [sp, #24]
 800aaf4:	ee08 0a10 	vmov	s16, r0
 800aaf8:	4b9f      	ldr	r3, [pc, #636]	; (800ad78 <_printf_float+0x2dc>)
 800aafa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aafe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab02:	f7f6 f833 	bl	8000b6c <__aeabi_dcmpun>
 800ab06:	bb88      	cbnz	r0, 800ab6c <_printf_float+0xd0>
 800ab08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab0c:	4b9a      	ldr	r3, [pc, #616]	; (800ad78 <_printf_float+0x2dc>)
 800ab0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab12:	f7f6 f80d 	bl	8000b30 <__aeabi_dcmple>
 800ab16:	bb48      	cbnz	r0, 800ab6c <_printf_float+0xd0>
 800ab18:	2200      	movs	r2, #0
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	4640      	mov	r0, r8
 800ab1e:	4649      	mov	r1, r9
 800ab20:	f7f5 fffc 	bl	8000b1c <__aeabi_dcmplt>
 800ab24:	b110      	cbz	r0, 800ab2c <_printf_float+0x90>
 800ab26:	232d      	movs	r3, #45	; 0x2d
 800ab28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab2c:	4b93      	ldr	r3, [pc, #588]	; (800ad7c <_printf_float+0x2e0>)
 800ab2e:	4894      	ldr	r0, [pc, #592]	; (800ad80 <_printf_float+0x2e4>)
 800ab30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ab34:	bf94      	ite	ls
 800ab36:	4698      	movls	r8, r3
 800ab38:	4680      	movhi	r8, r0
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	6123      	str	r3, [r4, #16]
 800ab3e:	9b05      	ldr	r3, [sp, #20]
 800ab40:	f023 0204 	bic.w	r2, r3, #4
 800ab44:	6022      	str	r2, [r4, #0]
 800ab46:	f04f 0900 	mov.w	r9, #0
 800ab4a:	9700      	str	r7, [sp, #0]
 800ab4c:	4633      	mov	r3, r6
 800ab4e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ab50:	4621      	mov	r1, r4
 800ab52:	4628      	mov	r0, r5
 800ab54:	f000 f9d8 	bl	800af08 <_printf_common>
 800ab58:	3001      	adds	r0, #1
 800ab5a:	f040 8090 	bne.w	800ac7e <_printf_float+0x1e2>
 800ab5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab62:	b00d      	add	sp, #52	; 0x34
 800ab64:	ecbd 8b02 	vpop	{d8}
 800ab68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab6c:	4642      	mov	r2, r8
 800ab6e:	464b      	mov	r3, r9
 800ab70:	4640      	mov	r0, r8
 800ab72:	4649      	mov	r1, r9
 800ab74:	f7f5 fffa 	bl	8000b6c <__aeabi_dcmpun>
 800ab78:	b140      	cbz	r0, 800ab8c <_printf_float+0xf0>
 800ab7a:	464b      	mov	r3, r9
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	bfbc      	itt	lt
 800ab80:	232d      	movlt	r3, #45	; 0x2d
 800ab82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ab86:	487f      	ldr	r0, [pc, #508]	; (800ad84 <_printf_float+0x2e8>)
 800ab88:	4b7f      	ldr	r3, [pc, #508]	; (800ad88 <_printf_float+0x2ec>)
 800ab8a:	e7d1      	b.n	800ab30 <_printf_float+0x94>
 800ab8c:	6863      	ldr	r3, [r4, #4]
 800ab8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ab92:	9206      	str	r2, [sp, #24]
 800ab94:	1c5a      	adds	r2, r3, #1
 800ab96:	d13f      	bne.n	800ac18 <_printf_float+0x17c>
 800ab98:	2306      	movs	r3, #6
 800ab9a:	6063      	str	r3, [r4, #4]
 800ab9c:	9b05      	ldr	r3, [sp, #20]
 800ab9e:	6861      	ldr	r1, [r4, #4]
 800aba0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aba4:	2300      	movs	r3, #0
 800aba6:	9303      	str	r3, [sp, #12]
 800aba8:	ab0a      	add	r3, sp, #40	; 0x28
 800abaa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800abae:	ab09      	add	r3, sp, #36	; 0x24
 800abb0:	ec49 8b10 	vmov	d0, r8, r9
 800abb4:	9300      	str	r3, [sp, #0]
 800abb6:	6022      	str	r2, [r4, #0]
 800abb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800abbc:	4628      	mov	r0, r5
 800abbe:	f7ff fecd 	bl	800a95c <__cvt>
 800abc2:	9b06      	ldr	r3, [sp, #24]
 800abc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abc6:	2b47      	cmp	r3, #71	; 0x47
 800abc8:	4680      	mov	r8, r0
 800abca:	d108      	bne.n	800abde <_printf_float+0x142>
 800abcc:	1cc8      	adds	r0, r1, #3
 800abce:	db02      	blt.n	800abd6 <_printf_float+0x13a>
 800abd0:	6863      	ldr	r3, [r4, #4]
 800abd2:	4299      	cmp	r1, r3
 800abd4:	dd41      	ble.n	800ac5a <_printf_float+0x1be>
 800abd6:	f1ab 0b02 	sub.w	fp, fp, #2
 800abda:	fa5f fb8b 	uxtb.w	fp, fp
 800abde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800abe2:	d820      	bhi.n	800ac26 <_printf_float+0x18a>
 800abe4:	3901      	subs	r1, #1
 800abe6:	465a      	mov	r2, fp
 800abe8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800abec:	9109      	str	r1, [sp, #36]	; 0x24
 800abee:	f7ff ff17 	bl	800aa20 <__exponent>
 800abf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abf4:	1813      	adds	r3, r2, r0
 800abf6:	2a01      	cmp	r2, #1
 800abf8:	4681      	mov	r9, r0
 800abfa:	6123      	str	r3, [r4, #16]
 800abfc:	dc02      	bgt.n	800ac04 <_printf_float+0x168>
 800abfe:	6822      	ldr	r2, [r4, #0]
 800ac00:	07d2      	lsls	r2, r2, #31
 800ac02:	d501      	bpl.n	800ac08 <_printf_float+0x16c>
 800ac04:	3301      	adds	r3, #1
 800ac06:	6123      	str	r3, [r4, #16]
 800ac08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d09c      	beq.n	800ab4a <_printf_float+0xae>
 800ac10:	232d      	movs	r3, #45	; 0x2d
 800ac12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac16:	e798      	b.n	800ab4a <_printf_float+0xae>
 800ac18:	9a06      	ldr	r2, [sp, #24]
 800ac1a:	2a47      	cmp	r2, #71	; 0x47
 800ac1c:	d1be      	bne.n	800ab9c <_printf_float+0x100>
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1bc      	bne.n	800ab9c <_printf_float+0x100>
 800ac22:	2301      	movs	r3, #1
 800ac24:	e7b9      	b.n	800ab9a <_printf_float+0xfe>
 800ac26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ac2a:	d118      	bne.n	800ac5e <_printf_float+0x1c2>
 800ac2c:	2900      	cmp	r1, #0
 800ac2e:	6863      	ldr	r3, [r4, #4]
 800ac30:	dd0b      	ble.n	800ac4a <_printf_float+0x1ae>
 800ac32:	6121      	str	r1, [r4, #16]
 800ac34:	b913      	cbnz	r3, 800ac3c <_printf_float+0x1a0>
 800ac36:	6822      	ldr	r2, [r4, #0]
 800ac38:	07d0      	lsls	r0, r2, #31
 800ac3a:	d502      	bpl.n	800ac42 <_printf_float+0x1a6>
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	440b      	add	r3, r1
 800ac40:	6123      	str	r3, [r4, #16]
 800ac42:	65a1      	str	r1, [r4, #88]	; 0x58
 800ac44:	f04f 0900 	mov.w	r9, #0
 800ac48:	e7de      	b.n	800ac08 <_printf_float+0x16c>
 800ac4a:	b913      	cbnz	r3, 800ac52 <_printf_float+0x1b6>
 800ac4c:	6822      	ldr	r2, [r4, #0]
 800ac4e:	07d2      	lsls	r2, r2, #31
 800ac50:	d501      	bpl.n	800ac56 <_printf_float+0x1ba>
 800ac52:	3302      	adds	r3, #2
 800ac54:	e7f4      	b.n	800ac40 <_printf_float+0x1a4>
 800ac56:	2301      	movs	r3, #1
 800ac58:	e7f2      	b.n	800ac40 <_printf_float+0x1a4>
 800ac5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ac5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac60:	4299      	cmp	r1, r3
 800ac62:	db05      	blt.n	800ac70 <_printf_float+0x1d4>
 800ac64:	6823      	ldr	r3, [r4, #0]
 800ac66:	6121      	str	r1, [r4, #16]
 800ac68:	07d8      	lsls	r0, r3, #31
 800ac6a:	d5ea      	bpl.n	800ac42 <_printf_float+0x1a6>
 800ac6c:	1c4b      	adds	r3, r1, #1
 800ac6e:	e7e7      	b.n	800ac40 <_printf_float+0x1a4>
 800ac70:	2900      	cmp	r1, #0
 800ac72:	bfd4      	ite	le
 800ac74:	f1c1 0202 	rsble	r2, r1, #2
 800ac78:	2201      	movgt	r2, #1
 800ac7a:	4413      	add	r3, r2
 800ac7c:	e7e0      	b.n	800ac40 <_printf_float+0x1a4>
 800ac7e:	6823      	ldr	r3, [r4, #0]
 800ac80:	055a      	lsls	r2, r3, #21
 800ac82:	d407      	bmi.n	800ac94 <_printf_float+0x1f8>
 800ac84:	6923      	ldr	r3, [r4, #16]
 800ac86:	4642      	mov	r2, r8
 800ac88:	4631      	mov	r1, r6
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	47b8      	blx	r7
 800ac8e:	3001      	adds	r0, #1
 800ac90:	d12c      	bne.n	800acec <_printf_float+0x250>
 800ac92:	e764      	b.n	800ab5e <_printf_float+0xc2>
 800ac94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ac98:	f240 80e0 	bls.w	800ae5c <_printf_float+0x3c0>
 800ac9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aca0:	2200      	movs	r2, #0
 800aca2:	2300      	movs	r3, #0
 800aca4:	f7f5 ff30 	bl	8000b08 <__aeabi_dcmpeq>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d034      	beq.n	800ad16 <_printf_float+0x27a>
 800acac:	4a37      	ldr	r2, [pc, #220]	; (800ad8c <_printf_float+0x2f0>)
 800acae:	2301      	movs	r3, #1
 800acb0:	4631      	mov	r1, r6
 800acb2:	4628      	mov	r0, r5
 800acb4:	47b8      	blx	r7
 800acb6:	3001      	adds	r0, #1
 800acb8:	f43f af51 	beq.w	800ab5e <_printf_float+0xc2>
 800acbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acc0:	429a      	cmp	r2, r3
 800acc2:	db02      	blt.n	800acca <_printf_float+0x22e>
 800acc4:	6823      	ldr	r3, [r4, #0]
 800acc6:	07d8      	lsls	r0, r3, #31
 800acc8:	d510      	bpl.n	800acec <_printf_float+0x250>
 800acca:	ee18 3a10 	vmov	r3, s16
 800acce:	4652      	mov	r2, sl
 800acd0:	4631      	mov	r1, r6
 800acd2:	4628      	mov	r0, r5
 800acd4:	47b8      	blx	r7
 800acd6:	3001      	adds	r0, #1
 800acd8:	f43f af41 	beq.w	800ab5e <_printf_float+0xc2>
 800acdc:	f04f 0800 	mov.w	r8, #0
 800ace0:	f104 091a 	add.w	r9, r4, #26
 800ace4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ace6:	3b01      	subs	r3, #1
 800ace8:	4543      	cmp	r3, r8
 800acea:	dc09      	bgt.n	800ad00 <_printf_float+0x264>
 800acec:	6823      	ldr	r3, [r4, #0]
 800acee:	079b      	lsls	r3, r3, #30
 800acf0:	f100 8105 	bmi.w	800aefe <_printf_float+0x462>
 800acf4:	68e0      	ldr	r0, [r4, #12]
 800acf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acf8:	4298      	cmp	r0, r3
 800acfa:	bfb8      	it	lt
 800acfc:	4618      	movlt	r0, r3
 800acfe:	e730      	b.n	800ab62 <_printf_float+0xc6>
 800ad00:	2301      	movs	r3, #1
 800ad02:	464a      	mov	r2, r9
 800ad04:	4631      	mov	r1, r6
 800ad06:	4628      	mov	r0, r5
 800ad08:	47b8      	blx	r7
 800ad0a:	3001      	adds	r0, #1
 800ad0c:	f43f af27 	beq.w	800ab5e <_printf_float+0xc2>
 800ad10:	f108 0801 	add.w	r8, r8, #1
 800ad14:	e7e6      	b.n	800ace4 <_printf_float+0x248>
 800ad16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	dc39      	bgt.n	800ad90 <_printf_float+0x2f4>
 800ad1c:	4a1b      	ldr	r2, [pc, #108]	; (800ad8c <_printf_float+0x2f0>)
 800ad1e:	2301      	movs	r3, #1
 800ad20:	4631      	mov	r1, r6
 800ad22:	4628      	mov	r0, r5
 800ad24:	47b8      	blx	r7
 800ad26:	3001      	adds	r0, #1
 800ad28:	f43f af19 	beq.w	800ab5e <_printf_float+0xc2>
 800ad2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad30:	4313      	orrs	r3, r2
 800ad32:	d102      	bne.n	800ad3a <_printf_float+0x29e>
 800ad34:	6823      	ldr	r3, [r4, #0]
 800ad36:	07d9      	lsls	r1, r3, #31
 800ad38:	d5d8      	bpl.n	800acec <_printf_float+0x250>
 800ad3a:	ee18 3a10 	vmov	r3, s16
 800ad3e:	4652      	mov	r2, sl
 800ad40:	4631      	mov	r1, r6
 800ad42:	4628      	mov	r0, r5
 800ad44:	47b8      	blx	r7
 800ad46:	3001      	adds	r0, #1
 800ad48:	f43f af09 	beq.w	800ab5e <_printf_float+0xc2>
 800ad4c:	f04f 0900 	mov.w	r9, #0
 800ad50:	f104 0a1a 	add.w	sl, r4, #26
 800ad54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad56:	425b      	negs	r3, r3
 800ad58:	454b      	cmp	r3, r9
 800ad5a:	dc01      	bgt.n	800ad60 <_printf_float+0x2c4>
 800ad5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad5e:	e792      	b.n	800ac86 <_printf_float+0x1ea>
 800ad60:	2301      	movs	r3, #1
 800ad62:	4652      	mov	r2, sl
 800ad64:	4631      	mov	r1, r6
 800ad66:	4628      	mov	r0, r5
 800ad68:	47b8      	blx	r7
 800ad6a:	3001      	adds	r0, #1
 800ad6c:	f43f aef7 	beq.w	800ab5e <_printf_float+0xc2>
 800ad70:	f109 0901 	add.w	r9, r9, #1
 800ad74:	e7ee      	b.n	800ad54 <_printf_float+0x2b8>
 800ad76:	bf00      	nop
 800ad78:	7fefffff 	.word	0x7fefffff
 800ad7c:	0800dbb0 	.word	0x0800dbb0
 800ad80:	0800dbb4 	.word	0x0800dbb4
 800ad84:	0800dbbc 	.word	0x0800dbbc
 800ad88:	0800dbb8 	.word	0x0800dbb8
 800ad8c:	0800dbc0 	.word	0x0800dbc0
 800ad90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad94:	429a      	cmp	r2, r3
 800ad96:	bfa8      	it	ge
 800ad98:	461a      	movge	r2, r3
 800ad9a:	2a00      	cmp	r2, #0
 800ad9c:	4691      	mov	r9, r2
 800ad9e:	dc37      	bgt.n	800ae10 <_printf_float+0x374>
 800ada0:	f04f 0b00 	mov.w	fp, #0
 800ada4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ada8:	f104 021a 	add.w	r2, r4, #26
 800adac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800adae:	9305      	str	r3, [sp, #20]
 800adb0:	eba3 0309 	sub.w	r3, r3, r9
 800adb4:	455b      	cmp	r3, fp
 800adb6:	dc33      	bgt.n	800ae20 <_printf_float+0x384>
 800adb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adbc:	429a      	cmp	r2, r3
 800adbe:	db3b      	blt.n	800ae38 <_printf_float+0x39c>
 800adc0:	6823      	ldr	r3, [r4, #0]
 800adc2:	07da      	lsls	r2, r3, #31
 800adc4:	d438      	bmi.n	800ae38 <_printf_float+0x39c>
 800adc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adc8:	9b05      	ldr	r3, [sp, #20]
 800adca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800adcc:	1ad3      	subs	r3, r2, r3
 800adce:	eba2 0901 	sub.w	r9, r2, r1
 800add2:	4599      	cmp	r9, r3
 800add4:	bfa8      	it	ge
 800add6:	4699      	movge	r9, r3
 800add8:	f1b9 0f00 	cmp.w	r9, #0
 800addc:	dc35      	bgt.n	800ae4a <_printf_float+0x3ae>
 800adde:	f04f 0800 	mov.w	r8, #0
 800ade2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ade6:	f104 0a1a 	add.w	sl, r4, #26
 800adea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adee:	1a9b      	subs	r3, r3, r2
 800adf0:	eba3 0309 	sub.w	r3, r3, r9
 800adf4:	4543      	cmp	r3, r8
 800adf6:	f77f af79 	ble.w	800acec <_printf_float+0x250>
 800adfa:	2301      	movs	r3, #1
 800adfc:	4652      	mov	r2, sl
 800adfe:	4631      	mov	r1, r6
 800ae00:	4628      	mov	r0, r5
 800ae02:	47b8      	blx	r7
 800ae04:	3001      	adds	r0, #1
 800ae06:	f43f aeaa 	beq.w	800ab5e <_printf_float+0xc2>
 800ae0a:	f108 0801 	add.w	r8, r8, #1
 800ae0e:	e7ec      	b.n	800adea <_printf_float+0x34e>
 800ae10:	4613      	mov	r3, r2
 800ae12:	4631      	mov	r1, r6
 800ae14:	4642      	mov	r2, r8
 800ae16:	4628      	mov	r0, r5
 800ae18:	47b8      	blx	r7
 800ae1a:	3001      	adds	r0, #1
 800ae1c:	d1c0      	bne.n	800ada0 <_printf_float+0x304>
 800ae1e:	e69e      	b.n	800ab5e <_printf_float+0xc2>
 800ae20:	2301      	movs	r3, #1
 800ae22:	4631      	mov	r1, r6
 800ae24:	4628      	mov	r0, r5
 800ae26:	9205      	str	r2, [sp, #20]
 800ae28:	47b8      	blx	r7
 800ae2a:	3001      	adds	r0, #1
 800ae2c:	f43f ae97 	beq.w	800ab5e <_printf_float+0xc2>
 800ae30:	9a05      	ldr	r2, [sp, #20]
 800ae32:	f10b 0b01 	add.w	fp, fp, #1
 800ae36:	e7b9      	b.n	800adac <_printf_float+0x310>
 800ae38:	ee18 3a10 	vmov	r3, s16
 800ae3c:	4652      	mov	r2, sl
 800ae3e:	4631      	mov	r1, r6
 800ae40:	4628      	mov	r0, r5
 800ae42:	47b8      	blx	r7
 800ae44:	3001      	adds	r0, #1
 800ae46:	d1be      	bne.n	800adc6 <_printf_float+0x32a>
 800ae48:	e689      	b.n	800ab5e <_printf_float+0xc2>
 800ae4a:	9a05      	ldr	r2, [sp, #20]
 800ae4c:	464b      	mov	r3, r9
 800ae4e:	4442      	add	r2, r8
 800ae50:	4631      	mov	r1, r6
 800ae52:	4628      	mov	r0, r5
 800ae54:	47b8      	blx	r7
 800ae56:	3001      	adds	r0, #1
 800ae58:	d1c1      	bne.n	800adde <_printf_float+0x342>
 800ae5a:	e680      	b.n	800ab5e <_printf_float+0xc2>
 800ae5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae5e:	2a01      	cmp	r2, #1
 800ae60:	dc01      	bgt.n	800ae66 <_printf_float+0x3ca>
 800ae62:	07db      	lsls	r3, r3, #31
 800ae64:	d538      	bpl.n	800aed8 <_printf_float+0x43c>
 800ae66:	2301      	movs	r3, #1
 800ae68:	4642      	mov	r2, r8
 800ae6a:	4631      	mov	r1, r6
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	47b8      	blx	r7
 800ae70:	3001      	adds	r0, #1
 800ae72:	f43f ae74 	beq.w	800ab5e <_printf_float+0xc2>
 800ae76:	ee18 3a10 	vmov	r3, s16
 800ae7a:	4652      	mov	r2, sl
 800ae7c:	4631      	mov	r1, r6
 800ae7e:	4628      	mov	r0, r5
 800ae80:	47b8      	blx	r7
 800ae82:	3001      	adds	r0, #1
 800ae84:	f43f ae6b 	beq.w	800ab5e <_printf_float+0xc2>
 800ae88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	2300      	movs	r3, #0
 800ae90:	f7f5 fe3a 	bl	8000b08 <__aeabi_dcmpeq>
 800ae94:	b9d8      	cbnz	r0, 800aece <_printf_float+0x432>
 800ae96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae98:	f108 0201 	add.w	r2, r8, #1
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	4631      	mov	r1, r6
 800aea0:	4628      	mov	r0, r5
 800aea2:	47b8      	blx	r7
 800aea4:	3001      	adds	r0, #1
 800aea6:	d10e      	bne.n	800aec6 <_printf_float+0x42a>
 800aea8:	e659      	b.n	800ab5e <_printf_float+0xc2>
 800aeaa:	2301      	movs	r3, #1
 800aeac:	4652      	mov	r2, sl
 800aeae:	4631      	mov	r1, r6
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	47b8      	blx	r7
 800aeb4:	3001      	adds	r0, #1
 800aeb6:	f43f ae52 	beq.w	800ab5e <_printf_float+0xc2>
 800aeba:	f108 0801 	add.w	r8, r8, #1
 800aebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aec0:	3b01      	subs	r3, #1
 800aec2:	4543      	cmp	r3, r8
 800aec4:	dcf1      	bgt.n	800aeaa <_printf_float+0x40e>
 800aec6:	464b      	mov	r3, r9
 800aec8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aecc:	e6dc      	b.n	800ac88 <_printf_float+0x1ec>
 800aece:	f04f 0800 	mov.w	r8, #0
 800aed2:	f104 0a1a 	add.w	sl, r4, #26
 800aed6:	e7f2      	b.n	800aebe <_printf_float+0x422>
 800aed8:	2301      	movs	r3, #1
 800aeda:	4642      	mov	r2, r8
 800aedc:	e7df      	b.n	800ae9e <_printf_float+0x402>
 800aede:	2301      	movs	r3, #1
 800aee0:	464a      	mov	r2, r9
 800aee2:	4631      	mov	r1, r6
 800aee4:	4628      	mov	r0, r5
 800aee6:	47b8      	blx	r7
 800aee8:	3001      	adds	r0, #1
 800aeea:	f43f ae38 	beq.w	800ab5e <_printf_float+0xc2>
 800aeee:	f108 0801 	add.w	r8, r8, #1
 800aef2:	68e3      	ldr	r3, [r4, #12]
 800aef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aef6:	1a5b      	subs	r3, r3, r1
 800aef8:	4543      	cmp	r3, r8
 800aefa:	dcf0      	bgt.n	800aede <_printf_float+0x442>
 800aefc:	e6fa      	b.n	800acf4 <_printf_float+0x258>
 800aefe:	f04f 0800 	mov.w	r8, #0
 800af02:	f104 0919 	add.w	r9, r4, #25
 800af06:	e7f4      	b.n	800aef2 <_printf_float+0x456>

0800af08 <_printf_common>:
 800af08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af0c:	4616      	mov	r6, r2
 800af0e:	4699      	mov	r9, r3
 800af10:	688a      	ldr	r2, [r1, #8]
 800af12:	690b      	ldr	r3, [r1, #16]
 800af14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af18:	4293      	cmp	r3, r2
 800af1a:	bfb8      	it	lt
 800af1c:	4613      	movlt	r3, r2
 800af1e:	6033      	str	r3, [r6, #0]
 800af20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af24:	4607      	mov	r7, r0
 800af26:	460c      	mov	r4, r1
 800af28:	b10a      	cbz	r2, 800af2e <_printf_common+0x26>
 800af2a:	3301      	adds	r3, #1
 800af2c:	6033      	str	r3, [r6, #0]
 800af2e:	6823      	ldr	r3, [r4, #0]
 800af30:	0699      	lsls	r1, r3, #26
 800af32:	bf42      	ittt	mi
 800af34:	6833      	ldrmi	r3, [r6, #0]
 800af36:	3302      	addmi	r3, #2
 800af38:	6033      	strmi	r3, [r6, #0]
 800af3a:	6825      	ldr	r5, [r4, #0]
 800af3c:	f015 0506 	ands.w	r5, r5, #6
 800af40:	d106      	bne.n	800af50 <_printf_common+0x48>
 800af42:	f104 0a19 	add.w	sl, r4, #25
 800af46:	68e3      	ldr	r3, [r4, #12]
 800af48:	6832      	ldr	r2, [r6, #0]
 800af4a:	1a9b      	subs	r3, r3, r2
 800af4c:	42ab      	cmp	r3, r5
 800af4e:	dc26      	bgt.n	800af9e <_printf_common+0x96>
 800af50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af54:	1e13      	subs	r3, r2, #0
 800af56:	6822      	ldr	r2, [r4, #0]
 800af58:	bf18      	it	ne
 800af5a:	2301      	movne	r3, #1
 800af5c:	0692      	lsls	r2, r2, #26
 800af5e:	d42b      	bmi.n	800afb8 <_printf_common+0xb0>
 800af60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af64:	4649      	mov	r1, r9
 800af66:	4638      	mov	r0, r7
 800af68:	47c0      	blx	r8
 800af6a:	3001      	adds	r0, #1
 800af6c:	d01e      	beq.n	800afac <_printf_common+0xa4>
 800af6e:	6823      	ldr	r3, [r4, #0]
 800af70:	68e5      	ldr	r5, [r4, #12]
 800af72:	6832      	ldr	r2, [r6, #0]
 800af74:	f003 0306 	and.w	r3, r3, #6
 800af78:	2b04      	cmp	r3, #4
 800af7a:	bf08      	it	eq
 800af7c:	1aad      	subeq	r5, r5, r2
 800af7e:	68a3      	ldr	r3, [r4, #8]
 800af80:	6922      	ldr	r2, [r4, #16]
 800af82:	bf0c      	ite	eq
 800af84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af88:	2500      	movne	r5, #0
 800af8a:	4293      	cmp	r3, r2
 800af8c:	bfc4      	itt	gt
 800af8e:	1a9b      	subgt	r3, r3, r2
 800af90:	18ed      	addgt	r5, r5, r3
 800af92:	2600      	movs	r6, #0
 800af94:	341a      	adds	r4, #26
 800af96:	42b5      	cmp	r5, r6
 800af98:	d11a      	bne.n	800afd0 <_printf_common+0xc8>
 800af9a:	2000      	movs	r0, #0
 800af9c:	e008      	b.n	800afb0 <_printf_common+0xa8>
 800af9e:	2301      	movs	r3, #1
 800afa0:	4652      	mov	r2, sl
 800afa2:	4649      	mov	r1, r9
 800afa4:	4638      	mov	r0, r7
 800afa6:	47c0      	blx	r8
 800afa8:	3001      	adds	r0, #1
 800afaa:	d103      	bne.n	800afb4 <_printf_common+0xac>
 800afac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afb4:	3501      	adds	r5, #1
 800afb6:	e7c6      	b.n	800af46 <_printf_common+0x3e>
 800afb8:	18e1      	adds	r1, r4, r3
 800afba:	1c5a      	adds	r2, r3, #1
 800afbc:	2030      	movs	r0, #48	; 0x30
 800afbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800afc2:	4422      	add	r2, r4
 800afc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800afc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afcc:	3302      	adds	r3, #2
 800afce:	e7c7      	b.n	800af60 <_printf_common+0x58>
 800afd0:	2301      	movs	r3, #1
 800afd2:	4622      	mov	r2, r4
 800afd4:	4649      	mov	r1, r9
 800afd6:	4638      	mov	r0, r7
 800afd8:	47c0      	blx	r8
 800afda:	3001      	adds	r0, #1
 800afdc:	d0e6      	beq.n	800afac <_printf_common+0xa4>
 800afde:	3601      	adds	r6, #1
 800afe0:	e7d9      	b.n	800af96 <_printf_common+0x8e>
	...

0800afe4 <_printf_i>:
 800afe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afe8:	460c      	mov	r4, r1
 800afea:	4691      	mov	r9, r2
 800afec:	7e27      	ldrb	r7, [r4, #24]
 800afee:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aff0:	2f78      	cmp	r7, #120	; 0x78
 800aff2:	4680      	mov	r8, r0
 800aff4:	469a      	mov	sl, r3
 800aff6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800affa:	d807      	bhi.n	800b00c <_printf_i+0x28>
 800affc:	2f62      	cmp	r7, #98	; 0x62
 800affe:	d80a      	bhi.n	800b016 <_printf_i+0x32>
 800b000:	2f00      	cmp	r7, #0
 800b002:	f000 80d8 	beq.w	800b1b6 <_printf_i+0x1d2>
 800b006:	2f58      	cmp	r7, #88	; 0x58
 800b008:	f000 80a3 	beq.w	800b152 <_printf_i+0x16e>
 800b00c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b010:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b014:	e03a      	b.n	800b08c <_printf_i+0xa8>
 800b016:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b01a:	2b15      	cmp	r3, #21
 800b01c:	d8f6      	bhi.n	800b00c <_printf_i+0x28>
 800b01e:	a001      	add	r0, pc, #4	; (adr r0, 800b024 <_printf_i+0x40>)
 800b020:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b024:	0800b07d 	.word	0x0800b07d
 800b028:	0800b091 	.word	0x0800b091
 800b02c:	0800b00d 	.word	0x0800b00d
 800b030:	0800b00d 	.word	0x0800b00d
 800b034:	0800b00d 	.word	0x0800b00d
 800b038:	0800b00d 	.word	0x0800b00d
 800b03c:	0800b091 	.word	0x0800b091
 800b040:	0800b00d 	.word	0x0800b00d
 800b044:	0800b00d 	.word	0x0800b00d
 800b048:	0800b00d 	.word	0x0800b00d
 800b04c:	0800b00d 	.word	0x0800b00d
 800b050:	0800b19d 	.word	0x0800b19d
 800b054:	0800b0c1 	.word	0x0800b0c1
 800b058:	0800b17f 	.word	0x0800b17f
 800b05c:	0800b00d 	.word	0x0800b00d
 800b060:	0800b00d 	.word	0x0800b00d
 800b064:	0800b1bf 	.word	0x0800b1bf
 800b068:	0800b00d 	.word	0x0800b00d
 800b06c:	0800b0c1 	.word	0x0800b0c1
 800b070:	0800b00d 	.word	0x0800b00d
 800b074:	0800b00d 	.word	0x0800b00d
 800b078:	0800b187 	.word	0x0800b187
 800b07c:	680b      	ldr	r3, [r1, #0]
 800b07e:	1d1a      	adds	r2, r3, #4
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	600a      	str	r2, [r1, #0]
 800b084:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b08c:	2301      	movs	r3, #1
 800b08e:	e0a3      	b.n	800b1d8 <_printf_i+0x1f4>
 800b090:	6825      	ldr	r5, [r4, #0]
 800b092:	6808      	ldr	r0, [r1, #0]
 800b094:	062e      	lsls	r6, r5, #24
 800b096:	f100 0304 	add.w	r3, r0, #4
 800b09a:	d50a      	bpl.n	800b0b2 <_printf_i+0xce>
 800b09c:	6805      	ldr	r5, [r0, #0]
 800b09e:	600b      	str	r3, [r1, #0]
 800b0a0:	2d00      	cmp	r5, #0
 800b0a2:	da03      	bge.n	800b0ac <_printf_i+0xc8>
 800b0a4:	232d      	movs	r3, #45	; 0x2d
 800b0a6:	426d      	negs	r5, r5
 800b0a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0ac:	485e      	ldr	r0, [pc, #376]	; (800b228 <_printf_i+0x244>)
 800b0ae:	230a      	movs	r3, #10
 800b0b0:	e019      	b.n	800b0e6 <_printf_i+0x102>
 800b0b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b0b6:	6805      	ldr	r5, [r0, #0]
 800b0b8:	600b      	str	r3, [r1, #0]
 800b0ba:	bf18      	it	ne
 800b0bc:	b22d      	sxthne	r5, r5
 800b0be:	e7ef      	b.n	800b0a0 <_printf_i+0xbc>
 800b0c0:	680b      	ldr	r3, [r1, #0]
 800b0c2:	6825      	ldr	r5, [r4, #0]
 800b0c4:	1d18      	adds	r0, r3, #4
 800b0c6:	6008      	str	r0, [r1, #0]
 800b0c8:	0628      	lsls	r0, r5, #24
 800b0ca:	d501      	bpl.n	800b0d0 <_printf_i+0xec>
 800b0cc:	681d      	ldr	r5, [r3, #0]
 800b0ce:	e002      	b.n	800b0d6 <_printf_i+0xf2>
 800b0d0:	0669      	lsls	r1, r5, #25
 800b0d2:	d5fb      	bpl.n	800b0cc <_printf_i+0xe8>
 800b0d4:	881d      	ldrh	r5, [r3, #0]
 800b0d6:	4854      	ldr	r0, [pc, #336]	; (800b228 <_printf_i+0x244>)
 800b0d8:	2f6f      	cmp	r7, #111	; 0x6f
 800b0da:	bf0c      	ite	eq
 800b0dc:	2308      	moveq	r3, #8
 800b0de:	230a      	movne	r3, #10
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0e6:	6866      	ldr	r6, [r4, #4]
 800b0e8:	60a6      	str	r6, [r4, #8]
 800b0ea:	2e00      	cmp	r6, #0
 800b0ec:	bfa2      	ittt	ge
 800b0ee:	6821      	ldrge	r1, [r4, #0]
 800b0f0:	f021 0104 	bicge.w	r1, r1, #4
 800b0f4:	6021      	strge	r1, [r4, #0]
 800b0f6:	b90d      	cbnz	r5, 800b0fc <_printf_i+0x118>
 800b0f8:	2e00      	cmp	r6, #0
 800b0fa:	d04d      	beq.n	800b198 <_printf_i+0x1b4>
 800b0fc:	4616      	mov	r6, r2
 800b0fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800b102:	fb03 5711 	mls	r7, r3, r1, r5
 800b106:	5dc7      	ldrb	r7, [r0, r7]
 800b108:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b10c:	462f      	mov	r7, r5
 800b10e:	42bb      	cmp	r3, r7
 800b110:	460d      	mov	r5, r1
 800b112:	d9f4      	bls.n	800b0fe <_printf_i+0x11a>
 800b114:	2b08      	cmp	r3, #8
 800b116:	d10b      	bne.n	800b130 <_printf_i+0x14c>
 800b118:	6823      	ldr	r3, [r4, #0]
 800b11a:	07df      	lsls	r7, r3, #31
 800b11c:	d508      	bpl.n	800b130 <_printf_i+0x14c>
 800b11e:	6923      	ldr	r3, [r4, #16]
 800b120:	6861      	ldr	r1, [r4, #4]
 800b122:	4299      	cmp	r1, r3
 800b124:	bfde      	ittt	le
 800b126:	2330      	movle	r3, #48	; 0x30
 800b128:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b12c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800b130:	1b92      	subs	r2, r2, r6
 800b132:	6122      	str	r2, [r4, #16]
 800b134:	f8cd a000 	str.w	sl, [sp]
 800b138:	464b      	mov	r3, r9
 800b13a:	aa03      	add	r2, sp, #12
 800b13c:	4621      	mov	r1, r4
 800b13e:	4640      	mov	r0, r8
 800b140:	f7ff fee2 	bl	800af08 <_printf_common>
 800b144:	3001      	adds	r0, #1
 800b146:	d14c      	bne.n	800b1e2 <_printf_i+0x1fe>
 800b148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b14c:	b004      	add	sp, #16
 800b14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b152:	4835      	ldr	r0, [pc, #212]	; (800b228 <_printf_i+0x244>)
 800b154:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b158:	6823      	ldr	r3, [r4, #0]
 800b15a:	680e      	ldr	r6, [r1, #0]
 800b15c:	061f      	lsls	r7, r3, #24
 800b15e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b162:	600e      	str	r6, [r1, #0]
 800b164:	d514      	bpl.n	800b190 <_printf_i+0x1ac>
 800b166:	07d9      	lsls	r1, r3, #31
 800b168:	bf44      	itt	mi
 800b16a:	f043 0320 	orrmi.w	r3, r3, #32
 800b16e:	6023      	strmi	r3, [r4, #0]
 800b170:	b91d      	cbnz	r5, 800b17a <_printf_i+0x196>
 800b172:	6823      	ldr	r3, [r4, #0]
 800b174:	f023 0320 	bic.w	r3, r3, #32
 800b178:	6023      	str	r3, [r4, #0]
 800b17a:	2310      	movs	r3, #16
 800b17c:	e7b0      	b.n	800b0e0 <_printf_i+0xfc>
 800b17e:	6823      	ldr	r3, [r4, #0]
 800b180:	f043 0320 	orr.w	r3, r3, #32
 800b184:	6023      	str	r3, [r4, #0]
 800b186:	2378      	movs	r3, #120	; 0x78
 800b188:	4828      	ldr	r0, [pc, #160]	; (800b22c <_printf_i+0x248>)
 800b18a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b18e:	e7e3      	b.n	800b158 <_printf_i+0x174>
 800b190:	065e      	lsls	r6, r3, #25
 800b192:	bf48      	it	mi
 800b194:	b2ad      	uxthmi	r5, r5
 800b196:	e7e6      	b.n	800b166 <_printf_i+0x182>
 800b198:	4616      	mov	r6, r2
 800b19a:	e7bb      	b.n	800b114 <_printf_i+0x130>
 800b19c:	680b      	ldr	r3, [r1, #0]
 800b19e:	6826      	ldr	r6, [r4, #0]
 800b1a0:	6960      	ldr	r0, [r4, #20]
 800b1a2:	1d1d      	adds	r5, r3, #4
 800b1a4:	600d      	str	r5, [r1, #0]
 800b1a6:	0635      	lsls	r5, r6, #24
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	d501      	bpl.n	800b1b0 <_printf_i+0x1cc>
 800b1ac:	6018      	str	r0, [r3, #0]
 800b1ae:	e002      	b.n	800b1b6 <_printf_i+0x1d2>
 800b1b0:	0671      	lsls	r1, r6, #25
 800b1b2:	d5fb      	bpl.n	800b1ac <_printf_i+0x1c8>
 800b1b4:	8018      	strh	r0, [r3, #0]
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	6123      	str	r3, [r4, #16]
 800b1ba:	4616      	mov	r6, r2
 800b1bc:	e7ba      	b.n	800b134 <_printf_i+0x150>
 800b1be:	680b      	ldr	r3, [r1, #0]
 800b1c0:	1d1a      	adds	r2, r3, #4
 800b1c2:	600a      	str	r2, [r1, #0]
 800b1c4:	681e      	ldr	r6, [r3, #0]
 800b1c6:	6862      	ldr	r2, [r4, #4]
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	4630      	mov	r0, r6
 800b1cc:	f7f5 f828 	bl	8000220 <memchr>
 800b1d0:	b108      	cbz	r0, 800b1d6 <_printf_i+0x1f2>
 800b1d2:	1b80      	subs	r0, r0, r6
 800b1d4:	6060      	str	r0, [r4, #4]
 800b1d6:	6863      	ldr	r3, [r4, #4]
 800b1d8:	6123      	str	r3, [r4, #16]
 800b1da:	2300      	movs	r3, #0
 800b1dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1e0:	e7a8      	b.n	800b134 <_printf_i+0x150>
 800b1e2:	6923      	ldr	r3, [r4, #16]
 800b1e4:	4632      	mov	r2, r6
 800b1e6:	4649      	mov	r1, r9
 800b1e8:	4640      	mov	r0, r8
 800b1ea:	47d0      	blx	sl
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	d0ab      	beq.n	800b148 <_printf_i+0x164>
 800b1f0:	6823      	ldr	r3, [r4, #0]
 800b1f2:	079b      	lsls	r3, r3, #30
 800b1f4:	d413      	bmi.n	800b21e <_printf_i+0x23a>
 800b1f6:	68e0      	ldr	r0, [r4, #12]
 800b1f8:	9b03      	ldr	r3, [sp, #12]
 800b1fa:	4298      	cmp	r0, r3
 800b1fc:	bfb8      	it	lt
 800b1fe:	4618      	movlt	r0, r3
 800b200:	e7a4      	b.n	800b14c <_printf_i+0x168>
 800b202:	2301      	movs	r3, #1
 800b204:	4632      	mov	r2, r6
 800b206:	4649      	mov	r1, r9
 800b208:	4640      	mov	r0, r8
 800b20a:	47d0      	blx	sl
 800b20c:	3001      	adds	r0, #1
 800b20e:	d09b      	beq.n	800b148 <_printf_i+0x164>
 800b210:	3501      	adds	r5, #1
 800b212:	68e3      	ldr	r3, [r4, #12]
 800b214:	9903      	ldr	r1, [sp, #12]
 800b216:	1a5b      	subs	r3, r3, r1
 800b218:	42ab      	cmp	r3, r5
 800b21a:	dcf2      	bgt.n	800b202 <_printf_i+0x21e>
 800b21c:	e7eb      	b.n	800b1f6 <_printf_i+0x212>
 800b21e:	2500      	movs	r5, #0
 800b220:	f104 0619 	add.w	r6, r4, #25
 800b224:	e7f5      	b.n	800b212 <_printf_i+0x22e>
 800b226:	bf00      	nop
 800b228:	0800dbc2 	.word	0x0800dbc2
 800b22c:	0800dbd3 	.word	0x0800dbd3

0800b230 <_sbrk_r>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	4d06      	ldr	r5, [pc, #24]	; (800b24c <_sbrk_r+0x1c>)
 800b234:	2300      	movs	r3, #0
 800b236:	4604      	mov	r4, r0
 800b238:	4608      	mov	r0, r1
 800b23a:	602b      	str	r3, [r5, #0]
 800b23c:	f7f6 fe32 	bl	8001ea4 <_sbrk>
 800b240:	1c43      	adds	r3, r0, #1
 800b242:	d102      	bne.n	800b24a <_sbrk_r+0x1a>
 800b244:	682b      	ldr	r3, [r5, #0]
 800b246:	b103      	cbz	r3, 800b24a <_sbrk_r+0x1a>
 800b248:	6023      	str	r3, [r4, #0]
 800b24a:	bd38      	pop	{r3, r4, r5, pc}
 800b24c:	20001708 	.word	0x20001708

0800b250 <siprintf>:
 800b250:	b40e      	push	{r1, r2, r3}
 800b252:	b500      	push	{lr}
 800b254:	b09c      	sub	sp, #112	; 0x70
 800b256:	ab1d      	add	r3, sp, #116	; 0x74
 800b258:	9002      	str	r0, [sp, #8]
 800b25a:	9006      	str	r0, [sp, #24]
 800b25c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b260:	4809      	ldr	r0, [pc, #36]	; (800b288 <siprintf+0x38>)
 800b262:	9107      	str	r1, [sp, #28]
 800b264:	9104      	str	r1, [sp, #16]
 800b266:	4909      	ldr	r1, [pc, #36]	; (800b28c <siprintf+0x3c>)
 800b268:	f853 2b04 	ldr.w	r2, [r3], #4
 800b26c:	9105      	str	r1, [sp, #20]
 800b26e:	6800      	ldr	r0, [r0, #0]
 800b270:	9301      	str	r3, [sp, #4]
 800b272:	a902      	add	r1, sp, #8
 800b274:	f001 faa2 	bl	800c7bc <_svfiprintf_r>
 800b278:	9b02      	ldr	r3, [sp, #8]
 800b27a:	2200      	movs	r2, #0
 800b27c:	701a      	strb	r2, [r3, #0]
 800b27e:	b01c      	add	sp, #112	; 0x70
 800b280:	f85d eb04 	ldr.w	lr, [sp], #4
 800b284:	b003      	add	sp, #12
 800b286:	4770      	bx	lr
 800b288:	200005e4 	.word	0x200005e4
 800b28c:	ffff0208 	.word	0xffff0208

0800b290 <quorem>:
 800b290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b294:	6903      	ldr	r3, [r0, #16]
 800b296:	690c      	ldr	r4, [r1, #16]
 800b298:	42a3      	cmp	r3, r4
 800b29a:	4607      	mov	r7, r0
 800b29c:	f2c0 8081 	blt.w	800b3a2 <quorem+0x112>
 800b2a0:	3c01      	subs	r4, #1
 800b2a2:	f101 0814 	add.w	r8, r1, #20
 800b2a6:	f100 0514 	add.w	r5, r0, #20
 800b2aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2ae:	9301      	str	r3, [sp, #4]
 800b2b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b2b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b2c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b2c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b2c8:	d331      	bcc.n	800b32e <quorem+0x9e>
 800b2ca:	f04f 0e00 	mov.w	lr, #0
 800b2ce:	4640      	mov	r0, r8
 800b2d0:	46ac      	mov	ip, r5
 800b2d2:	46f2      	mov	sl, lr
 800b2d4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b2d8:	b293      	uxth	r3, r2
 800b2da:	fb06 e303 	mla	r3, r6, r3, lr
 800b2de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	ebaa 0303 	sub.w	r3, sl, r3
 800b2e8:	0c12      	lsrs	r2, r2, #16
 800b2ea:	f8dc a000 	ldr.w	sl, [ip]
 800b2ee:	fb06 e202 	mla	r2, r6, r2, lr
 800b2f2:	fa13 f38a 	uxtah	r3, r3, sl
 800b2f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b2fa:	fa1f fa82 	uxth.w	sl, r2
 800b2fe:	f8dc 2000 	ldr.w	r2, [ip]
 800b302:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b306:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b310:	4581      	cmp	r9, r0
 800b312:	f84c 3b04 	str.w	r3, [ip], #4
 800b316:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b31a:	d2db      	bcs.n	800b2d4 <quorem+0x44>
 800b31c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b320:	b92b      	cbnz	r3, 800b32e <quorem+0x9e>
 800b322:	9b01      	ldr	r3, [sp, #4]
 800b324:	3b04      	subs	r3, #4
 800b326:	429d      	cmp	r5, r3
 800b328:	461a      	mov	r2, r3
 800b32a:	d32e      	bcc.n	800b38a <quorem+0xfa>
 800b32c:	613c      	str	r4, [r7, #16]
 800b32e:	4638      	mov	r0, r7
 800b330:	f001 f8b4 	bl	800c49c <__mcmp>
 800b334:	2800      	cmp	r0, #0
 800b336:	db24      	blt.n	800b382 <quorem+0xf2>
 800b338:	3601      	adds	r6, #1
 800b33a:	4628      	mov	r0, r5
 800b33c:	f04f 0c00 	mov.w	ip, #0
 800b340:	f858 2b04 	ldr.w	r2, [r8], #4
 800b344:	f8d0 e000 	ldr.w	lr, [r0]
 800b348:	b293      	uxth	r3, r2
 800b34a:	ebac 0303 	sub.w	r3, ip, r3
 800b34e:	0c12      	lsrs	r2, r2, #16
 800b350:	fa13 f38e 	uxtah	r3, r3, lr
 800b354:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b358:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b362:	45c1      	cmp	r9, r8
 800b364:	f840 3b04 	str.w	r3, [r0], #4
 800b368:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b36c:	d2e8      	bcs.n	800b340 <quorem+0xb0>
 800b36e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b372:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b376:	b922      	cbnz	r2, 800b382 <quorem+0xf2>
 800b378:	3b04      	subs	r3, #4
 800b37a:	429d      	cmp	r5, r3
 800b37c:	461a      	mov	r2, r3
 800b37e:	d30a      	bcc.n	800b396 <quorem+0x106>
 800b380:	613c      	str	r4, [r7, #16]
 800b382:	4630      	mov	r0, r6
 800b384:	b003      	add	sp, #12
 800b386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38a:	6812      	ldr	r2, [r2, #0]
 800b38c:	3b04      	subs	r3, #4
 800b38e:	2a00      	cmp	r2, #0
 800b390:	d1cc      	bne.n	800b32c <quorem+0x9c>
 800b392:	3c01      	subs	r4, #1
 800b394:	e7c7      	b.n	800b326 <quorem+0x96>
 800b396:	6812      	ldr	r2, [r2, #0]
 800b398:	3b04      	subs	r3, #4
 800b39a:	2a00      	cmp	r2, #0
 800b39c:	d1f0      	bne.n	800b380 <quorem+0xf0>
 800b39e:	3c01      	subs	r4, #1
 800b3a0:	e7eb      	b.n	800b37a <quorem+0xea>
 800b3a2:	2000      	movs	r0, #0
 800b3a4:	e7ee      	b.n	800b384 <quorem+0xf4>
	...

0800b3a8 <_dtoa_r>:
 800b3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ac:	ed2d 8b02 	vpush	{d8}
 800b3b0:	ec57 6b10 	vmov	r6, r7, d0
 800b3b4:	b095      	sub	sp, #84	; 0x54
 800b3b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b3b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b3bc:	9105      	str	r1, [sp, #20]
 800b3be:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	9209      	str	r2, [sp, #36]	; 0x24
 800b3c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3c8:	b975      	cbnz	r5, 800b3e8 <_dtoa_r+0x40>
 800b3ca:	2010      	movs	r0, #16
 800b3cc:	f7ff f9fe 	bl	800a7cc <malloc>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	6260      	str	r0, [r4, #36]	; 0x24
 800b3d4:	b920      	cbnz	r0, 800b3e0 <_dtoa_r+0x38>
 800b3d6:	4bb2      	ldr	r3, [pc, #712]	; (800b6a0 <_dtoa_r+0x2f8>)
 800b3d8:	21ea      	movs	r1, #234	; 0xea
 800b3da:	48b2      	ldr	r0, [pc, #712]	; (800b6a4 <_dtoa_r+0x2fc>)
 800b3dc:	f001 faee 	bl	800c9bc <__assert_func>
 800b3e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b3e4:	6005      	str	r5, [r0, #0]
 800b3e6:	60c5      	str	r5, [r0, #12]
 800b3e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3ea:	6819      	ldr	r1, [r3, #0]
 800b3ec:	b151      	cbz	r1, 800b404 <_dtoa_r+0x5c>
 800b3ee:	685a      	ldr	r2, [r3, #4]
 800b3f0:	604a      	str	r2, [r1, #4]
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	4093      	lsls	r3, r2
 800b3f6:	608b      	str	r3, [r1, #8]
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f000 fe11 	bl	800c020 <_Bfree>
 800b3fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b400:	2200      	movs	r2, #0
 800b402:	601a      	str	r2, [r3, #0]
 800b404:	1e3b      	subs	r3, r7, #0
 800b406:	bfb9      	ittee	lt
 800b408:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b40c:	9303      	strlt	r3, [sp, #12]
 800b40e:	2300      	movge	r3, #0
 800b410:	f8c8 3000 	strge.w	r3, [r8]
 800b414:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b418:	4ba3      	ldr	r3, [pc, #652]	; (800b6a8 <_dtoa_r+0x300>)
 800b41a:	bfbc      	itt	lt
 800b41c:	2201      	movlt	r2, #1
 800b41e:	f8c8 2000 	strlt.w	r2, [r8]
 800b422:	ea33 0309 	bics.w	r3, r3, r9
 800b426:	d11b      	bne.n	800b460 <_dtoa_r+0xb8>
 800b428:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b42a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b42e:	6013      	str	r3, [r2, #0]
 800b430:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b434:	4333      	orrs	r3, r6
 800b436:	f000 857a 	beq.w	800bf2e <_dtoa_r+0xb86>
 800b43a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b43c:	b963      	cbnz	r3, 800b458 <_dtoa_r+0xb0>
 800b43e:	4b9b      	ldr	r3, [pc, #620]	; (800b6ac <_dtoa_r+0x304>)
 800b440:	e024      	b.n	800b48c <_dtoa_r+0xe4>
 800b442:	4b9b      	ldr	r3, [pc, #620]	; (800b6b0 <_dtoa_r+0x308>)
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	3308      	adds	r3, #8
 800b448:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b44a:	6013      	str	r3, [r2, #0]
 800b44c:	9800      	ldr	r0, [sp, #0]
 800b44e:	b015      	add	sp, #84	; 0x54
 800b450:	ecbd 8b02 	vpop	{d8}
 800b454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b458:	4b94      	ldr	r3, [pc, #592]	; (800b6ac <_dtoa_r+0x304>)
 800b45a:	9300      	str	r3, [sp, #0]
 800b45c:	3303      	adds	r3, #3
 800b45e:	e7f3      	b.n	800b448 <_dtoa_r+0xa0>
 800b460:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b464:	2200      	movs	r2, #0
 800b466:	ec51 0b17 	vmov	r0, r1, d7
 800b46a:	2300      	movs	r3, #0
 800b46c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b470:	f7f5 fb4a 	bl	8000b08 <__aeabi_dcmpeq>
 800b474:	4680      	mov	r8, r0
 800b476:	b158      	cbz	r0, 800b490 <_dtoa_r+0xe8>
 800b478:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b47a:	2301      	movs	r3, #1
 800b47c:	6013      	str	r3, [r2, #0]
 800b47e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b480:	2b00      	cmp	r3, #0
 800b482:	f000 8551 	beq.w	800bf28 <_dtoa_r+0xb80>
 800b486:	488b      	ldr	r0, [pc, #556]	; (800b6b4 <_dtoa_r+0x30c>)
 800b488:	6018      	str	r0, [r3, #0]
 800b48a:	1e43      	subs	r3, r0, #1
 800b48c:	9300      	str	r3, [sp, #0]
 800b48e:	e7dd      	b.n	800b44c <_dtoa_r+0xa4>
 800b490:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b494:	aa12      	add	r2, sp, #72	; 0x48
 800b496:	a913      	add	r1, sp, #76	; 0x4c
 800b498:	4620      	mov	r0, r4
 800b49a:	f001 f8a3 	bl	800c5e4 <__d2b>
 800b49e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b4a2:	4683      	mov	fp, r0
 800b4a4:	2d00      	cmp	r5, #0
 800b4a6:	d07c      	beq.n	800b5a2 <_dtoa_r+0x1fa>
 800b4a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4aa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b4ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4b2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b4b6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b4ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b4be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b4c2:	4b7d      	ldr	r3, [pc, #500]	; (800b6b8 <_dtoa_r+0x310>)
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	4639      	mov	r1, r7
 800b4ca:	f7f4 fefd 	bl	80002c8 <__aeabi_dsub>
 800b4ce:	a36e      	add	r3, pc, #440	; (adr r3, 800b688 <_dtoa_r+0x2e0>)
 800b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d4:	f7f5 f8b0 	bl	8000638 <__aeabi_dmul>
 800b4d8:	a36d      	add	r3, pc, #436	; (adr r3, 800b690 <_dtoa_r+0x2e8>)
 800b4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4de:	f7f4 fef5 	bl	80002cc <__adddf3>
 800b4e2:	4606      	mov	r6, r0
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	460f      	mov	r7, r1
 800b4e8:	f7f5 f83c 	bl	8000564 <__aeabi_i2d>
 800b4ec:	a36a      	add	r3, pc, #424	; (adr r3, 800b698 <_dtoa_r+0x2f0>)
 800b4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f2:	f7f5 f8a1 	bl	8000638 <__aeabi_dmul>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	4630      	mov	r0, r6
 800b4fc:	4639      	mov	r1, r7
 800b4fe:	f7f4 fee5 	bl	80002cc <__adddf3>
 800b502:	4606      	mov	r6, r0
 800b504:	460f      	mov	r7, r1
 800b506:	f7f5 fb47 	bl	8000b98 <__aeabi_d2iz>
 800b50a:	2200      	movs	r2, #0
 800b50c:	4682      	mov	sl, r0
 800b50e:	2300      	movs	r3, #0
 800b510:	4630      	mov	r0, r6
 800b512:	4639      	mov	r1, r7
 800b514:	f7f5 fb02 	bl	8000b1c <__aeabi_dcmplt>
 800b518:	b148      	cbz	r0, 800b52e <_dtoa_r+0x186>
 800b51a:	4650      	mov	r0, sl
 800b51c:	f7f5 f822 	bl	8000564 <__aeabi_i2d>
 800b520:	4632      	mov	r2, r6
 800b522:	463b      	mov	r3, r7
 800b524:	f7f5 faf0 	bl	8000b08 <__aeabi_dcmpeq>
 800b528:	b908      	cbnz	r0, 800b52e <_dtoa_r+0x186>
 800b52a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b52e:	f1ba 0f16 	cmp.w	sl, #22
 800b532:	d854      	bhi.n	800b5de <_dtoa_r+0x236>
 800b534:	4b61      	ldr	r3, [pc, #388]	; (800b6bc <_dtoa_r+0x314>)
 800b536:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b542:	f7f5 faeb 	bl	8000b1c <__aeabi_dcmplt>
 800b546:	2800      	cmp	r0, #0
 800b548:	d04b      	beq.n	800b5e2 <_dtoa_r+0x23a>
 800b54a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b54e:	2300      	movs	r3, #0
 800b550:	930e      	str	r3, [sp, #56]	; 0x38
 800b552:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b554:	1b5d      	subs	r5, r3, r5
 800b556:	1e6b      	subs	r3, r5, #1
 800b558:	9304      	str	r3, [sp, #16]
 800b55a:	bf43      	ittte	mi
 800b55c:	2300      	movmi	r3, #0
 800b55e:	f1c5 0801 	rsbmi	r8, r5, #1
 800b562:	9304      	strmi	r3, [sp, #16]
 800b564:	f04f 0800 	movpl.w	r8, #0
 800b568:	f1ba 0f00 	cmp.w	sl, #0
 800b56c:	db3b      	blt.n	800b5e6 <_dtoa_r+0x23e>
 800b56e:	9b04      	ldr	r3, [sp, #16]
 800b570:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b574:	4453      	add	r3, sl
 800b576:	9304      	str	r3, [sp, #16]
 800b578:	2300      	movs	r3, #0
 800b57a:	9306      	str	r3, [sp, #24]
 800b57c:	9b05      	ldr	r3, [sp, #20]
 800b57e:	2b09      	cmp	r3, #9
 800b580:	d869      	bhi.n	800b656 <_dtoa_r+0x2ae>
 800b582:	2b05      	cmp	r3, #5
 800b584:	bfc4      	itt	gt
 800b586:	3b04      	subgt	r3, #4
 800b588:	9305      	strgt	r3, [sp, #20]
 800b58a:	9b05      	ldr	r3, [sp, #20]
 800b58c:	f1a3 0302 	sub.w	r3, r3, #2
 800b590:	bfcc      	ite	gt
 800b592:	2500      	movgt	r5, #0
 800b594:	2501      	movle	r5, #1
 800b596:	2b03      	cmp	r3, #3
 800b598:	d869      	bhi.n	800b66e <_dtoa_r+0x2c6>
 800b59a:	e8df f003 	tbb	[pc, r3]
 800b59e:	4e2c      	.short	0x4e2c
 800b5a0:	5a4c      	.short	0x5a4c
 800b5a2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b5a6:	441d      	add	r5, r3
 800b5a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b5ac:	2b20      	cmp	r3, #32
 800b5ae:	bfc1      	itttt	gt
 800b5b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b5b4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b5b8:	fa09 f303 	lslgt.w	r3, r9, r3
 800b5bc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b5c0:	bfda      	itte	le
 800b5c2:	f1c3 0320 	rsble	r3, r3, #32
 800b5c6:	fa06 f003 	lslle.w	r0, r6, r3
 800b5ca:	4318      	orrgt	r0, r3
 800b5cc:	f7f4 ffba 	bl	8000544 <__aeabi_ui2d>
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	4606      	mov	r6, r0
 800b5d4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b5d8:	3d01      	subs	r5, #1
 800b5da:	9310      	str	r3, [sp, #64]	; 0x40
 800b5dc:	e771      	b.n	800b4c2 <_dtoa_r+0x11a>
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e7b6      	b.n	800b550 <_dtoa_r+0x1a8>
 800b5e2:	900e      	str	r0, [sp, #56]	; 0x38
 800b5e4:	e7b5      	b.n	800b552 <_dtoa_r+0x1aa>
 800b5e6:	f1ca 0300 	rsb	r3, sl, #0
 800b5ea:	9306      	str	r3, [sp, #24]
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	eba8 080a 	sub.w	r8, r8, sl
 800b5f2:	930d      	str	r3, [sp, #52]	; 0x34
 800b5f4:	e7c2      	b.n	800b57c <_dtoa_r+0x1d4>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	9308      	str	r3, [sp, #32]
 800b5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	dc39      	bgt.n	800b674 <_dtoa_r+0x2cc>
 800b600:	f04f 0901 	mov.w	r9, #1
 800b604:	f8cd 9004 	str.w	r9, [sp, #4]
 800b608:	464b      	mov	r3, r9
 800b60a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b60e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b610:	2200      	movs	r2, #0
 800b612:	6042      	str	r2, [r0, #4]
 800b614:	2204      	movs	r2, #4
 800b616:	f102 0614 	add.w	r6, r2, #20
 800b61a:	429e      	cmp	r6, r3
 800b61c:	6841      	ldr	r1, [r0, #4]
 800b61e:	d92f      	bls.n	800b680 <_dtoa_r+0x2d8>
 800b620:	4620      	mov	r0, r4
 800b622:	f000 fcbd 	bl	800bfa0 <_Balloc>
 800b626:	9000      	str	r0, [sp, #0]
 800b628:	2800      	cmp	r0, #0
 800b62a:	d14b      	bne.n	800b6c4 <_dtoa_r+0x31c>
 800b62c:	4b24      	ldr	r3, [pc, #144]	; (800b6c0 <_dtoa_r+0x318>)
 800b62e:	4602      	mov	r2, r0
 800b630:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b634:	e6d1      	b.n	800b3da <_dtoa_r+0x32>
 800b636:	2301      	movs	r3, #1
 800b638:	e7de      	b.n	800b5f8 <_dtoa_r+0x250>
 800b63a:	2300      	movs	r3, #0
 800b63c:	9308      	str	r3, [sp, #32]
 800b63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b640:	eb0a 0903 	add.w	r9, sl, r3
 800b644:	f109 0301 	add.w	r3, r9, #1
 800b648:	2b01      	cmp	r3, #1
 800b64a:	9301      	str	r3, [sp, #4]
 800b64c:	bfb8      	it	lt
 800b64e:	2301      	movlt	r3, #1
 800b650:	e7dd      	b.n	800b60e <_dtoa_r+0x266>
 800b652:	2301      	movs	r3, #1
 800b654:	e7f2      	b.n	800b63c <_dtoa_r+0x294>
 800b656:	2501      	movs	r5, #1
 800b658:	2300      	movs	r3, #0
 800b65a:	9305      	str	r3, [sp, #20]
 800b65c:	9508      	str	r5, [sp, #32]
 800b65e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800b662:	2200      	movs	r2, #0
 800b664:	f8cd 9004 	str.w	r9, [sp, #4]
 800b668:	2312      	movs	r3, #18
 800b66a:	9209      	str	r2, [sp, #36]	; 0x24
 800b66c:	e7cf      	b.n	800b60e <_dtoa_r+0x266>
 800b66e:	2301      	movs	r3, #1
 800b670:	9308      	str	r3, [sp, #32]
 800b672:	e7f4      	b.n	800b65e <_dtoa_r+0x2b6>
 800b674:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b678:	f8cd 9004 	str.w	r9, [sp, #4]
 800b67c:	464b      	mov	r3, r9
 800b67e:	e7c6      	b.n	800b60e <_dtoa_r+0x266>
 800b680:	3101      	adds	r1, #1
 800b682:	6041      	str	r1, [r0, #4]
 800b684:	0052      	lsls	r2, r2, #1
 800b686:	e7c6      	b.n	800b616 <_dtoa_r+0x26e>
 800b688:	636f4361 	.word	0x636f4361
 800b68c:	3fd287a7 	.word	0x3fd287a7
 800b690:	8b60c8b3 	.word	0x8b60c8b3
 800b694:	3fc68a28 	.word	0x3fc68a28
 800b698:	509f79fb 	.word	0x509f79fb
 800b69c:	3fd34413 	.word	0x3fd34413
 800b6a0:	0800dbf1 	.word	0x0800dbf1
 800b6a4:	0800dc08 	.word	0x0800dc08
 800b6a8:	7ff00000 	.word	0x7ff00000
 800b6ac:	0800dbed 	.word	0x0800dbed
 800b6b0:	0800dbe4 	.word	0x0800dbe4
 800b6b4:	0800dbc1 	.word	0x0800dbc1
 800b6b8:	3ff80000 	.word	0x3ff80000
 800b6bc:	0800dd00 	.word	0x0800dd00
 800b6c0:	0800dc67 	.word	0x0800dc67
 800b6c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6c6:	9a00      	ldr	r2, [sp, #0]
 800b6c8:	601a      	str	r2, [r3, #0]
 800b6ca:	9b01      	ldr	r3, [sp, #4]
 800b6cc:	2b0e      	cmp	r3, #14
 800b6ce:	f200 80ad 	bhi.w	800b82c <_dtoa_r+0x484>
 800b6d2:	2d00      	cmp	r5, #0
 800b6d4:	f000 80aa 	beq.w	800b82c <_dtoa_r+0x484>
 800b6d8:	f1ba 0f00 	cmp.w	sl, #0
 800b6dc:	dd36      	ble.n	800b74c <_dtoa_r+0x3a4>
 800b6de:	4ac3      	ldr	r2, [pc, #780]	; (800b9ec <_dtoa_r+0x644>)
 800b6e0:	f00a 030f 	and.w	r3, sl, #15
 800b6e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b6e8:	ed93 7b00 	vldr	d7, [r3]
 800b6ec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b6f0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b6f4:	eeb0 8a47 	vmov.f32	s16, s14
 800b6f8:	eef0 8a67 	vmov.f32	s17, s15
 800b6fc:	d016      	beq.n	800b72c <_dtoa_r+0x384>
 800b6fe:	4bbc      	ldr	r3, [pc, #752]	; (800b9f0 <_dtoa_r+0x648>)
 800b700:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b704:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b708:	f7f5 f8c0 	bl	800088c <__aeabi_ddiv>
 800b70c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b710:	f007 070f 	and.w	r7, r7, #15
 800b714:	2503      	movs	r5, #3
 800b716:	4eb6      	ldr	r6, [pc, #728]	; (800b9f0 <_dtoa_r+0x648>)
 800b718:	b957      	cbnz	r7, 800b730 <_dtoa_r+0x388>
 800b71a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b71e:	ec53 2b18 	vmov	r2, r3, d8
 800b722:	f7f5 f8b3 	bl	800088c <__aeabi_ddiv>
 800b726:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b72a:	e029      	b.n	800b780 <_dtoa_r+0x3d8>
 800b72c:	2502      	movs	r5, #2
 800b72e:	e7f2      	b.n	800b716 <_dtoa_r+0x36e>
 800b730:	07f9      	lsls	r1, r7, #31
 800b732:	d508      	bpl.n	800b746 <_dtoa_r+0x39e>
 800b734:	ec51 0b18 	vmov	r0, r1, d8
 800b738:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b73c:	f7f4 ff7c 	bl	8000638 <__aeabi_dmul>
 800b740:	ec41 0b18 	vmov	d8, r0, r1
 800b744:	3501      	adds	r5, #1
 800b746:	107f      	asrs	r7, r7, #1
 800b748:	3608      	adds	r6, #8
 800b74a:	e7e5      	b.n	800b718 <_dtoa_r+0x370>
 800b74c:	f000 80a6 	beq.w	800b89c <_dtoa_r+0x4f4>
 800b750:	f1ca 0600 	rsb	r6, sl, #0
 800b754:	4ba5      	ldr	r3, [pc, #660]	; (800b9ec <_dtoa_r+0x644>)
 800b756:	4fa6      	ldr	r7, [pc, #664]	; (800b9f0 <_dtoa_r+0x648>)
 800b758:	f006 020f 	and.w	r2, r6, #15
 800b75c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b764:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b768:	f7f4 ff66 	bl	8000638 <__aeabi_dmul>
 800b76c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b770:	1136      	asrs	r6, r6, #4
 800b772:	2300      	movs	r3, #0
 800b774:	2502      	movs	r5, #2
 800b776:	2e00      	cmp	r6, #0
 800b778:	f040 8085 	bne.w	800b886 <_dtoa_r+0x4de>
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d1d2      	bne.n	800b726 <_dtoa_r+0x37e>
 800b780:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b782:	2b00      	cmp	r3, #0
 800b784:	f000 808c 	beq.w	800b8a0 <_dtoa_r+0x4f8>
 800b788:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b78c:	4b99      	ldr	r3, [pc, #612]	; (800b9f4 <_dtoa_r+0x64c>)
 800b78e:	2200      	movs	r2, #0
 800b790:	4630      	mov	r0, r6
 800b792:	4639      	mov	r1, r7
 800b794:	f7f5 f9c2 	bl	8000b1c <__aeabi_dcmplt>
 800b798:	2800      	cmp	r0, #0
 800b79a:	f000 8081 	beq.w	800b8a0 <_dtoa_r+0x4f8>
 800b79e:	9b01      	ldr	r3, [sp, #4]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d07d      	beq.n	800b8a0 <_dtoa_r+0x4f8>
 800b7a4:	f1b9 0f00 	cmp.w	r9, #0
 800b7a8:	dd3c      	ble.n	800b824 <_dtoa_r+0x47c>
 800b7aa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b7ae:	9307      	str	r3, [sp, #28]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	4b91      	ldr	r3, [pc, #580]	; (800b9f8 <_dtoa_r+0x650>)
 800b7b4:	4630      	mov	r0, r6
 800b7b6:	4639      	mov	r1, r7
 800b7b8:	f7f4 ff3e 	bl	8000638 <__aeabi_dmul>
 800b7bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7c0:	3501      	adds	r5, #1
 800b7c2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b7c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	f7f4 feca 	bl	8000564 <__aeabi_i2d>
 800b7d0:	4632      	mov	r2, r6
 800b7d2:	463b      	mov	r3, r7
 800b7d4:	f7f4 ff30 	bl	8000638 <__aeabi_dmul>
 800b7d8:	4b88      	ldr	r3, [pc, #544]	; (800b9fc <_dtoa_r+0x654>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f7f4 fd76 	bl	80002cc <__adddf3>
 800b7e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b7e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7e8:	9303      	str	r3, [sp, #12]
 800b7ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d15c      	bne.n	800b8aa <_dtoa_r+0x502>
 800b7f0:	4b83      	ldr	r3, [pc, #524]	; (800ba00 <_dtoa_r+0x658>)
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	4639      	mov	r1, r7
 800b7f8:	f7f4 fd66 	bl	80002c8 <__aeabi_dsub>
 800b7fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b800:	4606      	mov	r6, r0
 800b802:	460f      	mov	r7, r1
 800b804:	f7f5 f9a8 	bl	8000b58 <__aeabi_dcmpgt>
 800b808:	2800      	cmp	r0, #0
 800b80a:	f040 8296 	bne.w	800bd3a <_dtoa_r+0x992>
 800b80e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b812:	4630      	mov	r0, r6
 800b814:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b818:	4639      	mov	r1, r7
 800b81a:	f7f5 f97f 	bl	8000b1c <__aeabi_dcmplt>
 800b81e:	2800      	cmp	r0, #0
 800b820:	f040 8288 	bne.w	800bd34 <_dtoa_r+0x98c>
 800b824:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b828:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b82c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b82e:	2b00      	cmp	r3, #0
 800b830:	f2c0 8158 	blt.w	800bae4 <_dtoa_r+0x73c>
 800b834:	f1ba 0f0e 	cmp.w	sl, #14
 800b838:	f300 8154 	bgt.w	800bae4 <_dtoa_r+0x73c>
 800b83c:	4b6b      	ldr	r3, [pc, #428]	; (800b9ec <_dtoa_r+0x644>)
 800b83e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b842:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b848:	2b00      	cmp	r3, #0
 800b84a:	f280 80e3 	bge.w	800ba14 <_dtoa_r+0x66c>
 800b84e:	9b01      	ldr	r3, [sp, #4]
 800b850:	2b00      	cmp	r3, #0
 800b852:	f300 80df 	bgt.w	800ba14 <_dtoa_r+0x66c>
 800b856:	f040 826d 	bne.w	800bd34 <_dtoa_r+0x98c>
 800b85a:	4b69      	ldr	r3, [pc, #420]	; (800ba00 <_dtoa_r+0x658>)
 800b85c:	2200      	movs	r2, #0
 800b85e:	4640      	mov	r0, r8
 800b860:	4649      	mov	r1, r9
 800b862:	f7f4 fee9 	bl	8000638 <__aeabi_dmul>
 800b866:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b86a:	f7f5 f96b 	bl	8000b44 <__aeabi_dcmpge>
 800b86e:	9e01      	ldr	r6, [sp, #4]
 800b870:	4637      	mov	r7, r6
 800b872:	2800      	cmp	r0, #0
 800b874:	f040 8243 	bne.w	800bcfe <_dtoa_r+0x956>
 800b878:	9d00      	ldr	r5, [sp, #0]
 800b87a:	2331      	movs	r3, #49	; 0x31
 800b87c:	f805 3b01 	strb.w	r3, [r5], #1
 800b880:	f10a 0a01 	add.w	sl, sl, #1
 800b884:	e23f      	b.n	800bd06 <_dtoa_r+0x95e>
 800b886:	07f2      	lsls	r2, r6, #31
 800b888:	d505      	bpl.n	800b896 <_dtoa_r+0x4ee>
 800b88a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b88e:	f7f4 fed3 	bl	8000638 <__aeabi_dmul>
 800b892:	3501      	adds	r5, #1
 800b894:	2301      	movs	r3, #1
 800b896:	1076      	asrs	r6, r6, #1
 800b898:	3708      	adds	r7, #8
 800b89a:	e76c      	b.n	800b776 <_dtoa_r+0x3ce>
 800b89c:	2502      	movs	r5, #2
 800b89e:	e76f      	b.n	800b780 <_dtoa_r+0x3d8>
 800b8a0:	9b01      	ldr	r3, [sp, #4]
 800b8a2:	f8cd a01c 	str.w	sl, [sp, #28]
 800b8a6:	930c      	str	r3, [sp, #48]	; 0x30
 800b8a8:	e78d      	b.n	800b7c6 <_dtoa_r+0x41e>
 800b8aa:	9900      	ldr	r1, [sp, #0]
 800b8ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b8ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8b0:	4b4e      	ldr	r3, [pc, #312]	; (800b9ec <_dtoa_r+0x644>)
 800b8b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8b6:	4401      	add	r1, r0
 800b8b8:	9102      	str	r1, [sp, #8]
 800b8ba:	9908      	ldr	r1, [sp, #32]
 800b8bc:	eeb0 8a47 	vmov.f32	s16, s14
 800b8c0:	eef0 8a67 	vmov.f32	s17, s15
 800b8c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b8cc:	2900      	cmp	r1, #0
 800b8ce:	d045      	beq.n	800b95c <_dtoa_r+0x5b4>
 800b8d0:	494c      	ldr	r1, [pc, #304]	; (800ba04 <_dtoa_r+0x65c>)
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	f7f4 ffda 	bl	800088c <__aeabi_ddiv>
 800b8d8:	ec53 2b18 	vmov	r2, r3, d8
 800b8dc:	f7f4 fcf4 	bl	80002c8 <__aeabi_dsub>
 800b8e0:	9d00      	ldr	r5, [sp, #0]
 800b8e2:	ec41 0b18 	vmov	d8, r0, r1
 800b8e6:	4639      	mov	r1, r7
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	f7f5 f955 	bl	8000b98 <__aeabi_d2iz>
 800b8ee:	900c      	str	r0, [sp, #48]	; 0x30
 800b8f0:	f7f4 fe38 	bl	8000564 <__aeabi_i2d>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	4630      	mov	r0, r6
 800b8fa:	4639      	mov	r1, r7
 800b8fc:	f7f4 fce4 	bl	80002c8 <__aeabi_dsub>
 800b900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b902:	3330      	adds	r3, #48	; 0x30
 800b904:	f805 3b01 	strb.w	r3, [r5], #1
 800b908:	ec53 2b18 	vmov	r2, r3, d8
 800b90c:	4606      	mov	r6, r0
 800b90e:	460f      	mov	r7, r1
 800b910:	f7f5 f904 	bl	8000b1c <__aeabi_dcmplt>
 800b914:	2800      	cmp	r0, #0
 800b916:	d165      	bne.n	800b9e4 <_dtoa_r+0x63c>
 800b918:	4632      	mov	r2, r6
 800b91a:	463b      	mov	r3, r7
 800b91c:	4935      	ldr	r1, [pc, #212]	; (800b9f4 <_dtoa_r+0x64c>)
 800b91e:	2000      	movs	r0, #0
 800b920:	f7f4 fcd2 	bl	80002c8 <__aeabi_dsub>
 800b924:	ec53 2b18 	vmov	r2, r3, d8
 800b928:	f7f5 f8f8 	bl	8000b1c <__aeabi_dcmplt>
 800b92c:	2800      	cmp	r0, #0
 800b92e:	f040 80b9 	bne.w	800baa4 <_dtoa_r+0x6fc>
 800b932:	9b02      	ldr	r3, [sp, #8]
 800b934:	429d      	cmp	r5, r3
 800b936:	f43f af75 	beq.w	800b824 <_dtoa_r+0x47c>
 800b93a:	4b2f      	ldr	r3, [pc, #188]	; (800b9f8 <_dtoa_r+0x650>)
 800b93c:	ec51 0b18 	vmov	r0, r1, d8
 800b940:	2200      	movs	r2, #0
 800b942:	f7f4 fe79 	bl	8000638 <__aeabi_dmul>
 800b946:	4b2c      	ldr	r3, [pc, #176]	; (800b9f8 <_dtoa_r+0x650>)
 800b948:	ec41 0b18 	vmov	d8, r0, r1
 800b94c:	2200      	movs	r2, #0
 800b94e:	4630      	mov	r0, r6
 800b950:	4639      	mov	r1, r7
 800b952:	f7f4 fe71 	bl	8000638 <__aeabi_dmul>
 800b956:	4606      	mov	r6, r0
 800b958:	460f      	mov	r7, r1
 800b95a:	e7c4      	b.n	800b8e6 <_dtoa_r+0x53e>
 800b95c:	ec51 0b17 	vmov	r0, r1, d7
 800b960:	f7f4 fe6a 	bl	8000638 <__aeabi_dmul>
 800b964:	9b02      	ldr	r3, [sp, #8]
 800b966:	9d00      	ldr	r5, [sp, #0]
 800b968:	930c      	str	r3, [sp, #48]	; 0x30
 800b96a:	ec41 0b18 	vmov	d8, r0, r1
 800b96e:	4639      	mov	r1, r7
 800b970:	4630      	mov	r0, r6
 800b972:	f7f5 f911 	bl	8000b98 <__aeabi_d2iz>
 800b976:	9011      	str	r0, [sp, #68]	; 0x44
 800b978:	f7f4 fdf4 	bl	8000564 <__aeabi_i2d>
 800b97c:	4602      	mov	r2, r0
 800b97e:	460b      	mov	r3, r1
 800b980:	4630      	mov	r0, r6
 800b982:	4639      	mov	r1, r7
 800b984:	f7f4 fca0 	bl	80002c8 <__aeabi_dsub>
 800b988:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b98a:	3330      	adds	r3, #48	; 0x30
 800b98c:	f805 3b01 	strb.w	r3, [r5], #1
 800b990:	9b02      	ldr	r3, [sp, #8]
 800b992:	429d      	cmp	r5, r3
 800b994:	4606      	mov	r6, r0
 800b996:	460f      	mov	r7, r1
 800b998:	f04f 0200 	mov.w	r2, #0
 800b99c:	d134      	bne.n	800ba08 <_dtoa_r+0x660>
 800b99e:	4b19      	ldr	r3, [pc, #100]	; (800ba04 <_dtoa_r+0x65c>)
 800b9a0:	ec51 0b18 	vmov	r0, r1, d8
 800b9a4:	f7f4 fc92 	bl	80002cc <__adddf3>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	4630      	mov	r0, r6
 800b9ae:	4639      	mov	r1, r7
 800b9b0:	f7f5 f8d2 	bl	8000b58 <__aeabi_dcmpgt>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	d175      	bne.n	800baa4 <_dtoa_r+0x6fc>
 800b9b8:	ec53 2b18 	vmov	r2, r3, d8
 800b9bc:	4911      	ldr	r1, [pc, #68]	; (800ba04 <_dtoa_r+0x65c>)
 800b9be:	2000      	movs	r0, #0
 800b9c0:	f7f4 fc82 	bl	80002c8 <__aeabi_dsub>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	4639      	mov	r1, r7
 800b9cc:	f7f5 f8a6 	bl	8000b1c <__aeabi_dcmplt>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	f43f af27 	beq.w	800b824 <_dtoa_r+0x47c>
 800b9d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b9d8:	1e6b      	subs	r3, r5, #1
 800b9da:	930c      	str	r3, [sp, #48]	; 0x30
 800b9dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b9e0:	2b30      	cmp	r3, #48	; 0x30
 800b9e2:	d0f8      	beq.n	800b9d6 <_dtoa_r+0x62e>
 800b9e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b9e8:	e04a      	b.n	800ba80 <_dtoa_r+0x6d8>
 800b9ea:	bf00      	nop
 800b9ec:	0800dd00 	.word	0x0800dd00
 800b9f0:	0800dcd8 	.word	0x0800dcd8
 800b9f4:	3ff00000 	.word	0x3ff00000
 800b9f8:	40240000 	.word	0x40240000
 800b9fc:	401c0000 	.word	0x401c0000
 800ba00:	40140000 	.word	0x40140000
 800ba04:	3fe00000 	.word	0x3fe00000
 800ba08:	4baf      	ldr	r3, [pc, #700]	; (800bcc8 <_dtoa_r+0x920>)
 800ba0a:	f7f4 fe15 	bl	8000638 <__aeabi_dmul>
 800ba0e:	4606      	mov	r6, r0
 800ba10:	460f      	mov	r7, r1
 800ba12:	e7ac      	b.n	800b96e <_dtoa_r+0x5c6>
 800ba14:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ba18:	9d00      	ldr	r5, [sp, #0]
 800ba1a:	4642      	mov	r2, r8
 800ba1c:	464b      	mov	r3, r9
 800ba1e:	4630      	mov	r0, r6
 800ba20:	4639      	mov	r1, r7
 800ba22:	f7f4 ff33 	bl	800088c <__aeabi_ddiv>
 800ba26:	f7f5 f8b7 	bl	8000b98 <__aeabi_d2iz>
 800ba2a:	9002      	str	r0, [sp, #8]
 800ba2c:	f7f4 fd9a 	bl	8000564 <__aeabi_i2d>
 800ba30:	4642      	mov	r2, r8
 800ba32:	464b      	mov	r3, r9
 800ba34:	f7f4 fe00 	bl	8000638 <__aeabi_dmul>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	4630      	mov	r0, r6
 800ba3e:	4639      	mov	r1, r7
 800ba40:	f7f4 fc42 	bl	80002c8 <__aeabi_dsub>
 800ba44:	9e02      	ldr	r6, [sp, #8]
 800ba46:	9f01      	ldr	r7, [sp, #4]
 800ba48:	3630      	adds	r6, #48	; 0x30
 800ba4a:	f805 6b01 	strb.w	r6, [r5], #1
 800ba4e:	9e00      	ldr	r6, [sp, #0]
 800ba50:	1bae      	subs	r6, r5, r6
 800ba52:	42b7      	cmp	r7, r6
 800ba54:	4602      	mov	r2, r0
 800ba56:	460b      	mov	r3, r1
 800ba58:	d137      	bne.n	800baca <_dtoa_r+0x722>
 800ba5a:	f7f4 fc37 	bl	80002cc <__adddf3>
 800ba5e:	4642      	mov	r2, r8
 800ba60:	464b      	mov	r3, r9
 800ba62:	4606      	mov	r6, r0
 800ba64:	460f      	mov	r7, r1
 800ba66:	f7f5 f877 	bl	8000b58 <__aeabi_dcmpgt>
 800ba6a:	b9c8      	cbnz	r0, 800baa0 <_dtoa_r+0x6f8>
 800ba6c:	4642      	mov	r2, r8
 800ba6e:	464b      	mov	r3, r9
 800ba70:	4630      	mov	r0, r6
 800ba72:	4639      	mov	r1, r7
 800ba74:	f7f5 f848 	bl	8000b08 <__aeabi_dcmpeq>
 800ba78:	b110      	cbz	r0, 800ba80 <_dtoa_r+0x6d8>
 800ba7a:	9b02      	ldr	r3, [sp, #8]
 800ba7c:	07d9      	lsls	r1, r3, #31
 800ba7e:	d40f      	bmi.n	800baa0 <_dtoa_r+0x6f8>
 800ba80:	4620      	mov	r0, r4
 800ba82:	4659      	mov	r1, fp
 800ba84:	f000 facc 	bl	800c020 <_Bfree>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	702b      	strb	r3, [r5, #0]
 800ba8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba8e:	f10a 0001 	add.w	r0, sl, #1
 800ba92:	6018      	str	r0, [r3, #0]
 800ba94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	f43f acd8 	beq.w	800b44c <_dtoa_r+0xa4>
 800ba9c:	601d      	str	r5, [r3, #0]
 800ba9e:	e4d5      	b.n	800b44c <_dtoa_r+0xa4>
 800baa0:	f8cd a01c 	str.w	sl, [sp, #28]
 800baa4:	462b      	mov	r3, r5
 800baa6:	461d      	mov	r5, r3
 800baa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800baac:	2a39      	cmp	r2, #57	; 0x39
 800baae:	d108      	bne.n	800bac2 <_dtoa_r+0x71a>
 800bab0:	9a00      	ldr	r2, [sp, #0]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d1f7      	bne.n	800baa6 <_dtoa_r+0x6fe>
 800bab6:	9a07      	ldr	r2, [sp, #28]
 800bab8:	9900      	ldr	r1, [sp, #0]
 800baba:	3201      	adds	r2, #1
 800babc:	9207      	str	r2, [sp, #28]
 800babe:	2230      	movs	r2, #48	; 0x30
 800bac0:	700a      	strb	r2, [r1, #0]
 800bac2:	781a      	ldrb	r2, [r3, #0]
 800bac4:	3201      	adds	r2, #1
 800bac6:	701a      	strb	r2, [r3, #0]
 800bac8:	e78c      	b.n	800b9e4 <_dtoa_r+0x63c>
 800baca:	4b7f      	ldr	r3, [pc, #508]	; (800bcc8 <_dtoa_r+0x920>)
 800bacc:	2200      	movs	r2, #0
 800bace:	f7f4 fdb3 	bl	8000638 <__aeabi_dmul>
 800bad2:	2200      	movs	r2, #0
 800bad4:	2300      	movs	r3, #0
 800bad6:	4606      	mov	r6, r0
 800bad8:	460f      	mov	r7, r1
 800bada:	f7f5 f815 	bl	8000b08 <__aeabi_dcmpeq>
 800bade:	2800      	cmp	r0, #0
 800bae0:	d09b      	beq.n	800ba1a <_dtoa_r+0x672>
 800bae2:	e7cd      	b.n	800ba80 <_dtoa_r+0x6d8>
 800bae4:	9a08      	ldr	r2, [sp, #32]
 800bae6:	2a00      	cmp	r2, #0
 800bae8:	f000 80c4 	beq.w	800bc74 <_dtoa_r+0x8cc>
 800baec:	9a05      	ldr	r2, [sp, #20]
 800baee:	2a01      	cmp	r2, #1
 800baf0:	f300 80a8 	bgt.w	800bc44 <_dtoa_r+0x89c>
 800baf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800baf6:	2a00      	cmp	r2, #0
 800baf8:	f000 80a0 	beq.w	800bc3c <_dtoa_r+0x894>
 800bafc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bb00:	9e06      	ldr	r6, [sp, #24]
 800bb02:	4645      	mov	r5, r8
 800bb04:	9a04      	ldr	r2, [sp, #16]
 800bb06:	2101      	movs	r1, #1
 800bb08:	441a      	add	r2, r3
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	4498      	add	r8, r3
 800bb0e:	9204      	str	r2, [sp, #16]
 800bb10:	f000 fb42 	bl	800c198 <__i2b>
 800bb14:	4607      	mov	r7, r0
 800bb16:	2d00      	cmp	r5, #0
 800bb18:	dd0b      	ble.n	800bb32 <_dtoa_r+0x78a>
 800bb1a:	9b04      	ldr	r3, [sp, #16]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	dd08      	ble.n	800bb32 <_dtoa_r+0x78a>
 800bb20:	42ab      	cmp	r3, r5
 800bb22:	9a04      	ldr	r2, [sp, #16]
 800bb24:	bfa8      	it	ge
 800bb26:	462b      	movge	r3, r5
 800bb28:	eba8 0803 	sub.w	r8, r8, r3
 800bb2c:	1aed      	subs	r5, r5, r3
 800bb2e:	1ad3      	subs	r3, r2, r3
 800bb30:	9304      	str	r3, [sp, #16]
 800bb32:	9b06      	ldr	r3, [sp, #24]
 800bb34:	b1fb      	cbz	r3, 800bb76 <_dtoa_r+0x7ce>
 800bb36:	9b08      	ldr	r3, [sp, #32]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	f000 809f 	beq.w	800bc7c <_dtoa_r+0x8d4>
 800bb3e:	2e00      	cmp	r6, #0
 800bb40:	dd11      	ble.n	800bb66 <_dtoa_r+0x7be>
 800bb42:	4639      	mov	r1, r7
 800bb44:	4632      	mov	r2, r6
 800bb46:	4620      	mov	r0, r4
 800bb48:	f000 fbe2 	bl	800c310 <__pow5mult>
 800bb4c:	465a      	mov	r2, fp
 800bb4e:	4601      	mov	r1, r0
 800bb50:	4607      	mov	r7, r0
 800bb52:	4620      	mov	r0, r4
 800bb54:	f000 fb36 	bl	800c1c4 <__multiply>
 800bb58:	4659      	mov	r1, fp
 800bb5a:	9007      	str	r0, [sp, #28]
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	f000 fa5f 	bl	800c020 <_Bfree>
 800bb62:	9b07      	ldr	r3, [sp, #28]
 800bb64:	469b      	mov	fp, r3
 800bb66:	9b06      	ldr	r3, [sp, #24]
 800bb68:	1b9a      	subs	r2, r3, r6
 800bb6a:	d004      	beq.n	800bb76 <_dtoa_r+0x7ce>
 800bb6c:	4659      	mov	r1, fp
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f000 fbce 	bl	800c310 <__pow5mult>
 800bb74:	4683      	mov	fp, r0
 800bb76:	2101      	movs	r1, #1
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f000 fb0d 	bl	800c198 <__i2b>
 800bb7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	4606      	mov	r6, r0
 800bb84:	dd7c      	ble.n	800bc80 <_dtoa_r+0x8d8>
 800bb86:	461a      	mov	r2, r3
 800bb88:	4601      	mov	r1, r0
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f000 fbc0 	bl	800c310 <__pow5mult>
 800bb90:	9b05      	ldr	r3, [sp, #20]
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	4606      	mov	r6, r0
 800bb96:	dd76      	ble.n	800bc86 <_dtoa_r+0x8de>
 800bb98:	2300      	movs	r3, #0
 800bb9a:	9306      	str	r3, [sp, #24]
 800bb9c:	6933      	ldr	r3, [r6, #16]
 800bb9e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bba2:	6918      	ldr	r0, [r3, #16]
 800bba4:	f000 faa8 	bl	800c0f8 <__hi0bits>
 800bba8:	f1c0 0020 	rsb	r0, r0, #32
 800bbac:	9b04      	ldr	r3, [sp, #16]
 800bbae:	4418      	add	r0, r3
 800bbb0:	f010 001f 	ands.w	r0, r0, #31
 800bbb4:	f000 8086 	beq.w	800bcc4 <_dtoa_r+0x91c>
 800bbb8:	f1c0 0320 	rsb	r3, r0, #32
 800bbbc:	2b04      	cmp	r3, #4
 800bbbe:	dd7f      	ble.n	800bcc0 <_dtoa_r+0x918>
 800bbc0:	f1c0 001c 	rsb	r0, r0, #28
 800bbc4:	9b04      	ldr	r3, [sp, #16]
 800bbc6:	4403      	add	r3, r0
 800bbc8:	4480      	add	r8, r0
 800bbca:	4405      	add	r5, r0
 800bbcc:	9304      	str	r3, [sp, #16]
 800bbce:	f1b8 0f00 	cmp.w	r8, #0
 800bbd2:	dd05      	ble.n	800bbe0 <_dtoa_r+0x838>
 800bbd4:	4659      	mov	r1, fp
 800bbd6:	4642      	mov	r2, r8
 800bbd8:	4620      	mov	r0, r4
 800bbda:	f000 fbf3 	bl	800c3c4 <__lshift>
 800bbde:	4683      	mov	fp, r0
 800bbe0:	9b04      	ldr	r3, [sp, #16]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	dd05      	ble.n	800bbf2 <_dtoa_r+0x84a>
 800bbe6:	4631      	mov	r1, r6
 800bbe8:	461a      	mov	r2, r3
 800bbea:	4620      	mov	r0, r4
 800bbec:	f000 fbea 	bl	800c3c4 <__lshift>
 800bbf0:	4606      	mov	r6, r0
 800bbf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d069      	beq.n	800bccc <_dtoa_r+0x924>
 800bbf8:	4631      	mov	r1, r6
 800bbfa:	4658      	mov	r0, fp
 800bbfc:	f000 fc4e 	bl	800c49c <__mcmp>
 800bc00:	2800      	cmp	r0, #0
 800bc02:	da63      	bge.n	800bccc <_dtoa_r+0x924>
 800bc04:	2300      	movs	r3, #0
 800bc06:	4659      	mov	r1, fp
 800bc08:	220a      	movs	r2, #10
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	f000 fa2a 	bl	800c064 <__multadd>
 800bc10:	9b08      	ldr	r3, [sp, #32]
 800bc12:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bc16:	4683      	mov	fp, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	f000 818f 	beq.w	800bf3c <_dtoa_r+0xb94>
 800bc1e:	4639      	mov	r1, r7
 800bc20:	2300      	movs	r3, #0
 800bc22:	220a      	movs	r2, #10
 800bc24:	4620      	mov	r0, r4
 800bc26:	f000 fa1d 	bl	800c064 <__multadd>
 800bc2a:	f1b9 0f00 	cmp.w	r9, #0
 800bc2e:	4607      	mov	r7, r0
 800bc30:	f300 808e 	bgt.w	800bd50 <_dtoa_r+0x9a8>
 800bc34:	9b05      	ldr	r3, [sp, #20]
 800bc36:	2b02      	cmp	r3, #2
 800bc38:	dc50      	bgt.n	800bcdc <_dtoa_r+0x934>
 800bc3a:	e089      	b.n	800bd50 <_dtoa_r+0x9a8>
 800bc3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bc42:	e75d      	b.n	800bb00 <_dtoa_r+0x758>
 800bc44:	9b01      	ldr	r3, [sp, #4]
 800bc46:	1e5e      	subs	r6, r3, #1
 800bc48:	9b06      	ldr	r3, [sp, #24]
 800bc4a:	42b3      	cmp	r3, r6
 800bc4c:	bfbf      	itttt	lt
 800bc4e:	9b06      	ldrlt	r3, [sp, #24]
 800bc50:	9606      	strlt	r6, [sp, #24]
 800bc52:	1af2      	sublt	r2, r6, r3
 800bc54:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800bc56:	bfb6      	itet	lt
 800bc58:	189b      	addlt	r3, r3, r2
 800bc5a:	1b9e      	subge	r6, r3, r6
 800bc5c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800bc5e:	9b01      	ldr	r3, [sp, #4]
 800bc60:	bfb8      	it	lt
 800bc62:	2600      	movlt	r6, #0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	bfb5      	itete	lt
 800bc68:	eba8 0503 	sublt.w	r5, r8, r3
 800bc6c:	9b01      	ldrge	r3, [sp, #4]
 800bc6e:	2300      	movlt	r3, #0
 800bc70:	4645      	movge	r5, r8
 800bc72:	e747      	b.n	800bb04 <_dtoa_r+0x75c>
 800bc74:	9e06      	ldr	r6, [sp, #24]
 800bc76:	9f08      	ldr	r7, [sp, #32]
 800bc78:	4645      	mov	r5, r8
 800bc7a:	e74c      	b.n	800bb16 <_dtoa_r+0x76e>
 800bc7c:	9a06      	ldr	r2, [sp, #24]
 800bc7e:	e775      	b.n	800bb6c <_dtoa_r+0x7c4>
 800bc80:	9b05      	ldr	r3, [sp, #20]
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	dc18      	bgt.n	800bcb8 <_dtoa_r+0x910>
 800bc86:	9b02      	ldr	r3, [sp, #8]
 800bc88:	b9b3      	cbnz	r3, 800bcb8 <_dtoa_r+0x910>
 800bc8a:	9b03      	ldr	r3, [sp, #12]
 800bc8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc90:	b9a3      	cbnz	r3, 800bcbc <_dtoa_r+0x914>
 800bc92:	9b03      	ldr	r3, [sp, #12]
 800bc94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc98:	0d1b      	lsrs	r3, r3, #20
 800bc9a:	051b      	lsls	r3, r3, #20
 800bc9c:	b12b      	cbz	r3, 800bcaa <_dtoa_r+0x902>
 800bc9e:	9b04      	ldr	r3, [sp, #16]
 800bca0:	3301      	adds	r3, #1
 800bca2:	9304      	str	r3, [sp, #16]
 800bca4:	f108 0801 	add.w	r8, r8, #1
 800bca8:	2301      	movs	r3, #1
 800bcaa:	9306      	str	r3, [sp, #24]
 800bcac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f47f af74 	bne.w	800bb9c <_dtoa_r+0x7f4>
 800bcb4:	2001      	movs	r0, #1
 800bcb6:	e779      	b.n	800bbac <_dtoa_r+0x804>
 800bcb8:	2300      	movs	r3, #0
 800bcba:	e7f6      	b.n	800bcaa <_dtoa_r+0x902>
 800bcbc:	9b02      	ldr	r3, [sp, #8]
 800bcbe:	e7f4      	b.n	800bcaa <_dtoa_r+0x902>
 800bcc0:	d085      	beq.n	800bbce <_dtoa_r+0x826>
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	301c      	adds	r0, #28
 800bcc6:	e77d      	b.n	800bbc4 <_dtoa_r+0x81c>
 800bcc8:	40240000 	.word	0x40240000
 800bccc:	9b01      	ldr	r3, [sp, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	dc38      	bgt.n	800bd44 <_dtoa_r+0x99c>
 800bcd2:	9b05      	ldr	r3, [sp, #20]
 800bcd4:	2b02      	cmp	r3, #2
 800bcd6:	dd35      	ble.n	800bd44 <_dtoa_r+0x99c>
 800bcd8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bcdc:	f1b9 0f00 	cmp.w	r9, #0
 800bce0:	d10d      	bne.n	800bcfe <_dtoa_r+0x956>
 800bce2:	4631      	mov	r1, r6
 800bce4:	464b      	mov	r3, r9
 800bce6:	2205      	movs	r2, #5
 800bce8:	4620      	mov	r0, r4
 800bcea:	f000 f9bb 	bl	800c064 <__multadd>
 800bcee:	4601      	mov	r1, r0
 800bcf0:	4606      	mov	r6, r0
 800bcf2:	4658      	mov	r0, fp
 800bcf4:	f000 fbd2 	bl	800c49c <__mcmp>
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	f73f adbd 	bgt.w	800b878 <_dtoa_r+0x4d0>
 800bcfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd00:	9d00      	ldr	r5, [sp, #0]
 800bd02:	ea6f 0a03 	mvn.w	sl, r3
 800bd06:	f04f 0800 	mov.w	r8, #0
 800bd0a:	4631      	mov	r1, r6
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f000 f987 	bl	800c020 <_Bfree>
 800bd12:	2f00      	cmp	r7, #0
 800bd14:	f43f aeb4 	beq.w	800ba80 <_dtoa_r+0x6d8>
 800bd18:	f1b8 0f00 	cmp.w	r8, #0
 800bd1c:	d005      	beq.n	800bd2a <_dtoa_r+0x982>
 800bd1e:	45b8      	cmp	r8, r7
 800bd20:	d003      	beq.n	800bd2a <_dtoa_r+0x982>
 800bd22:	4641      	mov	r1, r8
 800bd24:	4620      	mov	r0, r4
 800bd26:	f000 f97b 	bl	800c020 <_Bfree>
 800bd2a:	4639      	mov	r1, r7
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	f000 f977 	bl	800c020 <_Bfree>
 800bd32:	e6a5      	b.n	800ba80 <_dtoa_r+0x6d8>
 800bd34:	2600      	movs	r6, #0
 800bd36:	4637      	mov	r7, r6
 800bd38:	e7e1      	b.n	800bcfe <_dtoa_r+0x956>
 800bd3a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bd3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bd40:	4637      	mov	r7, r6
 800bd42:	e599      	b.n	800b878 <_dtoa_r+0x4d0>
 800bd44:	9b08      	ldr	r3, [sp, #32]
 800bd46:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	f000 80fd 	beq.w	800bf4a <_dtoa_r+0xba2>
 800bd50:	2d00      	cmp	r5, #0
 800bd52:	dd05      	ble.n	800bd60 <_dtoa_r+0x9b8>
 800bd54:	4639      	mov	r1, r7
 800bd56:	462a      	mov	r2, r5
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f000 fb33 	bl	800c3c4 <__lshift>
 800bd5e:	4607      	mov	r7, r0
 800bd60:	9b06      	ldr	r3, [sp, #24]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d05c      	beq.n	800be20 <_dtoa_r+0xa78>
 800bd66:	6879      	ldr	r1, [r7, #4]
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f000 f919 	bl	800bfa0 <_Balloc>
 800bd6e:	4605      	mov	r5, r0
 800bd70:	b928      	cbnz	r0, 800bd7e <_dtoa_r+0x9d6>
 800bd72:	4b80      	ldr	r3, [pc, #512]	; (800bf74 <_dtoa_r+0xbcc>)
 800bd74:	4602      	mov	r2, r0
 800bd76:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bd7a:	f7ff bb2e 	b.w	800b3da <_dtoa_r+0x32>
 800bd7e:	693a      	ldr	r2, [r7, #16]
 800bd80:	3202      	adds	r2, #2
 800bd82:	0092      	lsls	r2, r2, #2
 800bd84:	f107 010c 	add.w	r1, r7, #12
 800bd88:	300c      	adds	r0, #12
 800bd8a:	f7fe fd27 	bl	800a7dc <memcpy>
 800bd8e:	2201      	movs	r2, #1
 800bd90:	4629      	mov	r1, r5
 800bd92:	4620      	mov	r0, r4
 800bd94:	f000 fb16 	bl	800c3c4 <__lshift>
 800bd98:	9b00      	ldr	r3, [sp, #0]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	9301      	str	r3, [sp, #4]
 800bd9e:	9b00      	ldr	r3, [sp, #0]
 800bda0:	444b      	add	r3, r9
 800bda2:	9307      	str	r3, [sp, #28]
 800bda4:	9b02      	ldr	r3, [sp, #8]
 800bda6:	f003 0301 	and.w	r3, r3, #1
 800bdaa:	46b8      	mov	r8, r7
 800bdac:	9306      	str	r3, [sp, #24]
 800bdae:	4607      	mov	r7, r0
 800bdb0:	9b01      	ldr	r3, [sp, #4]
 800bdb2:	4631      	mov	r1, r6
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	4658      	mov	r0, fp
 800bdb8:	9302      	str	r3, [sp, #8]
 800bdba:	f7ff fa69 	bl	800b290 <quorem>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	3330      	adds	r3, #48	; 0x30
 800bdc2:	9004      	str	r0, [sp, #16]
 800bdc4:	4641      	mov	r1, r8
 800bdc6:	4658      	mov	r0, fp
 800bdc8:	9308      	str	r3, [sp, #32]
 800bdca:	f000 fb67 	bl	800c49c <__mcmp>
 800bdce:	463a      	mov	r2, r7
 800bdd0:	4681      	mov	r9, r0
 800bdd2:	4631      	mov	r1, r6
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	f000 fb7d 	bl	800c4d4 <__mdiff>
 800bdda:	68c2      	ldr	r2, [r0, #12]
 800bddc:	9b08      	ldr	r3, [sp, #32]
 800bdde:	4605      	mov	r5, r0
 800bde0:	bb02      	cbnz	r2, 800be24 <_dtoa_r+0xa7c>
 800bde2:	4601      	mov	r1, r0
 800bde4:	4658      	mov	r0, fp
 800bde6:	f000 fb59 	bl	800c49c <__mcmp>
 800bdea:	9b08      	ldr	r3, [sp, #32]
 800bdec:	4602      	mov	r2, r0
 800bdee:	4629      	mov	r1, r5
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800bdf6:	f000 f913 	bl	800c020 <_Bfree>
 800bdfa:	9b05      	ldr	r3, [sp, #20]
 800bdfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdfe:	9d01      	ldr	r5, [sp, #4]
 800be00:	ea43 0102 	orr.w	r1, r3, r2
 800be04:	9b06      	ldr	r3, [sp, #24]
 800be06:	430b      	orrs	r3, r1
 800be08:	9b08      	ldr	r3, [sp, #32]
 800be0a:	d10d      	bne.n	800be28 <_dtoa_r+0xa80>
 800be0c:	2b39      	cmp	r3, #57	; 0x39
 800be0e:	d029      	beq.n	800be64 <_dtoa_r+0xabc>
 800be10:	f1b9 0f00 	cmp.w	r9, #0
 800be14:	dd01      	ble.n	800be1a <_dtoa_r+0xa72>
 800be16:	9b04      	ldr	r3, [sp, #16]
 800be18:	3331      	adds	r3, #49	; 0x31
 800be1a:	9a02      	ldr	r2, [sp, #8]
 800be1c:	7013      	strb	r3, [r2, #0]
 800be1e:	e774      	b.n	800bd0a <_dtoa_r+0x962>
 800be20:	4638      	mov	r0, r7
 800be22:	e7b9      	b.n	800bd98 <_dtoa_r+0x9f0>
 800be24:	2201      	movs	r2, #1
 800be26:	e7e2      	b.n	800bdee <_dtoa_r+0xa46>
 800be28:	f1b9 0f00 	cmp.w	r9, #0
 800be2c:	db06      	blt.n	800be3c <_dtoa_r+0xa94>
 800be2e:	9905      	ldr	r1, [sp, #20]
 800be30:	ea41 0909 	orr.w	r9, r1, r9
 800be34:	9906      	ldr	r1, [sp, #24]
 800be36:	ea59 0101 	orrs.w	r1, r9, r1
 800be3a:	d120      	bne.n	800be7e <_dtoa_r+0xad6>
 800be3c:	2a00      	cmp	r2, #0
 800be3e:	ddec      	ble.n	800be1a <_dtoa_r+0xa72>
 800be40:	4659      	mov	r1, fp
 800be42:	2201      	movs	r2, #1
 800be44:	4620      	mov	r0, r4
 800be46:	9301      	str	r3, [sp, #4]
 800be48:	f000 fabc 	bl	800c3c4 <__lshift>
 800be4c:	4631      	mov	r1, r6
 800be4e:	4683      	mov	fp, r0
 800be50:	f000 fb24 	bl	800c49c <__mcmp>
 800be54:	2800      	cmp	r0, #0
 800be56:	9b01      	ldr	r3, [sp, #4]
 800be58:	dc02      	bgt.n	800be60 <_dtoa_r+0xab8>
 800be5a:	d1de      	bne.n	800be1a <_dtoa_r+0xa72>
 800be5c:	07da      	lsls	r2, r3, #31
 800be5e:	d5dc      	bpl.n	800be1a <_dtoa_r+0xa72>
 800be60:	2b39      	cmp	r3, #57	; 0x39
 800be62:	d1d8      	bne.n	800be16 <_dtoa_r+0xa6e>
 800be64:	9a02      	ldr	r2, [sp, #8]
 800be66:	2339      	movs	r3, #57	; 0x39
 800be68:	7013      	strb	r3, [r2, #0]
 800be6a:	462b      	mov	r3, r5
 800be6c:	461d      	mov	r5, r3
 800be6e:	3b01      	subs	r3, #1
 800be70:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800be74:	2a39      	cmp	r2, #57	; 0x39
 800be76:	d050      	beq.n	800bf1a <_dtoa_r+0xb72>
 800be78:	3201      	adds	r2, #1
 800be7a:	701a      	strb	r2, [r3, #0]
 800be7c:	e745      	b.n	800bd0a <_dtoa_r+0x962>
 800be7e:	2a00      	cmp	r2, #0
 800be80:	dd03      	ble.n	800be8a <_dtoa_r+0xae2>
 800be82:	2b39      	cmp	r3, #57	; 0x39
 800be84:	d0ee      	beq.n	800be64 <_dtoa_r+0xabc>
 800be86:	3301      	adds	r3, #1
 800be88:	e7c7      	b.n	800be1a <_dtoa_r+0xa72>
 800be8a:	9a01      	ldr	r2, [sp, #4]
 800be8c:	9907      	ldr	r1, [sp, #28]
 800be8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800be92:	428a      	cmp	r2, r1
 800be94:	d02a      	beq.n	800beec <_dtoa_r+0xb44>
 800be96:	4659      	mov	r1, fp
 800be98:	2300      	movs	r3, #0
 800be9a:	220a      	movs	r2, #10
 800be9c:	4620      	mov	r0, r4
 800be9e:	f000 f8e1 	bl	800c064 <__multadd>
 800bea2:	45b8      	cmp	r8, r7
 800bea4:	4683      	mov	fp, r0
 800bea6:	f04f 0300 	mov.w	r3, #0
 800beaa:	f04f 020a 	mov.w	r2, #10
 800beae:	4641      	mov	r1, r8
 800beb0:	4620      	mov	r0, r4
 800beb2:	d107      	bne.n	800bec4 <_dtoa_r+0xb1c>
 800beb4:	f000 f8d6 	bl	800c064 <__multadd>
 800beb8:	4680      	mov	r8, r0
 800beba:	4607      	mov	r7, r0
 800bebc:	9b01      	ldr	r3, [sp, #4]
 800bebe:	3301      	adds	r3, #1
 800bec0:	9301      	str	r3, [sp, #4]
 800bec2:	e775      	b.n	800bdb0 <_dtoa_r+0xa08>
 800bec4:	f000 f8ce 	bl	800c064 <__multadd>
 800bec8:	4639      	mov	r1, r7
 800beca:	4680      	mov	r8, r0
 800becc:	2300      	movs	r3, #0
 800bece:	220a      	movs	r2, #10
 800bed0:	4620      	mov	r0, r4
 800bed2:	f000 f8c7 	bl	800c064 <__multadd>
 800bed6:	4607      	mov	r7, r0
 800bed8:	e7f0      	b.n	800bebc <_dtoa_r+0xb14>
 800beda:	f1b9 0f00 	cmp.w	r9, #0
 800bede:	9a00      	ldr	r2, [sp, #0]
 800bee0:	bfcc      	ite	gt
 800bee2:	464d      	movgt	r5, r9
 800bee4:	2501      	movle	r5, #1
 800bee6:	4415      	add	r5, r2
 800bee8:	f04f 0800 	mov.w	r8, #0
 800beec:	4659      	mov	r1, fp
 800beee:	2201      	movs	r2, #1
 800bef0:	4620      	mov	r0, r4
 800bef2:	9301      	str	r3, [sp, #4]
 800bef4:	f000 fa66 	bl	800c3c4 <__lshift>
 800bef8:	4631      	mov	r1, r6
 800befa:	4683      	mov	fp, r0
 800befc:	f000 face 	bl	800c49c <__mcmp>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	dcb2      	bgt.n	800be6a <_dtoa_r+0xac2>
 800bf04:	d102      	bne.n	800bf0c <_dtoa_r+0xb64>
 800bf06:	9b01      	ldr	r3, [sp, #4]
 800bf08:	07db      	lsls	r3, r3, #31
 800bf0a:	d4ae      	bmi.n	800be6a <_dtoa_r+0xac2>
 800bf0c:	462b      	mov	r3, r5
 800bf0e:	461d      	mov	r5, r3
 800bf10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf14:	2a30      	cmp	r2, #48	; 0x30
 800bf16:	d0fa      	beq.n	800bf0e <_dtoa_r+0xb66>
 800bf18:	e6f7      	b.n	800bd0a <_dtoa_r+0x962>
 800bf1a:	9a00      	ldr	r2, [sp, #0]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d1a5      	bne.n	800be6c <_dtoa_r+0xac4>
 800bf20:	f10a 0a01 	add.w	sl, sl, #1
 800bf24:	2331      	movs	r3, #49	; 0x31
 800bf26:	e779      	b.n	800be1c <_dtoa_r+0xa74>
 800bf28:	4b13      	ldr	r3, [pc, #76]	; (800bf78 <_dtoa_r+0xbd0>)
 800bf2a:	f7ff baaf 	b.w	800b48c <_dtoa_r+0xe4>
 800bf2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	f47f aa86 	bne.w	800b442 <_dtoa_r+0x9a>
 800bf36:	4b11      	ldr	r3, [pc, #68]	; (800bf7c <_dtoa_r+0xbd4>)
 800bf38:	f7ff baa8 	b.w	800b48c <_dtoa_r+0xe4>
 800bf3c:	f1b9 0f00 	cmp.w	r9, #0
 800bf40:	dc03      	bgt.n	800bf4a <_dtoa_r+0xba2>
 800bf42:	9b05      	ldr	r3, [sp, #20]
 800bf44:	2b02      	cmp	r3, #2
 800bf46:	f73f aec9 	bgt.w	800bcdc <_dtoa_r+0x934>
 800bf4a:	9d00      	ldr	r5, [sp, #0]
 800bf4c:	4631      	mov	r1, r6
 800bf4e:	4658      	mov	r0, fp
 800bf50:	f7ff f99e 	bl	800b290 <quorem>
 800bf54:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bf58:	f805 3b01 	strb.w	r3, [r5], #1
 800bf5c:	9a00      	ldr	r2, [sp, #0]
 800bf5e:	1aaa      	subs	r2, r5, r2
 800bf60:	4591      	cmp	r9, r2
 800bf62:	ddba      	ble.n	800beda <_dtoa_r+0xb32>
 800bf64:	4659      	mov	r1, fp
 800bf66:	2300      	movs	r3, #0
 800bf68:	220a      	movs	r2, #10
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f000 f87a 	bl	800c064 <__multadd>
 800bf70:	4683      	mov	fp, r0
 800bf72:	e7eb      	b.n	800bf4c <_dtoa_r+0xba4>
 800bf74:	0800dc67 	.word	0x0800dc67
 800bf78:	0800dbc0 	.word	0x0800dbc0
 800bf7c:	0800dbe4 	.word	0x0800dbe4

0800bf80 <_localeconv_r>:
 800bf80:	4800      	ldr	r0, [pc, #0]	; (800bf84 <_localeconv_r+0x4>)
 800bf82:	4770      	bx	lr
 800bf84:	20000738 	.word	0x20000738

0800bf88 <__malloc_lock>:
 800bf88:	4801      	ldr	r0, [pc, #4]	; (800bf90 <__malloc_lock+0x8>)
 800bf8a:	f000 bd48 	b.w	800ca1e <__retarget_lock_acquire_recursive>
 800bf8e:	bf00      	nop
 800bf90:	20001710 	.word	0x20001710

0800bf94 <__malloc_unlock>:
 800bf94:	4801      	ldr	r0, [pc, #4]	; (800bf9c <__malloc_unlock+0x8>)
 800bf96:	f000 bd43 	b.w	800ca20 <__retarget_lock_release_recursive>
 800bf9a:	bf00      	nop
 800bf9c:	20001710 	.word	0x20001710

0800bfa0 <_Balloc>:
 800bfa0:	b570      	push	{r4, r5, r6, lr}
 800bfa2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bfa4:	4604      	mov	r4, r0
 800bfa6:	460d      	mov	r5, r1
 800bfa8:	b976      	cbnz	r6, 800bfc8 <_Balloc+0x28>
 800bfaa:	2010      	movs	r0, #16
 800bfac:	f7fe fc0e 	bl	800a7cc <malloc>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	6260      	str	r0, [r4, #36]	; 0x24
 800bfb4:	b920      	cbnz	r0, 800bfc0 <_Balloc+0x20>
 800bfb6:	4b18      	ldr	r3, [pc, #96]	; (800c018 <_Balloc+0x78>)
 800bfb8:	4818      	ldr	r0, [pc, #96]	; (800c01c <_Balloc+0x7c>)
 800bfba:	2166      	movs	r1, #102	; 0x66
 800bfbc:	f000 fcfe 	bl	800c9bc <__assert_func>
 800bfc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfc4:	6006      	str	r6, [r0, #0]
 800bfc6:	60c6      	str	r6, [r0, #12]
 800bfc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bfca:	68f3      	ldr	r3, [r6, #12]
 800bfcc:	b183      	cbz	r3, 800bff0 <_Balloc+0x50>
 800bfce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bfd6:	b9b8      	cbnz	r0, 800c008 <_Balloc+0x68>
 800bfd8:	2101      	movs	r1, #1
 800bfda:	fa01 f605 	lsl.w	r6, r1, r5
 800bfde:	1d72      	adds	r2, r6, #5
 800bfe0:	0092      	lsls	r2, r2, #2
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f000 fb5a 	bl	800c69c <_calloc_r>
 800bfe8:	b160      	cbz	r0, 800c004 <_Balloc+0x64>
 800bfea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bfee:	e00e      	b.n	800c00e <_Balloc+0x6e>
 800bff0:	2221      	movs	r2, #33	; 0x21
 800bff2:	2104      	movs	r1, #4
 800bff4:	4620      	mov	r0, r4
 800bff6:	f000 fb51 	bl	800c69c <_calloc_r>
 800bffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bffc:	60f0      	str	r0, [r6, #12]
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d1e4      	bne.n	800bfce <_Balloc+0x2e>
 800c004:	2000      	movs	r0, #0
 800c006:	bd70      	pop	{r4, r5, r6, pc}
 800c008:	6802      	ldr	r2, [r0, #0]
 800c00a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c00e:	2300      	movs	r3, #0
 800c010:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c014:	e7f7      	b.n	800c006 <_Balloc+0x66>
 800c016:	bf00      	nop
 800c018:	0800dbf1 	.word	0x0800dbf1
 800c01c:	0800dc78 	.word	0x0800dc78

0800c020 <_Bfree>:
 800c020:	b570      	push	{r4, r5, r6, lr}
 800c022:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c024:	4605      	mov	r5, r0
 800c026:	460c      	mov	r4, r1
 800c028:	b976      	cbnz	r6, 800c048 <_Bfree+0x28>
 800c02a:	2010      	movs	r0, #16
 800c02c:	f7fe fbce 	bl	800a7cc <malloc>
 800c030:	4602      	mov	r2, r0
 800c032:	6268      	str	r0, [r5, #36]	; 0x24
 800c034:	b920      	cbnz	r0, 800c040 <_Bfree+0x20>
 800c036:	4b09      	ldr	r3, [pc, #36]	; (800c05c <_Bfree+0x3c>)
 800c038:	4809      	ldr	r0, [pc, #36]	; (800c060 <_Bfree+0x40>)
 800c03a:	218a      	movs	r1, #138	; 0x8a
 800c03c:	f000 fcbe 	bl	800c9bc <__assert_func>
 800c040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c044:	6006      	str	r6, [r0, #0]
 800c046:	60c6      	str	r6, [r0, #12]
 800c048:	b13c      	cbz	r4, 800c05a <_Bfree+0x3a>
 800c04a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c04c:	6862      	ldr	r2, [r4, #4]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c054:	6021      	str	r1, [r4, #0]
 800c056:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c05a:	bd70      	pop	{r4, r5, r6, pc}
 800c05c:	0800dbf1 	.word	0x0800dbf1
 800c060:	0800dc78 	.word	0x0800dc78

0800c064 <__multadd>:
 800c064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c068:	690e      	ldr	r6, [r1, #16]
 800c06a:	4607      	mov	r7, r0
 800c06c:	4698      	mov	r8, r3
 800c06e:	460c      	mov	r4, r1
 800c070:	f101 0014 	add.w	r0, r1, #20
 800c074:	2300      	movs	r3, #0
 800c076:	6805      	ldr	r5, [r0, #0]
 800c078:	b2a9      	uxth	r1, r5
 800c07a:	fb02 8101 	mla	r1, r2, r1, r8
 800c07e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c082:	0c2d      	lsrs	r5, r5, #16
 800c084:	fb02 c505 	mla	r5, r2, r5, ip
 800c088:	b289      	uxth	r1, r1
 800c08a:	3301      	adds	r3, #1
 800c08c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c090:	429e      	cmp	r6, r3
 800c092:	f840 1b04 	str.w	r1, [r0], #4
 800c096:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c09a:	dcec      	bgt.n	800c076 <__multadd+0x12>
 800c09c:	f1b8 0f00 	cmp.w	r8, #0
 800c0a0:	d022      	beq.n	800c0e8 <__multadd+0x84>
 800c0a2:	68a3      	ldr	r3, [r4, #8]
 800c0a4:	42b3      	cmp	r3, r6
 800c0a6:	dc19      	bgt.n	800c0dc <__multadd+0x78>
 800c0a8:	6861      	ldr	r1, [r4, #4]
 800c0aa:	4638      	mov	r0, r7
 800c0ac:	3101      	adds	r1, #1
 800c0ae:	f7ff ff77 	bl	800bfa0 <_Balloc>
 800c0b2:	4605      	mov	r5, r0
 800c0b4:	b928      	cbnz	r0, 800c0c2 <__multadd+0x5e>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	4b0d      	ldr	r3, [pc, #52]	; (800c0f0 <__multadd+0x8c>)
 800c0ba:	480e      	ldr	r0, [pc, #56]	; (800c0f4 <__multadd+0x90>)
 800c0bc:	21b5      	movs	r1, #181	; 0xb5
 800c0be:	f000 fc7d 	bl	800c9bc <__assert_func>
 800c0c2:	6922      	ldr	r2, [r4, #16]
 800c0c4:	3202      	adds	r2, #2
 800c0c6:	f104 010c 	add.w	r1, r4, #12
 800c0ca:	0092      	lsls	r2, r2, #2
 800c0cc:	300c      	adds	r0, #12
 800c0ce:	f7fe fb85 	bl	800a7dc <memcpy>
 800c0d2:	4621      	mov	r1, r4
 800c0d4:	4638      	mov	r0, r7
 800c0d6:	f7ff ffa3 	bl	800c020 <_Bfree>
 800c0da:	462c      	mov	r4, r5
 800c0dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c0e0:	3601      	adds	r6, #1
 800c0e2:	f8c3 8014 	str.w	r8, [r3, #20]
 800c0e6:	6126      	str	r6, [r4, #16]
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ee:	bf00      	nop
 800c0f0:	0800dc67 	.word	0x0800dc67
 800c0f4:	0800dc78 	.word	0x0800dc78

0800c0f8 <__hi0bits>:
 800c0f8:	0c03      	lsrs	r3, r0, #16
 800c0fa:	041b      	lsls	r3, r3, #16
 800c0fc:	b9d3      	cbnz	r3, 800c134 <__hi0bits+0x3c>
 800c0fe:	0400      	lsls	r0, r0, #16
 800c100:	2310      	movs	r3, #16
 800c102:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c106:	bf04      	itt	eq
 800c108:	0200      	lsleq	r0, r0, #8
 800c10a:	3308      	addeq	r3, #8
 800c10c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c110:	bf04      	itt	eq
 800c112:	0100      	lsleq	r0, r0, #4
 800c114:	3304      	addeq	r3, #4
 800c116:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c11a:	bf04      	itt	eq
 800c11c:	0080      	lsleq	r0, r0, #2
 800c11e:	3302      	addeq	r3, #2
 800c120:	2800      	cmp	r0, #0
 800c122:	db05      	blt.n	800c130 <__hi0bits+0x38>
 800c124:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c128:	f103 0301 	add.w	r3, r3, #1
 800c12c:	bf08      	it	eq
 800c12e:	2320      	moveq	r3, #32
 800c130:	4618      	mov	r0, r3
 800c132:	4770      	bx	lr
 800c134:	2300      	movs	r3, #0
 800c136:	e7e4      	b.n	800c102 <__hi0bits+0xa>

0800c138 <__lo0bits>:
 800c138:	6803      	ldr	r3, [r0, #0]
 800c13a:	f013 0207 	ands.w	r2, r3, #7
 800c13e:	4601      	mov	r1, r0
 800c140:	d00b      	beq.n	800c15a <__lo0bits+0x22>
 800c142:	07da      	lsls	r2, r3, #31
 800c144:	d424      	bmi.n	800c190 <__lo0bits+0x58>
 800c146:	0798      	lsls	r0, r3, #30
 800c148:	bf49      	itett	mi
 800c14a:	085b      	lsrmi	r3, r3, #1
 800c14c:	089b      	lsrpl	r3, r3, #2
 800c14e:	2001      	movmi	r0, #1
 800c150:	600b      	strmi	r3, [r1, #0]
 800c152:	bf5c      	itt	pl
 800c154:	600b      	strpl	r3, [r1, #0]
 800c156:	2002      	movpl	r0, #2
 800c158:	4770      	bx	lr
 800c15a:	b298      	uxth	r0, r3
 800c15c:	b9b0      	cbnz	r0, 800c18c <__lo0bits+0x54>
 800c15e:	0c1b      	lsrs	r3, r3, #16
 800c160:	2010      	movs	r0, #16
 800c162:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c166:	bf04      	itt	eq
 800c168:	0a1b      	lsreq	r3, r3, #8
 800c16a:	3008      	addeq	r0, #8
 800c16c:	071a      	lsls	r2, r3, #28
 800c16e:	bf04      	itt	eq
 800c170:	091b      	lsreq	r3, r3, #4
 800c172:	3004      	addeq	r0, #4
 800c174:	079a      	lsls	r2, r3, #30
 800c176:	bf04      	itt	eq
 800c178:	089b      	lsreq	r3, r3, #2
 800c17a:	3002      	addeq	r0, #2
 800c17c:	07da      	lsls	r2, r3, #31
 800c17e:	d403      	bmi.n	800c188 <__lo0bits+0x50>
 800c180:	085b      	lsrs	r3, r3, #1
 800c182:	f100 0001 	add.w	r0, r0, #1
 800c186:	d005      	beq.n	800c194 <__lo0bits+0x5c>
 800c188:	600b      	str	r3, [r1, #0]
 800c18a:	4770      	bx	lr
 800c18c:	4610      	mov	r0, r2
 800c18e:	e7e8      	b.n	800c162 <__lo0bits+0x2a>
 800c190:	2000      	movs	r0, #0
 800c192:	4770      	bx	lr
 800c194:	2020      	movs	r0, #32
 800c196:	4770      	bx	lr

0800c198 <__i2b>:
 800c198:	b510      	push	{r4, lr}
 800c19a:	460c      	mov	r4, r1
 800c19c:	2101      	movs	r1, #1
 800c19e:	f7ff feff 	bl	800bfa0 <_Balloc>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	b928      	cbnz	r0, 800c1b2 <__i2b+0x1a>
 800c1a6:	4b05      	ldr	r3, [pc, #20]	; (800c1bc <__i2b+0x24>)
 800c1a8:	4805      	ldr	r0, [pc, #20]	; (800c1c0 <__i2b+0x28>)
 800c1aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c1ae:	f000 fc05 	bl	800c9bc <__assert_func>
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	6144      	str	r4, [r0, #20]
 800c1b6:	6103      	str	r3, [r0, #16]
 800c1b8:	bd10      	pop	{r4, pc}
 800c1ba:	bf00      	nop
 800c1bc:	0800dc67 	.word	0x0800dc67
 800c1c0:	0800dc78 	.word	0x0800dc78

0800c1c4 <__multiply>:
 800c1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c8:	4614      	mov	r4, r2
 800c1ca:	690a      	ldr	r2, [r1, #16]
 800c1cc:	6923      	ldr	r3, [r4, #16]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	bfb8      	it	lt
 800c1d2:	460b      	movlt	r3, r1
 800c1d4:	460d      	mov	r5, r1
 800c1d6:	bfbc      	itt	lt
 800c1d8:	4625      	movlt	r5, r4
 800c1da:	461c      	movlt	r4, r3
 800c1dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c1e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c1e4:	68ab      	ldr	r3, [r5, #8]
 800c1e6:	6869      	ldr	r1, [r5, #4]
 800c1e8:	eb0a 0709 	add.w	r7, sl, r9
 800c1ec:	42bb      	cmp	r3, r7
 800c1ee:	b085      	sub	sp, #20
 800c1f0:	bfb8      	it	lt
 800c1f2:	3101      	addlt	r1, #1
 800c1f4:	f7ff fed4 	bl	800bfa0 <_Balloc>
 800c1f8:	b930      	cbnz	r0, 800c208 <__multiply+0x44>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	4b42      	ldr	r3, [pc, #264]	; (800c308 <__multiply+0x144>)
 800c1fe:	4843      	ldr	r0, [pc, #268]	; (800c30c <__multiply+0x148>)
 800c200:	f240 115d 	movw	r1, #349	; 0x15d
 800c204:	f000 fbda 	bl	800c9bc <__assert_func>
 800c208:	f100 0614 	add.w	r6, r0, #20
 800c20c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c210:	4633      	mov	r3, r6
 800c212:	2200      	movs	r2, #0
 800c214:	4543      	cmp	r3, r8
 800c216:	d31e      	bcc.n	800c256 <__multiply+0x92>
 800c218:	f105 0c14 	add.w	ip, r5, #20
 800c21c:	f104 0314 	add.w	r3, r4, #20
 800c220:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c224:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c228:	9202      	str	r2, [sp, #8]
 800c22a:	ebac 0205 	sub.w	r2, ip, r5
 800c22e:	3a15      	subs	r2, #21
 800c230:	f022 0203 	bic.w	r2, r2, #3
 800c234:	3204      	adds	r2, #4
 800c236:	f105 0115 	add.w	r1, r5, #21
 800c23a:	458c      	cmp	ip, r1
 800c23c:	bf38      	it	cc
 800c23e:	2204      	movcc	r2, #4
 800c240:	9201      	str	r2, [sp, #4]
 800c242:	9a02      	ldr	r2, [sp, #8]
 800c244:	9303      	str	r3, [sp, #12]
 800c246:	429a      	cmp	r2, r3
 800c248:	d808      	bhi.n	800c25c <__multiply+0x98>
 800c24a:	2f00      	cmp	r7, #0
 800c24c:	dc55      	bgt.n	800c2fa <__multiply+0x136>
 800c24e:	6107      	str	r7, [r0, #16]
 800c250:	b005      	add	sp, #20
 800c252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c256:	f843 2b04 	str.w	r2, [r3], #4
 800c25a:	e7db      	b.n	800c214 <__multiply+0x50>
 800c25c:	f8b3 a000 	ldrh.w	sl, [r3]
 800c260:	f1ba 0f00 	cmp.w	sl, #0
 800c264:	d020      	beq.n	800c2a8 <__multiply+0xe4>
 800c266:	f105 0e14 	add.w	lr, r5, #20
 800c26a:	46b1      	mov	r9, r6
 800c26c:	2200      	movs	r2, #0
 800c26e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c272:	f8d9 b000 	ldr.w	fp, [r9]
 800c276:	b2a1      	uxth	r1, r4
 800c278:	fa1f fb8b 	uxth.w	fp, fp
 800c27c:	fb0a b101 	mla	r1, sl, r1, fp
 800c280:	4411      	add	r1, r2
 800c282:	f8d9 2000 	ldr.w	r2, [r9]
 800c286:	0c24      	lsrs	r4, r4, #16
 800c288:	0c12      	lsrs	r2, r2, #16
 800c28a:	fb0a 2404 	mla	r4, sl, r4, r2
 800c28e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c292:	b289      	uxth	r1, r1
 800c294:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c298:	45f4      	cmp	ip, lr
 800c29a:	f849 1b04 	str.w	r1, [r9], #4
 800c29e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c2a2:	d8e4      	bhi.n	800c26e <__multiply+0xaa>
 800c2a4:	9901      	ldr	r1, [sp, #4]
 800c2a6:	5072      	str	r2, [r6, r1]
 800c2a8:	9a03      	ldr	r2, [sp, #12]
 800c2aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c2ae:	3304      	adds	r3, #4
 800c2b0:	f1b9 0f00 	cmp.w	r9, #0
 800c2b4:	d01f      	beq.n	800c2f6 <__multiply+0x132>
 800c2b6:	6834      	ldr	r4, [r6, #0]
 800c2b8:	f105 0114 	add.w	r1, r5, #20
 800c2bc:	46b6      	mov	lr, r6
 800c2be:	f04f 0a00 	mov.w	sl, #0
 800c2c2:	880a      	ldrh	r2, [r1, #0]
 800c2c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c2c8:	fb09 b202 	mla	r2, r9, r2, fp
 800c2cc:	4492      	add	sl, r2
 800c2ce:	b2a4      	uxth	r4, r4
 800c2d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c2d4:	f84e 4b04 	str.w	r4, [lr], #4
 800c2d8:	f851 4b04 	ldr.w	r4, [r1], #4
 800c2dc:	f8be 2000 	ldrh.w	r2, [lr]
 800c2e0:	0c24      	lsrs	r4, r4, #16
 800c2e2:	fb09 2404 	mla	r4, r9, r4, r2
 800c2e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c2ea:	458c      	cmp	ip, r1
 800c2ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c2f0:	d8e7      	bhi.n	800c2c2 <__multiply+0xfe>
 800c2f2:	9a01      	ldr	r2, [sp, #4]
 800c2f4:	50b4      	str	r4, [r6, r2]
 800c2f6:	3604      	adds	r6, #4
 800c2f8:	e7a3      	b.n	800c242 <__multiply+0x7e>
 800c2fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d1a5      	bne.n	800c24e <__multiply+0x8a>
 800c302:	3f01      	subs	r7, #1
 800c304:	e7a1      	b.n	800c24a <__multiply+0x86>
 800c306:	bf00      	nop
 800c308:	0800dc67 	.word	0x0800dc67
 800c30c:	0800dc78 	.word	0x0800dc78

0800c310 <__pow5mult>:
 800c310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c314:	4615      	mov	r5, r2
 800c316:	f012 0203 	ands.w	r2, r2, #3
 800c31a:	4606      	mov	r6, r0
 800c31c:	460f      	mov	r7, r1
 800c31e:	d007      	beq.n	800c330 <__pow5mult+0x20>
 800c320:	4c25      	ldr	r4, [pc, #148]	; (800c3b8 <__pow5mult+0xa8>)
 800c322:	3a01      	subs	r2, #1
 800c324:	2300      	movs	r3, #0
 800c326:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c32a:	f7ff fe9b 	bl	800c064 <__multadd>
 800c32e:	4607      	mov	r7, r0
 800c330:	10ad      	asrs	r5, r5, #2
 800c332:	d03d      	beq.n	800c3b0 <__pow5mult+0xa0>
 800c334:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c336:	b97c      	cbnz	r4, 800c358 <__pow5mult+0x48>
 800c338:	2010      	movs	r0, #16
 800c33a:	f7fe fa47 	bl	800a7cc <malloc>
 800c33e:	4602      	mov	r2, r0
 800c340:	6270      	str	r0, [r6, #36]	; 0x24
 800c342:	b928      	cbnz	r0, 800c350 <__pow5mult+0x40>
 800c344:	4b1d      	ldr	r3, [pc, #116]	; (800c3bc <__pow5mult+0xac>)
 800c346:	481e      	ldr	r0, [pc, #120]	; (800c3c0 <__pow5mult+0xb0>)
 800c348:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c34c:	f000 fb36 	bl	800c9bc <__assert_func>
 800c350:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c354:	6004      	str	r4, [r0, #0]
 800c356:	60c4      	str	r4, [r0, #12]
 800c358:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c35c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c360:	b94c      	cbnz	r4, 800c376 <__pow5mult+0x66>
 800c362:	f240 2171 	movw	r1, #625	; 0x271
 800c366:	4630      	mov	r0, r6
 800c368:	f7ff ff16 	bl	800c198 <__i2b>
 800c36c:	2300      	movs	r3, #0
 800c36e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c372:	4604      	mov	r4, r0
 800c374:	6003      	str	r3, [r0, #0]
 800c376:	f04f 0900 	mov.w	r9, #0
 800c37a:	07eb      	lsls	r3, r5, #31
 800c37c:	d50a      	bpl.n	800c394 <__pow5mult+0x84>
 800c37e:	4639      	mov	r1, r7
 800c380:	4622      	mov	r2, r4
 800c382:	4630      	mov	r0, r6
 800c384:	f7ff ff1e 	bl	800c1c4 <__multiply>
 800c388:	4639      	mov	r1, r7
 800c38a:	4680      	mov	r8, r0
 800c38c:	4630      	mov	r0, r6
 800c38e:	f7ff fe47 	bl	800c020 <_Bfree>
 800c392:	4647      	mov	r7, r8
 800c394:	106d      	asrs	r5, r5, #1
 800c396:	d00b      	beq.n	800c3b0 <__pow5mult+0xa0>
 800c398:	6820      	ldr	r0, [r4, #0]
 800c39a:	b938      	cbnz	r0, 800c3ac <__pow5mult+0x9c>
 800c39c:	4622      	mov	r2, r4
 800c39e:	4621      	mov	r1, r4
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	f7ff ff0f 	bl	800c1c4 <__multiply>
 800c3a6:	6020      	str	r0, [r4, #0]
 800c3a8:	f8c0 9000 	str.w	r9, [r0]
 800c3ac:	4604      	mov	r4, r0
 800c3ae:	e7e4      	b.n	800c37a <__pow5mult+0x6a>
 800c3b0:	4638      	mov	r0, r7
 800c3b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3b6:	bf00      	nop
 800c3b8:	0800ddc8 	.word	0x0800ddc8
 800c3bc:	0800dbf1 	.word	0x0800dbf1
 800c3c0:	0800dc78 	.word	0x0800dc78

0800c3c4 <__lshift>:
 800c3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3c8:	460c      	mov	r4, r1
 800c3ca:	6849      	ldr	r1, [r1, #4]
 800c3cc:	6923      	ldr	r3, [r4, #16]
 800c3ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c3d2:	68a3      	ldr	r3, [r4, #8]
 800c3d4:	4607      	mov	r7, r0
 800c3d6:	4691      	mov	r9, r2
 800c3d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3dc:	f108 0601 	add.w	r6, r8, #1
 800c3e0:	42b3      	cmp	r3, r6
 800c3e2:	db0b      	blt.n	800c3fc <__lshift+0x38>
 800c3e4:	4638      	mov	r0, r7
 800c3e6:	f7ff fddb 	bl	800bfa0 <_Balloc>
 800c3ea:	4605      	mov	r5, r0
 800c3ec:	b948      	cbnz	r0, 800c402 <__lshift+0x3e>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	4b28      	ldr	r3, [pc, #160]	; (800c494 <__lshift+0xd0>)
 800c3f2:	4829      	ldr	r0, [pc, #164]	; (800c498 <__lshift+0xd4>)
 800c3f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c3f8:	f000 fae0 	bl	800c9bc <__assert_func>
 800c3fc:	3101      	adds	r1, #1
 800c3fe:	005b      	lsls	r3, r3, #1
 800c400:	e7ee      	b.n	800c3e0 <__lshift+0x1c>
 800c402:	2300      	movs	r3, #0
 800c404:	f100 0114 	add.w	r1, r0, #20
 800c408:	f100 0210 	add.w	r2, r0, #16
 800c40c:	4618      	mov	r0, r3
 800c40e:	4553      	cmp	r3, sl
 800c410:	db33      	blt.n	800c47a <__lshift+0xb6>
 800c412:	6920      	ldr	r0, [r4, #16]
 800c414:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c418:	f104 0314 	add.w	r3, r4, #20
 800c41c:	f019 091f 	ands.w	r9, r9, #31
 800c420:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c424:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c428:	d02b      	beq.n	800c482 <__lshift+0xbe>
 800c42a:	f1c9 0e20 	rsb	lr, r9, #32
 800c42e:	468a      	mov	sl, r1
 800c430:	2200      	movs	r2, #0
 800c432:	6818      	ldr	r0, [r3, #0]
 800c434:	fa00 f009 	lsl.w	r0, r0, r9
 800c438:	4302      	orrs	r2, r0
 800c43a:	f84a 2b04 	str.w	r2, [sl], #4
 800c43e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c442:	459c      	cmp	ip, r3
 800c444:	fa22 f20e 	lsr.w	r2, r2, lr
 800c448:	d8f3      	bhi.n	800c432 <__lshift+0x6e>
 800c44a:	ebac 0304 	sub.w	r3, ip, r4
 800c44e:	3b15      	subs	r3, #21
 800c450:	f023 0303 	bic.w	r3, r3, #3
 800c454:	3304      	adds	r3, #4
 800c456:	f104 0015 	add.w	r0, r4, #21
 800c45a:	4584      	cmp	ip, r0
 800c45c:	bf38      	it	cc
 800c45e:	2304      	movcc	r3, #4
 800c460:	50ca      	str	r2, [r1, r3]
 800c462:	b10a      	cbz	r2, 800c468 <__lshift+0xa4>
 800c464:	f108 0602 	add.w	r6, r8, #2
 800c468:	3e01      	subs	r6, #1
 800c46a:	4638      	mov	r0, r7
 800c46c:	612e      	str	r6, [r5, #16]
 800c46e:	4621      	mov	r1, r4
 800c470:	f7ff fdd6 	bl	800c020 <_Bfree>
 800c474:	4628      	mov	r0, r5
 800c476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c47a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c47e:	3301      	adds	r3, #1
 800c480:	e7c5      	b.n	800c40e <__lshift+0x4a>
 800c482:	3904      	subs	r1, #4
 800c484:	f853 2b04 	ldr.w	r2, [r3], #4
 800c488:	f841 2f04 	str.w	r2, [r1, #4]!
 800c48c:	459c      	cmp	ip, r3
 800c48e:	d8f9      	bhi.n	800c484 <__lshift+0xc0>
 800c490:	e7ea      	b.n	800c468 <__lshift+0xa4>
 800c492:	bf00      	nop
 800c494:	0800dc67 	.word	0x0800dc67
 800c498:	0800dc78 	.word	0x0800dc78

0800c49c <__mcmp>:
 800c49c:	b530      	push	{r4, r5, lr}
 800c49e:	6902      	ldr	r2, [r0, #16]
 800c4a0:	690c      	ldr	r4, [r1, #16]
 800c4a2:	1b12      	subs	r2, r2, r4
 800c4a4:	d10e      	bne.n	800c4c4 <__mcmp+0x28>
 800c4a6:	f100 0314 	add.w	r3, r0, #20
 800c4aa:	3114      	adds	r1, #20
 800c4ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c4b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c4b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c4b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c4bc:	42a5      	cmp	r5, r4
 800c4be:	d003      	beq.n	800c4c8 <__mcmp+0x2c>
 800c4c0:	d305      	bcc.n	800c4ce <__mcmp+0x32>
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	bd30      	pop	{r4, r5, pc}
 800c4c8:	4283      	cmp	r3, r0
 800c4ca:	d3f3      	bcc.n	800c4b4 <__mcmp+0x18>
 800c4cc:	e7fa      	b.n	800c4c4 <__mcmp+0x28>
 800c4ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4d2:	e7f7      	b.n	800c4c4 <__mcmp+0x28>

0800c4d4 <__mdiff>:
 800c4d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d8:	460c      	mov	r4, r1
 800c4da:	4606      	mov	r6, r0
 800c4dc:	4611      	mov	r1, r2
 800c4de:	4620      	mov	r0, r4
 800c4e0:	4617      	mov	r7, r2
 800c4e2:	f7ff ffdb 	bl	800c49c <__mcmp>
 800c4e6:	1e05      	subs	r5, r0, #0
 800c4e8:	d110      	bne.n	800c50c <__mdiff+0x38>
 800c4ea:	4629      	mov	r1, r5
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	f7ff fd57 	bl	800bfa0 <_Balloc>
 800c4f2:	b930      	cbnz	r0, 800c502 <__mdiff+0x2e>
 800c4f4:	4b39      	ldr	r3, [pc, #228]	; (800c5dc <__mdiff+0x108>)
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	f240 2132 	movw	r1, #562	; 0x232
 800c4fc:	4838      	ldr	r0, [pc, #224]	; (800c5e0 <__mdiff+0x10c>)
 800c4fe:	f000 fa5d 	bl	800c9bc <__assert_func>
 800c502:	2301      	movs	r3, #1
 800c504:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c50c:	bfa4      	itt	ge
 800c50e:	463b      	movge	r3, r7
 800c510:	4627      	movge	r7, r4
 800c512:	4630      	mov	r0, r6
 800c514:	6879      	ldr	r1, [r7, #4]
 800c516:	bfa6      	itte	ge
 800c518:	461c      	movge	r4, r3
 800c51a:	2500      	movge	r5, #0
 800c51c:	2501      	movlt	r5, #1
 800c51e:	f7ff fd3f 	bl	800bfa0 <_Balloc>
 800c522:	b920      	cbnz	r0, 800c52e <__mdiff+0x5a>
 800c524:	4b2d      	ldr	r3, [pc, #180]	; (800c5dc <__mdiff+0x108>)
 800c526:	4602      	mov	r2, r0
 800c528:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c52c:	e7e6      	b.n	800c4fc <__mdiff+0x28>
 800c52e:	693e      	ldr	r6, [r7, #16]
 800c530:	60c5      	str	r5, [r0, #12]
 800c532:	6925      	ldr	r5, [r4, #16]
 800c534:	f107 0114 	add.w	r1, r7, #20
 800c538:	f104 0914 	add.w	r9, r4, #20
 800c53c:	f100 0e14 	add.w	lr, r0, #20
 800c540:	f107 0210 	add.w	r2, r7, #16
 800c544:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c548:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c54c:	46f2      	mov	sl, lr
 800c54e:	2700      	movs	r7, #0
 800c550:	f859 3b04 	ldr.w	r3, [r9], #4
 800c554:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c558:	fa1f f883 	uxth.w	r8, r3
 800c55c:	fa17 f78b 	uxtah	r7, r7, fp
 800c560:	0c1b      	lsrs	r3, r3, #16
 800c562:	eba7 0808 	sub.w	r8, r7, r8
 800c566:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c56a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c56e:	fa1f f888 	uxth.w	r8, r8
 800c572:	141f      	asrs	r7, r3, #16
 800c574:	454d      	cmp	r5, r9
 800c576:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c57a:	f84a 3b04 	str.w	r3, [sl], #4
 800c57e:	d8e7      	bhi.n	800c550 <__mdiff+0x7c>
 800c580:	1b2b      	subs	r3, r5, r4
 800c582:	3b15      	subs	r3, #21
 800c584:	f023 0303 	bic.w	r3, r3, #3
 800c588:	3304      	adds	r3, #4
 800c58a:	3415      	adds	r4, #21
 800c58c:	42a5      	cmp	r5, r4
 800c58e:	bf38      	it	cc
 800c590:	2304      	movcc	r3, #4
 800c592:	4419      	add	r1, r3
 800c594:	4473      	add	r3, lr
 800c596:	469e      	mov	lr, r3
 800c598:	460d      	mov	r5, r1
 800c59a:	4565      	cmp	r5, ip
 800c59c:	d30e      	bcc.n	800c5bc <__mdiff+0xe8>
 800c59e:	f10c 0203 	add.w	r2, ip, #3
 800c5a2:	1a52      	subs	r2, r2, r1
 800c5a4:	f022 0203 	bic.w	r2, r2, #3
 800c5a8:	3903      	subs	r1, #3
 800c5aa:	458c      	cmp	ip, r1
 800c5ac:	bf38      	it	cc
 800c5ae:	2200      	movcc	r2, #0
 800c5b0:	441a      	add	r2, r3
 800c5b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c5b6:	b17b      	cbz	r3, 800c5d8 <__mdiff+0x104>
 800c5b8:	6106      	str	r6, [r0, #16]
 800c5ba:	e7a5      	b.n	800c508 <__mdiff+0x34>
 800c5bc:	f855 8b04 	ldr.w	r8, [r5], #4
 800c5c0:	fa17 f488 	uxtah	r4, r7, r8
 800c5c4:	1422      	asrs	r2, r4, #16
 800c5c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c5ca:	b2a4      	uxth	r4, r4
 800c5cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c5d0:	f84e 4b04 	str.w	r4, [lr], #4
 800c5d4:	1417      	asrs	r7, r2, #16
 800c5d6:	e7e0      	b.n	800c59a <__mdiff+0xc6>
 800c5d8:	3e01      	subs	r6, #1
 800c5da:	e7ea      	b.n	800c5b2 <__mdiff+0xde>
 800c5dc:	0800dc67 	.word	0x0800dc67
 800c5e0:	0800dc78 	.word	0x0800dc78

0800c5e4 <__d2b>:
 800c5e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c5e8:	4689      	mov	r9, r1
 800c5ea:	2101      	movs	r1, #1
 800c5ec:	ec57 6b10 	vmov	r6, r7, d0
 800c5f0:	4690      	mov	r8, r2
 800c5f2:	f7ff fcd5 	bl	800bfa0 <_Balloc>
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	b930      	cbnz	r0, 800c608 <__d2b+0x24>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	4b25      	ldr	r3, [pc, #148]	; (800c694 <__d2b+0xb0>)
 800c5fe:	4826      	ldr	r0, [pc, #152]	; (800c698 <__d2b+0xb4>)
 800c600:	f240 310a 	movw	r1, #778	; 0x30a
 800c604:	f000 f9da 	bl	800c9bc <__assert_func>
 800c608:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c60c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c610:	bb35      	cbnz	r5, 800c660 <__d2b+0x7c>
 800c612:	2e00      	cmp	r6, #0
 800c614:	9301      	str	r3, [sp, #4]
 800c616:	d028      	beq.n	800c66a <__d2b+0x86>
 800c618:	4668      	mov	r0, sp
 800c61a:	9600      	str	r6, [sp, #0]
 800c61c:	f7ff fd8c 	bl	800c138 <__lo0bits>
 800c620:	9900      	ldr	r1, [sp, #0]
 800c622:	b300      	cbz	r0, 800c666 <__d2b+0x82>
 800c624:	9a01      	ldr	r2, [sp, #4]
 800c626:	f1c0 0320 	rsb	r3, r0, #32
 800c62a:	fa02 f303 	lsl.w	r3, r2, r3
 800c62e:	430b      	orrs	r3, r1
 800c630:	40c2      	lsrs	r2, r0
 800c632:	6163      	str	r3, [r4, #20]
 800c634:	9201      	str	r2, [sp, #4]
 800c636:	9b01      	ldr	r3, [sp, #4]
 800c638:	61a3      	str	r3, [r4, #24]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	bf14      	ite	ne
 800c63e:	2202      	movne	r2, #2
 800c640:	2201      	moveq	r2, #1
 800c642:	6122      	str	r2, [r4, #16]
 800c644:	b1d5      	cbz	r5, 800c67c <__d2b+0x98>
 800c646:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c64a:	4405      	add	r5, r0
 800c64c:	f8c9 5000 	str.w	r5, [r9]
 800c650:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c654:	f8c8 0000 	str.w	r0, [r8]
 800c658:	4620      	mov	r0, r4
 800c65a:	b003      	add	sp, #12
 800c65c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c660:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c664:	e7d5      	b.n	800c612 <__d2b+0x2e>
 800c666:	6161      	str	r1, [r4, #20]
 800c668:	e7e5      	b.n	800c636 <__d2b+0x52>
 800c66a:	a801      	add	r0, sp, #4
 800c66c:	f7ff fd64 	bl	800c138 <__lo0bits>
 800c670:	9b01      	ldr	r3, [sp, #4]
 800c672:	6163      	str	r3, [r4, #20]
 800c674:	2201      	movs	r2, #1
 800c676:	6122      	str	r2, [r4, #16]
 800c678:	3020      	adds	r0, #32
 800c67a:	e7e3      	b.n	800c644 <__d2b+0x60>
 800c67c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c680:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c684:	f8c9 0000 	str.w	r0, [r9]
 800c688:	6918      	ldr	r0, [r3, #16]
 800c68a:	f7ff fd35 	bl	800c0f8 <__hi0bits>
 800c68e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c692:	e7df      	b.n	800c654 <__d2b+0x70>
 800c694:	0800dc67 	.word	0x0800dc67
 800c698:	0800dc78 	.word	0x0800dc78

0800c69c <_calloc_r>:
 800c69c:	b513      	push	{r0, r1, r4, lr}
 800c69e:	434a      	muls	r2, r1
 800c6a0:	4611      	mov	r1, r2
 800c6a2:	9201      	str	r2, [sp, #4]
 800c6a4:	f7fe f900 	bl	800a8a8 <_malloc_r>
 800c6a8:	4604      	mov	r4, r0
 800c6aa:	b118      	cbz	r0, 800c6b4 <_calloc_r+0x18>
 800c6ac:	9a01      	ldr	r2, [sp, #4]
 800c6ae:	2100      	movs	r1, #0
 800c6b0:	f7fe f8a2 	bl	800a7f8 <memset>
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	b002      	add	sp, #8
 800c6b8:	bd10      	pop	{r4, pc}

0800c6ba <_realloc_r>:
 800c6ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6bc:	4607      	mov	r7, r0
 800c6be:	4614      	mov	r4, r2
 800c6c0:	460e      	mov	r6, r1
 800c6c2:	b921      	cbnz	r1, 800c6ce <_realloc_r+0x14>
 800c6c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c6c8:	4611      	mov	r1, r2
 800c6ca:	f7fe b8ed 	b.w	800a8a8 <_malloc_r>
 800c6ce:	b922      	cbnz	r2, 800c6da <_realloc_r+0x20>
 800c6d0:	f7fe f89a 	bl	800a808 <_free_r>
 800c6d4:	4625      	mov	r5, r4
 800c6d6:	4628      	mov	r0, r5
 800c6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6da:	f000 f9ce 	bl	800ca7a <_malloc_usable_size_r>
 800c6de:	42a0      	cmp	r0, r4
 800c6e0:	d20f      	bcs.n	800c702 <_realloc_r+0x48>
 800c6e2:	4621      	mov	r1, r4
 800c6e4:	4638      	mov	r0, r7
 800c6e6:	f7fe f8df 	bl	800a8a8 <_malloc_r>
 800c6ea:	4605      	mov	r5, r0
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	d0f2      	beq.n	800c6d6 <_realloc_r+0x1c>
 800c6f0:	4631      	mov	r1, r6
 800c6f2:	4622      	mov	r2, r4
 800c6f4:	f7fe f872 	bl	800a7dc <memcpy>
 800c6f8:	4631      	mov	r1, r6
 800c6fa:	4638      	mov	r0, r7
 800c6fc:	f7fe f884 	bl	800a808 <_free_r>
 800c700:	e7e9      	b.n	800c6d6 <_realloc_r+0x1c>
 800c702:	4635      	mov	r5, r6
 800c704:	e7e7      	b.n	800c6d6 <_realloc_r+0x1c>

0800c706 <__ssputs_r>:
 800c706:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c70a:	688e      	ldr	r6, [r1, #8]
 800c70c:	429e      	cmp	r6, r3
 800c70e:	4682      	mov	sl, r0
 800c710:	460c      	mov	r4, r1
 800c712:	4690      	mov	r8, r2
 800c714:	461f      	mov	r7, r3
 800c716:	d838      	bhi.n	800c78a <__ssputs_r+0x84>
 800c718:	898a      	ldrh	r2, [r1, #12]
 800c71a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c71e:	d032      	beq.n	800c786 <__ssputs_r+0x80>
 800c720:	6825      	ldr	r5, [r4, #0]
 800c722:	6909      	ldr	r1, [r1, #16]
 800c724:	eba5 0901 	sub.w	r9, r5, r1
 800c728:	6965      	ldr	r5, [r4, #20]
 800c72a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c72e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c732:	3301      	adds	r3, #1
 800c734:	444b      	add	r3, r9
 800c736:	106d      	asrs	r5, r5, #1
 800c738:	429d      	cmp	r5, r3
 800c73a:	bf38      	it	cc
 800c73c:	461d      	movcc	r5, r3
 800c73e:	0553      	lsls	r3, r2, #21
 800c740:	d531      	bpl.n	800c7a6 <__ssputs_r+0xa0>
 800c742:	4629      	mov	r1, r5
 800c744:	f7fe f8b0 	bl	800a8a8 <_malloc_r>
 800c748:	4606      	mov	r6, r0
 800c74a:	b950      	cbnz	r0, 800c762 <__ssputs_r+0x5c>
 800c74c:	230c      	movs	r3, #12
 800c74e:	f8ca 3000 	str.w	r3, [sl]
 800c752:	89a3      	ldrh	r3, [r4, #12]
 800c754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c758:	81a3      	strh	r3, [r4, #12]
 800c75a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c762:	6921      	ldr	r1, [r4, #16]
 800c764:	464a      	mov	r2, r9
 800c766:	f7fe f839 	bl	800a7dc <memcpy>
 800c76a:	89a3      	ldrh	r3, [r4, #12]
 800c76c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c774:	81a3      	strh	r3, [r4, #12]
 800c776:	6126      	str	r6, [r4, #16]
 800c778:	6165      	str	r5, [r4, #20]
 800c77a:	444e      	add	r6, r9
 800c77c:	eba5 0509 	sub.w	r5, r5, r9
 800c780:	6026      	str	r6, [r4, #0]
 800c782:	60a5      	str	r5, [r4, #8]
 800c784:	463e      	mov	r6, r7
 800c786:	42be      	cmp	r6, r7
 800c788:	d900      	bls.n	800c78c <__ssputs_r+0x86>
 800c78a:	463e      	mov	r6, r7
 800c78c:	4632      	mov	r2, r6
 800c78e:	6820      	ldr	r0, [r4, #0]
 800c790:	4641      	mov	r1, r8
 800c792:	f000 f958 	bl	800ca46 <memmove>
 800c796:	68a3      	ldr	r3, [r4, #8]
 800c798:	6822      	ldr	r2, [r4, #0]
 800c79a:	1b9b      	subs	r3, r3, r6
 800c79c:	4432      	add	r2, r6
 800c79e:	60a3      	str	r3, [r4, #8]
 800c7a0:	6022      	str	r2, [r4, #0]
 800c7a2:	2000      	movs	r0, #0
 800c7a4:	e7db      	b.n	800c75e <__ssputs_r+0x58>
 800c7a6:	462a      	mov	r2, r5
 800c7a8:	f7ff ff87 	bl	800c6ba <_realloc_r>
 800c7ac:	4606      	mov	r6, r0
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	d1e1      	bne.n	800c776 <__ssputs_r+0x70>
 800c7b2:	6921      	ldr	r1, [r4, #16]
 800c7b4:	4650      	mov	r0, sl
 800c7b6:	f7fe f827 	bl	800a808 <_free_r>
 800c7ba:	e7c7      	b.n	800c74c <__ssputs_r+0x46>

0800c7bc <_svfiprintf_r>:
 800c7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c0:	4698      	mov	r8, r3
 800c7c2:	898b      	ldrh	r3, [r1, #12]
 800c7c4:	061b      	lsls	r3, r3, #24
 800c7c6:	b09d      	sub	sp, #116	; 0x74
 800c7c8:	4607      	mov	r7, r0
 800c7ca:	460d      	mov	r5, r1
 800c7cc:	4614      	mov	r4, r2
 800c7ce:	d50e      	bpl.n	800c7ee <_svfiprintf_r+0x32>
 800c7d0:	690b      	ldr	r3, [r1, #16]
 800c7d2:	b963      	cbnz	r3, 800c7ee <_svfiprintf_r+0x32>
 800c7d4:	2140      	movs	r1, #64	; 0x40
 800c7d6:	f7fe f867 	bl	800a8a8 <_malloc_r>
 800c7da:	6028      	str	r0, [r5, #0]
 800c7dc:	6128      	str	r0, [r5, #16]
 800c7de:	b920      	cbnz	r0, 800c7ea <_svfiprintf_r+0x2e>
 800c7e0:	230c      	movs	r3, #12
 800c7e2:	603b      	str	r3, [r7, #0]
 800c7e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7e8:	e0d1      	b.n	800c98e <_svfiprintf_r+0x1d2>
 800c7ea:	2340      	movs	r3, #64	; 0x40
 800c7ec:	616b      	str	r3, [r5, #20]
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c7f2:	2320      	movs	r3, #32
 800c7f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7fc:	2330      	movs	r3, #48	; 0x30
 800c7fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c9a8 <_svfiprintf_r+0x1ec>
 800c802:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c806:	f04f 0901 	mov.w	r9, #1
 800c80a:	4623      	mov	r3, r4
 800c80c:	469a      	mov	sl, r3
 800c80e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c812:	b10a      	cbz	r2, 800c818 <_svfiprintf_r+0x5c>
 800c814:	2a25      	cmp	r2, #37	; 0x25
 800c816:	d1f9      	bne.n	800c80c <_svfiprintf_r+0x50>
 800c818:	ebba 0b04 	subs.w	fp, sl, r4
 800c81c:	d00b      	beq.n	800c836 <_svfiprintf_r+0x7a>
 800c81e:	465b      	mov	r3, fp
 800c820:	4622      	mov	r2, r4
 800c822:	4629      	mov	r1, r5
 800c824:	4638      	mov	r0, r7
 800c826:	f7ff ff6e 	bl	800c706 <__ssputs_r>
 800c82a:	3001      	adds	r0, #1
 800c82c:	f000 80aa 	beq.w	800c984 <_svfiprintf_r+0x1c8>
 800c830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c832:	445a      	add	r2, fp
 800c834:	9209      	str	r2, [sp, #36]	; 0x24
 800c836:	f89a 3000 	ldrb.w	r3, [sl]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	f000 80a2 	beq.w	800c984 <_svfiprintf_r+0x1c8>
 800c840:	2300      	movs	r3, #0
 800c842:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c84a:	f10a 0a01 	add.w	sl, sl, #1
 800c84e:	9304      	str	r3, [sp, #16]
 800c850:	9307      	str	r3, [sp, #28]
 800c852:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c856:	931a      	str	r3, [sp, #104]	; 0x68
 800c858:	4654      	mov	r4, sl
 800c85a:	2205      	movs	r2, #5
 800c85c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c860:	4851      	ldr	r0, [pc, #324]	; (800c9a8 <_svfiprintf_r+0x1ec>)
 800c862:	f7f3 fcdd 	bl	8000220 <memchr>
 800c866:	9a04      	ldr	r2, [sp, #16]
 800c868:	b9d8      	cbnz	r0, 800c8a2 <_svfiprintf_r+0xe6>
 800c86a:	06d0      	lsls	r0, r2, #27
 800c86c:	bf44      	itt	mi
 800c86e:	2320      	movmi	r3, #32
 800c870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c874:	0711      	lsls	r1, r2, #28
 800c876:	bf44      	itt	mi
 800c878:	232b      	movmi	r3, #43	; 0x2b
 800c87a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c87e:	f89a 3000 	ldrb.w	r3, [sl]
 800c882:	2b2a      	cmp	r3, #42	; 0x2a
 800c884:	d015      	beq.n	800c8b2 <_svfiprintf_r+0xf6>
 800c886:	9a07      	ldr	r2, [sp, #28]
 800c888:	4654      	mov	r4, sl
 800c88a:	2000      	movs	r0, #0
 800c88c:	f04f 0c0a 	mov.w	ip, #10
 800c890:	4621      	mov	r1, r4
 800c892:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c896:	3b30      	subs	r3, #48	; 0x30
 800c898:	2b09      	cmp	r3, #9
 800c89a:	d94e      	bls.n	800c93a <_svfiprintf_r+0x17e>
 800c89c:	b1b0      	cbz	r0, 800c8cc <_svfiprintf_r+0x110>
 800c89e:	9207      	str	r2, [sp, #28]
 800c8a0:	e014      	b.n	800c8cc <_svfiprintf_r+0x110>
 800c8a2:	eba0 0308 	sub.w	r3, r0, r8
 800c8a6:	fa09 f303 	lsl.w	r3, r9, r3
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	9304      	str	r3, [sp, #16]
 800c8ae:	46a2      	mov	sl, r4
 800c8b0:	e7d2      	b.n	800c858 <_svfiprintf_r+0x9c>
 800c8b2:	9b03      	ldr	r3, [sp, #12]
 800c8b4:	1d19      	adds	r1, r3, #4
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	9103      	str	r1, [sp, #12]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	bfbb      	ittet	lt
 800c8be:	425b      	neglt	r3, r3
 800c8c0:	f042 0202 	orrlt.w	r2, r2, #2
 800c8c4:	9307      	strge	r3, [sp, #28]
 800c8c6:	9307      	strlt	r3, [sp, #28]
 800c8c8:	bfb8      	it	lt
 800c8ca:	9204      	strlt	r2, [sp, #16]
 800c8cc:	7823      	ldrb	r3, [r4, #0]
 800c8ce:	2b2e      	cmp	r3, #46	; 0x2e
 800c8d0:	d10c      	bne.n	800c8ec <_svfiprintf_r+0x130>
 800c8d2:	7863      	ldrb	r3, [r4, #1]
 800c8d4:	2b2a      	cmp	r3, #42	; 0x2a
 800c8d6:	d135      	bne.n	800c944 <_svfiprintf_r+0x188>
 800c8d8:	9b03      	ldr	r3, [sp, #12]
 800c8da:	1d1a      	adds	r2, r3, #4
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	9203      	str	r2, [sp, #12]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	bfb8      	it	lt
 800c8e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c8e8:	3402      	adds	r4, #2
 800c8ea:	9305      	str	r3, [sp, #20]
 800c8ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c9b8 <_svfiprintf_r+0x1fc>
 800c8f0:	7821      	ldrb	r1, [r4, #0]
 800c8f2:	2203      	movs	r2, #3
 800c8f4:	4650      	mov	r0, sl
 800c8f6:	f7f3 fc93 	bl	8000220 <memchr>
 800c8fa:	b140      	cbz	r0, 800c90e <_svfiprintf_r+0x152>
 800c8fc:	2340      	movs	r3, #64	; 0x40
 800c8fe:	eba0 000a 	sub.w	r0, r0, sl
 800c902:	fa03 f000 	lsl.w	r0, r3, r0
 800c906:	9b04      	ldr	r3, [sp, #16]
 800c908:	4303      	orrs	r3, r0
 800c90a:	3401      	adds	r4, #1
 800c90c:	9304      	str	r3, [sp, #16]
 800c90e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c912:	4826      	ldr	r0, [pc, #152]	; (800c9ac <_svfiprintf_r+0x1f0>)
 800c914:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c918:	2206      	movs	r2, #6
 800c91a:	f7f3 fc81 	bl	8000220 <memchr>
 800c91e:	2800      	cmp	r0, #0
 800c920:	d038      	beq.n	800c994 <_svfiprintf_r+0x1d8>
 800c922:	4b23      	ldr	r3, [pc, #140]	; (800c9b0 <_svfiprintf_r+0x1f4>)
 800c924:	bb1b      	cbnz	r3, 800c96e <_svfiprintf_r+0x1b2>
 800c926:	9b03      	ldr	r3, [sp, #12]
 800c928:	3307      	adds	r3, #7
 800c92a:	f023 0307 	bic.w	r3, r3, #7
 800c92e:	3308      	adds	r3, #8
 800c930:	9303      	str	r3, [sp, #12]
 800c932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c934:	4433      	add	r3, r6
 800c936:	9309      	str	r3, [sp, #36]	; 0x24
 800c938:	e767      	b.n	800c80a <_svfiprintf_r+0x4e>
 800c93a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c93e:	460c      	mov	r4, r1
 800c940:	2001      	movs	r0, #1
 800c942:	e7a5      	b.n	800c890 <_svfiprintf_r+0xd4>
 800c944:	2300      	movs	r3, #0
 800c946:	3401      	adds	r4, #1
 800c948:	9305      	str	r3, [sp, #20]
 800c94a:	4619      	mov	r1, r3
 800c94c:	f04f 0c0a 	mov.w	ip, #10
 800c950:	4620      	mov	r0, r4
 800c952:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c956:	3a30      	subs	r2, #48	; 0x30
 800c958:	2a09      	cmp	r2, #9
 800c95a:	d903      	bls.n	800c964 <_svfiprintf_r+0x1a8>
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d0c5      	beq.n	800c8ec <_svfiprintf_r+0x130>
 800c960:	9105      	str	r1, [sp, #20]
 800c962:	e7c3      	b.n	800c8ec <_svfiprintf_r+0x130>
 800c964:	fb0c 2101 	mla	r1, ip, r1, r2
 800c968:	4604      	mov	r4, r0
 800c96a:	2301      	movs	r3, #1
 800c96c:	e7f0      	b.n	800c950 <_svfiprintf_r+0x194>
 800c96e:	ab03      	add	r3, sp, #12
 800c970:	9300      	str	r3, [sp, #0]
 800c972:	462a      	mov	r2, r5
 800c974:	4b0f      	ldr	r3, [pc, #60]	; (800c9b4 <_svfiprintf_r+0x1f8>)
 800c976:	a904      	add	r1, sp, #16
 800c978:	4638      	mov	r0, r7
 800c97a:	f7fe f88f 	bl	800aa9c <_printf_float>
 800c97e:	1c42      	adds	r2, r0, #1
 800c980:	4606      	mov	r6, r0
 800c982:	d1d6      	bne.n	800c932 <_svfiprintf_r+0x176>
 800c984:	89ab      	ldrh	r3, [r5, #12]
 800c986:	065b      	lsls	r3, r3, #25
 800c988:	f53f af2c 	bmi.w	800c7e4 <_svfiprintf_r+0x28>
 800c98c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c98e:	b01d      	add	sp, #116	; 0x74
 800c990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c994:	ab03      	add	r3, sp, #12
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	462a      	mov	r2, r5
 800c99a:	4b06      	ldr	r3, [pc, #24]	; (800c9b4 <_svfiprintf_r+0x1f8>)
 800c99c:	a904      	add	r1, sp, #16
 800c99e:	4638      	mov	r0, r7
 800c9a0:	f7fe fb20 	bl	800afe4 <_printf_i>
 800c9a4:	e7eb      	b.n	800c97e <_svfiprintf_r+0x1c2>
 800c9a6:	bf00      	nop
 800c9a8:	0800ddd4 	.word	0x0800ddd4
 800c9ac:	0800ddde 	.word	0x0800ddde
 800c9b0:	0800aa9d 	.word	0x0800aa9d
 800c9b4:	0800c707 	.word	0x0800c707
 800c9b8:	0800ddda 	.word	0x0800ddda

0800c9bc <__assert_func>:
 800c9bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9be:	4614      	mov	r4, r2
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	4b09      	ldr	r3, [pc, #36]	; (800c9e8 <__assert_func+0x2c>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4605      	mov	r5, r0
 800c9c8:	68d8      	ldr	r0, [r3, #12]
 800c9ca:	b14c      	cbz	r4, 800c9e0 <__assert_func+0x24>
 800c9cc:	4b07      	ldr	r3, [pc, #28]	; (800c9ec <__assert_func+0x30>)
 800c9ce:	9100      	str	r1, [sp, #0]
 800c9d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c9d4:	4906      	ldr	r1, [pc, #24]	; (800c9f0 <__assert_func+0x34>)
 800c9d6:	462b      	mov	r3, r5
 800c9d8:	f000 f80e 	bl	800c9f8 <fiprintf>
 800c9dc:	f000 fa7c 	bl	800ced8 <abort>
 800c9e0:	4b04      	ldr	r3, [pc, #16]	; (800c9f4 <__assert_func+0x38>)
 800c9e2:	461c      	mov	r4, r3
 800c9e4:	e7f3      	b.n	800c9ce <__assert_func+0x12>
 800c9e6:	bf00      	nop
 800c9e8:	200005e4 	.word	0x200005e4
 800c9ec:	0800dde5 	.word	0x0800dde5
 800c9f0:	0800ddf2 	.word	0x0800ddf2
 800c9f4:	0800de20 	.word	0x0800de20

0800c9f8 <fiprintf>:
 800c9f8:	b40e      	push	{r1, r2, r3}
 800c9fa:	b503      	push	{r0, r1, lr}
 800c9fc:	4601      	mov	r1, r0
 800c9fe:	ab03      	add	r3, sp, #12
 800ca00:	4805      	ldr	r0, [pc, #20]	; (800ca18 <fiprintf+0x20>)
 800ca02:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca06:	6800      	ldr	r0, [r0, #0]
 800ca08:	9301      	str	r3, [sp, #4]
 800ca0a:	f000 f867 	bl	800cadc <_vfiprintf_r>
 800ca0e:	b002      	add	sp, #8
 800ca10:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca14:	b003      	add	sp, #12
 800ca16:	4770      	bx	lr
 800ca18:	200005e4 	.word	0x200005e4

0800ca1c <__retarget_lock_init_recursive>:
 800ca1c:	4770      	bx	lr

0800ca1e <__retarget_lock_acquire_recursive>:
 800ca1e:	4770      	bx	lr

0800ca20 <__retarget_lock_release_recursive>:
 800ca20:	4770      	bx	lr

0800ca22 <__ascii_mbtowc>:
 800ca22:	b082      	sub	sp, #8
 800ca24:	b901      	cbnz	r1, 800ca28 <__ascii_mbtowc+0x6>
 800ca26:	a901      	add	r1, sp, #4
 800ca28:	b142      	cbz	r2, 800ca3c <__ascii_mbtowc+0x1a>
 800ca2a:	b14b      	cbz	r3, 800ca40 <__ascii_mbtowc+0x1e>
 800ca2c:	7813      	ldrb	r3, [r2, #0]
 800ca2e:	600b      	str	r3, [r1, #0]
 800ca30:	7812      	ldrb	r2, [r2, #0]
 800ca32:	1e10      	subs	r0, r2, #0
 800ca34:	bf18      	it	ne
 800ca36:	2001      	movne	r0, #1
 800ca38:	b002      	add	sp, #8
 800ca3a:	4770      	bx	lr
 800ca3c:	4610      	mov	r0, r2
 800ca3e:	e7fb      	b.n	800ca38 <__ascii_mbtowc+0x16>
 800ca40:	f06f 0001 	mvn.w	r0, #1
 800ca44:	e7f8      	b.n	800ca38 <__ascii_mbtowc+0x16>

0800ca46 <memmove>:
 800ca46:	4288      	cmp	r0, r1
 800ca48:	b510      	push	{r4, lr}
 800ca4a:	eb01 0402 	add.w	r4, r1, r2
 800ca4e:	d902      	bls.n	800ca56 <memmove+0x10>
 800ca50:	4284      	cmp	r4, r0
 800ca52:	4623      	mov	r3, r4
 800ca54:	d807      	bhi.n	800ca66 <memmove+0x20>
 800ca56:	1e43      	subs	r3, r0, #1
 800ca58:	42a1      	cmp	r1, r4
 800ca5a:	d008      	beq.n	800ca6e <memmove+0x28>
 800ca5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca60:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca64:	e7f8      	b.n	800ca58 <memmove+0x12>
 800ca66:	4402      	add	r2, r0
 800ca68:	4601      	mov	r1, r0
 800ca6a:	428a      	cmp	r2, r1
 800ca6c:	d100      	bne.n	800ca70 <memmove+0x2a>
 800ca6e:	bd10      	pop	{r4, pc}
 800ca70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca74:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca78:	e7f7      	b.n	800ca6a <memmove+0x24>

0800ca7a <_malloc_usable_size_r>:
 800ca7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca7e:	1f18      	subs	r0, r3, #4
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	bfbc      	itt	lt
 800ca84:	580b      	ldrlt	r3, [r1, r0]
 800ca86:	18c0      	addlt	r0, r0, r3
 800ca88:	4770      	bx	lr

0800ca8a <__sfputc_r>:
 800ca8a:	6893      	ldr	r3, [r2, #8]
 800ca8c:	3b01      	subs	r3, #1
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	b410      	push	{r4}
 800ca92:	6093      	str	r3, [r2, #8]
 800ca94:	da08      	bge.n	800caa8 <__sfputc_r+0x1e>
 800ca96:	6994      	ldr	r4, [r2, #24]
 800ca98:	42a3      	cmp	r3, r4
 800ca9a:	db01      	blt.n	800caa0 <__sfputc_r+0x16>
 800ca9c:	290a      	cmp	r1, #10
 800ca9e:	d103      	bne.n	800caa8 <__sfputc_r+0x1e>
 800caa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800caa4:	f000 b94a 	b.w	800cd3c <__swbuf_r>
 800caa8:	6813      	ldr	r3, [r2, #0]
 800caaa:	1c58      	adds	r0, r3, #1
 800caac:	6010      	str	r0, [r2, #0]
 800caae:	7019      	strb	r1, [r3, #0]
 800cab0:	4608      	mov	r0, r1
 800cab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cab6:	4770      	bx	lr

0800cab8 <__sfputs_r>:
 800cab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caba:	4606      	mov	r6, r0
 800cabc:	460f      	mov	r7, r1
 800cabe:	4614      	mov	r4, r2
 800cac0:	18d5      	adds	r5, r2, r3
 800cac2:	42ac      	cmp	r4, r5
 800cac4:	d101      	bne.n	800caca <__sfputs_r+0x12>
 800cac6:	2000      	movs	r0, #0
 800cac8:	e007      	b.n	800cada <__sfputs_r+0x22>
 800caca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cace:	463a      	mov	r2, r7
 800cad0:	4630      	mov	r0, r6
 800cad2:	f7ff ffda 	bl	800ca8a <__sfputc_r>
 800cad6:	1c43      	adds	r3, r0, #1
 800cad8:	d1f3      	bne.n	800cac2 <__sfputs_r+0xa>
 800cada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cadc <_vfiprintf_r>:
 800cadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae0:	460d      	mov	r5, r1
 800cae2:	b09d      	sub	sp, #116	; 0x74
 800cae4:	4614      	mov	r4, r2
 800cae6:	4698      	mov	r8, r3
 800cae8:	4606      	mov	r6, r0
 800caea:	b118      	cbz	r0, 800caf4 <_vfiprintf_r+0x18>
 800caec:	6983      	ldr	r3, [r0, #24]
 800caee:	b90b      	cbnz	r3, 800caf4 <_vfiprintf_r+0x18>
 800caf0:	f000 fb14 	bl	800d11c <__sinit>
 800caf4:	4b89      	ldr	r3, [pc, #548]	; (800cd1c <_vfiprintf_r+0x240>)
 800caf6:	429d      	cmp	r5, r3
 800caf8:	d11b      	bne.n	800cb32 <_vfiprintf_r+0x56>
 800cafa:	6875      	ldr	r5, [r6, #4]
 800cafc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cafe:	07d9      	lsls	r1, r3, #31
 800cb00:	d405      	bmi.n	800cb0e <_vfiprintf_r+0x32>
 800cb02:	89ab      	ldrh	r3, [r5, #12]
 800cb04:	059a      	lsls	r2, r3, #22
 800cb06:	d402      	bmi.n	800cb0e <_vfiprintf_r+0x32>
 800cb08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb0a:	f7ff ff88 	bl	800ca1e <__retarget_lock_acquire_recursive>
 800cb0e:	89ab      	ldrh	r3, [r5, #12]
 800cb10:	071b      	lsls	r3, r3, #28
 800cb12:	d501      	bpl.n	800cb18 <_vfiprintf_r+0x3c>
 800cb14:	692b      	ldr	r3, [r5, #16]
 800cb16:	b9eb      	cbnz	r3, 800cb54 <_vfiprintf_r+0x78>
 800cb18:	4629      	mov	r1, r5
 800cb1a:	4630      	mov	r0, r6
 800cb1c:	f000 f96e 	bl	800cdfc <__swsetup_r>
 800cb20:	b1c0      	cbz	r0, 800cb54 <_vfiprintf_r+0x78>
 800cb22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb24:	07dc      	lsls	r4, r3, #31
 800cb26:	d50e      	bpl.n	800cb46 <_vfiprintf_r+0x6a>
 800cb28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb2c:	b01d      	add	sp, #116	; 0x74
 800cb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb32:	4b7b      	ldr	r3, [pc, #492]	; (800cd20 <_vfiprintf_r+0x244>)
 800cb34:	429d      	cmp	r5, r3
 800cb36:	d101      	bne.n	800cb3c <_vfiprintf_r+0x60>
 800cb38:	68b5      	ldr	r5, [r6, #8]
 800cb3a:	e7df      	b.n	800cafc <_vfiprintf_r+0x20>
 800cb3c:	4b79      	ldr	r3, [pc, #484]	; (800cd24 <_vfiprintf_r+0x248>)
 800cb3e:	429d      	cmp	r5, r3
 800cb40:	bf08      	it	eq
 800cb42:	68f5      	ldreq	r5, [r6, #12]
 800cb44:	e7da      	b.n	800cafc <_vfiprintf_r+0x20>
 800cb46:	89ab      	ldrh	r3, [r5, #12]
 800cb48:	0598      	lsls	r0, r3, #22
 800cb4a:	d4ed      	bmi.n	800cb28 <_vfiprintf_r+0x4c>
 800cb4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb4e:	f7ff ff67 	bl	800ca20 <__retarget_lock_release_recursive>
 800cb52:	e7e9      	b.n	800cb28 <_vfiprintf_r+0x4c>
 800cb54:	2300      	movs	r3, #0
 800cb56:	9309      	str	r3, [sp, #36]	; 0x24
 800cb58:	2320      	movs	r3, #32
 800cb5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb62:	2330      	movs	r3, #48	; 0x30
 800cb64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cd28 <_vfiprintf_r+0x24c>
 800cb68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb6c:	f04f 0901 	mov.w	r9, #1
 800cb70:	4623      	mov	r3, r4
 800cb72:	469a      	mov	sl, r3
 800cb74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb78:	b10a      	cbz	r2, 800cb7e <_vfiprintf_r+0xa2>
 800cb7a:	2a25      	cmp	r2, #37	; 0x25
 800cb7c:	d1f9      	bne.n	800cb72 <_vfiprintf_r+0x96>
 800cb7e:	ebba 0b04 	subs.w	fp, sl, r4
 800cb82:	d00b      	beq.n	800cb9c <_vfiprintf_r+0xc0>
 800cb84:	465b      	mov	r3, fp
 800cb86:	4622      	mov	r2, r4
 800cb88:	4629      	mov	r1, r5
 800cb8a:	4630      	mov	r0, r6
 800cb8c:	f7ff ff94 	bl	800cab8 <__sfputs_r>
 800cb90:	3001      	adds	r0, #1
 800cb92:	f000 80aa 	beq.w	800ccea <_vfiprintf_r+0x20e>
 800cb96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb98:	445a      	add	r2, fp
 800cb9a:	9209      	str	r2, [sp, #36]	; 0x24
 800cb9c:	f89a 3000 	ldrb.w	r3, [sl]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	f000 80a2 	beq.w	800ccea <_vfiprintf_r+0x20e>
 800cba6:	2300      	movs	r3, #0
 800cba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbb0:	f10a 0a01 	add.w	sl, sl, #1
 800cbb4:	9304      	str	r3, [sp, #16]
 800cbb6:	9307      	str	r3, [sp, #28]
 800cbb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbbc:	931a      	str	r3, [sp, #104]	; 0x68
 800cbbe:	4654      	mov	r4, sl
 800cbc0:	2205      	movs	r2, #5
 800cbc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbc6:	4858      	ldr	r0, [pc, #352]	; (800cd28 <_vfiprintf_r+0x24c>)
 800cbc8:	f7f3 fb2a 	bl	8000220 <memchr>
 800cbcc:	9a04      	ldr	r2, [sp, #16]
 800cbce:	b9d8      	cbnz	r0, 800cc08 <_vfiprintf_r+0x12c>
 800cbd0:	06d1      	lsls	r1, r2, #27
 800cbd2:	bf44      	itt	mi
 800cbd4:	2320      	movmi	r3, #32
 800cbd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbda:	0713      	lsls	r3, r2, #28
 800cbdc:	bf44      	itt	mi
 800cbde:	232b      	movmi	r3, #43	; 0x2b
 800cbe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbe4:	f89a 3000 	ldrb.w	r3, [sl]
 800cbe8:	2b2a      	cmp	r3, #42	; 0x2a
 800cbea:	d015      	beq.n	800cc18 <_vfiprintf_r+0x13c>
 800cbec:	9a07      	ldr	r2, [sp, #28]
 800cbee:	4654      	mov	r4, sl
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	f04f 0c0a 	mov.w	ip, #10
 800cbf6:	4621      	mov	r1, r4
 800cbf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbfc:	3b30      	subs	r3, #48	; 0x30
 800cbfe:	2b09      	cmp	r3, #9
 800cc00:	d94e      	bls.n	800cca0 <_vfiprintf_r+0x1c4>
 800cc02:	b1b0      	cbz	r0, 800cc32 <_vfiprintf_r+0x156>
 800cc04:	9207      	str	r2, [sp, #28]
 800cc06:	e014      	b.n	800cc32 <_vfiprintf_r+0x156>
 800cc08:	eba0 0308 	sub.w	r3, r0, r8
 800cc0c:	fa09 f303 	lsl.w	r3, r9, r3
 800cc10:	4313      	orrs	r3, r2
 800cc12:	9304      	str	r3, [sp, #16]
 800cc14:	46a2      	mov	sl, r4
 800cc16:	e7d2      	b.n	800cbbe <_vfiprintf_r+0xe2>
 800cc18:	9b03      	ldr	r3, [sp, #12]
 800cc1a:	1d19      	adds	r1, r3, #4
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	9103      	str	r1, [sp, #12]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	bfbb      	ittet	lt
 800cc24:	425b      	neglt	r3, r3
 800cc26:	f042 0202 	orrlt.w	r2, r2, #2
 800cc2a:	9307      	strge	r3, [sp, #28]
 800cc2c:	9307      	strlt	r3, [sp, #28]
 800cc2e:	bfb8      	it	lt
 800cc30:	9204      	strlt	r2, [sp, #16]
 800cc32:	7823      	ldrb	r3, [r4, #0]
 800cc34:	2b2e      	cmp	r3, #46	; 0x2e
 800cc36:	d10c      	bne.n	800cc52 <_vfiprintf_r+0x176>
 800cc38:	7863      	ldrb	r3, [r4, #1]
 800cc3a:	2b2a      	cmp	r3, #42	; 0x2a
 800cc3c:	d135      	bne.n	800ccaa <_vfiprintf_r+0x1ce>
 800cc3e:	9b03      	ldr	r3, [sp, #12]
 800cc40:	1d1a      	adds	r2, r3, #4
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	9203      	str	r2, [sp, #12]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	bfb8      	it	lt
 800cc4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cc4e:	3402      	adds	r4, #2
 800cc50:	9305      	str	r3, [sp, #20]
 800cc52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cd38 <_vfiprintf_r+0x25c>
 800cc56:	7821      	ldrb	r1, [r4, #0]
 800cc58:	2203      	movs	r2, #3
 800cc5a:	4650      	mov	r0, sl
 800cc5c:	f7f3 fae0 	bl	8000220 <memchr>
 800cc60:	b140      	cbz	r0, 800cc74 <_vfiprintf_r+0x198>
 800cc62:	2340      	movs	r3, #64	; 0x40
 800cc64:	eba0 000a 	sub.w	r0, r0, sl
 800cc68:	fa03 f000 	lsl.w	r0, r3, r0
 800cc6c:	9b04      	ldr	r3, [sp, #16]
 800cc6e:	4303      	orrs	r3, r0
 800cc70:	3401      	adds	r4, #1
 800cc72:	9304      	str	r3, [sp, #16]
 800cc74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc78:	482c      	ldr	r0, [pc, #176]	; (800cd2c <_vfiprintf_r+0x250>)
 800cc7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc7e:	2206      	movs	r2, #6
 800cc80:	f7f3 face 	bl	8000220 <memchr>
 800cc84:	2800      	cmp	r0, #0
 800cc86:	d03f      	beq.n	800cd08 <_vfiprintf_r+0x22c>
 800cc88:	4b29      	ldr	r3, [pc, #164]	; (800cd30 <_vfiprintf_r+0x254>)
 800cc8a:	bb1b      	cbnz	r3, 800ccd4 <_vfiprintf_r+0x1f8>
 800cc8c:	9b03      	ldr	r3, [sp, #12]
 800cc8e:	3307      	adds	r3, #7
 800cc90:	f023 0307 	bic.w	r3, r3, #7
 800cc94:	3308      	adds	r3, #8
 800cc96:	9303      	str	r3, [sp, #12]
 800cc98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc9a:	443b      	add	r3, r7
 800cc9c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc9e:	e767      	b.n	800cb70 <_vfiprintf_r+0x94>
 800cca0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cca4:	460c      	mov	r4, r1
 800cca6:	2001      	movs	r0, #1
 800cca8:	e7a5      	b.n	800cbf6 <_vfiprintf_r+0x11a>
 800ccaa:	2300      	movs	r3, #0
 800ccac:	3401      	adds	r4, #1
 800ccae:	9305      	str	r3, [sp, #20]
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	f04f 0c0a 	mov.w	ip, #10
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccbc:	3a30      	subs	r2, #48	; 0x30
 800ccbe:	2a09      	cmp	r2, #9
 800ccc0:	d903      	bls.n	800ccca <_vfiprintf_r+0x1ee>
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d0c5      	beq.n	800cc52 <_vfiprintf_r+0x176>
 800ccc6:	9105      	str	r1, [sp, #20]
 800ccc8:	e7c3      	b.n	800cc52 <_vfiprintf_r+0x176>
 800ccca:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccce:	4604      	mov	r4, r0
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	e7f0      	b.n	800ccb6 <_vfiprintf_r+0x1da>
 800ccd4:	ab03      	add	r3, sp, #12
 800ccd6:	9300      	str	r3, [sp, #0]
 800ccd8:	462a      	mov	r2, r5
 800ccda:	4b16      	ldr	r3, [pc, #88]	; (800cd34 <_vfiprintf_r+0x258>)
 800ccdc:	a904      	add	r1, sp, #16
 800ccde:	4630      	mov	r0, r6
 800cce0:	f7fd fedc 	bl	800aa9c <_printf_float>
 800cce4:	4607      	mov	r7, r0
 800cce6:	1c78      	adds	r0, r7, #1
 800cce8:	d1d6      	bne.n	800cc98 <_vfiprintf_r+0x1bc>
 800ccea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccec:	07d9      	lsls	r1, r3, #31
 800ccee:	d405      	bmi.n	800ccfc <_vfiprintf_r+0x220>
 800ccf0:	89ab      	ldrh	r3, [r5, #12]
 800ccf2:	059a      	lsls	r2, r3, #22
 800ccf4:	d402      	bmi.n	800ccfc <_vfiprintf_r+0x220>
 800ccf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccf8:	f7ff fe92 	bl	800ca20 <__retarget_lock_release_recursive>
 800ccfc:	89ab      	ldrh	r3, [r5, #12]
 800ccfe:	065b      	lsls	r3, r3, #25
 800cd00:	f53f af12 	bmi.w	800cb28 <_vfiprintf_r+0x4c>
 800cd04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd06:	e711      	b.n	800cb2c <_vfiprintf_r+0x50>
 800cd08:	ab03      	add	r3, sp, #12
 800cd0a:	9300      	str	r3, [sp, #0]
 800cd0c:	462a      	mov	r2, r5
 800cd0e:	4b09      	ldr	r3, [pc, #36]	; (800cd34 <_vfiprintf_r+0x258>)
 800cd10:	a904      	add	r1, sp, #16
 800cd12:	4630      	mov	r0, r6
 800cd14:	f7fe f966 	bl	800afe4 <_printf_i>
 800cd18:	e7e4      	b.n	800cce4 <_vfiprintf_r+0x208>
 800cd1a:	bf00      	nop
 800cd1c:	0800df4c 	.word	0x0800df4c
 800cd20:	0800df6c 	.word	0x0800df6c
 800cd24:	0800df2c 	.word	0x0800df2c
 800cd28:	0800ddd4 	.word	0x0800ddd4
 800cd2c:	0800ddde 	.word	0x0800ddde
 800cd30:	0800aa9d 	.word	0x0800aa9d
 800cd34:	0800cab9 	.word	0x0800cab9
 800cd38:	0800ddda 	.word	0x0800ddda

0800cd3c <__swbuf_r>:
 800cd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd3e:	460e      	mov	r6, r1
 800cd40:	4614      	mov	r4, r2
 800cd42:	4605      	mov	r5, r0
 800cd44:	b118      	cbz	r0, 800cd4e <__swbuf_r+0x12>
 800cd46:	6983      	ldr	r3, [r0, #24]
 800cd48:	b90b      	cbnz	r3, 800cd4e <__swbuf_r+0x12>
 800cd4a:	f000 f9e7 	bl	800d11c <__sinit>
 800cd4e:	4b21      	ldr	r3, [pc, #132]	; (800cdd4 <__swbuf_r+0x98>)
 800cd50:	429c      	cmp	r4, r3
 800cd52:	d12b      	bne.n	800cdac <__swbuf_r+0x70>
 800cd54:	686c      	ldr	r4, [r5, #4]
 800cd56:	69a3      	ldr	r3, [r4, #24]
 800cd58:	60a3      	str	r3, [r4, #8]
 800cd5a:	89a3      	ldrh	r3, [r4, #12]
 800cd5c:	071a      	lsls	r2, r3, #28
 800cd5e:	d52f      	bpl.n	800cdc0 <__swbuf_r+0x84>
 800cd60:	6923      	ldr	r3, [r4, #16]
 800cd62:	b36b      	cbz	r3, 800cdc0 <__swbuf_r+0x84>
 800cd64:	6923      	ldr	r3, [r4, #16]
 800cd66:	6820      	ldr	r0, [r4, #0]
 800cd68:	1ac0      	subs	r0, r0, r3
 800cd6a:	6963      	ldr	r3, [r4, #20]
 800cd6c:	b2f6      	uxtb	r6, r6
 800cd6e:	4283      	cmp	r3, r0
 800cd70:	4637      	mov	r7, r6
 800cd72:	dc04      	bgt.n	800cd7e <__swbuf_r+0x42>
 800cd74:	4621      	mov	r1, r4
 800cd76:	4628      	mov	r0, r5
 800cd78:	f000 f93c 	bl	800cff4 <_fflush_r>
 800cd7c:	bb30      	cbnz	r0, 800cdcc <__swbuf_r+0x90>
 800cd7e:	68a3      	ldr	r3, [r4, #8]
 800cd80:	3b01      	subs	r3, #1
 800cd82:	60a3      	str	r3, [r4, #8]
 800cd84:	6823      	ldr	r3, [r4, #0]
 800cd86:	1c5a      	adds	r2, r3, #1
 800cd88:	6022      	str	r2, [r4, #0]
 800cd8a:	701e      	strb	r6, [r3, #0]
 800cd8c:	6963      	ldr	r3, [r4, #20]
 800cd8e:	3001      	adds	r0, #1
 800cd90:	4283      	cmp	r3, r0
 800cd92:	d004      	beq.n	800cd9e <__swbuf_r+0x62>
 800cd94:	89a3      	ldrh	r3, [r4, #12]
 800cd96:	07db      	lsls	r3, r3, #31
 800cd98:	d506      	bpl.n	800cda8 <__swbuf_r+0x6c>
 800cd9a:	2e0a      	cmp	r6, #10
 800cd9c:	d104      	bne.n	800cda8 <__swbuf_r+0x6c>
 800cd9e:	4621      	mov	r1, r4
 800cda0:	4628      	mov	r0, r5
 800cda2:	f000 f927 	bl	800cff4 <_fflush_r>
 800cda6:	b988      	cbnz	r0, 800cdcc <__swbuf_r+0x90>
 800cda8:	4638      	mov	r0, r7
 800cdaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdac:	4b0a      	ldr	r3, [pc, #40]	; (800cdd8 <__swbuf_r+0x9c>)
 800cdae:	429c      	cmp	r4, r3
 800cdb0:	d101      	bne.n	800cdb6 <__swbuf_r+0x7a>
 800cdb2:	68ac      	ldr	r4, [r5, #8]
 800cdb4:	e7cf      	b.n	800cd56 <__swbuf_r+0x1a>
 800cdb6:	4b09      	ldr	r3, [pc, #36]	; (800cddc <__swbuf_r+0xa0>)
 800cdb8:	429c      	cmp	r4, r3
 800cdba:	bf08      	it	eq
 800cdbc:	68ec      	ldreq	r4, [r5, #12]
 800cdbe:	e7ca      	b.n	800cd56 <__swbuf_r+0x1a>
 800cdc0:	4621      	mov	r1, r4
 800cdc2:	4628      	mov	r0, r5
 800cdc4:	f000 f81a 	bl	800cdfc <__swsetup_r>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	d0cb      	beq.n	800cd64 <__swbuf_r+0x28>
 800cdcc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800cdd0:	e7ea      	b.n	800cda8 <__swbuf_r+0x6c>
 800cdd2:	bf00      	nop
 800cdd4:	0800df4c 	.word	0x0800df4c
 800cdd8:	0800df6c 	.word	0x0800df6c
 800cddc:	0800df2c 	.word	0x0800df2c

0800cde0 <__ascii_wctomb>:
 800cde0:	b149      	cbz	r1, 800cdf6 <__ascii_wctomb+0x16>
 800cde2:	2aff      	cmp	r2, #255	; 0xff
 800cde4:	bf85      	ittet	hi
 800cde6:	238a      	movhi	r3, #138	; 0x8a
 800cde8:	6003      	strhi	r3, [r0, #0]
 800cdea:	700a      	strbls	r2, [r1, #0]
 800cdec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800cdf0:	bf98      	it	ls
 800cdf2:	2001      	movls	r0, #1
 800cdf4:	4770      	bx	lr
 800cdf6:	4608      	mov	r0, r1
 800cdf8:	4770      	bx	lr
	...

0800cdfc <__swsetup_r>:
 800cdfc:	4b32      	ldr	r3, [pc, #200]	; (800cec8 <__swsetup_r+0xcc>)
 800cdfe:	b570      	push	{r4, r5, r6, lr}
 800ce00:	681d      	ldr	r5, [r3, #0]
 800ce02:	4606      	mov	r6, r0
 800ce04:	460c      	mov	r4, r1
 800ce06:	b125      	cbz	r5, 800ce12 <__swsetup_r+0x16>
 800ce08:	69ab      	ldr	r3, [r5, #24]
 800ce0a:	b913      	cbnz	r3, 800ce12 <__swsetup_r+0x16>
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	f000 f985 	bl	800d11c <__sinit>
 800ce12:	4b2e      	ldr	r3, [pc, #184]	; (800cecc <__swsetup_r+0xd0>)
 800ce14:	429c      	cmp	r4, r3
 800ce16:	d10f      	bne.n	800ce38 <__swsetup_r+0x3c>
 800ce18:	686c      	ldr	r4, [r5, #4]
 800ce1a:	89a3      	ldrh	r3, [r4, #12]
 800ce1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce20:	0719      	lsls	r1, r3, #28
 800ce22:	d42c      	bmi.n	800ce7e <__swsetup_r+0x82>
 800ce24:	06dd      	lsls	r5, r3, #27
 800ce26:	d411      	bmi.n	800ce4c <__swsetup_r+0x50>
 800ce28:	2309      	movs	r3, #9
 800ce2a:	6033      	str	r3, [r6, #0]
 800ce2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ce30:	81a3      	strh	r3, [r4, #12]
 800ce32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce36:	e03e      	b.n	800ceb6 <__swsetup_r+0xba>
 800ce38:	4b25      	ldr	r3, [pc, #148]	; (800ced0 <__swsetup_r+0xd4>)
 800ce3a:	429c      	cmp	r4, r3
 800ce3c:	d101      	bne.n	800ce42 <__swsetup_r+0x46>
 800ce3e:	68ac      	ldr	r4, [r5, #8]
 800ce40:	e7eb      	b.n	800ce1a <__swsetup_r+0x1e>
 800ce42:	4b24      	ldr	r3, [pc, #144]	; (800ced4 <__swsetup_r+0xd8>)
 800ce44:	429c      	cmp	r4, r3
 800ce46:	bf08      	it	eq
 800ce48:	68ec      	ldreq	r4, [r5, #12]
 800ce4a:	e7e6      	b.n	800ce1a <__swsetup_r+0x1e>
 800ce4c:	0758      	lsls	r0, r3, #29
 800ce4e:	d512      	bpl.n	800ce76 <__swsetup_r+0x7a>
 800ce50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce52:	b141      	cbz	r1, 800ce66 <__swsetup_r+0x6a>
 800ce54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce58:	4299      	cmp	r1, r3
 800ce5a:	d002      	beq.n	800ce62 <__swsetup_r+0x66>
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	f7fd fcd3 	bl	800a808 <_free_r>
 800ce62:	2300      	movs	r3, #0
 800ce64:	6363      	str	r3, [r4, #52]	; 0x34
 800ce66:	89a3      	ldrh	r3, [r4, #12]
 800ce68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce6c:	81a3      	strh	r3, [r4, #12]
 800ce6e:	2300      	movs	r3, #0
 800ce70:	6063      	str	r3, [r4, #4]
 800ce72:	6923      	ldr	r3, [r4, #16]
 800ce74:	6023      	str	r3, [r4, #0]
 800ce76:	89a3      	ldrh	r3, [r4, #12]
 800ce78:	f043 0308 	orr.w	r3, r3, #8
 800ce7c:	81a3      	strh	r3, [r4, #12]
 800ce7e:	6923      	ldr	r3, [r4, #16]
 800ce80:	b94b      	cbnz	r3, 800ce96 <__swsetup_r+0x9a>
 800ce82:	89a3      	ldrh	r3, [r4, #12]
 800ce84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce8c:	d003      	beq.n	800ce96 <__swsetup_r+0x9a>
 800ce8e:	4621      	mov	r1, r4
 800ce90:	4630      	mov	r0, r6
 800ce92:	f000 fa05 	bl	800d2a0 <__smakebuf_r>
 800ce96:	89a0      	ldrh	r0, [r4, #12]
 800ce98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce9c:	f010 0301 	ands.w	r3, r0, #1
 800cea0:	d00a      	beq.n	800ceb8 <__swsetup_r+0xbc>
 800cea2:	2300      	movs	r3, #0
 800cea4:	60a3      	str	r3, [r4, #8]
 800cea6:	6963      	ldr	r3, [r4, #20]
 800cea8:	425b      	negs	r3, r3
 800ceaa:	61a3      	str	r3, [r4, #24]
 800ceac:	6923      	ldr	r3, [r4, #16]
 800ceae:	b943      	cbnz	r3, 800cec2 <__swsetup_r+0xc6>
 800ceb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ceb4:	d1ba      	bne.n	800ce2c <__swsetup_r+0x30>
 800ceb6:	bd70      	pop	{r4, r5, r6, pc}
 800ceb8:	0781      	lsls	r1, r0, #30
 800ceba:	bf58      	it	pl
 800cebc:	6963      	ldrpl	r3, [r4, #20]
 800cebe:	60a3      	str	r3, [r4, #8]
 800cec0:	e7f4      	b.n	800ceac <__swsetup_r+0xb0>
 800cec2:	2000      	movs	r0, #0
 800cec4:	e7f7      	b.n	800ceb6 <__swsetup_r+0xba>
 800cec6:	bf00      	nop
 800cec8:	200005e4 	.word	0x200005e4
 800cecc:	0800df4c 	.word	0x0800df4c
 800ced0:	0800df6c 	.word	0x0800df6c
 800ced4:	0800df2c 	.word	0x0800df2c

0800ced8 <abort>:
 800ced8:	b508      	push	{r3, lr}
 800ceda:	2006      	movs	r0, #6
 800cedc:	f000 fa48 	bl	800d370 <raise>
 800cee0:	2001      	movs	r0, #1
 800cee2:	f000 fb4d 	bl	800d580 <_exit>
	...

0800cee8 <__sflush_r>:
 800cee8:	898a      	ldrh	r2, [r1, #12]
 800ceea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceee:	4605      	mov	r5, r0
 800cef0:	0710      	lsls	r0, r2, #28
 800cef2:	460c      	mov	r4, r1
 800cef4:	d458      	bmi.n	800cfa8 <__sflush_r+0xc0>
 800cef6:	684b      	ldr	r3, [r1, #4]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	dc05      	bgt.n	800cf08 <__sflush_r+0x20>
 800cefc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	dc02      	bgt.n	800cf08 <__sflush_r+0x20>
 800cf02:	2000      	movs	r0, #0
 800cf04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf0a:	2e00      	cmp	r6, #0
 800cf0c:	d0f9      	beq.n	800cf02 <__sflush_r+0x1a>
 800cf0e:	2300      	movs	r3, #0
 800cf10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf14:	682f      	ldr	r7, [r5, #0]
 800cf16:	602b      	str	r3, [r5, #0]
 800cf18:	d032      	beq.n	800cf80 <__sflush_r+0x98>
 800cf1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf1c:	89a3      	ldrh	r3, [r4, #12]
 800cf1e:	075a      	lsls	r2, r3, #29
 800cf20:	d505      	bpl.n	800cf2e <__sflush_r+0x46>
 800cf22:	6863      	ldr	r3, [r4, #4]
 800cf24:	1ac0      	subs	r0, r0, r3
 800cf26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf28:	b10b      	cbz	r3, 800cf2e <__sflush_r+0x46>
 800cf2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf2c:	1ac0      	subs	r0, r0, r3
 800cf2e:	2300      	movs	r3, #0
 800cf30:	4602      	mov	r2, r0
 800cf32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf34:	6a21      	ldr	r1, [r4, #32]
 800cf36:	4628      	mov	r0, r5
 800cf38:	47b0      	blx	r6
 800cf3a:	1c43      	adds	r3, r0, #1
 800cf3c:	89a3      	ldrh	r3, [r4, #12]
 800cf3e:	d106      	bne.n	800cf4e <__sflush_r+0x66>
 800cf40:	6829      	ldr	r1, [r5, #0]
 800cf42:	291d      	cmp	r1, #29
 800cf44:	d82c      	bhi.n	800cfa0 <__sflush_r+0xb8>
 800cf46:	4a2a      	ldr	r2, [pc, #168]	; (800cff0 <__sflush_r+0x108>)
 800cf48:	40ca      	lsrs	r2, r1
 800cf4a:	07d6      	lsls	r6, r2, #31
 800cf4c:	d528      	bpl.n	800cfa0 <__sflush_r+0xb8>
 800cf4e:	2200      	movs	r2, #0
 800cf50:	6062      	str	r2, [r4, #4]
 800cf52:	04d9      	lsls	r1, r3, #19
 800cf54:	6922      	ldr	r2, [r4, #16]
 800cf56:	6022      	str	r2, [r4, #0]
 800cf58:	d504      	bpl.n	800cf64 <__sflush_r+0x7c>
 800cf5a:	1c42      	adds	r2, r0, #1
 800cf5c:	d101      	bne.n	800cf62 <__sflush_r+0x7a>
 800cf5e:	682b      	ldr	r3, [r5, #0]
 800cf60:	b903      	cbnz	r3, 800cf64 <__sflush_r+0x7c>
 800cf62:	6560      	str	r0, [r4, #84]	; 0x54
 800cf64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf66:	602f      	str	r7, [r5, #0]
 800cf68:	2900      	cmp	r1, #0
 800cf6a:	d0ca      	beq.n	800cf02 <__sflush_r+0x1a>
 800cf6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf70:	4299      	cmp	r1, r3
 800cf72:	d002      	beq.n	800cf7a <__sflush_r+0x92>
 800cf74:	4628      	mov	r0, r5
 800cf76:	f7fd fc47 	bl	800a808 <_free_r>
 800cf7a:	2000      	movs	r0, #0
 800cf7c:	6360      	str	r0, [r4, #52]	; 0x34
 800cf7e:	e7c1      	b.n	800cf04 <__sflush_r+0x1c>
 800cf80:	6a21      	ldr	r1, [r4, #32]
 800cf82:	2301      	movs	r3, #1
 800cf84:	4628      	mov	r0, r5
 800cf86:	47b0      	blx	r6
 800cf88:	1c41      	adds	r1, r0, #1
 800cf8a:	d1c7      	bne.n	800cf1c <__sflush_r+0x34>
 800cf8c:	682b      	ldr	r3, [r5, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d0c4      	beq.n	800cf1c <__sflush_r+0x34>
 800cf92:	2b1d      	cmp	r3, #29
 800cf94:	d001      	beq.n	800cf9a <__sflush_r+0xb2>
 800cf96:	2b16      	cmp	r3, #22
 800cf98:	d101      	bne.n	800cf9e <__sflush_r+0xb6>
 800cf9a:	602f      	str	r7, [r5, #0]
 800cf9c:	e7b1      	b.n	800cf02 <__sflush_r+0x1a>
 800cf9e:	89a3      	ldrh	r3, [r4, #12]
 800cfa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfa4:	81a3      	strh	r3, [r4, #12]
 800cfa6:	e7ad      	b.n	800cf04 <__sflush_r+0x1c>
 800cfa8:	690f      	ldr	r7, [r1, #16]
 800cfaa:	2f00      	cmp	r7, #0
 800cfac:	d0a9      	beq.n	800cf02 <__sflush_r+0x1a>
 800cfae:	0793      	lsls	r3, r2, #30
 800cfb0:	680e      	ldr	r6, [r1, #0]
 800cfb2:	bf08      	it	eq
 800cfb4:	694b      	ldreq	r3, [r1, #20]
 800cfb6:	600f      	str	r7, [r1, #0]
 800cfb8:	bf18      	it	ne
 800cfba:	2300      	movne	r3, #0
 800cfbc:	eba6 0807 	sub.w	r8, r6, r7
 800cfc0:	608b      	str	r3, [r1, #8]
 800cfc2:	f1b8 0f00 	cmp.w	r8, #0
 800cfc6:	dd9c      	ble.n	800cf02 <__sflush_r+0x1a>
 800cfc8:	6a21      	ldr	r1, [r4, #32]
 800cfca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cfcc:	4643      	mov	r3, r8
 800cfce:	463a      	mov	r2, r7
 800cfd0:	4628      	mov	r0, r5
 800cfd2:	47b0      	blx	r6
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	dc06      	bgt.n	800cfe6 <__sflush_r+0xfe>
 800cfd8:	89a3      	ldrh	r3, [r4, #12]
 800cfda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfde:	81a3      	strh	r3, [r4, #12]
 800cfe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cfe4:	e78e      	b.n	800cf04 <__sflush_r+0x1c>
 800cfe6:	4407      	add	r7, r0
 800cfe8:	eba8 0800 	sub.w	r8, r8, r0
 800cfec:	e7e9      	b.n	800cfc2 <__sflush_r+0xda>
 800cfee:	bf00      	nop
 800cff0:	20400001 	.word	0x20400001

0800cff4 <_fflush_r>:
 800cff4:	b538      	push	{r3, r4, r5, lr}
 800cff6:	690b      	ldr	r3, [r1, #16]
 800cff8:	4605      	mov	r5, r0
 800cffa:	460c      	mov	r4, r1
 800cffc:	b913      	cbnz	r3, 800d004 <_fflush_r+0x10>
 800cffe:	2500      	movs	r5, #0
 800d000:	4628      	mov	r0, r5
 800d002:	bd38      	pop	{r3, r4, r5, pc}
 800d004:	b118      	cbz	r0, 800d00e <_fflush_r+0x1a>
 800d006:	6983      	ldr	r3, [r0, #24]
 800d008:	b90b      	cbnz	r3, 800d00e <_fflush_r+0x1a>
 800d00a:	f000 f887 	bl	800d11c <__sinit>
 800d00e:	4b14      	ldr	r3, [pc, #80]	; (800d060 <_fflush_r+0x6c>)
 800d010:	429c      	cmp	r4, r3
 800d012:	d11b      	bne.n	800d04c <_fflush_r+0x58>
 800d014:	686c      	ldr	r4, [r5, #4]
 800d016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d0ef      	beq.n	800cffe <_fflush_r+0xa>
 800d01e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d020:	07d0      	lsls	r0, r2, #31
 800d022:	d404      	bmi.n	800d02e <_fflush_r+0x3a>
 800d024:	0599      	lsls	r1, r3, #22
 800d026:	d402      	bmi.n	800d02e <_fflush_r+0x3a>
 800d028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d02a:	f7ff fcf8 	bl	800ca1e <__retarget_lock_acquire_recursive>
 800d02e:	4628      	mov	r0, r5
 800d030:	4621      	mov	r1, r4
 800d032:	f7ff ff59 	bl	800cee8 <__sflush_r>
 800d036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d038:	07da      	lsls	r2, r3, #31
 800d03a:	4605      	mov	r5, r0
 800d03c:	d4e0      	bmi.n	800d000 <_fflush_r+0xc>
 800d03e:	89a3      	ldrh	r3, [r4, #12]
 800d040:	059b      	lsls	r3, r3, #22
 800d042:	d4dd      	bmi.n	800d000 <_fflush_r+0xc>
 800d044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d046:	f7ff fceb 	bl	800ca20 <__retarget_lock_release_recursive>
 800d04a:	e7d9      	b.n	800d000 <_fflush_r+0xc>
 800d04c:	4b05      	ldr	r3, [pc, #20]	; (800d064 <_fflush_r+0x70>)
 800d04e:	429c      	cmp	r4, r3
 800d050:	d101      	bne.n	800d056 <_fflush_r+0x62>
 800d052:	68ac      	ldr	r4, [r5, #8]
 800d054:	e7df      	b.n	800d016 <_fflush_r+0x22>
 800d056:	4b04      	ldr	r3, [pc, #16]	; (800d068 <_fflush_r+0x74>)
 800d058:	429c      	cmp	r4, r3
 800d05a:	bf08      	it	eq
 800d05c:	68ec      	ldreq	r4, [r5, #12]
 800d05e:	e7da      	b.n	800d016 <_fflush_r+0x22>
 800d060:	0800df4c 	.word	0x0800df4c
 800d064:	0800df6c 	.word	0x0800df6c
 800d068:	0800df2c 	.word	0x0800df2c

0800d06c <std>:
 800d06c:	2300      	movs	r3, #0
 800d06e:	b510      	push	{r4, lr}
 800d070:	4604      	mov	r4, r0
 800d072:	e9c0 3300 	strd	r3, r3, [r0]
 800d076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d07a:	6083      	str	r3, [r0, #8]
 800d07c:	8181      	strh	r1, [r0, #12]
 800d07e:	6643      	str	r3, [r0, #100]	; 0x64
 800d080:	81c2      	strh	r2, [r0, #14]
 800d082:	6183      	str	r3, [r0, #24]
 800d084:	4619      	mov	r1, r3
 800d086:	2208      	movs	r2, #8
 800d088:	305c      	adds	r0, #92	; 0x5c
 800d08a:	f7fd fbb5 	bl	800a7f8 <memset>
 800d08e:	4b05      	ldr	r3, [pc, #20]	; (800d0a4 <std+0x38>)
 800d090:	6263      	str	r3, [r4, #36]	; 0x24
 800d092:	4b05      	ldr	r3, [pc, #20]	; (800d0a8 <std+0x3c>)
 800d094:	62a3      	str	r3, [r4, #40]	; 0x28
 800d096:	4b05      	ldr	r3, [pc, #20]	; (800d0ac <std+0x40>)
 800d098:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d09a:	4b05      	ldr	r3, [pc, #20]	; (800d0b0 <std+0x44>)
 800d09c:	6224      	str	r4, [r4, #32]
 800d09e:	6323      	str	r3, [r4, #48]	; 0x30
 800d0a0:	bd10      	pop	{r4, pc}
 800d0a2:	bf00      	nop
 800d0a4:	0800d3a9 	.word	0x0800d3a9
 800d0a8:	0800d3cb 	.word	0x0800d3cb
 800d0ac:	0800d403 	.word	0x0800d403
 800d0b0:	0800d427 	.word	0x0800d427

0800d0b4 <_cleanup_r>:
 800d0b4:	4901      	ldr	r1, [pc, #4]	; (800d0bc <_cleanup_r+0x8>)
 800d0b6:	f000 b8af 	b.w	800d218 <_fwalk_reent>
 800d0ba:	bf00      	nop
 800d0bc:	0800cff5 	.word	0x0800cff5

0800d0c0 <__sfmoreglue>:
 800d0c0:	b570      	push	{r4, r5, r6, lr}
 800d0c2:	1e4a      	subs	r2, r1, #1
 800d0c4:	2568      	movs	r5, #104	; 0x68
 800d0c6:	4355      	muls	r5, r2
 800d0c8:	460e      	mov	r6, r1
 800d0ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d0ce:	f7fd fbeb 	bl	800a8a8 <_malloc_r>
 800d0d2:	4604      	mov	r4, r0
 800d0d4:	b140      	cbz	r0, 800d0e8 <__sfmoreglue+0x28>
 800d0d6:	2100      	movs	r1, #0
 800d0d8:	e9c0 1600 	strd	r1, r6, [r0]
 800d0dc:	300c      	adds	r0, #12
 800d0de:	60a0      	str	r0, [r4, #8]
 800d0e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d0e4:	f7fd fb88 	bl	800a7f8 <memset>
 800d0e8:	4620      	mov	r0, r4
 800d0ea:	bd70      	pop	{r4, r5, r6, pc}

0800d0ec <__sfp_lock_acquire>:
 800d0ec:	4801      	ldr	r0, [pc, #4]	; (800d0f4 <__sfp_lock_acquire+0x8>)
 800d0ee:	f7ff bc96 	b.w	800ca1e <__retarget_lock_acquire_recursive>
 800d0f2:	bf00      	nop
 800d0f4:	20001714 	.word	0x20001714

0800d0f8 <__sfp_lock_release>:
 800d0f8:	4801      	ldr	r0, [pc, #4]	; (800d100 <__sfp_lock_release+0x8>)
 800d0fa:	f7ff bc91 	b.w	800ca20 <__retarget_lock_release_recursive>
 800d0fe:	bf00      	nop
 800d100:	20001714 	.word	0x20001714

0800d104 <__sinit_lock_acquire>:
 800d104:	4801      	ldr	r0, [pc, #4]	; (800d10c <__sinit_lock_acquire+0x8>)
 800d106:	f7ff bc8a 	b.w	800ca1e <__retarget_lock_acquire_recursive>
 800d10a:	bf00      	nop
 800d10c:	2000170f 	.word	0x2000170f

0800d110 <__sinit_lock_release>:
 800d110:	4801      	ldr	r0, [pc, #4]	; (800d118 <__sinit_lock_release+0x8>)
 800d112:	f7ff bc85 	b.w	800ca20 <__retarget_lock_release_recursive>
 800d116:	bf00      	nop
 800d118:	2000170f 	.word	0x2000170f

0800d11c <__sinit>:
 800d11c:	b510      	push	{r4, lr}
 800d11e:	4604      	mov	r4, r0
 800d120:	f7ff fff0 	bl	800d104 <__sinit_lock_acquire>
 800d124:	69a3      	ldr	r3, [r4, #24]
 800d126:	b11b      	cbz	r3, 800d130 <__sinit+0x14>
 800d128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d12c:	f7ff bff0 	b.w	800d110 <__sinit_lock_release>
 800d130:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d134:	6523      	str	r3, [r4, #80]	; 0x50
 800d136:	4b13      	ldr	r3, [pc, #76]	; (800d184 <__sinit+0x68>)
 800d138:	4a13      	ldr	r2, [pc, #76]	; (800d188 <__sinit+0x6c>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d13e:	42a3      	cmp	r3, r4
 800d140:	bf04      	itt	eq
 800d142:	2301      	moveq	r3, #1
 800d144:	61a3      	streq	r3, [r4, #24]
 800d146:	4620      	mov	r0, r4
 800d148:	f000 f820 	bl	800d18c <__sfp>
 800d14c:	6060      	str	r0, [r4, #4]
 800d14e:	4620      	mov	r0, r4
 800d150:	f000 f81c 	bl	800d18c <__sfp>
 800d154:	60a0      	str	r0, [r4, #8]
 800d156:	4620      	mov	r0, r4
 800d158:	f000 f818 	bl	800d18c <__sfp>
 800d15c:	2200      	movs	r2, #0
 800d15e:	60e0      	str	r0, [r4, #12]
 800d160:	2104      	movs	r1, #4
 800d162:	6860      	ldr	r0, [r4, #4]
 800d164:	f7ff ff82 	bl	800d06c <std>
 800d168:	68a0      	ldr	r0, [r4, #8]
 800d16a:	2201      	movs	r2, #1
 800d16c:	2109      	movs	r1, #9
 800d16e:	f7ff ff7d 	bl	800d06c <std>
 800d172:	68e0      	ldr	r0, [r4, #12]
 800d174:	2202      	movs	r2, #2
 800d176:	2112      	movs	r1, #18
 800d178:	f7ff ff78 	bl	800d06c <std>
 800d17c:	2301      	movs	r3, #1
 800d17e:	61a3      	str	r3, [r4, #24]
 800d180:	e7d2      	b.n	800d128 <__sinit+0xc>
 800d182:	bf00      	nop
 800d184:	0800dbac 	.word	0x0800dbac
 800d188:	0800d0b5 	.word	0x0800d0b5

0800d18c <__sfp>:
 800d18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d18e:	4607      	mov	r7, r0
 800d190:	f7ff ffac 	bl	800d0ec <__sfp_lock_acquire>
 800d194:	4b1e      	ldr	r3, [pc, #120]	; (800d210 <__sfp+0x84>)
 800d196:	681e      	ldr	r6, [r3, #0]
 800d198:	69b3      	ldr	r3, [r6, #24]
 800d19a:	b913      	cbnz	r3, 800d1a2 <__sfp+0x16>
 800d19c:	4630      	mov	r0, r6
 800d19e:	f7ff ffbd 	bl	800d11c <__sinit>
 800d1a2:	3648      	adds	r6, #72	; 0x48
 800d1a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d1a8:	3b01      	subs	r3, #1
 800d1aa:	d503      	bpl.n	800d1b4 <__sfp+0x28>
 800d1ac:	6833      	ldr	r3, [r6, #0]
 800d1ae:	b30b      	cbz	r3, 800d1f4 <__sfp+0x68>
 800d1b0:	6836      	ldr	r6, [r6, #0]
 800d1b2:	e7f7      	b.n	800d1a4 <__sfp+0x18>
 800d1b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d1b8:	b9d5      	cbnz	r5, 800d1f0 <__sfp+0x64>
 800d1ba:	4b16      	ldr	r3, [pc, #88]	; (800d214 <__sfp+0x88>)
 800d1bc:	60e3      	str	r3, [r4, #12]
 800d1be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d1c2:	6665      	str	r5, [r4, #100]	; 0x64
 800d1c4:	f7ff fc2a 	bl	800ca1c <__retarget_lock_init_recursive>
 800d1c8:	f7ff ff96 	bl	800d0f8 <__sfp_lock_release>
 800d1cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d1d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d1d4:	6025      	str	r5, [r4, #0]
 800d1d6:	61a5      	str	r5, [r4, #24]
 800d1d8:	2208      	movs	r2, #8
 800d1da:	4629      	mov	r1, r5
 800d1dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d1e0:	f7fd fb0a 	bl	800a7f8 <memset>
 800d1e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d1e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1f0:	3468      	adds	r4, #104	; 0x68
 800d1f2:	e7d9      	b.n	800d1a8 <__sfp+0x1c>
 800d1f4:	2104      	movs	r1, #4
 800d1f6:	4638      	mov	r0, r7
 800d1f8:	f7ff ff62 	bl	800d0c0 <__sfmoreglue>
 800d1fc:	4604      	mov	r4, r0
 800d1fe:	6030      	str	r0, [r6, #0]
 800d200:	2800      	cmp	r0, #0
 800d202:	d1d5      	bne.n	800d1b0 <__sfp+0x24>
 800d204:	f7ff ff78 	bl	800d0f8 <__sfp_lock_release>
 800d208:	230c      	movs	r3, #12
 800d20a:	603b      	str	r3, [r7, #0]
 800d20c:	e7ee      	b.n	800d1ec <__sfp+0x60>
 800d20e:	bf00      	nop
 800d210:	0800dbac 	.word	0x0800dbac
 800d214:	ffff0001 	.word	0xffff0001

0800d218 <_fwalk_reent>:
 800d218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d21c:	4606      	mov	r6, r0
 800d21e:	4688      	mov	r8, r1
 800d220:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d224:	2700      	movs	r7, #0
 800d226:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d22a:	f1b9 0901 	subs.w	r9, r9, #1
 800d22e:	d505      	bpl.n	800d23c <_fwalk_reent+0x24>
 800d230:	6824      	ldr	r4, [r4, #0]
 800d232:	2c00      	cmp	r4, #0
 800d234:	d1f7      	bne.n	800d226 <_fwalk_reent+0xe>
 800d236:	4638      	mov	r0, r7
 800d238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d23c:	89ab      	ldrh	r3, [r5, #12]
 800d23e:	2b01      	cmp	r3, #1
 800d240:	d907      	bls.n	800d252 <_fwalk_reent+0x3a>
 800d242:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d246:	3301      	adds	r3, #1
 800d248:	d003      	beq.n	800d252 <_fwalk_reent+0x3a>
 800d24a:	4629      	mov	r1, r5
 800d24c:	4630      	mov	r0, r6
 800d24e:	47c0      	blx	r8
 800d250:	4307      	orrs	r7, r0
 800d252:	3568      	adds	r5, #104	; 0x68
 800d254:	e7e9      	b.n	800d22a <_fwalk_reent+0x12>

0800d256 <__swhatbuf_r>:
 800d256:	b570      	push	{r4, r5, r6, lr}
 800d258:	460e      	mov	r6, r1
 800d25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d25e:	2900      	cmp	r1, #0
 800d260:	b096      	sub	sp, #88	; 0x58
 800d262:	4614      	mov	r4, r2
 800d264:	461d      	mov	r5, r3
 800d266:	da07      	bge.n	800d278 <__swhatbuf_r+0x22>
 800d268:	2300      	movs	r3, #0
 800d26a:	602b      	str	r3, [r5, #0]
 800d26c:	89b3      	ldrh	r3, [r6, #12]
 800d26e:	061a      	lsls	r2, r3, #24
 800d270:	d410      	bmi.n	800d294 <__swhatbuf_r+0x3e>
 800d272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d276:	e00e      	b.n	800d296 <__swhatbuf_r+0x40>
 800d278:	466a      	mov	r2, sp
 800d27a:	f000 f8fb 	bl	800d474 <_fstat_r>
 800d27e:	2800      	cmp	r0, #0
 800d280:	dbf2      	blt.n	800d268 <__swhatbuf_r+0x12>
 800d282:	9a01      	ldr	r2, [sp, #4]
 800d284:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d288:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d28c:	425a      	negs	r2, r3
 800d28e:	415a      	adcs	r2, r3
 800d290:	602a      	str	r2, [r5, #0]
 800d292:	e7ee      	b.n	800d272 <__swhatbuf_r+0x1c>
 800d294:	2340      	movs	r3, #64	; 0x40
 800d296:	2000      	movs	r0, #0
 800d298:	6023      	str	r3, [r4, #0]
 800d29a:	b016      	add	sp, #88	; 0x58
 800d29c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d2a0 <__smakebuf_r>:
 800d2a0:	898b      	ldrh	r3, [r1, #12]
 800d2a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d2a4:	079d      	lsls	r5, r3, #30
 800d2a6:	4606      	mov	r6, r0
 800d2a8:	460c      	mov	r4, r1
 800d2aa:	d507      	bpl.n	800d2bc <__smakebuf_r+0x1c>
 800d2ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d2b0:	6023      	str	r3, [r4, #0]
 800d2b2:	6123      	str	r3, [r4, #16]
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	6163      	str	r3, [r4, #20]
 800d2b8:	b002      	add	sp, #8
 800d2ba:	bd70      	pop	{r4, r5, r6, pc}
 800d2bc:	ab01      	add	r3, sp, #4
 800d2be:	466a      	mov	r2, sp
 800d2c0:	f7ff ffc9 	bl	800d256 <__swhatbuf_r>
 800d2c4:	9900      	ldr	r1, [sp, #0]
 800d2c6:	4605      	mov	r5, r0
 800d2c8:	4630      	mov	r0, r6
 800d2ca:	f7fd faed 	bl	800a8a8 <_malloc_r>
 800d2ce:	b948      	cbnz	r0, 800d2e4 <__smakebuf_r+0x44>
 800d2d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2d4:	059a      	lsls	r2, r3, #22
 800d2d6:	d4ef      	bmi.n	800d2b8 <__smakebuf_r+0x18>
 800d2d8:	f023 0303 	bic.w	r3, r3, #3
 800d2dc:	f043 0302 	orr.w	r3, r3, #2
 800d2e0:	81a3      	strh	r3, [r4, #12]
 800d2e2:	e7e3      	b.n	800d2ac <__smakebuf_r+0xc>
 800d2e4:	4b0d      	ldr	r3, [pc, #52]	; (800d31c <__smakebuf_r+0x7c>)
 800d2e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d2e8:	89a3      	ldrh	r3, [r4, #12]
 800d2ea:	6020      	str	r0, [r4, #0]
 800d2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2f0:	81a3      	strh	r3, [r4, #12]
 800d2f2:	9b00      	ldr	r3, [sp, #0]
 800d2f4:	6163      	str	r3, [r4, #20]
 800d2f6:	9b01      	ldr	r3, [sp, #4]
 800d2f8:	6120      	str	r0, [r4, #16]
 800d2fa:	b15b      	cbz	r3, 800d314 <__smakebuf_r+0x74>
 800d2fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d300:	4630      	mov	r0, r6
 800d302:	f000 f8c9 	bl	800d498 <_isatty_r>
 800d306:	b128      	cbz	r0, 800d314 <__smakebuf_r+0x74>
 800d308:	89a3      	ldrh	r3, [r4, #12]
 800d30a:	f023 0303 	bic.w	r3, r3, #3
 800d30e:	f043 0301 	orr.w	r3, r3, #1
 800d312:	81a3      	strh	r3, [r4, #12]
 800d314:	89a0      	ldrh	r0, [r4, #12]
 800d316:	4305      	orrs	r5, r0
 800d318:	81a5      	strh	r5, [r4, #12]
 800d31a:	e7cd      	b.n	800d2b8 <__smakebuf_r+0x18>
 800d31c:	0800d0b5 	.word	0x0800d0b5

0800d320 <_raise_r>:
 800d320:	291f      	cmp	r1, #31
 800d322:	b538      	push	{r3, r4, r5, lr}
 800d324:	4604      	mov	r4, r0
 800d326:	460d      	mov	r5, r1
 800d328:	d904      	bls.n	800d334 <_raise_r+0x14>
 800d32a:	2316      	movs	r3, #22
 800d32c:	6003      	str	r3, [r0, #0]
 800d32e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d332:	bd38      	pop	{r3, r4, r5, pc}
 800d334:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d336:	b112      	cbz	r2, 800d33e <_raise_r+0x1e>
 800d338:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d33c:	b94b      	cbnz	r3, 800d352 <_raise_r+0x32>
 800d33e:	4620      	mov	r0, r4
 800d340:	f000 f830 	bl	800d3a4 <_getpid_r>
 800d344:	462a      	mov	r2, r5
 800d346:	4601      	mov	r1, r0
 800d348:	4620      	mov	r0, r4
 800d34a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d34e:	f000 b817 	b.w	800d380 <_kill_r>
 800d352:	2b01      	cmp	r3, #1
 800d354:	d00a      	beq.n	800d36c <_raise_r+0x4c>
 800d356:	1c59      	adds	r1, r3, #1
 800d358:	d103      	bne.n	800d362 <_raise_r+0x42>
 800d35a:	2316      	movs	r3, #22
 800d35c:	6003      	str	r3, [r0, #0]
 800d35e:	2001      	movs	r0, #1
 800d360:	e7e7      	b.n	800d332 <_raise_r+0x12>
 800d362:	2400      	movs	r4, #0
 800d364:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d368:	4628      	mov	r0, r5
 800d36a:	4798      	blx	r3
 800d36c:	2000      	movs	r0, #0
 800d36e:	e7e0      	b.n	800d332 <_raise_r+0x12>

0800d370 <raise>:
 800d370:	4b02      	ldr	r3, [pc, #8]	; (800d37c <raise+0xc>)
 800d372:	4601      	mov	r1, r0
 800d374:	6818      	ldr	r0, [r3, #0]
 800d376:	f7ff bfd3 	b.w	800d320 <_raise_r>
 800d37a:	bf00      	nop
 800d37c:	200005e4 	.word	0x200005e4

0800d380 <_kill_r>:
 800d380:	b538      	push	{r3, r4, r5, lr}
 800d382:	4d07      	ldr	r5, [pc, #28]	; (800d3a0 <_kill_r+0x20>)
 800d384:	2300      	movs	r3, #0
 800d386:	4604      	mov	r4, r0
 800d388:	4608      	mov	r0, r1
 800d38a:	4611      	mov	r1, r2
 800d38c:	602b      	str	r3, [r5, #0]
 800d38e:	f000 f8d7 	bl	800d540 <_kill>
 800d392:	1c43      	adds	r3, r0, #1
 800d394:	d102      	bne.n	800d39c <_kill_r+0x1c>
 800d396:	682b      	ldr	r3, [r5, #0]
 800d398:	b103      	cbz	r3, 800d39c <_kill_r+0x1c>
 800d39a:	6023      	str	r3, [r4, #0]
 800d39c:	bd38      	pop	{r3, r4, r5, pc}
 800d39e:	bf00      	nop
 800d3a0:	20001708 	.word	0x20001708

0800d3a4 <_getpid_r>:
 800d3a4:	f000 b8bc 	b.w	800d520 <_getpid>

0800d3a8 <__sread>:
 800d3a8:	b510      	push	{r4, lr}
 800d3aa:	460c      	mov	r4, r1
 800d3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3b0:	f000 f894 	bl	800d4dc <_read_r>
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	bfab      	itete	ge
 800d3b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d3ba:	89a3      	ldrhlt	r3, [r4, #12]
 800d3bc:	181b      	addge	r3, r3, r0
 800d3be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d3c2:	bfac      	ite	ge
 800d3c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d3c6:	81a3      	strhlt	r3, [r4, #12]
 800d3c8:	bd10      	pop	{r4, pc}

0800d3ca <__swrite>:
 800d3ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3ce:	461f      	mov	r7, r3
 800d3d0:	898b      	ldrh	r3, [r1, #12]
 800d3d2:	05db      	lsls	r3, r3, #23
 800d3d4:	4605      	mov	r5, r0
 800d3d6:	460c      	mov	r4, r1
 800d3d8:	4616      	mov	r6, r2
 800d3da:	d505      	bpl.n	800d3e8 <__swrite+0x1e>
 800d3dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3e0:	2302      	movs	r3, #2
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	f000 f868 	bl	800d4b8 <_lseek_r>
 800d3e8:	89a3      	ldrh	r3, [r4, #12]
 800d3ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3f2:	81a3      	strh	r3, [r4, #12]
 800d3f4:	4632      	mov	r2, r6
 800d3f6:	463b      	mov	r3, r7
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3fe:	f000 b817 	b.w	800d430 <_write_r>

0800d402 <__sseek>:
 800d402:	b510      	push	{r4, lr}
 800d404:	460c      	mov	r4, r1
 800d406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d40a:	f000 f855 	bl	800d4b8 <_lseek_r>
 800d40e:	1c43      	adds	r3, r0, #1
 800d410:	89a3      	ldrh	r3, [r4, #12]
 800d412:	bf15      	itete	ne
 800d414:	6560      	strne	r0, [r4, #84]	; 0x54
 800d416:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d41a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d41e:	81a3      	strheq	r3, [r4, #12]
 800d420:	bf18      	it	ne
 800d422:	81a3      	strhne	r3, [r4, #12]
 800d424:	bd10      	pop	{r4, pc}

0800d426 <__sclose>:
 800d426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d42a:	f000 b813 	b.w	800d454 <_close_r>
	...

0800d430 <_write_r>:
 800d430:	b538      	push	{r3, r4, r5, lr}
 800d432:	4d07      	ldr	r5, [pc, #28]	; (800d450 <_write_r+0x20>)
 800d434:	4604      	mov	r4, r0
 800d436:	4608      	mov	r0, r1
 800d438:	4611      	mov	r1, r2
 800d43a:	2200      	movs	r2, #0
 800d43c:	602a      	str	r2, [r5, #0]
 800d43e:	461a      	mov	r2, r3
 800d440:	f000 f896 	bl	800d570 <_write>
 800d444:	1c43      	adds	r3, r0, #1
 800d446:	d102      	bne.n	800d44e <_write_r+0x1e>
 800d448:	682b      	ldr	r3, [r5, #0]
 800d44a:	b103      	cbz	r3, 800d44e <_write_r+0x1e>
 800d44c:	6023      	str	r3, [r4, #0]
 800d44e:	bd38      	pop	{r3, r4, r5, pc}
 800d450:	20001708 	.word	0x20001708

0800d454 <_close_r>:
 800d454:	b538      	push	{r3, r4, r5, lr}
 800d456:	4d06      	ldr	r5, [pc, #24]	; (800d470 <_close_r+0x1c>)
 800d458:	2300      	movs	r3, #0
 800d45a:	4604      	mov	r4, r0
 800d45c:	4608      	mov	r0, r1
 800d45e:	602b      	str	r3, [r5, #0]
 800d460:	f000 f84e 	bl	800d500 <_close>
 800d464:	1c43      	adds	r3, r0, #1
 800d466:	d102      	bne.n	800d46e <_close_r+0x1a>
 800d468:	682b      	ldr	r3, [r5, #0]
 800d46a:	b103      	cbz	r3, 800d46e <_close_r+0x1a>
 800d46c:	6023      	str	r3, [r4, #0]
 800d46e:	bd38      	pop	{r3, r4, r5, pc}
 800d470:	20001708 	.word	0x20001708

0800d474 <_fstat_r>:
 800d474:	b538      	push	{r3, r4, r5, lr}
 800d476:	4d07      	ldr	r5, [pc, #28]	; (800d494 <_fstat_r+0x20>)
 800d478:	2300      	movs	r3, #0
 800d47a:	4604      	mov	r4, r0
 800d47c:	4608      	mov	r0, r1
 800d47e:	4611      	mov	r1, r2
 800d480:	602b      	str	r3, [r5, #0]
 800d482:	f000 f845 	bl	800d510 <_fstat>
 800d486:	1c43      	adds	r3, r0, #1
 800d488:	d102      	bne.n	800d490 <_fstat_r+0x1c>
 800d48a:	682b      	ldr	r3, [r5, #0]
 800d48c:	b103      	cbz	r3, 800d490 <_fstat_r+0x1c>
 800d48e:	6023      	str	r3, [r4, #0]
 800d490:	bd38      	pop	{r3, r4, r5, pc}
 800d492:	bf00      	nop
 800d494:	20001708 	.word	0x20001708

0800d498 <_isatty_r>:
 800d498:	b538      	push	{r3, r4, r5, lr}
 800d49a:	4d06      	ldr	r5, [pc, #24]	; (800d4b4 <_isatty_r+0x1c>)
 800d49c:	2300      	movs	r3, #0
 800d49e:	4604      	mov	r4, r0
 800d4a0:	4608      	mov	r0, r1
 800d4a2:	602b      	str	r3, [r5, #0]
 800d4a4:	f000 f844 	bl	800d530 <_isatty>
 800d4a8:	1c43      	adds	r3, r0, #1
 800d4aa:	d102      	bne.n	800d4b2 <_isatty_r+0x1a>
 800d4ac:	682b      	ldr	r3, [r5, #0]
 800d4ae:	b103      	cbz	r3, 800d4b2 <_isatty_r+0x1a>
 800d4b0:	6023      	str	r3, [r4, #0]
 800d4b2:	bd38      	pop	{r3, r4, r5, pc}
 800d4b4:	20001708 	.word	0x20001708

0800d4b8 <_lseek_r>:
 800d4b8:	b538      	push	{r3, r4, r5, lr}
 800d4ba:	4d07      	ldr	r5, [pc, #28]	; (800d4d8 <_lseek_r+0x20>)
 800d4bc:	4604      	mov	r4, r0
 800d4be:	4608      	mov	r0, r1
 800d4c0:	4611      	mov	r1, r2
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	602a      	str	r2, [r5, #0]
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	f000 f842 	bl	800d550 <_lseek>
 800d4cc:	1c43      	adds	r3, r0, #1
 800d4ce:	d102      	bne.n	800d4d6 <_lseek_r+0x1e>
 800d4d0:	682b      	ldr	r3, [r5, #0]
 800d4d2:	b103      	cbz	r3, 800d4d6 <_lseek_r+0x1e>
 800d4d4:	6023      	str	r3, [r4, #0]
 800d4d6:	bd38      	pop	{r3, r4, r5, pc}
 800d4d8:	20001708 	.word	0x20001708

0800d4dc <_read_r>:
 800d4dc:	b538      	push	{r3, r4, r5, lr}
 800d4de:	4d07      	ldr	r5, [pc, #28]	; (800d4fc <_read_r+0x20>)
 800d4e0:	4604      	mov	r4, r0
 800d4e2:	4608      	mov	r0, r1
 800d4e4:	4611      	mov	r1, r2
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	602a      	str	r2, [r5, #0]
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	f000 f838 	bl	800d560 <_read>
 800d4f0:	1c43      	adds	r3, r0, #1
 800d4f2:	d102      	bne.n	800d4fa <_read_r+0x1e>
 800d4f4:	682b      	ldr	r3, [r5, #0]
 800d4f6:	b103      	cbz	r3, 800d4fa <_read_r+0x1e>
 800d4f8:	6023      	str	r3, [r4, #0]
 800d4fa:	bd38      	pop	{r3, r4, r5, pc}
 800d4fc:	20001708 	.word	0x20001708

0800d500 <_close>:
 800d500:	4b02      	ldr	r3, [pc, #8]	; (800d50c <_close+0xc>)
 800d502:	2258      	movs	r2, #88	; 0x58
 800d504:	601a      	str	r2, [r3, #0]
 800d506:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d50a:	4770      	bx	lr
 800d50c:	20001708 	.word	0x20001708

0800d510 <_fstat>:
 800d510:	4b02      	ldr	r3, [pc, #8]	; (800d51c <_fstat+0xc>)
 800d512:	2258      	movs	r2, #88	; 0x58
 800d514:	601a      	str	r2, [r3, #0]
 800d516:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d51a:	4770      	bx	lr
 800d51c:	20001708 	.word	0x20001708

0800d520 <_getpid>:
 800d520:	4b02      	ldr	r3, [pc, #8]	; (800d52c <_getpid+0xc>)
 800d522:	2258      	movs	r2, #88	; 0x58
 800d524:	601a      	str	r2, [r3, #0]
 800d526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d52a:	4770      	bx	lr
 800d52c:	20001708 	.word	0x20001708

0800d530 <_isatty>:
 800d530:	4b02      	ldr	r3, [pc, #8]	; (800d53c <_isatty+0xc>)
 800d532:	2258      	movs	r2, #88	; 0x58
 800d534:	601a      	str	r2, [r3, #0]
 800d536:	2000      	movs	r0, #0
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop
 800d53c:	20001708 	.word	0x20001708

0800d540 <_kill>:
 800d540:	4b02      	ldr	r3, [pc, #8]	; (800d54c <_kill+0xc>)
 800d542:	2258      	movs	r2, #88	; 0x58
 800d544:	601a      	str	r2, [r3, #0]
 800d546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d54a:	4770      	bx	lr
 800d54c:	20001708 	.word	0x20001708

0800d550 <_lseek>:
 800d550:	4b02      	ldr	r3, [pc, #8]	; (800d55c <_lseek+0xc>)
 800d552:	2258      	movs	r2, #88	; 0x58
 800d554:	601a      	str	r2, [r3, #0]
 800d556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d55a:	4770      	bx	lr
 800d55c:	20001708 	.word	0x20001708

0800d560 <_read>:
 800d560:	4b02      	ldr	r3, [pc, #8]	; (800d56c <_read+0xc>)
 800d562:	2258      	movs	r2, #88	; 0x58
 800d564:	601a      	str	r2, [r3, #0]
 800d566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d56a:	4770      	bx	lr
 800d56c:	20001708 	.word	0x20001708

0800d570 <_write>:
 800d570:	4b02      	ldr	r3, [pc, #8]	; (800d57c <_write+0xc>)
 800d572:	2258      	movs	r2, #88	; 0x58
 800d574:	601a      	str	r2, [r3, #0]
 800d576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d57a:	4770      	bx	lr
 800d57c:	20001708 	.word	0x20001708

0800d580 <_exit>:
 800d580:	e7fe      	b.n	800d580 <_exit>
	...

0800d584 <_init>:
 800d584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d586:	bf00      	nop
 800d588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d58a:	bc08      	pop	{r3}
 800d58c:	469e      	mov	lr, r3
 800d58e:	4770      	bx	lr

0800d590 <_fini>:
 800d590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d592:	bf00      	nop
 800d594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d596:	bc08      	pop	{r3}
 800d598:	469e      	mov	lr, r3
 800d59a:	4770      	bx	lr
