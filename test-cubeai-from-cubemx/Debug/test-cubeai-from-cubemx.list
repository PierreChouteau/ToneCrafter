
test-cubeai-from-cubemx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aff4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009ec  0800b1c8  0800b1c8  0001b1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbb4  0800bbb4  000207b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbb4  0800bbb4  0001bbb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbbc  0800bbbc  000207b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbbc  0800bbbc  0001bbbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbc0  0800bbc0  0001bbc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007b4  20000000  0800bbc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd4  200007b4  0800c378  000207b4  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20001388  0800c378  00021388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000207b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023945  00000000  00000000  000207e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003de5  00000000  00000000  00044129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001720  00000000  00000000  00047f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001598  00000000  00000000  00049630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f4ef  00000000  00000000  0004abc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cd1a  00000000  00000000  0007a0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001286f1  00000000  00000000  00096dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  001bf4c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073c8  00000000  00000000  001bf590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001c6958  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001c6a24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200007b4 	.word	0x200007b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b1ac 	.word	0x0800b1ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200007b8 	.word	0x200007b8
 800020c:	0800b1ac 	.word	0x0800b1ac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	b0d0      	sub	sp, #320	; 0x140
 8000ee4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  char buf[50];
  int buf_len = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_SINE_MODEL_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];

  // Pointer to our model
  ai_handle sine_model = AI_HANDLE_NULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	663b      	str	r3, [r7, #96]	; 0x60

  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 8000ef0:	4b8a      	ldr	r3, [pc, #552]	; (800111c <main+0x23c>)
 8000ef2:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000ef6:	461d      	mov	r5, r3
 8000ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000efc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f00:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 8000f04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f08:	4a84      	ldr	r2, [pc, #528]	; (800111c <main+0x23c>)
 8000f0a:	461c      	mov	r4, r3
 8000f0c:	4615      	mov	r5, r2
 8000f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f16:	e884 0003 	stmia.w	r4, {r0, r1}

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4a80      	ldr	r2, [pc, #512]	; (8001120 <main+0x240>)
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	463b      	mov	r3, r7
 8000f22:	2201      	movs	r2, #1
 8000f24:	809a      	strh	r2, [r3, #4]
 8000f26:	463b      	mov	r3, r7
 8000f28:	2201      	movs	r2, #1
 8000f2a:	80da      	strh	r2, [r3, #6]
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2201      	movs	r2, #1
 8000f30:	811a      	strh	r2, [r3, #8]
 8000f32:	463b      	mov	r3, r7
 8000f34:	f240 5204 	movw	r2, #1284	; 0x504
 8000f38:	60da      	str	r2, [r3, #12]
    AI_SINE_MODEL_DATA_WEIGHTS(ai_sine_model_data_weights_get()),
 8000f3a:	f005 fe63 	bl	8006c04 <ai_sine_model_data_weights_get>
 8000f3e:	4602      	mov	r2, r0
  ai_network_params ai_params = {
 8000f40:	463b      	mov	r3, r7
 8000f42:	611a      	str	r2, [r3, #16]
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	4a75      	ldr	r2, [pc, #468]	; (8001124 <main+0x244>)
 8000f4e:	619a      	str	r2, [r3, #24]
 8000f50:	463b      	mov	r3, r7
 8000f52:	2201      	movs	r2, #1
 8000f54:	839a      	strh	r2, [r3, #28]
 8000f56:	463b      	mov	r3, r7
 8000f58:	2201      	movs	r2, #1
 8000f5a:	83da      	strh	r2, [r3, #30]
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2201      	movs	r2, #1
 8000f60:	841a      	strh	r2, [r3, #32]
 8000f62:	463b      	mov	r3, r7
 8000f64:	2280      	movs	r2, #128	; 0x80
 8000f66:	625a      	str	r2, [r3, #36]	; 0x24
 8000f68:	463b      	mov	r3, r7
 8000f6a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
 8000f70:	463b      	mov	r3, r7
 8000f72:	2200      	movs	r2, #0
 8000f74:	62da      	str	r2, [r3, #44]	; 0x2c
    AI_SINE_MODEL_DATA_ACTIVATIONS(activations)
  };


  // Set pointers wrapper structs to our data buffers
  ai_input[0].n_batches = 1;
 8000f76:	2301      	movs	r3, #1
 8000f78:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000f7c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f80:	65bb      	str	r3, [r7, #88]	; 0x58
  ai_output[0].n_batches = 1;
 8000f82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f86:	2201      	movs	r2, #1
 8000f88:	809a      	strh	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000f8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f8e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000f92:	611a      	str	r2, [r3, #16]
  //SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f94:	f000 feb1 	bl	8001cfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f98:	f000 f8d4 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9c:	f000 fa1e 	bl	80013dc <MX_GPIO_Init>
//  MX_ADC3_Init();
  MX_CRC_Init();
 8000fa0:	f000 f990 	bl	80012c4 <MX_CRC_Init>
//  MX_TIM1_Init();
//  MX_TIM2_Init();
//  MX_TIM3_Init();
//  MX_TIM5_Init();
//  MX_TIM8_Init();
  MX_TIM12_Init();
 8000fa4:	f000 f9b0 	bl	8001308 <MX_TIM12_Init>
//  MX_USART1_UART_Init();
  MX_USART6_UART_Init();
 8000fa8:	f000 f9e8 	bl	800137c <MX_USART6_UART_Init>
//  MX_FATFS_Init();
//  MX_USB_HOST_Init();
  /* USER CODE BEGIN 2 */

  // Start timer/counter
  HAL_TIM_Base_Start(&htim12);
 8000fac:	485e      	ldr	r0, [pc, #376]	; (8001128 <main+0x248>)
 8000fae:	f004 f84b 	bl	8005048 <HAL_TIM_Base_Start>

  // Greetings!
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 8000fb2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000fb6:	495d      	ldr	r1, [pc, #372]	; (800112c <main+0x24c>)
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f007 ff5b 	bl	8008e74 <siprintf>
 8000fbe:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
  HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 8000fc2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8000fcc:	2364      	movs	r3, #100	; 0x64
 8000fce:	4858      	ldr	r0, [pc, #352]	; (8001130 <main+0x250>)
 8000fd0:	f004 fcd6 	bl	8005980 <HAL_UART_Transmit>

  // Create instance of neural network
  ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 8000fd4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f005 fdac 	bl	8006b38 <ai_sine_model_create>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (ai_err.type != AI_ERROR_NONE)
 8000fe6:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d011      	beq.n	8001012 <main+0x132>
  {
    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000fee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000ff2:	4950      	ldr	r1, [pc, #320]	; (8001134 <main+0x254>)
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f007 ff3d 	bl	8008e74 <siprintf>
 8000ffa:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
    HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 8000ffe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001002:	b29a      	uxth	r2, r3
 8001004:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8001008:	2364      	movs	r3, #100	; 0x64
 800100a:	4849      	ldr	r0, [pc, #292]	; (8001130 <main+0x250>)
 800100c:	f004 fcb8 	bl	8005980 <HAL_UART_Transmit>
    while(1);
 8001010:	e7fe      	b.n	8001010 <main+0x130>
  }

  // Initialize neural network
  if (!ai_sine_model_init(sine_model, &ai_params))
 8001012:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001014:	463a      	mov	r2, r7
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f005 fda3 	bl	8006b64 <ai_sine_model_init>
 800101e:	4603      	mov	r3, r0
 8001020:	f083 0301 	eor.w	r3, r3, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d011      	beq.n	800104e <main+0x16e>
  {
    buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 800102a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800102e:	4942      	ldr	r1, [pc, #264]	; (8001138 <main+0x258>)
 8001030:	4618      	mov	r0, r3
 8001032:	f007 ff1f 	bl	8008e74 <siprintf>
 8001036:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
    HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 800103a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800103e:	b29a      	uxth	r2, r3
 8001040:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8001044:	2364      	movs	r3, #100	; 0x64
 8001046:	483a      	ldr	r0, [pc, #232]	; (8001130 <main+0x250>)
 8001048:	f004 fc9a 	bl	8005980 <HAL_UART_Transmit>
    while(1);
 800104c:	e7fe      	b.n	800104c <main+0x16c>
  {
    /* USER CODE END WHILE */
    //MX_USB_HOST_Process();

    /* USER CODE BEGIN 3 */
    LED_Toggle();
 800104e:	f000 fb97 	bl	8001780 <LED_Toggle>
    HAL_Delay(500);
 8001052:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001056:	f000 fe7d 	bl	8001d54 <HAL_Delay>

    // Fill input buffer (use test value)
	for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001060:	e00d      	b.n	800107e <main+0x19e>
	{
	  ((ai_float *)in_data)[i] = (ai_float)2.0f;
 8001062:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800106c:	4413      	add	r3, r2
 800106e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001072:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8001074:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001078:	3301      	adds	r3, #1
 800107a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800107e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001082:	2b00      	cmp	r3, #0
 8001084:	d0ed      	beq.n	8001062 <main+0x182>
	}

	// Get current timestamp
	timestamp = htim12.Instance->CNT;
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <main+0x248>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	// Perform inference
	nbatch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 8001090:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001092:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001096:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800109a:	4618      	mov	r0, r3
 800109c:	f005 fda1 	bl	8006be2 <ai_sine_model_run>
 80010a0:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
	if (nbatch != 1) {
 80010a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d010      	beq.n	80010ce <main+0x1ee>
	  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 80010ac:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80010b0:	4922      	ldr	r1, [pc, #136]	; (800113c <main+0x25c>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f007 fede 	bl	8008e74 <siprintf>
 80010b8:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	  HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 80010bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80010c6:	2364      	movs	r3, #100	; 0x64
 80010c8:	4819      	ldr	r0, [pc, #100]	; (8001130 <main+0x250>)
 80010ca:	f004 fc59 	bl	8005980 <HAL_UART_Transmit>
	}

	// Read output (predicted y) of neural network
	y_val = ((float *)out_data)[0];
 80010ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

	// Print output of neural network along with inference time (microseconds)
	buf_len = sprintf(buf, "Output: %f | Duration: %lu\r\n", y_val, htim12.Instance->CNT - timestamp);
 80010d8:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80010dc:	f7ff fa54 	bl	8000588 <__aeabi_f2d>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4910      	ldr	r1, [pc, #64]	; (8001128 <main+0x248>)
 80010e6:	6809      	ldr	r1, [r1, #0]
 80010e8:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80010ea:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80010ee:	1a41      	subs	r1, r0, r1
 80010f0:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 80010f4:	9100      	str	r1, [sp, #0]
 80010f6:	4912      	ldr	r1, [pc, #72]	; (8001140 <main+0x260>)
 80010f8:	f007 febc 	bl	8008e74 <siprintf>
 80010fc:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 8001100:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001104:	b29a      	uxth	r2, r3
 8001106:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 800110a:	2364      	movs	r3, #100	; 0x64
 800110c:	4808      	ldr	r0, [pc, #32]	; (8001130 <main+0x250>)
 800110e:	f004 fc37 	bl	8005980 <HAL_UART_Transmit>

	// Wait before doing it again
	HAL_Delay(500);
 8001112:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001116:	f000 fe1d 	bl	8001d54 <HAL_Delay>
    LED_Toggle();
 800111a:	e798      	b.n	800104e <main+0x16e>
 800111c:	0800b274 	.word	0x0800b274
 8001120:	40040440 	.word	0x40040440
 8001124:	00040440 	.word	0x00040440
 8001128:	20000f10 	.word	0x20000f10
 800112c:	0800b1c8 	.word	0x0800b1c8
 8001130:	20000e00 	.word	0x20000e00
 8001134:	0800b1e4 	.word	0x0800b1e4
 8001138:	0800b20c 	.word	0x0800b20c
 800113c:	0800b230 	.word	0x0800b230
 8001140:	0800b254 	.word	0x0800b254

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b0b4      	sub	sp, #208	; 0xd0
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800114e:	2230      	movs	r2, #48	; 0x30
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f007 f962 	bl	800841c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001168:	f107 0308 	add.w	r3, r7, #8
 800116c:	2284      	movs	r2, #132	; 0x84
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f007 f953 	bl	800841c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001176:	f002 fe13 	bl	8003da0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	4b4f      	ldr	r3, [pc, #316]	; (80012b8 <SystemClock_Config+0x174>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	4a4e      	ldr	r2, [pc, #312]	; (80012b8 <SystemClock_Config+0x174>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	6413      	str	r3, [r2, #64]	; 0x40
 8001186:	4b4c      	ldr	r3, [pc, #304]	; (80012b8 <SystemClock_Config+0x174>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001192:	4b4a      	ldr	r3, [pc, #296]	; (80012bc <SystemClock_Config+0x178>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a49      	ldr	r2, [pc, #292]	; (80012bc <SystemClock_Config+0x178>)
 8001198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	4b47      	ldr	r3, [pc, #284]	; (80012bc <SystemClock_Config+0x178>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80011aa:	2309      	movs	r3, #9
 80011ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011b8:	2301      	movs	r3, #1
 80011ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011be:	2302      	movs	r3, #2
 80011c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80011cc:	2319      	movs	r3, #25
 80011ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80011d2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80011d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011da:	2302      	movs	r3, #2
 80011dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80011e0:	2309      	movs	r3, #9
 80011e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 fe38 	bl	8003e60 <HAL_RCC_OscConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80011f6:	f000 fadf 	bl	80017b8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011fa:	f002 fde1 	bl	8003dc0 <HAL_PWREx_EnableOverDrive>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001204:	f000 fad8 	bl	80017b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001208:	230f      	movs	r3, #15
 800120a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800121a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800121e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001226:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800122a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800122e:	2106      	movs	r1, #6
 8001230:	4618      	mov	r0, r3
 8001232:	f003 f8b9 	bl	80043a8 <HAL_RCC_ClockConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800123c:	f000 fabc 	bl	80017b8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <SystemClock_Config+0x17c>)
 8001242:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001244:	2364      	movs	r3, #100	; 0x64
 8001246:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001248:	2302      	movs	r3, #2
 800124a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800124c:	2302      	movs	r3, #2
 800124e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001250:	2302      	movs	r3, #2
 8001252:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001254:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001258:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800125a:	2305      	movs	r3, #5
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800125e:	2302      	movs	r3, #2
 8001260:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001262:	2303      	movs	r3, #3
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001266:	2301      	movs	r3, #1
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800126a:	2301      	movs	r3, #1
 800126c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800126e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001272:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001278:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800127a:	2300      	movs	r3, #0
 800127c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800127e:	2300      	movs	r3, #0
 8001280:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001282:	2300      	movs	r3, #0
 8001284:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001286:	2300      	movs	r3, #0
 8001288:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800128a:	2300      	movs	r3, #0
 800128c:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800128e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001292:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fa89 	bl	80047b8 <HAL_RCCEx_PeriphCLKConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 80012ac:	f000 fa84 	bl	80017b8 <Error_Handler>
  }
}
 80012b0:	bf00      	nop
 80012b2:	37d0      	adds	r7, #208	; 0xd0
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40007000 	.word	0x40007000
 80012c0:	01b14868 	.word	0x01b14868

080012c4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <MX_CRC_Init+0x3c>)
 80012ca:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <MX_CRC_Init+0x40>)
 80012cc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_CRC_Init+0x3c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <MX_CRC_Init+0x3c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_CRC_Init+0x3c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <MX_CRC_Init+0x3c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_CRC_Init+0x3c>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <MX_CRC_Init+0x3c>)
 80012ee:	f000 fe37 	bl	8001f60 <HAL_CRC_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80012f8:	f000 fa5e 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000a90 	.word	0x20000a90
 8001304:	40023000 	.word	0x40023000

08001308 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	463b      	mov	r3, r7
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <MX_TIM12_Init+0x6c>)
 800131c:	4a16      	ldr	r2, [pc, #88]	; (8001378 <MX_TIM12_Init+0x70>)
 800131e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 80 - 1;
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_TIM12_Init+0x6c>)
 8001322:	224f      	movs	r2, #79	; 0x4f
 8001324:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <MX_TIM12_Init+0x6c>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_TIM12_Init+0x6c>)
 800132e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001332:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_TIM12_Init+0x6c>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_TIM12_Init+0x6c>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001340:	480c      	ldr	r0, [pc, #48]	; (8001374 <MX_TIM12_Init+0x6c>)
 8001342:	f003 fe29 	bl	8004f98 <HAL_TIM_Base_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 800134c:	f000 fa34 	bl	80017b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001354:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001356:	463b      	mov	r3, r7
 8001358:	4619      	mov	r1, r3
 800135a:	4806      	ldr	r0, [pc, #24]	; (8001374 <MX_TIM12_Init+0x6c>)
 800135c:	f004 f87c 	bl	8005458 <HAL_TIM_ConfigClockSource>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8001366:	f000 fa27 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000f10 	.word	0x20000f10
 8001378:	40001800 	.word	0x40001800

0800137c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_USART6_UART_Init+0x58>)
 8001382:	4a15      	ldr	r2, [pc, #84]	; (80013d8 <MX_USART6_UART_Init+0x5c>)
 8001384:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_USART6_UART_Init+0x58>)
 8001388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800138c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_USART6_UART_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_USART6_UART_Init+0x58>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_USART6_UART_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_USART6_UART_Init+0x58>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_USART6_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_USART6_UART_Init+0x58>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_USART6_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_USART6_UART_Init+0x58>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_USART6_UART_Init+0x58>)
 80013c0:	f004 fa90 	bl	80058e4 <HAL_UART_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80013ca:	f000 f9f5 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000e00 	.word	0x20000e00
 80013d8:	40011400 	.word	0x40011400

080013dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b090      	sub	sp, #64	; 0x40
 80013e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f2:	4baf      	ldr	r3, [pc, #700]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4aae      	ldr	r2, [pc, #696]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 80013f8:	f043 0310 	orr.w	r3, r3, #16
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4bac      	ldr	r3, [pc, #688]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
 8001408:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800140a:	4ba9      	ldr	r3, [pc, #676]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4aa8      	ldr	r2, [pc, #672]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 8001410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4ba6      	ldr	r3, [pc, #664]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	4ba3      	ldr	r3, [pc, #652]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4aa2      	ldr	r2, [pc, #648]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4ba0      	ldr	r3, [pc, #640]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	623b      	str	r3, [r7, #32]
 8001438:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800143a:	4b9d      	ldr	r3, [pc, #628]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a9c      	ldr	r2, [pc, #624]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b9a      	ldr	r3, [pc, #616]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	4b97      	ldr	r3, [pc, #604]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a96      	ldr	r2, [pc, #600]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b94      	ldr	r3, [pc, #592]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	61bb      	str	r3, [r7, #24]
 8001468:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b91      	ldr	r3, [pc, #580]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a90      	ldr	r2, [pc, #576]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b8e      	ldr	r3, [pc, #568]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001482:	4b8b      	ldr	r3, [pc, #556]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a8a      	ldr	r2, [pc, #552]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 8001488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b88      	ldr	r3, [pc, #544]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800149a:	4b85      	ldr	r3, [pc, #532]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a84      	ldr	r2, [pc, #528]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 80014a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b82      	ldr	r3, [pc, #520]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80014b2:	4b7f      	ldr	r3, [pc, #508]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a7e      	ldr	r2, [pc, #504]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 80014b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b7c      	ldr	r3, [pc, #496]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ca:	4b79      	ldr	r3, [pc, #484]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a78      	ldr	r2, [pc, #480]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 80014d0:	f043 0320 	orr.w	r3, r3, #32
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b76      	ldr	r3, [pc, #472]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0320 	and.w	r3, r3, #32
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e2:	4b73      	ldr	r3, [pc, #460]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a72      	ldr	r2, [pc, #456]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 80014e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b70      	ldr	r3, [pc, #448]	; (80016b0 <MX_GPIO_Init+0x2d4>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	2120      	movs	r1, #32
 80014fe:	486d      	ldr	r0, [pc, #436]	; (80016b4 <MX_GPIO_Init+0x2d8>)
 8001500:	f001 f8d4 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	210e      	movs	r1, #14
 8001508:	486b      	ldr	r0, [pc, #428]	; (80016b8 <MX_GPIO_Init+0x2dc>)
 800150a:	f001 f8cf 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800150e:	2201      	movs	r2, #1
 8001510:	2108      	movs	r1, #8
 8001512:	486a      	ldr	r0, [pc, #424]	; (80016bc <MX_GPIO_Init+0x2e0>)
 8001514:	f001 f8ca 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001518:	2201      	movs	r2, #1
 800151a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800151e:	4866      	ldr	r0, [pc, #408]	; (80016b8 <MX_GPIO_Init+0x2dc>)
 8001520:	f001 f8c4 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800152a:	4865      	ldr	r0, [pc, #404]	; (80016c0 <MX_GPIO_Init+0x2e4>)
 800152c:	f001 f8be 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	21c8      	movs	r1, #200	; 0xc8
 8001534:	4863      	ldr	r0, [pc, #396]	; (80016c4 <MX_GPIO_Init+0x2e8>)
 8001536:	f001 f8b9 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800153a:	2308      	movs	r3, #8
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153e:	2300      	movs	r3, #0
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154a:	4619      	mov	r1, r3
 800154c:	485e      	ldr	r0, [pc, #376]	; (80016c8 <MX_GPIO_Init+0x2ec>)
 800154e:	f000 ff01 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001552:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001564:	230a      	movs	r3, #10
 8001566:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800156c:	4619      	mov	r1, r3
 800156e:	4857      	ldr	r0, [pc, #348]	; (80016cc <MX_GPIO_Init+0x2f0>)
 8001570:	f000 fef0 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157a:	2300      	movs	r3, #0
 800157c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001586:	4619      	mov	r1, r3
 8001588:	4851      	ldr	r0, [pc, #324]	; (80016d0 <MX_GPIO_Init+0x2f4>)
 800158a:	f000 fee3 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800158e:	2340      	movs	r3, #64	; 0x40
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001592:	4b50      	ldr	r3, [pc, #320]	; (80016d4 <MX_GPIO_Init+0x2f8>)
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800159a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800159e:	4619      	mov	r1, r3
 80015a0:	4844      	ldr	r0, [pc, #272]	; (80016b4 <MX_GPIO_Init+0x2d8>)
 80015a2:	f000 fed7 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80015a6:	2320      	movs	r3, #32
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ba:	4619      	mov	r1, r3
 80015bc:	483d      	ldr	r0, [pc, #244]	; (80016b4 <MX_GPIO_Init+0x2d8>)
 80015be:	f000 fec9 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 80015c2:	f241 030e 	movw	r3, #4110	; 0x100e
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015d8:	4619      	mov	r1, r3
 80015da:	4837      	ldr	r0, [pc, #220]	; (80016b8 <MX_GPIO_Init+0x2dc>)
 80015dc:	f000 feba 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80015e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e6:	2300      	movs	r3, #0
 80015e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015f2:	4619      	mov	r1, r3
 80015f4:	4838      	ldr	r0, [pc, #224]	; (80016d8 <MX_GPIO_Init+0x2fc>)
 80015f6:	f000 fead 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80015fa:	2308      	movs	r3, #8
 80015fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800160e:	4619      	mov	r1, r3
 8001610:	482a      	ldr	r0, [pc, #168]	; (80016bc <MX_GPIO_Init+0x2e0>)
 8001612:	f000 fe9f 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001616:	2310      	movs	r3, #16
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161a:	2300      	movs	r3, #0
 800161c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001626:	4619      	mov	r1, r3
 8001628:	4822      	ldr	r0, [pc, #136]	; (80016b4 <MX_GPIO_Init+0x2d8>)
 800162a:	f000 fe93 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800162e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001634:	2300      	movs	r3, #0
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800163c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001640:	4619      	mov	r1, r3
 8001642:	481f      	ldr	r0, [pc, #124]	; (80016c0 <MX_GPIO_Init+0x2e4>)
 8001644:	f000 fe86 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001648:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800165e:	4619      	mov	r1, r3
 8001660:	4817      	ldr	r0, [pc, #92]	; (80016c0 <MX_GPIO_Init+0x2e4>)
 8001662:	f000 fe77 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <MX_GPIO_Init+0x2f8>)
 800166e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001678:	4619      	mov	r1, r3
 800167a:	480f      	ldr	r0, [pc, #60]	; (80016b8 <MX_GPIO_Init+0x2dc>)
 800167c:	f000 fe6a 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001680:	2310      	movs	r3, #16
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001690:	230a      	movs	r3, #10
 8001692:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001694:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001698:	4619      	mov	r1, r3
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <MX_GPIO_Init+0x2e4>)
 800169c:	f000 fe5a 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80016a0:	23c8      	movs	r3, #200	; 0xc8
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	637b      	str	r3, [r7, #52]	; 0x34
 80016ac:	e016      	b.n	80016dc <MX_GPIO_Init+0x300>
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40020c00 	.word	0x40020c00
 80016b8:	40022000 	.word	0x40022000
 80016bc:	40022800 	.word	0x40022800
 80016c0:	40021c00 	.word	0x40021c00
 80016c4:	40021800 	.word	0x40021800
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40020400 	.word	0x40020400
 80016d0:	40022400 	.word	0x40022400
 80016d4:	10120000 	.word	0x10120000
 80016d8:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e4:	4619      	mov	r1, r3
 80016e6:	4822      	ldr	r0, [pc, #136]	; (8001770 <MX_GPIO_Init+0x394>)
 80016e8:	f000 fe34 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80016ec:	2305      	movs	r3, #5
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80016fc:	230a      	movs	r3, #10
 80016fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001700:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001704:	4619      	mov	r1, r3
 8001706:	481b      	ldr	r0, [pc, #108]	; (8001774 <MX_GPIO_Init+0x398>)
 8001708:	f000 fe24 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800170c:	2304      	movs	r3, #4
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001710:	2300      	movs	r3, #0
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800171c:	4619      	mov	r1, r3
 800171e:	4814      	ldr	r0, [pc, #80]	; (8001770 <MX_GPIO_Init+0x394>)
 8001720:	f000 fe18 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001724:	2328      	movs	r3, #40	; 0x28
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001734:	230a      	movs	r3, #10
 8001736:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800173c:	4619      	mov	r1, r3
 800173e:	480e      	ldr	r0, [pc, #56]	; (8001778 <MX_GPIO_Init+0x39c>)
 8001740:	f000 fe08 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001744:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001756:	2305      	movs	r3, #5
 8001758:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800175e:	4619      	mov	r1, r3
 8001760:	4806      	ldr	r0, [pc, #24]	; (800177c <MX_GPIO_Init+0x3a0>)
 8001762:	f000 fdf7 	bl	8002354 <HAL_GPIO_Init>

}
 8001766:	bf00      	nop
 8001768:	3740      	adds	r7, #64	; 0x40
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40021800 	.word	0x40021800
 8001774:	40020800 	.word	0x40020800
 8001778:	40020000 	.word	0x40020000
 800177c:	40020400 	.word	0x40020400

08001780 <LED_Toggle>:
void LED_Off(){

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
}

void LED_Toggle(){
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 8001784:	2102      	movs	r1, #2
 8001786:	4802      	ldr	r0, [pc, #8]	; (8001790 <LED_Toggle+0x10>)
 8001788:	f000 ffa9 	bl	80026de <HAL_GPIO_TogglePin>
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40022000 	.word	0x40022000

08001794 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d101      	bne.n	80017aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017a6:	f000 fab5 	bl	8001d14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40001000 	.word	0x40001000

080017b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017bc:	b672      	cpsid	i
}
 80017be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <Error_Handler+0x8>
	...

080017c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_MspInit+0x44>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <HAL_MspInit+0x44>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_MspInit+0x44>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_MspInit+0x44>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	4a08      	ldr	r2, [pc, #32]	; (8001808 <HAL_MspInit+0x44>)
 80017e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ec:	6453      	str	r3, [r2, #68]	; 0x44
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_MspInit+0x44>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800

0800180c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <HAL_CRC_MspInit+0x38>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d10b      	bne.n	8001836 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <HAL_CRC_MspInit+0x3c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a09      	ldr	r2, [pc, #36]	; (8001848 <HAL_CRC_MspInit+0x3c>)
 8001824:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <HAL_CRC_MspInit+0x3c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40023000 	.word	0x40023000
 8001848:	40023800 	.word	0x40023800

0800184c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08e      	sub	sp, #56	; 0x38
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a44      	ldr	r2, [pc, #272]	; (800197c <HAL_TIM_Base_MspInit+0x130>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d10c      	bne.n	8001888 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800186e:	4b44      	ldr	r3, [pc, #272]	; (8001980 <HAL_TIM_Base_MspInit+0x134>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	4a43      	ldr	r2, [pc, #268]	; (8001980 <HAL_TIM_Base_MspInit+0x134>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	4b41      	ldr	r3, [pc, #260]	; (8001980 <HAL_TIM_Base_MspInit+0x134>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	623b      	str	r3, [r7, #32]
 8001884:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001886:	e074      	b.n	8001972 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001890:	d10c      	bne.n	80018ac <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001892:	4b3b      	ldr	r3, [pc, #236]	; (8001980 <HAL_TIM_Base_MspInit+0x134>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a3a      	ldr	r2, [pc, #232]	; (8001980 <HAL_TIM_Base_MspInit+0x134>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b38      	ldr	r3, [pc, #224]	; (8001980 <HAL_TIM_Base_MspInit+0x134>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	69fb      	ldr	r3, [r7, #28]
}
 80018aa:	e062      	b.n	8001972 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM3)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a34      	ldr	r2, [pc, #208]	; (8001984 <HAL_TIM_Base_MspInit+0x138>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d10c      	bne.n	80018d0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018b6:	4b32      	ldr	r3, [pc, #200]	; (8001980 <HAL_TIM_Base_MspInit+0x134>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a31      	ldr	r2, [pc, #196]	; (8001980 <HAL_TIM_Base_MspInit+0x134>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b2f      	ldr	r3, [pc, #188]	; (8001980 <HAL_TIM_Base_MspInit+0x134>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	61bb      	str	r3, [r7, #24]
 80018cc:	69bb      	ldr	r3, [r7, #24]
}
 80018ce:	e050      	b.n	8001972 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM5)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a2c      	ldr	r2, [pc, #176]	; (8001988 <HAL_TIM_Base_MspInit+0x13c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d10c      	bne.n	80018f4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018da:	4b29      	ldr	r3, [pc, #164]	; (8001980 <HAL_TIM_Base_MspInit+0x134>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	4a28      	ldr	r2, [pc, #160]	; (8001980 <HAL_TIM_Base_MspInit+0x134>)
 80018e0:	f043 0308 	orr.w	r3, r3, #8
 80018e4:	6413      	str	r3, [r2, #64]	; 0x40
 80018e6:	4b26      	ldr	r3, [pc, #152]	; (8001980 <HAL_TIM_Base_MspInit+0x134>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697b      	ldr	r3, [r7, #20]
}
 80018f2:	e03e      	b.n	8001972 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM8)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a24      	ldr	r2, [pc, #144]	; (800198c <HAL_TIM_Base_MspInit+0x140>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d10c      	bne.n	8001918 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018fe:	4b20      	ldr	r3, [pc, #128]	; (8001980 <HAL_TIM_Base_MspInit+0x134>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	4a1f      	ldr	r2, [pc, #124]	; (8001980 <HAL_TIM_Base_MspInit+0x134>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	6453      	str	r3, [r2, #68]	; 0x44
 800190a:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <HAL_TIM_Base_MspInit+0x134>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
}
 8001916:	e02c      	b.n	8001972 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM12)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a1c      	ldr	r2, [pc, #112]	; (8001990 <HAL_TIM_Base_MspInit+0x144>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d127      	bne.n	8001972 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <HAL_TIM_Base_MspInit+0x134>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a16      	ldr	r2, [pc, #88]	; (8001980 <HAL_TIM_Base_MspInit+0x134>)
 8001928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <HAL_TIM_Base_MspInit+0x134>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_TIM_Base_MspInit+0x134>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a10      	ldr	r2, [pc, #64]	; (8001980 <HAL_TIM_Base_MspInit+0x134>)
 8001940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <HAL_TIM_Base_MspInit+0x134>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001952:	2340      	movs	r3, #64	; 0x40
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001962:	2309      	movs	r3, #9
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196a:	4619      	mov	r1, r3
 800196c:	4809      	ldr	r0, [pc, #36]	; (8001994 <HAL_TIM_Base_MspInit+0x148>)
 800196e:	f000 fcf1 	bl	8002354 <HAL_GPIO_Init>
}
 8001972:	bf00      	nop
 8001974:	3738      	adds	r7, #56	; 0x38
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40010000 	.word	0x40010000
 8001980:	40023800 	.word	0x40023800
 8001984:	40000400 	.word	0x40000400
 8001988:	40000c00 	.word	0x40000c00
 800198c:	40010400 	.word	0x40010400
 8001990:	40001800 	.word	0x40001800
 8001994:	40021c00 	.word	0x40021c00

08001998 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a3c      	ldr	r2, [pc, #240]	; (8001aa8 <HAL_UART_MspInit+0x110>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d145      	bne.n	8001a46 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ba:	4b3c      	ldr	r3, [pc, #240]	; (8001aac <HAL_UART_MspInit+0x114>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	4a3b      	ldr	r2, [pc, #236]	; (8001aac <HAL_UART_MspInit+0x114>)
 80019c0:	f043 0310 	orr.w	r3, r3, #16
 80019c4:	6453      	str	r3, [r2, #68]	; 0x44
 80019c6:	4b39      	ldr	r3, [pc, #228]	; (8001aac <HAL_UART_MspInit+0x114>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f003 0310 	and.w	r3, r3, #16
 80019ce:	61bb      	str	r3, [r7, #24]
 80019d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	4b36      	ldr	r3, [pc, #216]	; (8001aac <HAL_UART_MspInit+0x114>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a35      	ldr	r2, [pc, #212]	; (8001aac <HAL_UART_MspInit+0x114>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b33      	ldr	r3, [pc, #204]	; (8001aac <HAL_UART_MspInit+0x114>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	4b30      	ldr	r3, [pc, #192]	; (8001aac <HAL_UART_MspInit+0x114>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a2f      	ldr	r2, [pc, #188]	; (8001aac <HAL_UART_MspInit+0x114>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <HAL_UART_MspInit+0x114>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a12:	2307      	movs	r3, #7
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 031c 	add.w	r3, r7, #28
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4824      	ldr	r0, [pc, #144]	; (8001ab0 <HAL_UART_MspInit+0x118>)
 8001a1e:	f000 fc99 	bl	8002354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001a22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a34:	2307      	movs	r3, #7
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	481d      	ldr	r0, [pc, #116]	; (8001ab4 <HAL_UART_MspInit+0x11c>)
 8001a40:	f000 fc88 	bl	8002354 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a44:	e02c      	b.n	8001aa0 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a1b      	ldr	r2, [pc, #108]	; (8001ab8 <HAL_UART_MspInit+0x120>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d127      	bne.n	8001aa0 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a50:	4b16      	ldr	r3, [pc, #88]	; (8001aac <HAL_UART_MspInit+0x114>)
 8001a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a54:	4a15      	ldr	r2, [pc, #84]	; (8001aac <HAL_UART_MspInit+0x114>)
 8001a56:	f043 0320 	orr.w	r3, r3, #32
 8001a5a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <HAL_UART_MspInit+0x114>)
 8001a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a68:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_UART_MspInit+0x114>)
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6c:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <HAL_UART_MspInit+0x114>)
 8001a6e:	f043 0304 	orr.w	r3, r3, #4
 8001a72:	6313      	str	r3, [r2, #48]	; 0x30
 8001a74:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_UART_MspInit+0x114>)
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001a80:	23c0      	movs	r3, #192	; 0xc0
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a90:	2308      	movs	r3, #8
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4808      	ldr	r0, [pc, #32]	; (8001abc <HAL_UART_MspInit+0x124>)
 8001a9c:	f000 fc5a 	bl	8002354 <HAL_GPIO_Init>
}
 8001aa0:	bf00      	nop
 8001aa2:	3730      	adds	r7, #48	; 0x30
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40011000 	.word	0x40011000
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020400 	.word	0x40020400
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	40011400 	.word	0x40011400
 8001abc:	40020800 	.word	0x40020800

08001ac0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08c      	sub	sp, #48	; 0x30
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	2036      	movs	r0, #54	; 0x36
 8001ad6:	f000 fa19 	bl	8001f0c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ada:	2036      	movs	r0, #54	; 0x36
 8001adc:	f000 fa32 	bl	8001f44 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <HAL_InitTick+0xa0>)
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	4a1e      	ldr	r2, [pc, #120]	; (8001b60 <HAL_InitTick+0xa0>)
 8001ae6:	f043 0310 	orr.w	r3, r3, #16
 8001aea:	6413      	str	r3, [r2, #64]	; 0x40
 8001aec:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <HAL_InitTick+0xa0>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001af8:	f107 0210 	add.w	r2, r7, #16
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	4611      	mov	r1, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f002 fe26 	bl	8004754 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b08:	f002 fdfc 	bl	8004704 <HAL_RCC_GetPCLK1Freq>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b14:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <HAL_InitTick+0xa4>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	0c9b      	lsrs	r3, r3, #18
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <HAL_InitTick+0xa8>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <HAL_InitTick+0xac>)
 8001b24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <HAL_InitTick+0xa8>)
 8001b28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b2c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_InitTick+0xa8>)
 8001b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b32:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_InitTick+0xa8>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_InitTick+0xa8>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b40:	4809      	ldr	r0, [pc, #36]	; (8001b68 <HAL_InitTick+0xa8>)
 8001b42:	f003 fa29 	bl	8004f98 <HAL_TIM_Base_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d104      	bne.n	8001b56 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001b4c:	4806      	ldr	r0, [pc, #24]	; (8001b68 <HAL_InitTick+0xa8>)
 8001b4e:	f003 faeb 	bl	8005128 <HAL_TIM_Base_Start_IT>
 8001b52:	4603      	mov	r3, r0
 8001b54:	e000      	b.n	8001b58 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3730      	adds	r7, #48	; 0x30
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40023800 	.word	0x40023800
 8001b64:	431bde83 	.word	0x431bde83
 8001b68:	20001024 	.word	0x20001024
 8001b6c:	40001000 	.word	0x40001000

08001b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <NMI_Handler+0x4>

08001b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7a:	e7fe      	b.n	8001b7a <HardFault_Handler+0x4>

08001b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <MemManage_Handler+0x4>

08001b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <BusFault_Handler+0x4>

08001b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <UsageFault_Handler+0x4>

08001b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <TIM6_DAC_IRQHandler+0x10>)
 8001bce:	f003 fb23 	bl	8005218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20001024 	.word	0x20001024

08001bdc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <OTG_FS_IRQHandler+0x10>)
 8001be2:	f000 fd96 	bl	8002712 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20001074 	.word	0x20001074

08001bf0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <LTDC_IRQHandler+0x10>)
 8001bf6:	f002 f811 	bl	8003c1c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000bd0 	.word	0x20000bd0

08001c04 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <DMA2D_IRQHandler+0x10>)
 8001c0a:	f000 fa93 	bl	8002134 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000e84 	.word	0x20000e84

08001c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <_sbrk+0x5c>)
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <_sbrk+0x60>)
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <_sbrk+0x64>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <_sbrk+0x68>)
 8001c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d207      	bcs.n	8001c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c48:	f006 fba8 	bl	800839c <__errno>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	220c      	movs	r2, #12
 8001c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c56:	e009      	b.n	8001c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	4a05      	ldr	r2, [pc, #20]	; (8001c7c <_sbrk+0x64>)
 8001c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20050000 	.word	0x20050000
 8001c78:	00000800 	.word	0x00000800
 8001c7c:	200007d0 	.word	0x200007d0
 8001c80:	20001388 	.word	0x20001388

08001c84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <SystemInit+0x20>)
 8001c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c8e:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <SystemInit+0x20>)
 8001c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cac:	480d      	ldr	r0, [pc, #52]	; (8001ce4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cae:	490e      	ldr	r1, [pc, #56]	; (8001ce8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cb0:	4a0e      	ldr	r2, [pc, #56]	; (8001cec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb4:	e002      	b.n	8001cbc <LoopCopyDataInit>

08001cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cba:	3304      	adds	r3, #4

08001cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc0:	d3f9      	bcc.n	8001cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc2:	4a0b      	ldr	r2, [pc, #44]	; (8001cf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cc4:	4c0b      	ldr	r4, [pc, #44]	; (8001cf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc8:	e001      	b.n	8001cce <LoopFillZerobss>

08001cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ccc:	3204      	adds	r2, #4

08001cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd0:	d3fb      	bcc.n	8001cca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cd2:	f7ff ffd7 	bl	8001c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cd6:	f006 fb67 	bl	80083a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cda:	f7ff f901 	bl	8000ee0 <main>
  bx  lr    
 8001cde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ce0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce8:	200007b4 	.word	0x200007b4
  ldr r2, =_sidata
 8001cec:	0800bbc4 	.word	0x0800bbc4
  ldr r2, =_sbss
 8001cf0:	200007b4 	.word	0x200007b4
  ldr r4, =_ebss
 8001cf4:	20001388 	.word	0x20001388

08001cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf8:	e7fe      	b.n	8001cf8 <ADC_IRQHandler>

08001cfa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cfe:	2003      	movs	r0, #3
 8001d00:	f000 f8f9 	bl	8001ef6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d04:	200f      	movs	r0, #15
 8001d06:	f7ff fedb 	bl	8001ac0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001d0a:	f7ff fd5b 	bl	80017c4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_IncTick+0x20>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_IncTick+0x24>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4413      	add	r3, r2
 8001d24:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <HAL_IncTick+0x24>)
 8001d26:	6013      	str	r3, [r2, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20000008 	.word	0x20000008
 8001d38:	20001070 	.word	0x20001070

08001d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <HAL_GetTick+0x14>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20001070 	.word	0x20001070

08001d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d5c:	f7ff ffee 	bl	8001d3c <HAL_GetTick>
 8001d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d6c:	d005      	beq.n	8001d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <HAL_Delay+0x44>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4413      	add	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d7a:	bf00      	nop
 8001d7c:	f7ff ffde 	bl	8001d3c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d8f7      	bhi.n	8001d7c <HAL_Delay+0x28>
  {
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000008 	.word	0x20000008

08001d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <__NVIC_SetPriorityGrouping+0x40>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db8:	4013      	ands	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dca:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <__NVIC_SetPriorityGrouping+0x40>)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	60d3      	str	r3, [r2, #12]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00
 8001de0:	05fa0000 	.word	0x05fa0000

08001de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de8:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <__NVIC_GetPriorityGrouping+0x18>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	f003 0307 	and.w	r3, r3, #7
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	db0b      	blt.n	8001e2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	4907      	ldr	r1, [pc, #28]	; (8001e38 <__NVIC_EnableIRQ+0x38>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	2001      	movs	r0, #1
 8001e22:	fa00 f202 	lsl.w	r2, r0, r2
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000e100 	.word	0xe000e100

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0a      	blt.n	8001e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	490c      	ldr	r1, [pc, #48]	; (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e64:	e00a      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4908      	ldr	r1, [pc, #32]	; (8001e8c <__NVIC_SetPriority+0x50>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1c3 0307 	rsb	r3, r3, #7
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	bf28      	it	cs
 8001eae:	2304      	movcs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d902      	bls.n	8001ec0 <NVIC_EncodePriority+0x30>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	e000      	b.n	8001ec2 <NVIC_EncodePriority+0x32>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	4313      	orrs	r3, r2
         );
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	; 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ff4c 	bl	8001d9c <__NVIC_SetPriorityGrouping>
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f1e:	f7ff ff61 	bl	8001de4 <__NVIC_GetPriorityGrouping>
 8001f22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	6978      	ldr	r0, [r7, #20]
 8001f2a:	f7ff ffb1 	bl	8001e90 <NVIC_EncodePriority>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff80 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f3c:	bf00      	nop
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff ff54 	bl	8001e00 <__NVIC_EnableIRQ>
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e054      	b.n	800201c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7f5b      	ldrb	r3, [r3, #29]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff fc42 	bl	800180c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	791b      	ldrb	r3, [r3, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10c      	bne.n	8001fb0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a22      	ldr	r2, [pc, #136]	; (8002024 <HAL_CRC_Init+0xc4>)
 8001f9c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0218 	bic.w	r2, r2, #24
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	e00c      	b.n	8001fca <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6899      	ldr	r1, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f834 	bl	8002028 <HAL_CRCEx_Polynomial_Set>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e028      	b.n	800201c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	795b      	ldrb	r3, [r3, #5]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d105      	bne.n	8001fde <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fda:	611a      	str	r2, [r3, #16]
 8001fdc:	e004      	b.n	8001fe8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6912      	ldr	r2, [r2, #16]
 8001fe6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699a      	ldr	r2, [r3, #24]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	04c11db7 	.word	0x04c11db7

08002028 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002038:	231f      	movs	r3, #31
 800203a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800203c:	bf00      	nop
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1e5a      	subs	r2, r3, #1
 8002042:	613a      	str	r2, [r7, #16]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d009      	beq.n	800205c <HAL_CRCEx_Polynomial_Set+0x34>
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	fa22 f303 	lsr.w	r3, r2, r3
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_CRCEx_Polynomial_Set+0x16>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b18      	cmp	r3, #24
 8002060:	d846      	bhi.n	80020f0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002062:	a201      	add	r2, pc, #4	; (adr r2, 8002068 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002068:	080020f7 	.word	0x080020f7
 800206c:	080020f1 	.word	0x080020f1
 8002070:	080020f1 	.word	0x080020f1
 8002074:	080020f1 	.word	0x080020f1
 8002078:	080020f1 	.word	0x080020f1
 800207c:	080020f1 	.word	0x080020f1
 8002080:	080020f1 	.word	0x080020f1
 8002084:	080020f1 	.word	0x080020f1
 8002088:	080020e5 	.word	0x080020e5
 800208c:	080020f1 	.word	0x080020f1
 8002090:	080020f1 	.word	0x080020f1
 8002094:	080020f1 	.word	0x080020f1
 8002098:	080020f1 	.word	0x080020f1
 800209c:	080020f1 	.word	0x080020f1
 80020a0:	080020f1 	.word	0x080020f1
 80020a4:	080020f1 	.word	0x080020f1
 80020a8:	080020d9 	.word	0x080020d9
 80020ac:	080020f1 	.word	0x080020f1
 80020b0:	080020f1 	.word	0x080020f1
 80020b4:	080020f1 	.word	0x080020f1
 80020b8:	080020f1 	.word	0x080020f1
 80020bc:	080020f1 	.word	0x080020f1
 80020c0:	080020f1 	.word	0x080020f1
 80020c4:	080020f1 	.word	0x080020f1
 80020c8:	080020cd 	.word	0x080020cd
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	2b06      	cmp	r3, #6
 80020d0:	d913      	bls.n	80020fa <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80020d6:	e010      	b.n	80020fa <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	2b07      	cmp	r3, #7
 80020dc:	d90f      	bls.n	80020fe <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80020e2:	e00c      	b.n	80020fe <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	d90b      	bls.n	8002102 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80020ee:	e008      	b.n	8002102 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	75fb      	strb	r3, [r7, #23]
      break;
 80020f4:	e006      	b.n	8002104 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80020f6:	bf00      	nop
 80020f8:	e004      	b.n	8002104 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80020fa:	bf00      	nop
 80020fc:	e002      	b.n	8002104 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80020fe:	bf00      	nop
 8002100:	e000      	b.n	8002104 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002102:	bf00      	nop
  }
  if (status == HAL_OK)
 8002104:	7dfb      	ldrb	r3, [r7, #23]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10d      	bne.n	8002126 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f023 0118 	bic.w	r1, r3, #24
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	430a      	orrs	r2, r1
 8002124:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002126:	7dfb      	ldrb	r3, [r7, #23]
}
 8002128:	4618      	mov	r0, r3
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d026      	beq.n	80021a4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d021      	beq.n	80021a4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800216e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2201      	movs	r2, #1
 8002182:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2204      	movs	r2, #4
 8002188:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 0320 	and.w	r3, r3, #32
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d026      	beq.n	80021fc <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d021      	beq.n	80021fc <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021c6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2220      	movs	r2, #32
 80021ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d4:	f043 0202 	orr.w	r2, r3, #2
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2204      	movs	r2, #4
 80021e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d026      	beq.n	8002254 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800220c:	2b00      	cmp	r3, #0
 800220e:	d021      	beq.n	8002254 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800221e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2208      	movs	r2, #8
 8002226:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222c:	f043 0204 	orr.w	r2, r3, #4
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2204      	movs	r2, #4
 8002238:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	d013      	beq.n	8002286 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00e      	beq.n	8002286 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002276:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2204      	movs	r2, #4
 800227e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f853 	bl	800232c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d024      	beq.n	80022da <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002296:	2b00      	cmp	r3, #0
 8002298:	d01f      	beq.n	80022da <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022a8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2202      	movs	r2, #2
 80022b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01f      	beq.n	8002324 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d01a      	beq.n	8002324 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022fc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2210      	movs	r2, #16
 8002304:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f80e 	bl	8002340 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002324:	bf00      	nop
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	; 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800236a:	2300      	movs	r3, #0
 800236c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	e175      	b.n	8002660 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002374:	2201      	movs	r2, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	429a      	cmp	r2, r3
 800238e:	f040 8164 	bne.w	800265a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d00b      	beq.n	80023b2 <HAL_GPIO_Init+0x5e>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d007      	beq.n	80023b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023a6:	2b11      	cmp	r3, #17
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b12      	cmp	r3, #18
 80023b0:	d130      	bne.n	8002414 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	2203      	movs	r2, #3
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023e8:	2201      	movs	r2, #1
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 0201 	and.w	r2, r3, #1
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x100>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b12      	cmp	r3, #18
 8002452:	d123      	bne.n	800249c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	08da      	lsrs	r2, r3, #3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3208      	adds	r2, #8
 800245c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	220f      	movs	r2, #15
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	08da      	lsrs	r2, r3, #3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3208      	adds	r2, #8
 8002496:	69b9      	ldr	r1, [r7, #24]
 8002498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	2203      	movs	r2, #3
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0203 	and.w	r2, r3, #3
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 80be 	beq.w	800265a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024de:	4b66      	ldr	r3, [pc, #408]	; (8002678 <HAL_GPIO_Init+0x324>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	4a65      	ldr	r2, [pc, #404]	; (8002678 <HAL_GPIO_Init+0x324>)
 80024e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ea:	4b63      	ldr	r3, [pc, #396]	; (8002678 <HAL_GPIO_Init+0x324>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024f6:	4a61      	ldr	r2, [pc, #388]	; (800267c <HAL_GPIO_Init+0x328>)
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	089b      	lsrs	r3, r3, #2
 80024fc:	3302      	adds	r3, #2
 80024fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	220f      	movs	r2, #15
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a58      	ldr	r2, [pc, #352]	; (8002680 <HAL_GPIO_Init+0x32c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d037      	beq.n	8002592 <HAL_GPIO_Init+0x23e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a57      	ldr	r2, [pc, #348]	; (8002684 <HAL_GPIO_Init+0x330>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d031      	beq.n	800258e <HAL_GPIO_Init+0x23a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a56      	ldr	r2, [pc, #344]	; (8002688 <HAL_GPIO_Init+0x334>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d02b      	beq.n	800258a <HAL_GPIO_Init+0x236>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a55      	ldr	r2, [pc, #340]	; (800268c <HAL_GPIO_Init+0x338>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d025      	beq.n	8002586 <HAL_GPIO_Init+0x232>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a54      	ldr	r2, [pc, #336]	; (8002690 <HAL_GPIO_Init+0x33c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d01f      	beq.n	8002582 <HAL_GPIO_Init+0x22e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a53      	ldr	r2, [pc, #332]	; (8002694 <HAL_GPIO_Init+0x340>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d019      	beq.n	800257e <HAL_GPIO_Init+0x22a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a52      	ldr	r2, [pc, #328]	; (8002698 <HAL_GPIO_Init+0x344>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d013      	beq.n	800257a <HAL_GPIO_Init+0x226>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a51      	ldr	r2, [pc, #324]	; (800269c <HAL_GPIO_Init+0x348>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00d      	beq.n	8002576 <HAL_GPIO_Init+0x222>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a50      	ldr	r2, [pc, #320]	; (80026a0 <HAL_GPIO_Init+0x34c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d007      	beq.n	8002572 <HAL_GPIO_Init+0x21e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4f      	ldr	r2, [pc, #316]	; (80026a4 <HAL_GPIO_Init+0x350>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <HAL_GPIO_Init+0x21a>
 800256a:	2309      	movs	r3, #9
 800256c:	e012      	b.n	8002594 <HAL_GPIO_Init+0x240>
 800256e:	230a      	movs	r3, #10
 8002570:	e010      	b.n	8002594 <HAL_GPIO_Init+0x240>
 8002572:	2308      	movs	r3, #8
 8002574:	e00e      	b.n	8002594 <HAL_GPIO_Init+0x240>
 8002576:	2307      	movs	r3, #7
 8002578:	e00c      	b.n	8002594 <HAL_GPIO_Init+0x240>
 800257a:	2306      	movs	r3, #6
 800257c:	e00a      	b.n	8002594 <HAL_GPIO_Init+0x240>
 800257e:	2305      	movs	r3, #5
 8002580:	e008      	b.n	8002594 <HAL_GPIO_Init+0x240>
 8002582:	2304      	movs	r3, #4
 8002584:	e006      	b.n	8002594 <HAL_GPIO_Init+0x240>
 8002586:	2303      	movs	r3, #3
 8002588:	e004      	b.n	8002594 <HAL_GPIO_Init+0x240>
 800258a:	2302      	movs	r3, #2
 800258c:	e002      	b.n	8002594 <HAL_GPIO_Init+0x240>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_GPIO_Init+0x240>
 8002592:	2300      	movs	r3, #0
 8002594:	69fa      	ldr	r2, [r7, #28]
 8002596:	f002 0203 	and.w	r2, r2, #3
 800259a:	0092      	lsls	r2, r2, #2
 800259c:	4093      	lsls	r3, r2
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025a4:	4935      	ldr	r1, [pc, #212]	; (800267c <HAL_GPIO_Init+0x328>)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	3302      	adds	r3, #2
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b2:	4b3d      	ldr	r3, [pc, #244]	; (80026a8 <HAL_GPIO_Init+0x354>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025d6:	4a34      	ldr	r2, [pc, #208]	; (80026a8 <HAL_GPIO_Init+0x354>)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025dc:	4b32      	ldr	r3, [pc, #200]	; (80026a8 <HAL_GPIO_Init+0x354>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002600:	4a29      	ldr	r2, [pc, #164]	; (80026a8 <HAL_GPIO_Init+0x354>)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002606:	4b28      	ldr	r3, [pc, #160]	; (80026a8 <HAL_GPIO_Init+0x354>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800262a:	4a1f      	ldr	r2, [pc, #124]	; (80026a8 <HAL_GPIO_Init+0x354>)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002630:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <HAL_GPIO_Init+0x354>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002654:	4a14      	ldr	r2, [pc, #80]	; (80026a8 <HAL_GPIO_Init+0x354>)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3301      	adds	r3, #1
 800265e:	61fb      	str	r3, [r7, #28]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	2b0f      	cmp	r3, #15
 8002664:	f67f ae86 	bls.w	8002374 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	3724      	adds	r7, #36	; 0x24
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800
 800267c:	40013800 	.word	0x40013800
 8002680:	40020000 	.word	0x40020000
 8002684:	40020400 	.word	0x40020400
 8002688:	40020800 	.word	0x40020800
 800268c:	40020c00 	.word	0x40020c00
 8002690:	40021000 	.word	0x40021000
 8002694:	40021400 	.word	0x40021400
 8002698:	40021800 	.word	0x40021800
 800269c:	40021c00 	.word	0x40021c00
 80026a0:	40022000 	.word	0x40022000
 80026a4:	40022400 	.word	0x40022400
 80026a8:	40013c00 	.word	0x40013c00

080026ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	807b      	strh	r3, [r7, #2]
 80026b8:	4613      	mov	r3, r2
 80026ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026bc:	787b      	ldrb	r3, [r7, #1]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026c2:	887a      	ldrh	r2, [r7, #2]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80026c8:	e003      	b.n	80026d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026ca:	887b      	ldrh	r3, [r7, #2]
 80026cc:	041a      	lsls	r2, r3, #16
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	619a      	str	r2, [r3, #24]
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	460b      	mov	r3, r1
 80026e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026f0:	887a      	ldrh	r2, [r7, #2]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4013      	ands	r3, r2
 80026f6:	041a      	lsls	r2, r3, #16
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	43d9      	mvns	r1, r3
 80026fc:	887b      	ldrh	r3, [r7, #2]
 80026fe:	400b      	ands	r3, r1
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	619a      	str	r2, [r3, #24]
}
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b086      	sub	sp, #24
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f003 fe17 	bl	800635c <USB_GetMode>
 800272e:	4603      	mov	r3, r0
 8002730:	2b01      	cmp	r3, #1
 8002732:	f040 80ef 	bne.w	8002914 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f003 fdfb 	bl	8006336 <USB_ReadInterrupts>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 80e5 	beq.w	8002912 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f003 fdf2 	bl	8006336 <USB_ReadInterrupts>
 8002752:	4603      	mov	r3, r0
 8002754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002758:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800275c:	d104      	bne.n	8002768 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002766:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f003 fde2 	bl	8006336 <USB_ReadInterrupts>
 8002772:	4603      	mov	r3, r0
 8002774:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800277c:	d104      	bne.n	8002788 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002786:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f003 fdd2 	bl	8006336 <USB_ReadInterrupts>
 8002792:	4603      	mov	r3, r0
 8002794:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002798:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800279c:	d104      	bne.n	80027a8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027a6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f003 fdc2 	bl	8006336 <USB_ReadInterrupts>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d103      	bne.n	80027c4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2202      	movs	r2, #2
 80027c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f003 fdb4 	bl	8006336 <USB_ReadInterrupts>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027d8:	d115      	bne.n	8002806 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80027e2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d108      	bne.n	8002806 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f004 f867 	bl	80068c8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2101      	movs	r1, #1
 8002800:	4618      	mov	r0, r3
 8002802:	f003 fdb9 	bl	8006378 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f003 fd93 	bl	8006336 <USB_ReadInterrupts>
 8002810:	4603      	mov	r3, r0
 8002812:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002816:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800281a:	d102      	bne.n	8002822 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f001 f98a 	bl	8003b36 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f003 fd85 	bl	8006336 <USB_ReadInterrupts>
 800282c:	4603      	mov	r3, r0
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b08      	cmp	r3, #8
 8002834:	d106      	bne.n	8002844 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f004 f82a 	bl	8006890 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2208      	movs	r2, #8
 8002842:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f003 fd74 	bl	8006336 <USB_ReadInterrupts>
 800284e:	4603      	mov	r3, r0
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	2b10      	cmp	r3, #16
 8002856:	d101      	bne.n	800285c <HAL_HCD_IRQHandler+0x14a>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <HAL_HCD_IRQHandler+0x14c>
 800285c:	2300      	movs	r3, #0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d012      	beq.n	8002888 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699a      	ldr	r2, [r3, #24]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0210 	bic.w	r2, r2, #16
 8002870:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f001 f88d 	bl	8003992 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699a      	ldr	r2, [r3, #24]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0210 	orr.w	r2, r2, #16
 8002886:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f003 fd52 	bl	8006336 <USB_ReadInterrupts>
 8002892:	4603      	mov	r3, r0
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800289c:	d13a      	bne.n	8002914 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f003 fda2 	bl	80063ec <USB_HC_ReadInterrupt>
 80028a8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	e025      	b.n	80028fc <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d018      	beq.n	80028f6 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028da:	d106      	bne.n	80028ea <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	4619      	mov	r1, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f836 	bl	8002954 <HCD_HC_IN_IRQHandler>
 80028e8:	e005      	b.n	80028f6 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	4619      	mov	r1, r3
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fc51 	bl	8003198 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	3301      	adds	r3, #1
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	429a      	cmp	r2, r3
 8002904:	d3d4      	bcc.n	80028b0 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800290e:	615a      	str	r2, [r3, #20]
 8002910:	e000      	b.n	8002914 <HAL_HCD_IRQHandler+0x202>
      return;
 8002912:	bf00      	nop
    }
  }
}
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_HCD_Stop+0x16>
 800292c:	2302      	movs	r3, #2
 800292e:	e00d      	b.n	800294c <HAL_HCD_Stop+0x32>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f003 fe82 	bl	8006646 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b04      	cmp	r3, #4
 8002982:	d119      	bne.n	80029b8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4413      	add	r3, r2
 800298c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002990:	461a      	mov	r2, r3
 8002992:	2304      	movs	r3, #4
 8002994:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4413      	add	r3, r2
 800299e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	0151      	lsls	r1, r2, #5
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	440a      	add	r2, r1
 80029ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029b0:	f043 0302 	orr.w	r3, r3, #2
 80029b4:	60d3      	str	r3, [r2, #12]
 80029b6:	e101      	b.n	8002bbc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ce:	d12b      	bne.n	8002a28 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029dc:	461a      	mov	r2, r3
 80029de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	212c      	movs	r1, #44	; 0x2c
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	3361      	adds	r3, #97	; 0x61
 80029f2:	2207      	movs	r2, #7
 80029f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	0151      	lsls	r1, r2, #5
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	440a      	add	r2, r1
 8002a0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a10:	f043 0302 	orr.w	r3, r3, #2
 8002a14:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f003 fcf4 	bl	800640e <USB_HC_Halt>
 8002a26:	e0c9      	b.n	8002bbc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	d109      	bne.n	8002a52 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	2320      	movs	r3, #32
 8002a4e:	6093      	str	r3, [r2, #8]
 8002a50:	e0b4      	b.n	8002bbc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d133      	bne.n	8002ad0 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	0151      	lsls	r1, r2, #5
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	440a      	add	r2, r1
 8002a7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a82:	f043 0302 	orr.w	r3, r3, #2
 8002a86:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3361      	adds	r3, #97	; 0x61
 8002a96:	2205      	movs	r2, #5
 8002a98:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	2310      	movs	r3, #16
 8002aaa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2308      	movs	r3, #8
 8002abc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f003 fca0 	bl	800640e <USB_HC_Halt>
 8002ace:	e075      	b.n	8002bbc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae6:	d134      	bne.n	8002b52 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	0151      	lsls	r1, r2, #5
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	440a      	add	r2, r1
 8002afe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b02:	f043 0302 	orr.w	r3, r3, #2
 8002b06:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	3361      	adds	r3, #97	; 0x61
 8002b16:	2208      	movs	r2, #8
 8002b18:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	015a      	lsls	r2, r3, #5
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4413      	add	r3, r2
 8002b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b26:	461a      	mov	r2, r3
 8002b28:	2310      	movs	r3, #16
 8002b2a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b38:	461a      	mov	r2, r3
 8002b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b3e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f003 fc5f 	bl	800640e <USB_HC_Halt>
 8002b50:	e034      	b.n	8002bbc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b64:	2b80      	cmp	r3, #128	; 0x80
 8002b66:	d129      	bne.n	8002bbc <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	0151      	lsls	r1, r2, #5
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	440a      	add	r2, r1
 8002b7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b82:	f043 0302 	orr.w	r3, r3, #2
 8002b86:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	212c      	movs	r1, #44	; 0x2c
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	3361      	adds	r3, #97	; 0x61
 8002b96:	2206      	movs	r2, #6
 8002b98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f003 fc32 	bl	800640e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd2:	d122      	bne.n	8002c1a <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	0151      	lsls	r1, r2, #5
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	440a      	add	r2, r1
 8002bea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bee:	f043 0302 	orr.w	r3, r3, #2
 8002bf2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f003 fc05 	bl	800640e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	461a      	mov	r2, r3
 8002c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c16:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002c18:	e2ba      	b.n	8003190 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	f040 811b 	bne.w	8002e68 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d019      	beq.n	8002c6e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	3348      	adds	r3, #72	; 0x48
 8002c48:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	0159      	lsls	r1, r3, #5
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	440b      	add	r3, r1
 8002c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c5c:	1ad2      	subs	r2, r2, r3
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	202c      	movs	r0, #44	; 0x2c
 8002c64:	fb00 f303 	mul.w	r3, r0, r3
 8002c68:	440b      	add	r3, r1
 8002c6a:	3350      	adds	r3, #80	; 0x50
 8002c6c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	3361      	adds	r3, #97	; 0x61
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	335c      	adds	r3, #92	; 0x5c
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	212c      	movs	r1, #44	; 0x2c
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	333f      	adds	r3, #63	; 0x3f
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d009      	beq.n	8002ccc <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	212c      	movs	r1, #44	; 0x2c
 8002cbe:	fb01 f303 	mul.w	r3, r1, r3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	333f      	adds	r3, #63	; 0x3f
 8002cc6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d121      	bne.n	8002d10 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	0151      	lsls	r1, r2, #5
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	440a      	add	r2, r1
 8002ce2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ce6:	f043 0302 	orr.w	r3, r3, #2
 8002cea:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f003 fb89 	bl	800640e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d08:	461a      	mov	r2, r3
 8002d0a:	2310      	movs	r3, #16
 8002d0c:	6093      	str	r3, [r2, #8]
 8002d0e:	e066      	b.n	8002dde <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	212c      	movs	r1, #44	; 0x2c
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	333f      	adds	r3, #63	; 0x3f
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d127      	bne.n	8002d74 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	0151      	lsls	r1, r2, #5
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	440a      	add	r2, r1
 8002d3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d42:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3360      	adds	r3, #96	; 0x60
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	b2d9      	uxtb	r1, r3
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	202c      	movs	r0, #44	; 0x2c
 8002d60:	fb00 f303 	mul.w	r3, r0, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	3360      	adds	r3, #96	; 0x60
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f003 fdb9 	bl	80068e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d72:	e034      	b.n	8002dde <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	333f      	adds	r3, #63	; 0x3f
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d12a      	bne.n	8002dde <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	3360      	adds	r3, #96	; 0x60
 8002d96:	2201      	movs	r2, #1
 8002d98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	212c      	movs	r1, #44	; 0x2c
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	3354      	adds	r3, #84	; 0x54
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	f083 0301 	eor.w	r3, r3, #1
 8002dae:	b2d8      	uxtb	r0, r3
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	212c      	movs	r1, #44	; 0x2c
 8002db6:	fb01 f303 	mul.w	r3, r1, r3
 8002dba:	4413      	add	r3, r2
 8002dbc:	3354      	adds	r3, #84	; 0x54
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	b2d9      	uxtb	r1, r3
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	202c      	movs	r0, #44	; 0x2c
 8002dcc:	fb00 f303 	mul.w	r3, r0, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3360      	adds	r3, #96	; 0x60
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f003 fd83 	bl	80068e4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d12b      	bne.n	8002e3e <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	212c      	movs	r1, #44	; 0x2c
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	3348      	adds	r3, #72	; 0x48
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	202c      	movs	r0, #44	; 0x2c
 8002dfc:	fb00 f202 	mul.w	r2, r0, r2
 8002e00:	440a      	add	r2, r1
 8002e02:	3240      	adds	r2, #64	; 0x40
 8002e04:	8812      	ldrh	r2, [r2, #0]
 8002e06:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 81be 	beq.w	8003190 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	212c      	movs	r1, #44	; 0x2c
 8002e1a:	fb01 f303 	mul.w	r3, r1, r3
 8002e1e:	4413      	add	r3, r2
 8002e20:	3354      	adds	r3, #84	; 0x54
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	f083 0301 	eor.w	r3, r3, #1
 8002e28:	b2d8      	uxtb	r0, r3
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	212c      	movs	r1, #44	; 0x2c
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	3354      	adds	r3, #84	; 0x54
 8002e38:	4602      	mov	r2, r0
 8002e3a:	701a      	strb	r2, [r3, #0]
}
 8002e3c:	e1a8      	b.n	8003190 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	212c      	movs	r1, #44	; 0x2c
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	3354      	adds	r3, #84	; 0x54
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	f083 0301 	eor.w	r3, r3, #1
 8002e52:	b2d8      	uxtb	r0, r3
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	212c      	movs	r1, #44	; 0x2c
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	3354      	adds	r3, #84	; 0x54
 8002e62:	4602      	mov	r2, r0
 8002e64:	701a      	strb	r2, [r3, #0]
}
 8002e66:	e193      	b.n	8003190 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	f040 8106 	bne.w	800308c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	0151      	lsls	r1, r2, #5
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	440a      	add	r2, r1
 8002e96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e9a:	f023 0302 	bic.w	r3, r3, #2
 8002e9e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	3361      	adds	r3, #97	; 0x61
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d109      	bne.n	8002ec8 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	212c      	movs	r1, #44	; 0x2c
 8002eba:	fb01 f303 	mul.w	r3, r1, r3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3360      	adds	r3, #96	; 0x60
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]
 8002ec6:	e0c9      	b.n	800305c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	212c      	movs	r1, #44	; 0x2c
 8002ece:	fb01 f303 	mul.w	r3, r1, r3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3361      	adds	r3, #97	; 0x61
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b05      	cmp	r3, #5
 8002eda:	d109      	bne.n	8002ef0 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	212c      	movs	r1, #44	; 0x2c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3360      	adds	r3, #96	; 0x60
 8002eea:	2205      	movs	r2, #5
 8002eec:	701a      	strb	r2, [r3, #0]
 8002eee:	e0b5      	b.n	800305c <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	212c      	movs	r1, #44	; 0x2c
 8002ef6:	fb01 f303 	mul.w	r3, r1, r3
 8002efa:	4413      	add	r3, r2
 8002efc:	3361      	adds	r3, #97	; 0x61
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b06      	cmp	r3, #6
 8002f02:	d009      	beq.n	8002f18 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	212c      	movs	r1, #44	; 0x2c
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	3361      	adds	r3, #97	; 0x61
 8002f12:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d150      	bne.n	8002fba <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	212c      	movs	r1, #44	; 0x2c
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	335c      	adds	r3, #92	; 0x5c
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	202c      	movs	r0, #44	; 0x2c
 8002f30:	fb00 f303 	mul.w	r3, r0, r3
 8002f34:	440b      	add	r3, r1
 8002f36:	335c      	adds	r3, #92	; 0x5c
 8002f38:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	212c      	movs	r1, #44	; 0x2c
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	335c      	adds	r3, #92	; 0x5c
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d912      	bls.n	8002f74 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	212c      	movs	r1, #44	; 0x2c
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	335c      	adds	r3, #92	; 0x5c
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	212c      	movs	r1, #44	; 0x2c
 8002f66:	fb01 f303 	mul.w	r3, r1, r3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3360      	adds	r3, #96	; 0x60
 8002f6e:	2204      	movs	r2, #4
 8002f70:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f72:	e073      	b.n	800305c <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	212c      	movs	r1, #44	; 0x2c
 8002f7a:	fb01 f303 	mul.w	r3, r1, r3
 8002f7e:	4413      	add	r3, r2
 8002f80:	3360      	adds	r3, #96	; 0x60
 8002f82:	2202      	movs	r2, #2
 8002f84:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f9c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fa4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fb8:	e050      	b.n	800305c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	212c      	movs	r1, #44	; 0x2c
 8002fc0:	fb01 f303 	mul.w	r3, r1, r3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3361      	adds	r3, #97	; 0x61
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d122      	bne.n	8003014 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	212c      	movs	r1, #44	; 0x2c
 8002fd4:	fb01 f303 	mul.w	r3, r1, r3
 8002fd8:	4413      	add	r3, r2
 8002fda:	3360      	adds	r3, #96	; 0x60
 8002fdc:	2202      	movs	r2, #2
 8002fde:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ff6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ffe:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300c:	461a      	mov	r2, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	e023      	b.n	800305c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	212c      	movs	r1, #44	; 0x2c
 800301a:	fb01 f303 	mul.w	r3, r1, r3
 800301e:	4413      	add	r3, r2
 8003020:	3361      	adds	r3, #97	; 0x61
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b07      	cmp	r3, #7
 8003026:	d119      	bne.n	800305c <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	212c      	movs	r1, #44	; 0x2c
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	4413      	add	r3, r2
 8003034:	335c      	adds	r3, #92	; 0x5c
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	202c      	movs	r0, #44	; 0x2c
 8003040:	fb00 f303 	mul.w	r3, r0, r3
 8003044:	440b      	add	r3, r1
 8003046:	335c      	adds	r3, #92	; 0x5c
 8003048:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	212c      	movs	r1, #44	; 0x2c
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	4413      	add	r3, r2
 8003056:	3360      	adds	r3, #96	; 0x60
 8003058:	2204      	movs	r2, #4
 800305a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4413      	add	r3, r2
 8003064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003068:	461a      	mov	r2, r3
 800306a:	2302      	movs	r3, #2
 800306c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	b2d9      	uxtb	r1, r3
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	202c      	movs	r0, #44	; 0x2c
 8003078:	fb00 f303 	mul.w	r3, r0, r3
 800307c:	4413      	add	r3, r2
 800307e:	3360      	adds	r3, #96	; 0x60
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f003 fc2d 	bl	80068e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800308a:	e081      	b.n	8003190 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4413      	add	r3, r2
 8003094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	2b10      	cmp	r3, #16
 80030a0:	d176      	bne.n	8003190 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	212c      	movs	r1, #44	; 0x2c
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	4413      	add	r3, r2
 80030ae:	333f      	adds	r3, #63	; 0x3f
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	d121      	bne.n	80030fa <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	212c      	movs	r1, #44	; 0x2c
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	335c      	adds	r3, #92	; 0x5c
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	0151      	lsls	r1, r2, #5
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	440a      	add	r2, r1
 80030de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030e2:	f043 0302 	orr.w	r3, r3, #2
 80030e6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	4611      	mov	r1, r2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f003 f98b 	bl	800640e <USB_HC_Halt>
 80030f8:	e041      	b.n	800317e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	212c      	movs	r1, #44	; 0x2c
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	4413      	add	r3, r2
 8003106:	333f      	adds	r3, #63	; 0x3f
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	212c      	movs	r1, #44	; 0x2c
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	4413      	add	r3, r2
 800311a:	333f      	adds	r3, #63	; 0x3f
 800311c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800311e:	2b02      	cmp	r3, #2
 8003120:	d12d      	bne.n	800317e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	212c      	movs	r1, #44	; 0x2c
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	4413      	add	r3, r2
 800312e:	335c      	adds	r3, #92	; 0x5c
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d120      	bne.n	800317e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	212c      	movs	r1, #44	; 0x2c
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	4413      	add	r3, r2
 8003148:	3361      	adds	r3, #97	; 0x61
 800314a:	2203      	movs	r2, #3
 800314c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4413      	add	r3, r2
 8003156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	0151      	lsls	r1, r2, #5
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	440a      	add	r2, r1
 8003164:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003168:	f043 0302 	orr.w	r3, r3, #2
 800316c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	4611      	mov	r1, r2
 8003178:	4618      	mov	r0, r3
 800317a:	f003 f948 	bl	800640e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	015a      	lsls	r2, r3, #5
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4413      	add	r3, r2
 8003186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318a:	461a      	mov	r2, r3
 800318c:	2310      	movs	r3, #16
 800318e:	6093      	str	r3, [r2, #8]
}
 8003190:	bf00      	nop
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80031ae:	78fb      	ldrb	r3, [r7, #3]
 80031b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d119      	bne.n	80031fc <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d4:	461a      	mov	r2, r3
 80031d6:	2304      	movs	r3, #4
 80031d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	0151      	lsls	r1, r2, #5
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	440a      	add	r2, r1
 80031f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031f4:	f043 0302 	orr.w	r3, r3, #2
 80031f8:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80031fa:	e3c6      	b.n	800398a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	4413      	add	r3, r2
 8003204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b20      	cmp	r3, #32
 8003210:	d13e      	bne.n	8003290 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321e:	461a      	mov	r2, r3
 8003220:	2320      	movs	r3, #32
 8003222:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	212c      	movs	r1, #44	; 0x2c
 800322a:	fb01 f303 	mul.w	r3, r1, r3
 800322e:	4413      	add	r3, r2
 8003230:	333d      	adds	r3, #61	; 0x3d
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b01      	cmp	r3, #1
 8003236:	f040 83a8 	bne.w	800398a <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	212c      	movs	r1, #44	; 0x2c
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	4413      	add	r3, r2
 8003246:	333d      	adds	r3, #61	; 0x3d
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	212c      	movs	r1, #44	; 0x2c
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	4413      	add	r3, r2
 8003258:	3360      	adds	r3, #96	; 0x60
 800325a:	2202      	movs	r2, #2
 800325c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	4413      	add	r3, r2
 8003266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	0151      	lsls	r1, r2, #5
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	440a      	add	r2, r1
 8003274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003278:	f043 0302 	orr.w	r3, r3, #2
 800327c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	4611      	mov	r1, r2
 8003288:	4618      	mov	r0, r3
 800328a:	f003 f8c0 	bl	800640e <USB_HC_Halt>
}
 800328e:	e37c      	b.n	800398a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	4413      	add	r3, r2
 8003298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a6:	d122      	bne.n	80032ee <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	0151      	lsls	r1, r2, #5
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	440a      	add	r2, r1
 80032be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032c2:	f043 0302 	orr.w	r3, r3, #2
 80032c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	4611      	mov	r1, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f003 f89b 	bl	800640e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e4:	461a      	mov	r2, r3
 80032e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ea:	6093      	str	r3, [r2, #8]
}
 80032ec:	e34d      	b.n	800398a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d150      	bne.n	80033a6 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	335c      	adds	r3, #92	; 0x5c
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	4413      	add	r3, r2
 800331e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d111      	bne.n	8003350 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	212c      	movs	r1, #44	; 0x2c
 8003332:	fb01 f303 	mul.w	r3, r1, r3
 8003336:	4413      	add	r3, r2
 8003338:	333d      	adds	r3, #61	; 0x3d
 800333a:	2201      	movs	r2, #1
 800333c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	4413      	add	r3, r2
 8003346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334a:	461a      	mov	r2, r3
 800334c:	2340      	movs	r3, #64	; 0x40
 800334e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	0151      	lsls	r1, r2, #5
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	440a      	add	r2, r1
 8003366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800336a:	f043 0302 	orr.w	r3, r3, #2
 800336e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	4611      	mov	r1, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f003 f847 	bl	800640e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338c:	461a      	mov	r2, r3
 800338e:	2301      	movs	r3, #1
 8003390:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	212c      	movs	r1, #44	; 0x2c
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	4413      	add	r3, r2
 800339e:	3361      	adds	r3, #97	; 0x61
 80033a0:	2201      	movs	r2, #1
 80033a2:	701a      	strb	r2, [r3, #0]
}
 80033a4:	e2f1      	b.n	800398a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b8:	2b40      	cmp	r3, #64	; 0x40
 80033ba:	d13c      	bne.n	8003436 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	212c      	movs	r1, #44	; 0x2c
 80033c2:	fb01 f303 	mul.w	r3, r1, r3
 80033c6:	4413      	add	r3, r2
 80033c8:	3361      	adds	r3, #97	; 0x61
 80033ca:	2204      	movs	r2, #4
 80033cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	212c      	movs	r1, #44	; 0x2c
 80033d4:	fb01 f303 	mul.w	r3, r1, r3
 80033d8:	4413      	add	r3, r2
 80033da:	333d      	adds	r3, #61	; 0x3d
 80033dc:	2201      	movs	r2, #1
 80033de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	212c      	movs	r1, #44	; 0x2c
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	335c      	adds	r3, #92	; 0x5c
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	0151      	lsls	r1, r2, #5
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	440a      	add	r2, r1
 8003408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800340c:	f043 0302 	orr.w	r3, r3, #2
 8003410:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	4611      	mov	r1, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f002 fff6 	bl	800640e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	4413      	add	r3, r2
 800342a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342e:	461a      	mov	r2, r3
 8003430:	2340      	movs	r3, #64	; 0x40
 8003432:	6093      	str	r3, [r2, #8]
}
 8003434:	e2a9      	b.n	800398a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	4413      	add	r3, r2
 800343e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b08      	cmp	r3, #8
 800344a:	d12a      	bne.n	80034a2 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	4413      	add	r3, r2
 8003454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003458:	461a      	mov	r2, r3
 800345a:	2308      	movs	r3, #8
 800345c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	4413      	add	r3, r2
 8003466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	0151      	lsls	r1, r2, #5
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	440a      	add	r2, r1
 8003474:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003478:	f043 0302 	orr.w	r3, r3, #2
 800347c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	4611      	mov	r1, r2
 8003488:	4618      	mov	r0, r3
 800348a:	f002 ffc0 	bl	800640e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	212c      	movs	r1, #44	; 0x2c
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	4413      	add	r3, r2
 800349a:	3361      	adds	r3, #97	; 0x61
 800349c:	2205      	movs	r2, #5
 800349e:	701a      	strb	r2, [r3, #0]
}
 80034a0:	e273      	b.n	800398a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b10      	cmp	r3, #16
 80034b6:	d150      	bne.n	800355a <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	212c      	movs	r1, #44	; 0x2c
 80034be:	fb01 f303 	mul.w	r3, r1, r3
 80034c2:	4413      	add	r3, r2
 80034c4:	335c      	adds	r3, #92	; 0x5c
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	212c      	movs	r1, #44	; 0x2c
 80034d0:	fb01 f303 	mul.w	r3, r1, r3
 80034d4:	4413      	add	r3, r2
 80034d6:	3361      	adds	r3, #97	; 0x61
 80034d8:	2203      	movs	r2, #3
 80034da:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	212c      	movs	r1, #44	; 0x2c
 80034e2:	fb01 f303 	mul.w	r3, r1, r3
 80034e6:	4413      	add	r3, r2
 80034e8:	333d      	adds	r3, #61	; 0x3d
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d112      	bne.n	8003516 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	212c      	movs	r1, #44	; 0x2c
 80034f6:	fb01 f303 	mul.w	r3, r1, r3
 80034fa:	4413      	add	r3, r2
 80034fc:	333c      	adds	r3, #60	; 0x3c
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d108      	bne.n	8003516 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	212c      	movs	r1, #44	; 0x2c
 800350a:	fb01 f303 	mul.w	r3, r1, r3
 800350e:	4413      	add	r3, r2
 8003510:	333d      	adds	r3, #61	; 0x3d
 8003512:	2201      	movs	r2, #1
 8003514:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	015a      	lsls	r2, r3, #5
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	4413      	add	r3, r2
 800351e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	0151      	lsls	r1, r2, #5
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	440a      	add	r2, r1
 800352c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003530:	f043 0302 	orr.w	r3, r3, #2
 8003534:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	4611      	mov	r1, r2
 8003540:	4618      	mov	r0, r3
 8003542:	f002 ff64 	bl	800640e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	4413      	add	r3, r2
 800354e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003552:	461a      	mov	r2, r3
 8003554:	2310      	movs	r3, #16
 8003556:	6093      	str	r3, [r2, #8]
}
 8003558:	e217      	b.n	800398a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	4413      	add	r3, r2
 8003562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356c:	2b80      	cmp	r3, #128	; 0x80
 800356e:	d174      	bne.n	800365a <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d121      	bne.n	80035bc <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	212c      	movs	r1, #44	; 0x2c
 800357e:	fb01 f303 	mul.w	r3, r1, r3
 8003582:	4413      	add	r3, r2
 8003584:	3361      	adds	r3, #97	; 0x61
 8003586:	2206      	movs	r2, #6
 8003588:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	4413      	add	r3, r2
 8003592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	0151      	lsls	r1, r2, #5
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	440a      	add	r2, r1
 80035a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035a4:	f043 0302 	orr.w	r3, r3, #2
 80035a8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f002 ff2a 	bl	800640e <USB_HC_Halt>
 80035ba:	e044      	b.n	8003646 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	212c      	movs	r1, #44	; 0x2c
 80035c2:	fb01 f303 	mul.w	r3, r1, r3
 80035c6:	4413      	add	r3, r2
 80035c8:	335c      	adds	r3, #92	; 0x5c
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	202c      	movs	r0, #44	; 0x2c
 80035d4:	fb00 f303 	mul.w	r3, r0, r3
 80035d8:	440b      	add	r3, r1
 80035da:	335c      	adds	r3, #92	; 0x5c
 80035dc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	212c      	movs	r1, #44	; 0x2c
 80035e4:	fb01 f303 	mul.w	r3, r1, r3
 80035e8:	4413      	add	r3, r2
 80035ea:	335c      	adds	r3, #92	; 0x5c
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d920      	bls.n	8003634 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	212c      	movs	r1, #44	; 0x2c
 80035f8:	fb01 f303 	mul.w	r3, r1, r3
 80035fc:	4413      	add	r3, r2
 80035fe:	335c      	adds	r3, #92	; 0x5c
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	212c      	movs	r1, #44	; 0x2c
 800360a:	fb01 f303 	mul.w	r3, r1, r3
 800360e:	4413      	add	r3, r2
 8003610:	3360      	adds	r3, #96	; 0x60
 8003612:	2204      	movs	r2, #4
 8003614:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	b2d9      	uxtb	r1, r3
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	202c      	movs	r0, #44	; 0x2c
 8003620:	fb00 f303 	mul.w	r3, r0, r3
 8003624:	4413      	add	r3, r2
 8003626:	3360      	adds	r3, #96	; 0x60
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f003 f959 	bl	80068e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003632:	e008      	b.n	8003646 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	212c      	movs	r1, #44	; 0x2c
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	4413      	add	r3, r2
 8003640:	3360      	adds	r3, #96	; 0x60
 8003642:	2202      	movs	r2, #2
 8003644:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	4413      	add	r3, r2
 800364e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003652:	461a      	mov	r2, r3
 8003654:	2380      	movs	r3, #128	; 0x80
 8003656:	6093      	str	r3, [r2, #8]
}
 8003658:	e197      	b.n	800398a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	4413      	add	r3, r2
 8003662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003670:	d134      	bne.n	80036dc <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	4413      	add	r3, r2
 800367a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	0151      	lsls	r1, r2, #5
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	440a      	add	r2, r1
 8003688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800368c:	f043 0302 	orr.w	r3, r3, #2
 8003690:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f002 feb6 	bl	800640e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ae:	461a      	mov	r2, r3
 80036b0:	2310      	movs	r3, #16
 80036b2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c0:	461a      	mov	r2, r3
 80036c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	212c      	movs	r1, #44	; 0x2c
 80036ce:	fb01 f303 	mul.w	r3, r1, r3
 80036d2:	4413      	add	r3, r2
 80036d4:	3361      	adds	r3, #97	; 0x61
 80036d6:	2208      	movs	r2, #8
 80036d8:	701a      	strb	r2, [r3, #0]
}
 80036da:	e156      	b.n	800398a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	f040 814b 	bne.w	800398a <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	015a      	lsls	r2, r3, #5
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	4413      	add	r3, r2
 80036fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	0151      	lsls	r1, r2, #5
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	440a      	add	r2, r1
 800370a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800370e:	f023 0302 	bic.w	r3, r3, #2
 8003712:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	212c      	movs	r1, #44	; 0x2c
 800371a:	fb01 f303 	mul.w	r3, r1, r3
 800371e:	4413      	add	r3, r2
 8003720:	3361      	adds	r3, #97	; 0x61
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d179      	bne.n	800381c <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	212c      	movs	r1, #44	; 0x2c
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	4413      	add	r3, r2
 8003734:	3360      	adds	r3, #96	; 0x60
 8003736:	2201      	movs	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	212c      	movs	r1, #44	; 0x2c
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	4413      	add	r3, r2
 8003746:	333f      	adds	r3, #63	; 0x3f
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d00a      	beq.n	8003764 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	212c      	movs	r1, #44	; 0x2c
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	4413      	add	r3, r2
 800375a:	333f      	adds	r3, #63	; 0x3f
 800375c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800375e:	2b03      	cmp	r3, #3
 8003760:	f040 80fc 	bne.w	800395c <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d142      	bne.n	80037f2 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	212c      	movs	r1, #44	; 0x2c
 8003772:	fb01 f303 	mul.w	r3, r1, r3
 8003776:	4413      	add	r3, r2
 8003778:	334c      	adds	r3, #76	; 0x4c
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80ed 	beq.w	800395c <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	212c      	movs	r1, #44	; 0x2c
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	4413      	add	r3, r2
 800378e:	334c      	adds	r3, #76	; 0x4c
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	202c      	movs	r0, #44	; 0x2c
 8003798:	fb00 f202 	mul.w	r2, r0, r2
 800379c:	440a      	add	r2, r1
 800379e:	3240      	adds	r2, #64	; 0x40
 80037a0:	8812      	ldrh	r2, [r2, #0]
 80037a2:	4413      	add	r3, r2
 80037a4:	3b01      	subs	r3, #1
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	202c      	movs	r0, #44	; 0x2c
 80037ac:	fb00 f202 	mul.w	r2, r0, r2
 80037b0:	440a      	add	r2, r1
 80037b2:	3240      	adds	r2, #64	; 0x40
 80037b4:	8812      	ldrh	r2, [r2, #0]
 80037b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 80ca 	beq.w	800395c <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	212c      	movs	r1, #44	; 0x2c
 80037ce:	fb01 f303 	mul.w	r3, r1, r3
 80037d2:	4413      	add	r3, r2
 80037d4:	3355      	adds	r3, #85	; 0x55
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	f083 0301 	eor.w	r3, r3, #1
 80037dc:	b2d8      	uxtb	r0, r3
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	212c      	movs	r1, #44	; 0x2c
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	4413      	add	r3, r2
 80037ea:	3355      	adds	r3, #85	; 0x55
 80037ec:	4602      	mov	r2, r0
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e0b4      	b.n	800395c <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	212c      	movs	r1, #44	; 0x2c
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	3355      	adds	r3, #85	; 0x55
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	f083 0301 	eor.w	r3, r3, #1
 8003806:	b2d8      	uxtb	r0, r3
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	212c      	movs	r1, #44	; 0x2c
 800380e:	fb01 f303 	mul.w	r3, r1, r3
 8003812:	4413      	add	r3, r2
 8003814:	3355      	adds	r3, #85	; 0x55
 8003816:	4602      	mov	r2, r0
 8003818:	701a      	strb	r2, [r3, #0]
 800381a:	e09f      	b.n	800395c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	212c      	movs	r1, #44	; 0x2c
 8003822:	fb01 f303 	mul.w	r3, r1, r3
 8003826:	4413      	add	r3, r2
 8003828:	3361      	adds	r3, #97	; 0x61
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b03      	cmp	r3, #3
 800382e:	d109      	bne.n	8003844 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	212c      	movs	r1, #44	; 0x2c
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	4413      	add	r3, r2
 800383c:	3360      	adds	r3, #96	; 0x60
 800383e:	2202      	movs	r2, #2
 8003840:	701a      	strb	r2, [r3, #0]
 8003842:	e08b      	b.n	800395c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	212c      	movs	r1, #44	; 0x2c
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	4413      	add	r3, r2
 8003850:	3361      	adds	r3, #97	; 0x61
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b04      	cmp	r3, #4
 8003856:	d109      	bne.n	800386c <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	212c      	movs	r1, #44	; 0x2c
 800385e:	fb01 f303 	mul.w	r3, r1, r3
 8003862:	4413      	add	r3, r2
 8003864:	3360      	adds	r3, #96	; 0x60
 8003866:	2202      	movs	r2, #2
 8003868:	701a      	strb	r2, [r3, #0]
 800386a:	e077      	b.n	800395c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	212c      	movs	r1, #44	; 0x2c
 8003872:	fb01 f303 	mul.w	r3, r1, r3
 8003876:	4413      	add	r3, r2
 8003878:	3361      	adds	r3, #97	; 0x61
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b05      	cmp	r3, #5
 800387e:	d109      	bne.n	8003894 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	212c      	movs	r1, #44	; 0x2c
 8003886:	fb01 f303 	mul.w	r3, r1, r3
 800388a:	4413      	add	r3, r2
 800388c:	3360      	adds	r3, #96	; 0x60
 800388e:	2205      	movs	r2, #5
 8003890:	701a      	strb	r2, [r3, #0]
 8003892:	e063      	b.n	800395c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	212c      	movs	r1, #44	; 0x2c
 800389a:	fb01 f303 	mul.w	r3, r1, r3
 800389e:	4413      	add	r3, r2
 80038a0:	3361      	adds	r3, #97	; 0x61
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b06      	cmp	r3, #6
 80038a6:	d009      	beq.n	80038bc <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	212c      	movs	r1, #44	; 0x2c
 80038ae:	fb01 f303 	mul.w	r3, r1, r3
 80038b2:	4413      	add	r3, r2
 80038b4:	3361      	adds	r3, #97	; 0x61
 80038b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d14f      	bne.n	800395c <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	212c      	movs	r1, #44	; 0x2c
 80038c2:	fb01 f303 	mul.w	r3, r1, r3
 80038c6:	4413      	add	r3, r2
 80038c8:	335c      	adds	r3, #92	; 0x5c
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	202c      	movs	r0, #44	; 0x2c
 80038d4:	fb00 f303 	mul.w	r3, r0, r3
 80038d8:	440b      	add	r3, r1
 80038da:	335c      	adds	r3, #92	; 0x5c
 80038dc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	212c      	movs	r1, #44	; 0x2c
 80038e4:	fb01 f303 	mul.w	r3, r1, r3
 80038e8:	4413      	add	r3, r2
 80038ea:	335c      	adds	r3, #92	; 0x5c
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d912      	bls.n	8003918 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	212c      	movs	r1, #44	; 0x2c
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	4413      	add	r3, r2
 80038fe:	335c      	adds	r3, #92	; 0x5c
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	212c      	movs	r1, #44	; 0x2c
 800390a:	fb01 f303 	mul.w	r3, r1, r3
 800390e:	4413      	add	r3, r2
 8003910:	3360      	adds	r3, #96	; 0x60
 8003912:	2204      	movs	r2, #4
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	e021      	b.n	800395c <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	212c      	movs	r1, #44	; 0x2c
 800391e:	fb01 f303 	mul.w	r3, r1, r3
 8003922:	4413      	add	r3, r2
 8003924:	3360      	adds	r3, #96	; 0x60
 8003926:	2202      	movs	r2, #2
 8003928:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	4413      	add	r3, r2
 8003932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003940:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003948:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	4413      	add	r3, r2
 8003952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003956:	461a      	mov	r2, r3
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	4413      	add	r3, r2
 8003964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003968:	461a      	mov	r2, r3
 800396a:	2302      	movs	r3, #2
 800396c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	b2d9      	uxtb	r1, r3
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	202c      	movs	r0, #44	; 0x2c
 8003978:	fb00 f303 	mul.w	r3, r0, r3
 800397c:	4413      	add	r3, r2
 800397e:	3360      	adds	r3, #96	; 0x60
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f002 ffad 	bl	80068e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800398a:	bf00      	nop
 800398c:	3720      	adds	r7, #32
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b08a      	sub	sp, #40	; 0x28
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	0c5b      	lsrs	r3, r3, #17
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039c6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d004      	beq.n	80039d8 <HCD_RXQLVL_IRQHandler+0x46>
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b05      	cmp	r3, #5
 80039d2:	f000 80a9 	beq.w	8003b28 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80039d6:	e0aa      	b.n	8003b2e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 80a6 	beq.w	8003b2c <HCD_RXQLVL_IRQHandler+0x19a>
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	212c      	movs	r1, #44	; 0x2c
 80039e6:	fb01 f303 	mul.w	r3, r1, r3
 80039ea:	4413      	add	r3, r2
 80039ec:	3344      	adds	r3, #68	; 0x44
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 809b 	beq.w	8003b2c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	212c      	movs	r1, #44	; 0x2c
 80039fc:	fb01 f303 	mul.w	r3, r1, r3
 8003a00:	4413      	add	r3, r2
 8003a02:	3350      	adds	r3, #80	; 0x50
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	441a      	add	r2, r3
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	202c      	movs	r0, #44	; 0x2c
 8003a10:	fb00 f303 	mul.w	r3, r0, r3
 8003a14:	440b      	add	r3, r1
 8003a16:	334c      	adds	r3, #76	; 0x4c
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d87a      	bhi.n	8003b14 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	212c      	movs	r1, #44	; 0x2c
 8003a28:	fb01 f303 	mul.w	r3, r1, r3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3344      	adds	r3, #68	; 0x44
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	b292      	uxth	r2, r2
 8003a36:	4619      	mov	r1, r3
 8003a38:	f002 fc54 	bl	80062e4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	212c      	movs	r1, #44	; 0x2c
 8003a42:	fb01 f303 	mul.w	r3, r1, r3
 8003a46:	4413      	add	r3, r2
 8003a48:	3344      	adds	r3, #68	; 0x44
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	441a      	add	r2, r3
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	202c      	movs	r0, #44	; 0x2c
 8003a56:	fb00 f303 	mul.w	r3, r0, r3
 8003a5a:	440b      	add	r3, r1
 8003a5c:	3344      	adds	r3, #68	; 0x44
 8003a5e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	212c      	movs	r1, #44	; 0x2c
 8003a66:	fb01 f303 	mul.w	r3, r1, r3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3350      	adds	r3, #80	; 0x50
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	441a      	add	r2, r3
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	202c      	movs	r0, #44	; 0x2c
 8003a7a:	fb00 f303 	mul.w	r3, r0, r3
 8003a7e:	440b      	add	r3, r1
 8003a80:	3350      	adds	r3, #80	; 0x50
 8003a82:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	0cdb      	lsrs	r3, r3, #19
 8003a94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a98:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	212c      	movs	r1, #44	; 0x2c
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3340      	adds	r3, #64	; 0x40
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d13c      	bne.n	8003b2c <HCD_RXQLVL_IRQHandler+0x19a>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d039      	beq.n	8003b2c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ace:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ad6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	212c      	movs	r1, #44	; 0x2c
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	4413      	add	r3, r2
 8003af6:	3354      	adds	r3, #84	; 0x54
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	f083 0301 	eor.w	r3, r3, #1
 8003afe:	b2d8      	uxtb	r0, r3
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	212c      	movs	r1, #44	; 0x2c
 8003b06:	fb01 f303 	mul.w	r3, r1, r3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3354      	adds	r3, #84	; 0x54
 8003b0e:	4602      	mov	r2, r0
 8003b10:	701a      	strb	r2, [r3, #0]
      break;
 8003b12:	e00b      	b.n	8003b2c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	212c      	movs	r1, #44	; 0x2c
 8003b1a:	fb01 f303 	mul.w	r3, r1, r3
 8003b1e:	4413      	add	r3, r2
 8003b20:	3360      	adds	r3, #96	; 0x60
 8003b22:	2204      	movs	r2, #4
 8003b24:	701a      	strb	r2, [r3, #0]
      break;
 8003b26:	e001      	b.n	8003b2c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003b28:	bf00      	nop
 8003b2a:	e000      	b.n	8003b2e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003b2c:	bf00      	nop
  }
}
 8003b2e:	bf00      	nop
 8003b30:	3728      	adds	r7, #40	; 0x28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b086      	sub	sp, #24
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003b62:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d10b      	bne.n	8003b86 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d102      	bne.n	8003b7e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f002 fe97 	bl	80068ac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f043 0302 	orr.w	r3, r3, #2
 8003b84:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d132      	bne.n	8003bf6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f043 0308 	orr.w	r3, r3, #8
 8003b96:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d126      	bne.n	8003bf0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d113      	bne.n	8003bd2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003bb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bb4:	d106      	bne.n	8003bc4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2102      	movs	r1, #2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f002 fbdb 	bl	8006378 <USB_InitFSLSPClkSel>
 8003bc2:	e011      	b.n	8003be8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2101      	movs	r1, #1
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f002 fbd4 	bl	8006378 <USB_InitFSLSPClkSel>
 8003bd0:	e00a      	b.n	8003be8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d106      	bne.n	8003be8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003be0:	461a      	mov	r2, r3
 8003be2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003be6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f002 fe89 	bl	8006900 <HAL_HCD_PortEnabled_Callback>
 8003bee:	e002      	b.n	8003bf6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f002 fe93 	bl	800691c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d103      	bne.n	8003c08 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f043 0320 	orr.w	r3, r3, #32
 8003c06:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c0e:	461a      	mov	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	6013      	str	r3, [r2, #0]
}
 8003c14:	bf00      	nop
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c32:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d023      	beq.n	8003c86 <HAL_LTDC_IRQHandler+0x6a>
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d01e      	beq.n	8003c86 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0204 	bic.w	r2, r2, #4
 8003c56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c66:	f043 0201 	orr.w	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2204      	movs	r2, #4
 8003c74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f86f 	bl	8003d64 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d023      	beq.n	8003cd8 <HAL_LTDC_IRQHandler+0xbc>
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d01e      	beq.n	8003cd8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0202 	bic.w	r2, r2, #2
 8003ca8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cb8:	f043 0202 	orr.w	r2, r3, #2
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2204      	movs	r2, #4
 8003cc6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f846 	bl	8003d64 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d01b      	beq.n	8003d1a <HAL_LTDC_IRQHandler+0xfe>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d016      	beq.n	8003d1a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0201 	bic.w	r2, r2, #1
 8003cfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2201      	movs	r2, #1
 8003d02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f82f 	bl	8003d78 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d01b      	beq.n	8003d5c <HAL_LTDC_IRQHandler+0x140>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d016      	beq.n	8003d5c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0208 	bic.w	r2, r2, #8
 8003d3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2208      	movs	r2, #8
 8003d44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f818 	bl	8003d8c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003d5c:	bf00      	nop
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003da4:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a04      	ldr	r2, [pc, #16]	; (8003dbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dae:	6013      	str	r3, [r2, #0]
}
 8003db0:	bf00      	nop
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40007000 	.word	0x40007000

08003dc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003dca:	4b23      	ldr	r3, [pc, #140]	; (8003e58 <HAL_PWREx_EnableOverDrive+0x98>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	4a22      	ldr	r2, [pc, #136]	; (8003e58 <HAL_PWREx_EnableOverDrive+0x98>)
 8003dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd6:	4b20      	ldr	r3, [pc, #128]	; (8003e58 <HAL_PWREx_EnableOverDrive+0x98>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dde:	603b      	str	r3, [r7, #0]
 8003de0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003de2:	4b1e      	ldr	r3, [pc, #120]	; (8003e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1d      	ldr	r2, [pc, #116]	; (8003e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dee:	f7fd ffa5 	bl	8001d3c <HAL_GetTick>
 8003df2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003df4:	e009      	b.n	8003e0a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003df6:	f7fd ffa1 	bl	8001d3c <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e04:	d901      	bls.n	8003e0a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e022      	b.n	8003e50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e0a:	4b14      	ldr	r3, [pc, #80]	; (8003e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e16:	d1ee      	bne.n	8003df6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e18:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a0f      	ldr	r2, [pc, #60]	; (8003e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e24:	f7fd ff8a 	bl	8001d3c <HAL_GetTick>
 8003e28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e2a:	e009      	b.n	8003e40 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e2c:	f7fd ff86 	bl	8001d3c <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e3a:	d901      	bls.n	8003e40 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e007      	b.n	8003e50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e4c:	d1ee      	bne.n	8003e2c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	40007000 	.word	0x40007000

08003e60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e291      	b.n	800439a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 8087 	beq.w	8003f92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e84:	4b96      	ldr	r3, [pc, #600]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 030c 	and.w	r3, r3, #12
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d00c      	beq.n	8003eaa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e90:	4b93      	ldr	r3, [pc, #588]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 030c 	and.w	r3, r3, #12
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d112      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x62>
 8003e9c:	4b90      	ldr	r3, [pc, #576]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ea8:	d10b      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eaa:	4b8d      	ldr	r3, [pc, #564]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d06c      	beq.n	8003f90 <HAL_RCC_OscConfig+0x130>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d168      	bne.n	8003f90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e26b      	b.n	800439a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eca:	d106      	bne.n	8003eda <HAL_RCC_OscConfig+0x7a>
 8003ecc:	4b84      	ldr	r3, [pc, #528]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a83      	ldr	r2, [pc, #524]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	e02e      	b.n	8003f38 <HAL_RCC_OscConfig+0xd8>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10c      	bne.n	8003efc <HAL_RCC_OscConfig+0x9c>
 8003ee2:	4b7f      	ldr	r3, [pc, #508]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a7e      	ldr	r2, [pc, #504]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	4b7c      	ldr	r3, [pc, #496]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a7b      	ldr	r2, [pc, #492]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003ef4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	e01d      	b.n	8003f38 <HAL_RCC_OscConfig+0xd8>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f04:	d10c      	bne.n	8003f20 <HAL_RCC_OscConfig+0xc0>
 8003f06:	4b76      	ldr	r3, [pc, #472]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a75      	ldr	r2, [pc, #468]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	4b73      	ldr	r3, [pc, #460]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a72      	ldr	r2, [pc, #456]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e00b      	b.n	8003f38 <HAL_RCC_OscConfig+0xd8>
 8003f20:	4b6f      	ldr	r3, [pc, #444]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a6e      	ldr	r2, [pc, #440]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	4b6c      	ldr	r3, [pc, #432]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a6b      	ldr	r2, [pc, #428]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d013      	beq.n	8003f68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fd fefc 	bl	8001d3c <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f48:	f7fd fef8 	bl	8001d3c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b64      	cmp	r3, #100	; 0x64
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e21f      	b.n	800439a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	4b61      	ldr	r3, [pc, #388]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0xe8>
 8003f66:	e014      	b.n	8003f92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f68:	f7fd fee8 	bl	8001d3c <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f70:	f7fd fee4 	bl	8001d3c <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b64      	cmp	r3, #100	; 0x64
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e20b      	b.n	800439a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f82:	4b57      	ldr	r3, [pc, #348]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x110>
 8003f8e:	e000      	b.n	8003f92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d069      	beq.n	8004072 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f9e:	4b50      	ldr	r3, [pc, #320]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003faa:	4b4d      	ldr	r3, [pc, #308]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d11c      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x190>
 8003fb6:	4b4a      	ldr	r3, [pc, #296]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d116      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc2:	4b47      	ldr	r3, [pc, #284]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_RCC_OscConfig+0x17a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d001      	beq.n	8003fda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e1df      	b.n	800439a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fda:	4b41      	ldr	r3, [pc, #260]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	493d      	ldr	r1, [pc, #244]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fee:	e040      	b.n	8004072 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d023      	beq.n	8004040 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff8:	4b39      	ldr	r3, [pc, #228]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a38      	ldr	r2, [pc, #224]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004004:	f7fd fe9a 	bl	8001d3c <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800400c:	f7fd fe96 	bl	8001d3c <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e1bd      	b.n	800439a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401e:	4b30      	ldr	r3, [pc, #192]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402a:	4b2d      	ldr	r3, [pc, #180]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4929      	ldr	r1, [pc, #164]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 800403a:	4313      	orrs	r3, r2
 800403c:	600b      	str	r3, [r1, #0]
 800403e:	e018      	b.n	8004072 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004040:	4b27      	ldr	r3, [pc, #156]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a26      	ldr	r2, [pc, #152]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8004046:	f023 0301 	bic.w	r3, r3, #1
 800404a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404c:	f7fd fe76 	bl	8001d3c <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004054:	f7fd fe72 	bl	8001d3c <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e199      	b.n	800439a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004066:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b00      	cmp	r3, #0
 800407c:	d038      	beq.n	80040f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d019      	beq.n	80040ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004086:	4b16      	ldr	r3, [pc, #88]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8004088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800408a:	4a15      	ldr	r2, [pc, #84]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004092:	f7fd fe53 	bl	8001d3c <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800409a:	f7fd fe4f 	bl	8001d3c <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e176      	b.n	800439a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ac:	4b0c      	ldr	r3, [pc, #48]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 80040ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x23a>
 80040b8:	e01a      	b.n	80040f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ba:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 80040bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040be:	4a08      	ldr	r2, [pc, #32]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 80040c0:	f023 0301 	bic.w	r3, r3, #1
 80040c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c6:	f7fd fe39 	bl	8001d3c <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040cc:	e00a      	b.n	80040e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ce:	f7fd fe35 	bl	8001d3c <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d903      	bls.n	80040e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e15c      	b.n	800439a <HAL_RCC_OscConfig+0x53a>
 80040e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e4:	4b91      	ldr	r3, [pc, #580]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 80040e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1ee      	bne.n	80040ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 80a4 	beq.w	8004246 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040fe:	4b8b      	ldr	r3, [pc, #556]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10d      	bne.n	8004126 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800410a:	4b88      	ldr	r3, [pc, #544]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	4a87      	ldr	r2, [pc, #540]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 8004110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004114:	6413      	str	r3, [r2, #64]	; 0x40
 8004116:	4b85      	ldr	r3, [pc, #532]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411e:	60bb      	str	r3, [r7, #8]
 8004120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004122:	2301      	movs	r3, #1
 8004124:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004126:	4b82      	ldr	r3, [pc, #520]	; (8004330 <HAL_RCC_OscConfig+0x4d0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412e:	2b00      	cmp	r3, #0
 8004130:	d118      	bne.n	8004164 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004132:	4b7f      	ldr	r3, [pc, #508]	; (8004330 <HAL_RCC_OscConfig+0x4d0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a7e      	ldr	r2, [pc, #504]	; (8004330 <HAL_RCC_OscConfig+0x4d0>)
 8004138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800413e:	f7fd fdfd 	bl	8001d3c <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004146:	f7fd fdf9 	bl	8001d3c <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b64      	cmp	r3, #100	; 0x64
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e120      	b.n	800439a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004158:	4b75      	ldr	r3, [pc, #468]	; (8004330 <HAL_RCC_OscConfig+0x4d0>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d106      	bne.n	800417a <HAL_RCC_OscConfig+0x31a>
 800416c:	4b6f      	ldr	r3, [pc, #444]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 800416e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004170:	4a6e      	ldr	r2, [pc, #440]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 8004172:	f043 0301 	orr.w	r3, r3, #1
 8004176:	6713      	str	r3, [r2, #112]	; 0x70
 8004178:	e02d      	b.n	80041d6 <HAL_RCC_OscConfig+0x376>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10c      	bne.n	800419c <HAL_RCC_OscConfig+0x33c>
 8004182:	4b6a      	ldr	r3, [pc, #424]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004186:	4a69      	ldr	r2, [pc, #420]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 8004188:	f023 0301 	bic.w	r3, r3, #1
 800418c:	6713      	str	r3, [r2, #112]	; 0x70
 800418e:	4b67      	ldr	r3, [pc, #412]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004192:	4a66      	ldr	r2, [pc, #408]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 8004194:	f023 0304 	bic.w	r3, r3, #4
 8004198:	6713      	str	r3, [r2, #112]	; 0x70
 800419a:	e01c      	b.n	80041d6 <HAL_RCC_OscConfig+0x376>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b05      	cmp	r3, #5
 80041a2:	d10c      	bne.n	80041be <HAL_RCC_OscConfig+0x35e>
 80041a4:	4b61      	ldr	r3, [pc, #388]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 80041a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a8:	4a60      	ldr	r2, [pc, #384]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 80041aa:	f043 0304 	orr.w	r3, r3, #4
 80041ae:	6713      	str	r3, [r2, #112]	; 0x70
 80041b0:	4b5e      	ldr	r3, [pc, #376]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 80041b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b4:	4a5d      	ldr	r2, [pc, #372]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	6713      	str	r3, [r2, #112]	; 0x70
 80041bc:	e00b      	b.n	80041d6 <HAL_RCC_OscConfig+0x376>
 80041be:	4b5b      	ldr	r3, [pc, #364]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 80041c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c2:	4a5a      	ldr	r2, [pc, #360]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	6713      	str	r3, [r2, #112]	; 0x70
 80041ca:	4b58      	ldr	r3, [pc, #352]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	4a57      	ldr	r2, [pc, #348]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 80041d0:	f023 0304 	bic.w	r3, r3, #4
 80041d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d015      	beq.n	800420a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041de:	f7fd fdad 	bl	8001d3c <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e4:	e00a      	b.n	80041fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e6:	f7fd fda9 	bl	8001d3c <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e0ce      	b.n	800439a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041fc:	4b4b      	ldr	r3, [pc, #300]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 80041fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0ee      	beq.n	80041e6 <HAL_RCC_OscConfig+0x386>
 8004208:	e014      	b.n	8004234 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420a:	f7fd fd97 	bl	8001d3c <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004210:	e00a      	b.n	8004228 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004212:	f7fd fd93 	bl	8001d3c <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004220:	4293      	cmp	r3, r2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e0b8      	b.n	800439a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004228:	4b40      	ldr	r3, [pc, #256]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 800422a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1ee      	bne.n	8004212 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d105      	bne.n	8004246 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800423a:	4b3c      	ldr	r3, [pc, #240]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	4a3b      	ldr	r2, [pc, #236]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 8004240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004244:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 80a4 	beq.w	8004398 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004250:	4b36      	ldr	r3, [pc, #216]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 030c 	and.w	r3, r3, #12
 8004258:	2b08      	cmp	r3, #8
 800425a:	d06b      	beq.n	8004334 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d149      	bne.n	80042f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004264:	4b31      	ldr	r3, [pc, #196]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a30      	ldr	r2, [pc, #192]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 800426a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800426e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004270:	f7fd fd64 	bl	8001d3c <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004278:	f7fd fd60 	bl	8001d3c <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e087      	b.n	800439a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428a:	4b28      	ldr	r3, [pc, #160]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f0      	bne.n	8004278 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69da      	ldr	r2, [r3, #28]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	019b      	lsls	r3, r3, #6
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	085b      	lsrs	r3, r3, #1
 80042ae:	3b01      	subs	r3, #1
 80042b0:	041b      	lsls	r3, r3, #16
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	061b      	lsls	r3, r3, #24
 80042ba:	4313      	orrs	r3, r2
 80042bc:	4a1b      	ldr	r2, [pc, #108]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 80042be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042c4:	4b19      	ldr	r3, [pc, #100]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a18      	ldr	r2, [pc, #96]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 80042ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d0:	f7fd fd34 	bl	8001d3c <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d8:	f7fd fd30 	bl	8001d3c <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e057      	b.n	800439a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ea:	4b10      	ldr	r3, [pc, #64]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCC_OscConfig+0x478>
 80042f6:	e04f      	b.n	8004398 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a0b      	ldr	r2, [pc, #44]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 80042fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004304:	f7fd fd1a 	bl	8001d3c <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430c:	f7fd fd16 	bl	8001d3c <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e03d      	b.n	800439a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431e:	4b03      	ldr	r3, [pc, #12]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f0      	bne.n	800430c <HAL_RCC_OscConfig+0x4ac>
 800432a:	e035      	b.n	8004398 <HAL_RCC_OscConfig+0x538>
 800432c:	40023800 	.word	0x40023800
 8004330:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004334:	4b1b      	ldr	r3, [pc, #108]	; (80043a4 <HAL_RCC_OscConfig+0x544>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d028      	beq.n	8004394 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800434c:	429a      	cmp	r2, r3
 800434e:	d121      	bne.n	8004394 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800435a:	429a      	cmp	r2, r3
 800435c:	d11a      	bne.n	8004394 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004364:	4013      	ands	r3, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800436a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800436c:	4293      	cmp	r3, r2
 800436e:	d111      	bne.n	8004394 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	085b      	lsrs	r3, r3, #1
 800437c:	3b01      	subs	r3, #1
 800437e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004380:	429a      	cmp	r2, r3
 8004382:	d107      	bne.n	8004394 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004390:	429a      	cmp	r2, r3
 8004392:	d001      	beq.n	8004398 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40023800 	.word	0x40023800

080043a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e0d0      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043c0:	4b6a      	ldr	r3, [pc, #424]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 030f 	and.w	r3, r3, #15
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d910      	bls.n	80043f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ce:	4b67      	ldr	r3, [pc, #412]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f023 020f 	bic.w	r2, r3, #15
 80043d6:	4965      	ldr	r1, [pc, #404]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	4313      	orrs	r3, r2
 80043dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043de:	4b63      	ldr	r3, [pc, #396]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d001      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0b8      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d020      	beq.n	800443e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004408:	4b59      	ldr	r3, [pc, #356]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	4a58      	ldr	r2, [pc, #352]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 800440e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004412:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0308 	and.w	r3, r3, #8
 800441c:	2b00      	cmp	r3, #0
 800441e:	d005      	beq.n	800442c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004420:	4b53      	ldr	r3, [pc, #332]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	4a52      	ldr	r2, [pc, #328]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 8004426:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800442a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800442c:	4b50      	ldr	r3, [pc, #320]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	494d      	ldr	r1, [pc, #308]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 800443a:	4313      	orrs	r3, r2
 800443c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d040      	beq.n	80044cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d107      	bne.n	8004462 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004452:	4b47      	ldr	r3, [pc, #284]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d115      	bne.n	800448a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e07f      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d107      	bne.n	800447a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800446a:	4b41      	ldr	r3, [pc, #260]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d109      	bne.n	800448a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e073      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447a:	4b3d      	ldr	r3, [pc, #244]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e06b      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800448a:	4b39      	ldr	r3, [pc, #228]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f023 0203 	bic.w	r2, r3, #3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	4936      	ldr	r1, [pc, #216]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 8004498:	4313      	orrs	r3, r2
 800449a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800449c:	f7fd fc4e 	bl	8001d3c <HAL_GetTick>
 80044a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a2:	e00a      	b.n	80044ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a4:	f7fd fc4a 	bl	8001d3c <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e053      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ba:	4b2d      	ldr	r3, [pc, #180]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 020c 	and.w	r2, r3, #12
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d1eb      	bne.n	80044a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044cc:	4b27      	ldr	r3, [pc, #156]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d210      	bcs.n	80044fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044da:	4b24      	ldr	r3, [pc, #144]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f023 020f 	bic.w	r2, r3, #15
 80044e2:	4922      	ldr	r1, [pc, #136]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ea:	4b20      	ldr	r3, [pc, #128]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d001      	beq.n	80044fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e032      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004508:	4b19      	ldr	r3, [pc, #100]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	4916      	ldr	r1, [pc, #88]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d009      	beq.n	800453a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004526:	4b12      	ldr	r3, [pc, #72]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	490e      	ldr	r1, [pc, #56]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 8004536:	4313      	orrs	r3, r2
 8004538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800453a:	f000 f821 	bl	8004580 <HAL_RCC_GetSysClockFreq>
 800453e:	4602      	mov	r2, r0
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	490a      	ldr	r1, [pc, #40]	; (8004574 <HAL_RCC_ClockConfig+0x1cc>)
 800454c:	5ccb      	ldrb	r3, [r1, r3]
 800454e:	fa22 f303 	lsr.w	r3, r2, r3
 8004552:	4a09      	ldr	r2, [pc, #36]	; (8004578 <HAL_RCC_ClockConfig+0x1d0>)
 8004554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004556:	4b09      	ldr	r3, [pc, #36]	; (800457c <HAL_RCC_ClockConfig+0x1d4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7fd fab0 	bl	8001ac0 <HAL_InitTick>

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40023c00 	.word	0x40023c00
 8004570:	40023800 	.word	0x40023800
 8004574:	0800b290 	.word	0x0800b290
 8004578:	20000000 	.word	0x20000000
 800457c:	20000004 	.word	0x20000004

08004580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004580:	b5b0      	push	{r4, r5, r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004586:	2100      	movs	r1, #0
 8004588:	6079      	str	r1, [r7, #4]
 800458a:	2100      	movs	r1, #0
 800458c:	60f9      	str	r1, [r7, #12]
 800458e:	2100      	movs	r1, #0
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004592:	2100      	movs	r1, #0
 8004594:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004596:	4952      	ldr	r1, [pc, #328]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004598:	6889      	ldr	r1, [r1, #8]
 800459a:	f001 010c 	and.w	r1, r1, #12
 800459e:	2908      	cmp	r1, #8
 80045a0:	d00d      	beq.n	80045be <HAL_RCC_GetSysClockFreq+0x3e>
 80045a2:	2908      	cmp	r1, #8
 80045a4:	f200 8094 	bhi.w	80046d0 <HAL_RCC_GetSysClockFreq+0x150>
 80045a8:	2900      	cmp	r1, #0
 80045aa:	d002      	beq.n	80045b2 <HAL_RCC_GetSysClockFreq+0x32>
 80045ac:	2904      	cmp	r1, #4
 80045ae:	d003      	beq.n	80045b8 <HAL_RCC_GetSysClockFreq+0x38>
 80045b0:	e08e      	b.n	80046d0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045b2:	4b4c      	ldr	r3, [pc, #304]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80045b4:	60bb      	str	r3, [r7, #8]
      break;
 80045b6:	e08e      	b.n	80046d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045b8:	4b4b      	ldr	r3, [pc, #300]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80045ba:	60bb      	str	r3, [r7, #8]
      break;
 80045bc:	e08b      	b.n	80046d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045be:	4948      	ldr	r1, [pc, #288]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80045c0:	6849      	ldr	r1, [r1, #4]
 80045c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80045c6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80045c8:	4945      	ldr	r1, [pc, #276]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80045ca:	6849      	ldr	r1, [r1, #4]
 80045cc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80045d0:	2900      	cmp	r1, #0
 80045d2:	d024      	beq.n	800461e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045d4:	4942      	ldr	r1, [pc, #264]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80045d6:	6849      	ldr	r1, [r1, #4]
 80045d8:	0989      	lsrs	r1, r1, #6
 80045da:	4608      	mov	r0, r1
 80045dc:	f04f 0100 	mov.w	r1, #0
 80045e0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80045e4:	f04f 0500 	mov.w	r5, #0
 80045e8:	ea00 0204 	and.w	r2, r0, r4
 80045ec:	ea01 0305 	and.w	r3, r1, r5
 80045f0:	493d      	ldr	r1, [pc, #244]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80045f2:	fb01 f003 	mul.w	r0, r1, r3
 80045f6:	2100      	movs	r1, #0
 80045f8:	fb01 f102 	mul.w	r1, r1, r2
 80045fc:	1844      	adds	r4, r0, r1
 80045fe:	493a      	ldr	r1, [pc, #232]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004600:	fba2 0101 	umull	r0, r1, r2, r1
 8004604:	1863      	adds	r3, r4, r1
 8004606:	4619      	mov	r1, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	461a      	mov	r2, r3
 800460c:	f04f 0300 	mov.w	r3, #0
 8004610:	f7fc faea 	bl	8000be8 <__aeabi_uldivmod>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4613      	mov	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	e04a      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800461e:	4b30      	ldr	r3, [pc, #192]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	099b      	lsrs	r3, r3, #6
 8004624:	461a      	mov	r2, r3
 8004626:	f04f 0300 	mov.w	r3, #0
 800462a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800462e:	f04f 0100 	mov.w	r1, #0
 8004632:	ea02 0400 	and.w	r4, r2, r0
 8004636:	ea03 0501 	and.w	r5, r3, r1
 800463a:	4620      	mov	r0, r4
 800463c:	4629      	mov	r1, r5
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	014b      	lsls	r3, r1, #5
 8004648:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800464c:	0142      	lsls	r2, r0, #5
 800464e:	4610      	mov	r0, r2
 8004650:	4619      	mov	r1, r3
 8004652:	1b00      	subs	r0, r0, r4
 8004654:	eb61 0105 	sbc.w	r1, r1, r5
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	018b      	lsls	r3, r1, #6
 8004662:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004666:	0182      	lsls	r2, r0, #6
 8004668:	1a12      	subs	r2, r2, r0
 800466a:	eb63 0301 	sbc.w	r3, r3, r1
 800466e:	f04f 0000 	mov.w	r0, #0
 8004672:	f04f 0100 	mov.w	r1, #0
 8004676:	00d9      	lsls	r1, r3, #3
 8004678:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800467c:	00d0      	lsls	r0, r2, #3
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	1912      	adds	r2, r2, r4
 8004684:	eb45 0303 	adc.w	r3, r5, r3
 8004688:	f04f 0000 	mov.w	r0, #0
 800468c:	f04f 0100 	mov.w	r1, #0
 8004690:	0299      	lsls	r1, r3, #10
 8004692:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004696:	0290      	lsls	r0, r2, #10
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4610      	mov	r0, r2
 800469e:	4619      	mov	r1, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	461a      	mov	r2, r3
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	f7fc fa9e 	bl	8000be8 <__aeabi_uldivmod>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4613      	mov	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80046b4:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	0c1b      	lsrs	r3, r3, #16
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	3301      	adds	r3, #1
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046cc:	60bb      	str	r3, [r7, #8]
      break;
 80046ce:	e002      	b.n	80046d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046d0:	4b04      	ldr	r3, [pc, #16]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80046d2:	60bb      	str	r3, [r7, #8]
      break;
 80046d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046d6:	68bb      	ldr	r3, [r7, #8]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bdb0      	pop	{r4, r5, r7, pc}
 80046e0:	40023800 	.word	0x40023800
 80046e4:	00f42400 	.word	0x00f42400
 80046e8:	017d7840 	.word	0x017d7840

080046ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046f0:	4b03      	ldr	r3, [pc, #12]	; (8004700 <HAL_RCC_GetHCLKFreq+0x14>)
 80046f2:	681b      	ldr	r3, [r3, #0]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	20000000 	.word	0x20000000

08004704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004708:	f7ff fff0 	bl	80046ec <HAL_RCC_GetHCLKFreq>
 800470c:	4602      	mov	r2, r0
 800470e:	4b05      	ldr	r3, [pc, #20]	; (8004724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	0a9b      	lsrs	r3, r3, #10
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	4903      	ldr	r1, [pc, #12]	; (8004728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800471a:	5ccb      	ldrb	r3, [r1, r3]
 800471c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004720:	4618      	mov	r0, r3
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40023800 	.word	0x40023800
 8004728:	0800b2a0 	.word	0x0800b2a0

0800472c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004730:	f7ff ffdc 	bl	80046ec <HAL_RCC_GetHCLKFreq>
 8004734:	4602      	mov	r2, r0
 8004736:	4b05      	ldr	r3, [pc, #20]	; (800474c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	0b5b      	lsrs	r3, r3, #13
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	4903      	ldr	r1, [pc, #12]	; (8004750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004742:	5ccb      	ldrb	r3, [r1, r3]
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004748:	4618      	mov	r0, r3
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40023800 	.word	0x40023800
 8004750:	0800b2a0 	.word	0x0800b2a0

08004754 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	220f      	movs	r2, #15
 8004762:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004764:	4b12      	ldr	r3, [pc, #72]	; (80047b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 0203 	and.w	r2, r3, #3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004770:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <HAL_RCC_GetClockConfig+0x5c>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004788:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <HAL_RCC_GetClockConfig+0x5c>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	08db      	lsrs	r3, r3, #3
 800478e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004796:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <HAL_RCC_GetClockConfig+0x60>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 020f 	and.w	r2, r3, #15
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	601a      	str	r2, [r3, #0]
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40023800 	.word	0x40023800
 80047b4:	40023c00 	.word	0x40023c00

080047b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b088      	sub	sp, #32
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80047c4:	2300      	movs	r3, #0
 80047c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d012      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047e0:	4b69      	ldr	r3, [pc, #420]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4a68      	ldr	r2, [pc, #416]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80047ea:	6093      	str	r3, [r2, #8]
 80047ec:	4b66      	ldr	r3, [pc, #408]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f4:	4964      	ldr	r1, [pc, #400]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004802:	2301      	movs	r3, #1
 8004804:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d017      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004812:	4b5d      	ldr	r3, [pc, #372]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004820:	4959      	ldr	r1, [pc, #356]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004822:	4313      	orrs	r3, r2
 8004824:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004830:	d101      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004832:	2301      	movs	r3, #1
 8004834:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800483e:	2301      	movs	r3, #1
 8004840:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d017      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800484e:	4b4e      	ldr	r3, [pc, #312]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004854:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	494a      	ldr	r1, [pc, #296]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800486c:	d101      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800486e:	2301      	movs	r3, #1
 8004870:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800487a:	2301      	movs	r3, #1
 800487c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800488a:	2301      	movs	r3, #1
 800488c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 808b 	beq.w	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800489c:	4b3a      	ldr	r3, [pc, #232]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	4a39      	ldr	r2, [pc, #228]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a6:	6413      	str	r3, [r2, #64]	; 0x40
 80048a8:	4b37      	ldr	r3, [pc, #220]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80048b4:	4b35      	ldr	r3, [pc, #212]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a34      	ldr	r2, [pc, #208]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048c0:	f7fd fa3c 	bl	8001d3c <HAL_GetTick>
 80048c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048c6:	e008      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c8:	f7fd fa38 	bl	8001d3c <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b64      	cmp	r3, #100	; 0x64
 80048d4:	d901      	bls.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e357      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048da:	4b2c      	ldr	r3, [pc, #176]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0f0      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048e6:	4b28      	ldr	r3, [pc, #160]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d035      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	429a      	cmp	r2, r3
 8004902:	d02e      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004904:	4b20      	ldr	r3, [pc, #128]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800490c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800490e:	4b1e      	ldr	r3, [pc, #120]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004912:	4a1d      	ldr	r2, [pc, #116]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004918:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800491a:	4b1b      	ldr	r3, [pc, #108]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800491c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491e:	4a1a      	ldr	r2, [pc, #104]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004924:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004926:	4a18      	ldr	r2, [pc, #96]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800492c:	4b16      	ldr	r3, [pc, #88]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800492e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b01      	cmp	r3, #1
 8004936:	d114      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004938:	f7fd fa00 	bl	8001d3c <HAL_GetTick>
 800493c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800493e:	e00a      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004940:	f7fd f9fc 	bl	8001d3c <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	f241 3288 	movw	r2, #5000	; 0x1388
 800494e:	4293      	cmp	r3, r2
 8004950:	d901      	bls.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e319      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004956:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0ee      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800496a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800496e:	d111      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004970:	4b05      	ldr	r3, [pc, #20]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800497c:	4b04      	ldr	r3, [pc, #16]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800497e:	400b      	ands	r3, r1
 8004980:	4901      	ldr	r1, [pc, #4]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004982:	4313      	orrs	r3, r2
 8004984:	608b      	str	r3, [r1, #8]
 8004986:	e00b      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004988:	40023800 	.word	0x40023800
 800498c:	40007000 	.word	0x40007000
 8004990:	0ffffcff 	.word	0x0ffffcff
 8004994:	4bb1      	ldr	r3, [pc, #708]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	4ab0      	ldr	r2, [pc, #704]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800499a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800499e:	6093      	str	r3, [r2, #8]
 80049a0:	4bae      	ldr	r3, [pc, #696]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ac:	49ab      	ldr	r1, [pc, #684]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0310 	and.w	r3, r3, #16
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d010      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049be:	4ba7      	ldr	r3, [pc, #668]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049c4:	4aa5      	ldr	r2, [pc, #660]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80049ce:	4ba3      	ldr	r3, [pc, #652]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d8:	49a0      	ldr	r1, [pc, #640]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049ec:	4b9b      	ldr	r3, [pc, #620]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049fa:	4998      	ldr	r1, [pc, #608]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a0e:	4b93      	ldr	r3, [pc, #588]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a1c:	498f      	ldr	r1, [pc, #572]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a30:	4b8a      	ldr	r3, [pc, #552]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a3e:	4987      	ldr	r1, [pc, #540]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a52:	4b82      	ldr	r3, [pc, #520]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a60:	497e      	ldr	r1, [pc, #504]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a74:	4b79      	ldr	r3, [pc, #484]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7a:	f023 0203 	bic.w	r2, r3, #3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a82:	4976      	ldr	r1, [pc, #472]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a96:	4b71      	ldr	r3, [pc, #452]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9c:	f023 020c 	bic.w	r2, r3, #12
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa4:	496d      	ldr	r1, [pc, #436]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ab8:	4b68      	ldr	r3, [pc, #416]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac6:	4965      	ldr	r1, [pc, #404]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ada:	4b60      	ldr	r3, [pc, #384]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae8:	495c      	ldr	r1, [pc, #368]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004afc:	4b57      	ldr	r3, [pc, #348]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0a:	4954      	ldr	r1, [pc, #336]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004b1e:	4b4f      	ldr	r3, [pc, #316]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2c:	494b      	ldr	r1, [pc, #300]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b40:	4b46      	ldr	r3, [pc, #280]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b4e:	4943      	ldr	r1, [pc, #268]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b62:	4b3e      	ldr	r3, [pc, #248]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b70:	493a      	ldr	r1, [pc, #232]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b84:	4b35      	ldr	r3, [pc, #212]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b92:	4932      	ldr	r1, [pc, #200]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d011      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ba6:	4b2d      	ldr	r3, [pc, #180]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bb4:	4929      	ldr	r1, [pc, #164]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bc4:	d101      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004be6:	4b1d      	ldr	r3, [pc, #116]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bf4:	4919      	ldr	r1, [pc, #100]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00b      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c08:	4b14      	ldr	r3, [pc, #80]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c18:	4910      	ldr	r1, [pc, #64]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d006      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 80d9 	beq.w	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c34:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a08      	ldr	r2, [pc, #32]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c40:	f7fd f87c 	bl	8001d3c <HAL_GetTick>
 8004c44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c46:	e00b      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c48:	f7fd f878 	bl	8001d3c <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	; 0x64
 8004c54:	d904      	bls.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e197      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004c5a:	bf00      	nop
 8004c5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c60:	4b6c      	ldr	r3, [pc, #432]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1ed      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d021      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d11d      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c80:	4b64      	ldr	r3, [pc, #400]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c86:	0c1b      	lsrs	r3, r3, #16
 8004c88:	f003 0303 	and.w	r3, r3, #3
 8004c8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c8e:	4b61      	ldr	r3, [pc, #388]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c94:	0e1b      	lsrs	r3, r3, #24
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	019a      	lsls	r2, r3, #6
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	041b      	lsls	r3, r3, #16
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	061b      	lsls	r3, r3, #24
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	071b      	lsls	r3, r3, #28
 8004cb4:	4957      	ldr	r1, [pc, #348]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d004      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ccc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cd0:	d00a      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d02e      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ce6:	d129      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ce8:	4b4a      	ldr	r3, [pc, #296]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cee:	0c1b      	lsrs	r3, r3, #16
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004cf6:	4b47      	ldr	r3, [pc, #284]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cfc:	0f1b      	lsrs	r3, r3, #28
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	019a      	lsls	r2, r3, #6
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	041b      	lsls	r3, r3, #16
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	061b      	lsls	r3, r3, #24
 8004d16:	431a      	orrs	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	071b      	lsls	r3, r3, #28
 8004d1c:	493d      	ldr	r1, [pc, #244]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d24:	4b3b      	ldr	r3, [pc, #236]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d2a:	f023 021f 	bic.w	r2, r3, #31
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	3b01      	subs	r3, #1
 8004d34:	4937      	ldr	r1, [pc, #220]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01d      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d48:	4b32      	ldr	r3, [pc, #200]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d4e:	0e1b      	lsrs	r3, r3, #24
 8004d50:	f003 030f 	and.w	r3, r3, #15
 8004d54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d56:	4b2f      	ldr	r3, [pc, #188]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d5c:	0f1b      	lsrs	r3, r3, #28
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	019a      	lsls	r2, r3, #6
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	041b      	lsls	r3, r3, #16
 8004d70:	431a      	orrs	r2, r3
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	061b      	lsls	r3, r3, #24
 8004d76:	431a      	orrs	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	071b      	lsls	r3, r3, #28
 8004d7c:	4925      	ldr	r1, [pc, #148]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d011      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	019a      	lsls	r2, r3, #6
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	041b      	lsls	r3, r3, #16
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	061b      	lsls	r3, r3, #24
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	071b      	lsls	r3, r3, #28
 8004dac:	4919      	ldr	r1, [pc, #100]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004db4:	4b17      	ldr	r3, [pc, #92]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a16      	ldr	r2, [pc, #88]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc0:	f7fc ffbc 	bl	8001d3c <HAL_GetTick>
 8004dc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004dc8:	f7fc ffb8 	bl	8001d3c <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b64      	cmp	r3, #100	; 0x64
 8004dd4:	d901      	bls.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e0d7      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dda:	4b0e      	ldr	r3, [pc, #56]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0f0      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	f040 80cd 	bne.w	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004dee:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a08      	ldr	r2, [pc, #32]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dfa:	f7fc ff9f 	bl	8001d3c <HAL_GetTick>
 8004dfe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e00:	e00a      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e02:	f7fc ff9b 	bl	8001d3c <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b64      	cmp	r3, #100	; 0x64
 8004e0e:	d903      	bls.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e0ba      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004e14:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e18:	4b5e      	ldr	r3, [pc, #376]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e24:	d0ed      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d009      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d02e      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d12a      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e4e:	4b51      	ldr	r3, [pc, #324]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e54:	0c1b      	lsrs	r3, r3, #16
 8004e56:	f003 0303 	and.w	r3, r3, #3
 8004e5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e5c:	4b4d      	ldr	r3, [pc, #308]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e62:	0f1b      	lsrs	r3, r3, #28
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	019a      	lsls	r2, r3, #6
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	041b      	lsls	r3, r3, #16
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	061b      	lsls	r3, r3, #24
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	071b      	lsls	r3, r3, #28
 8004e82:	4944      	ldr	r1, [pc, #272]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e8a:	4b42      	ldr	r3, [pc, #264]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e90:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	021b      	lsls	r3, r3, #8
 8004e9c:	493d      	ldr	r1, [pc, #244]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d022      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb8:	d11d      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004eba:	4b36      	ldr	r3, [pc, #216]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec0:	0e1b      	lsrs	r3, r3, #24
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ec8:	4b32      	ldr	r3, [pc, #200]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ece:	0f1b      	lsrs	r3, r3, #28
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	019a      	lsls	r2, r3, #6
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	041b      	lsls	r3, r3, #16
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	061b      	lsls	r3, r3, #24
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	071b      	lsls	r3, r3, #28
 8004eee:	4929      	ldr	r1, [pc, #164]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d028      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f02:	4b24      	ldr	r3, [pc, #144]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f08:	0e1b      	lsrs	r3, r3, #24
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f10:	4b20      	ldr	r3, [pc, #128]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f16:	0c1b      	lsrs	r3, r3, #16
 8004f18:	f003 0303 	and.w	r3, r3, #3
 8004f1c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	019a      	lsls	r2, r3, #6
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	041b      	lsls	r3, r3, #16
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	061b      	lsls	r3, r3, #24
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	071b      	lsls	r3, r3, #28
 8004f36:	4917      	ldr	r1, [pc, #92]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f3e:	4b15      	ldr	r3, [pc, #84]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4c:	4911      	ldr	r1, [pc, #68]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f54:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a0e      	ldr	r2, [pc, #56]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f60:	f7fc feec 	bl	8001d3c <HAL_GetTick>
 8004f64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f68:	f7fc fee8 	bl	8001d3c <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b64      	cmp	r3, #100	; 0x64
 8004f74:	d901      	bls.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e007      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f7a:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f86:	d1ef      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3720      	adds	r7, #32
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	40023800 	.word	0x40023800

08004f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e049      	b.n	800503e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fc fc44 	bl	800184c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	f000 fb2c 	bl	8005634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b01      	cmp	r3, #1
 800505a:	d001      	beq.n	8005060 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e04c      	b.n	80050fa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a26      	ldr	r2, [pc, #152]	; (8005108 <HAL_TIM_Base_Start+0xc0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d022      	beq.n	80050b8 <HAL_TIM_Base_Start+0x70>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800507a:	d01d      	beq.n	80050b8 <HAL_TIM_Base_Start+0x70>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a22      	ldr	r2, [pc, #136]	; (800510c <HAL_TIM_Base_Start+0xc4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d018      	beq.n	80050b8 <HAL_TIM_Base_Start+0x70>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a21      	ldr	r2, [pc, #132]	; (8005110 <HAL_TIM_Base_Start+0xc8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d013      	beq.n	80050b8 <HAL_TIM_Base_Start+0x70>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1f      	ldr	r2, [pc, #124]	; (8005114 <HAL_TIM_Base_Start+0xcc>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00e      	beq.n	80050b8 <HAL_TIM_Base_Start+0x70>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1e      	ldr	r2, [pc, #120]	; (8005118 <HAL_TIM_Base_Start+0xd0>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d009      	beq.n	80050b8 <HAL_TIM_Base_Start+0x70>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a1c      	ldr	r2, [pc, #112]	; (800511c <HAL_TIM_Base_Start+0xd4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d004      	beq.n	80050b8 <HAL_TIM_Base_Start+0x70>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1b      	ldr	r2, [pc, #108]	; (8005120 <HAL_TIM_Base_Start+0xd8>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d115      	bne.n	80050e4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	4b19      	ldr	r3, [pc, #100]	; (8005124 <HAL_TIM_Base_Start+0xdc>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b06      	cmp	r3, #6
 80050c8:	d015      	beq.n	80050f6 <HAL_TIM_Base_Start+0xae>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d0:	d011      	beq.n	80050f6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0201 	orr.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e2:	e008      	b.n	80050f6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	e000      	b.n	80050f8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40010000 	.word	0x40010000
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800
 8005114:	40000c00 	.word	0x40000c00
 8005118:	40010400 	.word	0x40010400
 800511c:	40014000 	.word	0x40014000
 8005120:	40001800 	.word	0x40001800
 8005124:	00010007 	.word	0x00010007

08005128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b01      	cmp	r3, #1
 800513a:	d001      	beq.n	8005140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e054      	b.n	80051ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a26      	ldr	r2, [pc, #152]	; (80051f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d022      	beq.n	80051a8 <HAL_TIM_Base_Start_IT+0x80>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516a:	d01d      	beq.n	80051a8 <HAL_TIM_Base_Start_IT+0x80>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a22      	ldr	r2, [pc, #136]	; (80051fc <HAL_TIM_Base_Start_IT+0xd4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d018      	beq.n	80051a8 <HAL_TIM_Base_Start_IT+0x80>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a21      	ldr	r2, [pc, #132]	; (8005200 <HAL_TIM_Base_Start_IT+0xd8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d013      	beq.n	80051a8 <HAL_TIM_Base_Start_IT+0x80>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1f      	ldr	r2, [pc, #124]	; (8005204 <HAL_TIM_Base_Start_IT+0xdc>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00e      	beq.n	80051a8 <HAL_TIM_Base_Start_IT+0x80>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1e      	ldr	r2, [pc, #120]	; (8005208 <HAL_TIM_Base_Start_IT+0xe0>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d009      	beq.n	80051a8 <HAL_TIM_Base_Start_IT+0x80>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a1c      	ldr	r2, [pc, #112]	; (800520c <HAL_TIM_Base_Start_IT+0xe4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d004      	beq.n	80051a8 <HAL_TIM_Base_Start_IT+0x80>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a1b      	ldr	r2, [pc, #108]	; (8005210 <HAL_TIM_Base_Start_IT+0xe8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d115      	bne.n	80051d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	4b19      	ldr	r3, [pc, #100]	; (8005214 <HAL_TIM_Base_Start_IT+0xec>)
 80051b0:	4013      	ands	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2b06      	cmp	r3, #6
 80051b8:	d015      	beq.n	80051e6 <HAL_TIM_Base_Start_IT+0xbe>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c0:	d011      	beq.n	80051e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0201 	orr.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d2:	e008      	b.n	80051e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0201 	orr.w	r2, r2, #1
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	e000      	b.n	80051e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40010000 	.word	0x40010000
 80051fc:	40000400 	.word	0x40000400
 8005200:	40000800 	.word	0x40000800
 8005204:	40000c00 	.word	0x40000c00
 8005208:	40010400 	.word	0x40010400
 800520c:	40014000 	.word	0x40014000
 8005210:	40001800 	.word	0x40001800
 8005214:	00010007 	.word	0x00010007

08005218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b02      	cmp	r3, #2
 800522c:	d122      	bne.n	8005274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b02      	cmp	r3, #2
 800523a:	d11b      	bne.n	8005274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0202 	mvn.w	r2, #2
 8005244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f9cc 	bl	80055f8 <HAL_TIM_IC_CaptureCallback>
 8005260:	e005      	b.n	800526e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f9be 	bl	80055e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f9cf 	bl	800560c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	2b04      	cmp	r3, #4
 8005280:	d122      	bne.n	80052c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b04      	cmp	r3, #4
 800528e:	d11b      	bne.n	80052c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0204 	mvn.w	r2, #4
 8005298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2202      	movs	r2, #2
 800529e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f9a2 	bl	80055f8 <HAL_TIM_IC_CaptureCallback>
 80052b4:	e005      	b.n	80052c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f994 	bl	80055e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f9a5 	bl	800560c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d122      	bne.n	800531c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d11b      	bne.n	800531c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0208 	mvn.w	r2, #8
 80052ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2204      	movs	r2, #4
 80052f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f978 	bl	80055f8 <HAL_TIM_IC_CaptureCallback>
 8005308:	e005      	b.n	8005316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f96a 	bl	80055e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f97b 	bl	800560c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	2b10      	cmp	r3, #16
 8005328:	d122      	bne.n	8005370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b10      	cmp	r3, #16
 8005336:	d11b      	bne.n	8005370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0210 	mvn.w	r2, #16
 8005340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2208      	movs	r2, #8
 8005346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f94e 	bl	80055f8 <HAL_TIM_IC_CaptureCallback>
 800535c:	e005      	b.n	800536a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f940 	bl	80055e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f951 	bl	800560c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b01      	cmp	r3, #1
 800537c:	d10e      	bne.n	800539c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b01      	cmp	r3, #1
 800538a:	d107      	bne.n	800539c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0201 	mvn.w	r2, #1
 8005394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fc f9fc 	bl	8001794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a6:	2b80      	cmp	r3, #128	; 0x80
 80053a8:	d10e      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b4:	2b80      	cmp	r3, #128	; 0x80
 80053b6:	d107      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fa7a 	bl	80058bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d6:	d10e      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e2:	2b80      	cmp	r3, #128	; 0x80
 80053e4:	d107      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fa6d 	bl	80058d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005400:	2b40      	cmp	r3, #64	; 0x40
 8005402:	d10e      	bne.n	8005422 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b40      	cmp	r3, #64	; 0x40
 8005410:	d107      	bne.n	8005422 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800541a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f8ff 	bl	8005620 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b20      	cmp	r3, #32
 800542e:	d10e      	bne.n	800544e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b20      	cmp	r3, #32
 800543c:	d107      	bne.n	800544e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f06f 0220 	mvn.w	r2, #32
 8005446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fa2d 	bl	80058a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800544e:	bf00      	nop
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_TIM_ConfigClockSource+0x18>
 800546c:	2302      	movs	r3, #2
 800546e:	e0b3      	b.n	80055d8 <HAL_TIM_ConfigClockSource+0x180>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4b55      	ldr	r3, [pc, #340]	; (80055e0 <HAL_TIM_ConfigClockSource+0x188>)
 800548c:	4013      	ands	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005496:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054a8:	d03e      	beq.n	8005528 <HAL_TIM_ConfigClockSource+0xd0>
 80054aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ae:	f200 8087 	bhi.w	80055c0 <HAL_TIM_ConfigClockSource+0x168>
 80054b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b6:	f000 8085 	beq.w	80055c4 <HAL_TIM_ConfigClockSource+0x16c>
 80054ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054be:	d87f      	bhi.n	80055c0 <HAL_TIM_ConfigClockSource+0x168>
 80054c0:	2b70      	cmp	r3, #112	; 0x70
 80054c2:	d01a      	beq.n	80054fa <HAL_TIM_ConfigClockSource+0xa2>
 80054c4:	2b70      	cmp	r3, #112	; 0x70
 80054c6:	d87b      	bhi.n	80055c0 <HAL_TIM_ConfigClockSource+0x168>
 80054c8:	2b60      	cmp	r3, #96	; 0x60
 80054ca:	d050      	beq.n	800556e <HAL_TIM_ConfigClockSource+0x116>
 80054cc:	2b60      	cmp	r3, #96	; 0x60
 80054ce:	d877      	bhi.n	80055c0 <HAL_TIM_ConfigClockSource+0x168>
 80054d0:	2b50      	cmp	r3, #80	; 0x50
 80054d2:	d03c      	beq.n	800554e <HAL_TIM_ConfigClockSource+0xf6>
 80054d4:	2b50      	cmp	r3, #80	; 0x50
 80054d6:	d873      	bhi.n	80055c0 <HAL_TIM_ConfigClockSource+0x168>
 80054d8:	2b40      	cmp	r3, #64	; 0x40
 80054da:	d058      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x136>
 80054dc:	2b40      	cmp	r3, #64	; 0x40
 80054de:	d86f      	bhi.n	80055c0 <HAL_TIM_ConfigClockSource+0x168>
 80054e0:	2b30      	cmp	r3, #48	; 0x30
 80054e2:	d064      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0x156>
 80054e4:	2b30      	cmp	r3, #48	; 0x30
 80054e6:	d86b      	bhi.n	80055c0 <HAL_TIM_ConfigClockSource+0x168>
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	d060      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0x156>
 80054ec:	2b20      	cmp	r3, #32
 80054ee:	d867      	bhi.n	80055c0 <HAL_TIM_ConfigClockSource+0x168>
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d05c      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0x156>
 80054f4:	2b10      	cmp	r3, #16
 80054f6:	d05a      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80054f8:	e062      	b.n	80055c0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6818      	ldr	r0, [r3, #0]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	6899      	ldr	r1, [r3, #8]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f000 f9ad 	bl	8005868 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800551c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	609a      	str	r2, [r3, #8]
      break;
 8005526:	e04e      	b.n	80055c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6818      	ldr	r0, [r3, #0]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	6899      	ldr	r1, [r3, #8]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f000 f996 	bl	8005868 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800554a:	609a      	str	r2, [r3, #8]
      break;
 800554c:	e03b      	b.n	80055c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6859      	ldr	r1, [r3, #4]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	461a      	mov	r2, r3
 800555c:	f000 f90a 	bl	8005774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2150      	movs	r1, #80	; 0x50
 8005566:	4618      	mov	r0, r3
 8005568:	f000 f963 	bl	8005832 <TIM_ITRx_SetConfig>
      break;
 800556c:	e02b      	b.n	80055c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	6859      	ldr	r1, [r3, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	461a      	mov	r2, r3
 800557c:	f000 f929 	bl	80057d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2160      	movs	r1, #96	; 0x60
 8005586:	4618      	mov	r0, r3
 8005588:	f000 f953 	bl	8005832 <TIM_ITRx_SetConfig>
      break;
 800558c:	e01b      	b.n	80055c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6859      	ldr	r1, [r3, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	461a      	mov	r2, r3
 800559c:	f000 f8ea 	bl	8005774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2140      	movs	r1, #64	; 0x40
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 f943 	bl	8005832 <TIM_ITRx_SetConfig>
      break;
 80055ac:	e00b      	b.n	80055c6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4619      	mov	r1, r3
 80055b8:	4610      	mov	r0, r2
 80055ba:	f000 f93a 	bl	8005832 <TIM_ITRx_SetConfig>
        break;
 80055be:	e002      	b.n	80055c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055c0:	bf00      	nop
 80055c2:	e000      	b.n	80055c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	fffeff88 	.word	0xfffeff88

080055e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a40      	ldr	r2, [pc, #256]	; (8005748 <TIM_Base_SetConfig+0x114>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d013      	beq.n	8005674 <TIM_Base_SetConfig+0x40>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005652:	d00f      	beq.n	8005674 <TIM_Base_SetConfig+0x40>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a3d      	ldr	r2, [pc, #244]	; (800574c <TIM_Base_SetConfig+0x118>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00b      	beq.n	8005674 <TIM_Base_SetConfig+0x40>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a3c      	ldr	r2, [pc, #240]	; (8005750 <TIM_Base_SetConfig+0x11c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d007      	beq.n	8005674 <TIM_Base_SetConfig+0x40>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a3b      	ldr	r2, [pc, #236]	; (8005754 <TIM_Base_SetConfig+0x120>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_Base_SetConfig+0x40>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a3a      	ldr	r2, [pc, #232]	; (8005758 <TIM_Base_SetConfig+0x124>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d108      	bne.n	8005686 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a2f      	ldr	r2, [pc, #188]	; (8005748 <TIM_Base_SetConfig+0x114>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d02b      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005694:	d027      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a2c      	ldr	r2, [pc, #176]	; (800574c <TIM_Base_SetConfig+0x118>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d023      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a2b      	ldr	r2, [pc, #172]	; (8005750 <TIM_Base_SetConfig+0x11c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d01f      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a2a      	ldr	r2, [pc, #168]	; (8005754 <TIM_Base_SetConfig+0x120>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d01b      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a29      	ldr	r2, [pc, #164]	; (8005758 <TIM_Base_SetConfig+0x124>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d017      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a28      	ldr	r2, [pc, #160]	; (800575c <TIM_Base_SetConfig+0x128>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d013      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a27      	ldr	r2, [pc, #156]	; (8005760 <TIM_Base_SetConfig+0x12c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00f      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a26      	ldr	r2, [pc, #152]	; (8005764 <TIM_Base_SetConfig+0x130>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00b      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a25      	ldr	r2, [pc, #148]	; (8005768 <TIM_Base_SetConfig+0x134>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d007      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a24      	ldr	r2, [pc, #144]	; (800576c <TIM_Base_SetConfig+0x138>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d003      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a23      	ldr	r2, [pc, #140]	; (8005770 <TIM_Base_SetConfig+0x13c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d108      	bne.n	80056f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a0a      	ldr	r2, [pc, #40]	; (8005748 <TIM_Base_SetConfig+0x114>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d003      	beq.n	800572c <TIM_Base_SetConfig+0xf8>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a0c      	ldr	r2, [pc, #48]	; (8005758 <TIM_Base_SetConfig+0x124>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d103      	bne.n	8005734 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	615a      	str	r2, [r3, #20]
}
 800573a:	bf00      	nop
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40010000 	.word	0x40010000
 800574c:	40000400 	.word	0x40000400
 8005750:	40000800 	.word	0x40000800
 8005754:	40000c00 	.word	0x40000c00
 8005758:	40010400 	.word	0x40010400
 800575c:	40014000 	.word	0x40014000
 8005760:	40014400 	.word	0x40014400
 8005764:	40014800 	.word	0x40014800
 8005768:	40001800 	.word	0x40001800
 800576c:	40001c00 	.word	0x40001c00
 8005770:	40002000 	.word	0x40002000

08005774 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	f023 0201 	bic.w	r2, r3, #1
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800579e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f023 030a 	bic.w	r3, r3, #10
 80057b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	621a      	str	r2, [r3, #32]
}
 80057c6:	bf00      	nop
 80057c8:	371c      	adds	r7, #28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b087      	sub	sp, #28
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f023 0210 	bic.w	r2, r3, #16
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	031b      	lsls	r3, r3, #12
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4313      	orrs	r3, r2
 8005806:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800580e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005832:	b480      	push	{r7}
 8005834:	b085      	sub	sp, #20
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005848:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	f043 0307 	orr.w	r3, r3, #7
 8005854:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	609a      	str	r2, [r3, #8]
}
 800585c:	bf00      	nop
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005882:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	021a      	lsls	r2, r3, #8
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	431a      	orrs	r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	4313      	orrs	r3, r2
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	609a      	str	r2, [r3, #8]
}
 800589c:	bf00      	nop
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e040      	b.n	8005978 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fc f846 	bl	8001998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2224      	movs	r2, #36	; 0x24
 8005910:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0201 	bic.w	r2, r2, #1
 8005920:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f8c0 	bl	8005aa8 <UART_SetConfig>
 8005928:	4603      	mov	r3, r0
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e022      	b.n	8005978 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fb16 	bl	8005f6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800594e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800595e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0201 	orr.w	r2, r2, #1
 800596e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fb9d 	bl	80060b0 <UART_CheckIdleState>
 8005976:	4603      	mov	r3, r0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b08a      	sub	sp, #40	; 0x28
 8005984:	af02      	add	r7, sp, #8
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	603b      	str	r3, [r7, #0]
 800598c:	4613      	mov	r3, r2
 800598e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005994:	2b20      	cmp	r3, #32
 8005996:	f040 8081 	bne.w	8005a9c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <HAL_UART_Transmit+0x26>
 80059a0:	88fb      	ldrh	r3, [r7, #6]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e079      	b.n	8005a9e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_UART_Transmit+0x38>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e072      	b.n	8005a9e <HAL_UART_Transmit+0x11e>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2221      	movs	r2, #33	; 0x21
 80059cc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059ce:	f7fc f9b5 	bl	8001d3c <HAL_GetTick>
 80059d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	88fa      	ldrh	r2, [r7, #6]
 80059d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	88fa      	ldrh	r2, [r7, #6]
 80059e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ec:	d108      	bne.n	8005a00 <HAL_UART_Transmit+0x80>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d104      	bne.n	8005a00 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80059f6:	2300      	movs	r3, #0
 80059f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	61bb      	str	r3, [r7, #24]
 80059fe:	e003      	b.n	8005a08 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a04:	2300      	movs	r3, #0
 8005a06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005a10:	e02c      	b.n	8005a6c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2180      	movs	r1, #128	; 0x80
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 fb7a 	bl	8006116 <UART_WaitOnFlagUntilTimeout>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e038      	b.n	8005a9e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10b      	bne.n	8005a4a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	461a      	mov	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	3302      	adds	r3, #2
 8005a46:	61bb      	str	r3, [r7, #24]
 8005a48:	e007      	b.n	8005a5a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	781a      	ldrb	r2, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	3301      	adds	r3, #1
 8005a58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	3b01      	subs	r3, #1
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1cc      	bne.n	8005a12 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	2140      	movs	r1, #64	; 0x40
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 fb47 	bl	8006116 <UART_WaitOnFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e005      	b.n	8005a9e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2220      	movs	r2, #32
 8005a96:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	e000      	b.n	8005a9e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005a9c:	2302      	movs	r3, #2
  }
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3720      	adds	r7, #32
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	431a      	orrs	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	4ba7      	ldr	r3, [pc, #668]	; (8005d70 <UART_SetConfig+0x2c8>)
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6812      	ldr	r2, [r2, #0]
 8005ada:	6979      	ldr	r1, [r7, #20]
 8005adc:	430b      	orrs	r3, r1
 8005ade:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a95      	ldr	r2, [pc, #596]	; (8005d74 <UART_SetConfig+0x2cc>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d120      	bne.n	8005b66 <UART_SetConfig+0xbe>
 8005b24:	4b94      	ldr	r3, [pc, #592]	; (8005d78 <UART_SetConfig+0x2d0>)
 8005b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d816      	bhi.n	8005b60 <UART_SetConfig+0xb8>
 8005b32:	a201      	add	r2, pc, #4	; (adr r2, 8005b38 <UART_SetConfig+0x90>)
 8005b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b38:	08005b49 	.word	0x08005b49
 8005b3c:	08005b55 	.word	0x08005b55
 8005b40:	08005b4f 	.word	0x08005b4f
 8005b44:	08005b5b 	.word	0x08005b5b
 8005b48:	2301      	movs	r3, #1
 8005b4a:	77fb      	strb	r3, [r7, #31]
 8005b4c:	e14f      	b.n	8005dee <UART_SetConfig+0x346>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	77fb      	strb	r3, [r7, #31]
 8005b52:	e14c      	b.n	8005dee <UART_SetConfig+0x346>
 8005b54:	2304      	movs	r3, #4
 8005b56:	77fb      	strb	r3, [r7, #31]
 8005b58:	e149      	b.n	8005dee <UART_SetConfig+0x346>
 8005b5a:	2308      	movs	r3, #8
 8005b5c:	77fb      	strb	r3, [r7, #31]
 8005b5e:	e146      	b.n	8005dee <UART_SetConfig+0x346>
 8005b60:	2310      	movs	r3, #16
 8005b62:	77fb      	strb	r3, [r7, #31]
 8005b64:	e143      	b.n	8005dee <UART_SetConfig+0x346>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a84      	ldr	r2, [pc, #528]	; (8005d7c <UART_SetConfig+0x2d4>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d132      	bne.n	8005bd6 <UART_SetConfig+0x12e>
 8005b70:	4b81      	ldr	r3, [pc, #516]	; (8005d78 <UART_SetConfig+0x2d0>)
 8005b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b76:	f003 030c 	and.w	r3, r3, #12
 8005b7a:	2b0c      	cmp	r3, #12
 8005b7c:	d828      	bhi.n	8005bd0 <UART_SetConfig+0x128>
 8005b7e:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <UART_SetConfig+0xdc>)
 8005b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b84:	08005bb9 	.word	0x08005bb9
 8005b88:	08005bd1 	.word	0x08005bd1
 8005b8c:	08005bd1 	.word	0x08005bd1
 8005b90:	08005bd1 	.word	0x08005bd1
 8005b94:	08005bc5 	.word	0x08005bc5
 8005b98:	08005bd1 	.word	0x08005bd1
 8005b9c:	08005bd1 	.word	0x08005bd1
 8005ba0:	08005bd1 	.word	0x08005bd1
 8005ba4:	08005bbf 	.word	0x08005bbf
 8005ba8:	08005bd1 	.word	0x08005bd1
 8005bac:	08005bd1 	.word	0x08005bd1
 8005bb0:	08005bd1 	.word	0x08005bd1
 8005bb4:	08005bcb 	.word	0x08005bcb
 8005bb8:	2300      	movs	r3, #0
 8005bba:	77fb      	strb	r3, [r7, #31]
 8005bbc:	e117      	b.n	8005dee <UART_SetConfig+0x346>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	77fb      	strb	r3, [r7, #31]
 8005bc2:	e114      	b.n	8005dee <UART_SetConfig+0x346>
 8005bc4:	2304      	movs	r3, #4
 8005bc6:	77fb      	strb	r3, [r7, #31]
 8005bc8:	e111      	b.n	8005dee <UART_SetConfig+0x346>
 8005bca:	2308      	movs	r3, #8
 8005bcc:	77fb      	strb	r3, [r7, #31]
 8005bce:	e10e      	b.n	8005dee <UART_SetConfig+0x346>
 8005bd0:	2310      	movs	r3, #16
 8005bd2:	77fb      	strb	r3, [r7, #31]
 8005bd4:	e10b      	b.n	8005dee <UART_SetConfig+0x346>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a69      	ldr	r2, [pc, #420]	; (8005d80 <UART_SetConfig+0x2d8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d120      	bne.n	8005c22 <UART_SetConfig+0x17a>
 8005be0:	4b65      	ldr	r3, [pc, #404]	; (8005d78 <UART_SetConfig+0x2d0>)
 8005be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bea:	2b30      	cmp	r3, #48	; 0x30
 8005bec:	d013      	beq.n	8005c16 <UART_SetConfig+0x16e>
 8005bee:	2b30      	cmp	r3, #48	; 0x30
 8005bf0:	d814      	bhi.n	8005c1c <UART_SetConfig+0x174>
 8005bf2:	2b20      	cmp	r3, #32
 8005bf4:	d009      	beq.n	8005c0a <UART_SetConfig+0x162>
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	d810      	bhi.n	8005c1c <UART_SetConfig+0x174>
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <UART_SetConfig+0x15c>
 8005bfe:	2b10      	cmp	r3, #16
 8005c00:	d006      	beq.n	8005c10 <UART_SetConfig+0x168>
 8005c02:	e00b      	b.n	8005c1c <UART_SetConfig+0x174>
 8005c04:	2300      	movs	r3, #0
 8005c06:	77fb      	strb	r3, [r7, #31]
 8005c08:	e0f1      	b.n	8005dee <UART_SetConfig+0x346>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	77fb      	strb	r3, [r7, #31]
 8005c0e:	e0ee      	b.n	8005dee <UART_SetConfig+0x346>
 8005c10:	2304      	movs	r3, #4
 8005c12:	77fb      	strb	r3, [r7, #31]
 8005c14:	e0eb      	b.n	8005dee <UART_SetConfig+0x346>
 8005c16:	2308      	movs	r3, #8
 8005c18:	77fb      	strb	r3, [r7, #31]
 8005c1a:	e0e8      	b.n	8005dee <UART_SetConfig+0x346>
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	77fb      	strb	r3, [r7, #31]
 8005c20:	e0e5      	b.n	8005dee <UART_SetConfig+0x346>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a57      	ldr	r2, [pc, #348]	; (8005d84 <UART_SetConfig+0x2dc>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d120      	bne.n	8005c6e <UART_SetConfig+0x1c6>
 8005c2c:	4b52      	ldr	r3, [pc, #328]	; (8005d78 <UART_SetConfig+0x2d0>)
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c36:	2bc0      	cmp	r3, #192	; 0xc0
 8005c38:	d013      	beq.n	8005c62 <UART_SetConfig+0x1ba>
 8005c3a:	2bc0      	cmp	r3, #192	; 0xc0
 8005c3c:	d814      	bhi.n	8005c68 <UART_SetConfig+0x1c0>
 8005c3e:	2b80      	cmp	r3, #128	; 0x80
 8005c40:	d009      	beq.n	8005c56 <UART_SetConfig+0x1ae>
 8005c42:	2b80      	cmp	r3, #128	; 0x80
 8005c44:	d810      	bhi.n	8005c68 <UART_SetConfig+0x1c0>
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <UART_SetConfig+0x1a8>
 8005c4a:	2b40      	cmp	r3, #64	; 0x40
 8005c4c:	d006      	beq.n	8005c5c <UART_SetConfig+0x1b4>
 8005c4e:	e00b      	b.n	8005c68 <UART_SetConfig+0x1c0>
 8005c50:	2300      	movs	r3, #0
 8005c52:	77fb      	strb	r3, [r7, #31]
 8005c54:	e0cb      	b.n	8005dee <UART_SetConfig+0x346>
 8005c56:	2302      	movs	r3, #2
 8005c58:	77fb      	strb	r3, [r7, #31]
 8005c5a:	e0c8      	b.n	8005dee <UART_SetConfig+0x346>
 8005c5c:	2304      	movs	r3, #4
 8005c5e:	77fb      	strb	r3, [r7, #31]
 8005c60:	e0c5      	b.n	8005dee <UART_SetConfig+0x346>
 8005c62:	2308      	movs	r3, #8
 8005c64:	77fb      	strb	r3, [r7, #31]
 8005c66:	e0c2      	b.n	8005dee <UART_SetConfig+0x346>
 8005c68:	2310      	movs	r3, #16
 8005c6a:	77fb      	strb	r3, [r7, #31]
 8005c6c:	e0bf      	b.n	8005dee <UART_SetConfig+0x346>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a45      	ldr	r2, [pc, #276]	; (8005d88 <UART_SetConfig+0x2e0>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d125      	bne.n	8005cc4 <UART_SetConfig+0x21c>
 8005c78:	4b3f      	ldr	r3, [pc, #252]	; (8005d78 <UART_SetConfig+0x2d0>)
 8005c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c86:	d017      	beq.n	8005cb8 <UART_SetConfig+0x210>
 8005c88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c8c:	d817      	bhi.n	8005cbe <UART_SetConfig+0x216>
 8005c8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c92:	d00b      	beq.n	8005cac <UART_SetConfig+0x204>
 8005c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c98:	d811      	bhi.n	8005cbe <UART_SetConfig+0x216>
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <UART_SetConfig+0x1fe>
 8005c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca2:	d006      	beq.n	8005cb2 <UART_SetConfig+0x20a>
 8005ca4:	e00b      	b.n	8005cbe <UART_SetConfig+0x216>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	77fb      	strb	r3, [r7, #31]
 8005caa:	e0a0      	b.n	8005dee <UART_SetConfig+0x346>
 8005cac:	2302      	movs	r3, #2
 8005cae:	77fb      	strb	r3, [r7, #31]
 8005cb0:	e09d      	b.n	8005dee <UART_SetConfig+0x346>
 8005cb2:	2304      	movs	r3, #4
 8005cb4:	77fb      	strb	r3, [r7, #31]
 8005cb6:	e09a      	b.n	8005dee <UART_SetConfig+0x346>
 8005cb8:	2308      	movs	r3, #8
 8005cba:	77fb      	strb	r3, [r7, #31]
 8005cbc:	e097      	b.n	8005dee <UART_SetConfig+0x346>
 8005cbe:	2310      	movs	r3, #16
 8005cc0:	77fb      	strb	r3, [r7, #31]
 8005cc2:	e094      	b.n	8005dee <UART_SetConfig+0x346>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a30      	ldr	r2, [pc, #192]	; (8005d8c <UART_SetConfig+0x2e4>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d125      	bne.n	8005d1a <UART_SetConfig+0x272>
 8005cce:	4b2a      	ldr	r3, [pc, #168]	; (8005d78 <UART_SetConfig+0x2d0>)
 8005cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cdc:	d017      	beq.n	8005d0e <UART_SetConfig+0x266>
 8005cde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ce2:	d817      	bhi.n	8005d14 <UART_SetConfig+0x26c>
 8005ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ce8:	d00b      	beq.n	8005d02 <UART_SetConfig+0x25a>
 8005cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cee:	d811      	bhi.n	8005d14 <UART_SetConfig+0x26c>
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <UART_SetConfig+0x254>
 8005cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf8:	d006      	beq.n	8005d08 <UART_SetConfig+0x260>
 8005cfa:	e00b      	b.n	8005d14 <UART_SetConfig+0x26c>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	77fb      	strb	r3, [r7, #31]
 8005d00:	e075      	b.n	8005dee <UART_SetConfig+0x346>
 8005d02:	2302      	movs	r3, #2
 8005d04:	77fb      	strb	r3, [r7, #31]
 8005d06:	e072      	b.n	8005dee <UART_SetConfig+0x346>
 8005d08:	2304      	movs	r3, #4
 8005d0a:	77fb      	strb	r3, [r7, #31]
 8005d0c:	e06f      	b.n	8005dee <UART_SetConfig+0x346>
 8005d0e:	2308      	movs	r3, #8
 8005d10:	77fb      	strb	r3, [r7, #31]
 8005d12:	e06c      	b.n	8005dee <UART_SetConfig+0x346>
 8005d14:	2310      	movs	r3, #16
 8005d16:	77fb      	strb	r3, [r7, #31]
 8005d18:	e069      	b.n	8005dee <UART_SetConfig+0x346>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1c      	ldr	r2, [pc, #112]	; (8005d90 <UART_SetConfig+0x2e8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d137      	bne.n	8005d94 <UART_SetConfig+0x2ec>
 8005d24:	4b14      	ldr	r3, [pc, #80]	; (8005d78 <UART_SetConfig+0x2d0>)
 8005d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d32:	d017      	beq.n	8005d64 <UART_SetConfig+0x2bc>
 8005d34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d38:	d817      	bhi.n	8005d6a <UART_SetConfig+0x2c2>
 8005d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d3e:	d00b      	beq.n	8005d58 <UART_SetConfig+0x2b0>
 8005d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d44:	d811      	bhi.n	8005d6a <UART_SetConfig+0x2c2>
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <UART_SetConfig+0x2aa>
 8005d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d4e:	d006      	beq.n	8005d5e <UART_SetConfig+0x2b6>
 8005d50:	e00b      	b.n	8005d6a <UART_SetConfig+0x2c2>
 8005d52:	2300      	movs	r3, #0
 8005d54:	77fb      	strb	r3, [r7, #31]
 8005d56:	e04a      	b.n	8005dee <UART_SetConfig+0x346>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	77fb      	strb	r3, [r7, #31]
 8005d5c:	e047      	b.n	8005dee <UART_SetConfig+0x346>
 8005d5e:	2304      	movs	r3, #4
 8005d60:	77fb      	strb	r3, [r7, #31]
 8005d62:	e044      	b.n	8005dee <UART_SetConfig+0x346>
 8005d64:	2308      	movs	r3, #8
 8005d66:	77fb      	strb	r3, [r7, #31]
 8005d68:	e041      	b.n	8005dee <UART_SetConfig+0x346>
 8005d6a:	2310      	movs	r3, #16
 8005d6c:	77fb      	strb	r3, [r7, #31]
 8005d6e:	e03e      	b.n	8005dee <UART_SetConfig+0x346>
 8005d70:	efff69f3 	.word	0xefff69f3
 8005d74:	40011000 	.word	0x40011000
 8005d78:	40023800 	.word	0x40023800
 8005d7c:	40004400 	.word	0x40004400
 8005d80:	40004800 	.word	0x40004800
 8005d84:	40004c00 	.word	0x40004c00
 8005d88:	40005000 	.word	0x40005000
 8005d8c:	40011400 	.word	0x40011400
 8005d90:	40007800 	.word	0x40007800
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a71      	ldr	r2, [pc, #452]	; (8005f60 <UART_SetConfig+0x4b8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d125      	bne.n	8005dea <UART_SetConfig+0x342>
 8005d9e:	4b71      	ldr	r3, [pc, #452]	; (8005f64 <UART_SetConfig+0x4bc>)
 8005da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005da8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005dac:	d017      	beq.n	8005dde <UART_SetConfig+0x336>
 8005dae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005db2:	d817      	bhi.n	8005de4 <UART_SetConfig+0x33c>
 8005db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db8:	d00b      	beq.n	8005dd2 <UART_SetConfig+0x32a>
 8005dba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dbe:	d811      	bhi.n	8005de4 <UART_SetConfig+0x33c>
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <UART_SetConfig+0x324>
 8005dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dc8:	d006      	beq.n	8005dd8 <UART_SetConfig+0x330>
 8005dca:	e00b      	b.n	8005de4 <UART_SetConfig+0x33c>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	77fb      	strb	r3, [r7, #31]
 8005dd0:	e00d      	b.n	8005dee <UART_SetConfig+0x346>
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	77fb      	strb	r3, [r7, #31]
 8005dd6:	e00a      	b.n	8005dee <UART_SetConfig+0x346>
 8005dd8:	2304      	movs	r3, #4
 8005dda:	77fb      	strb	r3, [r7, #31]
 8005ddc:	e007      	b.n	8005dee <UART_SetConfig+0x346>
 8005dde:	2308      	movs	r3, #8
 8005de0:	77fb      	strb	r3, [r7, #31]
 8005de2:	e004      	b.n	8005dee <UART_SetConfig+0x346>
 8005de4:	2310      	movs	r3, #16
 8005de6:	77fb      	strb	r3, [r7, #31]
 8005de8:	e001      	b.n	8005dee <UART_SetConfig+0x346>
 8005dea:	2310      	movs	r3, #16
 8005dec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df6:	d15b      	bne.n	8005eb0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005df8:	7ffb      	ldrb	r3, [r7, #31]
 8005dfa:	2b08      	cmp	r3, #8
 8005dfc:	d827      	bhi.n	8005e4e <UART_SetConfig+0x3a6>
 8005dfe:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <UART_SetConfig+0x35c>)
 8005e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e04:	08005e29 	.word	0x08005e29
 8005e08:	08005e31 	.word	0x08005e31
 8005e0c:	08005e39 	.word	0x08005e39
 8005e10:	08005e4f 	.word	0x08005e4f
 8005e14:	08005e3f 	.word	0x08005e3f
 8005e18:	08005e4f 	.word	0x08005e4f
 8005e1c:	08005e4f 	.word	0x08005e4f
 8005e20:	08005e4f 	.word	0x08005e4f
 8005e24:	08005e47 	.word	0x08005e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e28:	f7fe fc6c 	bl	8004704 <HAL_RCC_GetPCLK1Freq>
 8005e2c:	61b8      	str	r0, [r7, #24]
        break;
 8005e2e:	e013      	b.n	8005e58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e30:	f7fe fc7c 	bl	800472c <HAL_RCC_GetPCLK2Freq>
 8005e34:	61b8      	str	r0, [r7, #24]
        break;
 8005e36:	e00f      	b.n	8005e58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e38:	4b4b      	ldr	r3, [pc, #300]	; (8005f68 <UART_SetConfig+0x4c0>)
 8005e3a:	61bb      	str	r3, [r7, #24]
        break;
 8005e3c:	e00c      	b.n	8005e58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e3e:	f7fe fb9f 	bl	8004580 <HAL_RCC_GetSysClockFreq>
 8005e42:	61b8      	str	r0, [r7, #24]
        break;
 8005e44:	e008      	b.n	8005e58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e4a:	61bb      	str	r3, [r7, #24]
        break;
 8005e4c:	e004      	b.n	8005e58 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	77bb      	strb	r3, [r7, #30]
        break;
 8005e56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d074      	beq.n	8005f48 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	005a      	lsls	r2, r3, #1
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	085b      	lsrs	r3, r3, #1
 8005e68:	441a      	add	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	2b0f      	cmp	r3, #15
 8005e7a:	d916      	bls.n	8005eaa <UART_SetConfig+0x402>
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e82:	d212      	bcs.n	8005eaa <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f023 030f 	bic.w	r3, r3, #15
 8005e8c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	085b      	lsrs	r3, r3, #1
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f003 0307 	and.w	r3, r3, #7
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	89fb      	ldrh	r3, [r7, #14]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	89fa      	ldrh	r2, [r7, #14]
 8005ea6:	60da      	str	r2, [r3, #12]
 8005ea8:	e04e      	b.n	8005f48 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	77bb      	strb	r3, [r7, #30]
 8005eae:	e04b      	b.n	8005f48 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005eb0:	7ffb      	ldrb	r3, [r7, #31]
 8005eb2:	2b08      	cmp	r3, #8
 8005eb4:	d827      	bhi.n	8005f06 <UART_SetConfig+0x45e>
 8005eb6:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <UART_SetConfig+0x414>)
 8005eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebc:	08005ee1 	.word	0x08005ee1
 8005ec0:	08005ee9 	.word	0x08005ee9
 8005ec4:	08005ef1 	.word	0x08005ef1
 8005ec8:	08005f07 	.word	0x08005f07
 8005ecc:	08005ef7 	.word	0x08005ef7
 8005ed0:	08005f07 	.word	0x08005f07
 8005ed4:	08005f07 	.word	0x08005f07
 8005ed8:	08005f07 	.word	0x08005f07
 8005edc:	08005eff 	.word	0x08005eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ee0:	f7fe fc10 	bl	8004704 <HAL_RCC_GetPCLK1Freq>
 8005ee4:	61b8      	str	r0, [r7, #24]
        break;
 8005ee6:	e013      	b.n	8005f10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ee8:	f7fe fc20 	bl	800472c <HAL_RCC_GetPCLK2Freq>
 8005eec:	61b8      	str	r0, [r7, #24]
        break;
 8005eee:	e00f      	b.n	8005f10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ef0:	4b1d      	ldr	r3, [pc, #116]	; (8005f68 <UART_SetConfig+0x4c0>)
 8005ef2:	61bb      	str	r3, [r7, #24]
        break;
 8005ef4:	e00c      	b.n	8005f10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ef6:	f7fe fb43 	bl	8004580 <HAL_RCC_GetSysClockFreq>
 8005efa:	61b8      	str	r0, [r7, #24]
        break;
 8005efc:	e008      	b.n	8005f10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f02:	61bb      	str	r3, [r7, #24]
        break;
 8005f04:	e004      	b.n	8005f10 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	77bb      	strb	r3, [r7, #30]
        break;
 8005f0e:	bf00      	nop
    }

    if (pclk != 0U)
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d018      	beq.n	8005f48 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	085a      	lsrs	r2, r3, #1
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	441a      	add	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	2b0f      	cmp	r3, #15
 8005f30:	d908      	bls.n	8005f44 <UART_SetConfig+0x49c>
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f38:	d204      	bcs.n	8005f44 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	60da      	str	r2, [r3, #12]
 8005f42:	e001      	b.n	8005f48 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f54:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3720      	adds	r7, #32
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	40007c00 	.word	0x40007c00
 8005f64:	40023800 	.word	0x40023800
 8005f68:	00f42400 	.word	0x00f42400

08005f6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00a      	beq.n	8005f96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00a      	beq.n	8005fda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	f003 0308 	and.w	r3, r3, #8
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	f003 0310 	and.w	r3, r3, #16
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00a      	beq.n	800601e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	f003 0320 	and.w	r3, r3, #32
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00a      	beq.n	8006040 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006048:	2b00      	cmp	r3, #0
 800604a:	d01a      	beq.n	8006082 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800606a:	d10a      	bne.n	8006082 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	605a      	str	r2, [r3, #4]
  }
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af02      	add	r7, sp, #8
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060c0:	f7fb fe3c 	bl	8001d3c <HAL_GetTick>
 80060c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0308 	and.w	r3, r3, #8
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d10e      	bne.n	80060f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f817 	bl	8006116 <UART_WaitOnFlagUntilTimeout>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e00d      	b.n	800610e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2220      	movs	r2, #32
 80060f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b084      	sub	sp, #16
 800611a:	af00      	add	r7, sp, #0
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	60b9      	str	r1, [r7, #8]
 8006120:	603b      	str	r3, [r7, #0]
 8006122:	4613      	mov	r3, r2
 8006124:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006126:	e05e      	b.n	80061e6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800612e:	d05a      	beq.n	80061e6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006130:	f7fb fe04 	bl	8001d3c <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	429a      	cmp	r2, r3
 800613e:	d302      	bcc.n	8006146 <UART_WaitOnFlagUntilTimeout+0x30>
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d11b      	bne.n	800617e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006154:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 0201 	bic.w	r2, r2, #1
 8006164:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2220      	movs	r2, #32
 800616a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2220      	movs	r2, #32
 8006170:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e043      	b.n	8006206 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b00      	cmp	r3, #0
 800618a:	d02c      	beq.n	80061e6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800619a:	d124      	bne.n	80061e6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061b4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 0201 	bic.w	r2, r2, #1
 80061c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2220      	movs	r2, #32
 80061ca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2220      	movs	r2, #32
 80061d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e00f      	b.n	8006206 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69da      	ldr	r2, [r3, #28]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	4013      	ands	r3, r2
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	bf0c      	ite	eq
 80061f6:	2301      	moveq	r3, #1
 80061f8:	2300      	movne	r3, #0
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	461a      	mov	r2, r3
 80061fe:	79fb      	ldrb	r3, [r7, #7]
 8006200:	429a      	cmp	r2, r3
 8006202:	d091      	beq.n	8006128 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f043 0201 	orr.w	r2, r3, #1
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f023 0201 	bic.w	r2, r3, #1
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
	...

08006254 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	019b      	lsls	r3, r3, #6
 8006266:	f043 0220 	orr.w	r2, r3, #32
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3301      	adds	r3, #1
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4a09      	ldr	r2, [pc, #36]	; (800629c <USB_FlushTxFifo+0x48>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d901      	bls.n	8006280 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e006      	b.n	800628e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	f003 0320 	and.w	r3, r3, #32
 8006288:	2b20      	cmp	r3, #32
 800628a:	d0f0      	beq.n	800626e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	00030d40 	.word	0x00030d40

080062a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80062a8:	2300      	movs	r3, #0
 80062aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2210      	movs	r2, #16
 80062b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3301      	adds	r3, #1
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4a09      	ldr	r2, [pc, #36]	; (80062e0 <USB_FlushRxFifo+0x40>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d901      	bls.n	80062c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e006      	b.n	80062d2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	f003 0310 	and.w	r3, r3, #16
 80062cc:	2b10      	cmp	r3, #16
 80062ce:	d0f0      	beq.n	80062b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	00030d40 	.word	0x00030d40

080062e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b089      	sub	sp, #36	; 0x24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	4613      	mov	r3, r2
 80062f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80062fa:	88fb      	ldrh	r3, [r7, #6]
 80062fc:	3303      	adds	r3, #3
 80062fe:	089b      	lsrs	r3, r3, #2
 8006300:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006302:	2300      	movs	r3, #0
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	e00b      	b.n	8006320 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	601a      	str	r2, [r3, #0]
    pDest++;
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	3304      	adds	r3, #4
 8006318:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	3301      	adds	r3, #1
 800631e:	61bb      	str	r3, [r7, #24]
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	429a      	cmp	r2, r3
 8006326:	d3ef      	bcc.n	8006308 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006328:	69fb      	ldr	r3, [r7, #28]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3724      	adds	r7, #36	; 0x24
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4013      	ands	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800634e:	68fb      	ldr	r3, [r7, #12]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	f003 0301 	and.w	r3, r3, #1
}
 800636c:	4618      	mov	r0, r3
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006396:	f023 0303 	bic.w	r3, r3, #3
 800639a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	78fb      	ldrb	r3, [r7, #3]
 80063a6:	f003 0303 	and.w	r3, r3, #3
 80063aa:	68f9      	ldr	r1, [r7, #12]
 80063ac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80063b0:	4313      	orrs	r3, r2
 80063b2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80063b4:	78fb      	ldrb	r3, [r7, #3]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d107      	bne.n	80063ca <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063c0:	461a      	mov	r2, r3
 80063c2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80063c6:	6053      	str	r3, [r2, #4]
 80063c8:	e009      	b.n	80063de <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80063ca:	78fb      	ldrb	r3, [r7, #3]
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d106      	bne.n	80063de <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063d6:	461a      	mov	r2, r3
 80063d8:	f241 7370 	movw	r3, #6000	; 0x1770
 80063dc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	b29b      	uxth	r3, r3
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800640e:	b480      	push	{r7}
 8006410:	b089      	sub	sp, #36	; 0x24
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	460b      	mov	r3, r1
 8006418:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800641e:	78fb      	ldrb	r3, [r7, #3]
 8006420:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	4413      	add	r3, r2
 800642e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	0c9b      	lsrs	r3, r3, #18
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	4413      	add	r3, r2
 8006444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	0fdb      	lsrs	r3, r3, #31
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b20      	cmp	r3, #32
 800645c:	d104      	bne.n	8006468 <USB_HC_Halt+0x5a>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	e0e8      	b.n	800663a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <USB_HC_Halt+0x66>
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	2b02      	cmp	r3, #2
 8006472:	d173      	bne.n	800655c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	4413      	add	r3, r2
 800647c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	0151      	lsls	r1, r2, #5
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	440a      	add	r2, r1
 800648a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800648e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006492:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f003 0320 	and.w	r3, r3, #32
 800649c:	2b00      	cmp	r3, #0
 800649e:	f040 80cb 	bne.w	8006638 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d143      	bne.n	8006536 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	0151      	lsls	r1, r2, #5
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	440a      	add	r2, r1
 80064c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064cc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	0151      	lsls	r1, r2, #5
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	440a      	add	r2, r1
 80064e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064ec:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	0151      	lsls	r1, r2, #5
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	440a      	add	r2, r1
 8006504:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006508:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800650c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	3301      	adds	r3, #1
 8006512:	61fb      	str	r3, [r7, #28]
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800651a:	d81d      	bhi.n	8006558 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	4413      	add	r3, r2
 8006524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800652e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006532:	d0ec      	beq.n	800650e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006534:	e080      	b.n	8006638 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	4413      	add	r3, r2
 800653e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	0151      	lsls	r1, r2, #5
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	440a      	add	r2, r1
 800654c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006550:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006554:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006556:	e06f      	b.n	8006638 <USB_HC_Halt+0x22a>
            break;
 8006558:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800655a:	e06d      	b.n	8006638 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	4413      	add	r3, r2
 8006564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	0151      	lsls	r1, r2, #5
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	440a      	add	r2, r1
 8006572:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006576:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800657a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d143      	bne.n	8006614 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	4413      	add	r3, r2
 8006594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	0151      	lsls	r1, r2, #5
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	440a      	add	r2, r1
 80065a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	0151      	lsls	r1, r2, #5
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	440a      	add	r2, r1
 80065c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	0151      	lsls	r1, r2, #5
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	440a      	add	r2, r1
 80065e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065ea:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	3301      	adds	r3, #1
 80065f0:	61fb      	str	r3, [r7, #28]
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065f8:	d81d      	bhi.n	8006636 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	4413      	add	r3, r2
 8006602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800660c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006610:	d0ec      	beq.n	80065ec <USB_HC_Halt+0x1de>
 8006612:	e011      	b.n	8006638 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	4413      	add	r3, r2
 800661c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	0151      	lsls	r1, r2, #5
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	440a      	add	r2, r1
 800662a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800662e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	e000      	b.n	8006638 <USB_HC_Halt+0x22a>
          break;
 8006636:	bf00      	nop
    }
  }

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3724      	adds	r7, #36	; 0x24
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b086      	sub	sp, #24
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7ff fdea 	bl	8006230 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800665c:	2110      	movs	r1, #16
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7ff fdf8 	bl	8006254 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7ff fe1b 	bl	80062a0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800666a:	2300      	movs	r3, #0
 800666c:	613b      	str	r3, [r7, #16]
 800666e:	e01f      	b.n	80066b0 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4413      	add	r3, r2
 8006678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006686:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800668e:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006696:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a4:	461a      	mov	r2, r3
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	3301      	adds	r3, #1
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	2b0f      	cmp	r3, #15
 80066b4:	d9dc      	bls.n	8006670 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80066b6:	2300      	movs	r3, #0
 80066b8:	613b      	str	r3, [r7, #16]
 80066ba:	e034      	b.n	8006726 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066d2:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066da:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066e2:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f0:	461a      	mov	r2, r3
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	3301      	adds	r3, #1
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006702:	d80c      	bhi.n	800671e <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4413      	add	r3, r2
 800670c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800671a:	d0ec      	beq.n	80066f6 <USB_StopHost+0xb0>
 800671c:	e000      	b.n	8006720 <USB_StopHost+0xda>
        break;
 800671e:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	3301      	adds	r3, #1
 8006724:	613b      	str	r3, [r7, #16]
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	2b0f      	cmp	r3, #15
 800672a:	d9c7      	bls.n	80066bc <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006732:	461a      	mov	r2, r3
 8006734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006738:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006740:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7ff fd63 	bl	800620e <USB_EnableGlobalInt>

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b082      	sub	sp, #8
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f804 	bl	8006776 <USBH_HandleSof>
}
 800676e:	bf00      	nop
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b082      	sub	sp, #8
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b0b      	cmp	r3, #11
 8006786:	d10a      	bne.n	800679e <USBH_HandleSof+0x28>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800678e:	2b00      	cmp	r3, #0
 8006790:	d005      	beq.n	800679e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	4798      	blx	r3
  }
}
 800679e:	bf00      	nop
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80067b6:	bf00      	nop
}
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80067d2:	bf00      	nop
}
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f883 	bl	8006938 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	791b      	ldrb	r3, [r3, #4]
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f80b 	bl	8006854 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	795b      	ldrb	r3, [r3, #5]
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f805 	bl	8006854 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	2b0a      	cmp	r3, #10
 8006864:	d80d      	bhi.n	8006882 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	33e0      	adds	r3, #224	; 0xe0
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	78fb      	ldrb	r3, [r7, #3]
 8006874:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006878:	6879      	ldr	r1, [r7, #4]
 800687a:	33e0      	adds	r3, #224	; 0xe0
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	440b      	add	r3, r1
 8006880:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800689e:	4618      	mov	r0, r3
 80068a0:	f7ff ff57 	bl	8006752 <USBH_LL_IncTimer>
}
 80068a4:	bf00      	nop
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7ff ff8f 	bl	80067de <USBH_LL_Connect>
}
 80068c0:	bf00      	nop
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7ff ff98 	bl	800680c <USBH_LL_Disconnect>
}
 80068dc:	bf00      	nop
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	70fb      	strb	r3, [r7, #3]
 80068f0:	4613      	mov	r3, r2
 80068f2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800690e:	4618      	mov	r0, r3
 8006910:	f7ff ff49 	bl	80067a6 <USBH_LL_PortEnabled>
}
 8006914:	bf00      	nop
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800692a:	4618      	mov	r0, r3
 800692c:	f7ff ff49 	bl	80067c2 <USBH_LL_PortDisabled>
}
 8006930:	bf00      	nop
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006940:	2300      	movs	r3, #0
 8006942:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006944:	2300      	movs	r3, #0
 8006946:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800694e:	4618      	mov	r0, r3
 8006950:	f7fb ffe3 	bl	800291a <HAL_HCD_Stop>
 8006954:	4603      	mov	r3, r0
 8006956:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	4618      	mov	r0, r3
 800695c:	f000 f808 	bl	8006970 <USBH_Get_USB_Status>
 8006960:	4603      	mov	r3, r0
 8006962:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006964:	7bbb      	ldrb	r3, [r7, #14]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
	...

08006970 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	4603      	mov	r3, r0
 8006978:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800697e:	79fb      	ldrb	r3, [r7, #7]
 8006980:	2b03      	cmp	r3, #3
 8006982:	d817      	bhi.n	80069b4 <USBH_Get_USB_Status+0x44>
 8006984:	a201      	add	r2, pc, #4	; (adr r2, 800698c <USBH_Get_USB_Status+0x1c>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	0800699d 	.word	0x0800699d
 8006990:	080069a3 	.word	0x080069a3
 8006994:	080069a9 	.word	0x080069a9
 8006998:	080069af 	.word	0x080069af
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	73fb      	strb	r3, [r7, #15]
    break;
 80069a0:	e00b      	b.n	80069ba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80069a2:	2302      	movs	r3, #2
 80069a4:	73fb      	strb	r3, [r7, #15]
    break;
 80069a6:	e008      	b.n	80069ba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80069a8:	2301      	movs	r3, #1
 80069aa:	73fb      	strb	r3, [r7, #15]
    break;
 80069ac:	e005      	b.n	80069ba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80069ae:	2302      	movs	r3, #2
 80069b0:	73fb      	strb	r3, [r7, #15]
    break;
 80069b2:	e002      	b.n	80069ba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80069b4:	2302      	movs	r3, #2
 80069b6:	73fb      	strb	r3, [r7, #15]
    break;
 80069b8:	bf00      	nop
  }
  return usb_status;
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <sine_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	3303      	adds	r3, #3
 80069d8:	f023 0303 	bic.w	r3, r3, #3
 80069dc:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    dense_10_input_output_array.data = AI_PTR(NULL);
 80069de:	4b16      	ldr	r3, [pc, #88]	; (8006a38 <sine_model_configure_activations+0x70>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	609a      	str	r2, [r3, #8]
    dense_10_input_output_array.data_start = AI_PTR(NULL);
 80069e4:	4b14      	ldr	r3, [pc, #80]	; (8006a38 <sine_model_configure_activations+0x70>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 80069ea:	4a14      	ldr	r2, [pc, #80]	; (8006a3c <sine_model_configure_activations+0x74>)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 80069f0:	4a12      	ldr	r2, [pc, #72]	; (8006a3c <sine_model_configure_activations+0x74>)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 0);
 80069f6:	4a12      	ldr	r2, [pc, #72]	; (8006a40 <sine_model_configure_activations+0x78>)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 0);
 80069fc:	4a10      	ldr	r2, [pc, #64]	; (8006a40 <sine_model_configure_activations+0x78>)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 64);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3340      	adds	r3, #64	; 0x40
 8006a06:	4a0f      	ldr	r2, [pc, #60]	; (8006a44 <sine_model_configure_activations+0x7c>)
 8006a08:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 64);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3340      	adds	r3, #64	; 0x40
 8006a0e:	4a0d      	ldr	r2, [pc, #52]	; (8006a44 <sine_model_configure_activations+0x7c>)
 8006a10:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 0);
 8006a12:	4a0d      	ldr	r2, [pc, #52]	; (8006a48 <sine_model_configure_activations+0x80>)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 0);
 8006a18:	4a0b      	ldr	r2, [pc, #44]	; (8006a48 <sine_model_configure_activations+0x80>)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(NULL);
 8006a1e:	4b0b      	ldr	r3, [pc, #44]	; (8006a4c <sine_model_configure_activations+0x84>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	609a      	str	r2, [r3, #8]
    dense_2_output_array.data_start = AI_PTR(NULL);
 8006a24:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <sine_model_configure_activations+0x84>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8006a2a:	2301      	movs	r3, #1
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	200000cc 	.word	0x200000cc
 8006a3c:	200000dc 	.word	0x200000dc
 8006a40:	200000ec 	.word	0x200000ec
 8006a44:	200000fc 	.word	0x200000fc
 8006a48:	2000010c 	.word	0x2000010c
 8006a4c:	2000011c 	.word	0x2000011c

08006a50 <sine_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8006a60:	4b2f      	ldr	r3, [pc, #188]	; (8006b20 <sine_model_configure_weights+0xd0>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a68:	4a2d      	ldr	r2, [pc, #180]	; (8006b20 <sine_model_configure_weights+0xd0>)
 8006a6a:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 1280);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a72:	4a2b      	ldr	r2, [pc, #172]	; (8006b20 <sine_model_configure_weights+0xd0>)
 8006a74:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 1280);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7c:	4a28      	ldr	r2, [pc, #160]	; (8006b20 <sine_model_configure_weights+0xd0>)
 8006a7e:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8006a80:	4b28      	ldr	r3, [pc, #160]	; (8006b24 <sine_model_configure_weights+0xd4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a88:	4a26      	ldr	r2, [pc, #152]	; (8006b24 <sine_model_configure_weights+0xd4>)
 8006a8a:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 1216);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006a92:	4a24      	ldr	r2, [pc, #144]	; (8006b24 <sine_model_configure_weights+0xd4>)
 8006a94:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 1216);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006a9c:	4a21      	ldr	r2, [pc, #132]	; (8006b24 <sine_model_configure_weights+0xd4>)
 8006a9e:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8006aa0:	4b21      	ldr	r3, [pc, #132]	; (8006b28 <sine_model_configure_weights+0xd8>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aa8:	4a1f      	ldr	r2, [pc, #124]	; (8006b28 <sine_model_configure_weights+0xd8>)
 8006aaa:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 1152);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8006ab2:	4a1d      	ldr	r2, [pc, #116]	; (8006b28 <sine_model_configure_weights+0xd8>)
 8006ab4:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 1152);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8006abc:	4a1a      	ldr	r2, [pc, #104]	; (8006b28 <sine_model_configure_weights+0xd8>)
 8006abe:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8006ac0:	4b1a      	ldr	r3, [pc, #104]	; (8006b2c <sine_model_configure_weights+0xdc>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ac8:	4a18      	ldr	r2, [pc, #96]	; (8006b2c <sine_model_configure_weights+0xdc>)
 8006aca:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 128);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	3380      	adds	r3, #128	; 0x80
 8006ad0:	4a16      	ldr	r2, [pc, #88]	; (8006b2c <sine_model_configure_weights+0xdc>)
 8006ad2:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 128);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	3380      	adds	r3, #128	; 0x80
 8006ad8:	4a14      	ldr	r2, [pc, #80]	; (8006b2c <sine_model_configure_weights+0xdc>)
 8006ada:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8006adc:	4b14      	ldr	r3, [pc, #80]	; (8006b30 <sine_model_configure_weights+0xe0>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ae4:	4a12      	ldr	r2, [pc, #72]	; (8006b30 <sine_model_configure_weights+0xe0>)
 8006ae6:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 64);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3340      	adds	r3, #64	; 0x40
 8006aec:	4a10      	ldr	r2, [pc, #64]	; (8006b30 <sine_model_configure_weights+0xe0>)
 8006aee:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 64);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	3340      	adds	r3, #64	; 0x40
 8006af4:	4a0e      	ldr	r2, [pc, #56]	; (8006b30 <sine_model_configure_weights+0xe0>)
 8006af6:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8006af8:	4b0e      	ldr	r3, [pc, #56]	; (8006b34 <sine_model_configure_weights+0xe4>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b00:	4a0c      	ldr	r2, [pc, #48]	; (8006b34 <sine_model_configure_weights+0xe4>)
 8006b02:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 8006b04:	4a0b      	ldr	r2, [pc, #44]	; (8006b34 <sine_model_configure_weights+0xe4>)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 8006b0a:	4a0a      	ldr	r2, [pc, #40]	; (8006b34 <sine_model_configure_weights+0xe4>)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8006b10:	2301      	movs	r3, #1
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	2000006c 	.word	0x2000006c
 8006b24:	2000007c 	.word	0x2000007c
 8006b28:	2000008c 	.word	0x2000008c
 8006b2c:	2000009c 	.word	0x2000009c
 8006b30:	200000ac 	.word	0x200000ac
 8006b34:	200000bc 	.word	0x200000bc

08006b38 <ai_sine_model_create>:
}

AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af02      	add	r7, sp, #8
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8006b42:	2300      	movs	r3, #0
 8006b44:	9301      	str	r3, [sp, #4]
 8006b46:	2303      	movs	r3, #3
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	4a04      	ldr	r2, [pc, #16]	; (8006b60 <ai_sine_model_create+0x28>)
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f861 	bl	8006c18 <ai_platform_network_create>
 8006b56:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	2000000c 	.word	0x2000000c

08006b64 <ai_sine_model_init>:
}

AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f8d5 	bl	8006d20 <ai_platform_network_init>
 8006b76:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <ai_sine_model_init+0x1e>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	e02b      	b.n	8006bda <ai_sine_model_init+0x76>

  ai_bool ok = true;
 8006b82:	2301      	movs	r3, #1
 8006b84:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_weights(net_ctx, &params->params);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	4619      	mov	r1, r3
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7ff ff60 	bl	8006a50 <sine_model_configure_weights>
 8006b90:	4603      	mov	r3, r0
 8006b92:	461a      	mov	r2, r3
 8006b94:	7afb      	ldrb	r3, [r7, #11]
 8006b96:	4013      	ands	r3, r2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	bf14      	ite	ne
 8006b9c:	2301      	movne	r3, #1
 8006b9e:	2300      	moveq	r3, #0
 8006ba0:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, &params->activations);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	3318      	adds	r3, #24
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f7ff ff0d 	bl	80069c8 <sine_model_configure_activations>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	7afb      	ldrb	r3, [r7, #11]
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	bf14      	ite	ne
 8006bba:	2301      	movne	r3, #1
 8006bbc:	2300      	moveq	r3, #0
 8006bbe:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f995 	bl	8006ef0 <ai_platform_network_post_init>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	461a      	mov	r2, r3
 8006bca:	7afb      	ldrb	r3, [r7, #11]
 8006bcc:	4013      	ands	r3, r2
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	bf14      	ite	ne
 8006bd2:	2301      	movne	r3, #1
 8006bd4:	2300      	moveq	r3, #0
 8006bd6:	72fb      	strb	r3, [r7, #11]

  return ok;
 8006bd8:	7afb      	ldrb	r3, [r7, #11]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	60b9      	str	r1, [r7, #8]
 8006bec:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	68b9      	ldr	r1, [r7, #8]
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 fa28 	bl	8007048 <ai_platform_network_process>
 8006bf8:	4603      	mov	r3, r0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
	...

08006c04 <ai_sine_model_data_weights_get>:
#include "sine_model_data.h"

ai_handle ai_sine_model_data_weights_get(void)
{
 8006c04:	b480      	push	{r7}
 8006c06:	af00      	add	r7, sp, #0
    0x86, 0xe3, 0x3e, 0x64, 0x12, 0x87, 0xbf, 0xa6, 0xd1,
    0xdf, 0xbe, 0x81, 0x04, 0x1e, 0xbf, 0x95, 0x9f, 0xfc,
    0xbe, 0x44, 0xad, 0x2b, 0x3e, 0xe1, 0x0c, 0x85, 0xbe
  };

  return AI_HANDLE_PTR(s_sine_model_weights);
 8006c08:	4b02      	ldr	r3, [pc, #8]	; (8006c14 <ai_sine_model_data_weights_get+0x10>)

}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr
 8006c14:	0800b2d0 	.word	0x0800b2d0

08006c18 <ai_platform_network_create>:
 8006c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c1a:	4d36      	ldr	r5, [pc, #216]	; (8006cf4 <ai_platform_network_create+0xdc>)
 8006c1c:	b083      	sub	sp, #12
 8006c1e:	4e36      	ldr	r6, [pc, #216]	; (8006cf8 <ai_platform_network_create+0xe0>)
 8006c20:	6829      	ldr	r1, [r5, #0]
 8006c22:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8006c26:	f021 0101 	bic.w	r1, r1, #1
 8006c2a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8006c2e:	6029      	str	r1, [r5, #0]
 8006c30:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 8006c34:	6831      	ldr	r1, [r6, #0]
 8006c36:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8006c3a:	194d      	adds	r5, r1, r5
 8006c3c:	2d01      	cmp	r5, #1
 8006c3e:	d92f      	bls.n	8006ca0 <ai_platform_network_create+0x88>
 8006c40:	f240 4549 	movw	r5, #1097	; 0x449
 8006c44:	42a9      	cmp	r1, r5
 8006c46:	d02b      	beq.n	8006ca0 <ai_platform_network_create+0x88>
 8006c48:	492c      	ldr	r1, [pc, #176]	; (8006cfc <ai_platform_network_create+0xe4>)
 8006c4a:	6809      	ldr	r1, [r1, #0]
 8006c4c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8006c50:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8006c54:	d015      	beq.n	8006c82 <ai_platform_network_create+0x6a>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d031      	beq.n	8006cbe <ai_platform_network_create+0xa6>
 8006c5a:	461e      	mov	r6, r3
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	4a28      	ldr	r2, [pc, #160]	; (8006d00 <ai_platform_network_create+0xe8>)
 8006c60:	4605      	mov	r5, r0
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	6003      	str	r3, [r0, #0]
 8006c66:	f000 fc9f 	bl	80075a8 <core_init>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	d02b      	beq.n	8006cc6 <ai_platform_network_create+0xae>
 8006c6e:	0223      	lsls	r3, r4, #8
 8006c70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c74:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8006c78:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8006c7c:	d92e      	bls.n	8006cdc <ai_platform_network_create+0xc4>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e022      	b.n	8006cc8 <ai_platform_network_create+0xb0>
 8006c82:	4920      	ldr	r1, [pc, #128]	; (8006d04 <ai_platform_network_create+0xec>)
 8006c84:	2501      	movs	r5, #1
 8006c86:	460e      	mov	r6, r1
 8006c88:	600d      	str	r5, [r1, #0]
 8006c8a:	6831      	ldr	r1, [r6, #0]
 8006c8c:	2900      	cmp	r1, #0
 8006c8e:	d1fc      	bne.n	8006c8a <ai_platform_network_create+0x72>
 8006c90:	491d      	ldr	r1, [pc, #116]	; (8006d08 <ai_platform_network_create+0xf0>)
 8006c92:	4e1e      	ldr	r6, [pc, #120]	; (8006d0c <ai_platform_network_create+0xf4>)
 8006c94:	4d1e      	ldr	r5, [pc, #120]	; (8006d10 <ai_platform_network_create+0xf8>)
 8006c96:	600e      	str	r6, [r1, #0]
 8006c98:	6809      	ldr	r1, [r1, #0]
 8006c9a:	42a9      	cmp	r1, r5
 8006c9c:	d0db      	beq.n	8006c56 <ai_platform_network_create+0x3e>
 8006c9e:	e7fe      	b.n	8006c9e <ai_platform_network_create+0x86>
 8006ca0:	491c      	ldr	r1, [pc, #112]	; (8006d14 <ai_platform_network_create+0xfc>)
 8006ca2:	2501      	movs	r5, #1
 8006ca4:	460e      	mov	r6, r1
 8006ca6:	600d      	str	r5, [r1, #0]
 8006ca8:	6831      	ldr	r1, [r6, #0]
 8006caa:	2900      	cmp	r1, #0
 8006cac:	d1fc      	bne.n	8006ca8 <ai_platform_network_create+0x90>
 8006cae:	491a      	ldr	r1, [pc, #104]	; (8006d18 <ai_platform_network_create+0x100>)
 8006cb0:	4e16      	ldr	r6, [pc, #88]	; (8006d0c <ai_platform_network_create+0xf4>)
 8006cb2:	4d17      	ldr	r5, [pc, #92]	; (8006d10 <ai_platform_network_create+0xf8>)
 8006cb4:	600e      	str	r6, [r1, #0]
 8006cb6:	6809      	ldr	r1, [r1, #0]
 8006cb8:	42a9      	cmp	r1, r5
 8006cba:	d0cc      	beq.n	8006c56 <ai_platform_network_create+0x3e>
 8006cbc:	e7fe      	b.n	8006cbc <ai_platform_network_create+0xa4>
 8006cbe:	f241 0010 	movw	r0, #4112	; 0x1010
 8006cc2:	b003      	add	sp, #12
 8006cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc6:	2330      	movs	r3, #48	; 0x30
 8006cc8:	2100      	movs	r1, #0
 8006cca:	2210      	movs	r2, #16
 8006ccc:	6029      	str	r1, [r5, #0]
 8006cce:	2000      	movs	r0, #0
 8006cd0:	f363 0007 	bfi	r0, r3, #0, #8
 8006cd4:	f362 201f 	bfi	r0, r2, #8, #24
 8006cd8:	b003      	add	sp, #12
 8006cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cdc:	4b0f      	ldr	r3, [pc, #60]	; (8006d1c <ai_platform_network_create+0x104>)
 8006cde:	a802      	add	r0, sp, #8
 8006ce0:	f840 3d04 	str.w	r3, [r0, #-4]!
 8006ce4:	f001 fa82 	bl	80081ec <ai_check_custom_types>
 8006ce8:	b110      	cbz	r0, 8006cf0 <ai_platform_network_create+0xd8>
 8006cea:	2200      	movs	r2, #0
 8006cec:	4613      	mov	r3, r2
 8006cee:	e7ee      	b.n	8006cce <ai_platform_network_create+0xb6>
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	e7e9      	b.n	8006cc8 <ai_platform_network_create+0xb0>
 8006cf4:	e0002000 	.word	0xe0002000
 8006cf8:	e0042000 	.word	0xe0042000
 8006cfc:	5c001000 	.word	0x5c001000
 8006d00:	a1c00100 	.word	0xa1c00100
 8006d04:	58024c08 	.word	0x58024c08
 8006d08:	58024c00 	.word	0x58024c00
 8006d0c:	f407a5c2 	.word	0xf407a5c2
 8006d10:	b5e8b5cd 	.word	0xb5e8b5cd
 8006d14:	40023008 	.word	0x40023008
 8006d18:	40023000 	.word	0x40023000
 8006d1c:	84048403 	.word	0x84048403

08006d20 <ai_platform_network_init>:
 8006d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d22:	2800      	cmp	r0, #0
 8006d24:	d05e      	beq.n	8006de4 <ai_platform_network_init+0xc4>
 8006d26:	4b68      	ldr	r3, [pc, #416]	; (8006ec8 <ai_platform_network_init+0x1a8>)
 8006d28:	6802      	ldr	r2, [r0, #0]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d15a      	bne.n	8006de4 <ai_platform_network_init+0xc4>
 8006d2e:	4a67      	ldr	r2, [pc, #412]	; (8006ecc <ai_platform_network_init+0x1ac>)
 8006d30:	4c67      	ldr	r4, [pc, #412]	; (8006ed0 <ai_platform_network_init+0x1b0>)
 8006d32:	6813      	ldr	r3, [r2, #0]
 8006d34:	f023 0301 	bic.w	r3, r3, #1
 8006d38:	6013      	str	r3, [r2, #0]
 8006d3a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d44:	189a      	adds	r2, r3, r2
 8006d46:	2a01      	cmp	r2, #1
 8006d48:	d93d      	bls.n	8006dc6 <ai_platform_network_init+0xa6>
 8006d4a:	f240 4249 	movw	r2, #1097	; 0x449
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d039      	beq.n	8006dc6 <ai_platform_network_init+0xa6>
 8006d52:	4b60      	ldr	r3, [pc, #384]	; (8006ed4 <ai_platform_network_init+0x1b4>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d5a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006d5e:	d06b      	beq.n	8006e38 <ai_platform_network_init+0x118>
 8006d60:	4605      	mov	r5, r0
 8006d62:	460c      	mov	r4, r1
 8006d64:	2900      	cmp	r1, #0
 8006d66:	f000 80a8 	beq.w	8006eba <ai_platform_network_init+0x19a>
 8006d6a:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 8006d6c:	690e      	ldr	r6, [r1, #16]
 8006d6e:	2f00      	cmp	r7, #0
 8006d70:	f000 8092 	beq.w	8006e98 <ai_platform_network_init+0x178>
 8006d74:	2e00      	cmp	r6, #0
 8006d76:	d07d      	beq.n	8006e74 <ai_platform_network_init+0x154>
 8006d78:	f104 0718 	add.w	r7, r4, #24
 8006d7c:	f105 0c18 	add.w	ip, r5, #24
 8006d80:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8006d84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006d8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006d8e:	2403      	movs	r4, #3
 8006d90:	e88c 0003 	stmia.w	ip, {r0, r1}
 8006d94:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006d96:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006d98:	e897 0003 	ldmia.w	r7, {r0, r1}
 8006d9c:	e886 0003 	stmia.w	r6, {r0, r1}
 8006da0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8006da2:	60ec      	str	r4, [r5, #12]
 8006da4:	b16a      	cbz	r2, 8006dc2 <ai_platform_network_init+0xa2>
 8006da6:	68d3      	ldr	r3, [r2, #12]
 8006da8:	6095      	str	r5, [r2, #8]
 8006daa:	b153      	cbz	r3, 8006dc2 <ai_platform_network_init+0xa2>
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d104      	bne.n	8006dba <ai_platform_network_init+0x9a>
 8006db0:	e007      	b.n	8006dc2 <ai_platform_network_init+0xa2>
 8006db2:	429a      	cmp	r2, r3
 8006db4:	4613      	mov	r3, r2
 8006db6:	d004      	beq.n	8006dc2 <ai_platform_network_init+0xa2>
 8006db8:	b11a      	cbz	r2, 8006dc2 <ai_platform_network_init+0xa2>
 8006dba:	68da      	ldr	r2, [r3, #12]
 8006dbc:	609d      	str	r5, [r3, #8]
 8006dbe:	2a00      	cmp	r2, #0
 8006dc0:	d1f7      	bne.n	8006db2 <ai_platform_network_init+0x92>
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dc6:	4b44      	ldr	r3, [pc, #272]	; (8006ed8 <ai_platform_network_init+0x1b8>)
 8006dc8:	2201      	movs	r2, #1
 8006dca:	461c      	mov	r4, r3
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1fc      	bne.n	8006dce <ai_platform_network_init+0xae>
 8006dd4:	4b41      	ldr	r3, [pc, #260]	; (8006edc <ai_platform_network_init+0x1bc>)
 8006dd6:	4c42      	ldr	r4, [pc, #264]	; (8006ee0 <ai_platform_network_init+0x1c0>)
 8006dd8:	4a42      	ldr	r2, [pc, #264]	; (8006ee4 <ai_platform_network_init+0x1c4>)
 8006dda:	601c      	str	r4, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d0be      	beq.n	8006d60 <ai_platform_network_init+0x40>
 8006de2:	e7fe      	b.n	8006de2 <ai_platform_network_init+0xc2>
 8006de4:	4a39      	ldr	r2, [pc, #228]	; (8006ecc <ai_platform_network_init+0x1ac>)
 8006de6:	493a      	ldr	r1, [pc, #232]	; (8006ed0 <ai_platform_network_init+0x1b0>)
 8006de8:	6813      	ldr	r3, [r2, #0]
 8006dea:	f023 0301 	bic.w	r3, r3, #1
 8006dee:	6013      	str	r3, [r2, #0]
 8006df0:	680b      	ldr	r3, [r1, #0]
 8006df2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006df6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dfa:	185a      	adds	r2, r3, r1
 8006dfc:	2a01      	cmp	r2, #1
 8006dfe:	d90c      	bls.n	8006e1a <ai_platform_network_init+0xfa>
 8006e00:	f240 4249 	movw	r2, #1097	; 0x449
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d008      	beq.n	8006e1a <ai_platform_network_init+0xfa>
 8006e08:	4b32      	ldr	r3, [pc, #200]	; (8006ed4 <ai_platform_network_init+0x1b4>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e10:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006e14:	d01f      	beq.n	8006e56 <ai_platform_network_init+0x136>
 8006e16:	2000      	movs	r0, #0
 8006e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e1a:	4b2f      	ldr	r3, [pc, #188]	; (8006ed8 <ai_platform_network_init+0x1b8>)
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	4619      	mov	r1, r3
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	680b      	ldr	r3, [r1, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1fc      	bne.n	8006e22 <ai_platform_network_init+0x102>
 8006e28:	4b2c      	ldr	r3, [pc, #176]	; (8006edc <ai_platform_network_init+0x1bc>)
 8006e2a:	492d      	ldr	r1, [pc, #180]	; (8006ee0 <ai_platform_network_init+0x1c0>)
 8006e2c:	4a2d      	ldr	r2, [pc, #180]	; (8006ee4 <ai_platform_network_init+0x1c4>)
 8006e2e:	6019      	str	r1, [r3, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d0ef      	beq.n	8006e16 <ai_platform_network_init+0xf6>
 8006e36:	e7fe      	b.n	8006e36 <ai_platform_network_init+0x116>
 8006e38:	4b2b      	ldr	r3, [pc, #172]	; (8006ee8 <ai_platform_network_init+0x1c8>)
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	461c      	mov	r4, r3
 8006e3e:	601a      	str	r2, [r3, #0]
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1fc      	bne.n	8006e40 <ai_platform_network_init+0x120>
 8006e46:	4b29      	ldr	r3, [pc, #164]	; (8006eec <ai_platform_network_init+0x1cc>)
 8006e48:	4c25      	ldr	r4, [pc, #148]	; (8006ee0 <ai_platform_network_init+0x1c0>)
 8006e4a:	4a26      	ldr	r2, [pc, #152]	; (8006ee4 <ai_platform_network_init+0x1c4>)
 8006e4c:	601c      	str	r4, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d085      	beq.n	8006d60 <ai_platform_network_init+0x40>
 8006e54:	e7fe      	b.n	8006e54 <ai_platform_network_init+0x134>
 8006e56:	4b24      	ldr	r3, [pc, #144]	; (8006ee8 <ai_platform_network_init+0x1c8>)
 8006e58:	2201      	movs	r2, #1
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	680b      	ldr	r3, [r1, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1fc      	bne.n	8006e5e <ai_platform_network_init+0x13e>
 8006e64:	4b21      	ldr	r3, [pc, #132]	; (8006eec <ai_platform_network_init+0x1cc>)
 8006e66:	491e      	ldr	r1, [pc, #120]	; (8006ee0 <ai_platform_network_init+0x1c0>)
 8006e68:	4a1e      	ldr	r2, [pc, #120]	; (8006ee4 <ai_platform_network_init+0x1c4>)
 8006e6a:	6019      	str	r1, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d0d1      	beq.n	8006e16 <ai_platform_network_init+0xf6>
 8006e72:	e7fe      	b.n	8006e72 <ai_platform_network_init+0x152>
 8006e74:	8921      	ldrh	r1, [r4, #8]
 8006e76:	88e2      	ldrh	r2, [r4, #6]
 8006e78:	68e3      	ldr	r3, [r4, #12]
 8006e7a:	fb02 f201 	mul.w	r2, r2, r1
 8006e7e:	fb03 f302 	mul.w	r3, r3, r2
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f43f af78 	beq.w	8006d78 <ai_platform_network_init+0x58>
 8006e88:	f105 0010 	add.w	r0, r5, #16
 8006e8c:	2212      	movs	r2, #18
 8006e8e:	2110      	movs	r1, #16
 8006e90:	f000 fb8c 	bl	80075ac <core_set_error>
 8006e94:	4630      	mov	r0, r6
 8006e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e98:	8c09      	ldrh	r1, [r1, #32]
 8006e9a:	8be2      	ldrh	r2, [r4, #30]
 8006e9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e9e:	fb02 f201 	mul.w	r2, r2, r1
 8006ea2:	fb03 f302 	mul.w	r3, r3, r2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f43f af64 	beq.w	8006d74 <ai_platform_network_init+0x54>
 8006eac:	2213      	movs	r2, #19
 8006eae:	2110      	movs	r1, #16
 8006eb0:	3010      	adds	r0, #16
 8006eb2:	f000 fb7b 	bl	80075ac <core_set_error>
 8006eb6:	4638      	mov	r0, r7
 8006eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eba:	2211      	movs	r2, #17
 8006ebc:	2110      	movs	r1, #16
 8006ebe:	3010      	adds	r0, #16
 8006ec0:	f000 fb74 	bl	80075ac <core_set_error>
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ec8:	a1c00100 	.word	0xa1c00100
 8006ecc:	e0002000 	.word	0xe0002000
 8006ed0:	e0042000 	.word	0xe0042000
 8006ed4:	5c001000 	.word	0x5c001000
 8006ed8:	40023008 	.word	0x40023008
 8006edc:	40023000 	.word	0x40023000
 8006ee0:	f407a5c2 	.word	0xf407a5c2
 8006ee4:	b5e8b5cd 	.word	0xb5e8b5cd
 8006ee8:	58024c08 	.word	0x58024c08
 8006eec:	58024c00 	.word	0x58024c00

08006ef0 <ai_platform_network_post_init>:
 8006ef0:	b538      	push	{r3, r4, r5, lr}
 8006ef2:	b118      	cbz	r0, 8006efc <ai_platform_network_post_init+0xc>
 8006ef4:	4b4a      	ldr	r3, [pc, #296]	; (8007020 <ai_platform_network_post_init+0x130>)
 8006ef6:	6802      	ldr	r2, [r0, #0]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d029      	beq.n	8006f50 <ai_platform_network_post_init+0x60>
 8006efc:	4a49      	ldr	r2, [pc, #292]	; (8007024 <ai_platform_network_post_init+0x134>)
 8006efe:	494a      	ldr	r1, [pc, #296]	; (8007028 <ai_platform_network_post_init+0x138>)
 8006f00:	6813      	ldr	r3, [r2, #0]
 8006f02:	f023 0301 	bic.w	r3, r3, #1
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	680b      	ldr	r3, [r1, #0]
 8006f0a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006f0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f12:	185a      	adds	r2, r3, r1
 8006f14:	2a01      	cmp	r2, #1
 8006f16:	d90c      	bls.n	8006f32 <ai_platform_network_post_init+0x42>
 8006f18:	f240 4249 	movw	r2, #1097	; 0x449
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d008      	beq.n	8006f32 <ai_platform_network_post_init+0x42>
 8006f20:	4b42      	ldr	r3, [pc, #264]	; (800702c <ai_platform_network_post_init+0x13c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f28:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006f2c:	d044      	beq.n	8006fb8 <ai_platform_network_post_init+0xc8>
 8006f2e:	2000      	movs	r0, #0
 8006f30:	bd38      	pop	{r3, r4, r5, pc}
 8006f32:	4b3f      	ldr	r3, [pc, #252]	; (8007030 <ai_platform_network_post_init+0x140>)
 8006f34:	2201      	movs	r2, #1
 8006f36:	4619      	mov	r1, r3
 8006f38:	601a      	str	r2, [r3, #0]
 8006f3a:	680b      	ldr	r3, [r1, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1fc      	bne.n	8006f3a <ai_platform_network_post_init+0x4a>
 8006f40:	4b3c      	ldr	r3, [pc, #240]	; (8007034 <ai_platform_network_post_init+0x144>)
 8006f42:	493d      	ldr	r1, [pc, #244]	; (8007038 <ai_platform_network_post_init+0x148>)
 8006f44:	4a3d      	ldr	r2, [pc, #244]	; (800703c <ai_platform_network_post_init+0x14c>)
 8006f46:	6019      	str	r1, [r3, #0]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d0ef      	beq.n	8006f2e <ai_platform_network_post_init+0x3e>
 8006f4e:	e7fe      	b.n	8006f4e <ai_platform_network_post_init+0x5e>
 8006f50:	4a34      	ldr	r2, [pc, #208]	; (8007024 <ai_platform_network_post_init+0x134>)
 8006f52:	4935      	ldr	r1, [pc, #212]	; (8007028 <ai_platform_network_post_init+0x138>)
 8006f54:	6813      	ldr	r3, [r2, #0]
 8006f56:	f023 0301 	bic.w	r3, r3, #1
 8006f5a:	6013      	str	r3, [r2, #0]
 8006f5c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006f60:	680b      	ldr	r3, [r1, #0]
 8006f62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f66:	189a      	adds	r2, r3, r2
 8006f68:	2a01      	cmp	r2, #1
 8006f6a:	d94a      	bls.n	8007002 <ai_platform_network_post_init+0x112>
 8006f6c:	f240 4249 	movw	r2, #1097	; 0x449
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d046      	beq.n	8007002 <ai_platform_network_post_init+0x112>
 8006f74:	4b2d      	ldr	r3, [pc, #180]	; (800702c <ai_platform_network_post_init+0x13c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f7c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006f80:	d030      	beq.n	8006fe4 <ai_platform_network_post_init+0xf4>
 8006f82:	68c3      	ldr	r3, [r0, #12]
 8006f84:	4604      	mov	r4, r0
 8006f86:	f013 0502 	ands.w	r5, r3, #2
 8006f8a:	d024      	beq.n	8006fd6 <ai_platform_network_post_init+0xe6>
 8006f8c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006f8e:	b18b      	cbz	r3, 8006fb4 <ai_platform_network_post_init+0xc4>
 8006f90:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8006f92:	b90d      	cbnz	r5, 8006f98 <ai_platform_network_post_init+0xa8>
 8006f94:	e00e      	b.n	8006fb4 <ai_platform_network_post_init+0xc4>
 8006f96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f98:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	4798      	blx	r3
 8006fa0:	68ea      	ldr	r2, [r5, #12]
 8006fa2:	1b53      	subs	r3, r2, r5
 8006fa4:	4615      	mov	r5, r2
 8006fa6:	bf18      	it	ne
 8006fa8:	2301      	movne	r3, #1
 8006faa:	2a00      	cmp	r2, #0
 8006fac:	bf08      	it	eq
 8006fae:	2300      	moveq	r3, #0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1f0      	bne.n	8006f96 <ai_platform_network_post_init+0xa6>
 8006fb4:	2001      	movs	r0, #1
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	4b21      	ldr	r3, [pc, #132]	; (8007040 <ai_platform_network_post_init+0x150>)
 8006fba:	2201      	movs	r2, #1
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	601a      	str	r2, [r3, #0]
 8006fc0:	680b      	ldr	r3, [r1, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1fc      	bne.n	8006fc0 <ai_platform_network_post_init+0xd0>
 8006fc6:	4b1f      	ldr	r3, [pc, #124]	; (8007044 <ai_platform_network_post_init+0x154>)
 8006fc8:	491b      	ldr	r1, [pc, #108]	; (8007038 <ai_platform_network_post_init+0x148>)
 8006fca:	4a1c      	ldr	r2, [pc, #112]	; (800703c <ai_platform_network_post_init+0x14c>)
 8006fcc:	6019      	str	r1, [r3, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d0ac      	beq.n	8006f2e <ai_platform_network_post_init+0x3e>
 8006fd4:	e7fe      	b.n	8006fd4 <ai_platform_network_post_init+0xe4>
 8006fd6:	2210      	movs	r2, #16
 8006fd8:	2111      	movs	r1, #17
 8006fda:	3010      	adds	r0, #16
 8006fdc:	f000 fae6 	bl	80075ac <core_set_error>
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	bd38      	pop	{r3, r4, r5, pc}
 8006fe4:	4b16      	ldr	r3, [pc, #88]	; (8007040 <ai_platform_network_post_init+0x150>)
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	4619      	mov	r1, r3
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	680b      	ldr	r3, [r1, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1fc      	bne.n	8006fec <ai_platform_network_post_init+0xfc>
 8006ff2:	4b14      	ldr	r3, [pc, #80]	; (8007044 <ai_platform_network_post_init+0x154>)
 8006ff4:	4910      	ldr	r1, [pc, #64]	; (8007038 <ai_platform_network_post_init+0x148>)
 8006ff6:	4a11      	ldr	r2, [pc, #68]	; (800703c <ai_platform_network_post_init+0x14c>)
 8006ff8:	6019      	str	r1, [r3, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d0c0      	beq.n	8006f82 <ai_platform_network_post_init+0x92>
 8007000:	e7fe      	b.n	8007000 <ai_platform_network_post_init+0x110>
 8007002:	4b0b      	ldr	r3, [pc, #44]	; (8007030 <ai_platform_network_post_init+0x140>)
 8007004:	2201      	movs	r2, #1
 8007006:	4619      	mov	r1, r3
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	680b      	ldr	r3, [r1, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1fc      	bne.n	800700a <ai_platform_network_post_init+0x11a>
 8007010:	4b08      	ldr	r3, [pc, #32]	; (8007034 <ai_platform_network_post_init+0x144>)
 8007012:	4909      	ldr	r1, [pc, #36]	; (8007038 <ai_platform_network_post_init+0x148>)
 8007014:	4a09      	ldr	r2, [pc, #36]	; (800703c <ai_platform_network_post_init+0x14c>)
 8007016:	6019      	str	r1, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4293      	cmp	r3, r2
 800701c:	d0b1      	beq.n	8006f82 <ai_platform_network_post_init+0x92>
 800701e:	e7fe      	b.n	800701e <ai_platform_network_post_init+0x12e>
 8007020:	a1c00100 	.word	0xa1c00100
 8007024:	e0002000 	.word	0xe0002000
 8007028:	e0042000 	.word	0xe0042000
 800702c:	5c001000 	.word	0x5c001000
 8007030:	40023008 	.word	0x40023008
 8007034:	40023000 	.word	0x40023000
 8007038:	f407a5c2 	.word	0xf407a5c2
 800703c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007040:	58024c08 	.word	0x58024c08
 8007044:	58024c00 	.word	0x58024c00

08007048 <ai_platform_network_process>:
 8007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	4692      	mov	sl, r2
 800704e:	b083      	sub	sp, #12
 8007050:	4604      	mov	r4, r0
 8007052:	b120      	cbz	r0, 800705e <ai_platform_network_process+0x16>
 8007054:	4b86      	ldr	r3, [pc, #536]	; (8007270 <ai_platform_network_process+0x228>)
 8007056:	6802      	ldr	r2, [r0, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	bf18      	it	ne
 800705c:	2400      	movne	r4, #0
 800705e:	4a85      	ldr	r2, [pc, #532]	; (8007274 <ai_platform_network_process+0x22c>)
 8007060:	4885      	ldr	r0, [pc, #532]	; (8007278 <ai_platform_network_process+0x230>)
 8007062:	6813      	ldr	r3, [r2, #0]
 8007064:	f023 0301 	bic.w	r3, r3, #1
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	6803      	ldr	r3, [r0, #0]
 800706c:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 8007070:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007074:	181a      	adds	r2, r3, r0
 8007076:	2a01      	cmp	r2, #1
 8007078:	f240 80c6 	bls.w	8007208 <ai_platform_network_process+0x1c0>
 800707c:	f240 4249 	movw	r2, #1097	; 0x449
 8007080:	4293      	cmp	r3, r2
 8007082:	f000 80c1 	beq.w	8007208 <ai_platform_network_process+0x1c0>
 8007086:	4b7d      	ldr	r3, [pc, #500]	; (800727c <ai_platform_network_process+0x234>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800708e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007092:	f000 80a9 	beq.w	80071e8 <ai_platform_network_process+0x1a0>
 8007096:	2c00      	cmp	r4, #0
 8007098:	f000 80db 	beq.w	8007252 <ai_platform_network_process+0x20a>
 800709c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80070a0:	68e0      	ldr	r0, [r4, #12]
 80070a2:	461a      	mov	r2, r3
 80070a4:	f000 0003 	and.w	r0, r0, #3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 80bd 	beq.w	8007228 <ai_platform_network_process+0x1e0>
 80070ae:	2600      	movs	r6, #0
 80070b0:	2803      	cmp	r0, #3
 80070b2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80070b4:	6166      	str	r6, [r4, #20]
 80070b6:	f040 80c6 	bne.w	8007246 <ai_platform_network_process+0x1fe>
 80070ba:	2900      	cmp	r1, #0
 80070bc:	f000 80b7 	beq.w	800722e <ai_platform_network_process+0x1e6>
 80070c0:	fab5 f085 	clz	r0, r5
 80070c4:	0940      	lsrs	r0, r0, #5
 80070c6:	2800      	cmp	r0, #0
 80070c8:	f040 80b1 	bne.w	800722e <ai_platform_network_process+0x1e6>
 80070cc:	882e      	ldrh	r6, [r5, #0]
 80070ce:	2e00      	cmp	r6, #0
 80070d0:	f000 80ad 	beq.w	800722e <ai_platform_network_process+0x1e6>
 80070d4:	888f      	ldrh	r7, [r1, #4]
 80070d6:	686e      	ldr	r6, [r5, #4]
 80070d8:	9701      	str	r7, [sp, #4]
 80070da:	2e00      	cmp	r6, #0
 80070dc:	f000 825f 	beq.w	800759e <ai_platform_network_process+0x556>
 80070e0:	6836      	ldr	r6, [r6, #0]
 80070e2:	2e00      	cmp	r6, #0
 80070e4:	f000 825b 	beq.w	800759e <ai_platform_network_process+0x556>
 80070e8:	68ab      	ldr	r3, [r5, #8]
 80070ea:	f8d3 9000 	ldr.w	r9, [r3]
 80070ee:	f1b9 0f00 	cmp.w	r9, #0
 80070f2:	f000 809c 	beq.w	800722e <ai_platform_network_process+0x1e6>
 80070f6:	460f      	mov	r7, r1
 80070f8:	4680      	mov	r8, r0
 80070fa:	e05e      	b.n	80071ba <ai_platform_network_process+0x172>
 80070fc:	68f3      	ldr	r3, [r6, #12]
 80070fe:	68da      	ldr	r2, [r3, #12]
 8007100:	455a      	cmp	r2, fp
 8007102:	d168      	bne.n	80071d6 <ai_platform_network_process+0x18e>
 8007104:	689a      	ldr	r2, [r3, #8]
 8007106:	4572      	cmp	r2, lr
 8007108:	d165      	bne.n	80071d6 <ai_platform_network_process+0x18e>
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	459c      	cmp	ip, r3
 800710e:	d162      	bne.n	80071d6 <ai_platform_network_process+0x18e>
 8007110:	6800      	ldr	r0, [r0, #0]
 8007112:	f001 f91b 	bl	800834c <ai_array_get_byte_size>
 8007116:	68f2      	ldr	r2, [r6, #12]
 8007118:	6973      	ldr	r3, [r6, #20]
 800711a:	68d2      	ldr	r2, [r2, #12]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	fb03 f302 	mul.w	r3, r3, r2
 8007122:	4298      	cmp	r0, r3
 8007124:	d357      	bcc.n	80071d6 <ai_platform_network_process+0x18e>
 8007126:	69b3      	ldr	r3, [r6, #24]
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	f001 f8c3 	bl	80082b4 <ai_array_to_buffer_fmt>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	4043      	eors	r3, r0
 8007132:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8007136:	f040 8229 	bne.w	800758c <ai_platform_network_process+0x544>
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	f000 821d 	beq.w	800757c <ai_platform_network_process+0x534>
 8007142:	88bb      	ldrh	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 808a 	beq.w	800725e <ai_platform_network_process+0x216>
 800714a:	9a01      	ldr	r2, [sp, #4]
 800714c:	68f1      	ldr	r1, [r6, #12]
 800714e:	429a      	cmp	r2, r3
 8007150:	68c9      	ldr	r1, [r1, #12]
 8007152:	bf38      	it	cc
 8007154:	461a      	movcc	r2, r3
 8007156:	9201      	str	r2, [sp, #4]
 8007158:	6972      	ldr	r2, [r6, #20]
 800715a:	68d3      	ldr	r3, [r2, #12]
 800715c:	fb03 f301 	mul.w	r3, r3, r1
 8007160:	f8c9 3008 	str.w	r3, [r9, #8]
 8007164:	88ba      	ldrh	r2, [r7, #4]
 8007166:	fb03 f302 	mul.w	r3, r3, r2
 800716a:	f8c9 300c 	str.w	r3, [r9, #12]
 800716e:	6939      	ldr	r1, [r7, #16]
 8007170:	f8c9 1004 	str.w	r1, [r9, #4]
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	4413      	add	r3, r2
 8007178:	f8c9 3000 	str.w	r3, [r9]
 800717c:	69b0      	ldr	r0, [r6, #24]
 800717e:	6803      	ldr	r3, [r0, #0]
 8007180:	009a      	lsls	r2, r3, #2
 8007182:	d408      	bmi.n	8007196 <ai_platform_network_process+0x14e>
 8007184:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007188:	1a9b      	subs	r3, r3, r2
 800718a:	4419      	add	r1, r3
 800718c:	6081      	str	r1, [r0, #8]
 800718e:	69b3      	ldr	r3, [r6, #24]
 8007190:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8007194:	60da      	str	r2, [r3, #12]
 8007196:	f108 0801 	add.w	r8, r8, #1
 800719a:	882b      	ldrh	r3, [r5, #0]
 800719c:	4598      	cmp	r8, r3
 800719e:	d27b      	bcs.n	8007298 <ai_platform_network_process+0x250>
 80071a0:	686b      	ldr	r3, [r5, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d078      	beq.n	8007298 <ai_platform_network_process+0x250>
 80071a6:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 80071aa:	2e00      	cmp	r6, #0
 80071ac:	d074      	beq.n	8007298 <ai_platform_network_process+0x250>
 80071ae:	68ab      	ldr	r3, [r5, #8]
 80071b0:	3718      	adds	r7, #24
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 80071b8:	d039      	beq.n	800722e <ai_platform_network_process+0x1e6>
 80071ba:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 80071be:	f8b7 b006 	ldrh.w	fp, [r7, #6]
 80071c2:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 80071c6:	fb0b f30e 	mul.w	r3, fp, lr
 80071ca:	69b0      	ldr	r0, [r6, #24]
 80071cc:	fb0c f303 	mul.w	r3, ip, r3
 80071d0:	6841      	ldr	r1, [r0, #4]
 80071d2:	4299      	cmp	r1, r3
 80071d4:	d292      	bcs.n	80070fc <ai_platform_network_process+0xb4>
 80071d6:	f104 0010 	add.w	r0, r4, #16
 80071da:	2218      	movs	r2, #24
 80071dc:	2112      	movs	r1, #18
 80071de:	f04f 0b00 	mov.w	fp, #0
 80071e2:	f000 f9e3 	bl	80075ac <core_set_error>
 80071e6:	e02a      	b.n	800723e <ai_platform_network_process+0x1f6>
 80071e8:	4b25      	ldr	r3, [pc, #148]	; (8007280 <ai_platform_network_process+0x238>)
 80071ea:	2201      	movs	r2, #1
 80071ec:	4618      	mov	r0, r3
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	6803      	ldr	r3, [r0, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1fc      	bne.n	80071f0 <ai_platform_network_process+0x1a8>
 80071f6:	4b23      	ldr	r3, [pc, #140]	; (8007284 <ai_platform_network_process+0x23c>)
 80071f8:	4823      	ldr	r0, [pc, #140]	; (8007288 <ai_platform_network_process+0x240>)
 80071fa:	4a24      	ldr	r2, [pc, #144]	; (800728c <ai_platform_network_process+0x244>)
 80071fc:	6018      	str	r0, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4293      	cmp	r3, r2
 8007202:	f43f af48 	beq.w	8007096 <ai_platform_network_process+0x4e>
 8007206:	e7fe      	b.n	8007206 <ai_platform_network_process+0x1be>
 8007208:	4b21      	ldr	r3, [pc, #132]	; (8007290 <ai_platform_network_process+0x248>)
 800720a:	2201      	movs	r2, #1
 800720c:	4618      	mov	r0, r3
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	6803      	ldr	r3, [r0, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1fc      	bne.n	8007210 <ai_platform_network_process+0x1c8>
 8007216:	4b1f      	ldr	r3, [pc, #124]	; (8007294 <ai_platform_network_process+0x24c>)
 8007218:	481b      	ldr	r0, [pc, #108]	; (8007288 <ai_platform_network_process+0x240>)
 800721a:	4a1c      	ldr	r2, [pc, #112]	; (800728c <ai_platform_network_process+0x244>)
 800721c:	6018      	str	r0, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4293      	cmp	r3, r2
 8007222:	f43f af38 	beq.w	8007096 <ai_platform_network_process+0x4e>
 8007226:	e7fe      	b.n	8007226 <ai_platform_network_process+0x1de>
 8007228:	2803      	cmp	r0, #3
 800722a:	6163      	str	r3, [r4, #20]
 800722c:	d10b      	bne.n	8007246 <ai_platform_network_process+0x1fe>
 800722e:	f04f 0b00 	mov.w	fp, #0
 8007232:	f104 0010 	add.w	r0, r4, #16
 8007236:	2217      	movs	r2, #23
 8007238:	2112      	movs	r1, #18
 800723a:	f000 f9b7 	bl	80075ac <core_set_error>
 800723e:	4658      	mov	r0, fp
 8007240:	b003      	add	sp, #12
 8007242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007246:	f104 0010 	add.w	r0, r4, #16
 800724a:	2230      	movs	r2, #48	; 0x30
 800724c:	2111      	movs	r1, #17
 800724e:	f000 f9ad 	bl	80075ac <core_set_error>
 8007252:	f04f 0b00 	mov.w	fp, #0
 8007256:	4658      	mov	r0, fp
 8007258:	b003      	add	sp, #12
 800725a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800725e:	f104 0010 	add.w	r0, r4, #16
 8007262:	2221      	movs	r2, #33	; 0x21
 8007264:	2112      	movs	r1, #18
 8007266:	469b      	mov	fp, r3
 8007268:	f000 f9a0 	bl	80075ac <core_set_error>
 800726c:	e7e7      	b.n	800723e <ai_platform_network_process+0x1f6>
 800726e:	bf00      	nop
 8007270:	a1c00100 	.word	0xa1c00100
 8007274:	e0002000 	.word	0xe0002000
 8007278:	e0042000 	.word	0xe0042000
 800727c:	5c001000 	.word	0x5c001000
 8007280:	58024c08 	.word	0x58024c08
 8007284:	58024c00 	.word	0x58024c00
 8007288:	f407a5c2 	.word	0xf407a5c2
 800728c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007290:	40023008 	.word	0x40023008
 8007294:	40023000 	.word	0x40023000
 8007298:	f1ba 0f00 	cmp.w	sl, #0
 800729c:	f000 808c 	beq.w	80073b8 <ai_platform_network_process+0x370>
 80072a0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	f240 813b 	bls.w	8007520 <ai_platform_network_process+0x4d8>
 80072aa:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80072ac:	f115 0f0c 	cmn.w	r5, #12
 80072b0:	f000 8136 	beq.w	8007520 <ai_platform_network_process+0x4d8>
 80072b4:	89ab      	ldrh	r3, [r5, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f000 8132 	beq.w	8007520 <ai_platform_network_process+0x4d8>
 80072bc:	4656      	mov	r6, sl
 80072be:	f04f 0900 	mov.w	r9, #0
 80072c2:	9400      	str	r4, [sp, #0]
 80072c4:	4599      	cmp	r9, r3
 80072c6:	d274      	bcs.n	80073b2 <ai_platform_network_process+0x36a>
 80072c8:	692b      	ldr	r3, [r5, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d071      	beq.n	80073b2 <ai_platform_network_process+0x36a>
 80072ce:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 80072d2:	2f00      	cmp	r7, #0
 80072d4:	d06d      	beq.n	80073b2 <ai_platform_network_process+0x36a>
 80072d6:	696b      	ldr	r3, [r5, #20]
 80072d8:	ea4f 1409 	mov.w	r4, r9, lsl #4
 80072dc:	f8d3 8000 	ldr.w	r8, [r3]
 80072e0:	eb18 0a04 	adds.w	sl, r8, r4
 80072e4:	f000 8125 	beq.w	8007532 <ai_platform_network_process+0x4ea>
 80072e8:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 80072ec:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 80072f0:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80072f4:	fb0b f30e 	mul.w	r3, fp, lr
 80072f8:	69b8      	ldr	r0, [r7, #24]
 80072fa:	fb0c f303 	mul.w	r3, ip, r3
 80072fe:	6841      	ldr	r1, [r0, #4]
 8007300:	4299      	cmp	r1, r3
 8007302:	f0c0 810c 	bcc.w	800751e <ai_platform_network_process+0x4d6>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	68da      	ldr	r2, [r3, #12]
 800730a:	455a      	cmp	r2, fp
 800730c:	f040 8107 	bne.w	800751e <ai_platform_network_process+0x4d6>
 8007310:	689a      	ldr	r2, [r3, #8]
 8007312:	4572      	cmp	r2, lr
 8007314:	f040 8103 	bne.w	800751e <ai_platform_network_process+0x4d6>
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	459c      	cmp	ip, r3
 800731c:	f040 80ff 	bne.w	800751e <ai_platform_network_process+0x4d6>
 8007320:	6800      	ldr	r0, [r0, #0]
 8007322:	f001 f813 	bl	800834c <ai_array_get_byte_size>
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	68d2      	ldr	r2, [r2, #12]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	fb03 f302 	mul.w	r3, r3, r2
 8007332:	4298      	cmp	r0, r3
 8007334:	f0c0 80f3 	bcc.w	800751e <ai_platform_network_process+0x4d6>
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	6818      	ldr	r0, [r3, #0]
 800733c:	f000 ffba 	bl	80082b4 <ai_array_to_buffer_fmt>
 8007340:	6833      	ldr	r3, [r6, #0]
 8007342:	4043      	eors	r3, r0
 8007344:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8007348:	f040 810e 	bne.w	8007568 <ai_platform_network_process+0x520>
 800734c:	6933      	ldr	r3, [r6, #16]
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 8101 	beq.w	8007556 <ai_platform_network_process+0x50e>
 8007354:	88b3      	ldrh	r3, [r6, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 80f4 	beq.w	8007544 <ai_platform_network_process+0x4fc>
 800735c:	9a01      	ldr	r2, [sp, #4]
 800735e:	68f9      	ldr	r1, [r7, #12]
 8007360:	429a      	cmp	r2, r3
 8007362:	68c9      	ldr	r1, [r1, #12]
 8007364:	bf38      	it	cc
 8007366:	461a      	movcc	r2, r3
 8007368:	9201      	str	r2, [sp, #4]
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	68d3      	ldr	r3, [r2, #12]
 800736e:	fb03 f301 	mul.w	r3, r3, r1
 8007372:	f8ca 3008 	str.w	r3, [sl, #8]
 8007376:	88b2      	ldrh	r2, [r6, #4]
 8007378:	fb03 f302 	mul.w	r3, r3, r2
 800737c:	f8ca 300c 	str.w	r3, [sl, #12]
 8007380:	6931      	ldr	r1, [r6, #16]
 8007382:	f8ca 1004 	str.w	r1, [sl, #4]
 8007386:	6932      	ldr	r2, [r6, #16]
 8007388:	4413      	add	r3, r2
 800738a:	f848 3004 	str.w	r3, [r8, r4]
 800738e:	69b8      	ldr	r0, [r7, #24]
 8007390:	6803      	ldr	r3, [r0, #0]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	d408      	bmi.n	80073a8 <ai_platform_network_process+0x360>
 8007396:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800739a:	1a9b      	subs	r3, r3, r2
 800739c:	4419      	add	r1, r3
 800739e:	6081      	str	r1, [r0, #8]
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	f8da 2004 	ldr.w	r2, [sl, #4]
 80073a6:	60da      	str	r2, [r3, #12]
 80073a8:	f109 0901 	add.w	r9, r9, #1
 80073ac:	3618      	adds	r6, #24
 80073ae:	89ab      	ldrh	r3, [r5, #12]
 80073b0:	e788      	b.n	80072c4 <ai_platform_network_process+0x27c>
 80073b2:	e9dd 4300 	ldrd	r4, r3, [sp]
 80073b6:	82a3      	strh	r3, [r4, #20]
 80073b8:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80073bc:	2a00      	cmp	r2, #0
 80073be:	f000 80a9 	beq.w	8007514 <ai_platform_network_process+0x4cc>
 80073c2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80073c4:	2a01      	cmp	r2, #1
 80073c6:	f240 80a8 	bls.w	800751a <ai_platform_network_process+0x4d2>
 80073ca:	f105 060c 	add.w	r6, r5, #12
 80073ce:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 80073d2:	8aa3      	ldrh	r3, [r4, #20]
 80073d4:	455b      	cmp	r3, fp
 80073d6:	f67f af32 	bls.w	800723e <ai_platform_network_process+0x1f6>
 80073da:	9400      	str	r4, [sp, #0]
 80073dc:	2d00      	cmp	r5, #0
 80073de:	d037      	beq.n	8007450 <ai_platform_network_process+0x408>
 80073e0:	882b      	ldrh	r3, [r5, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d034      	beq.n	8007450 <ai_platform_network_process+0x408>
 80073e6:	686b      	ldr	r3, [r5, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d031      	beq.n	8007450 <ai_platform_network_process+0x408>
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d02e      	beq.n	8007450 <ai_platform_network_process+0x408>
 80073f2:	f04f 0800 	mov.w	r8, #0
 80073f6:	e01a      	b.n	800742e <ai_platform_network_process+0x3e6>
 80073f8:	68d4      	ldr	r4, [r2, #12]
 80073fa:	1b00      	subs	r0, r0, r4
 80073fc:	4401      	add	r1, r0
 80073fe:	6091      	str	r1, [r2, #8]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	60da      	str	r2, [r3, #12]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f108 0801 	add.w	r8, r8, #1
 800740c:	68b9      	ldr	r1, [r7, #8]
 800740e:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007412:	440b      	add	r3, r1
 8007414:	4293      	cmp	r3, r2
 8007416:	d301      	bcc.n	800741c <ai_platform_network_process+0x3d4>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	607b      	str	r3, [r7, #4]
 800741e:	882b      	ldrh	r3, [r5, #0]
 8007420:	4598      	cmp	r8, r3
 8007422:	d215      	bcs.n	8007450 <ai_platform_network_process+0x408>
 8007424:	686b      	ldr	r3, [r5, #4]
 8007426:	b19b      	cbz	r3, 8007450 <ai_platform_network_process+0x408>
 8007428:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800742c:	b183      	cbz	r3, 8007450 <ai_platform_network_process+0x408>
 800742e:	68a9      	ldr	r1, [r5, #8]
 8007430:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007434:	699a      	ldr	r2, [r3, #24]
 8007436:	f8d1 a000 	ldr.w	sl, [r1]
 800743a:	6814      	ldr	r4, [r2, #0]
 800743c:	eb0a 0709 	add.w	r7, sl, r9
 8007440:	6890      	ldr	r0, [r2, #8]
 8007442:	00a4      	lsls	r4, r4, #2
 8007444:	6879      	ldr	r1, [r7, #4]
 8007446:	d5d7      	bpl.n	80073f8 <ai_platform_network_process+0x3b0>
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	f000 ffd9 	bl	8008400 <memcpy>
 800744e:	e7da      	b.n	8007406 <ai_platform_network_process+0x3be>
 8007450:	9800      	ldr	r0, [sp, #0]
 8007452:	f000 fef5 	bl	8008240 <ai_layers_forward_all>
 8007456:	2e00      	cmp	r6, #0
 8007458:	d04a      	beq.n	80074f0 <ai_platform_network_process+0x4a8>
 800745a:	8833      	ldrh	r3, [r6, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d047      	beq.n	80074f0 <ai_platform_network_process+0x4a8>
 8007460:	6873      	ldr	r3, [r6, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d044      	beq.n	80074f0 <ai_platform_network_process+0x4a8>
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d041      	beq.n	80074f0 <ai_platform_network_process+0x4a8>
 800746c:	f04f 0800 	mov.w	r8, #0
 8007470:	e019      	b.n	80074a6 <ai_platform_network_process+0x45e>
 8007472:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007476:	4291      	cmp	r1, r2
 8007478:	d301      	bcc.n	800747e <ai_platform_network_process+0x436>
 800747a:	68f9      	ldr	r1, [r7, #12]
 800747c:	1a51      	subs	r1, r2, r1
 800747e:	6079      	str	r1, [r7, #4]
 8007480:	f108 0801 	add.w	r8, r8, #1
 8007484:	6998      	ldr	r0, [r3, #24]
 8007486:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 800748a:	1b12      	subs	r2, r2, r4
 800748c:	440a      	add	r2, r1
 800748e:	6082      	str	r2, [r0, #8]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	60da      	str	r2, [r3, #12]
 8007496:	8833      	ldrh	r3, [r6, #0]
 8007498:	4598      	cmp	r8, r3
 800749a:	d229      	bcs.n	80074f0 <ai_platform_network_process+0x4a8>
 800749c:	6873      	ldr	r3, [r6, #4]
 800749e:	b33b      	cbz	r3, 80074f0 <ai_platform_network_process+0x4a8>
 80074a0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80074a4:	b323      	cbz	r3, 80074f0 <ai_platform_network_process+0x4a8>
 80074a6:	68b2      	ldr	r2, [r6, #8]
 80074a8:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80074ac:	f8d3 e018 	ldr.w	lr, [r3, #24]
 80074b0:	f8d2 a000 	ldr.w	sl, [r2]
 80074b4:	f8de 1000 	ldr.w	r1, [lr]
 80074b8:	eb0a 0709 	add.w	r7, sl, r9
 80074bc:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 80074c0:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 80074c4:	eb00 0102 	add.w	r1, r0, r2
 80074c8:	d0d3      	beq.n	8007472 <ai_platform_network_process+0x42a>
 80074ca:	f8de 1008 	ldr.w	r1, [lr, #8]
 80074ce:	f000 ff97 	bl	8008400 <memcpy>
 80074d2:	f85a 2009 	ldr.w	r2, [sl, r9]
 80074d6:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 80074da:	440b      	add	r3, r1
 80074dc:	4293      	cmp	r3, r2
 80074de:	d301      	bcc.n	80074e4 <ai_platform_network_process+0x49c>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	607b      	str	r3, [r7, #4]
 80074e6:	f108 0801 	add.w	r8, r8, #1
 80074ea:	8833      	ldrh	r3, [r6, #0]
 80074ec:	4598      	cmp	r8, r3
 80074ee:	d3d5      	bcc.n	800749c <ai_platform_network_process+0x454>
 80074f0:	9b00      	ldr	r3, [sp, #0]
 80074f2:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 80074f6:	461a      	mov	r2, r3
 80074f8:	8a9b      	ldrh	r3, [r3, #20]
 80074fa:	f10b 0b01 	add.w	fp, fp, #1
 80074fe:	fa1f fb8b 	uxth.w	fp, fp
 8007502:	455b      	cmp	r3, fp
 8007504:	f8a2 b016 	strh.w	fp, [r2, #22]
 8007508:	f63f af68 	bhi.w	80073dc <ai_platform_network_process+0x394>
 800750c:	4658      	mov	r0, fp
 800750e:	b003      	add	sp, #12
 8007510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007514:	4615      	mov	r5, r2
 8007516:	4616      	mov	r6, r2
 8007518:	e759      	b.n	80073ce <ai_platform_network_process+0x386>
 800751a:	2600      	movs	r6, #0
 800751c:	e757      	b.n	80073ce <ai_platform_network_process+0x386>
 800751e:	9c00      	ldr	r4, [sp, #0]
 8007520:	f104 0010 	add.w	r0, r4, #16
 8007524:	2218      	movs	r2, #24
 8007526:	2113      	movs	r1, #19
 8007528:	f04f 0b00 	mov.w	fp, #0
 800752c:	f000 f83e 	bl	80075ac <core_set_error>
 8007530:	e685      	b.n	800723e <ai_platform_network_process+0x1f6>
 8007532:	9c00      	ldr	r4, [sp, #0]
 8007534:	2217      	movs	r2, #23
 8007536:	2113      	movs	r1, #19
 8007538:	46d3      	mov	fp, sl
 800753a:	f104 0010 	add.w	r0, r4, #16
 800753e:	f000 f835 	bl	80075ac <core_set_error>
 8007542:	e67c      	b.n	800723e <ai_platform_network_process+0x1f6>
 8007544:	9c00      	ldr	r4, [sp, #0]
 8007546:	2221      	movs	r2, #33	; 0x21
 8007548:	2113      	movs	r1, #19
 800754a:	469b      	mov	fp, r3
 800754c:	f104 0010 	add.w	r0, r4, #16
 8007550:	f000 f82c 	bl	80075ac <core_set_error>
 8007554:	e673      	b.n	800723e <ai_platform_network_process+0x1f6>
 8007556:	9c00      	ldr	r4, [sp, #0]
 8007558:	2217      	movs	r2, #23
 800755a:	2113      	movs	r1, #19
 800755c:	469b      	mov	fp, r3
 800755e:	f104 0010 	add.w	r0, r4, #16
 8007562:	f000 f823 	bl	80075ac <core_set_error>
 8007566:	e66a      	b.n	800723e <ai_platform_network_process+0x1f6>
 8007568:	9c00      	ldr	r4, [sp, #0]
 800756a:	2219      	movs	r2, #25
 800756c:	2113      	movs	r1, #19
 800756e:	f04f 0b00 	mov.w	fp, #0
 8007572:	f104 0010 	add.w	r0, r4, #16
 8007576:	f000 f819 	bl	80075ac <core_set_error>
 800757a:	e660      	b.n	800723e <ai_platform_network_process+0x1f6>
 800757c:	f104 0010 	add.w	r0, r4, #16
 8007580:	2217      	movs	r2, #23
 8007582:	2112      	movs	r1, #18
 8007584:	469b      	mov	fp, r3
 8007586:	f000 f811 	bl	80075ac <core_set_error>
 800758a:	e658      	b.n	800723e <ai_platform_network_process+0x1f6>
 800758c:	f104 0010 	add.w	r0, r4, #16
 8007590:	2219      	movs	r2, #25
 8007592:	2112      	movs	r1, #18
 8007594:	f04f 0b00 	mov.w	fp, #0
 8007598:	f000 f808 	bl	80075ac <core_set_error>
 800759c:	e64f      	b.n	800723e <ai_platform_network_process+0x1f6>
 800759e:	f1ba 0f00 	cmp.w	sl, #0
 80075a2:	f47f ae7f 	bne.w	80072a4 <ai_platform_network_process+0x25c>
 80075a6:	e70d      	b.n	80073c4 <ai_platform_network_process+0x37c>

080075a8 <core_init>:
 80075a8:	2001      	movs	r0, #1
 80075aa:	4770      	bx	lr

080075ac <core_set_error>:
 80075ac:	4603      	mov	r3, r0
 80075ae:	7800      	ldrb	r0, [r0, #0]
 80075b0:	b930      	cbnz	r0, 80075c0 <core_set_error+0x14>
 80075b2:	7019      	strb	r1, [r3, #0]
 80075b4:	2001      	movs	r0, #1
 80075b6:	6819      	ldr	r1, [r3, #0]
 80075b8:	f362 211f 	bfi	r1, r2, #8, #24
 80075bc:	6019      	str	r1, [r3, #0]
 80075be:	4770      	bx	lr
 80075c0:	2000      	movs	r0, #0
 80075c2:	4770      	bx	lr

080075c4 <ai_dict8_dot_array_f32>:
 80075c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075c8:	9d06      	ldr	r5, [sp, #24]
 80075ca:	4c88      	ldr	r4, [pc, #544]	; (80077ec <ai_dict8_dot_array_f32+0x228>)
 80075cc:	2d07      	cmp	r5, #7
 80075ce:	442c      	add	r4, r5
 80075d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80075d4:	f104 0620 	add.w	r6, r4, #32
 80075d8:	d817      	bhi.n	800760a <ai_dict8_dot_array_f32+0x46>
 80075da:	42b3      	cmp	r3, r6
 80075dc:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80077f0 <ai_dict8_dot_array_f32+0x22c>
 80075e0:	d20b      	bcs.n	80075fa <ai_dict8_dot_array_f32+0x36>
 80075e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075e6:	ecf3 7a01 	vldmia	r3!, {s15}
 80075ea:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80075ee:	42b3      	cmp	r3, r6
 80075f0:	edd4 6a00 	vldr	s13, [r4]
 80075f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075f8:	d3f3      	bcc.n	80075e2 <ai_dict8_dot_array_f32+0x1e>
 80075fa:	edd0 7a00 	vldr	s15, [r0]
 80075fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007602:	ed80 7a00 	vstr	s14, [r0]
 8007606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800760a:	f001 0503 	and.w	r5, r1, #3
 800760e:	2d02      	cmp	r5, #2
 8007610:	f000 80f0 	beq.w	80077f4 <ai_dict8_dot_array_f32+0x230>
 8007614:	2d03      	cmp	r5, #3
 8007616:	f000 81ff 	beq.w	8007a18 <ai_dict8_dot_array_f32+0x454>
 800761a:	2d01      	cmp	r5, #1
 800761c:	f000 81f0 	beq.w	8007a00 <ai_dict8_dot_array_f32+0x43c>
 8007620:	42a3      	cmp	r3, r4
 8007622:	f200 81fc 	bhi.w	8007a1e <ai_dict8_dot_array_f32+0x45a>
 8007626:	1ae4      	subs	r4, r4, r3
 8007628:	f101 0810 	add.w	r8, r1, #16
 800762c:	f101 0508 	add.w	r5, r1, #8
 8007630:	f103 0720 	add.w	r7, r3, #32
 8007634:	0964      	lsrs	r4, r4, #5
 8007636:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80077f0 <ai_dict8_dot_array_f32+0x22c>
 800763a:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 800763e:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 8007642:	3508      	adds	r5, #8
 8007644:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 8007648:	3720      	adds	r7, #32
 800764a:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800764e:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 8007652:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8007656:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 800765a:	edde 7a00 	vldr	s15, [lr]
 800765e:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 8007662:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007666:	eddc 5a00 	vldr	s11, [ip]
 800766a:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 800766e:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 8007672:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007676:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800767a:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 800767e:	ed9c 4a00 	vldr	s8, [ip]
 8007682:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 8007686:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800768a:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 800768e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8007692:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 8007696:	eee4 7a26 	vfma.f32	s15, s8, s13
 800769a:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 800769e:	ed9c 4a00 	vldr	s8, [ip]
 80076a2:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 80076a6:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 80076aa:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80076ae:	eee4 7a05 	vfma.f32	s15, s8, s10
 80076b2:	ed9e 5a00 	vldr	s10, [lr]
 80076b6:	ed9c 4a00 	vldr	s8, [ip]
 80076ba:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 80076be:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 80076c2:	4545      	cmp	r5, r8
 80076c4:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 80076c8:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80076cc:	eee5 7a06 	vfma.f32	s15, s10, s12
 80076d0:	ed9e 5a00 	vldr	s10, [lr]
 80076d4:	ed9c 6a00 	vldr	s12, [ip]
 80076d8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80076dc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80076e0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80076e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80076e8:	d1a9      	bne.n	800763e <ai_dict8_dot_array_f32+0x7a>
 80076ea:	3401      	adds	r4, #1
 80076ec:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80076f0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80076f4:	42b3      	cmp	r3, r6
 80076f6:	d280      	bcs.n	80075fa <ai_dict8_dot_array_f32+0x36>
 80076f8:	461c      	mov	r4, r3
 80076fa:	780d      	ldrb	r5, [r1, #0]
 80076fc:	ecf4 6a01 	vldmia	r4!, {s13}
 8007700:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007704:	42a6      	cmp	r6, r4
 8007706:	edd5 7a00 	vldr	s15, [r5]
 800770a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800770e:	f67f af74 	bls.w	80075fa <ai_dict8_dot_array_f32+0x36>
 8007712:	784d      	ldrb	r5, [r1, #1]
 8007714:	f103 0408 	add.w	r4, r3, #8
 8007718:	edd3 6a01 	vldr	s13, [r3, #4]
 800771c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007720:	42a6      	cmp	r6, r4
 8007722:	edd5 7a00 	vldr	s15, [r5]
 8007726:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800772a:	f67f af66 	bls.w	80075fa <ai_dict8_dot_array_f32+0x36>
 800772e:	788d      	ldrb	r5, [r1, #2]
 8007730:	f103 040c 	add.w	r4, r3, #12
 8007734:	edd3 6a02 	vldr	s13, [r3, #8]
 8007738:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800773c:	42a6      	cmp	r6, r4
 800773e:	edd5 7a00 	vldr	s15, [r5]
 8007742:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007746:	f67f af58 	bls.w	80075fa <ai_dict8_dot_array_f32+0x36>
 800774a:	78cd      	ldrb	r5, [r1, #3]
 800774c:	f103 0410 	add.w	r4, r3, #16
 8007750:	edd3 6a03 	vldr	s13, [r3, #12]
 8007754:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007758:	42a6      	cmp	r6, r4
 800775a:	edd5 7a00 	vldr	s15, [r5]
 800775e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007762:	f67f af4a 	bls.w	80075fa <ai_dict8_dot_array_f32+0x36>
 8007766:	790d      	ldrb	r5, [r1, #4]
 8007768:	f103 0414 	add.w	r4, r3, #20
 800776c:	edd3 6a04 	vldr	s13, [r3, #16]
 8007770:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007774:	42a6      	cmp	r6, r4
 8007776:	edd5 7a00 	vldr	s15, [r5]
 800777a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800777e:	f67f af3c 	bls.w	80075fa <ai_dict8_dot_array_f32+0x36>
 8007782:	794d      	ldrb	r5, [r1, #5]
 8007784:	f103 0418 	add.w	r4, r3, #24
 8007788:	edd3 6a05 	vldr	s13, [r3, #20]
 800778c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007790:	42a6      	cmp	r6, r4
 8007792:	edd5 7a00 	vldr	s15, [r5]
 8007796:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800779a:	f67f af2e 	bls.w	80075fa <ai_dict8_dot_array_f32+0x36>
 800779e:	798d      	ldrb	r5, [r1, #6]
 80077a0:	f103 041c 	add.w	r4, r3, #28
 80077a4:	edd3 6a06 	vldr	s13, [r3, #24]
 80077a8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80077ac:	42a6      	cmp	r6, r4
 80077ae:	edd5 7a00 	vldr	s15, [r5]
 80077b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077b6:	f67f af20 	bls.w	80075fa <ai_dict8_dot_array_f32+0x36>
 80077ba:	79cd      	ldrb	r5, [r1, #7]
 80077bc:	f103 0420 	add.w	r4, r3, #32
 80077c0:	edd3 6a07 	vldr	s13, [r3, #28]
 80077c4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80077c8:	42a6      	cmp	r6, r4
 80077ca:	edd5 7a00 	vldr	s15, [r5]
 80077ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077d2:	f67f af12 	bls.w	80075fa <ai_dict8_dot_array_f32+0x36>
 80077d6:	7a09      	ldrb	r1, [r1, #8]
 80077d8:	edd3 7a08 	vldr	s15, [r3, #32]
 80077dc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80077e0:	edd2 6a00 	vldr	s13, [r2]
 80077e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077e8:	e707      	b.n	80075fa <ai_dict8_dot_array_f32+0x36>
 80077ea:	bf00      	nop
 80077ec:	3ffffff8 	.word	0x3ffffff8
 80077f0:	00000000 	.word	0x00000000
 80077f4:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 80077f0 <ai_dict8_dot_array_f32+0x22c>
 80077f8:	780d      	ldrb	r5, [r1, #0]
 80077fa:	3304      	adds	r3, #4
 80077fc:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007800:	3101      	adds	r1, #1
 8007802:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007806:	edd5 6a00 	vldr	s13, [r5]
 800780a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800780e:	780d      	ldrb	r5, [r1, #0]
 8007810:	1d1f      	adds	r7, r3, #4
 8007812:	edd3 7a00 	vldr	s15, [r3]
 8007816:	f101 0c01 	add.w	ip, r1, #1
 800781a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800781e:	42bc      	cmp	r4, r7
 8007820:	edd5 6a00 	vldr	s13, [r5]
 8007824:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007828:	d365      	bcc.n	80078f6 <ai_dict8_dot_array_f32+0x332>
 800782a:	3324      	adds	r3, #36	; 0x24
 800782c:	f101 0e11 	add.w	lr, r1, #17
 8007830:	3109      	adds	r1, #9
 8007832:	eba6 0803 	sub.w	r8, r6, r3
 8007836:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800783a:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 800783e:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8007842:	3108      	adds	r1, #8
 8007844:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 8007848:	3320      	adds	r3, #32
 800784a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800784e:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8007852:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007856:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 800785a:	edd5 7a00 	vldr	s15, [r5]
 800785e:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 8007862:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007866:	edd4 5a00 	vldr	s11, [r4]
 800786a:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 800786e:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 8007872:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007876:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800787a:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800787e:	ed94 4a00 	vldr	s8, [r4]
 8007882:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 8007886:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800788a:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 800788e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007892:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 8007896:	eee4 7a26 	vfma.f32	s15, s8, s13
 800789a:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 800789e:	ed94 4a00 	vldr	s8, [r4]
 80078a2:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 80078a6:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 80078aa:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80078ae:	eee4 7a05 	vfma.f32	s15, s8, s10
 80078b2:	ed95 5a00 	vldr	s10, [r5]
 80078b6:	ed94 4a00 	vldr	s8, [r4]
 80078ba:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80078be:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 80078c2:	458e      	cmp	lr, r1
 80078c4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80078c8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80078cc:	eee5 7a06 	vfma.f32	s15, s10, s12
 80078d0:	ed95 5a00 	vldr	s10, [r5]
 80078d4:	ed94 6a00 	vldr	s12, [r4]
 80078d8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80078dc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80078e0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80078e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078e8:	d1a9      	bne.n	800783e <ai_dict8_dot_array_f32+0x27a>
 80078ea:	f108 0801 	add.w	r8, r8, #1
 80078ee:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 80078f2:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 80078f6:	42b7      	cmp	r7, r6
 80078f8:	f4bf ae7f 	bcs.w	80075fa <ai_dict8_dot_array_f32+0x36>
 80078fc:	463b      	mov	r3, r7
 80078fe:	f89c 1000 	ldrb.w	r1, [ip]
 8007902:	ecf3 6a01 	vldmia	r3!, {s13}
 8007906:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800790a:	429e      	cmp	r6, r3
 800790c:	edd1 7a00 	vldr	s15, [r1]
 8007910:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007914:	f67f ae71 	bls.w	80075fa <ai_dict8_dot_array_f32+0x36>
 8007918:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800791c:	f107 0308 	add.w	r3, r7, #8
 8007920:	edd7 6a01 	vldr	s13, [r7, #4]
 8007924:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8007928:	429e      	cmp	r6, r3
 800792a:	edd1 7a00 	vldr	s15, [r1]
 800792e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007932:	f67f ae62 	bls.w	80075fa <ai_dict8_dot_array_f32+0x36>
 8007936:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800793a:	f107 030c 	add.w	r3, r7, #12
 800793e:	edd7 6a02 	vldr	s13, [r7, #8]
 8007942:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8007946:	429e      	cmp	r6, r3
 8007948:	edd1 7a00 	vldr	s15, [r1]
 800794c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007950:	f67f ae53 	bls.w	80075fa <ai_dict8_dot_array_f32+0x36>
 8007954:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8007958:	f107 0310 	add.w	r3, r7, #16
 800795c:	edd7 6a03 	vldr	s13, [r7, #12]
 8007960:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8007964:	429e      	cmp	r6, r3
 8007966:	edd1 7a00 	vldr	s15, [r1]
 800796a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800796e:	f67f ae44 	bls.w	80075fa <ai_dict8_dot_array_f32+0x36>
 8007972:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8007976:	f107 0314 	add.w	r3, r7, #20
 800797a:	edd7 6a04 	vldr	s13, [r7, #16]
 800797e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8007982:	429e      	cmp	r6, r3
 8007984:	edd1 7a00 	vldr	s15, [r1]
 8007988:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800798c:	f67f ae35 	bls.w	80075fa <ai_dict8_dot_array_f32+0x36>
 8007990:	f89c 1005 	ldrb.w	r1, [ip, #5]
 8007994:	f107 0318 	add.w	r3, r7, #24
 8007998:	edd7 6a05 	vldr	s13, [r7, #20]
 800799c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80079a0:	429e      	cmp	r6, r3
 80079a2:	edd1 7a00 	vldr	s15, [r1]
 80079a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80079aa:	f67f ae26 	bls.w	80075fa <ai_dict8_dot_array_f32+0x36>
 80079ae:	f89c 1006 	ldrb.w	r1, [ip, #6]
 80079b2:	f107 031c 	add.w	r3, r7, #28
 80079b6:	edd7 6a06 	vldr	s13, [r7, #24]
 80079ba:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80079be:	429e      	cmp	r6, r3
 80079c0:	edd1 7a00 	vldr	s15, [r1]
 80079c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80079c8:	f67f ae17 	bls.w	80075fa <ai_dict8_dot_array_f32+0x36>
 80079cc:	f89c 1007 	ldrb.w	r1, [ip, #7]
 80079d0:	f107 0320 	add.w	r3, r7, #32
 80079d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80079d8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80079dc:	429e      	cmp	r6, r3
 80079de:	edd1 7a00 	vldr	s15, [r1]
 80079e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80079e6:	f67f ae08 	bls.w	80075fa <ai_dict8_dot_array_f32+0x36>
 80079ea:	f89c 3008 	ldrb.w	r3, [ip, #8]
 80079ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80079f2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80079f6:	edd2 6a00 	vldr	s13, [r2]
 80079fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80079fe:	e5fc      	b.n	80075fa <ai_dict8_dot_array_f32+0x36>
 8007a00:	780d      	ldrb	r5, [r1, #0]
 8007a02:	3304      	adds	r3, #4
 8007a04:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007a08:	3101      	adds	r1, #1
 8007a0a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007a0e:	ed95 7a00 	vldr	s14, [r5]
 8007a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007a16:	e6ef      	b.n	80077f8 <ai_dict8_dot_array_f32+0x234>
 8007a18:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 80077f0 <ai_dict8_dot_array_f32+0x22c>
 8007a1c:	e6f7      	b.n	800780e <ai_dict8_dot_array_f32+0x24a>
 8007a1e:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 80077f0 <ai_dict8_dot_array_f32+0x22c>
 8007a22:	e667      	b.n	80076f4 <ai_dict8_dot_array_f32+0x130>

08007a24 <ai_dict4_dot_array_f32>:
 8007a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a28:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007a2a:	f027 0c01 	bic.w	ip, r7, #1
 8007a2e:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8007a32:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8007a36:	f000 80ad 	beq.w	8007b94 <ai_dict4_dot_array_f32+0x170>
 8007a3a:	1d0d      	adds	r5, r1, #4
 8007a3c:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8007a40:	f103 0420 	add.w	r4, r3, #32
 8007a44:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8007b9c <ai_dict4_dot_array_f32+0x178>
 8007a48:	eb05 0e09 	add.w	lr, r5, r9
 8007a4c:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8007a50:	3504      	adds	r5, #4
 8007a52:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 8007a56:	3420      	adds	r4, #32
 8007a58:	f006 0a0f 	and.w	sl, r6, #15
 8007a5c:	0936      	lsrs	r6, r6, #4
 8007a5e:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8007a62:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007a66:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 8007a6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007a6e:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 8007a72:	edda 7a00 	vldr	s15, [sl]
 8007a76:	edd6 5a00 	vldr	s11, [r6]
 8007a7a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8007a7e:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 8007a82:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 8007a86:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8007a8a:	f006 060f 	and.w	r6, r6, #15
 8007a8e:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8007a92:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 8007a96:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007a9a:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 8007a9e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007aa2:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 8007aa6:	ed9a 3a00 	vldr	s6, [sl]
 8007aaa:	ed96 5a00 	vldr	s10, [r6]
 8007aae:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 8007ab2:	eee3 7a04 	vfma.f32	s15, s6, s8
 8007ab6:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 8007aba:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8007abe:	f00a 0a0f 	and.w	sl, sl, #15
 8007ac2:	45ae      	cmp	lr, r5
 8007ac4:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8007ac8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007acc:	ed9b 3a00 	vldr	s6, [fp]
 8007ad0:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 8007ad4:	eee5 7a06 	vfma.f32	s15, s10, s12
 8007ad8:	ed9a 4a00 	vldr	s8, [sl]
 8007adc:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 8007ae0:	f006 060f 	and.w	r6, r6, #15
 8007ae4:	ed9a 5a00 	vldr	s10, [sl]
 8007ae8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007aec:	ed96 6a00 	vldr	s12, [r6]
 8007af0:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007af4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007af8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007afc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b04:	d1a2      	bne.n	8007a4c <ai_dict4_dot_array_f32+0x28>
 8007b06:	4449      	add	r1, r9
 8007b08:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8007b0c:	459c      	cmp	ip, r3
 8007b0e:	d92d      	bls.n	8007b6c <ai_dict4_dot_array_f32+0x148>
 8007b10:	f10c 0c07 	add.w	ip, ip, #7
 8007b14:	f103 0508 	add.w	r5, r3, #8
 8007b18:	f103 0810 	add.w	r8, r3, #16
 8007b1c:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8007b20:	ebac 0c05 	sub.w	ip, ip, r5
 8007b24:	f02c 0407 	bic.w	r4, ip, #7
 8007b28:	44a0      	add	r8, r4
 8007b2a:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8007b2e:	3508      	adds	r5, #8
 8007b30:	ed55 5a03 	vldr	s11, [r5, #-12]
 8007b34:	f004 060f 	and.w	r6, r4, #15
 8007b38:	0924      	lsrs	r4, r4, #4
 8007b3a:	ed55 6a04 	vldr	s13, [r5, #-16]
 8007b3e:	45a8      	cmp	r8, r5
 8007b40:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007b44:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007b48:	edd6 7a00 	vldr	s15, [r6]
 8007b4c:	ed94 6a00 	vldr	s12, [r4]
 8007b50:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007b54:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007b58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b5c:	d1e5      	bne.n	8007b2a <ai_dict4_dot_array_f32+0x106>
 8007b5e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8007b62:	f10c 0c01 	add.w	ip, ip, #1
 8007b66:	4461      	add	r1, ip
 8007b68:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8007b6c:	07fc      	lsls	r4, r7, #31
 8007b6e:	d509      	bpl.n	8007b84 <ai_dict4_dot_array_f32+0x160>
 8007b70:	7809      	ldrb	r1, [r1, #0]
 8007b72:	edd3 7a00 	vldr	s15, [r3]
 8007b76:	090b      	lsrs	r3, r1, #4
 8007b78:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007b7c:	edd2 6a00 	vldr	s13, [r2]
 8007b80:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007b84:	edd0 7a00 	vldr	s15, [r0]
 8007b88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b8c:	ed80 7a00 	vstr	s14, [r0]
 8007b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b94:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8007b9c <ai_dict4_dot_array_f32+0x178>
 8007b98:	e7b8      	b.n	8007b0c <ai_dict4_dot_array_f32+0xe8>
 8007b9a:	bf00      	nop
 8007b9c:	00000000 	.word	0x00000000

08007ba0 <forward_dense>:
 8007ba0:	6942      	ldr	r2, [r0, #20]
 8007ba2:	8813      	ldrh	r3, [r2, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f000 81c8 	beq.w	8007f3a <forward_dense+0x39a>
 8007baa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bae:	ed2d 8b08 	vpush	{d8-d11}
 8007bb2:	6851      	ldr	r1, [r2, #4]
 8007bb4:	b091      	sub	sp, #68	; 0x44
 8007bb6:	684d      	ldr	r5, [r1, #4]
 8007bb8:	b105      	cbz	r5, 8007bbc <forward_dense+0x1c>
 8007bba:	682d      	ldr	r5, [r5, #0]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	f240 81b9 	bls.w	8007f34 <forward_dense+0x394>
 8007bc2:	690a      	ldr	r2, [r1, #16]
 8007bc4:	b102      	cbz	r2, 8007bc8 <forward_dense+0x28>
 8007bc6:	6812      	ldr	r2, [r2, #0]
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	f000 81b8 	beq.w	8007f3e <forward_dense+0x39e>
 8007bce:	69cb      	ldr	r3, [r1, #28]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 8209 	beq.w	8007fe8 <forward_dense+0x448>
 8007bd6:	6818      	ldr	r0, [r3, #0]
 8007bd8:	9008      	str	r0, [sp, #32]
 8007bda:	f111 0018 	adds.w	r0, r1, #24
 8007bde:	f000 81dc 	beq.w	8007f9a <forward_dense+0x3fa>
 8007be2:	8b09      	ldrh	r1, [r1, #24]
 8007be4:	2901      	cmp	r1, #1
 8007be6:	f240 81fc 	bls.w	8007fe2 <forward_dense+0x442>
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 81d7 	beq.w	8007f9e <forward_dense+0x3fe>
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	9306      	str	r3, [sp, #24]
 8007bf4:	9b08      	ldr	r3, [sp, #32]
 8007bf6:	68d6      	ldr	r6, [r2, #12]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	68b0      	ldr	r0, [r6, #8]
 8007bfc:	681f      	ldr	r7, [r3, #0]
 8007bfe:	68f4      	ldr	r4, [r6, #12]
 8007c00:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 8007c04:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 8007c08:	f3c7 4743 	ubfx	r7, r7, #17, #4
 8007c0c:	fb04 f000 	mul.w	r0, r4, r0
 8007c10:	fa4e f10c 	asr.w	r1, lr, ip
 8007c14:	2f04      	cmp	r7, #4
 8007c16:	9007      	str	r0, [sp, #28]
 8007c18:	910b      	str	r1, [sp, #44]	; 0x2c
 8007c1a:	68e9      	ldr	r1, [r5, #12]
 8007c1c:	6870      	ldr	r0, [r6, #4]
 8007c1e:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8007c22:	f000 81db 	beq.w	8007fdc <forward_dense+0x43c>
 8007c26:	2f08      	cmp	r7, #8
 8007c28:	f000 81d8 	beq.w	8007fdc <forward_dense+0x43c>
 8007c2c:	f04f 0a00 	mov.w	sl, #0
 8007c30:	6992      	ldr	r2, [r2, #24]
 8007c32:	0080      	lsls	r0, r0, #2
 8007c34:	69a9      	ldr	r1, [r5, #24]
 8007c36:	6894      	ldr	r4, [r2, #8]
 8007c38:	9a08      	ldr	r2, [sp, #32]
 8007c3a:	9009      	str	r0, [sp, #36]	; 0x24
 8007c3c:	1826      	adds	r6, r4, r0
 8007c3e:	6952      	ldr	r2, [r2, #20]
 8007c40:	9404      	str	r4, [sp, #16]
 8007c42:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8007c46:	9a07      	ldr	r2, [sp, #28]
 8007c48:	688f      	ldr	r7, [r1, #8]
 8007c4a:	2a00      	cmp	r2, #0
 8007c4c:	f000 81c1 	beq.w	8007fd2 <forward_dense+0x432>
 8007c50:	f1a8 0210 	sub.w	r2, r8, #16
 8007c54:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8007c58:	689d      	ldr	r5, [r3, #8]
 8007c5a:	0912      	lsrs	r2, r2, #4
 8007c5c:	910a      	str	r1, [sp, #40]	; 0x28
 8007c5e:	2100      	movs	r1, #0
 8007c60:	9b06      	ldr	r3, [sp, #24]
 8007c62:	3201      	adds	r2, #1
 8007c64:	eddf 2acf 	vldr	s5, [pc, #828]	; 8007fa4 <forward_dense+0x404>
 8007c68:	9105      	str	r1, [sp, #20]
 8007c6a:	f008 010f 	and.w	r1, r8, #15
 8007c6e:	0192      	lsls	r2, r2, #6
 8007c70:	910d      	str	r1, [sp, #52]	; 0x34
 8007c72:	920c      	str	r2, [sp, #48]	; 0x30
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d042      	beq.n	8007cfe <forward_dense+0x15e>
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	689c      	ldr	r4, [r3, #8]
 8007c7c:	9b04      	ldr	r3, [sp, #16]
 8007c7e:	f1ba 0f00 	cmp.w	sl, #0
 8007c82:	d041      	beq.n	8007d08 <forward_dense+0x168>
 8007c84:	42b3      	cmp	r3, r6
 8007c86:	d229      	bcs.n	8007cdc <forward_dense+0x13c>
 8007c88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c8a:	469b      	mov	fp, r3
 8007c8c:	ab0f      	add	r3, sp, #60	; 0x3c
 8007c8e:	2a04      	cmp	r2, #4
 8007c90:	9303      	str	r3, [sp, #12]
 8007c92:	4633      	mov	r3, r6
 8007c94:	4646      	mov	r6, r8
 8007c96:	4698      	mov	r8, r3
 8007c98:	f000 8154 	beq.w	8007f44 <forward_dense+0x3a4>
 8007c9c:	2c00      	cmp	r4, #0
 8007c9e:	f000 8183 	beq.w	8007fa8 <forward_dense+0x408>
 8007ca2:	f8d4 c000 	ldr.w	ip, [r4]
 8007ca6:	463b      	mov	r3, r7
 8007ca8:	4629      	mov	r1, r5
 8007caa:	9600      	str	r6, [sp, #0]
 8007cac:	4652      	mov	r2, sl
 8007cae:	9803      	ldr	r0, [sp, #12]
 8007cb0:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8007cb4:	f7ff fc86 	bl	80075c4 <ai_dict8_dot_array_f32>
 8007cb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cba:	3404      	adds	r4, #4
 8007cbc:	444d      	add	r5, r9
 8007cbe:	f84b 3b04 	str.w	r3, [fp], #4
 8007cc2:	45c3      	cmp	fp, r8
 8007cc4:	d3ea      	bcc.n	8007c9c <forward_dense+0xfc>
 8007cc6:	4643      	mov	r3, r8
 8007cc8:	46b0      	mov	r8, r6
 8007cca:	461e      	mov	r6, r3
 8007ccc:	9a04      	ldr	r2, [sp, #16]
 8007cce:	43d3      	mvns	r3, r2
 8007cd0:	4433      	add	r3, r6
 8007cd2:	f023 0303 	bic.w	r3, r3, #3
 8007cd6:	3304      	adds	r3, #4
 8007cd8:	18d3      	adds	r3, r2, r3
 8007cda:	9304      	str	r3, [sp, #16]
 8007cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cde:	9b05      	ldr	r3, [sp, #20]
 8007ce0:	4417      	add	r7, r2
 8007ce2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	4416      	add	r6, r2
 8007ce8:	9a07      	ldr	r2, [sp, #28]
 8007cea:	9305      	str	r3, [sp, #20]
 8007cec:	4293      	cmp	r3, r2
 8007cee:	f000 8170 	beq.w	8007fd2 <forward_dense+0x432>
 8007cf2:	9b08      	ldr	r3, [sp, #32]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	689d      	ldr	r5, [r3, #8]
 8007cf8:	9b06      	ldr	r3, [sp, #24]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1bc      	bne.n	8007c78 <forward_dense+0xd8>
 8007cfe:	461c      	mov	r4, r3
 8007d00:	9b04      	ldr	r3, [sp, #16]
 8007d02:	f1ba 0f00 	cmp.w	sl, #0
 8007d06:	d1bd      	bne.n	8007c84 <forward_dense+0xe4>
 8007d08:	42b3      	cmp	r3, r6
 8007d0a:	d2e7      	bcs.n	8007cdc <forward_dense+0x13c>
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d10:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8007d14:	eb07 0c03 	add.w	ip, r7, r3
 8007d18:	469e      	mov	lr, r3
 8007d1a:	2c00      	cmp	r4, #0
 8007d1c:	f000 80fe 	beq.w	8007f1c <forward_dense+0x37c>
 8007d20:	f1b8 0f0f 	cmp.w	r8, #15
 8007d24:	ed94 6a00 	vldr	s12, [r4]
 8007d28:	f104 0404 	add.w	r4, r4, #4
 8007d2c:	f240 80fc 	bls.w	8007f28 <forward_dense+0x388>
 8007d30:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007d34:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8007d38:	4641      	mov	r1, r8
 8007d3a:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8007fa4 <forward_dense+0x404>
 8007d3e:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 8007d42:	3910      	subs	r1, #16
 8007d44:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8007d48:	3240      	adds	r2, #64	; 0x40
 8007d4a:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8007d4e:	290f      	cmp	r1, #15
 8007d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d54:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 8007d58:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 8007d5c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8007d60:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 8007d64:	eee5 7a87 	vfma.f32	s15, s11, s14
 8007d68:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 8007d6c:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 8007d70:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 8007d74:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 8007d78:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8007d7c:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 8007d80:	eee2 7a03 	vfma.f32	s15, s4, s6
 8007d84:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 8007d88:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 8007d8c:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 8007d90:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 8007d94:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 8007d98:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 8007d9c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007da0:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 8007da4:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 8007da8:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 8007dac:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 8007db0:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 8007db4:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 8007db8:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007dbc:	ed13 2a14 	vldr	s4, [r3, #-80]	; 0xffffffb0
 8007dc0:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8007dc4:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 8007dc8:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 8007dcc:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 8007dd0:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 8007dd4:	eee5 7a87 	vfma.f32	s15, s11, s14
 8007dd8:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8007ddc:	ed12 7a11 	vldr	s14, [r2, #-68]	; 0xffffffbc
 8007de0:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8007de4:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8007de8:	eee9 7a89 	vfma.f32	s15, s19, s18
 8007dec:	eee8 7a88 	vfma.f32	s15, s17, s16
 8007df0:	eee0 7a20 	vfma.f32	s15, s0, s1
 8007df4:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007df8:	eee2 7a03 	vfma.f32	s15, s4, s6
 8007dfc:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007e00:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007e04:	eee5 7a87 	vfma.f32	s15, s11, s14
 8007e08:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007e0c:	d897      	bhi.n	8007d3e <forward_dense+0x19e>
 8007e0e:	eb05 010e 	add.w	r1, r5, lr
 8007e12:	465b      	mov	r3, fp
 8007e14:	4662      	mov	r2, ip
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d075      	beq.n	8007f06 <forward_dense+0x366>
 8007e1a:	ed91 7a00 	vldr	s14, [r1]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	edd2 7a00 	vldr	s15, [r2]
 8007e24:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007e28:	d06d      	beq.n	8007f06 <forward_dense+0x366>
 8007e2a:	ed91 7a01 	vldr	s14, [r1, #4]
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	edd2 7a01 	vldr	s15, [r2, #4]
 8007e34:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007e38:	d065      	beq.n	8007f06 <forward_dense+0x366>
 8007e3a:	ed91 7a02 	vldr	s14, [r1, #8]
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	edd2 7a02 	vldr	s15, [r2, #8]
 8007e44:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007e48:	d05d      	beq.n	8007f06 <forward_dense+0x366>
 8007e4a:	ed91 7a03 	vldr	s14, [r1, #12]
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	edd2 7a03 	vldr	s15, [r2, #12]
 8007e54:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007e58:	d055      	beq.n	8007f06 <forward_dense+0x366>
 8007e5a:	ed91 7a04 	vldr	s14, [r1, #16]
 8007e5e:	2b05      	cmp	r3, #5
 8007e60:	edd2 7a04 	vldr	s15, [r2, #16]
 8007e64:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007e68:	d04d      	beq.n	8007f06 <forward_dense+0x366>
 8007e6a:	ed91 7a05 	vldr	s14, [r1, #20]
 8007e6e:	2b06      	cmp	r3, #6
 8007e70:	edd2 7a05 	vldr	s15, [r2, #20]
 8007e74:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007e78:	d045      	beq.n	8007f06 <forward_dense+0x366>
 8007e7a:	ed91 7a06 	vldr	s14, [r1, #24]
 8007e7e:	2b07      	cmp	r3, #7
 8007e80:	edd2 7a06 	vldr	s15, [r2, #24]
 8007e84:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007e88:	d03d      	beq.n	8007f06 <forward_dense+0x366>
 8007e8a:	ed91 7a07 	vldr	s14, [r1, #28]
 8007e8e:	2b08      	cmp	r3, #8
 8007e90:	edd2 7a07 	vldr	s15, [r2, #28]
 8007e94:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007e98:	d035      	beq.n	8007f06 <forward_dense+0x366>
 8007e9a:	ed91 7a08 	vldr	s14, [r1, #32]
 8007e9e:	2b09      	cmp	r3, #9
 8007ea0:	edd2 7a08 	vldr	s15, [r2, #32]
 8007ea4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007ea8:	d02d      	beq.n	8007f06 <forward_dense+0x366>
 8007eaa:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8007eae:	2b0a      	cmp	r3, #10
 8007eb0:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8007eb4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007eb8:	d025      	beq.n	8007f06 <forward_dense+0x366>
 8007eba:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8007ebe:	2b0b      	cmp	r3, #11
 8007ec0:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8007ec4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007ec8:	d01d      	beq.n	8007f06 <forward_dense+0x366>
 8007eca:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8007ece:	2b0c      	cmp	r3, #12
 8007ed0:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8007ed4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007ed8:	d015      	beq.n	8007f06 <forward_dense+0x366>
 8007eda:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8007ede:	2b0d      	cmp	r3, #13
 8007ee0:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8007ee4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007ee8:	d00d      	beq.n	8007f06 <forward_dense+0x366>
 8007eea:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8007eee:	2b0e      	cmp	r3, #14
 8007ef0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8007ef4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007ef8:	d005      	beq.n	8007f06 <forward_dense+0x366>
 8007efa:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8007efe:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8007f02:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007f06:	ee76 6a26 	vadd.f32	s13, s12, s13
 8007f0a:	444d      	add	r5, r9
 8007f0c:	ece0 6a01 	vstmia	r0!, {s13}
 8007f10:	42b0      	cmp	r0, r6
 8007f12:	f4bf aedb 	bcs.w	8007ccc <forward_dense+0x12c>
 8007f16:	2c00      	cmp	r4, #0
 8007f18:	f47f af02 	bne.w	8007d20 <forward_dense+0x180>
 8007f1c:	f1b8 0f0f 	cmp.w	r8, #15
 8007f20:	eeb0 6a62 	vmov.f32	s12, s5
 8007f24:	f63f af04 	bhi.w	8007d30 <forward_dense+0x190>
 8007f28:	4643      	mov	r3, r8
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	463a      	mov	r2, r7
 8007f2e:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8007fa4 <forward_dense+0x404>
 8007f32:	e770      	b.n	8007e16 <forward_dense+0x276>
 8007f34:	2300      	movs	r3, #0
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	deff      	udf	#255	; 0xff
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	deff      	udf	#255	; 0xff
 8007f3e:	2300      	movs	r3, #0
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	deff      	udf	#255	; 0xff
 8007f44:	b1a4      	cbz	r4, 8007f70 <forward_dense+0x3d0>
 8007f46:	f8d4 c000 	ldr.w	ip, [r4]
 8007f4a:	463b      	mov	r3, r7
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	9600      	str	r6, [sp, #0]
 8007f50:	4652      	mov	r2, sl
 8007f52:	9803      	ldr	r0, [sp, #12]
 8007f54:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8007f58:	f7ff fd64 	bl	8007a24 <ai_dict4_dot_array_f32>
 8007f5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f5e:	3404      	adds	r4, #4
 8007f60:	444d      	add	r5, r9
 8007f62:	f84b 3b04 	str.w	r3, [fp], #4
 8007f66:	45c3      	cmp	fp, r8
 8007f68:	f4bf aead 	bcs.w	8007cc6 <forward_dense+0x126>
 8007f6c:	2c00      	cmp	r4, #0
 8007f6e:	d1ea      	bne.n	8007f46 <forward_dense+0x3a6>
 8007f70:	4634      	mov	r4, r6
 8007f72:	4646      	mov	r6, r8
 8007f74:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007f78:	463b      	mov	r3, r7
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	9400      	str	r4, [sp, #0]
 8007f7e:	4652      	mov	r2, sl
 8007f80:	4640      	mov	r0, r8
 8007f82:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 8007f86:	f7ff fd4d 	bl	8007a24 <ai_dict4_dot_array_f32>
 8007f8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f8c:	444d      	add	r5, r9
 8007f8e:	f84b 3b04 	str.w	r3, [fp], #4
 8007f92:	45b3      	cmp	fp, r6
 8007f94:	d3f0      	bcc.n	8007f78 <forward_dense+0x3d8>
 8007f96:	46a0      	mov	r8, r4
 8007f98:	e698      	b.n	8007ccc <forward_dense+0x12c>
 8007f9a:	9006      	str	r0, [sp, #24]
 8007f9c:	e62a      	b.n	8007bf4 <forward_dense+0x54>
 8007f9e:	9306      	str	r3, [sp, #24]
 8007fa0:	e628      	b.n	8007bf4 <forward_dense+0x54>
 8007fa2:	bf00      	nop
 8007fa4:	00000000 	.word	0x00000000
 8007fa8:	4634      	mov	r4, r6
 8007faa:	4646      	mov	r6, r8
 8007fac:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007fb0:	463b      	mov	r3, r7
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	9400      	str	r4, [sp, #0]
 8007fb6:	4652      	mov	r2, sl
 8007fb8:	4640      	mov	r0, r8
 8007fba:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 8007fbe:	f7ff fb01 	bl	80075c4 <ai_dict8_dot_array_f32>
 8007fc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fc4:	444d      	add	r5, r9
 8007fc6:	f84b 3b04 	str.w	r3, [fp], #4
 8007fca:	45b3      	cmp	fp, r6
 8007fcc:	d3f0      	bcc.n	8007fb0 <forward_dense+0x410>
 8007fce:	46a0      	mov	r8, r4
 8007fd0:	e67c      	b.n	8007ccc <forward_dense+0x12c>
 8007fd2:	b011      	add	sp, #68	; 0x44
 8007fd4:	ecbd 8b08 	vpop	{d8-d11}
 8007fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fdc:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8007fe0:	e626      	b.n	8007c30 <forward_dense+0x90>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	9306      	str	r3, [sp, #24]
 8007fe6:	e605      	b.n	8007bf4 <forward_dense+0x54>
 8007fe8:	9308      	str	r3, [sp, #32]
 8007fea:	e5f6      	b.n	8007bda <forward_dense+0x3a>

08007fec <nl_func_relu_generic_array_f32>:
 8007fec:	b470      	push	{r4, r5, r6}
 8007fee:	edd3 6a02 	vldr	s13, [r3, #8]
 8007ff2:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 8007ff6:	6880      	ldr	r0, [r0, #8]
 8007ff8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8007ffc:	4414      	add	r4, r2
 8007ffe:	688d      	ldr	r5, [r1, #8]
 8008000:	00a4      	lsls	r4, r4, #2
 8008002:	ed93 7a00 	vldr	s14, [r3]
 8008006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800800a:	ed93 6a01 	vldr	s12, [r3, #4]
 800800e:	eb00 0204 	add.w	r2, r0, r4
 8008012:	442c      	add	r4, r5
 8008014:	d420      	bmi.n	8008058 <nl_func_relu_generic_array_f32+0x6c>
 8008016:	42ac      	cmp	r4, r5
 8008018:	d33b      	bcc.n	8008092 <nl_func_relu_generic_array_f32+0xa6>
 800801a:	1d23      	adds	r3, r4, #4
 800801c:	3204      	adds	r2, #4
 800801e:	e010      	b.n	8008042 <nl_func_relu_generic_array_f32+0x56>
 8008020:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008024:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8008028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800802c:	dd01      	ble.n	8008032 <nl_func_relu_generic_array_f32+0x46>
 800802e:	ee65 7a86 	vmul.f32	s15, s11, s12
 8008032:	f1a3 0408 	sub.w	r4, r3, #8
 8008036:	ed62 7a01 	vstmdb	r2!, {s15}
 800803a:	4603      	mov	r3, r0
 800803c:	6888      	ldr	r0, [r1, #8]
 800803e:	4284      	cmp	r4, r0
 8008040:	d327      	bcc.n	8008092 <nl_func_relu_generic_array_f32+0xa6>
 8008042:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008046:	1f18      	subs	r0, r3, #4
 8008048:	eef4 6ae7 	vcmpe.f32	s13, s15
 800804c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008050:	dce6      	bgt.n	8008020 <nl_func_relu_generic_array_f32+0x34>
 8008052:	eef0 7a66 	vmov.f32	s15, s13
 8008056:	e7ec      	b.n	8008032 <nl_func_relu_generic_array_f32+0x46>
 8008058:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800805c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008060:	d019      	beq.n	8008096 <nl_func_relu_generic_array_f32+0xaa>
 8008062:	42ac      	cmp	r4, r5
 8008064:	d315      	bcc.n	8008092 <nl_func_relu_generic_array_f32+0xa6>
 8008066:	1d23      	adds	r3, r4, #4
 8008068:	3204      	adds	r2, #4
 800806a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800806e:	1f18      	subs	r0, r3, #4
 8008070:	f1a3 0508 	sub.w	r5, r3, #8
 8008074:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008078:	4603      	mov	r3, r0
 800807a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800807e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008082:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008086:	d51c      	bpl.n	80080c2 <nl_func_relu_generic_array_f32+0xd6>
 8008088:	ed62 6a01 	vstmdb	r2!, {s13}
 800808c:	6888      	ldr	r0, [r1, #8]
 800808e:	42a8      	cmp	r0, r5
 8008090:	d9eb      	bls.n	800806a <nl_func_relu_generic_array_f32+0x7e>
 8008092:	bc70      	pop	{r4, r5, r6}
 8008094:	4770      	bx	lr
 8008096:	42ac      	cmp	r4, r5
 8008098:	d3fb      	bcc.n	8008092 <nl_func_relu_generic_array_f32+0xa6>
 800809a:	1d23      	adds	r3, r4, #4
 800809c:	3204      	adds	r2, #4
 800809e:	2600      	movs	r6, #0
 80080a0:	ed53 7a01 	vldr	s15, [r3, #-4]
 80080a4:	1f18      	subs	r0, r3, #4
 80080a6:	f1a3 0508 	sub.w	r5, r3, #8
 80080aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80080ae:	4603      	mov	r3, r0
 80080b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080b4:	d80b      	bhi.n	80080ce <nl_func_relu_generic_array_f32+0xe2>
 80080b6:	ed62 7a01 	vstmdb	r2!, {s15}
 80080ba:	6888      	ldr	r0, [r1, #8]
 80080bc:	42a8      	cmp	r0, r5
 80080be:	d9ef      	bls.n	80080a0 <nl_func_relu_generic_array_f32+0xb4>
 80080c0:	e7e7      	b.n	8008092 <nl_func_relu_generic_array_f32+0xa6>
 80080c2:	ed62 7a01 	vstmdb	r2!, {s15}
 80080c6:	6888      	ldr	r0, [r1, #8]
 80080c8:	42a8      	cmp	r0, r5
 80080ca:	d9ce      	bls.n	800806a <nl_func_relu_generic_array_f32+0x7e>
 80080cc:	e7e1      	b.n	8008092 <nl_func_relu_generic_array_f32+0xa6>
 80080ce:	f842 6d04 	str.w	r6, [r2, #-4]!
 80080d2:	6888      	ldr	r0, [r1, #8]
 80080d4:	42a8      	cmp	r0, r5
 80080d6:	d9e3      	bls.n	80080a0 <nl_func_relu_generic_array_f32+0xb4>
 80080d8:	e7db      	b.n	8008092 <nl_func_relu_generic_array_f32+0xa6>
 80080da:	bf00      	nop

080080dc <forward_relu>:
 80080dc:	6942      	ldr	r2, [r0, #20]
 80080de:	8813      	ldrh	r3, [r2, #0]
 80080e0:	b33b      	cbz	r3, 8008132 <forward_relu+0x56>
 80080e2:	b4f0      	push	{r4, r5, r6, r7}
 80080e4:	6852      	ldr	r2, [r2, #4]
 80080e6:	6855      	ldr	r5, [r2, #4]
 80080e8:	b105      	cbz	r5, 80080ec <forward_relu+0x10>
 80080ea:	682d      	ldr	r5, [r5, #0]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d91d      	bls.n	800812c <forward_relu+0x50>
 80080f0:	6913      	ldr	r3, [r2, #16]
 80080f2:	b103      	cbz	r3, 80080f6 <forward_relu+0x1a>
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6982      	ldr	r2, [r0, #24]
 80080f8:	68ac      	ldr	r4, [r5, #8]
 80080fa:	6998      	ldr	r0, [r3, #24]
 80080fc:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8008100:	69a9      	ldr	r1, [r5, #24]
 8008102:	2a00      	cmp	r2, #0
 8008104:	d040      	beq.n	8008188 <forward_relu+0xac>
 8008106:	e9d2 6301 	ldrd	r6, r3, [r2, #4]
 800810a:	2e01      	cmp	r6, #1
 800810c:	d013      	beq.n	8008136 <forward_relu+0x5a>
 800810e:	2c00      	cmp	r4, #0
 8008110:	d068      	beq.n	80081e4 <forward_relu+0x108>
 8008112:	68ee      	ldr	r6, [r5, #12]
 8008114:	2201      	movs	r2, #1
 8008116:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800811a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800811e:	42a6      	cmp	r6, r4
 8008120:	fb05 f202 	mul.w	r2, r5, r2
 8008124:	d1f9      	bne.n	800811a <forward_relu+0x3e>
 8008126:	bcf0      	pop	{r4, r5, r6, r7}
 8008128:	f7ff bf60 	b.w	8007fec <nl_func_relu_generic_array_f32>
 800812c:	2300      	movs	r3, #0
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	deff      	udf	#255	; 0xff
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	deff      	udf	#255	; 0xff
 8008136:	6887      	ldr	r7, [r0, #8]
 8008138:	688a      	ldr	r2, [r1, #8]
 800813a:	ed93 7a00 	vldr	s14, [r3]
 800813e:	b184      	cbz	r4, 8008162 <forward_relu+0x86>
 8008140:	68ed      	ldr	r5, [r5, #12]
 8008142:	4630      	mov	r0, r6
 8008144:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8008148:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800814c:	42a5      	cmp	r5, r4
 800814e:	fb03 f000 	mul.w	r0, r3, r0
 8008152:	d1f9      	bne.n	8008148 <forward_relu+0x6c>
 8008154:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008158:	4403      	add	r3, r0
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	18d2      	adds	r2, r2, r3
 800815e:	441f      	add	r7, r3
 8008160:	d236      	bcs.n	80081d0 <forward_relu+0xf4>
 8008162:	1d13      	adds	r3, r2, #4
 8008164:	2500      	movs	r5, #0
 8008166:	1d3a      	adds	r2, r7, #4
 8008168:	ed53 7a01 	vldr	s15, [r3, #-4]
 800816c:	1f18      	subs	r0, r3, #4
 800816e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008176:	d82d      	bhi.n	80081d4 <forward_relu+0xf8>
 8008178:	ed62 7a01 	vstmdb	r2!, {s15}
 800817c:	3b08      	subs	r3, #8
 800817e:	688c      	ldr	r4, [r1, #8]
 8008180:	429c      	cmp	r4, r3
 8008182:	d825      	bhi.n	80081d0 <forward_relu+0xf4>
 8008184:	4603      	mov	r3, r0
 8008186:	e7ef      	b.n	8008168 <forward_relu+0x8c>
 8008188:	6880      	ldr	r0, [r0, #8]
 800818a:	688b      	ldr	r3, [r1, #8]
 800818c:	b184      	cbz	r4, 80081b0 <forward_relu+0xd4>
 800818e:	68ee      	ldr	r6, [r5, #12]
 8008190:	2201      	movs	r2, #1
 8008192:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8008196:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800819a:	42a6      	cmp	r6, r4
 800819c:	fb05 f202 	mul.w	r2, r5, r2
 80081a0:	d1f9      	bne.n	8008196 <forward_relu+0xba>
 80081a2:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 80081a6:	4414      	add	r4, r2
 80081a8:	00a2      	lsls	r2, r4, #2
 80081aa:	189b      	adds	r3, r3, r2
 80081ac:	4410      	add	r0, r2
 80081ae:	d20f      	bcs.n	80081d0 <forward_relu+0xf4>
 80081b0:	3304      	adds	r3, #4
 80081b2:	3004      	adds	r0, #4
 80081b4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80081e8 <forward_relu+0x10c>
 80081b8:	ed53 7a01 	vldr	s15, [r3, #-4]
 80081bc:	f1a3 0208 	sub.w	r2, r3, #8
 80081c0:	3b04      	subs	r3, #4
 80081c2:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80081c6:	ed60 7a01 	vstmdb	r0!, {s15}
 80081ca:	688c      	ldr	r4, [r1, #8]
 80081cc:	4294      	cmp	r4, r2
 80081ce:	d9f3      	bls.n	80081b8 <forward_relu+0xdc>
 80081d0:	bcf0      	pop	{r4, r5, r6, r7}
 80081d2:	4770      	bx	lr
 80081d4:	f842 5d04 	str.w	r5, [r2, #-4]!
 80081d8:	3b08      	subs	r3, #8
 80081da:	688c      	ldr	r4, [r1, #8]
 80081dc:	429c      	cmp	r4, r3
 80081de:	d8f7      	bhi.n	80081d0 <forward_relu+0xf4>
 80081e0:	4603      	mov	r3, r0
 80081e2:	e7c1      	b.n	8008168 <forward_relu+0x8c>
 80081e4:	2201      	movs	r2, #1
 80081e6:	e79e      	b.n	8008126 <forward_relu+0x4a>
 80081e8:	00000000 	.word	0x00000000

080081ec <ai_check_custom_types>:
 80081ec:	4b13      	ldr	r3, [pc, #76]	; (800823c <ai_check_custom_types+0x50>)
 80081ee:	b082      	sub	sp, #8
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	9301      	str	r3, [sp, #4]
 80081f4:	b118      	cbz	r0, 80081fe <ai_check_custom_types+0x12>
 80081f6:	7803      	ldrb	r3, [r0, #0]
 80081f8:	2b03      	cmp	r3, #3
 80081fa:	d002      	beq.n	8008202 <ai_check_custom_types+0x16>
 80081fc:	2000      	movs	r0, #0
 80081fe:	b002      	add	sp, #8
 8008200:	4770      	bx	lr
 8008202:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008206:	4293      	cmp	r3, r2
 8008208:	d004      	beq.n	8008214 <ai_check_custom_types+0x28>
 800820a:	2001      	movs	r0, #1
 800820c:	f080 0001 	eor.w	r0, r0, #1
 8008210:	b002      	add	sp, #8
 8008212:	4770      	bx	lr
 8008214:	7842      	ldrb	r2, [r0, #1]
 8008216:	3001      	adds	r0, #1
 8008218:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800821c:	429a      	cmp	r2, r3
 800821e:	d1f4      	bne.n	800820a <ai_check_custom_types+0x1e>
 8008220:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8008224:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008228:	429a      	cmp	r2, r3
 800822a:	d1ee      	bne.n	800820a <ai_check_custom_types+0x1e>
 800822c:	7842      	ldrb	r2, [r0, #1]
 800822e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008232:	429a      	cmp	r2, r3
 8008234:	d1e9      	bne.n	800820a <ai_check_custom_types+0x1e>
 8008236:	2000      	movs	r0, #0
 8008238:	e7e8      	b.n	800820c <ai_check_custom_types+0x20>
 800823a:	bf00      	nop
 800823c:	0800b28c 	.word	0x0800b28c

08008240 <ai_layers_forward_all>:
 8008240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008242:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8008244:	4604      	mov	r4, r0
 8008246:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8008248:	b316      	cbz	r6, 8008290 <ai_layers_forward_all+0x50>
 800824a:	b1c5      	cbz	r5, 800827e <ai_layers_forward_all+0x3e>
 800824c:	6545      	str	r5, [r0, #84]	; 0x54
 800824e:	4629      	mov	r1, r5
 8008250:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8008252:	2001      	movs	r0, #1
 8008254:	47b0      	blx	r6
 8008256:	2700      	movs	r7, #0
 8008258:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800825a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800825c:	2002      	movs	r0, #2
 800825e:	47b0      	blx	r6
 8008260:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8008262:	692b      	ldr	r3, [r5, #16]
 8008264:	4628      	mov	r0, r5
 8008266:	4798      	blx	r3
 8008268:	68eb      	ldr	r3, [r5, #12]
 800826a:	2003      	movs	r0, #3
 800826c:	429d      	cmp	r5, r3
 800826e:	4619      	mov	r1, r3
 8008270:	d006      	beq.n	8008280 <ai_layers_forward_all+0x40>
 8008272:	6563      	str	r3, [r4, #84]	; 0x54
 8008274:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008276:	47b0      	blx	r6
 8008278:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800827a:	2900      	cmp	r1, #0
 800827c:	d1ed      	bne.n	800825a <ai_layers_forward_all+0x1a>
 800827e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008280:	2100      	movs	r1, #0
 8008282:	6567      	str	r7, [r4, #84]	; 0x54
 8008284:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008286:	47b0      	blx	r6
 8008288:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800828a:	2900      	cmp	r1, #0
 800828c:	d1e5      	bne.n	800825a <ai_layers_forward_all+0x1a>
 800828e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008290:	2d00      	cmp	r5, #0
 8008292:	d0f4      	beq.n	800827e <ai_layers_forward_all+0x3e>
 8008294:	6545      	str	r5, [r0, #84]	; 0x54
 8008296:	692b      	ldr	r3, [r5, #16]
 8008298:	4628      	mov	r0, r5
 800829a:	4798      	blx	r3
 800829c:	68eb      	ldr	r3, [r5, #12]
 800829e:	42ab      	cmp	r3, r5
 80082a0:	461d      	mov	r5, r3
 80082a2:	d003      	beq.n	80082ac <ai_layers_forward_all+0x6c>
 80082a4:	6563      	str	r3, [r4, #84]	; 0x54
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1f5      	bne.n	8008296 <ai_layers_forward_all+0x56>
 80082aa:	e7e8      	b.n	800827e <ai_layers_forward_all+0x3e>
 80082ac:	2300      	movs	r3, #0
 80082ae:	6563      	str	r3, [r4, #84]	; 0x54
 80082b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b2:	bf00      	nop

080082b4 <ai_array_to_buffer_fmt>:
 80082b4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d01f      	beq.n	80082fc <ai_array_to_buffer_fmt+0x48>
 80082bc:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 80082c0:	4a1b      	ldr	r2, [pc, #108]	; (8008330 <ai_array_to_buffer_fmt+0x7c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d00a      	beq.n	80082dc <ai_array_to_buffer_fmt+0x28>
 80082c6:	dc0d      	bgt.n	80082e4 <ai_array_to_buffer_fmt+0x30>
 80082c8:	4a1a      	ldr	r2, [pc, #104]	; (8008334 <ai_array_to_buffer_fmt+0x80>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d006      	beq.n	80082dc <ai_array_to_buffer_fmt+0x28>
 80082ce:	dd1d      	ble.n	800830c <ai_array_to_buffer_fmt+0x58>
 80082d0:	4a19      	ldr	r2, [pc, #100]	; (8008338 <ai_array_to_buffer_fmt+0x84>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d002      	beq.n	80082dc <ai_array_to_buffer_fmt+0x28>
 80082d6:	320f      	adds	r2, #15
 80082d8:	4293      	cmp	r3, r2
 80082da:	d10d      	bne.n	80082f8 <ai_array_to_buffer_fmt+0x44>
 80082dc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80082e0:	4318      	orrs	r0, r3
 80082e2:	4770      	bx	lr
 80082e4:	4a15      	ldr	r2, [pc, #84]	; (800833c <ai_array_to_buffer_fmt+0x88>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d0f8      	beq.n	80082dc <ai_array_to_buffer_fmt+0x28>
 80082ea:	dd18      	ble.n	800831e <ai_array_to_buffer_fmt+0x6a>
 80082ec:	4a14      	ldr	r2, [pc, #80]	; (8008340 <ai_array_to_buffer_fmt+0x8c>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d0f4      	beq.n	80082dc <ai_array_to_buffer_fmt+0x28>
 80082f2:	4a14      	ldr	r2, [pc, #80]	; (8008344 <ai_array_to_buffer_fmt+0x90>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d0f1      	beq.n	80082dc <ai_array_to_buffer_fmt+0x28>
 80082f8:	2340      	movs	r3, #64	; 0x40
 80082fa:	e7ef      	b.n	80082dc <ai_array_to_buffer_fmt+0x28>
 80082fc:	4b12      	ldr	r3, [pc, #72]	; (8008348 <ai_array_to_buffer_fmt+0x94>)
 80082fe:	4003      	ands	r3, r0
 8008300:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008308:	4318      	orrs	r0, r3
 800830a:	4770      	bx	lr
 800830c:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8008310:	4293      	cmp	r3, r2
 8008312:	d0e3      	beq.n	80082dc <ai_array_to_buffer_fmt+0x28>
 8008314:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008318:	4293      	cmp	r3, r2
 800831a:	d0df      	beq.n	80082dc <ai_array_to_buffer_fmt+0x28>
 800831c:	e7ec      	b.n	80082f8 <ai_array_to_buffer_fmt+0x44>
 800831e:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8008322:	4293      	cmp	r3, r2
 8008324:	d0da      	beq.n	80082dc <ai_array_to_buffer_fmt+0x28>
 8008326:	3207      	adds	r2, #7
 8008328:	4293      	cmp	r3, r2
 800832a:	d0d7      	beq.n	80082dc <ai_array_to_buffer_fmt+0x28>
 800832c:	e7e4      	b.n	80082f8 <ai_array_to_buffer_fmt+0x44>
 800832e:	bf00      	nop
 8008330:	00840040 	.word	0x00840040
 8008334:	00040447 	.word	0x00040447
 8008338:	00040840 	.word	0x00040840
 800833c:	00840840 	.word	0x00840840
 8008340:	0084084f 	.word	0x0084084f
 8008344:	01821040 	.word	0x01821040
 8008348:	00803fff 	.word	0x00803fff

0800834c <ai_array_get_byte_size>:
 800834c:	b1e1      	cbz	r1, 8008388 <ai_array_get_byte_size+0x3c>
 800834e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008352:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8008356:	b410      	push	{r4}
 8008358:	f3c0 3482 	ubfx	r4, r0, #14, #3
 800835c:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8008360:	4423      	add	r3, r4
 8008362:	2804      	cmp	r0, #4
 8008364:	fb01 f103 	mul.w	r1, r1, r3
 8008368:	f101 0107 	add.w	r1, r1, #7
 800836c:	f021 0107 	bic.w	r1, r1, #7
 8008370:	fa21 f102 	lsr.w	r1, r1, r2
 8008374:	d00a      	beq.n	800838c <ai_array_get_byte_size+0x40>
 8008376:	2808      	cmp	r0, #8
 8008378:	d101      	bne.n	800837e <ai_array_get_byte_size+0x32>
 800837a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800837e:	3107      	adds	r1, #7
 8008380:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008384:	08c8      	lsrs	r0, r1, #3
 8008386:	4770      	bx	lr
 8008388:	4608      	mov	r0, r1
 800838a:	4770      	bx	lr
 800838c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8008390:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008394:	3107      	adds	r1, #7
 8008396:	08c8      	lsrs	r0, r1, #3
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop

0800839c <__errno>:
 800839c:	4b01      	ldr	r3, [pc, #4]	; (80083a4 <__errno+0x8>)
 800839e:	6818      	ldr	r0, [r3, #0]
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	200005e4 	.word	0x200005e4

080083a8 <__libc_init_array>:
 80083a8:	b570      	push	{r4, r5, r6, lr}
 80083aa:	4d0d      	ldr	r5, [pc, #52]	; (80083e0 <__libc_init_array+0x38>)
 80083ac:	4c0d      	ldr	r4, [pc, #52]	; (80083e4 <__libc_init_array+0x3c>)
 80083ae:	1b64      	subs	r4, r4, r5
 80083b0:	10a4      	asrs	r4, r4, #2
 80083b2:	2600      	movs	r6, #0
 80083b4:	42a6      	cmp	r6, r4
 80083b6:	d109      	bne.n	80083cc <__libc_init_array+0x24>
 80083b8:	4d0b      	ldr	r5, [pc, #44]	; (80083e8 <__libc_init_array+0x40>)
 80083ba:	4c0c      	ldr	r4, [pc, #48]	; (80083ec <__libc_init_array+0x44>)
 80083bc:	f002 fef6 	bl	800b1ac <_init>
 80083c0:	1b64      	subs	r4, r4, r5
 80083c2:	10a4      	asrs	r4, r4, #2
 80083c4:	2600      	movs	r6, #0
 80083c6:	42a6      	cmp	r6, r4
 80083c8:	d105      	bne.n	80083d6 <__libc_init_array+0x2e>
 80083ca:	bd70      	pop	{r4, r5, r6, pc}
 80083cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80083d0:	4798      	blx	r3
 80083d2:	3601      	adds	r6, #1
 80083d4:	e7ee      	b.n	80083b4 <__libc_init_array+0xc>
 80083d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083da:	4798      	blx	r3
 80083dc:	3601      	adds	r6, #1
 80083de:	e7f2      	b.n	80083c6 <__libc_init_array+0x1e>
 80083e0:	0800bbbc 	.word	0x0800bbbc
 80083e4:	0800bbbc 	.word	0x0800bbbc
 80083e8:	0800bbbc 	.word	0x0800bbbc
 80083ec:	0800bbc0 	.word	0x0800bbc0

080083f0 <malloc>:
 80083f0:	4b02      	ldr	r3, [pc, #8]	; (80083fc <malloc+0xc>)
 80083f2:	4601      	mov	r1, r0
 80083f4:	6818      	ldr	r0, [r3, #0]
 80083f6:	f000 b869 	b.w	80084cc <_malloc_r>
 80083fa:	bf00      	nop
 80083fc:	200005e4 	.word	0x200005e4

08008400 <memcpy>:
 8008400:	440a      	add	r2, r1
 8008402:	4291      	cmp	r1, r2
 8008404:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008408:	d100      	bne.n	800840c <memcpy+0xc>
 800840a:	4770      	bx	lr
 800840c:	b510      	push	{r4, lr}
 800840e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008412:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008416:	4291      	cmp	r1, r2
 8008418:	d1f9      	bne.n	800840e <memcpy+0xe>
 800841a:	bd10      	pop	{r4, pc}

0800841c <memset>:
 800841c:	4402      	add	r2, r0
 800841e:	4603      	mov	r3, r0
 8008420:	4293      	cmp	r3, r2
 8008422:	d100      	bne.n	8008426 <memset+0xa>
 8008424:	4770      	bx	lr
 8008426:	f803 1b01 	strb.w	r1, [r3], #1
 800842a:	e7f9      	b.n	8008420 <memset+0x4>

0800842c <_free_r>:
 800842c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800842e:	2900      	cmp	r1, #0
 8008430:	d048      	beq.n	80084c4 <_free_r+0x98>
 8008432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008436:	9001      	str	r0, [sp, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	f1a1 0404 	sub.w	r4, r1, #4
 800843e:	bfb8      	it	lt
 8008440:	18e4      	addlt	r4, r4, r3
 8008442:	f001 fbb5 	bl	8009bb0 <__malloc_lock>
 8008446:	4a20      	ldr	r2, [pc, #128]	; (80084c8 <_free_r+0x9c>)
 8008448:	9801      	ldr	r0, [sp, #4]
 800844a:	6813      	ldr	r3, [r2, #0]
 800844c:	4615      	mov	r5, r2
 800844e:	b933      	cbnz	r3, 800845e <_free_r+0x32>
 8008450:	6063      	str	r3, [r4, #4]
 8008452:	6014      	str	r4, [r2, #0]
 8008454:	b003      	add	sp, #12
 8008456:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800845a:	f001 bbaf 	b.w	8009bbc <__malloc_unlock>
 800845e:	42a3      	cmp	r3, r4
 8008460:	d90b      	bls.n	800847a <_free_r+0x4e>
 8008462:	6821      	ldr	r1, [r4, #0]
 8008464:	1862      	adds	r2, r4, r1
 8008466:	4293      	cmp	r3, r2
 8008468:	bf04      	itt	eq
 800846a:	681a      	ldreq	r2, [r3, #0]
 800846c:	685b      	ldreq	r3, [r3, #4]
 800846e:	6063      	str	r3, [r4, #4]
 8008470:	bf04      	itt	eq
 8008472:	1852      	addeq	r2, r2, r1
 8008474:	6022      	streq	r2, [r4, #0]
 8008476:	602c      	str	r4, [r5, #0]
 8008478:	e7ec      	b.n	8008454 <_free_r+0x28>
 800847a:	461a      	mov	r2, r3
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	b10b      	cbz	r3, 8008484 <_free_r+0x58>
 8008480:	42a3      	cmp	r3, r4
 8008482:	d9fa      	bls.n	800847a <_free_r+0x4e>
 8008484:	6811      	ldr	r1, [r2, #0]
 8008486:	1855      	adds	r5, r2, r1
 8008488:	42a5      	cmp	r5, r4
 800848a:	d10b      	bne.n	80084a4 <_free_r+0x78>
 800848c:	6824      	ldr	r4, [r4, #0]
 800848e:	4421      	add	r1, r4
 8008490:	1854      	adds	r4, r2, r1
 8008492:	42a3      	cmp	r3, r4
 8008494:	6011      	str	r1, [r2, #0]
 8008496:	d1dd      	bne.n	8008454 <_free_r+0x28>
 8008498:	681c      	ldr	r4, [r3, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	6053      	str	r3, [r2, #4]
 800849e:	4421      	add	r1, r4
 80084a0:	6011      	str	r1, [r2, #0]
 80084a2:	e7d7      	b.n	8008454 <_free_r+0x28>
 80084a4:	d902      	bls.n	80084ac <_free_r+0x80>
 80084a6:	230c      	movs	r3, #12
 80084a8:	6003      	str	r3, [r0, #0]
 80084aa:	e7d3      	b.n	8008454 <_free_r+0x28>
 80084ac:	6825      	ldr	r5, [r4, #0]
 80084ae:	1961      	adds	r1, r4, r5
 80084b0:	428b      	cmp	r3, r1
 80084b2:	bf04      	itt	eq
 80084b4:	6819      	ldreq	r1, [r3, #0]
 80084b6:	685b      	ldreq	r3, [r3, #4]
 80084b8:	6063      	str	r3, [r4, #4]
 80084ba:	bf04      	itt	eq
 80084bc:	1949      	addeq	r1, r1, r5
 80084be:	6021      	streq	r1, [r4, #0]
 80084c0:	6054      	str	r4, [r2, #4]
 80084c2:	e7c7      	b.n	8008454 <_free_r+0x28>
 80084c4:	b003      	add	sp, #12
 80084c6:	bd30      	pop	{r4, r5, pc}
 80084c8:	20000850 	.word	0x20000850

080084cc <_malloc_r>:
 80084cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ce:	1ccd      	adds	r5, r1, #3
 80084d0:	f025 0503 	bic.w	r5, r5, #3
 80084d4:	3508      	adds	r5, #8
 80084d6:	2d0c      	cmp	r5, #12
 80084d8:	bf38      	it	cc
 80084da:	250c      	movcc	r5, #12
 80084dc:	2d00      	cmp	r5, #0
 80084de:	4606      	mov	r6, r0
 80084e0:	db01      	blt.n	80084e6 <_malloc_r+0x1a>
 80084e2:	42a9      	cmp	r1, r5
 80084e4:	d903      	bls.n	80084ee <_malloc_r+0x22>
 80084e6:	230c      	movs	r3, #12
 80084e8:	6033      	str	r3, [r6, #0]
 80084ea:	2000      	movs	r0, #0
 80084ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084ee:	f001 fb5f 	bl	8009bb0 <__malloc_lock>
 80084f2:	4921      	ldr	r1, [pc, #132]	; (8008578 <_malloc_r+0xac>)
 80084f4:	680a      	ldr	r2, [r1, #0]
 80084f6:	4614      	mov	r4, r2
 80084f8:	b99c      	cbnz	r4, 8008522 <_malloc_r+0x56>
 80084fa:	4f20      	ldr	r7, [pc, #128]	; (800857c <_malloc_r+0xb0>)
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	b923      	cbnz	r3, 800850a <_malloc_r+0x3e>
 8008500:	4621      	mov	r1, r4
 8008502:	4630      	mov	r0, r6
 8008504:	f000 fca6 	bl	8008e54 <_sbrk_r>
 8008508:	6038      	str	r0, [r7, #0]
 800850a:	4629      	mov	r1, r5
 800850c:	4630      	mov	r0, r6
 800850e:	f000 fca1 	bl	8008e54 <_sbrk_r>
 8008512:	1c43      	adds	r3, r0, #1
 8008514:	d123      	bne.n	800855e <_malloc_r+0x92>
 8008516:	230c      	movs	r3, #12
 8008518:	6033      	str	r3, [r6, #0]
 800851a:	4630      	mov	r0, r6
 800851c:	f001 fb4e 	bl	8009bbc <__malloc_unlock>
 8008520:	e7e3      	b.n	80084ea <_malloc_r+0x1e>
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	1b5b      	subs	r3, r3, r5
 8008526:	d417      	bmi.n	8008558 <_malloc_r+0x8c>
 8008528:	2b0b      	cmp	r3, #11
 800852a:	d903      	bls.n	8008534 <_malloc_r+0x68>
 800852c:	6023      	str	r3, [r4, #0]
 800852e:	441c      	add	r4, r3
 8008530:	6025      	str	r5, [r4, #0]
 8008532:	e004      	b.n	800853e <_malloc_r+0x72>
 8008534:	6863      	ldr	r3, [r4, #4]
 8008536:	42a2      	cmp	r2, r4
 8008538:	bf0c      	ite	eq
 800853a:	600b      	streq	r3, [r1, #0]
 800853c:	6053      	strne	r3, [r2, #4]
 800853e:	4630      	mov	r0, r6
 8008540:	f001 fb3c 	bl	8009bbc <__malloc_unlock>
 8008544:	f104 000b 	add.w	r0, r4, #11
 8008548:	1d23      	adds	r3, r4, #4
 800854a:	f020 0007 	bic.w	r0, r0, #7
 800854e:	1ac2      	subs	r2, r0, r3
 8008550:	d0cc      	beq.n	80084ec <_malloc_r+0x20>
 8008552:	1a1b      	subs	r3, r3, r0
 8008554:	50a3      	str	r3, [r4, r2]
 8008556:	e7c9      	b.n	80084ec <_malloc_r+0x20>
 8008558:	4622      	mov	r2, r4
 800855a:	6864      	ldr	r4, [r4, #4]
 800855c:	e7cc      	b.n	80084f8 <_malloc_r+0x2c>
 800855e:	1cc4      	adds	r4, r0, #3
 8008560:	f024 0403 	bic.w	r4, r4, #3
 8008564:	42a0      	cmp	r0, r4
 8008566:	d0e3      	beq.n	8008530 <_malloc_r+0x64>
 8008568:	1a21      	subs	r1, r4, r0
 800856a:	4630      	mov	r0, r6
 800856c:	f000 fc72 	bl	8008e54 <_sbrk_r>
 8008570:	3001      	adds	r0, #1
 8008572:	d1dd      	bne.n	8008530 <_malloc_r+0x64>
 8008574:	e7cf      	b.n	8008516 <_malloc_r+0x4a>
 8008576:	bf00      	nop
 8008578:	20000850 	.word	0x20000850
 800857c:	20000854 	.word	0x20000854

08008580 <__cvt>:
 8008580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008584:	ec55 4b10 	vmov	r4, r5, d0
 8008588:	2d00      	cmp	r5, #0
 800858a:	460e      	mov	r6, r1
 800858c:	4619      	mov	r1, r3
 800858e:	462b      	mov	r3, r5
 8008590:	bfbb      	ittet	lt
 8008592:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008596:	461d      	movlt	r5, r3
 8008598:	2300      	movge	r3, #0
 800859a:	232d      	movlt	r3, #45	; 0x2d
 800859c:	700b      	strb	r3, [r1, #0]
 800859e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80085a4:	4691      	mov	r9, r2
 80085a6:	f023 0820 	bic.w	r8, r3, #32
 80085aa:	bfbc      	itt	lt
 80085ac:	4622      	movlt	r2, r4
 80085ae:	4614      	movlt	r4, r2
 80085b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085b4:	d005      	beq.n	80085c2 <__cvt+0x42>
 80085b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80085ba:	d100      	bne.n	80085be <__cvt+0x3e>
 80085bc:	3601      	adds	r6, #1
 80085be:	2102      	movs	r1, #2
 80085c0:	e000      	b.n	80085c4 <__cvt+0x44>
 80085c2:	2103      	movs	r1, #3
 80085c4:	ab03      	add	r3, sp, #12
 80085c6:	9301      	str	r3, [sp, #4]
 80085c8:	ab02      	add	r3, sp, #8
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	ec45 4b10 	vmov	d0, r4, r5
 80085d0:	4653      	mov	r3, sl
 80085d2:	4632      	mov	r2, r6
 80085d4:	f000 fcfc 	bl	8008fd0 <_dtoa_r>
 80085d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80085dc:	4607      	mov	r7, r0
 80085de:	d102      	bne.n	80085e6 <__cvt+0x66>
 80085e0:	f019 0f01 	tst.w	r9, #1
 80085e4:	d022      	beq.n	800862c <__cvt+0xac>
 80085e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085ea:	eb07 0906 	add.w	r9, r7, r6
 80085ee:	d110      	bne.n	8008612 <__cvt+0x92>
 80085f0:	783b      	ldrb	r3, [r7, #0]
 80085f2:	2b30      	cmp	r3, #48	; 0x30
 80085f4:	d10a      	bne.n	800860c <__cvt+0x8c>
 80085f6:	2200      	movs	r2, #0
 80085f8:	2300      	movs	r3, #0
 80085fa:	4620      	mov	r0, r4
 80085fc:	4629      	mov	r1, r5
 80085fe:	f7f8 fa83 	bl	8000b08 <__aeabi_dcmpeq>
 8008602:	b918      	cbnz	r0, 800860c <__cvt+0x8c>
 8008604:	f1c6 0601 	rsb	r6, r6, #1
 8008608:	f8ca 6000 	str.w	r6, [sl]
 800860c:	f8da 3000 	ldr.w	r3, [sl]
 8008610:	4499      	add	r9, r3
 8008612:	2200      	movs	r2, #0
 8008614:	2300      	movs	r3, #0
 8008616:	4620      	mov	r0, r4
 8008618:	4629      	mov	r1, r5
 800861a:	f7f8 fa75 	bl	8000b08 <__aeabi_dcmpeq>
 800861e:	b108      	cbz	r0, 8008624 <__cvt+0xa4>
 8008620:	f8cd 900c 	str.w	r9, [sp, #12]
 8008624:	2230      	movs	r2, #48	; 0x30
 8008626:	9b03      	ldr	r3, [sp, #12]
 8008628:	454b      	cmp	r3, r9
 800862a:	d307      	bcc.n	800863c <__cvt+0xbc>
 800862c:	9b03      	ldr	r3, [sp, #12]
 800862e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008630:	1bdb      	subs	r3, r3, r7
 8008632:	4638      	mov	r0, r7
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	b004      	add	sp, #16
 8008638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800863c:	1c59      	adds	r1, r3, #1
 800863e:	9103      	str	r1, [sp, #12]
 8008640:	701a      	strb	r2, [r3, #0]
 8008642:	e7f0      	b.n	8008626 <__cvt+0xa6>

08008644 <__exponent>:
 8008644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008646:	4603      	mov	r3, r0
 8008648:	2900      	cmp	r1, #0
 800864a:	bfb8      	it	lt
 800864c:	4249      	neglt	r1, r1
 800864e:	f803 2b02 	strb.w	r2, [r3], #2
 8008652:	bfb4      	ite	lt
 8008654:	222d      	movlt	r2, #45	; 0x2d
 8008656:	222b      	movge	r2, #43	; 0x2b
 8008658:	2909      	cmp	r1, #9
 800865a:	7042      	strb	r2, [r0, #1]
 800865c:	dd2a      	ble.n	80086b4 <__exponent+0x70>
 800865e:	f10d 0407 	add.w	r4, sp, #7
 8008662:	46a4      	mov	ip, r4
 8008664:	270a      	movs	r7, #10
 8008666:	46a6      	mov	lr, r4
 8008668:	460a      	mov	r2, r1
 800866a:	fb91 f6f7 	sdiv	r6, r1, r7
 800866e:	fb07 1516 	mls	r5, r7, r6, r1
 8008672:	3530      	adds	r5, #48	; 0x30
 8008674:	2a63      	cmp	r2, #99	; 0x63
 8008676:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800867a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800867e:	4631      	mov	r1, r6
 8008680:	dcf1      	bgt.n	8008666 <__exponent+0x22>
 8008682:	3130      	adds	r1, #48	; 0x30
 8008684:	f1ae 0502 	sub.w	r5, lr, #2
 8008688:	f804 1c01 	strb.w	r1, [r4, #-1]
 800868c:	1c44      	adds	r4, r0, #1
 800868e:	4629      	mov	r1, r5
 8008690:	4561      	cmp	r1, ip
 8008692:	d30a      	bcc.n	80086aa <__exponent+0x66>
 8008694:	f10d 0209 	add.w	r2, sp, #9
 8008698:	eba2 020e 	sub.w	r2, r2, lr
 800869c:	4565      	cmp	r5, ip
 800869e:	bf88      	it	hi
 80086a0:	2200      	movhi	r2, #0
 80086a2:	4413      	add	r3, r2
 80086a4:	1a18      	subs	r0, r3, r0
 80086a6:	b003      	add	sp, #12
 80086a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80086b2:	e7ed      	b.n	8008690 <__exponent+0x4c>
 80086b4:	2330      	movs	r3, #48	; 0x30
 80086b6:	3130      	adds	r1, #48	; 0x30
 80086b8:	7083      	strb	r3, [r0, #2]
 80086ba:	70c1      	strb	r1, [r0, #3]
 80086bc:	1d03      	adds	r3, r0, #4
 80086be:	e7f1      	b.n	80086a4 <__exponent+0x60>

080086c0 <_printf_float>:
 80086c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c4:	ed2d 8b02 	vpush	{d8}
 80086c8:	b08d      	sub	sp, #52	; 0x34
 80086ca:	460c      	mov	r4, r1
 80086cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80086d0:	4616      	mov	r6, r2
 80086d2:	461f      	mov	r7, r3
 80086d4:	4605      	mov	r5, r0
 80086d6:	f001 fa67 	bl	8009ba8 <_localeconv_r>
 80086da:	f8d0 a000 	ldr.w	sl, [r0]
 80086de:	4650      	mov	r0, sl
 80086e0:	f7f7 fd96 	bl	8000210 <strlen>
 80086e4:	2300      	movs	r3, #0
 80086e6:	930a      	str	r3, [sp, #40]	; 0x28
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	9305      	str	r3, [sp, #20]
 80086ec:	f8d8 3000 	ldr.w	r3, [r8]
 80086f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80086f4:	3307      	adds	r3, #7
 80086f6:	f023 0307 	bic.w	r3, r3, #7
 80086fa:	f103 0208 	add.w	r2, r3, #8
 80086fe:	f8c8 2000 	str.w	r2, [r8]
 8008702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008706:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800870a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800870e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008712:	9307      	str	r3, [sp, #28]
 8008714:	f8cd 8018 	str.w	r8, [sp, #24]
 8008718:	ee08 0a10 	vmov	s16, r0
 800871c:	4b9f      	ldr	r3, [pc, #636]	; (800899c <_printf_float+0x2dc>)
 800871e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008726:	f7f8 fa21 	bl	8000b6c <__aeabi_dcmpun>
 800872a:	bb88      	cbnz	r0, 8008790 <_printf_float+0xd0>
 800872c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008730:	4b9a      	ldr	r3, [pc, #616]	; (800899c <_printf_float+0x2dc>)
 8008732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008736:	f7f8 f9fb 	bl	8000b30 <__aeabi_dcmple>
 800873a:	bb48      	cbnz	r0, 8008790 <_printf_float+0xd0>
 800873c:	2200      	movs	r2, #0
 800873e:	2300      	movs	r3, #0
 8008740:	4640      	mov	r0, r8
 8008742:	4649      	mov	r1, r9
 8008744:	f7f8 f9ea 	bl	8000b1c <__aeabi_dcmplt>
 8008748:	b110      	cbz	r0, 8008750 <_printf_float+0x90>
 800874a:	232d      	movs	r3, #45	; 0x2d
 800874c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008750:	4b93      	ldr	r3, [pc, #588]	; (80089a0 <_printf_float+0x2e0>)
 8008752:	4894      	ldr	r0, [pc, #592]	; (80089a4 <_printf_float+0x2e4>)
 8008754:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008758:	bf94      	ite	ls
 800875a:	4698      	movls	r8, r3
 800875c:	4680      	movhi	r8, r0
 800875e:	2303      	movs	r3, #3
 8008760:	6123      	str	r3, [r4, #16]
 8008762:	9b05      	ldr	r3, [sp, #20]
 8008764:	f023 0204 	bic.w	r2, r3, #4
 8008768:	6022      	str	r2, [r4, #0]
 800876a:	f04f 0900 	mov.w	r9, #0
 800876e:	9700      	str	r7, [sp, #0]
 8008770:	4633      	mov	r3, r6
 8008772:	aa0b      	add	r2, sp, #44	; 0x2c
 8008774:	4621      	mov	r1, r4
 8008776:	4628      	mov	r0, r5
 8008778:	f000 f9d8 	bl	8008b2c <_printf_common>
 800877c:	3001      	adds	r0, #1
 800877e:	f040 8090 	bne.w	80088a2 <_printf_float+0x1e2>
 8008782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008786:	b00d      	add	sp, #52	; 0x34
 8008788:	ecbd 8b02 	vpop	{d8}
 800878c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008790:	4642      	mov	r2, r8
 8008792:	464b      	mov	r3, r9
 8008794:	4640      	mov	r0, r8
 8008796:	4649      	mov	r1, r9
 8008798:	f7f8 f9e8 	bl	8000b6c <__aeabi_dcmpun>
 800879c:	b140      	cbz	r0, 80087b0 <_printf_float+0xf0>
 800879e:	464b      	mov	r3, r9
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	bfbc      	itt	lt
 80087a4:	232d      	movlt	r3, #45	; 0x2d
 80087a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80087aa:	487f      	ldr	r0, [pc, #508]	; (80089a8 <_printf_float+0x2e8>)
 80087ac:	4b7f      	ldr	r3, [pc, #508]	; (80089ac <_printf_float+0x2ec>)
 80087ae:	e7d1      	b.n	8008754 <_printf_float+0x94>
 80087b0:	6863      	ldr	r3, [r4, #4]
 80087b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80087b6:	9206      	str	r2, [sp, #24]
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	d13f      	bne.n	800883c <_printf_float+0x17c>
 80087bc:	2306      	movs	r3, #6
 80087be:	6063      	str	r3, [r4, #4]
 80087c0:	9b05      	ldr	r3, [sp, #20]
 80087c2:	6861      	ldr	r1, [r4, #4]
 80087c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80087c8:	2300      	movs	r3, #0
 80087ca:	9303      	str	r3, [sp, #12]
 80087cc:	ab0a      	add	r3, sp, #40	; 0x28
 80087ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80087d2:	ab09      	add	r3, sp, #36	; 0x24
 80087d4:	ec49 8b10 	vmov	d0, r8, r9
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	6022      	str	r2, [r4, #0]
 80087dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80087e0:	4628      	mov	r0, r5
 80087e2:	f7ff fecd 	bl	8008580 <__cvt>
 80087e6:	9b06      	ldr	r3, [sp, #24]
 80087e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087ea:	2b47      	cmp	r3, #71	; 0x47
 80087ec:	4680      	mov	r8, r0
 80087ee:	d108      	bne.n	8008802 <_printf_float+0x142>
 80087f0:	1cc8      	adds	r0, r1, #3
 80087f2:	db02      	blt.n	80087fa <_printf_float+0x13a>
 80087f4:	6863      	ldr	r3, [r4, #4]
 80087f6:	4299      	cmp	r1, r3
 80087f8:	dd41      	ble.n	800887e <_printf_float+0x1be>
 80087fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80087fe:	fa5f fb8b 	uxtb.w	fp, fp
 8008802:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008806:	d820      	bhi.n	800884a <_printf_float+0x18a>
 8008808:	3901      	subs	r1, #1
 800880a:	465a      	mov	r2, fp
 800880c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008810:	9109      	str	r1, [sp, #36]	; 0x24
 8008812:	f7ff ff17 	bl	8008644 <__exponent>
 8008816:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008818:	1813      	adds	r3, r2, r0
 800881a:	2a01      	cmp	r2, #1
 800881c:	4681      	mov	r9, r0
 800881e:	6123      	str	r3, [r4, #16]
 8008820:	dc02      	bgt.n	8008828 <_printf_float+0x168>
 8008822:	6822      	ldr	r2, [r4, #0]
 8008824:	07d2      	lsls	r2, r2, #31
 8008826:	d501      	bpl.n	800882c <_printf_float+0x16c>
 8008828:	3301      	adds	r3, #1
 800882a:	6123      	str	r3, [r4, #16]
 800882c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008830:	2b00      	cmp	r3, #0
 8008832:	d09c      	beq.n	800876e <_printf_float+0xae>
 8008834:	232d      	movs	r3, #45	; 0x2d
 8008836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800883a:	e798      	b.n	800876e <_printf_float+0xae>
 800883c:	9a06      	ldr	r2, [sp, #24]
 800883e:	2a47      	cmp	r2, #71	; 0x47
 8008840:	d1be      	bne.n	80087c0 <_printf_float+0x100>
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1bc      	bne.n	80087c0 <_printf_float+0x100>
 8008846:	2301      	movs	r3, #1
 8008848:	e7b9      	b.n	80087be <_printf_float+0xfe>
 800884a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800884e:	d118      	bne.n	8008882 <_printf_float+0x1c2>
 8008850:	2900      	cmp	r1, #0
 8008852:	6863      	ldr	r3, [r4, #4]
 8008854:	dd0b      	ble.n	800886e <_printf_float+0x1ae>
 8008856:	6121      	str	r1, [r4, #16]
 8008858:	b913      	cbnz	r3, 8008860 <_printf_float+0x1a0>
 800885a:	6822      	ldr	r2, [r4, #0]
 800885c:	07d0      	lsls	r0, r2, #31
 800885e:	d502      	bpl.n	8008866 <_printf_float+0x1a6>
 8008860:	3301      	adds	r3, #1
 8008862:	440b      	add	r3, r1
 8008864:	6123      	str	r3, [r4, #16]
 8008866:	65a1      	str	r1, [r4, #88]	; 0x58
 8008868:	f04f 0900 	mov.w	r9, #0
 800886c:	e7de      	b.n	800882c <_printf_float+0x16c>
 800886e:	b913      	cbnz	r3, 8008876 <_printf_float+0x1b6>
 8008870:	6822      	ldr	r2, [r4, #0]
 8008872:	07d2      	lsls	r2, r2, #31
 8008874:	d501      	bpl.n	800887a <_printf_float+0x1ba>
 8008876:	3302      	adds	r3, #2
 8008878:	e7f4      	b.n	8008864 <_printf_float+0x1a4>
 800887a:	2301      	movs	r3, #1
 800887c:	e7f2      	b.n	8008864 <_printf_float+0x1a4>
 800887e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008884:	4299      	cmp	r1, r3
 8008886:	db05      	blt.n	8008894 <_printf_float+0x1d4>
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	6121      	str	r1, [r4, #16]
 800888c:	07d8      	lsls	r0, r3, #31
 800888e:	d5ea      	bpl.n	8008866 <_printf_float+0x1a6>
 8008890:	1c4b      	adds	r3, r1, #1
 8008892:	e7e7      	b.n	8008864 <_printf_float+0x1a4>
 8008894:	2900      	cmp	r1, #0
 8008896:	bfd4      	ite	le
 8008898:	f1c1 0202 	rsble	r2, r1, #2
 800889c:	2201      	movgt	r2, #1
 800889e:	4413      	add	r3, r2
 80088a0:	e7e0      	b.n	8008864 <_printf_float+0x1a4>
 80088a2:	6823      	ldr	r3, [r4, #0]
 80088a4:	055a      	lsls	r2, r3, #21
 80088a6:	d407      	bmi.n	80088b8 <_printf_float+0x1f8>
 80088a8:	6923      	ldr	r3, [r4, #16]
 80088aa:	4642      	mov	r2, r8
 80088ac:	4631      	mov	r1, r6
 80088ae:	4628      	mov	r0, r5
 80088b0:	47b8      	blx	r7
 80088b2:	3001      	adds	r0, #1
 80088b4:	d12c      	bne.n	8008910 <_printf_float+0x250>
 80088b6:	e764      	b.n	8008782 <_printf_float+0xc2>
 80088b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088bc:	f240 80e0 	bls.w	8008a80 <_printf_float+0x3c0>
 80088c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088c4:	2200      	movs	r2, #0
 80088c6:	2300      	movs	r3, #0
 80088c8:	f7f8 f91e 	bl	8000b08 <__aeabi_dcmpeq>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d034      	beq.n	800893a <_printf_float+0x27a>
 80088d0:	4a37      	ldr	r2, [pc, #220]	; (80089b0 <_printf_float+0x2f0>)
 80088d2:	2301      	movs	r3, #1
 80088d4:	4631      	mov	r1, r6
 80088d6:	4628      	mov	r0, r5
 80088d8:	47b8      	blx	r7
 80088da:	3001      	adds	r0, #1
 80088dc:	f43f af51 	beq.w	8008782 <_printf_float+0xc2>
 80088e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088e4:	429a      	cmp	r2, r3
 80088e6:	db02      	blt.n	80088ee <_printf_float+0x22e>
 80088e8:	6823      	ldr	r3, [r4, #0]
 80088ea:	07d8      	lsls	r0, r3, #31
 80088ec:	d510      	bpl.n	8008910 <_printf_float+0x250>
 80088ee:	ee18 3a10 	vmov	r3, s16
 80088f2:	4652      	mov	r2, sl
 80088f4:	4631      	mov	r1, r6
 80088f6:	4628      	mov	r0, r5
 80088f8:	47b8      	blx	r7
 80088fa:	3001      	adds	r0, #1
 80088fc:	f43f af41 	beq.w	8008782 <_printf_float+0xc2>
 8008900:	f04f 0800 	mov.w	r8, #0
 8008904:	f104 091a 	add.w	r9, r4, #26
 8008908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800890a:	3b01      	subs	r3, #1
 800890c:	4543      	cmp	r3, r8
 800890e:	dc09      	bgt.n	8008924 <_printf_float+0x264>
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	079b      	lsls	r3, r3, #30
 8008914:	f100 8105 	bmi.w	8008b22 <_printf_float+0x462>
 8008918:	68e0      	ldr	r0, [r4, #12]
 800891a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800891c:	4298      	cmp	r0, r3
 800891e:	bfb8      	it	lt
 8008920:	4618      	movlt	r0, r3
 8008922:	e730      	b.n	8008786 <_printf_float+0xc6>
 8008924:	2301      	movs	r3, #1
 8008926:	464a      	mov	r2, r9
 8008928:	4631      	mov	r1, r6
 800892a:	4628      	mov	r0, r5
 800892c:	47b8      	blx	r7
 800892e:	3001      	adds	r0, #1
 8008930:	f43f af27 	beq.w	8008782 <_printf_float+0xc2>
 8008934:	f108 0801 	add.w	r8, r8, #1
 8008938:	e7e6      	b.n	8008908 <_printf_float+0x248>
 800893a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800893c:	2b00      	cmp	r3, #0
 800893e:	dc39      	bgt.n	80089b4 <_printf_float+0x2f4>
 8008940:	4a1b      	ldr	r2, [pc, #108]	; (80089b0 <_printf_float+0x2f0>)
 8008942:	2301      	movs	r3, #1
 8008944:	4631      	mov	r1, r6
 8008946:	4628      	mov	r0, r5
 8008948:	47b8      	blx	r7
 800894a:	3001      	adds	r0, #1
 800894c:	f43f af19 	beq.w	8008782 <_printf_float+0xc2>
 8008950:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008954:	4313      	orrs	r3, r2
 8008956:	d102      	bne.n	800895e <_printf_float+0x29e>
 8008958:	6823      	ldr	r3, [r4, #0]
 800895a:	07d9      	lsls	r1, r3, #31
 800895c:	d5d8      	bpl.n	8008910 <_printf_float+0x250>
 800895e:	ee18 3a10 	vmov	r3, s16
 8008962:	4652      	mov	r2, sl
 8008964:	4631      	mov	r1, r6
 8008966:	4628      	mov	r0, r5
 8008968:	47b8      	blx	r7
 800896a:	3001      	adds	r0, #1
 800896c:	f43f af09 	beq.w	8008782 <_printf_float+0xc2>
 8008970:	f04f 0900 	mov.w	r9, #0
 8008974:	f104 0a1a 	add.w	sl, r4, #26
 8008978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800897a:	425b      	negs	r3, r3
 800897c:	454b      	cmp	r3, r9
 800897e:	dc01      	bgt.n	8008984 <_printf_float+0x2c4>
 8008980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008982:	e792      	b.n	80088aa <_printf_float+0x1ea>
 8008984:	2301      	movs	r3, #1
 8008986:	4652      	mov	r2, sl
 8008988:	4631      	mov	r1, r6
 800898a:	4628      	mov	r0, r5
 800898c:	47b8      	blx	r7
 800898e:	3001      	adds	r0, #1
 8008990:	f43f aef7 	beq.w	8008782 <_printf_float+0xc2>
 8008994:	f109 0901 	add.w	r9, r9, #1
 8008998:	e7ee      	b.n	8008978 <_printf_float+0x2b8>
 800899a:	bf00      	nop
 800899c:	7fefffff 	.word	0x7fefffff
 80089a0:	0800b7d8 	.word	0x0800b7d8
 80089a4:	0800b7dc 	.word	0x0800b7dc
 80089a8:	0800b7e4 	.word	0x0800b7e4
 80089ac:	0800b7e0 	.word	0x0800b7e0
 80089b0:	0800b7e8 	.word	0x0800b7e8
 80089b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089b8:	429a      	cmp	r2, r3
 80089ba:	bfa8      	it	ge
 80089bc:	461a      	movge	r2, r3
 80089be:	2a00      	cmp	r2, #0
 80089c0:	4691      	mov	r9, r2
 80089c2:	dc37      	bgt.n	8008a34 <_printf_float+0x374>
 80089c4:	f04f 0b00 	mov.w	fp, #0
 80089c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089cc:	f104 021a 	add.w	r2, r4, #26
 80089d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089d2:	9305      	str	r3, [sp, #20]
 80089d4:	eba3 0309 	sub.w	r3, r3, r9
 80089d8:	455b      	cmp	r3, fp
 80089da:	dc33      	bgt.n	8008a44 <_printf_float+0x384>
 80089dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089e0:	429a      	cmp	r2, r3
 80089e2:	db3b      	blt.n	8008a5c <_printf_float+0x39c>
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	07da      	lsls	r2, r3, #31
 80089e8:	d438      	bmi.n	8008a5c <_printf_float+0x39c>
 80089ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089ec:	9b05      	ldr	r3, [sp, #20]
 80089ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	eba2 0901 	sub.w	r9, r2, r1
 80089f6:	4599      	cmp	r9, r3
 80089f8:	bfa8      	it	ge
 80089fa:	4699      	movge	r9, r3
 80089fc:	f1b9 0f00 	cmp.w	r9, #0
 8008a00:	dc35      	bgt.n	8008a6e <_printf_float+0x3ae>
 8008a02:	f04f 0800 	mov.w	r8, #0
 8008a06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a0a:	f104 0a1a 	add.w	sl, r4, #26
 8008a0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a12:	1a9b      	subs	r3, r3, r2
 8008a14:	eba3 0309 	sub.w	r3, r3, r9
 8008a18:	4543      	cmp	r3, r8
 8008a1a:	f77f af79 	ble.w	8008910 <_printf_float+0x250>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	4652      	mov	r2, sl
 8008a22:	4631      	mov	r1, r6
 8008a24:	4628      	mov	r0, r5
 8008a26:	47b8      	blx	r7
 8008a28:	3001      	adds	r0, #1
 8008a2a:	f43f aeaa 	beq.w	8008782 <_printf_float+0xc2>
 8008a2e:	f108 0801 	add.w	r8, r8, #1
 8008a32:	e7ec      	b.n	8008a0e <_printf_float+0x34e>
 8008a34:	4613      	mov	r3, r2
 8008a36:	4631      	mov	r1, r6
 8008a38:	4642      	mov	r2, r8
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	47b8      	blx	r7
 8008a3e:	3001      	adds	r0, #1
 8008a40:	d1c0      	bne.n	80089c4 <_printf_float+0x304>
 8008a42:	e69e      	b.n	8008782 <_printf_float+0xc2>
 8008a44:	2301      	movs	r3, #1
 8008a46:	4631      	mov	r1, r6
 8008a48:	4628      	mov	r0, r5
 8008a4a:	9205      	str	r2, [sp, #20]
 8008a4c:	47b8      	blx	r7
 8008a4e:	3001      	adds	r0, #1
 8008a50:	f43f ae97 	beq.w	8008782 <_printf_float+0xc2>
 8008a54:	9a05      	ldr	r2, [sp, #20]
 8008a56:	f10b 0b01 	add.w	fp, fp, #1
 8008a5a:	e7b9      	b.n	80089d0 <_printf_float+0x310>
 8008a5c:	ee18 3a10 	vmov	r3, s16
 8008a60:	4652      	mov	r2, sl
 8008a62:	4631      	mov	r1, r6
 8008a64:	4628      	mov	r0, r5
 8008a66:	47b8      	blx	r7
 8008a68:	3001      	adds	r0, #1
 8008a6a:	d1be      	bne.n	80089ea <_printf_float+0x32a>
 8008a6c:	e689      	b.n	8008782 <_printf_float+0xc2>
 8008a6e:	9a05      	ldr	r2, [sp, #20]
 8008a70:	464b      	mov	r3, r9
 8008a72:	4442      	add	r2, r8
 8008a74:	4631      	mov	r1, r6
 8008a76:	4628      	mov	r0, r5
 8008a78:	47b8      	blx	r7
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	d1c1      	bne.n	8008a02 <_printf_float+0x342>
 8008a7e:	e680      	b.n	8008782 <_printf_float+0xc2>
 8008a80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a82:	2a01      	cmp	r2, #1
 8008a84:	dc01      	bgt.n	8008a8a <_printf_float+0x3ca>
 8008a86:	07db      	lsls	r3, r3, #31
 8008a88:	d538      	bpl.n	8008afc <_printf_float+0x43c>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	4642      	mov	r2, r8
 8008a8e:	4631      	mov	r1, r6
 8008a90:	4628      	mov	r0, r5
 8008a92:	47b8      	blx	r7
 8008a94:	3001      	adds	r0, #1
 8008a96:	f43f ae74 	beq.w	8008782 <_printf_float+0xc2>
 8008a9a:	ee18 3a10 	vmov	r3, s16
 8008a9e:	4652      	mov	r2, sl
 8008aa0:	4631      	mov	r1, r6
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	47b8      	blx	r7
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	f43f ae6b 	beq.w	8008782 <_printf_float+0xc2>
 8008aac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f7f8 f828 	bl	8000b08 <__aeabi_dcmpeq>
 8008ab8:	b9d8      	cbnz	r0, 8008af2 <_printf_float+0x432>
 8008aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008abc:	f108 0201 	add.w	r2, r8, #1
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	47b8      	blx	r7
 8008ac8:	3001      	adds	r0, #1
 8008aca:	d10e      	bne.n	8008aea <_printf_float+0x42a>
 8008acc:	e659      	b.n	8008782 <_printf_float+0xc2>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	4652      	mov	r2, sl
 8008ad2:	4631      	mov	r1, r6
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	47b8      	blx	r7
 8008ad8:	3001      	adds	r0, #1
 8008ada:	f43f ae52 	beq.w	8008782 <_printf_float+0xc2>
 8008ade:	f108 0801 	add.w	r8, r8, #1
 8008ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	4543      	cmp	r3, r8
 8008ae8:	dcf1      	bgt.n	8008ace <_printf_float+0x40e>
 8008aea:	464b      	mov	r3, r9
 8008aec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008af0:	e6dc      	b.n	80088ac <_printf_float+0x1ec>
 8008af2:	f04f 0800 	mov.w	r8, #0
 8008af6:	f104 0a1a 	add.w	sl, r4, #26
 8008afa:	e7f2      	b.n	8008ae2 <_printf_float+0x422>
 8008afc:	2301      	movs	r3, #1
 8008afe:	4642      	mov	r2, r8
 8008b00:	e7df      	b.n	8008ac2 <_printf_float+0x402>
 8008b02:	2301      	movs	r3, #1
 8008b04:	464a      	mov	r2, r9
 8008b06:	4631      	mov	r1, r6
 8008b08:	4628      	mov	r0, r5
 8008b0a:	47b8      	blx	r7
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	f43f ae38 	beq.w	8008782 <_printf_float+0xc2>
 8008b12:	f108 0801 	add.w	r8, r8, #1
 8008b16:	68e3      	ldr	r3, [r4, #12]
 8008b18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b1a:	1a5b      	subs	r3, r3, r1
 8008b1c:	4543      	cmp	r3, r8
 8008b1e:	dcf0      	bgt.n	8008b02 <_printf_float+0x442>
 8008b20:	e6fa      	b.n	8008918 <_printf_float+0x258>
 8008b22:	f04f 0800 	mov.w	r8, #0
 8008b26:	f104 0919 	add.w	r9, r4, #25
 8008b2a:	e7f4      	b.n	8008b16 <_printf_float+0x456>

08008b2c <_printf_common>:
 8008b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b30:	4616      	mov	r6, r2
 8008b32:	4699      	mov	r9, r3
 8008b34:	688a      	ldr	r2, [r1, #8]
 8008b36:	690b      	ldr	r3, [r1, #16]
 8008b38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	bfb8      	it	lt
 8008b40:	4613      	movlt	r3, r2
 8008b42:	6033      	str	r3, [r6, #0]
 8008b44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b48:	4607      	mov	r7, r0
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	b10a      	cbz	r2, 8008b52 <_printf_common+0x26>
 8008b4e:	3301      	adds	r3, #1
 8008b50:	6033      	str	r3, [r6, #0]
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	0699      	lsls	r1, r3, #26
 8008b56:	bf42      	ittt	mi
 8008b58:	6833      	ldrmi	r3, [r6, #0]
 8008b5a:	3302      	addmi	r3, #2
 8008b5c:	6033      	strmi	r3, [r6, #0]
 8008b5e:	6825      	ldr	r5, [r4, #0]
 8008b60:	f015 0506 	ands.w	r5, r5, #6
 8008b64:	d106      	bne.n	8008b74 <_printf_common+0x48>
 8008b66:	f104 0a19 	add.w	sl, r4, #25
 8008b6a:	68e3      	ldr	r3, [r4, #12]
 8008b6c:	6832      	ldr	r2, [r6, #0]
 8008b6e:	1a9b      	subs	r3, r3, r2
 8008b70:	42ab      	cmp	r3, r5
 8008b72:	dc26      	bgt.n	8008bc2 <_printf_common+0x96>
 8008b74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b78:	1e13      	subs	r3, r2, #0
 8008b7a:	6822      	ldr	r2, [r4, #0]
 8008b7c:	bf18      	it	ne
 8008b7e:	2301      	movne	r3, #1
 8008b80:	0692      	lsls	r2, r2, #26
 8008b82:	d42b      	bmi.n	8008bdc <_printf_common+0xb0>
 8008b84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b88:	4649      	mov	r1, r9
 8008b8a:	4638      	mov	r0, r7
 8008b8c:	47c0      	blx	r8
 8008b8e:	3001      	adds	r0, #1
 8008b90:	d01e      	beq.n	8008bd0 <_printf_common+0xa4>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	68e5      	ldr	r5, [r4, #12]
 8008b96:	6832      	ldr	r2, [r6, #0]
 8008b98:	f003 0306 	and.w	r3, r3, #6
 8008b9c:	2b04      	cmp	r3, #4
 8008b9e:	bf08      	it	eq
 8008ba0:	1aad      	subeq	r5, r5, r2
 8008ba2:	68a3      	ldr	r3, [r4, #8]
 8008ba4:	6922      	ldr	r2, [r4, #16]
 8008ba6:	bf0c      	ite	eq
 8008ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bac:	2500      	movne	r5, #0
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	bfc4      	itt	gt
 8008bb2:	1a9b      	subgt	r3, r3, r2
 8008bb4:	18ed      	addgt	r5, r5, r3
 8008bb6:	2600      	movs	r6, #0
 8008bb8:	341a      	adds	r4, #26
 8008bba:	42b5      	cmp	r5, r6
 8008bbc:	d11a      	bne.n	8008bf4 <_printf_common+0xc8>
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	e008      	b.n	8008bd4 <_printf_common+0xa8>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	4652      	mov	r2, sl
 8008bc6:	4649      	mov	r1, r9
 8008bc8:	4638      	mov	r0, r7
 8008bca:	47c0      	blx	r8
 8008bcc:	3001      	adds	r0, #1
 8008bce:	d103      	bne.n	8008bd8 <_printf_common+0xac>
 8008bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bd8:	3501      	adds	r5, #1
 8008bda:	e7c6      	b.n	8008b6a <_printf_common+0x3e>
 8008bdc:	18e1      	adds	r1, r4, r3
 8008bde:	1c5a      	adds	r2, r3, #1
 8008be0:	2030      	movs	r0, #48	; 0x30
 8008be2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008be6:	4422      	add	r2, r4
 8008be8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bf0:	3302      	adds	r3, #2
 8008bf2:	e7c7      	b.n	8008b84 <_printf_common+0x58>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	4622      	mov	r2, r4
 8008bf8:	4649      	mov	r1, r9
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	47c0      	blx	r8
 8008bfe:	3001      	adds	r0, #1
 8008c00:	d0e6      	beq.n	8008bd0 <_printf_common+0xa4>
 8008c02:	3601      	adds	r6, #1
 8008c04:	e7d9      	b.n	8008bba <_printf_common+0x8e>
	...

08008c08 <_printf_i>:
 8008c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c0c:	460c      	mov	r4, r1
 8008c0e:	4691      	mov	r9, r2
 8008c10:	7e27      	ldrb	r7, [r4, #24]
 8008c12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c14:	2f78      	cmp	r7, #120	; 0x78
 8008c16:	4680      	mov	r8, r0
 8008c18:	469a      	mov	sl, r3
 8008c1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c1e:	d807      	bhi.n	8008c30 <_printf_i+0x28>
 8008c20:	2f62      	cmp	r7, #98	; 0x62
 8008c22:	d80a      	bhi.n	8008c3a <_printf_i+0x32>
 8008c24:	2f00      	cmp	r7, #0
 8008c26:	f000 80d8 	beq.w	8008dda <_printf_i+0x1d2>
 8008c2a:	2f58      	cmp	r7, #88	; 0x58
 8008c2c:	f000 80a3 	beq.w	8008d76 <_printf_i+0x16e>
 8008c30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c38:	e03a      	b.n	8008cb0 <_printf_i+0xa8>
 8008c3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c3e:	2b15      	cmp	r3, #21
 8008c40:	d8f6      	bhi.n	8008c30 <_printf_i+0x28>
 8008c42:	a001      	add	r0, pc, #4	; (adr r0, 8008c48 <_printf_i+0x40>)
 8008c44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008c48:	08008ca1 	.word	0x08008ca1
 8008c4c:	08008cb5 	.word	0x08008cb5
 8008c50:	08008c31 	.word	0x08008c31
 8008c54:	08008c31 	.word	0x08008c31
 8008c58:	08008c31 	.word	0x08008c31
 8008c5c:	08008c31 	.word	0x08008c31
 8008c60:	08008cb5 	.word	0x08008cb5
 8008c64:	08008c31 	.word	0x08008c31
 8008c68:	08008c31 	.word	0x08008c31
 8008c6c:	08008c31 	.word	0x08008c31
 8008c70:	08008c31 	.word	0x08008c31
 8008c74:	08008dc1 	.word	0x08008dc1
 8008c78:	08008ce5 	.word	0x08008ce5
 8008c7c:	08008da3 	.word	0x08008da3
 8008c80:	08008c31 	.word	0x08008c31
 8008c84:	08008c31 	.word	0x08008c31
 8008c88:	08008de3 	.word	0x08008de3
 8008c8c:	08008c31 	.word	0x08008c31
 8008c90:	08008ce5 	.word	0x08008ce5
 8008c94:	08008c31 	.word	0x08008c31
 8008c98:	08008c31 	.word	0x08008c31
 8008c9c:	08008dab 	.word	0x08008dab
 8008ca0:	680b      	ldr	r3, [r1, #0]
 8008ca2:	1d1a      	adds	r2, r3, #4
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	600a      	str	r2, [r1, #0]
 8008ca8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e0a3      	b.n	8008dfc <_printf_i+0x1f4>
 8008cb4:	6825      	ldr	r5, [r4, #0]
 8008cb6:	6808      	ldr	r0, [r1, #0]
 8008cb8:	062e      	lsls	r6, r5, #24
 8008cba:	f100 0304 	add.w	r3, r0, #4
 8008cbe:	d50a      	bpl.n	8008cd6 <_printf_i+0xce>
 8008cc0:	6805      	ldr	r5, [r0, #0]
 8008cc2:	600b      	str	r3, [r1, #0]
 8008cc4:	2d00      	cmp	r5, #0
 8008cc6:	da03      	bge.n	8008cd0 <_printf_i+0xc8>
 8008cc8:	232d      	movs	r3, #45	; 0x2d
 8008cca:	426d      	negs	r5, r5
 8008ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cd0:	485e      	ldr	r0, [pc, #376]	; (8008e4c <_printf_i+0x244>)
 8008cd2:	230a      	movs	r3, #10
 8008cd4:	e019      	b.n	8008d0a <_printf_i+0x102>
 8008cd6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008cda:	6805      	ldr	r5, [r0, #0]
 8008cdc:	600b      	str	r3, [r1, #0]
 8008cde:	bf18      	it	ne
 8008ce0:	b22d      	sxthne	r5, r5
 8008ce2:	e7ef      	b.n	8008cc4 <_printf_i+0xbc>
 8008ce4:	680b      	ldr	r3, [r1, #0]
 8008ce6:	6825      	ldr	r5, [r4, #0]
 8008ce8:	1d18      	adds	r0, r3, #4
 8008cea:	6008      	str	r0, [r1, #0]
 8008cec:	0628      	lsls	r0, r5, #24
 8008cee:	d501      	bpl.n	8008cf4 <_printf_i+0xec>
 8008cf0:	681d      	ldr	r5, [r3, #0]
 8008cf2:	e002      	b.n	8008cfa <_printf_i+0xf2>
 8008cf4:	0669      	lsls	r1, r5, #25
 8008cf6:	d5fb      	bpl.n	8008cf0 <_printf_i+0xe8>
 8008cf8:	881d      	ldrh	r5, [r3, #0]
 8008cfa:	4854      	ldr	r0, [pc, #336]	; (8008e4c <_printf_i+0x244>)
 8008cfc:	2f6f      	cmp	r7, #111	; 0x6f
 8008cfe:	bf0c      	ite	eq
 8008d00:	2308      	moveq	r3, #8
 8008d02:	230a      	movne	r3, #10
 8008d04:	2100      	movs	r1, #0
 8008d06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d0a:	6866      	ldr	r6, [r4, #4]
 8008d0c:	60a6      	str	r6, [r4, #8]
 8008d0e:	2e00      	cmp	r6, #0
 8008d10:	bfa2      	ittt	ge
 8008d12:	6821      	ldrge	r1, [r4, #0]
 8008d14:	f021 0104 	bicge.w	r1, r1, #4
 8008d18:	6021      	strge	r1, [r4, #0]
 8008d1a:	b90d      	cbnz	r5, 8008d20 <_printf_i+0x118>
 8008d1c:	2e00      	cmp	r6, #0
 8008d1e:	d04d      	beq.n	8008dbc <_printf_i+0x1b4>
 8008d20:	4616      	mov	r6, r2
 8008d22:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d26:	fb03 5711 	mls	r7, r3, r1, r5
 8008d2a:	5dc7      	ldrb	r7, [r0, r7]
 8008d2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d30:	462f      	mov	r7, r5
 8008d32:	42bb      	cmp	r3, r7
 8008d34:	460d      	mov	r5, r1
 8008d36:	d9f4      	bls.n	8008d22 <_printf_i+0x11a>
 8008d38:	2b08      	cmp	r3, #8
 8008d3a:	d10b      	bne.n	8008d54 <_printf_i+0x14c>
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	07df      	lsls	r7, r3, #31
 8008d40:	d508      	bpl.n	8008d54 <_printf_i+0x14c>
 8008d42:	6923      	ldr	r3, [r4, #16]
 8008d44:	6861      	ldr	r1, [r4, #4]
 8008d46:	4299      	cmp	r1, r3
 8008d48:	bfde      	ittt	le
 8008d4a:	2330      	movle	r3, #48	; 0x30
 8008d4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d50:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008d54:	1b92      	subs	r2, r2, r6
 8008d56:	6122      	str	r2, [r4, #16]
 8008d58:	f8cd a000 	str.w	sl, [sp]
 8008d5c:	464b      	mov	r3, r9
 8008d5e:	aa03      	add	r2, sp, #12
 8008d60:	4621      	mov	r1, r4
 8008d62:	4640      	mov	r0, r8
 8008d64:	f7ff fee2 	bl	8008b2c <_printf_common>
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d14c      	bne.n	8008e06 <_printf_i+0x1fe>
 8008d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d70:	b004      	add	sp, #16
 8008d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d76:	4835      	ldr	r0, [pc, #212]	; (8008e4c <_printf_i+0x244>)
 8008d78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d7c:	6823      	ldr	r3, [r4, #0]
 8008d7e:	680e      	ldr	r6, [r1, #0]
 8008d80:	061f      	lsls	r7, r3, #24
 8008d82:	f856 5b04 	ldr.w	r5, [r6], #4
 8008d86:	600e      	str	r6, [r1, #0]
 8008d88:	d514      	bpl.n	8008db4 <_printf_i+0x1ac>
 8008d8a:	07d9      	lsls	r1, r3, #31
 8008d8c:	bf44      	itt	mi
 8008d8e:	f043 0320 	orrmi.w	r3, r3, #32
 8008d92:	6023      	strmi	r3, [r4, #0]
 8008d94:	b91d      	cbnz	r5, 8008d9e <_printf_i+0x196>
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	f023 0320 	bic.w	r3, r3, #32
 8008d9c:	6023      	str	r3, [r4, #0]
 8008d9e:	2310      	movs	r3, #16
 8008da0:	e7b0      	b.n	8008d04 <_printf_i+0xfc>
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	f043 0320 	orr.w	r3, r3, #32
 8008da8:	6023      	str	r3, [r4, #0]
 8008daa:	2378      	movs	r3, #120	; 0x78
 8008dac:	4828      	ldr	r0, [pc, #160]	; (8008e50 <_printf_i+0x248>)
 8008dae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008db2:	e7e3      	b.n	8008d7c <_printf_i+0x174>
 8008db4:	065e      	lsls	r6, r3, #25
 8008db6:	bf48      	it	mi
 8008db8:	b2ad      	uxthmi	r5, r5
 8008dba:	e7e6      	b.n	8008d8a <_printf_i+0x182>
 8008dbc:	4616      	mov	r6, r2
 8008dbe:	e7bb      	b.n	8008d38 <_printf_i+0x130>
 8008dc0:	680b      	ldr	r3, [r1, #0]
 8008dc2:	6826      	ldr	r6, [r4, #0]
 8008dc4:	6960      	ldr	r0, [r4, #20]
 8008dc6:	1d1d      	adds	r5, r3, #4
 8008dc8:	600d      	str	r5, [r1, #0]
 8008dca:	0635      	lsls	r5, r6, #24
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	d501      	bpl.n	8008dd4 <_printf_i+0x1cc>
 8008dd0:	6018      	str	r0, [r3, #0]
 8008dd2:	e002      	b.n	8008dda <_printf_i+0x1d2>
 8008dd4:	0671      	lsls	r1, r6, #25
 8008dd6:	d5fb      	bpl.n	8008dd0 <_printf_i+0x1c8>
 8008dd8:	8018      	strh	r0, [r3, #0]
 8008dda:	2300      	movs	r3, #0
 8008ddc:	6123      	str	r3, [r4, #16]
 8008dde:	4616      	mov	r6, r2
 8008de0:	e7ba      	b.n	8008d58 <_printf_i+0x150>
 8008de2:	680b      	ldr	r3, [r1, #0]
 8008de4:	1d1a      	adds	r2, r3, #4
 8008de6:	600a      	str	r2, [r1, #0]
 8008de8:	681e      	ldr	r6, [r3, #0]
 8008dea:	6862      	ldr	r2, [r4, #4]
 8008dec:	2100      	movs	r1, #0
 8008dee:	4630      	mov	r0, r6
 8008df0:	f7f7 fa16 	bl	8000220 <memchr>
 8008df4:	b108      	cbz	r0, 8008dfa <_printf_i+0x1f2>
 8008df6:	1b80      	subs	r0, r0, r6
 8008df8:	6060      	str	r0, [r4, #4]
 8008dfa:	6863      	ldr	r3, [r4, #4]
 8008dfc:	6123      	str	r3, [r4, #16]
 8008dfe:	2300      	movs	r3, #0
 8008e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e04:	e7a8      	b.n	8008d58 <_printf_i+0x150>
 8008e06:	6923      	ldr	r3, [r4, #16]
 8008e08:	4632      	mov	r2, r6
 8008e0a:	4649      	mov	r1, r9
 8008e0c:	4640      	mov	r0, r8
 8008e0e:	47d0      	blx	sl
 8008e10:	3001      	adds	r0, #1
 8008e12:	d0ab      	beq.n	8008d6c <_printf_i+0x164>
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	079b      	lsls	r3, r3, #30
 8008e18:	d413      	bmi.n	8008e42 <_printf_i+0x23a>
 8008e1a:	68e0      	ldr	r0, [r4, #12]
 8008e1c:	9b03      	ldr	r3, [sp, #12]
 8008e1e:	4298      	cmp	r0, r3
 8008e20:	bfb8      	it	lt
 8008e22:	4618      	movlt	r0, r3
 8008e24:	e7a4      	b.n	8008d70 <_printf_i+0x168>
 8008e26:	2301      	movs	r3, #1
 8008e28:	4632      	mov	r2, r6
 8008e2a:	4649      	mov	r1, r9
 8008e2c:	4640      	mov	r0, r8
 8008e2e:	47d0      	blx	sl
 8008e30:	3001      	adds	r0, #1
 8008e32:	d09b      	beq.n	8008d6c <_printf_i+0x164>
 8008e34:	3501      	adds	r5, #1
 8008e36:	68e3      	ldr	r3, [r4, #12]
 8008e38:	9903      	ldr	r1, [sp, #12]
 8008e3a:	1a5b      	subs	r3, r3, r1
 8008e3c:	42ab      	cmp	r3, r5
 8008e3e:	dcf2      	bgt.n	8008e26 <_printf_i+0x21e>
 8008e40:	e7eb      	b.n	8008e1a <_printf_i+0x212>
 8008e42:	2500      	movs	r5, #0
 8008e44:	f104 0619 	add.w	r6, r4, #25
 8008e48:	e7f5      	b.n	8008e36 <_printf_i+0x22e>
 8008e4a:	bf00      	nop
 8008e4c:	0800b7ea 	.word	0x0800b7ea
 8008e50:	0800b7fb 	.word	0x0800b7fb

08008e54 <_sbrk_r>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	4d06      	ldr	r5, [pc, #24]	; (8008e70 <_sbrk_r+0x1c>)
 8008e58:	2300      	movs	r3, #0
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	4608      	mov	r0, r1
 8008e5e:	602b      	str	r3, [r5, #0]
 8008e60:	f7f8 feda 	bl	8001c18 <_sbrk>
 8008e64:	1c43      	adds	r3, r0, #1
 8008e66:	d102      	bne.n	8008e6e <_sbrk_r+0x1a>
 8008e68:	682b      	ldr	r3, [r5, #0]
 8008e6a:	b103      	cbz	r3, 8008e6e <_sbrk_r+0x1a>
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	bd38      	pop	{r3, r4, r5, pc}
 8008e70:	20001378 	.word	0x20001378

08008e74 <siprintf>:
 8008e74:	b40e      	push	{r1, r2, r3}
 8008e76:	b500      	push	{lr}
 8008e78:	b09c      	sub	sp, #112	; 0x70
 8008e7a:	ab1d      	add	r3, sp, #116	; 0x74
 8008e7c:	9002      	str	r0, [sp, #8]
 8008e7e:	9006      	str	r0, [sp, #24]
 8008e80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e84:	4809      	ldr	r0, [pc, #36]	; (8008eac <siprintf+0x38>)
 8008e86:	9107      	str	r1, [sp, #28]
 8008e88:	9104      	str	r1, [sp, #16]
 8008e8a:	4909      	ldr	r1, [pc, #36]	; (8008eb0 <siprintf+0x3c>)
 8008e8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e90:	9105      	str	r1, [sp, #20]
 8008e92:	6800      	ldr	r0, [r0, #0]
 8008e94:	9301      	str	r3, [sp, #4]
 8008e96:	a902      	add	r1, sp, #8
 8008e98:	f001 faa4 	bl	800a3e4 <_svfiprintf_r>
 8008e9c:	9b02      	ldr	r3, [sp, #8]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	701a      	strb	r2, [r3, #0]
 8008ea2:	b01c      	add	sp, #112	; 0x70
 8008ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ea8:	b003      	add	sp, #12
 8008eaa:	4770      	bx	lr
 8008eac:	200005e4 	.word	0x200005e4
 8008eb0:	ffff0208 	.word	0xffff0208

08008eb4 <quorem>:
 8008eb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb8:	6903      	ldr	r3, [r0, #16]
 8008eba:	690c      	ldr	r4, [r1, #16]
 8008ebc:	42a3      	cmp	r3, r4
 8008ebe:	4607      	mov	r7, r0
 8008ec0:	f2c0 8081 	blt.w	8008fc6 <quorem+0x112>
 8008ec4:	3c01      	subs	r4, #1
 8008ec6:	f101 0814 	add.w	r8, r1, #20
 8008eca:	f100 0514 	add.w	r5, r0, #20
 8008ece:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ed2:	9301      	str	r3, [sp, #4]
 8008ed4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ed8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008edc:	3301      	adds	r3, #1
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ee4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ee8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008eec:	d331      	bcc.n	8008f52 <quorem+0x9e>
 8008eee:	f04f 0e00 	mov.w	lr, #0
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	46ac      	mov	ip, r5
 8008ef6:	46f2      	mov	sl, lr
 8008ef8:	f850 2b04 	ldr.w	r2, [r0], #4
 8008efc:	b293      	uxth	r3, r2
 8008efe:	fb06 e303 	mla	r3, r6, r3, lr
 8008f02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	ebaa 0303 	sub.w	r3, sl, r3
 8008f0c:	0c12      	lsrs	r2, r2, #16
 8008f0e:	f8dc a000 	ldr.w	sl, [ip]
 8008f12:	fb06 e202 	mla	r2, r6, r2, lr
 8008f16:	fa13 f38a 	uxtah	r3, r3, sl
 8008f1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f1e:	fa1f fa82 	uxth.w	sl, r2
 8008f22:	f8dc 2000 	ldr.w	r2, [ip]
 8008f26:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008f2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f34:	4581      	cmp	r9, r0
 8008f36:	f84c 3b04 	str.w	r3, [ip], #4
 8008f3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f3e:	d2db      	bcs.n	8008ef8 <quorem+0x44>
 8008f40:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f44:	b92b      	cbnz	r3, 8008f52 <quorem+0x9e>
 8008f46:	9b01      	ldr	r3, [sp, #4]
 8008f48:	3b04      	subs	r3, #4
 8008f4a:	429d      	cmp	r5, r3
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	d32e      	bcc.n	8008fae <quorem+0xfa>
 8008f50:	613c      	str	r4, [r7, #16]
 8008f52:	4638      	mov	r0, r7
 8008f54:	f001 f8b6 	bl	800a0c4 <__mcmp>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	db24      	blt.n	8008fa6 <quorem+0xf2>
 8008f5c:	3601      	adds	r6, #1
 8008f5e:	4628      	mov	r0, r5
 8008f60:	f04f 0c00 	mov.w	ip, #0
 8008f64:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f68:	f8d0 e000 	ldr.w	lr, [r0]
 8008f6c:	b293      	uxth	r3, r2
 8008f6e:	ebac 0303 	sub.w	r3, ip, r3
 8008f72:	0c12      	lsrs	r2, r2, #16
 8008f74:	fa13 f38e 	uxtah	r3, r3, lr
 8008f78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f86:	45c1      	cmp	r9, r8
 8008f88:	f840 3b04 	str.w	r3, [r0], #4
 8008f8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008f90:	d2e8      	bcs.n	8008f64 <quorem+0xb0>
 8008f92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f9a:	b922      	cbnz	r2, 8008fa6 <quorem+0xf2>
 8008f9c:	3b04      	subs	r3, #4
 8008f9e:	429d      	cmp	r5, r3
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	d30a      	bcc.n	8008fba <quorem+0x106>
 8008fa4:	613c      	str	r4, [r7, #16]
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	b003      	add	sp, #12
 8008faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fae:	6812      	ldr	r2, [r2, #0]
 8008fb0:	3b04      	subs	r3, #4
 8008fb2:	2a00      	cmp	r2, #0
 8008fb4:	d1cc      	bne.n	8008f50 <quorem+0x9c>
 8008fb6:	3c01      	subs	r4, #1
 8008fb8:	e7c7      	b.n	8008f4a <quorem+0x96>
 8008fba:	6812      	ldr	r2, [r2, #0]
 8008fbc:	3b04      	subs	r3, #4
 8008fbe:	2a00      	cmp	r2, #0
 8008fc0:	d1f0      	bne.n	8008fa4 <quorem+0xf0>
 8008fc2:	3c01      	subs	r4, #1
 8008fc4:	e7eb      	b.n	8008f9e <quorem+0xea>
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	e7ee      	b.n	8008fa8 <quorem+0xf4>
 8008fca:	0000      	movs	r0, r0
 8008fcc:	0000      	movs	r0, r0
	...

08008fd0 <_dtoa_r>:
 8008fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd4:	ed2d 8b02 	vpush	{d8}
 8008fd8:	ec57 6b10 	vmov	r6, r7, d0
 8008fdc:	b095      	sub	sp, #84	; 0x54
 8008fde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008fe0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008fe4:	9105      	str	r1, [sp, #20]
 8008fe6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008fea:	4604      	mov	r4, r0
 8008fec:	9209      	str	r2, [sp, #36]	; 0x24
 8008fee:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ff0:	b975      	cbnz	r5, 8009010 <_dtoa_r+0x40>
 8008ff2:	2010      	movs	r0, #16
 8008ff4:	f7ff f9fc 	bl	80083f0 <malloc>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	6260      	str	r0, [r4, #36]	; 0x24
 8008ffc:	b920      	cbnz	r0, 8009008 <_dtoa_r+0x38>
 8008ffe:	4bb2      	ldr	r3, [pc, #712]	; (80092c8 <_dtoa_r+0x2f8>)
 8009000:	21ea      	movs	r1, #234	; 0xea
 8009002:	48b2      	ldr	r0, [pc, #712]	; (80092cc <_dtoa_r+0x2fc>)
 8009004:	f001 faee 	bl	800a5e4 <__assert_func>
 8009008:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800900c:	6005      	str	r5, [r0, #0]
 800900e:	60c5      	str	r5, [r0, #12]
 8009010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009012:	6819      	ldr	r1, [r3, #0]
 8009014:	b151      	cbz	r1, 800902c <_dtoa_r+0x5c>
 8009016:	685a      	ldr	r2, [r3, #4]
 8009018:	604a      	str	r2, [r1, #4]
 800901a:	2301      	movs	r3, #1
 800901c:	4093      	lsls	r3, r2
 800901e:	608b      	str	r3, [r1, #8]
 8009020:	4620      	mov	r0, r4
 8009022:	f000 fe11 	bl	8009c48 <_Bfree>
 8009026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009028:	2200      	movs	r2, #0
 800902a:	601a      	str	r2, [r3, #0]
 800902c:	1e3b      	subs	r3, r7, #0
 800902e:	bfb9      	ittee	lt
 8009030:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009034:	9303      	strlt	r3, [sp, #12]
 8009036:	2300      	movge	r3, #0
 8009038:	f8c8 3000 	strge.w	r3, [r8]
 800903c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009040:	4ba3      	ldr	r3, [pc, #652]	; (80092d0 <_dtoa_r+0x300>)
 8009042:	bfbc      	itt	lt
 8009044:	2201      	movlt	r2, #1
 8009046:	f8c8 2000 	strlt.w	r2, [r8]
 800904a:	ea33 0309 	bics.w	r3, r3, r9
 800904e:	d11b      	bne.n	8009088 <_dtoa_r+0xb8>
 8009050:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009052:	f242 730f 	movw	r3, #9999	; 0x270f
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800905c:	4333      	orrs	r3, r6
 800905e:	f000 857a 	beq.w	8009b56 <_dtoa_r+0xb86>
 8009062:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009064:	b963      	cbnz	r3, 8009080 <_dtoa_r+0xb0>
 8009066:	4b9b      	ldr	r3, [pc, #620]	; (80092d4 <_dtoa_r+0x304>)
 8009068:	e024      	b.n	80090b4 <_dtoa_r+0xe4>
 800906a:	4b9b      	ldr	r3, [pc, #620]	; (80092d8 <_dtoa_r+0x308>)
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	3308      	adds	r3, #8
 8009070:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009072:	6013      	str	r3, [r2, #0]
 8009074:	9800      	ldr	r0, [sp, #0]
 8009076:	b015      	add	sp, #84	; 0x54
 8009078:	ecbd 8b02 	vpop	{d8}
 800907c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009080:	4b94      	ldr	r3, [pc, #592]	; (80092d4 <_dtoa_r+0x304>)
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	3303      	adds	r3, #3
 8009086:	e7f3      	b.n	8009070 <_dtoa_r+0xa0>
 8009088:	ed9d 7b02 	vldr	d7, [sp, #8]
 800908c:	2200      	movs	r2, #0
 800908e:	ec51 0b17 	vmov	r0, r1, d7
 8009092:	2300      	movs	r3, #0
 8009094:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009098:	f7f7 fd36 	bl	8000b08 <__aeabi_dcmpeq>
 800909c:	4680      	mov	r8, r0
 800909e:	b158      	cbz	r0, 80090b8 <_dtoa_r+0xe8>
 80090a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80090a2:	2301      	movs	r3, #1
 80090a4:	6013      	str	r3, [r2, #0]
 80090a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 8551 	beq.w	8009b50 <_dtoa_r+0xb80>
 80090ae:	488b      	ldr	r0, [pc, #556]	; (80092dc <_dtoa_r+0x30c>)
 80090b0:	6018      	str	r0, [r3, #0]
 80090b2:	1e43      	subs	r3, r0, #1
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	e7dd      	b.n	8009074 <_dtoa_r+0xa4>
 80090b8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80090bc:	aa12      	add	r2, sp, #72	; 0x48
 80090be:	a913      	add	r1, sp, #76	; 0x4c
 80090c0:	4620      	mov	r0, r4
 80090c2:	f001 f8a3 	bl	800a20c <__d2b>
 80090c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090ca:	4683      	mov	fp, r0
 80090cc:	2d00      	cmp	r5, #0
 80090ce:	d07c      	beq.n	80091ca <_dtoa_r+0x1fa>
 80090d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80090d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80090de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80090e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80090e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80090ea:	4b7d      	ldr	r3, [pc, #500]	; (80092e0 <_dtoa_r+0x310>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	4630      	mov	r0, r6
 80090f0:	4639      	mov	r1, r7
 80090f2:	f7f7 f8e9 	bl	80002c8 <__aeabi_dsub>
 80090f6:	a36e      	add	r3, pc, #440	; (adr r3, 80092b0 <_dtoa_r+0x2e0>)
 80090f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fc:	f7f7 fa9c 	bl	8000638 <__aeabi_dmul>
 8009100:	a36d      	add	r3, pc, #436	; (adr r3, 80092b8 <_dtoa_r+0x2e8>)
 8009102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009106:	f7f7 f8e1 	bl	80002cc <__adddf3>
 800910a:	4606      	mov	r6, r0
 800910c:	4628      	mov	r0, r5
 800910e:	460f      	mov	r7, r1
 8009110:	f7f7 fa28 	bl	8000564 <__aeabi_i2d>
 8009114:	a36a      	add	r3, pc, #424	; (adr r3, 80092c0 <_dtoa_r+0x2f0>)
 8009116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911a:	f7f7 fa8d 	bl	8000638 <__aeabi_dmul>
 800911e:	4602      	mov	r2, r0
 8009120:	460b      	mov	r3, r1
 8009122:	4630      	mov	r0, r6
 8009124:	4639      	mov	r1, r7
 8009126:	f7f7 f8d1 	bl	80002cc <__adddf3>
 800912a:	4606      	mov	r6, r0
 800912c:	460f      	mov	r7, r1
 800912e:	f7f7 fd33 	bl	8000b98 <__aeabi_d2iz>
 8009132:	2200      	movs	r2, #0
 8009134:	4682      	mov	sl, r0
 8009136:	2300      	movs	r3, #0
 8009138:	4630      	mov	r0, r6
 800913a:	4639      	mov	r1, r7
 800913c:	f7f7 fcee 	bl	8000b1c <__aeabi_dcmplt>
 8009140:	b148      	cbz	r0, 8009156 <_dtoa_r+0x186>
 8009142:	4650      	mov	r0, sl
 8009144:	f7f7 fa0e 	bl	8000564 <__aeabi_i2d>
 8009148:	4632      	mov	r2, r6
 800914a:	463b      	mov	r3, r7
 800914c:	f7f7 fcdc 	bl	8000b08 <__aeabi_dcmpeq>
 8009150:	b908      	cbnz	r0, 8009156 <_dtoa_r+0x186>
 8009152:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009156:	f1ba 0f16 	cmp.w	sl, #22
 800915a:	d854      	bhi.n	8009206 <_dtoa_r+0x236>
 800915c:	4b61      	ldr	r3, [pc, #388]	; (80092e4 <_dtoa_r+0x314>)
 800915e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009166:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800916a:	f7f7 fcd7 	bl	8000b1c <__aeabi_dcmplt>
 800916e:	2800      	cmp	r0, #0
 8009170:	d04b      	beq.n	800920a <_dtoa_r+0x23a>
 8009172:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009176:	2300      	movs	r3, #0
 8009178:	930e      	str	r3, [sp, #56]	; 0x38
 800917a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800917c:	1b5d      	subs	r5, r3, r5
 800917e:	1e6b      	subs	r3, r5, #1
 8009180:	9304      	str	r3, [sp, #16]
 8009182:	bf43      	ittte	mi
 8009184:	2300      	movmi	r3, #0
 8009186:	f1c5 0801 	rsbmi	r8, r5, #1
 800918a:	9304      	strmi	r3, [sp, #16]
 800918c:	f04f 0800 	movpl.w	r8, #0
 8009190:	f1ba 0f00 	cmp.w	sl, #0
 8009194:	db3b      	blt.n	800920e <_dtoa_r+0x23e>
 8009196:	9b04      	ldr	r3, [sp, #16]
 8009198:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800919c:	4453      	add	r3, sl
 800919e:	9304      	str	r3, [sp, #16]
 80091a0:	2300      	movs	r3, #0
 80091a2:	9306      	str	r3, [sp, #24]
 80091a4:	9b05      	ldr	r3, [sp, #20]
 80091a6:	2b09      	cmp	r3, #9
 80091a8:	d869      	bhi.n	800927e <_dtoa_r+0x2ae>
 80091aa:	2b05      	cmp	r3, #5
 80091ac:	bfc4      	itt	gt
 80091ae:	3b04      	subgt	r3, #4
 80091b0:	9305      	strgt	r3, [sp, #20]
 80091b2:	9b05      	ldr	r3, [sp, #20]
 80091b4:	f1a3 0302 	sub.w	r3, r3, #2
 80091b8:	bfcc      	ite	gt
 80091ba:	2500      	movgt	r5, #0
 80091bc:	2501      	movle	r5, #1
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d869      	bhi.n	8009296 <_dtoa_r+0x2c6>
 80091c2:	e8df f003 	tbb	[pc, r3]
 80091c6:	4e2c      	.short	0x4e2c
 80091c8:	5a4c      	.short	0x5a4c
 80091ca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80091ce:	441d      	add	r5, r3
 80091d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80091d4:	2b20      	cmp	r3, #32
 80091d6:	bfc1      	itttt	gt
 80091d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80091dc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80091e0:	fa09 f303 	lslgt.w	r3, r9, r3
 80091e4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80091e8:	bfda      	itte	le
 80091ea:	f1c3 0320 	rsble	r3, r3, #32
 80091ee:	fa06 f003 	lslle.w	r0, r6, r3
 80091f2:	4318      	orrgt	r0, r3
 80091f4:	f7f7 f9a6 	bl	8000544 <__aeabi_ui2d>
 80091f8:	2301      	movs	r3, #1
 80091fa:	4606      	mov	r6, r0
 80091fc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009200:	3d01      	subs	r5, #1
 8009202:	9310      	str	r3, [sp, #64]	; 0x40
 8009204:	e771      	b.n	80090ea <_dtoa_r+0x11a>
 8009206:	2301      	movs	r3, #1
 8009208:	e7b6      	b.n	8009178 <_dtoa_r+0x1a8>
 800920a:	900e      	str	r0, [sp, #56]	; 0x38
 800920c:	e7b5      	b.n	800917a <_dtoa_r+0x1aa>
 800920e:	f1ca 0300 	rsb	r3, sl, #0
 8009212:	9306      	str	r3, [sp, #24]
 8009214:	2300      	movs	r3, #0
 8009216:	eba8 080a 	sub.w	r8, r8, sl
 800921a:	930d      	str	r3, [sp, #52]	; 0x34
 800921c:	e7c2      	b.n	80091a4 <_dtoa_r+0x1d4>
 800921e:	2300      	movs	r3, #0
 8009220:	9308      	str	r3, [sp, #32]
 8009222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009224:	2b00      	cmp	r3, #0
 8009226:	dc39      	bgt.n	800929c <_dtoa_r+0x2cc>
 8009228:	f04f 0901 	mov.w	r9, #1
 800922c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009230:	464b      	mov	r3, r9
 8009232:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009236:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009238:	2200      	movs	r2, #0
 800923a:	6042      	str	r2, [r0, #4]
 800923c:	2204      	movs	r2, #4
 800923e:	f102 0614 	add.w	r6, r2, #20
 8009242:	429e      	cmp	r6, r3
 8009244:	6841      	ldr	r1, [r0, #4]
 8009246:	d92f      	bls.n	80092a8 <_dtoa_r+0x2d8>
 8009248:	4620      	mov	r0, r4
 800924a:	f000 fcbd 	bl	8009bc8 <_Balloc>
 800924e:	9000      	str	r0, [sp, #0]
 8009250:	2800      	cmp	r0, #0
 8009252:	d14b      	bne.n	80092ec <_dtoa_r+0x31c>
 8009254:	4b24      	ldr	r3, [pc, #144]	; (80092e8 <_dtoa_r+0x318>)
 8009256:	4602      	mov	r2, r0
 8009258:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800925c:	e6d1      	b.n	8009002 <_dtoa_r+0x32>
 800925e:	2301      	movs	r3, #1
 8009260:	e7de      	b.n	8009220 <_dtoa_r+0x250>
 8009262:	2300      	movs	r3, #0
 8009264:	9308      	str	r3, [sp, #32]
 8009266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009268:	eb0a 0903 	add.w	r9, sl, r3
 800926c:	f109 0301 	add.w	r3, r9, #1
 8009270:	2b01      	cmp	r3, #1
 8009272:	9301      	str	r3, [sp, #4]
 8009274:	bfb8      	it	lt
 8009276:	2301      	movlt	r3, #1
 8009278:	e7dd      	b.n	8009236 <_dtoa_r+0x266>
 800927a:	2301      	movs	r3, #1
 800927c:	e7f2      	b.n	8009264 <_dtoa_r+0x294>
 800927e:	2501      	movs	r5, #1
 8009280:	2300      	movs	r3, #0
 8009282:	9305      	str	r3, [sp, #20]
 8009284:	9508      	str	r5, [sp, #32]
 8009286:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800928a:	2200      	movs	r2, #0
 800928c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009290:	2312      	movs	r3, #18
 8009292:	9209      	str	r2, [sp, #36]	; 0x24
 8009294:	e7cf      	b.n	8009236 <_dtoa_r+0x266>
 8009296:	2301      	movs	r3, #1
 8009298:	9308      	str	r3, [sp, #32]
 800929a:	e7f4      	b.n	8009286 <_dtoa_r+0x2b6>
 800929c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80092a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80092a4:	464b      	mov	r3, r9
 80092a6:	e7c6      	b.n	8009236 <_dtoa_r+0x266>
 80092a8:	3101      	adds	r1, #1
 80092aa:	6041      	str	r1, [r0, #4]
 80092ac:	0052      	lsls	r2, r2, #1
 80092ae:	e7c6      	b.n	800923e <_dtoa_r+0x26e>
 80092b0:	636f4361 	.word	0x636f4361
 80092b4:	3fd287a7 	.word	0x3fd287a7
 80092b8:	8b60c8b3 	.word	0x8b60c8b3
 80092bc:	3fc68a28 	.word	0x3fc68a28
 80092c0:	509f79fb 	.word	0x509f79fb
 80092c4:	3fd34413 	.word	0x3fd34413
 80092c8:	0800b819 	.word	0x0800b819
 80092cc:	0800b830 	.word	0x0800b830
 80092d0:	7ff00000 	.word	0x7ff00000
 80092d4:	0800b815 	.word	0x0800b815
 80092d8:	0800b80c 	.word	0x0800b80c
 80092dc:	0800b7e9 	.word	0x0800b7e9
 80092e0:	3ff80000 	.word	0x3ff80000
 80092e4:	0800b928 	.word	0x0800b928
 80092e8:	0800b88f 	.word	0x0800b88f
 80092ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092ee:	9a00      	ldr	r2, [sp, #0]
 80092f0:	601a      	str	r2, [r3, #0]
 80092f2:	9b01      	ldr	r3, [sp, #4]
 80092f4:	2b0e      	cmp	r3, #14
 80092f6:	f200 80ad 	bhi.w	8009454 <_dtoa_r+0x484>
 80092fa:	2d00      	cmp	r5, #0
 80092fc:	f000 80aa 	beq.w	8009454 <_dtoa_r+0x484>
 8009300:	f1ba 0f00 	cmp.w	sl, #0
 8009304:	dd36      	ble.n	8009374 <_dtoa_r+0x3a4>
 8009306:	4ac3      	ldr	r2, [pc, #780]	; (8009614 <_dtoa_r+0x644>)
 8009308:	f00a 030f 	and.w	r3, sl, #15
 800930c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009310:	ed93 7b00 	vldr	d7, [r3]
 8009314:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009318:	ea4f 172a 	mov.w	r7, sl, asr #4
 800931c:	eeb0 8a47 	vmov.f32	s16, s14
 8009320:	eef0 8a67 	vmov.f32	s17, s15
 8009324:	d016      	beq.n	8009354 <_dtoa_r+0x384>
 8009326:	4bbc      	ldr	r3, [pc, #752]	; (8009618 <_dtoa_r+0x648>)
 8009328:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800932c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009330:	f7f7 faac 	bl	800088c <__aeabi_ddiv>
 8009334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009338:	f007 070f 	and.w	r7, r7, #15
 800933c:	2503      	movs	r5, #3
 800933e:	4eb6      	ldr	r6, [pc, #728]	; (8009618 <_dtoa_r+0x648>)
 8009340:	b957      	cbnz	r7, 8009358 <_dtoa_r+0x388>
 8009342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009346:	ec53 2b18 	vmov	r2, r3, d8
 800934a:	f7f7 fa9f 	bl	800088c <__aeabi_ddiv>
 800934e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009352:	e029      	b.n	80093a8 <_dtoa_r+0x3d8>
 8009354:	2502      	movs	r5, #2
 8009356:	e7f2      	b.n	800933e <_dtoa_r+0x36e>
 8009358:	07f9      	lsls	r1, r7, #31
 800935a:	d508      	bpl.n	800936e <_dtoa_r+0x39e>
 800935c:	ec51 0b18 	vmov	r0, r1, d8
 8009360:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009364:	f7f7 f968 	bl	8000638 <__aeabi_dmul>
 8009368:	ec41 0b18 	vmov	d8, r0, r1
 800936c:	3501      	adds	r5, #1
 800936e:	107f      	asrs	r7, r7, #1
 8009370:	3608      	adds	r6, #8
 8009372:	e7e5      	b.n	8009340 <_dtoa_r+0x370>
 8009374:	f000 80a6 	beq.w	80094c4 <_dtoa_r+0x4f4>
 8009378:	f1ca 0600 	rsb	r6, sl, #0
 800937c:	4ba5      	ldr	r3, [pc, #660]	; (8009614 <_dtoa_r+0x644>)
 800937e:	4fa6      	ldr	r7, [pc, #664]	; (8009618 <_dtoa_r+0x648>)
 8009380:	f006 020f 	and.w	r2, r6, #15
 8009384:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009390:	f7f7 f952 	bl	8000638 <__aeabi_dmul>
 8009394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009398:	1136      	asrs	r6, r6, #4
 800939a:	2300      	movs	r3, #0
 800939c:	2502      	movs	r5, #2
 800939e:	2e00      	cmp	r6, #0
 80093a0:	f040 8085 	bne.w	80094ae <_dtoa_r+0x4de>
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1d2      	bne.n	800934e <_dtoa_r+0x37e>
 80093a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f000 808c 	beq.w	80094c8 <_dtoa_r+0x4f8>
 80093b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80093b4:	4b99      	ldr	r3, [pc, #612]	; (800961c <_dtoa_r+0x64c>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	4630      	mov	r0, r6
 80093ba:	4639      	mov	r1, r7
 80093bc:	f7f7 fbae 	bl	8000b1c <__aeabi_dcmplt>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	f000 8081 	beq.w	80094c8 <_dtoa_r+0x4f8>
 80093c6:	9b01      	ldr	r3, [sp, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d07d      	beq.n	80094c8 <_dtoa_r+0x4f8>
 80093cc:	f1b9 0f00 	cmp.w	r9, #0
 80093d0:	dd3c      	ble.n	800944c <_dtoa_r+0x47c>
 80093d2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80093d6:	9307      	str	r3, [sp, #28]
 80093d8:	2200      	movs	r2, #0
 80093da:	4b91      	ldr	r3, [pc, #580]	; (8009620 <_dtoa_r+0x650>)
 80093dc:	4630      	mov	r0, r6
 80093de:	4639      	mov	r1, r7
 80093e0:	f7f7 f92a 	bl	8000638 <__aeabi_dmul>
 80093e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093e8:	3501      	adds	r5, #1
 80093ea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80093ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80093f2:	4628      	mov	r0, r5
 80093f4:	f7f7 f8b6 	bl	8000564 <__aeabi_i2d>
 80093f8:	4632      	mov	r2, r6
 80093fa:	463b      	mov	r3, r7
 80093fc:	f7f7 f91c 	bl	8000638 <__aeabi_dmul>
 8009400:	4b88      	ldr	r3, [pc, #544]	; (8009624 <_dtoa_r+0x654>)
 8009402:	2200      	movs	r2, #0
 8009404:	f7f6 ff62 	bl	80002cc <__adddf3>
 8009408:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800940c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009410:	9303      	str	r3, [sp, #12]
 8009412:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009414:	2b00      	cmp	r3, #0
 8009416:	d15c      	bne.n	80094d2 <_dtoa_r+0x502>
 8009418:	4b83      	ldr	r3, [pc, #524]	; (8009628 <_dtoa_r+0x658>)
 800941a:	2200      	movs	r2, #0
 800941c:	4630      	mov	r0, r6
 800941e:	4639      	mov	r1, r7
 8009420:	f7f6 ff52 	bl	80002c8 <__aeabi_dsub>
 8009424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009428:	4606      	mov	r6, r0
 800942a:	460f      	mov	r7, r1
 800942c:	f7f7 fb94 	bl	8000b58 <__aeabi_dcmpgt>
 8009430:	2800      	cmp	r0, #0
 8009432:	f040 8296 	bne.w	8009962 <_dtoa_r+0x992>
 8009436:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800943a:	4630      	mov	r0, r6
 800943c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009440:	4639      	mov	r1, r7
 8009442:	f7f7 fb6b 	bl	8000b1c <__aeabi_dcmplt>
 8009446:	2800      	cmp	r0, #0
 8009448:	f040 8288 	bne.w	800995c <_dtoa_r+0x98c>
 800944c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009450:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009454:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009456:	2b00      	cmp	r3, #0
 8009458:	f2c0 8158 	blt.w	800970c <_dtoa_r+0x73c>
 800945c:	f1ba 0f0e 	cmp.w	sl, #14
 8009460:	f300 8154 	bgt.w	800970c <_dtoa_r+0x73c>
 8009464:	4b6b      	ldr	r3, [pc, #428]	; (8009614 <_dtoa_r+0x644>)
 8009466:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800946a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800946e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009470:	2b00      	cmp	r3, #0
 8009472:	f280 80e3 	bge.w	800963c <_dtoa_r+0x66c>
 8009476:	9b01      	ldr	r3, [sp, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	f300 80df 	bgt.w	800963c <_dtoa_r+0x66c>
 800947e:	f040 826d 	bne.w	800995c <_dtoa_r+0x98c>
 8009482:	4b69      	ldr	r3, [pc, #420]	; (8009628 <_dtoa_r+0x658>)
 8009484:	2200      	movs	r2, #0
 8009486:	4640      	mov	r0, r8
 8009488:	4649      	mov	r1, r9
 800948a:	f7f7 f8d5 	bl	8000638 <__aeabi_dmul>
 800948e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009492:	f7f7 fb57 	bl	8000b44 <__aeabi_dcmpge>
 8009496:	9e01      	ldr	r6, [sp, #4]
 8009498:	4637      	mov	r7, r6
 800949a:	2800      	cmp	r0, #0
 800949c:	f040 8243 	bne.w	8009926 <_dtoa_r+0x956>
 80094a0:	9d00      	ldr	r5, [sp, #0]
 80094a2:	2331      	movs	r3, #49	; 0x31
 80094a4:	f805 3b01 	strb.w	r3, [r5], #1
 80094a8:	f10a 0a01 	add.w	sl, sl, #1
 80094ac:	e23f      	b.n	800992e <_dtoa_r+0x95e>
 80094ae:	07f2      	lsls	r2, r6, #31
 80094b0:	d505      	bpl.n	80094be <_dtoa_r+0x4ee>
 80094b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094b6:	f7f7 f8bf 	bl	8000638 <__aeabi_dmul>
 80094ba:	3501      	adds	r5, #1
 80094bc:	2301      	movs	r3, #1
 80094be:	1076      	asrs	r6, r6, #1
 80094c0:	3708      	adds	r7, #8
 80094c2:	e76c      	b.n	800939e <_dtoa_r+0x3ce>
 80094c4:	2502      	movs	r5, #2
 80094c6:	e76f      	b.n	80093a8 <_dtoa_r+0x3d8>
 80094c8:	9b01      	ldr	r3, [sp, #4]
 80094ca:	f8cd a01c 	str.w	sl, [sp, #28]
 80094ce:	930c      	str	r3, [sp, #48]	; 0x30
 80094d0:	e78d      	b.n	80093ee <_dtoa_r+0x41e>
 80094d2:	9900      	ldr	r1, [sp, #0]
 80094d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80094d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094d8:	4b4e      	ldr	r3, [pc, #312]	; (8009614 <_dtoa_r+0x644>)
 80094da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094de:	4401      	add	r1, r0
 80094e0:	9102      	str	r1, [sp, #8]
 80094e2:	9908      	ldr	r1, [sp, #32]
 80094e4:	eeb0 8a47 	vmov.f32	s16, s14
 80094e8:	eef0 8a67 	vmov.f32	s17, s15
 80094ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80094f4:	2900      	cmp	r1, #0
 80094f6:	d045      	beq.n	8009584 <_dtoa_r+0x5b4>
 80094f8:	494c      	ldr	r1, [pc, #304]	; (800962c <_dtoa_r+0x65c>)
 80094fa:	2000      	movs	r0, #0
 80094fc:	f7f7 f9c6 	bl	800088c <__aeabi_ddiv>
 8009500:	ec53 2b18 	vmov	r2, r3, d8
 8009504:	f7f6 fee0 	bl	80002c8 <__aeabi_dsub>
 8009508:	9d00      	ldr	r5, [sp, #0]
 800950a:	ec41 0b18 	vmov	d8, r0, r1
 800950e:	4639      	mov	r1, r7
 8009510:	4630      	mov	r0, r6
 8009512:	f7f7 fb41 	bl	8000b98 <__aeabi_d2iz>
 8009516:	900c      	str	r0, [sp, #48]	; 0x30
 8009518:	f7f7 f824 	bl	8000564 <__aeabi_i2d>
 800951c:	4602      	mov	r2, r0
 800951e:	460b      	mov	r3, r1
 8009520:	4630      	mov	r0, r6
 8009522:	4639      	mov	r1, r7
 8009524:	f7f6 fed0 	bl	80002c8 <__aeabi_dsub>
 8009528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800952a:	3330      	adds	r3, #48	; 0x30
 800952c:	f805 3b01 	strb.w	r3, [r5], #1
 8009530:	ec53 2b18 	vmov	r2, r3, d8
 8009534:	4606      	mov	r6, r0
 8009536:	460f      	mov	r7, r1
 8009538:	f7f7 faf0 	bl	8000b1c <__aeabi_dcmplt>
 800953c:	2800      	cmp	r0, #0
 800953e:	d165      	bne.n	800960c <_dtoa_r+0x63c>
 8009540:	4632      	mov	r2, r6
 8009542:	463b      	mov	r3, r7
 8009544:	4935      	ldr	r1, [pc, #212]	; (800961c <_dtoa_r+0x64c>)
 8009546:	2000      	movs	r0, #0
 8009548:	f7f6 febe 	bl	80002c8 <__aeabi_dsub>
 800954c:	ec53 2b18 	vmov	r2, r3, d8
 8009550:	f7f7 fae4 	bl	8000b1c <__aeabi_dcmplt>
 8009554:	2800      	cmp	r0, #0
 8009556:	f040 80b9 	bne.w	80096cc <_dtoa_r+0x6fc>
 800955a:	9b02      	ldr	r3, [sp, #8]
 800955c:	429d      	cmp	r5, r3
 800955e:	f43f af75 	beq.w	800944c <_dtoa_r+0x47c>
 8009562:	4b2f      	ldr	r3, [pc, #188]	; (8009620 <_dtoa_r+0x650>)
 8009564:	ec51 0b18 	vmov	r0, r1, d8
 8009568:	2200      	movs	r2, #0
 800956a:	f7f7 f865 	bl	8000638 <__aeabi_dmul>
 800956e:	4b2c      	ldr	r3, [pc, #176]	; (8009620 <_dtoa_r+0x650>)
 8009570:	ec41 0b18 	vmov	d8, r0, r1
 8009574:	2200      	movs	r2, #0
 8009576:	4630      	mov	r0, r6
 8009578:	4639      	mov	r1, r7
 800957a:	f7f7 f85d 	bl	8000638 <__aeabi_dmul>
 800957e:	4606      	mov	r6, r0
 8009580:	460f      	mov	r7, r1
 8009582:	e7c4      	b.n	800950e <_dtoa_r+0x53e>
 8009584:	ec51 0b17 	vmov	r0, r1, d7
 8009588:	f7f7 f856 	bl	8000638 <__aeabi_dmul>
 800958c:	9b02      	ldr	r3, [sp, #8]
 800958e:	9d00      	ldr	r5, [sp, #0]
 8009590:	930c      	str	r3, [sp, #48]	; 0x30
 8009592:	ec41 0b18 	vmov	d8, r0, r1
 8009596:	4639      	mov	r1, r7
 8009598:	4630      	mov	r0, r6
 800959a:	f7f7 fafd 	bl	8000b98 <__aeabi_d2iz>
 800959e:	9011      	str	r0, [sp, #68]	; 0x44
 80095a0:	f7f6 ffe0 	bl	8000564 <__aeabi_i2d>
 80095a4:	4602      	mov	r2, r0
 80095a6:	460b      	mov	r3, r1
 80095a8:	4630      	mov	r0, r6
 80095aa:	4639      	mov	r1, r7
 80095ac:	f7f6 fe8c 	bl	80002c8 <__aeabi_dsub>
 80095b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095b2:	3330      	adds	r3, #48	; 0x30
 80095b4:	f805 3b01 	strb.w	r3, [r5], #1
 80095b8:	9b02      	ldr	r3, [sp, #8]
 80095ba:	429d      	cmp	r5, r3
 80095bc:	4606      	mov	r6, r0
 80095be:	460f      	mov	r7, r1
 80095c0:	f04f 0200 	mov.w	r2, #0
 80095c4:	d134      	bne.n	8009630 <_dtoa_r+0x660>
 80095c6:	4b19      	ldr	r3, [pc, #100]	; (800962c <_dtoa_r+0x65c>)
 80095c8:	ec51 0b18 	vmov	r0, r1, d8
 80095cc:	f7f6 fe7e 	bl	80002cc <__adddf3>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	4630      	mov	r0, r6
 80095d6:	4639      	mov	r1, r7
 80095d8:	f7f7 fabe 	bl	8000b58 <__aeabi_dcmpgt>
 80095dc:	2800      	cmp	r0, #0
 80095de:	d175      	bne.n	80096cc <_dtoa_r+0x6fc>
 80095e0:	ec53 2b18 	vmov	r2, r3, d8
 80095e4:	4911      	ldr	r1, [pc, #68]	; (800962c <_dtoa_r+0x65c>)
 80095e6:	2000      	movs	r0, #0
 80095e8:	f7f6 fe6e 	bl	80002c8 <__aeabi_dsub>
 80095ec:	4602      	mov	r2, r0
 80095ee:	460b      	mov	r3, r1
 80095f0:	4630      	mov	r0, r6
 80095f2:	4639      	mov	r1, r7
 80095f4:	f7f7 fa92 	bl	8000b1c <__aeabi_dcmplt>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	f43f af27 	beq.w	800944c <_dtoa_r+0x47c>
 80095fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009600:	1e6b      	subs	r3, r5, #1
 8009602:	930c      	str	r3, [sp, #48]	; 0x30
 8009604:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009608:	2b30      	cmp	r3, #48	; 0x30
 800960a:	d0f8      	beq.n	80095fe <_dtoa_r+0x62e>
 800960c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009610:	e04a      	b.n	80096a8 <_dtoa_r+0x6d8>
 8009612:	bf00      	nop
 8009614:	0800b928 	.word	0x0800b928
 8009618:	0800b900 	.word	0x0800b900
 800961c:	3ff00000 	.word	0x3ff00000
 8009620:	40240000 	.word	0x40240000
 8009624:	401c0000 	.word	0x401c0000
 8009628:	40140000 	.word	0x40140000
 800962c:	3fe00000 	.word	0x3fe00000
 8009630:	4baf      	ldr	r3, [pc, #700]	; (80098f0 <_dtoa_r+0x920>)
 8009632:	f7f7 f801 	bl	8000638 <__aeabi_dmul>
 8009636:	4606      	mov	r6, r0
 8009638:	460f      	mov	r7, r1
 800963a:	e7ac      	b.n	8009596 <_dtoa_r+0x5c6>
 800963c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009640:	9d00      	ldr	r5, [sp, #0]
 8009642:	4642      	mov	r2, r8
 8009644:	464b      	mov	r3, r9
 8009646:	4630      	mov	r0, r6
 8009648:	4639      	mov	r1, r7
 800964a:	f7f7 f91f 	bl	800088c <__aeabi_ddiv>
 800964e:	f7f7 faa3 	bl	8000b98 <__aeabi_d2iz>
 8009652:	9002      	str	r0, [sp, #8]
 8009654:	f7f6 ff86 	bl	8000564 <__aeabi_i2d>
 8009658:	4642      	mov	r2, r8
 800965a:	464b      	mov	r3, r9
 800965c:	f7f6 ffec 	bl	8000638 <__aeabi_dmul>
 8009660:	4602      	mov	r2, r0
 8009662:	460b      	mov	r3, r1
 8009664:	4630      	mov	r0, r6
 8009666:	4639      	mov	r1, r7
 8009668:	f7f6 fe2e 	bl	80002c8 <__aeabi_dsub>
 800966c:	9e02      	ldr	r6, [sp, #8]
 800966e:	9f01      	ldr	r7, [sp, #4]
 8009670:	3630      	adds	r6, #48	; 0x30
 8009672:	f805 6b01 	strb.w	r6, [r5], #1
 8009676:	9e00      	ldr	r6, [sp, #0]
 8009678:	1bae      	subs	r6, r5, r6
 800967a:	42b7      	cmp	r7, r6
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	d137      	bne.n	80096f2 <_dtoa_r+0x722>
 8009682:	f7f6 fe23 	bl	80002cc <__adddf3>
 8009686:	4642      	mov	r2, r8
 8009688:	464b      	mov	r3, r9
 800968a:	4606      	mov	r6, r0
 800968c:	460f      	mov	r7, r1
 800968e:	f7f7 fa63 	bl	8000b58 <__aeabi_dcmpgt>
 8009692:	b9c8      	cbnz	r0, 80096c8 <_dtoa_r+0x6f8>
 8009694:	4642      	mov	r2, r8
 8009696:	464b      	mov	r3, r9
 8009698:	4630      	mov	r0, r6
 800969a:	4639      	mov	r1, r7
 800969c:	f7f7 fa34 	bl	8000b08 <__aeabi_dcmpeq>
 80096a0:	b110      	cbz	r0, 80096a8 <_dtoa_r+0x6d8>
 80096a2:	9b02      	ldr	r3, [sp, #8]
 80096a4:	07d9      	lsls	r1, r3, #31
 80096a6:	d40f      	bmi.n	80096c8 <_dtoa_r+0x6f8>
 80096a8:	4620      	mov	r0, r4
 80096aa:	4659      	mov	r1, fp
 80096ac:	f000 facc 	bl	8009c48 <_Bfree>
 80096b0:	2300      	movs	r3, #0
 80096b2:	702b      	strb	r3, [r5, #0]
 80096b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096b6:	f10a 0001 	add.w	r0, sl, #1
 80096ba:	6018      	str	r0, [r3, #0]
 80096bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f43f acd8 	beq.w	8009074 <_dtoa_r+0xa4>
 80096c4:	601d      	str	r5, [r3, #0]
 80096c6:	e4d5      	b.n	8009074 <_dtoa_r+0xa4>
 80096c8:	f8cd a01c 	str.w	sl, [sp, #28]
 80096cc:	462b      	mov	r3, r5
 80096ce:	461d      	mov	r5, r3
 80096d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096d4:	2a39      	cmp	r2, #57	; 0x39
 80096d6:	d108      	bne.n	80096ea <_dtoa_r+0x71a>
 80096d8:	9a00      	ldr	r2, [sp, #0]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d1f7      	bne.n	80096ce <_dtoa_r+0x6fe>
 80096de:	9a07      	ldr	r2, [sp, #28]
 80096e0:	9900      	ldr	r1, [sp, #0]
 80096e2:	3201      	adds	r2, #1
 80096e4:	9207      	str	r2, [sp, #28]
 80096e6:	2230      	movs	r2, #48	; 0x30
 80096e8:	700a      	strb	r2, [r1, #0]
 80096ea:	781a      	ldrb	r2, [r3, #0]
 80096ec:	3201      	adds	r2, #1
 80096ee:	701a      	strb	r2, [r3, #0]
 80096f0:	e78c      	b.n	800960c <_dtoa_r+0x63c>
 80096f2:	4b7f      	ldr	r3, [pc, #508]	; (80098f0 <_dtoa_r+0x920>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	f7f6 ff9f 	bl	8000638 <__aeabi_dmul>
 80096fa:	2200      	movs	r2, #0
 80096fc:	2300      	movs	r3, #0
 80096fe:	4606      	mov	r6, r0
 8009700:	460f      	mov	r7, r1
 8009702:	f7f7 fa01 	bl	8000b08 <__aeabi_dcmpeq>
 8009706:	2800      	cmp	r0, #0
 8009708:	d09b      	beq.n	8009642 <_dtoa_r+0x672>
 800970a:	e7cd      	b.n	80096a8 <_dtoa_r+0x6d8>
 800970c:	9a08      	ldr	r2, [sp, #32]
 800970e:	2a00      	cmp	r2, #0
 8009710:	f000 80c4 	beq.w	800989c <_dtoa_r+0x8cc>
 8009714:	9a05      	ldr	r2, [sp, #20]
 8009716:	2a01      	cmp	r2, #1
 8009718:	f300 80a8 	bgt.w	800986c <_dtoa_r+0x89c>
 800971c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800971e:	2a00      	cmp	r2, #0
 8009720:	f000 80a0 	beq.w	8009864 <_dtoa_r+0x894>
 8009724:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009728:	9e06      	ldr	r6, [sp, #24]
 800972a:	4645      	mov	r5, r8
 800972c:	9a04      	ldr	r2, [sp, #16]
 800972e:	2101      	movs	r1, #1
 8009730:	441a      	add	r2, r3
 8009732:	4620      	mov	r0, r4
 8009734:	4498      	add	r8, r3
 8009736:	9204      	str	r2, [sp, #16]
 8009738:	f000 fb42 	bl	8009dc0 <__i2b>
 800973c:	4607      	mov	r7, r0
 800973e:	2d00      	cmp	r5, #0
 8009740:	dd0b      	ble.n	800975a <_dtoa_r+0x78a>
 8009742:	9b04      	ldr	r3, [sp, #16]
 8009744:	2b00      	cmp	r3, #0
 8009746:	dd08      	ble.n	800975a <_dtoa_r+0x78a>
 8009748:	42ab      	cmp	r3, r5
 800974a:	9a04      	ldr	r2, [sp, #16]
 800974c:	bfa8      	it	ge
 800974e:	462b      	movge	r3, r5
 8009750:	eba8 0803 	sub.w	r8, r8, r3
 8009754:	1aed      	subs	r5, r5, r3
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	9304      	str	r3, [sp, #16]
 800975a:	9b06      	ldr	r3, [sp, #24]
 800975c:	b1fb      	cbz	r3, 800979e <_dtoa_r+0x7ce>
 800975e:	9b08      	ldr	r3, [sp, #32]
 8009760:	2b00      	cmp	r3, #0
 8009762:	f000 809f 	beq.w	80098a4 <_dtoa_r+0x8d4>
 8009766:	2e00      	cmp	r6, #0
 8009768:	dd11      	ble.n	800978e <_dtoa_r+0x7be>
 800976a:	4639      	mov	r1, r7
 800976c:	4632      	mov	r2, r6
 800976e:	4620      	mov	r0, r4
 8009770:	f000 fbe2 	bl	8009f38 <__pow5mult>
 8009774:	465a      	mov	r2, fp
 8009776:	4601      	mov	r1, r0
 8009778:	4607      	mov	r7, r0
 800977a:	4620      	mov	r0, r4
 800977c:	f000 fb36 	bl	8009dec <__multiply>
 8009780:	4659      	mov	r1, fp
 8009782:	9007      	str	r0, [sp, #28]
 8009784:	4620      	mov	r0, r4
 8009786:	f000 fa5f 	bl	8009c48 <_Bfree>
 800978a:	9b07      	ldr	r3, [sp, #28]
 800978c:	469b      	mov	fp, r3
 800978e:	9b06      	ldr	r3, [sp, #24]
 8009790:	1b9a      	subs	r2, r3, r6
 8009792:	d004      	beq.n	800979e <_dtoa_r+0x7ce>
 8009794:	4659      	mov	r1, fp
 8009796:	4620      	mov	r0, r4
 8009798:	f000 fbce 	bl	8009f38 <__pow5mult>
 800979c:	4683      	mov	fp, r0
 800979e:	2101      	movs	r1, #1
 80097a0:	4620      	mov	r0, r4
 80097a2:	f000 fb0d 	bl	8009dc0 <__i2b>
 80097a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	4606      	mov	r6, r0
 80097ac:	dd7c      	ble.n	80098a8 <_dtoa_r+0x8d8>
 80097ae:	461a      	mov	r2, r3
 80097b0:	4601      	mov	r1, r0
 80097b2:	4620      	mov	r0, r4
 80097b4:	f000 fbc0 	bl	8009f38 <__pow5mult>
 80097b8:	9b05      	ldr	r3, [sp, #20]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	4606      	mov	r6, r0
 80097be:	dd76      	ble.n	80098ae <_dtoa_r+0x8de>
 80097c0:	2300      	movs	r3, #0
 80097c2:	9306      	str	r3, [sp, #24]
 80097c4:	6933      	ldr	r3, [r6, #16]
 80097c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80097ca:	6918      	ldr	r0, [r3, #16]
 80097cc:	f000 faa8 	bl	8009d20 <__hi0bits>
 80097d0:	f1c0 0020 	rsb	r0, r0, #32
 80097d4:	9b04      	ldr	r3, [sp, #16]
 80097d6:	4418      	add	r0, r3
 80097d8:	f010 001f 	ands.w	r0, r0, #31
 80097dc:	f000 8086 	beq.w	80098ec <_dtoa_r+0x91c>
 80097e0:	f1c0 0320 	rsb	r3, r0, #32
 80097e4:	2b04      	cmp	r3, #4
 80097e6:	dd7f      	ble.n	80098e8 <_dtoa_r+0x918>
 80097e8:	f1c0 001c 	rsb	r0, r0, #28
 80097ec:	9b04      	ldr	r3, [sp, #16]
 80097ee:	4403      	add	r3, r0
 80097f0:	4480      	add	r8, r0
 80097f2:	4405      	add	r5, r0
 80097f4:	9304      	str	r3, [sp, #16]
 80097f6:	f1b8 0f00 	cmp.w	r8, #0
 80097fa:	dd05      	ble.n	8009808 <_dtoa_r+0x838>
 80097fc:	4659      	mov	r1, fp
 80097fe:	4642      	mov	r2, r8
 8009800:	4620      	mov	r0, r4
 8009802:	f000 fbf3 	bl	8009fec <__lshift>
 8009806:	4683      	mov	fp, r0
 8009808:	9b04      	ldr	r3, [sp, #16]
 800980a:	2b00      	cmp	r3, #0
 800980c:	dd05      	ble.n	800981a <_dtoa_r+0x84a>
 800980e:	4631      	mov	r1, r6
 8009810:	461a      	mov	r2, r3
 8009812:	4620      	mov	r0, r4
 8009814:	f000 fbea 	bl	8009fec <__lshift>
 8009818:	4606      	mov	r6, r0
 800981a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800981c:	2b00      	cmp	r3, #0
 800981e:	d069      	beq.n	80098f4 <_dtoa_r+0x924>
 8009820:	4631      	mov	r1, r6
 8009822:	4658      	mov	r0, fp
 8009824:	f000 fc4e 	bl	800a0c4 <__mcmp>
 8009828:	2800      	cmp	r0, #0
 800982a:	da63      	bge.n	80098f4 <_dtoa_r+0x924>
 800982c:	2300      	movs	r3, #0
 800982e:	4659      	mov	r1, fp
 8009830:	220a      	movs	r2, #10
 8009832:	4620      	mov	r0, r4
 8009834:	f000 fa2a 	bl	8009c8c <__multadd>
 8009838:	9b08      	ldr	r3, [sp, #32]
 800983a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800983e:	4683      	mov	fp, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	f000 818f 	beq.w	8009b64 <_dtoa_r+0xb94>
 8009846:	4639      	mov	r1, r7
 8009848:	2300      	movs	r3, #0
 800984a:	220a      	movs	r2, #10
 800984c:	4620      	mov	r0, r4
 800984e:	f000 fa1d 	bl	8009c8c <__multadd>
 8009852:	f1b9 0f00 	cmp.w	r9, #0
 8009856:	4607      	mov	r7, r0
 8009858:	f300 808e 	bgt.w	8009978 <_dtoa_r+0x9a8>
 800985c:	9b05      	ldr	r3, [sp, #20]
 800985e:	2b02      	cmp	r3, #2
 8009860:	dc50      	bgt.n	8009904 <_dtoa_r+0x934>
 8009862:	e089      	b.n	8009978 <_dtoa_r+0x9a8>
 8009864:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009866:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800986a:	e75d      	b.n	8009728 <_dtoa_r+0x758>
 800986c:	9b01      	ldr	r3, [sp, #4]
 800986e:	1e5e      	subs	r6, r3, #1
 8009870:	9b06      	ldr	r3, [sp, #24]
 8009872:	42b3      	cmp	r3, r6
 8009874:	bfbf      	itttt	lt
 8009876:	9b06      	ldrlt	r3, [sp, #24]
 8009878:	9606      	strlt	r6, [sp, #24]
 800987a:	1af2      	sublt	r2, r6, r3
 800987c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800987e:	bfb6      	itet	lt
 8009880:	189b      	addlt	r3, r3, r2
 8009882:	1b9e      	subge	r6, r3, r6
 8009884:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009886:	9b01      	ldr	r3, [sp, #4]
 8009888:	bfb8      	it	lt
 800988a:	2600      	movlt	r6, #0
 800988c:	2b00      	cmp	r3, #0
 800988e:	bfb5      	itete	lt
 8009890:	eba8 0503 	sublt.w	r5, r8, r3
 8009894:	9b01      	ldrge	r3, [sp, #4]
 8009896:	2300      	movlt	r3, #0
 8009898:	4645      	movge	r5, r8
 800989a:	e747      	b.n	800972c <_dtoa_r+0x75c>
 800989c:	9e06      	ldr	r6, [sp, #24]
 800989e:	9f08      	ldr	r7, [sp, #32]
 80098a0:	4645      	mov	r5, r8
 80098a2:	e74c      	b.n	800973e <_dtoa_r+0x76e>
 80098a4:	9a06      	ldr	r2, [sp, #24]
 80098a6:	e775      	b.n	8009794 <_dtoa_r+0x7c4>
 80098a8:	9b05      	ldr	r3, [sp, #20]
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	dc18      	bgt.n	80098e0 <_dtoa_r+0x910>
 80098ae:	9b02      	ldr	r3, [sp, #8]
 80098b0:	b9b3      	cbnz	r3, 80098e0 <_dtoa_r+0x910>
 80098b2:	9b03      	ldr	r3, [sp, #12]
 80098b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098b8:	b9a3      	cbnz	r3, 80098e4 <_dtoa_r+0x914>
 80098ba:	9b03      	ldr	r3, [sp, #12]
 80098bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098c0:	0d1b      	lsrs	r3, r3, #20
 80098c2:	051b      	lsls	r3, r3, #20
 80098c4:	b12b      	cbz	r3, 80098d2 <_dtoa_r+0x902>
 80098c6:	9b04      	ldr	r3, [sp, #16]
 80098c8:	3301      	adds	r3, #1
 80098ca:	9304      	str	r3, [sp, #16]
 80098cc:	f108 0801 	add.w	r8, r8, #1
 80098d0:	2301      	movs	r3, #1
 80098d2:	9306      	str	r3, [sp, #24]
 80098d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f47f af74 	bne.w	80097c4 <_dtoa_r+0x7f4>
 80098dc:	2001      	movs	r0, #1
 80098de:	e779      	b.n	80097d4 <_dtoa_r+0x804>
 80098e0:	2300      	movs	r3, #0
 80098e2:	e7f6      	b.n	80098d2 <_dtoa_r+0x902>
 80098e4:	9b02      	ldr	r3, [sp, #8]
 80098e6:	e7f4      	b.n	80098d2 <_dtoa_r+0x902>
 80098e8:	d085      	beq.n	80097f6 <_dtoa_r+0x826>
 80098ea:	4618      	mov	r0, r3
 80098ec:	301c      	adds	r0, #28
 80098ee:	e77d      	b.n	80097ec <_dtoa_r+0x81c>
 80098f0:	40240000 	.word	0x40240000
 80098f4:	9b01      	ldr	r3, [sp, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	dc38      	bgt.n	800996c <_dtoa_r+0x99c>
 80098fa:	9b05      	ldr	r3, [sp, #20]
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	dd35      	ble.n	800996c <_dtoa_r+0x99c>
 8009900:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009904:	f1b9 0f00 	cmp.w	r9, #0
 8009908:	d10d      	bne.n	8009926 <_dtoa_r+0x956>
 800990a:	4631      	mov	r1, r6
 800990c:	464b      	mov	r3, r9
 800990e:	2205      	movs	r2, #5
 8009910:	4620      	mov	r0, r4
 8009912:	f000 f9bb 	bl	8009c8c <__multadd>
 8009916:	4601      	mov	r1, r0
 8009918:	4606      	mov	r6, r0
 800991a:	4658      	mov	r0, fp
 800991c:	f000 fbd2 	bl	800a0c4 <__mcmp>
 8009920:	2800      	cmp	r0, #0
 8009922:	f73f adbd 	bgt.w	80094a0 <_dtoa_r+0x4d0>
 8009926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009928:	9d00      	ldr	r5, [sp, #0]
 800992a:	ea6f 0a03 	mvn.w	sl, r3
 800992e:	f04f 0800 	mov.w	r8, #0
 8009932:	4631      	mov	r1, r6
 8009934:	4620      	mov	r0, r4
 8009936:	f000 f987 	bl	8009c48 <_Bfree>
 800993a:	2f00      	cmp	r7, #0
 800993c:	f43f aeb4 	beq.w	80096a8 <_dtoa_r+0x6d8>
 8009940:	f1b8 0f00 	cmp.w	r8, #0
 8009944:	d005      	beq.n	8009952 <_dtoa_r+0x982>
 8009946:	45b8      	cmp	r8, r7
 8009948:	d003      	beq.n	8009952 <_dtoa_r+0x982>
 800994a:	4641      	mov	r1, r8
 800994c:	4620      	mov	r0, r4
 800994e:	f000 f97b 	bl	8009c48 <_Bfree>
 8009952:	4639      	mov	r1, r7
 8009954:	4620      	mov	r0, r4
 8009956:	f000 f977 	bl	8009c48 <_Bfree>
 800995a:	e6a5      	b.n	80096a8 <_dtoa_r+0x6d8>
 800995c:	2600      	movs	r6, #0
 800995e:	4637      	mov	r7, r6
 8009960:	e7e1      	b.n	8009926 <_dtoa_r+0x956>
 8009962:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009964:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009968:	4637      	mov	r7, r6
 800996a:	e599      	b.n	80094a0 <_dtoa_r+0x4d0>
 800996c:	9b08      	ldr	r3, [sp, #32]
 800996e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	f000 80fd 	beq.w	8009b72 <_dtoa_r+0xba2>
 8009978:	2d00      	cmp	r5, #0
 800997a:	dd05      	ble.n	8009988 <_dtoa_r+0x9b8>
 800997c:	4639      	mov	r1, r7
 800997e:	462a      	mov	r2, r5
 8009980:	4620      	mov	r0, r4
 8009982:	f000 fb33 	bl	8009fec <__lshift>
 8009986:	4607      	mov	r7, r0
 8009988:	9b06      	ldr	r3, [sp, #24]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d05c      	beq.n	8009a48 <_dtoa_r+0xa78>
 800998e:	6879      	ldr	r1, [r7, #4]
 8009990:	4620      	mov	r0, r4
 8009992:	f000 f919 	bl	8009bc8 <_Balloc>
 8009996:	4605      	mov	r5, r0
 8009998:	b928      	cbnz	r0, 80099a6 <_dtoa_r+0x9d6>
 800999a:	4b80      	ldr	r3, [pc, #512]	; (8009b9c <_dtoa_r+0xbcc>)
 800999c:	4602      	mov	r2, r0
 800999e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80099a2:	f7ff bb2e 	b.w	8009002 <_dtoa_r+0x32>
 80099a6:	693a      	ldr	r2, [r7, #16]
 80099a8:	3202      	adds	r2, #2
 80099aa:	0092      	lsls	r2, r2, #2
 80099ac:	f107 010c 	add.w	r1, r7, #12
 80099b0:	300c      	adds	r0, #12
 80099b2:	f7fe fd25 	bl	8008400 <memcpy>
 80099b6:	2201      	movs	r2, #1
 80099b8:	4629      	mov	r1, r5
 80099ba:	4620      	mov	r0, r4
 80099bc:	f000 fb16 	bl	8009fec <__lshift>
 80099c0:	9b00      	ldr	r3, [sp, #0]
 80099c2:	3301      	adds	r3, #1
 80099c4:	9301      	str	r3, [sp, #4]
 80099c6:	9b00      	ldr	r3, [sp, #0]
 80099c8:	444b      	add	r3, r9
 80099ca:	9307      	str	r3, [sp, #28]
 80099cc:	9b02      	ldr	r3, [sp, #8]
 80099ce:	f003 0301 	and.w	r3, r3, #1
 80099d2:	46b8      	mov	r8, r7
 80099d4:	9306      	str	r3, [sp, #24]
 80099d6:	4607      	mov	r7, r0
 80099d8:	9b01      	ldr	r3, [sp, #4]
 80099da:	4631      	mov	r1, r6
 80099dc:	3b01      	subs	r3, #1
 80099de:	4658      	mov	r0, fp
 80099e0:	9302      	str	r3, [sp, #8]
 80099e2:	f7ff fa67 	bl	8008eb4 <quorem>
 80099e6:	4603      	mov	r3, r0
 80099e8:	3330      	adds	r3, #48	; 0x30
 80099ea:	9004      	str	r0, [sp, #16]
 80099ec:	4641      	mov	r1, r8
 80099ee:	4658      	mov	r0, fp
 80099f0:	9308      	str	r3, [sp, #32]
 80099f2:	f000 fb67 	bl	800a0c4 <__mcmp>
 80099f6:	463a      	mov	r2, r7
 80099f8:	4681      	mov	r9, r0
 80099fa:	4631      	mov	r1, r6
 80099fc:	4620      	mov	r0, r4
 80099fe:	f000 fb7d 	bl	800a0fc <__mdiff>
 8009a02:	68c2      	ldr	r2, [r0, #12]
 8009a04:	9b08      	ldr	r3, [sp, #32]
 8009a06:	4605      	mov	r5, r0
 8009a08:	bb02      	cbnz	r2, 8009a4c <_dtoa_r+0xa7c>
 8009a0a:	4601      	mov	r1, r0
 8009a0c:	4658      	mov	r0, fp
 8009a0e:	f000 fb59 	bl	800a0c4 <__mcmp>
 8009a12:	9b08      	ldr	r3, [sp, #32]
 8009a14:	4602      	mov	r2, r0
 8009a16:	4629      	mov	r1, r5
 8009a18:	4620      	mov	r0, r4
 8009a1a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009a1e:	f000 f913 	bl	8009c48 <_Bfree>
 8009a22:	9b05      	ldr	r3, [sp, #20]
 8009a24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a26:	9d01      	ldr	r5, [sp, #4]
 8009a28:	ea43 0102 	orr.w	r1, r3, r2
 8009a2c:	9b06      	ldr	r3, [sp, #24]
 8009a2e:	430b      	orrs	r3, r1
 8009a30:	9b08      	ldr	r3, [sp, #32]
 8009a32:	d10d      	bne.n	8009a50 <_dtoa_r+0xa80>
 8009a34:	2b39      	cmp	r3, #57	; 0x39
 8009a36:	d029      	beq.n	8009a8c <_dtoa_r+0xabc>
 8009a38:	f1b9 0f00 	cmp.w	r9, #0
 8009a3c:	dd01      	ble.n	8009a42 <_dtoa_r+0xa72>
 8009a3e:	9b04      	ldr	r3, [sp, #16]
 8009a40:	3331      	adds	r3, #49	; 0x31
 8009a42:	9a02      	ldr	r2, [sp, #8]
 8009a44:	7013      	strb	r3, [r2, #0]
 8009a46:	e774      	b.n	8009932 <_dtoa_r+0x962>
 8009a48:	4638      	mov	r0, r7
 8009a4a:	e7b9      	b.n	80099c0 <_dtoa_r+0x9f0>
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	e7e2      	b.n	8009a16 <_dtoa_r+0xa46>
 8009a50:	f1b9 0f00 	cmp.w	r9, #0
 8009a54:	db06      	blt.n	8009a64 <_dtoa_r+0xa94>
 8009a56:	9905      	ldr	r1, [sp, #20]
 8009a58:	ea41 0909 	orr.w	r9, r1, r9
 8009a5c:	9906      	ldr	r1, [sp, #24]
 8009a5e:	ea59 0101 	orrs.w	r1, r9, r1
 8009a62:	d120      	bne.n	8009aa6 <_dtoa_r+0xad6>
 8009a64:	2a00      	cmp	r2, #0
 8009a66:	ddec      	ble.n	8009a42 <_dtoa_r+0xa72>
 8009a68:	4659      	mov	r1, fp
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	9301      	str	r3, [sp, #4]
 8009a70:	f000 fabc 	bl	8009fec <__lshift>
 8009a74:	4631      	mov	r1, r6
 8009a76:	4683      	mov	fp, r0
 8009a78:	f000 fb24 	bl	800a0c4 <__mcmp>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	9b01      	ldr	r3, [sp, #4]
 8009a80:	dc02      	bgt.n	8009a88 <_dtoa_r+0xab8>
 8009a82:	d1de      	bne.n	8009a42 <_dtoa_r+0xa72>
 8009a84:	07da      	lsls	r2, r3, #31
 8009a86:	d5dc      	bpl.n	8009a42 <_dtoa_r+0xa72>
 8009a88:	2b39      	cmp	r3, #57	; 0x39
 8009a8a:	d1d8      	bne.n	8009a3e <_dtoa_r+0xa6e>
 8009a8c:	9a02      	ldr	r2, [sp, #8]
 8009a8e:	2339      	movs	r3, #57	; 0x39
 8009a90:	7013      	strb	r3, [r2, #0]
 8009a92:	462b      	mov	r3, r5
 8009a94:	461d      	mov	r5, r3
 8009a96:	3b01      	subs	r3, #1
 8009a98:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a9c:	2a39      	cmp	r2, #57	; 0x39
 8009a9e:	d050      	beq.n	8009b42 <_dtoa_r+0xb72>
 8009aa0:	3201      	adds	r2, #1
 8009aa2:	701a      	strb	r2, [r3, #0]
 8009aa4:	e745      	b.n	8009932 <_dtoa_r+0x962>
 8009aa6:	2a00      	cmp	r2, #0
 8009aa8:	dd03      	ble.n	8009ab2 <_dtoa_r+0xae2>
 8009aaa:	2b39      	cmp	r3, #57	; 0x39
 8009aac:	d0ee      	beq.n	8009a8c <_dtoa_r+0xabc>
 8009aae:	3301      	adds	r3, #1
 8009ab0:	e7c7      	b.n	8009a42 <_dtoa_r+0xa72>
 8009ab2:	9a01      	ldr	r2, [sp, #4]
 8009ab4:	9907      	ldr	r1, [sp, #28]
 8009ab6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009aba:	428a      	cmp	r2, r1
 8009abc:	d02a      	beq.n	8009b14 <_dtoa_r+0xb44>
 8009abe:	4659      	mov	r1, fp
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	220a      	movs	r2, #10
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f000 f8e1 	bl	8009c8c <__multadd>
 8009aca:	45b8      	cmp	r8, r7
 8009acc:	4683      	mov	fp, r0
 8009ace:	f04f 0300 	mov.w	r3, #0
 8009ad2:	f04f 020a 	mov.w	r2, #10
 8009ad6:	4641      	mov	r1, r8
 8009ad8:	4620      	mov	r0, r4
 8009ada:	d107      	bne.n	8009aec <_dtoa_r+0xb1c>
 8009adc:	f000 f8d6 	bl	8009c8c <__multadd>
 8009ae0:	4680      	mov	r8, r0
 8009ae2:	4607      	mov	r7, r0
 8009ae4:	9b01      	ldr	r3, [sp, #4]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	9301      	str	r3, [sp, #4]
 8009aea:	e775      	b.n	80099d8 <_dtoa_r+0xa08>
 8009aec:	f000 f8ce 	bl	8009c8c <__multadd>
 8009af0:	4639      	mov	r1, r7
 8009af2:	4680      	mov	r8, r0
 8009af4:	2300      	movs	r3, #0
 8009af6:	220a      	movs	r2, #10
 8009af8:	4620      	mov	r0, r4
 8009afa:	f000 f8c7 	bl	8009c8c <__multadd>
 8009afe:	4607      	mov	r7, r0
 8009b00:	e7f0      	b.n	8009ae4 <_dtoa_r+0xb14>
 8009b02:	f1b9 0f00 	cmp.w	r9, #0
 8009b06:	9a00      	ldr	r2, [sp, #0]
 8009b08:	bfcc      	ite	gt
 8009b0a:	464d      	movgt	r5, r9
 8009b0c:	2501      	movle	r5, #1
 8009b0e:	4415      	add	r5, r2
 8009b10:	f04f 0800 	mov.w	r8, #0
 8009b14:	4659      	mov	r1, fp
 8009b16:	2201      	movs	r2, #1
 8009b18:	4620      	mov	r0, r4
 8009b1a:	9301      	str	r3, [sp, #4]
 8009b1c:	f000 fa66 	bl	8009fec <__lshift>
 8009b20:	4631      	mov	r1, r6
 8009b22:	4683      	mov	fp, r0
 8009b24:	f000 face 	bl	800a0c4 <__mcmp>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	dcb2      	bgt.n	8009a92 <_dtoa_r+0xac2>
 8009b2c:	d102      	bne.n	8009b34 <_dtoa_r+0xb64>
 8009b2e:	9b01      	ldr	r3, [sp, #4]
 8009b30:	07db      	lsls	r3, r3, #31
 8009b32:	d4ae      	bmi.n	8009a92 <_dtoa_r+0xac2>
 8009b34:	462b      	mov	r3, r5
 8009b36:	461d      	mov	r5, r3
 8009b38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b3c:	2a30      	cmp	r2, #48	; 0x30
 8009b3e:	d0fa      	beq.n	8009b36 <_dtoa_r+0xb66>
 8009b40:	e6f7      	b.n	8009932 <_dtoa_r+0x962>
 8009b42:	9a00      	ldr	r2, [sp, #0]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d1a5      	bne.n	8009a94 <_dtoa_r+0xac4>
 8009b48:	f10a 0a01 	add.w	sl, sl, #1
 8009b4c:	2331      	movs	r3, #49	; 0x31
 8009b4e:	e779      	b.n	8009a44 <_dtoa_r+0xa74>
 8009b50:	4b13      	ldr	r3, [pc, #76]	; (8009ba0 <_dtoa_r+0xbd0>)
 8009b52:	f7ff baaf 	b.w	80090b4 <_dtoa_r+0xe4>
 8009b56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f47f aa86 	bne.w	800906a <_dtoa_r+0x9a>
 8009b5e:	4b11      	ldr	r3, [pc, #68]	; (8009ba4 <_dtoa_r+0xbd4>)
 8009b60:	f7ff baa8 	b.w	80090b4 <_dtoa_r+0xe4>
 8009b64:	f1b9 0f00 	cmp.w	r9, #0
 8009b68:	dc03      	bgt.n	8009b72 <_dtoa_r+0xba2>
 8009b6a:	9b05      	ldr	r3, [sp, #20]
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	f73f aec9 	bgt.w	8009904 <_dtoa_r+0x934>
 8009b72:	9d00      	ldr	r5, [sp, #0]
 8009b74:	4631      	mov	r1, r6
 8009b76:	4658      	mov	r0, fp
 8009b78:	f7ff f99c 	bl	8008eb4 <quorem>
 8009b7c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009b80:	f805 3b01 	strb.w	r3, [r5], #1
 8009b84:	9a00      	ldr	r2, [sp, #0]
 8009b86:	1aaa      	subs	r2, r5, r2
 8009b88:	4591      	cmp	r9, r2
 8009b8a:	ddba      	ble.n	8009b02 <_dtoa_r+0xb32>
 8009b8c:	4659      	mov	r1, fp
 8009b8e:	2300      	movs	r3, #0
 8009b90:	220a      	movs	r2, #10
 8009b92:	4620      	mov	r0, r4
 8009b94:	f000 f87a 	bl	8009c8c <__multadd>
 8009b98:	4683      	mov	fp, r0
 8009b9a:	e7eb      	b.n	8009b74 <_dtoa_r+0xba4>
 8009b9c:	0800b88f 	.word	0x0800b88f
 8009ba0:	0800b7e8 	.word	0x0800b7e8
 8009ba4:	0800b80c 	.word	0x0800b80c

08009ba8 <_localeconv_r>:
 8009ba8:	4800      	ldr	r0, [pc, #0]	; (8009bac <_localeconv_r+0x4>)
 8009baa:	4770      	bx	lr
 8009bac:	20000738 	.word	0x20000738

08009bb0 <__malloc_lock>:
 8009bb0:	4801      	ldr	r0, [pc, #4]	; (8009bb8 <__malloc_lock+0x8>)
 8009bb2:	f000 bd48 	b.w	800a646 <__retarget_lock_acquire_recursive>
 8009bb6:	bf00      	nop
 8009bb8:	20001380 	.word	0x20001380

08009bbc <__malloc_unlock>:
 8009bbc:	4801      	ldr	r0, [pc, #4]	; (8009bc4 <__malloc_unlock+0x8>)
 8009bbe:	f000 bd43 	b.w	800a648 <__retarget_lock_release_recursive>
 8009bc2:	bf00      	nop
 8009bc4:	20001380 	.word	0x20001380

08009bc8 <_Balloc>:
 8009bc8:	b570      	push	{r4, r5, r6, lr}
 8009bca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bcc:	4604      	mov	r4, r0
 8009bce:	460d      	mov	r5, r1
 8009bd0:	b976      	cbnz	r6, 8009bf0 <_Balloc+0x28>
 8009bd2:	2010      	movs	r0, #16
 8009bd4:	f7fe fc0c 	bl	80083f0 <malloc>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	6260      	str	r0, [r4, #36]	; 0x24
 8009bdc:	b920      	cbnz	r0, 8009be8 <_Balloc+0x20>
 8009bde:	4b18      	ldr	r3, [pc, #96]	; (8009c40 <_Balloc+0x78>)
 8009be0:	4818      	ldr	r0, [pc, #96]	; (8009c44 <_Balloc+0x7c>)
 8009be2:	2166      	movs	r1, #102	; 0x66
 8009be4:	f000 fcfe 	bl	800a5e4 <__assert_func>
 8009be8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bec:	6006      	str	r6, [r0, #0]
 8009bee:	60c6      	str	r6, [r0, #12]
 8009bf0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009bf2:	68f3      	ldr	r3, [r6, #12]
 8009bf4:	b183      	cbz	r3, 8009c18 <_Balloc+0x50>
 8009bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009bfe:	b9b8      	cbnz	r0, 8009c30 <_Balloc+0x68>
 8009c00:	2101      	movs	r1, #1
 8009c02:	fa01 f605 	lsl.w	r6, r1, r5
 8009c06:	1d72      	adds	r2, r6, #5
 8009c08:	0092      	lsls	r2, r2, #2
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f000 fb5a 	bl	800a2c4 <_calloc_r>
 8009c10:	b160      	cbz	r0, 8009c2c <_Balloc+0x64>
 8009c12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c16:	e00e      	b.n	8009c36 <_Balloc+0x6e>
 8009c18:	2221      	movs	r2, #33	; 0x21
 8009c1a:	2104      	movs	r1, #4
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f000 fb51 	bl	800a2c4 <_calloc_r>
 8009c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c24:	60f0      	str	r0, [r6, #12]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1e4      	bne.n	8009bf6 <_Balloc+0x2e>
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	bd70      	pop	{r4, r5, r6, pc}
 8009c30:	6802      	ldr	r2, [r0, #0]
 8009c32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c36:	2300      	movs	r3, #0
 8009c38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c3c:	e7f7      	b.n	8009c2e <_Balloc+0x66>
 8009c3e:	bf00      	nop
 8009c40:	0800b819 	.word	0x0800b819
 8009c44:	0800b8a0 	.word	0x0800b8a0

08009c48 <_Bfree>:
 8009c48:	b570      	push	{r4, r5, r6, lr}
 8009c4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c4c:	4605      	mov	r5, r0
 8009c4e:	460c      	mov	r4, r1
 8009c50:	b976      	cbnz	r6, 8009c70 <_Bfree+0x28>
 8009c52:	2010      	movs	r0, #16
 8009c54:	f7fe fbcc 	bl	80083f0 <malloc>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	6268      	str	r0, [r5, #36]	; 0x24
 8009c5c:	b920      	cbnz	r0, 8009c68 <_Bfree+0x20>
 8009c5e:	4b09      	ldr	r3, [pc, #36]	; (8009c84 <_Bfree+0x3c>)
 8009c60:	4809      	ldr	r0, [pc, #36]	; (8009c88 <_Bfree+0x40>)
 8009c62:	218a      	movs	r1, #138	; 0x8a
 8009c64:	f000 fcbe 	bl	800a5e4 <__assert_func>
 8009c68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c6c:	6006      	str	r6, [r0, #0]
 8009c6e:	60c6      	str	r6, [r0, #12]
 8009c70:	b13c      	cbz	r4, 8009c82 <_Bfree+0x3a>
 8009c72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c74:	6862      	ldr	r2, [r4, #4]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c7c:	6021      	str	r1, [r4, #0]
 8009c7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c82:	bd70      	pop	{r4, r5, r6, pc}
 8009c84:	0800b819 	.word	0x0800b819
 8009c88:	0800b8a0 	.word	0x0800b8a0

08009c8c <__multadd>:
 8009c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c90:	690e      	ldr	r6, [r1, #16]
 8009c92:	4607      	mov	r7, r0
 8009c94:	4698      	mov	r8, r3
 8009c96:	460c      	mov	r4, r1
 8009c98:	f101 0014 	add.w	r0, r1, #20
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	6805      	ldr	r5, [r0, #0]
 8009ca0:	b2a9      	uxth	r1, r5
 8009ca2:	fb02 8101 	mla	r1, r2, r1, r8
 8009ca6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009caa:	0c2d      	lsrs	r5, r5, #16
 8009cac:	fb02 c505 	mla	r5, r2, r5, ip
 8009cb0:	b289      	uxth	r1, r1
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009cb8:	429e      	cmp	r6, r3
 8009cba:	f840 1b04 	str.w	r1, [r0], #4
 8009cbe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009cc2:	dcec      	bgt.n	8009c9e <__multadd+0x12>
 8009cc4:	f1b8 0f00 	cmp.w	r8, #0
 8009cc8:	d022      	beq.n	8009d10 <__multadd+0x84>
 8009cca:	68a3      	ldr	r3, [r4, #8]
 8009ccc:	42b3      	cmp	r3, r6
 8009cce:	dc19      	bgt.n	8009d04 <__multadd+0x78>
 8009cd0:	6861      	ldr	r1, [r4, #4]
 8009cd2:	4638      	mov	r0, r7
 8009cd4:	3101      	adds	r1, #1
 8009cd6:	f7ff ff77 	bl	8009bc8 <_Balloc>
 8009cda:	4605      	mov	r5, r0
 8009cdc:	b928      	cbnz	r0, 8009cea <__multadd+0x5e>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	4b0d      	ldr	r3, [pc, #52]	; (8009d18 <__multadd+0x8c>)
 8009ce2:	480e      	ldr	r0, [pc, #56]	; (8009d1c <__multadd+0x90>)
 8009ce4:	21b5      	movs	r1, #181	; 0xb5
 8009ce6:	f000 fc7d 	bl	800a5e4 <__assert_func>
 8009cea:	6922      	ldr	r2, [r4, #16]
 8009cec:	3202      	adds	r2, #2
 8009cee:	f104 010c 	add.w	r1, r4, #12
 8009cf2:	0092      	lsls	r2, r2, #2
 8009cf4:	300c      	adds	r0, #12
 8009cf6:	f7fe fb83 	bl	8008400 <memcpy>
 8009cfa:	4621      	mov	r1, r4
 8009cfc:	4638      	mov	r0, r7
 8009cfe:	f7ff ffa3 	bl	8009c48 <_Bfree>
 8009d02:	462c      	mov	r4, r5
 8009d04:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009d08:	3601      	adds	r6, #1
 8009d0a:	f8c3 8014 	str.w	r8, [r3, #20]
 8009d0e:	6126      	str	r6, [r4, #16]
 8009d10:	4620      	mov	r0, r4
 8009d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d16:	bf00      	nop
 8009d18:	0800b88f 	.word	0x0800b88f
 8009d1c:	0800b8a0 	.word	0x0800b8a0

08009d20 <__hi0bits>:
 8009d20:	0c03      	lsrs	r3, r0, #16
 8009d22:	041b      	lsls	r3, r3, #16
 8009d24:	b9d3      	cbnz	r3, 8009d5c <__hi0bits+0x3c>
 8009d26:	0400      	lsls	r0, r0, #16
 8009d28:	2310      	movs	r3, #16
 8009d2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009d2e:	bf04      	itt	eq
 8009d30:	0200      	lsleq	r0, r0, #8
 8009d32:	3308      	addeq	r3, #8
 8009d34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009d38:	bf04      	itt	eq
 8009d3a:	0100      	lsleq	r0, r0, #4
 8009d3c:	3304      	addeq	r3, #4
 8009d3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d42:	bf04      	itt	eq
 8009d44:	0080      	lsleq	r0, r0, #2
 8009d46:	3302      	addeq	r3, #2
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	db05      	blt.n	8009d58 <__hi0bits+0x38>
 8009d4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d50:	f103 0301 	add.w	r3, r3, #1
 8009d54:	bf08      	it	eq
 8009d56:	2320      	moveq	r3, #32
 8009d58:	4618      	mov	r0, r3
 8009d5a:	4770      	bx	lr
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	e7e4      	b.n	8009d2a <__hi0bits+0xa>

08009d60 <__lo0bits>:
 8009d60:	6803      	ldr	r3, [r0, #0]
 8009d62:	f013 0207 	ands.w	r2, r3, #7
 8009d66:	4601      	mov	r1, r0
 8009d68:	d00b      	beq.n	8009d82 <__lo0bits+0x22>
 8009d6a:	07da      	lsls	r2, r3, #31
 8009d6c:	d424      	bmi.n	8009db8 <__lo0bits+0x58>
 8009d6e:	0798      	lsls	r0, r3, #30
 8009d70:	bf49      	itett	mi
 8009d72:	085b      	lsrmi	r3, r3, #1
 8009d74:	089b      	lsrpl	r3, r3, #2
 8009d76:	2001      	movmi	r0, #1
 8009d78:	600b      	strmi	r3, [r1, #0]
 8009d7a:	bf5c      	itt	pl
 8009d7c:	600b      	strpl	r3, [r1, #0]
 8009d7e:	2002      	movpl	r0, #2
 8009d80:	4770      	bx	lr
 8009d82:	b298      	uxth	r0, r3
 8009d84:	b9b0      	cbnz	r0, 8009db4 <__lo0bits+0x54>
 8009d86:	0c1b      	lsrs	r3, r3, #16
 8009d88:	2010      	movs	r0, #16
 8009d8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009d8e:	bf04      	itt	eq
 8009d90:	0a1b      	lsreq	r3, r3, #8
 8009d92:	3008      	addeq	r0, #8
 8009d94:	071a      	lsls	r2, r3, #28
 8009d96:	bf04      	itt	eq
 8009d98:	091b      	lsreq	r3, r3, #4
 8009d9a:	3004      	addeq	r0, #4
 8009d9c:	079a      	lsls	r2, r3, #30
 8009d9e:	bf04      	itt	eq
 8009da0:	089b      	lsreq	r3, r3, #2
 8009da2:	3002      	addeq	r0, #2
 8009da4:	07da      	lsls	r2, r3, #31
 8009da6:	d403      	bmi.n	8009db0 <__lo0bits+0x50>
 8009da8:	085b      	lsrs	r3, r3, #1
 8009daa:	f100 0001 	add.w	r0, r0, #1
 8009dae:	d005      	beq.n	8009dbc <__lo0bits+0x5c>
 8009db0:	600b      	str	r3, [r1, #0]
 8009db2:	4770      	bx	lr
 8009db4:	4610      	mov	r0, r2
 8009db6:	e7e8      	b.n	8009d8a <__lo0bits+0x2a>
 8009db8:	2000      	movs	r0, #0
 8009dba:	4770      	bx	lr
 8009dbc:	2020      	movs	r0, #32
 8009dbe:	4770      	bx	lr

08009dc0 <__i2b>:
 8009dc0:	b510      	push	{r4, lr}
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	2101      	movs	r1, #1
 8009dc6:	f7ff feff 	bl	8009bc8 <_Balloc>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	b928      	cbnz	r0, 8009dda <__i2b+0x1a>
 8009dce:	4b05      	ldr	r3, [pc, #20]	; (8009de4 <__i2b+0x24>)
 8009dd0:	4805      	ldr	r0, [pc, #20]	; (8009de8 <__i2b+0x28>)
 8009dd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009dd6:	f000 fc05 	bl	800a5e4 <__assert_func>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	6144      	str	r4, [r0, #20]
 8009dde:	6103      	str	r3, [r0, #16]
 8009de0:	bd10      	pop	{r4, pc}
 8009de2:	bf00      	nop
 8009de4:	0800b88f 	.word	0x0800b88f
 8009de8:	0800b8a0 	.word	0x0800b8a0

08009dec <__multiply>:
 8009dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df0:	4614      	mov	r4, r2
 8009df2:	690a      	ldr	r2, [r1, #16]
 8009df4:	6923      	ldr	r3, [r4, #16]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	bfb8      	it	lt
 8009dfa:	460b      	movlt	r3, r1
 8009dfc:	460d      	mov	r5, r1
 8009dfe:	bfbc      	itt	lt
 8009e00:	4625      	movlt	r5, r4
 8009e02:	461c      	movlt	r4, r3
 8009e04:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009e08:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009e0c:	68ab      	ldr	r3, [r5, #8]
 8009e0e:	6869      	ldr	r1, [r5, #4]
 8009e10:	eb0a 0709 	add.w	r7, sl, r9
 8009e14:	42bb      	cmp	r3, r7
 8009e16:	b085      	sub	sp, #20
 8009e18:	bfb8      	it	lt
 8009e1a:	3101      	addlt	r1, #1
 8009e1c:	f7ff fed4 	bl	8009bc8 <_Balloc>
 8009e20:	b930      	cbnz	r0, 8009e30 <__multiply+0x44>
 8009e22:	4602      	mov	r2, r0
 8009e24:	4b42      	ldr	r3, [pc, #264]	; (8009f30 <__multiply+0x144>)
 8009e26:	4843      	ldr	r0, [pc, #268]	; (8009f34 <__multiply+0x148>)
 8009e28:	f240 115d 	movw	r1, #349	; 0x15d
 8009e2c:	f000 fbda 	bl	800a5e4 <__assert_func>
 8009e30:	f100 0614 	add.w	r6, r0, #20
 8009e34:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009e38:	4633      	mov	r3, r6
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	4543      	cmp	r3, r8
 8009e3e:	d31e      	bcc.n	8009e7e <__multiply+0x92>
 8009e40:	f105 0c14 	add.w	ip, r5, #20
 8009e44:	f104 0314 	add.w	r3, r4, #20
 8009e48:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009e4c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009e50:	9202      	str	r2, [sp, #8]
 8009e52:	ebac 0205 	sub.w	r2, ip, r5
 8009e56:	3a15      	subs	r2, #21
 8009e58:	f022 0203 	bic.w	r2, r2, #3
 8009e5c:	3204      	adds	r2, #4
 8009e5e:	f105 0115 	add.w	r1, r5, #21
 8009e62:	458c      	cmp	ip, r1
 8009e64:	bf38      	it	cc
 8009e66:	2204      	movcc	r2, #4
 8009e68:	9201      	str	r2, [sp, #4]
 8009e6a:	9a02      	ldr	r2, [sp, #8]
 8009e6c:	9303      	str	r3, [sp, #12]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d808      	bhi.n	8009e84 <__multiply+0x98>
 8009e72:	2f00      	cmp	r7, #0
 8009e74:	dc55      	bgt.n	8009f22 <__multiply+0x136>
 8009e76:	6107      	str	r7, [r0, #16]
 8009e78:	b005      	add	sp, #20
 8009e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e7e:	f843 2b04 	str.w	r2, [r3], #4
 8009e82:	e7db      	b.n	8009e3c <__multiply+0x50>
 8009e84:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e88:	f1ba 0f00 	cmp.w	sl, #0
 8009e8c:	d020      	beq.n	8009ed0 <__multiply+0xe4>
 8009e8e:	f105 0e14 	add.w	lr, r5, #20
 8009e92:	46b1      	mov	r9, r6
 8009e94:	2200      	movs	r2, #0
 8009e96:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009e9a:	f8d9 b000 	ldr.w	fp, [r9]
 8009e9e:	b2a1      	uxth	r1, r4
 8009ea0:	fa1f fb8b 	uxth.w	fp, fp
 8009ea4:	fb0a b101 	mla	r1, sl, r1, fp
 8009ea8:	4411      	add	r1, r2
 8009eaa:	f8d9 2000 	ldr.w	r2, [r9]
 8009eae:	0c24      	lsrs	r4, r4, #16
 8009eb0:	0c12      	lsrs	r2, r2, #16
 8009eb2:	fb0a 2404 	mla	r4, sl, r4, r2
 8009eb6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009eba:	b289      	uxth	r1, r1
 8009ebc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009ec0:	45f4      	cmp	ip, lr
 8009ec2:	f849 1b04 	str.w	r1, [r9], #4
 8009ec6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009eca:	d8e4      	bhi.n	8009e96 <__multiply+0xaa>
 8009ecc:	9901      	ldr	r1, [sp, #4]
 8009ece:	5072      	str	r2, [r6, r1]
 8009ed0:	9a03      	ldr	r2, [sp, #12]
 8009ed2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ed6:	3304      	adds	r3, #4
 8009ed8:	f1b9 0f00 	cmp.w	r9, #0
 8009edc:	d01f      	beq.n	8009f1e <__multiply+0x132>
 8009ede:	6834      	ldr	r4, [r6, #0]
 8009ee0:	f105 0114 	add.w	r1, r5, #20
 8009ee4:	46b6      	mov	lr, r6
 8009ee6:	f04f 0a00 	mov.w	sl, #0
 8009eea:	880a      	ldrh	r2, [r1, #0]
 8009eec:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009ef0:	fb09 b202 	mla	r2, r9, r2, fp
 8009ef4:	4492      	add	sl, r2
 8009ef6:	b2a4      	uxth	r4, r4
 8009ef8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009efc:	f84e 4b04 	str.w	r4, [lr], #4
 8009f00:	f851 4b04 	ldr.w	r4, [r1], #4
 8009f04:	f8be 2000 	ldrh.w	r2, [lr]
 8009f08:	0c24      	lsrs	r4, r4, #16
 8009f0a:	fb09 2404 	mla	r4, r9, r4, r2
 8009f0e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009f12:	458c      	cmp	ip, r1
 8009f14:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009f18:	d8e7      	bhi.n	8009eea <__multiply+0xfe>
 8009f1a:	9a01      	ldr	r2, [sp, #4]
 8009f1c:	50b4      	str	r4, [r6, r2]
 8009f1e:	3604      	adds	r6, #4
 8009f20:	e7a3      	b.n	8009e6a <__multiply+0x7e>
 8009f22:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1a5      	bne.n	8009e76 <__multiply+0x8a>
 8009f2a:	3f01      	subs	r7, #1
 8009f2c:	e7a1      	b.n	8009e72 <__multiply+0x86>
 8009f2e:	bf00      	nop
 8009f30:	0800b88f 	.word	0x0800b88f
 8009f34:	0800b8a0 	.word	0x0800b8a0

08009f38 <__pow5mult>:
 8009f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f3c:	4615      	mov	r5, r2
 8009f3e:	f012 0203 	ands.w	r2, r2, #3
 8009f42:	4606      	mov	r6, r0
 8009f44:	460f      	mov	r7, r1
 8009f46:	d007      	beq.n	8009f58 <__pow5mult+0x20>
 8009f48:	4c25      	ldr	r4, [pc, #148]	; (8009fe0 <__pow5mult+0xa8>)
 8009f4a:	3a01      	subs	r2, #1
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f52:	f7ff fe9b 	bl	8009c8c <__multadd>
 8009f56:	4607      	mov	r7, r0
 8009f58:	10ad      	asrs	r5, r5, #2
 8009f5a:	d03d      	beq.n	8009fd8 <__pow5mult+0xa0>
 8009f5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f5e:	b97c      	cbnz	r4, 8009f80 <__pow5mult+0x48>
 8009f60:	2010      	movs	r0, #16
 8009f62:	f7fe fa45 	bl	80083f0 <malloc>
 8009f66:	4602      	mov	r2, r0
 8009f68:	6270      	str	r0, [r6, #36]	; 0x24
 8009f6a:	b928      	cbnz	r0, 8009f78 <__pow5mult+0x40>
 8009f6c:	4b1d      	ldr	r3, [pc, #116]	; (8009fe4 <__pow5mult+0xac>)
 8009f6e:	481e      	ldr	r0, [pc, #120]	; (8009fe8 <__pow5mult+0xb0>)
 8009f70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f74:	f000 fb36 	bl	800a5e4 <__assert_func>
 8009f78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f7c:	6004      	str	r4, [r0, #0]
 8009f7e:	60c4      	str	r4, [r0, #12]
 8009f80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f88:	b94c      	cbnz	r4, 8009f9e <__pow5mult+0x66>
 8009f8a:	f240 2171 	movw	r1, #625	; 0x271
 8009f8e:	4630      	mov	r0, r6
 8009f90:	f7ff ff16 	bl	8009dc0 <__i2b>
 8009f94:	2300      	movs	r3, #0
 8009f96:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	6003      	str	r3, [r0, #0]
 8009f9e:	f04f 0900 	mov.w	r9, #0
 8009fa2:	07eb      	lsls	r3, r5, #31
 8009fa4:	d50a      	bpl.n	8009fbc <__pow5mult+0x84>
 8009fa6:	4639      	mov	r1, r7
 8009fa8:	4622      	mov	r2, r4
 8009faa:	4630      	mov	r0, r6
 8009fac:	f7ff ff1e 	bl	8009dec <__multiply>
 8009fb0:	4639      	mov	r1, r7
 8009fb2:	4680      	mov	r8, r0
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f7ff fe47 	bl	8009c48 <_Bfree>
 8009fba:	4647      	mov	r7, r8
 8009fbc:	106d      	asrs	r5, r5, #1
 8009fbe:	d00b      	beq.n	8009fd8 <__pow5mult+0xa0>
 8009fc0:	6820      	ldr	r0, [r4, #0]
 8009fc2:	b938      	cbnz	r0, 8009fd4 <__pow5mult+0x9c>
 8009fc4:	4622      	mov	r2, r4
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	4630      	mov	r0, r6
 8009fca:	f7ff ff0f 	bl	8009dec <__multiply>
 8009fce:	6020      	str	r0, [r4, #0]
 8009fd0:	f8c0 9000 	str.w	r9, [r0]
 8009fd4:	4604      	mov	r4, r0
 8009fd6:	e7e4      	b.n	8009fa2 <__pow5mult+0x6a>
 8009fd8:	4638      	mov	r0, r7
 8009fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fde:	bf00      	nop
 8009fe0:	0800b9f0 	.word	0x0800b9f0
 8009fe4:	0800b819 	.word	0x0800b819
 8009fe8:	0800b8a0 	.word	0x0800b8a0

08009fec <__lshift>:
 8009fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff0:	460c      	mov	r4, r1
 8009ff2:	6849      	ldr	r1, [r1, #4]
 8009ff4:	6923      	ldr	r3, [r4, #16]
 8009ff6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ffa:	68a3      	ldr	r3, [r4, #8]
 8009ffc:	4607      	mov	r7, r0
 8009ffe:	4691      	mov	r9, r2
 800a000:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a004:	f108 0601 	add.w	r6, r8, #1
 800a008:	42b3      	cmp	r3, r6
 800a00a:	db0b      	blt.n	800a024 <__lshift+0x38>
 800a00c:	4638      	mov	r0, r7
 800a00e:	f7ff fddb 	bl	8009bc8 <_Balloc>
 800a012:	4605      	mov	r5, r0
 800a014:	b948      	cbnz	r0, 800a02a <__lshift+0x3e>
 800a016:	4602      	mov	r2, r0
 800a018:	4b28      	ldr	r3, [pc, #160]	; (800a0bc <__lshift+0xd0>)
 800a01a:	4829      	ldr	r0, [pc, #164]	; (800a0c0 <__lshift+0xd4>)
 800a01c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a020:	f000 fae0 	bl	800a5e4 <__assert_func>
 800a024:	3101      	adds	r1, #1
 800a026:	005b      	lsls	r3, r3, #1
 800a028:	e7ee      	b.n	800a008 <__lshift+0x1c>
 800a02a:	2300      	movs	r3, #0
 800a02c:	f100 0114 	add.w	r1, r0, #20
 800a030:	f100 0210 	add.w	r2, r0, #16
 800a034:	4618      	mov	r0, r3
 800a036:	4553      	cmp	r3, sl
 800a038:	db33      	blt.n	800a0a2 <__lshift+0xb6>
 800a03a:	6920      	ldr	r0, [r4, #16]
 800a03c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a040:	f104 0314 	add.w	r3, r4, #20
 800a044:	f019 091f 	ands.w	r9, r9, #31
 800a048:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a04c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a050:	d02b      	beq.n	800a0aa <__lshift+0xbe>
 800a052:	f1c9 0e20 	rsb	lr, r9, #32
 800a056:	468a      	mov	sl, r1
 800a058:	2200      	movs	r2, #0
 800a05a:	6818      	ldr	r0, [r3, #0]
 800a05c:	fa00 f009 	lsl.w	r0, r0, r9
 800a060:	4302      	orrs	r2, r0
 800a062:	f84a 2b04 	str.w	r2, [sl], #4
 800a066:	f853 2b04 	ldr.w	r2, [r3], #4
 800a06a:	459c      	cmp	ip, r3
 800a06c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a070:	d8f3      	bhi.n	800a05a <__lshift+0x6e>
 800a072:	ebac 0304 	sub.w	r3, ip, r4
 800a076:	3b15      	subs	r3, #21
 800a078:	f023 0303 	bic.w	r3, r3, #3
 800a07c:	3304      	adds	r3, #4
 800a07e:	f104 0015 	add.w	r0, r4, #21
 800a082:	4584      	cmp	ip, r0
 800a084:	bf38      	it	cc
 800a086:	2304      	movcc	r3, #4
 800a088:	50ca      	str	r2, [r1, r3]
 800a08a:	b10a      	cbz	r2, 800a090 <__lshift+0xa4>
 800a08c:	f108 0602 	add.w	r6, r8, #2
 800a090:	3e01      	subs	r6, #1
 800a092:	4638      	mov	r0, r7
 800a094:	612e      	str	r6, [r5, #16]
 800a096:	4621      	mov	r1, r4
 800a098:	f7ff fdd6 	bl	8009c48 <_Bfree>
 800a09c:	4628      	mov	r0, r5
 800a09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	e7c5      	b.n	800a036 <__lshift+0x4a>
 800a0aa:	3904      	subs	r1, #4
 800a0ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a0b4:	459c      	cmp	ip, r3
 800a0b6:	d8f9      	bhi.n	800a0ac <__lshift+0xc0>
 800a0b8:	e7ea      	b.n	800a090 <__lshift+0xa4>
 800a0ba:	bf00      	nop
 800a0bc:	0800b88f 	.word	0x0800b88f
 800a0c0:	0800b8a0 	.word	0x0800b8a0

0800a0c4 <__mcmp>:
 800a0c4:	b530      	push	{r4, r5, lr}
 800a0c6:	6902      	ldr	r2, [r0, #16]
 800a0c8:	690c      	ldr	r4, [r1, #16]
 800a0ca:	1b12      	subs	r2, r2, r4
 800a0cc:	d10e      	bne.n	800a0ec <__mcmp+0x28>
 800a0ce:	f100 0314 	add.w	r3, r0, #20
 800a0d2:	3114      	adds	r1, #20
 800a0d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a0d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a0dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a0e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a0e4:	42a5      	cmp	r5, r4
 800a0e6:	d003      	beq.n	800a0f0 <__mcmp+0x2c>
 800a0e8:	d305      	bcc.n	800a0f6 <__mcmp+0x32>
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	4610      	mov	r0, r2
 800a0ee:	bd30      	pop	{r4, r5, pc}
 800a0f0:	4283      	cmp	r3, r0
 800a0f2:	d3f3      	bcc.n	800a0dc <__mcmp+0x18>
 800a0f4:	e7fa      	b.n	800a0ec <__mcmp+0x28>
 800a0f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0fa:	e7f7      	b.n	800a0ec <__mcmp+0x28>

0800a0fc <__mdiff>:
 800a0fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a100:	460c      	mov	r4, r1
 800a102:	4606      	mov	r6, r0
 800a104:	4611      	mov	r1, r2
 800a106:	4620      	mov	r0, r4
 800a108:	4617      	mov	r7, r2
 800a10a:	f7ff ffdb 	bl	800a0c4 <__mcmp>
 800a10e:	1e05      	subs	r5, r0, #0
 800a110:	d110      	bne.n	800a134 <__mdiff+0x38>
 800a112:	4629      	mov	r1, r5
 800a114:	4630      	mov	r0, r6
 800a116:	f7ff fd57 	bl	8009bc8 <_Balloc>
 800a11a:	b930      	cbnz	r0, 800a12a <__mdiff+0x2e>
 800a11c:	4b39      	ldr	r3, [pc, #228]	; (800a204 <__mdiff+0x108>)
 800a11e:	4602      	mov	r2, r0
 800a120:	f240 2132 	movw	r1, #562	; 0x232
 800a124:	4838      	ldr	r0, [pc, #224]	; (800a208 <__mdiff+0x10c>)
 800a126:	f000 fa5d 	bl	800a5e4 <__assert_func>
 800a12a:	2301      	movs	r3, #1
 800a12c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a130:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a134:	bfa4      	itt	ge
 800a136:	463b      	movge	r3, r7
 800a138:	4627      	movge	r7, r4
 800a13a:	4630      	mov	r0, r6
 800a13c:	6879      	ldr	r1, [r7, #4]
 800a13e:	bfa6      	itte	ge
 800a140:	461c      	movge	r4, r3
 800a142:	2500      	movge	r5, #0
 800a144:	2501      	movlt	r5, #1
 800a146:	f7ff fd3f 	bl	8009bc8 <_Balloc>
 800a14a:	b920      	cbnz	r0, 800a156 <__mdiff+0x5a>
 800a14c:	4b2d      	ldr	r3, [pc, #180]	; (800a204 <__mdiff+0x108>)
 800a14e:	4602      	mov	r2, r0
 800a150:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a154:	e7e6      	b.n	800a124 <__mdiff+0x28>
 800a156:	693e      	ldr	r6, [r7, #16]
 800a158:	60c5      	str	r5, [r0, #12]
 800a15a:	6925      	ldr	r5, [r4, #16]
 800a15c:	f107 0114 	add.w	r1, r7, #20
 800a160:	f104 0914 	add.w	r9, r4, #20
 800a164:	f100 0e14 	add.w	lr, r0, #20
 800a168:	f107 0210 	add.w	r2, r7, #16
 800a16c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a170:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a174:	46f2      	mov	sl, lr
 800a176:	2700      	movs	r7, #0
 800a178:	f859 3b04 	ldr.w	r3, [r9], #4
 800a17c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a180:	fa1f f883 	uxth.w	r8, r3
 800a184:	fa17 f78b 	uxtah	r7, r7, fp
 800a188:	0c1b      	lsrs	r3, r3, #16
 800a18a:	eba7 0808 	sub.w	r8, r7, r8
 800a18e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a192:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a196:	fa1f f888 	uxth.w	r8, r8
 800a19a:	141f      	asrs	r7, r3, #16
 800a19c:	454d      	cmp	r5, r9
 800a19e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a1a2:	f84a 3b04 	str.w	r3, [sl], #4
 800a1a6:	d8e7      	bhi.n	800a178 <__mdiff+0x7c>
 800a1a8:	1b2b      	subs	r3, r5, r4
 800a1aa:	3b15      	subs	r3, #21
 800a1ac:	f023 0303 	bic.w	r3, r3, #3
 800a1b0:	3304      	adds	r3, #4
 800a1b2:	3415      	adds	r4, #21
 800a1b4:	42a5      	cmp	r5, r4
 800a1b6:	bf38      	it	cc
 800a1b8:	2304      	movcc	r3, #4
 800a1ba:	4419      	add	r1, r3
 800a1bc:	4473      	add	r3, lr
 800a1be:	469e      	mov	lr, r3
 800a1c0:	460d      	mov	r5, r1
 800a1c2:	4565      	cmp	r5, ip
 800a1c4:	d30e      	bcc.n	800a1e4 <__mdiff+0xe8>
 800a1c6:	f10c 0203 	add.w	r2, ip, #3
 800a1ca:	1a52      	subs	r2, r2, r1
 800a1cc:	f022 0203 	bic.w	r2, r2, #3
 800a1d0:	3903      	subs	r1, #3
 800a1d2:	458c      	cmp	ip, r1
 800a1d4:	bf38      	it	cc
 800a1d6:	2200      	movcc	r2, #0
 800a1d8:	441a      	add	r2, r3
 800a1da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a1de:	b17b      	cbz	r3, 800a200 <__mdiff+0x104>
 800a1e0:	6106      	str	r6, [r0, #16]
 800a1e2:	e7a5      	b.n	800a130 <__mdiff+0x34>
 800a1e4:	f855 8b04 	ldr.w	r8, [r5], #4
 800a1e8:	fa17 f488 	uxtah	r4, r7, r8
 800a1ec:	1422      	asrs	r2, r4, #16
 800a1ee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a1f2:	b2a4      	uxth	r4, r4
 800a1f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a1f8:	f84e 4b04 	str.w	r4, [lr], #4
 800a1fc:	1417      	asrs	r7, r2, #16
 800a1fe:	e7e0      	b.n	800a1c2 <__mdiff+0xc6>
 800a200:	3e01      	subs	r6, #1
 800a202:	e7ea      	b.n	800a1da <__mdiff+0xde>
 800a204:	0800b88f 	.word	0x0800b88f
 800a208:	0800b8a0 	.word	0x0800b8a0

0800a20c <__d2b>:
 800a20c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a210:	4689      	mov	r9, r1
 800a212:	2101      	movs	r1, #1
 800a214:	ec57 6b10 	vmov	r6, r7, d0
 800a218:	4690      	mov	r8, r2
 800a21a:	f7ff fcd5 	bl	8009bc8 <_Balloc>
 800a21e:	4604      	mov	r4, r0
 800a220:	b930      	cbnz	r0, 800a230 <__d2b+0x24>
 800a222:	4602      	mov	r2, r0
 800a224:	4b25      	ldr	r3, [pc, #148]	; (800a2bc <__d2b+0xb0>)
 800a226:	4826      	ldr	r0, [pc, #152]	; (800a2c0 <__d2b+0xb4>)
 800a228:	f240 310a 	movw	r1, #778	; 0x30a
 800a22c:	f000 f9da 	bl	800a5e4 <__assert_func>
 800a230:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a234:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a238:	bb35      	cbnz	r5, 800a288 <__d2b+0x7c>
 800a23a:	2e00      	cmp	r6, #0
 800a23c:	9301      	str	r3, [sp, #4]
 800a23e:	d028      	beq.n	800a292 <__d2b+0x86>
 800a240:	4668      	mov	r0, sp
 800a242:	9600      	str	r6, [sp, #0]
 800a244:	f7ff fd8c 	bl	8009d60 <__lo0bits>
 800a248:	9900      	ldr	r1, [sp, #0]
 800a24a:	b300      	cbz	r0, 800a28e <__d2b+0x82>
 800a24c:	9a01      	ldr	r2, [sp, #4]
 800a24e:	f1c0 0320 	rsb	r3, r0, #32
 800a252:	fa02 f303 	lsl.w	r3, r2, r3
 800a256:	430b      	orrs	r3, r1
 800a258:	40c2      	lsrs	r2, r0
 800a25a:	6163      	str	r3, [r4, #20]
 800a25c:	9201      	str	r2, [sp, #4]
 800a25e:	9b01      	ldr	r3, [sp, #4]
 800a260:	61a3      	str	r3, [r4, #24]
 800a262:	2b00      	cmp	r3, #0
 800a264:	bf14      	ite	ne
 800a266:	2202      	movne	r2, #2
 800a268:	2201      	moveq	r2, #1
 800a26a:	6122      	str	r2, [r4, #16]
 800a26c:	b1d5      	cbz	r5, 800a2a4 <__d2b+0x98>
 800a26e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a272:	4405      	add	r5, r0
 800a274:	f8c9 5000 	str.w	r5, [r9]
 800a278:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a27c:	f8c8 0000 	str.w	r0, [r8]
 800a280:	4620      	mov	r0, r4
 800a282:	b003      	add	sp, #12
 800a284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a288:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a28c:	e7d5      	b.n	800a23a <__d2b+0x2e>
 800a28e:	6161      	str	r1, [r4, #20]
 800a290:	e7e5      	b.n	800a25e <__d2b+0x52>
 800a292:	a801      	add	r0, sp, #4
 800a294:	f7ff fd64 	bl	8009d60 <__lo0bits>
 800a298:	9b01      	ldr	r3, [sp, #4]
 800a29a:	6163      	str	r3, [r4, #20]
 800a29c:	2201      	movs	r2, #1
 800a29e:	6122      	str	r2, [r4, #16]
 800a2a0:	3020      	adds	r0, #32
 800a2a2:	e7e3      	b.n	800a26c <__d2b+0x60>
 800a2a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a2a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a2ac:	f8c9 0000 	str.w	r0, [r9]
 800a2b0:	6918      	ldr	r0, [r3, #16]
 800a2b2:	f7ff fd35 	bl	8009d20 <__hi0bits>
 800a2b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2ba:	e7df      	b.n	800a27c <__d2b+0x70>
 800a2bc:	0800b88f 	.word	0x0800b88f
 800a2c0:	0800b8a0 	.word	0x0800b8a0

0800a2c4 <_calloc_r>:
 800a2c4:	b513      	push	{r0, r1, r4, lr}
 800a2c6:	434a      	muls	r2, r1
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	9201      	str	r2, [sp, #4]
 800a2cc:	f7fe f8fe 	bl	80084cc <_malloc_r>
 800a2d0:	4604      	mov	r4, r0
 800a2d2:	b118      	cbz	r0, 800a2dc <_calloc_r+0x18>
 800a2d4:	9a01      	ldr	r2, [sp, #4]
 800a2d6:	2100      	movs	r1, #0
 800a2d8:	f7fe f8a0 	bl	800841c <memset>
 800a2dc:	4620      	mov	r0, r4
 800a2de:	b002      	add	sp, #8
 800a2e0:	bd10      	pop	{r4, pc}

0800a2e2 <_realloc_r>:
 800a2e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e4:	4607      	mov	r7, r0
 800a2e6:	4614      	mov	r4, r2
 800a2e8:	460e      	mov	r6, r1
 800a2ea:	b921      	cbnz	r1, 800a2f6 <_realloc_r+0x14>
 800a2ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a2f0:	4611      	mov	r1, r2
 800a2f2:	f7fe b8eb 	b.w	80084cc <_malloc_r>
 800a2f6:	b922      	cbnz	r2, 800a302 <_realloc_r+0x20>
 800a2f8:	f7fe f898 	bl	800842c <_free_r>
 800a2fc:	4625      	mov	r5, r4
 800a2fe:	4628      	mov	r0, r5
 800a300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a302:	f000 f9ce 	bl	800a6a2 <_malloc_usable_size_r>
 800a306:	42a0      	cmp	r0, r4
 800a308:	d20f      	bcs.n	800a32a <_realloc_r+0x48>
 800a30a:	4621      	mov	r1, r4
 800a30c:	4638      	mov	r0, r7
 800a30e:	f7fe f8dd 	bl	80084cc <_malloc_r>
 800a312:	4605      	mov	r5, r0
 800a314:	2800      	cmp	r0, #0
 800a316:	d0f2      	beq.n	800a2fe <_realloc_r+0x1c>
 800a318:	4631      	mov	r1, r6
 800a31a:	4622      	mov	r2, r4
 800a31c:	f7fe f870 	bl	8008400 <memcpy>
 800a320:	4631      	mov	r1, r6
 800a322:	4638      	mov	r0, r7
 800a324:	f7fe f882 	bl	800842c <_free_r>
 800a328:	e7e9      	b.n	800a2fe <_realloc_r+0x1c>
 800a32a:	4635      	mov	r5, r6
 800a32c:	e7e7      	b.n	800a2fe <_realloc_r+0x1c>

0800a32e <__ssputs_r>:
 800a32e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a332:	688e      	ldr	r6, [r1, #8]
 800a334:	429e      	cmp	r6, r3
 800a336:	4682      	mov	sl, r0
 800a338:	460c      	mov	r4, r1
 800a33a:	4690      	mov	r8, r2
 800a33c:	461f      	mov	r7, r3
 800a33e:	d838      	bhi.n	800a3b2 <__ssputs_r+0x84>
 800a340:	898a      	ldrh	r2, [r1, #12]
 800a342:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a346:	d032      	beq.n	800a3ae <__ssputs_r+0x80>
 800a348:	6825      	ldr	r5, [r4, #0]
 800a34a:	6909      	ldr	r1, [r1, #16]
 800a34c:	eba5 0901 	sub.w	r9, r5, r1
 800a350:	6965      	ldr	r5, [r4, #20]
 800a352:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a356:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a35a:	3301      	adds	r3, #1
 800a35c:	444b      	add	r3, r9
 800a35e:	106d      	asrs	r5, r5, #1
 800a360:	429d      	cmp	r5, r3
 800a362:	bf38      	it	cc
 800a364:	461d      	movcc	r5, r3
 800a366:	0553      	lsls	r3, r2, #21
 800a368:	d531      	bpl.n	800a3ce <__ssputs_r+0xa0>
 800a36a:	4629      	mov	r1, r5
 800a36c:	f7fe f8ae 	bl	80084cc <_malloc_r>
 800a370:	4606      	mov	r6, r0
 800a372:	b950      	cbnz	r0, 800a38a <__ssputs_r+0x5c>
 800a374:	230c      	movs	r3, #12
 800a376:	f8ca 3000 	str.w	r3, [sl]
 800a37a:	89a3      	ldrh	r3, [r4, #12]
 800a37c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a380:	81a3      	strh	r3, [r4, #12]
 800a382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a38a:	6921      	ldr	r1, [r4, #16]
 800a38c:	464a      	mov	r2, r9
 800a38e:	f7fe f837 	bl	8008400 <memcpy>
 800a392:	89a3      	ldrh	r3, [r4, #12]
 800a394:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a39c:	81a3      	strh	r3, [r4, #12]
 800a39e:	6126      	str	r6, [r4, #16]
 800a3a0:	6165      	str	r5, [r4, #20]
 800a3a2:	444e      	add	r6, r9
 800a3a4:	eba5 0509 	sub.w	r5, r5, r9
 800a3a8:	6026      	str	r6, [r4, #0]
 800a3aa:	60a5      	str	r5, [r4, #8]
 800a3ac:	463e      	mov	r6, r7
 800a3ae:	42be      	cmp	r6, r7
 800a3b0:	d900      	bls.n	800a3b4 <__ssputs_r+0x86>
 800a3b2:	463e      	mov	r6, r7
 800a3b4:	4632      	mov	r2, r6
 800a3b6:	6820      	ldr	r0, [r4, #0]
 800a3b8:	4641      	mov	r1, r8
 800a3ba:	f000 f958 	bl	800a66e <memmove>
 800a3be:	68a3      	ldr	r3, [r4, #8]
 800a3c0:	6822      	ldr	r2, [r4, #0]
 800a3c2:	1b9b      	subs	r3, r3, r6
 800a3c4:	4432      	add	r2, r6
 800a3c6:	60a3      	str	r3, [r4, #8]
 800a3c8:	6022      	str	r2, [r4, #0]
 800a3ca:	2000      	movs	r0, #0
 800a3cc:	e7db      	b.n	800a386 <__ssputs_r+0x58>
 800a3ce:	462a      	mov	r2, r5
 800a3d0:	f7ff ff87 	bl	800a2e2 <_realloc_r>
 800a3d4:	4606      	mov	r6, r0
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d1e1      	bne.n	800a39e <__ssputs_r+0x70>
 800a3da:	6921      	ldr	r1, [r4, #16]
 800a3dc:	4650      	mov	r0, sl
 800a3de:	f7fe f825 	bl	800842c <_free_r>
 800a3e2:	e7c7      	b.n	800a374 <__ssputs_r+0x46>

0800a3e4 <_svfiprintf_r>:
 800a3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e8:	4698      	mov	r8, r3
 800a3ea:	898b      	ldrh	r3, [r1, #12]
 800a3ec:	061b      	lsls	r3, r3, #24
 800a3ee:	b09d      	sub	sp, #116	; 0x74
 800a3f0:	4607      	mov	r7, r0
 800a3f2:	460d      	mov	r5, r1
 800a3f4:	4614      	mov	r4, r2
 800a3f6:	d50e      	bpl.n	800a416 <_svfiprintf_r+0x32>
 800a3f8:	690b      	ldr	r3, [r1, #16]
 800a3fa:	b963      	cbnz	r3, 800a416 <_svfiprintf_r+0x32>
 800a3fc:	2140      	movs	r1, #64	; 0x40
 800a3fe:	f7fe f865 	bl	80084cc <_malloc_r>
 800a402:	6028      	str	r0, [r5, #0]
 800a404:	6128      	str	r0, [r5, #16]
 800a406:	b920      	cbnz	r0, 800a412 <_svfiprintf_r+0x2e>
 800a408:	230c      	movs	r3, #12
 800a40a:	603b      	str	r3, [r7, #0]
 800a40c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a410:	e0d1      	b.n	800a5b6 <_svfiprintf_r+0x1d2>
 800a412:	2340      	movs	r3, #64	; 0x40
 800a414:	616b      	str	r3, [r5, #20]
 800a416:	2300      	movs	r3, #0
 800a418:	9309      	str	r3, [sp, #36]	; 0x24
 800a41a:	2320      	movs	r3, #32
 800a41c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a420:	f8cd 800c 	str.w	r8, [sp, #12]
 800a424:	2330      	movs	r3, #48	; 0x30
 800a426:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a5d0 <_svfiprintf_r+0x1ec>
 800a42a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a42e:	f04f 0901 	mov.w	r9, #1
 800a432:	4623      	mov	r3, r4
 800a434:	469a      	mov	sl, r3
 800a436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a43a:	b10a      	cbz	r2, 800a440 <_svfiprintf_r+0x5c>
 800a43c:	2a25      	cmp	r2, #37	; 0x25
 800a43e:	d1f9      	bne.n	800a434 <_svfiprintf_r+0x50>
 800a440:	ebba 0b04 	subs.w	fp, sl, r4
 800a444:	d00b      	beq.n	800a45e <_svfiprintf_r+0x7a>
 800a446:	465b      	mov	r3, fp
 800a448:	4622      	mov	r2, r4
 800a44a:	4629      	mov	r1, r5
 800a44c:	4638      	mov	r0, r7
 800a44e:	f7ff ff6e 	bl	800a32e <__ssputs_r>
 800a452:	3001      	adds	r0, #1
 800a454:	f000 80aa 	beq.w	800a5ac <_svfiprintf_r+0x1c8>
 800a458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a45a:	445a      	add	r2, fp
 800a45c:	9209      	str	r2, [sp, #36]	; 0x24
 800a45e:	f89a 3000 	ldrb.w	r3, [sl]
 800a462:	2b00      	cmp	r3, #0
 800a464:	f000 80a2 	beq.w	800a5ac <_svfiprintf_r+0x1c8>
 800a468:	2300      	movs	r3, #0
 800a46a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a46e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a472:	f10a 0a01 	add.w	sl, sl, #1
 800a476:	9304      	str	r3, [sp, #16]
 800a478:	9307      	str	r3, [sp, #28]
 800a47a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a47e:	931a      	str	r3, [sp, #104]	; 0x68
 800a480:	4654      	mov	r4, sl
 800a482:	2205      	movs	r2, #5
 800a484:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a488:	4851      	ldr	r0, [pc, #324]	; (800a5d0 <_svfiprintf_r+0x1ec>)
 800a48a:	f7f5 fec9 	bl	8000220 <memchr>
 800a48e:	9a04      	ldr	r2, [sp, #16]
 800a490:	b9d8      	cbnz	r0, 800a4ca <_svfiprintf_r+0xe6>
 800a492:	06d0      	lsls	r0, r2, #27
 800a494:	bf44      	itt	mi
 800a496:	2320      	movmi	r3, #32
 800a498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a49c:	0711      	lsls	r1, r2, #28
 800a49e:	bf44      	itt	mi
 800a4a0:	232b      	movmi	r3, #43	; 0x2b
 800a4a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4a6:	f89a 3000 	ldrb.w	r3, [sl]
 800a4aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a4ac:	d015      	beq.n	800a4da <_svfiprintf_r+0xf6>
 800a4ae:	9a07      	ldr	r2, [sp, #28]
 800a4b0:	4654      	mov	r4, sl
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	f04f 0c0a 	mov.w	ip, #10
 800a4b8:	4621      	mov	r1, r4
 800a4ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4be:	3b30      	subs	r3, #48	; 0x30
 800a4c0:	2b09      	cmp	r3, #9
 800a4c2:	d94e      	bls.n	800a562 <_svfiprintf_r+0x17e>
 800a4c4:	b1b0      	cbz	r0, 800a4f4 <_svfiprintf_r+0x110>
 800a4c6:	9207      	str	r2, [sp, #28]
 800a4c8:	e014      	b.n	800a4f4 <_svfiprintf_r+0x110>
 800a4ca:	eba0 0308 	sub.w	r3, r0, r8
 800a4ce:	fa09 f303 	lsl.w	r3, r9, r3
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	9304      	str	r3, [sp, #16]
 800a4d6:	46a2      	mov	sl, r4
 800a4d8:	e7d2      	b.n	800a480 <_svfiprintf_r+0x9c>
 800a4da:	9b03      	ldr	r3, [sp, #12]
 800a4dc:	1d19      	adds	r1, r3, #4
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	9103      	str	r1, [sp, #12]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	bfbb      	ittet	lt
 800a4e6:	425b      	neglt	r3, r3
 800a4e8:	f042 0202 	orrlt.w	r2, r2, #2
 800a4ec:	9307      	strge	r3, [sp, #28]
 800a4ee:	9307      	strlt	r3, [sp, #28]
 800a4f0:	bfb8      	it	lt
 800a4f2:	9204      	strlt	r2, [sp, #16]
 800a4f4:	7823      	ldrb	r3, [r4, #0]
 800a4f6:	2b2e      	cmp	r3, #46	; 0x2e
 800a4f8:	d10c      	bne.n	800a514 <_svfiprintf_r+0x130>
 800a4fa:	7863      	ldrb	r3, [r4, #1]
 800a4fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a4fe:	d135      	bne.n	800a56c <_svfiprintf_r+0x188>
 800a500:	9b03      	ldr	r3, [sp, #12]
 800a502:	1d1a      	adds	r2, r3, #4
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	9203      	str	r2, [sp, #12]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	bfb8      	it	lt
 800a50c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a510:	3402      	adds	r4, #2
 800a512:	9305      	str	r3, [sp, #20]
 800a514:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5e0 <_svfiprintf_r+0x1fc>
 800a518:	7821      	ldrb	r1, [r4, #0]
 800a51a:	2203      	movs	r2, #3
 800a51c:	4650      	mov	r0, sl
 800a51e:	f7f5 fe7f 	bl	8000220 <memchr>
 800a522:	b140      	cbz	r0, 800a536 <_svfiprintf_r+0x152>
 800a524:	2340      	movs	r3, #64	; 0x40
 800a526:	eba0 000a 	sub.w	r0, r0, sl
 800a52a:	fa03 f000 	lsl.w	r0, r3, r0
 800a52e:	9b04      	ldr	r3, [sp, #16]
 800a530:	4303      	orrs	r3, r0
 800a532:	3401      	adds	r4, #1
 800a534:	9304      	str	r3, [sp, #16]
 800a536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a53a:	4826      	ldr	r0, [pc, #152]	; (800a5d4 <_svfiprintf_r+0x1f0>)
 800a53c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a540:	2206      	movs	r2, #6
 800a542:	f7f5 fe6d 	bl	8000220 <memchr>
 800a546:	2800      	cmp	r0, #0
 800a548:	d038      	beq.n	800a5bc <_svfiprintf_r+0x1d8>
 800a54a:	4b23      	ldr	r3, [pc, #140]	; (800a5d8 <_svfiprintf_r+0x1f4>)
 800a54c:	bb1b      	cbnz	r3, 800a596 <_svfiprintf_r+0x1b2>
 800a54e:	9b03      	ldr	r3, [sp, #12]
 800a550:	3307      	adds	r3, #7
 800a552:	f023 0307 	bic.w	r3, r3, #7
 800a556:	3308      	adds	r3, #8
 800a558:	9303      	str	r3, [sp, #12]
 800a55a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a55c:	4433      	add	r3, r6
 800a55e:	9309      	str	r3, [sp, #36]	; 0x24
 800a560:	e767      	b.n	800a432 <_svfiprintf_r+0x4e>
 800a562:	fb0c 3202 	mla	r2, ip, r2, r3
 800a566:	460c      	mov	r4, r1
 800a568:	2001      	movs	r0, #1
 800a56a:	e7a5      	b.n	800a4b8 <_svfiprintf_r+0xd4>
 800a56c:	2300      	movs	r3, #0
 800a56e:	3401      	adds	r4, #1
 800a570:	9305      	str	r3, [sp, #20]
 800a572:	4619      	mov	r1, r3
 800a574:	f04f 0c0a 	mov.w	ip, #10
 800a578:	4620      	mov	r0, r4
 800a57a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a57e:	3a30      	subs	r2, #48	; 0x30
 800a580:	2a09      	cmp	r2, #9
 800a582:	d903      	bls.n	800a58c <_svfiprintf_r+0x1a8>
 800a584:	2b00      	cmp	r3, #0
 800a586:	d0c5      	beq.n	800a514 <_svfiprintf_r+0x130>
 800a588:	9105      	str	r1, [sp, #20]
 800a58a:	e7c3      	b.n	800a514 <_svfiprintf_r+0x130>
 800a58c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a590:	4604      	mov	r4, r0
 800a592:	2301      	movs	r3, #1
 800a594:	e7f0      	b.n	800a578 <_svfiprintf_r+0x194>
 800a596:	ab03      	add	r3, sp, #12
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	462a      	mov	r2, r5
 800a59c:	4b0f      	ldr	r3, [pc, #60]	; (800a5dc <_svfiprintf_r+0x1f8>)
 800a59e:	a904      	add	r1, sp, #16
 800a5a0:	4638      	mov	r0, r7
 800a5a2:	f7fe f88d 	bl	80086c0 <_printf_float>
 800a5a6:	1c42      	adds	r2, r0, #1
 800a5a8:	4606      	mov	r6, r0
 800a5aa:	d1d6      	bne.n	800a55a <_svfiprintf_r+0x176>
 800a5ac:	89ab      	ldrh	r3, [r5, #12]
 800a5ae:	065b      	lsls	r3, r3, #25
 800a5b0:	f53f af2c 	bmi.w	800a40c <_svfiprintf_r+0x28>
 800a5b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5b6:	b01d      	add	sp, #116	; 0x74
 800a5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5bc:	ab03      	add	r3, sp, #12
 800a5be:	9300      	str	r3, [sp, #0]
 800a5c0:	462a      	mov	r2, r5
 800a5c2:	4b06      	ldr	r3, [pc, #24]	; (800a5dc <_svfiprintf_r+0x1f8>)
 800a5c4:	a904      	add	r1, sp, #16
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	f7fe fb1e 	bl	8008c08 <_printf_i>
 800a5cc:	e7eb      	b.n	800a5a6 <_svfiprintf_r+0x1c2>
 800a5ce:	bf00      	nop
 800a5d0:	0800b9fc 	.word	0x0800b9fc
 800a5d4:	0800ba06 	.word	0x0800ba06
 800a5d8:	080086c1 	.word	0x080086c1
 800a5dc:	0800a32f 	.word	0x0800a32f
 800a5e0:	0800ba02 	.word	0x0800ba02

0800a5e4 <__assert_func>:
 800a5e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5e6:	4614      	mov	r4, r2
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	4b09      	ldr	r3, [pc, #36]	; (800a610 <__assert_func+0x2c>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4605      	mov	r5, r0
 800a5f0:	68d8      	ldr	r0, [r3, #12]
 800a5f2:	b14c      	cbz	r4, 800a608 <__assert_func+0x24>
 800a5f4:	4b07      	ldr	r3, [pc, #28]	; (800a614 <__assert_func+0x30>)
 800a5f6:	9100      	str	r1, [sp, #0]
 800a5f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a5fc:	4906      	ldr	r1, [pc, #24]	; (800a618 <__assert_func+0x34>)
 800a5fe:	462b      	mov	r3, r5
 800a600:	f000 f80e 	bl	800a620 <fiprintf>
 800a604:	f000 fa7c 	bl	800ab00 <abort>
 800a608:	4b04      	ldr	r3, [pc, #16]	; (800a61c <__assert_func+0x38>)
 800a60a:	461c      	mov	r4, r3
 800a60c:	e7f3      	b.n	800a5f6 <__assert_func+0x12>
 800a60e:	bf00      	nop
 800a610:	200005e4 	.word	0x200005e4
 800a614:	0800ba0d 	.word	0x0800ba0d
 800a618:	0800ba1a 	.word	0x0800ba1a
 800a61c:	0800ba48 	.word	0x0800ba48

0800a620 <fiprintf>:
 800a620:	b40e      	push	{r1, r2, r3}
 800a622:	b503      	push	{r0, r1, lr}
 800a624:	4601      	mov	r1, r0
 800a626:	ab03      	add	r3, sp, #12
 800a628:	4805      	ldr	r0, [pc, #20]	; (800a640 <fiprintf+0x20>)
 800a62a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a62e:	6800      	ldr	r0, [r0, #0]
 800a630:	9301      	str	r3, [sp, #4]
 800a632:	f000 f867 	bl	800a704 <_vfiprintf_r>
 800a636:	b002      	add	sp, #8
 800a638:	f85d eb04 	ldr.w	lr, [sp], #4
 800a63c:	b003      	add	sp, #12
 800a63e:	4770      	bx	lr
 800a640:	200005e4 	.word	0x200005e4

0800a644 <__retarget_lock_init_recursive>:
 800a644:	4770      	bx	lr

0800a646 <__retarget_lock_acquire_recursive>:
 800a646:	4770      	bx	lr

0800a648 <__retarget_lock_release_recursive>:
 800a648:	4770      	bx	lr

0800a64a <__ascii_mbtowc>:
 800a64a:	b082      	sub	sp, #8
 800a64c:	b901      	cbnz	r1, 800a650 <__ascii_mbtowc+0x6>
 800a64e:	a901      	add	r1, sp, #4
 800a650:	b142      	cbz	r2, 800a664 <__ascii_mbtowc+0x1a>
 800a652:	b14b      	cbz	r3, 800a668 <__ascii_mbtowc+0x1e>
 800a654:	7813      	ldrb	r3, [r2, #0]
 800a656:	600b      	str	r3, [r1, #0]
 800a658:	7812      	ldrb	r2, [r2, #0]
 800a65a:	1e10      	subs	r0, r2, #0
 800a65c:	bf18      	it	ne
 800a65e:	2001      	movne	r0, #1
 800a660:	b002      	add	sp, #8
 800a662:	4770      	bx	lr
 800a664:	4610      	mov	r0, r2
 800a666:	e7fb      	b.n	800a660 <__ascii_mbtowc+0x16>
 800a668:	f06f 0001 	mvn.w	r0, #1
 800a66c:	e7f8      	b.n	800a660 <__ascii_mbtowc+0x16>

0800a66e <memmove>:
 800a66e:	4288      	cmp	r0, r1
 800a670:	b510      	push	{r4, lr}
 800a672:	eb01 0402 	add.w	r4, r1, r2
 800a676:	d902      	bls.n	800a67e <memmove+0x10>
 800a678:	4284      	cmp	r4, r0
 800a67a:	4623      	mov	r3, r4
 800a67c:	d807      	bhi.n	800a68e <memmove+0x20>
 800a67e:	1e43      	subs	r3, r0, #1
 800a680:	42a1      	cmp	r1, r4
 800a682:	d008      	beq.n	800a696 <memmove+0x28>
 800a684:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a688:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a68c:	e7f8      	b.n	800a680 <memmove+0x12>
 800a68e:	4402      	add	r2, r0
 800a690:	4601      	mov	r1, r0
 800a692:	428a      	cmp	r2, r1
 800a694:	d100      	bne.n	800a698 <memmove+0x2a>
 800a696:	bd10      	pop	{r4, pc}
 800a698:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a69c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6a0:	e7f7      	b.n	800a692 <memmove+0x24>

0800a6a2 <_malloc_usable_size_r>:
 800a6a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6a6:	1f18      	subs	r0, r3, #4
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	bfbc      	itt	lt
 800a6ac:	580b      	ldrlt	r3, [r1, r0]
 800a6ae:	18c0      	addlt	r0, r0, r3
 800a6b0:	4770      	bx	lr

0800a6b2 <__sfputc_r>:
 800a6b2:	6893      	ldr	r3, [r2, #8]
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	b410      	push	{r4}
 800a6ba:	6093      	str	r3, [r2, #8]
 800a6bc:	da08      	bge.n	800a6d0 <__sfputc_r+0x1e>
 800a6be:	6994      	ldr	r4, [r2, #24]
 800a6c0:	42a3      	cmp	r3, r4
 800a6c2:	db01      	blt.n	800a6c8 <__sfputc_r+0x16>
 800a6c4:	290a      	cmp	r1, #10
 800a6c6:	d103      	bne.n	800a6d0 <__sfputc_r+0x1e>
 800a6c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6cc:	f000 b94a 	b.w	800a964 <__swbuf_r>
 800a6d0:	6813      	ldr	r3, [r2, #0]
 800a6d2:	1c58      	adds	r0, r3, #1
 800a6d4:	6010      	str	r0, [r2, #0]
 800a6d6:	7019      	strb	r1, [r3, #0]
 800a6d8:	4608      	mov	r0, r1
 800a6da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <__sfputs_r>:
 800a6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e2:	4606      	mov	r6, r0
 800a6e4:	460f      	mov	r7, r1
 800a6e6:	4614      	mov	r4, r2
 800a6e8:	18d5      	adds	r5, r2, r3
 800a6ea:	42ac      	cmp	r4, r5
 800a6ec:	d101      	bne.n	800a6f2 <__sfputs_r+0x12>
 800a6ee:	2000      	movs	r0, #0
 800a6f0:	e007      	b.n	800a702 <__sfputs_r+0x22>
 800a6f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6f6:	463a      	mov	r2, r7
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	f7ff ffda 	bl	800a6b2 <__sfputc_r>
 800a6fe:	1c43      	adds	r3, r0, #1
 800a700:	d1f3      	bne.n	800a6ea <__sfputs_r+0xa>
 800a702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a704 <_vfiprintf_r>:
 800a704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a708:	460d      	mov	r5, r1
 800a70a:	b09d      	sub	sp, #116	; 0x74
 800a70c:	4614      	mov	r4, r2
 800a70e:	4698      	mov	r8, r3
 800a710:	4606      	mov	r6, r0
 800a712:	b118      	cbz	r0, 800a71c <_vfiprintf_r+0x18>
 800a714:	6983      	ldr	r3, [r0, #24]
 800a716:	b90b      	cbnz	r3, 800a71c <_vfiprintf_r+0x18>
 800a718:	f000 fb14 	bl	800ad44 <__sinit>
 800a71c:	4b89      	ldr	r3, [pc, #548]	; (800a944 <_vfiprintf_r+0x240>)
 800a71e:	429d      	cmp	r5, r3
 800a720:	d11b      	bne.n	800a75a <_vfiprintf_r+0x56>
 800a722:	6875      	ldr	r5, [r6, #4]
 800a724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a726:	07d9      	lsls	r1, r3, #31
 800a728:	d405      	bmi.n	800a736 <_vfiprintf_r+0x32>
 800a72a:	89ab      	ldrh	r3, [r5, #12]
 800a72c:	059a      	lsls	r2, r3, #22
 800a72e:	d402      	bmi.n	800a736 <_vfiprintf_r+0x32>
 800a730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a732:	f7ff ff88 	bl	800a646 <__retarget_lock_acquire_recursive>
 800a736:	89ab      	ldrh	r3, [r5, #12]
 800a738:	071b      	lsls	r3, r3, #28
 800a73a:	d501      	bpl.n	800a740 <_vfiprintf_r+0x3c>
 800a73c:	692b      	ldr	r3, [r5, #16]
 800a73e:	b9eb      	cbnz	r3, 800a77c <_vfiprintf_r+0x78>
 800a740:	4629      	mov	r1, r5
 800a742:	4630      	mov	r0, r6
 800a744:	f000 f96e 	bl	800aa24 <__swsetup_r>
 800a748:	b1c0      	cbz	r0, 800a77c <_vfiprintf_r+0x78>
 800a74a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a74c:	07dc      	lsls	r4, r3, #31
 800a74e:	d50e      	bpl.n	800a76e <_vfiprintf_r+0x6a>
 800a750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a754:	b01d      	add	sp, #116	; 0x74
 800a756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a75a:	4b7b      	ldr	r3, [pc, #492]	; (800a948 <_vfiprintf_r+0x244>)
 800a75c:	429d      	cmp	r5, r3
 800a75e:	d101      	bne.n	800a764 <_vfiprintf_r+0x60>
 800a760:	68b5      	ldr	r5, [r6, #8]
 800a762:	e7df      	b.n	800a724 <_vfiprintf_r+0x20>
 800a764:	4b79      	ldr	r3, [pc, #484]	; (800a94c <_vfiprintf_r+0x248>)
 800a766:	429d      	cmp	r5, r3
 800a768:	bf08      	it	eq
 800a76a:	68f5      	ldreq	r5, [r6, #12]
 800a76c:	e7da      	b.n	800a724 <_vfiprintf_r+0x20>
 800a76e:	89ab      	ldrh	r3, [r5, #12]
 800a770:	0598      	lsls	r0, r3, #22
 800a772:	d4ed      	bmi.n	800a750 <_vfiprintf_r+0x4c>
 800a774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a776:	f7ff ff67 	bl	800a648 <__retarget_lock_release_recursive>
 800a77a:	e7e9      	b.n	800a750 <_vfiprintf_r+0x4c>
 800a77c:	2300      	movs	r3, #0
 800a77e:	9309      	str	r3, [sp, #36]	; 0x24
 800a780:	2320      	movs	r3, #32
 800a782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a786:	f8cd 800c 	str.w	r8, [sp, #12]
 800a78a:	2330      	movs	r3, #48	; 0x30
 800a78c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a950 <_vfiprintf_r+0x24c>
 800a790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a794:	f04f 0901 	mov.w	r9, #1
 800a798:	4623      	mov	r3, r4
 800a79a:	469a      	mov	sl, r3
 800a79c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7a0:	b10a      	cbz	r2, 800a7a6 <_vfiprintf_r+0xa2>
 800a7a2:	2a25      	cmp	r2, #37	; 0x25
 800a7a4:	d1f9      	bne.n	800a79a <_vfiprintf_r+0x96>
 800a7a6:	ebba 0b04 	subs.w	fp, sl, r4
 800a7aa:	d00b      	beq.n	800a7c4 <_vfiprintf_r+0xc0>
 800a7ac:	465b      	mov	r3, fp
 800a7ae:	4622      	mov	r2, r4
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f7ff ff94 	bl	800a6e0 <__sfputs_r>
 800a7b8:	3001      	adds	r0, #1
 800a7ba:	f000 80aa 	beq.w	800a912 <_vfiprintf_r+0x20e>
 800a7be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7c0:	445a      	add	r2, fp
 800a7c2:	9209      	str	r2, [sp, #36]	; 0x24
 800a7c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f000 80a2 	beq.w	800a912 <_vfiprintf_r+0x20e>
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7d8:	f10a 0a01 	add.w	sl, sl, #1
 800a7dc:	9304      	str	r3, [sp, #16]
 800a7de:	9307      	str	r3, [sp, #28]
 800a7e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7e4:	931a      	str	r3, [sp, #104]	; 0x68
 800a7e6:	4654      	mov	r4, sl
 800a7e8:	2205      	movs	r2, #5
 800a7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ee:	4858      	ldr	r0, [pc, #352]	; (800a950 <_vfiprintf_r+0x24c>)
 800a7f0:	f7f5 fd16 	bl	8000220 <memchr>
 800a7f4:	9a04      	ldr	r2, [sp, #16]
 800a7f6:	b9d8      	cbnz	r0, 800a830 <_vfiprintf_r+0x12c>
 800a7f8:	06d1      	lsls	r1, r2, #27
 800a7fa:	bf44      	itt	mi
 800a7fc:	2320      	movmi	r3, #32
 800a7fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a802:	0713      	lsls	r3, r2, #28
 800a804:	bf44      	itt	mi
 800a806:	232b      	movmi	r3, #43	; 0x2b
 800a808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a80c:	f89a 3000 	ldrb.w	r3, [sl]
 800a810:	2b2a      	cmp	r3, #42	; 0x2a
 800a812:	d015      	beq.n	800a840 <_vfiprintf_r+0x13c>
 800a814:	9a07      	ldr	r2, [sp, #28]
 800a816:	4654      	mov	r4, sl
 800a818:	2000      	movs	r0, #0
 800a81a:	f04f 0c0a 	mov.w	ip, #10
 800a81e:	4621      	mov	r1, r4
 800a820:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a824:	3b30      	subs	r3, #48	; 0x30
 800a826:	2b09      	cmp	r3, #9
 800a828:	d94e      	bls.n	800a8c8 <_vfiprintf_r+0x1c4>
 800a82a:	b1b0      	cbz	r0, 800a85a <_vfiprintf_r+0x156>
 800a82c:	9207      	str	r2, [sp, #28]
 800a82e:	e014      	b.n	800a85a <_vfiprintf_r+0x156>
 800a830:	eba0 0308 	sub.w	r3, r0, r8
 800a834:	fa09 f303 	lsl.w	r3, r9, r3
 800a838:	4313      	orrs	r3, r2
 800a83a:	9304      	str	r3, [sp, #16]
 800a83c:	46a2      	mov	sl, r4
 800a83e:	e7d2      	b.n	800a7e6 <_vfiprintf_r+0xe2>
 800a840:	9b03      	ldr	r3, [sp, #12]
 800a842:	1d19      	adds	r1, r3, #4
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	9103      	str	r1, [sp, #12]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	bfbb      	ittet	lt
 800a84c:	425b      	neglt	r3, r3
 800a84e:	f042 0202 	orrlt.w	r2, r2, #2
 800a852:	9307      	strge	r3, [sp, #28]
 800a854:	9307      	strlt	r3, [sp, #28]
 800a856:	bfb8      	it	lt
 800a858:	9204      	strlt	r2, [sp, #16]
 800a85a:	7823      	ldrb	r3, [r4, #0]
 800a85c:	2b2e      	cmp	r3, #46	; 0x2e
 800a85e:	d10c      	bne.n	800a87a <_vfiprintf_r+0x176>
 800a860:	7863      	ldrb	r3, [r4, #1]
 800a862:	2b2a      	cmp	r3, #42	; 0x2a
 800a864:	d135      	bne.n	800a8d2 <_vfiprintf_r+0x1ce>
 800a866:	9b03      	ldr	r3, [sp, #12]
 800a868:	1d1a      	adds	r2, r3, #4
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	9203      	str	r2, [sp, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	bfb8      	it	lt
 800a872:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a876:	3402      	adds	r4, #2
 800a878:	9305      	str	r3, [sp, #20]
 800a87a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a960 <_vfiprintf_r+0x25c>
 800a87e:	7821      	ldrb	r1, [r4, #0]
 800a880:	2203      	movs	r2, #3
 800a882:	4650      	mov	r0, sl
 800a884:	f7f5 fccc 	bl	8000220 <memchr>
 800a888:	b140      	cbz	r0, 800a89c <_vfiprintf_r+0x198>
 800a88a:	2340      	movs	r3, #64	; 0x40
 800a88c:	eba0 000a 	sub.w	r0, r0, sl
 800a890:	fa03 f000 	lsl.w	r0, r3, r0
 800a894:	9b04      	ldr	r3, [sp, #16]
 800a896:	4303      	orrs	r3, r0
 800a898:	3401      	adds	r4, #1
 800a89a:	9304      	str	r3, [sp, #16]
 800a89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8a0:	482c      	ldr	r0, [pc, #176]	; (800a954 <_vfiprintf_r+0x250>)
 800a8a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8a6:	2206      	movs	r2, #6
 800a8a8:	f7f5 fcba 	bl	8000220 <memchr>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	d03f      	beq.n	800a930 <_vfiprintf_r+0x22c>
 800a8b0:	4b29      	ldr	r3, [pc, #164]	; (800a958 <_vfiprintf_r+0x254>)
 800a8b2:	bb1b      	cbnz	r3, 800a8fc <_vfiprintf_r+0x1f8>
 800a8b4:	9b03      	ldr	r3, [sp, #12]
 800a8b6:	3307      	adds	r3, #7
 800a8b8:	f023 0307 	bic.w	r3, r3, #7
 800a8bc:	3308      	adds	r3, #8
 800a8be:	9303      	str	r3, [sp, #12]
 800a8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8c2:	443b      	add	r3, r7
 800a8c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8c6:	e767      	b.n	800a798 <_vfiprintf_r+0x94>
 800a8c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	2001      	movs	r0, #1
 800a8d0:	e7a5      	b.n	800a81e <_vfiprintf_r+0x11a>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	3401      	adds	r4, #1
 800a8d6:	9305      	str	r3, [sp, #20]
 800a8d8:	4619      	mov	r1, r3
 800a8da:	f04f 0c0a 	mov.w	ip, #10
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8e4:	3a30      	subs	r2, #48	; 0x30
 800a8e6:	2a09      	cmp	r2, #9
 800a8e8:	d903      	bls.n	800a8f2 <_vfiprintf_r+0x1ee>
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d0c5      	beq.n	800a87a <_vfiprintf_r+0x176>
 800a8ee:	9105      	str	r1, [sp, #20]
 800a8f0:	e7c3      	b.n	800a87a <_vfiprintf_r+0x176>
 800a8f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e7f0      	b.n	800a8de <_vfiprintf_r+0x1da>
 800a8fc:	ab03      	add	r3, sp, #12
 800a8fe:	9300      	str	r3, [sp, #0]
 800a900:	462a      	mov	r2, r5
 800a902:	4b16      	ldr	r3, [pc, #88]	; (800a95c <_vfiprintf_r+0x258>)
 800a904:	a904      	add	r1, sp, #16
 800a906:	4630      	mov	r0, r6
 800a908:	f7fd feda 	bl	80086c0 <_printf_float>
 800a90c:	4607      	mov	r7, r0
 800a90e:	1c78      	adds	r0, r7, #1
 800a910:	d1d6      	bne.n	800a8c0 <_vfiprintf_r+0x1bc>
 800a912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a914:	07d9      	lsls	r1, r3, #31
 800a916:	d405      	bmi.n	800a924 <_vfiprintf_r+0x220>
 800a918:	89ab      	ldrh	r3, [r5, #12]
 800a91a:	059a      	lsls	r2, r3, #22
 800a91c:	d402      	bmi.n	800a924 <_vfiprintf_r+0x220>
 800a91e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a920:	f7ff fe92 	bl	800a648 <__retarget_lock_release_recursive>
 800a924:	89ab      	ldrh	r3, [r5, #12]
 800a926:	065b      	lsls	r3, r3, #25
 800a928:	f53f af12 	bmi.w	800a750 <_vfiprintf_r+0x4c>
 800a92c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a92e:	e711      	b.n	800a754 <_vfiprintf_r+0x50>
 800a930:	ab03      	add	r3, sp, #12
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	462a      	mov	r2, r5
 800a936:	4b09      	ldr	r3, [pc, #36]	; (800a95c <_vfiprintf_r+0x258>)
 800a938:	a904      	add	r1, sp, #16
 800a93a:	4630      	mov	r0, r6
 800a93c:	f7fe f964 	bl	8008c08 <_printf_i>
 800a940:	e7e4      	b.n	800a90c <_vfiprintf_r+0x208>
 800a942:	bf00      	nop
 800a944:	0800bb74 	.word	0x0800bb74
 800a948:	0800bb94 	.word	0x0800bb94
 800a94c:	0800bb54 	.word	0x0800bb54
 800a950:	0800b9fc 	.word	0x0800b9fc
 800a954:	0800ba06 	.word	0x0800ba06
 800a958:	080086c1 	.word	0x080086c1
 800a95c:	0800a6e1 	.word	0x0800a6e1
 800a960:	0800ba02 	.word	0x0800ba02

0800a964 <__swbuf_r>:
 800a964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a966:	460e      	mov	r6, r1
 800a968:	4614      	mov	r4, r2
 800a96a:	4605      	mov	r5, r0
 800a96c:	b118      	cbz	r0, 800a976 <__swbuf_r+0x12>
 800a96e:	6983      	ldr	r3, [r0, #24]
 800a970:	b90b      	cbnz	r3, 800a976 <__swbuf_r+0x12>
 800a972:	f000 f9e7 	bl	800ad44 <__sinit>
 800a976:	4b21      	ldr	r3, [pc, #132]	; (800a9fc <__swbuf_r+0x98>)
 800a978:	429c      	cmp	r4, r3
 800a97a:	d12b      	bne.n	800a9d4 <__swbuf_r+0x70>
 800a97c:	686c      	ldr	r4, [r5, #4]
 800a97e:	69a3      	ldr	r3, [r4, #24]
 800a980:	60a3      	str	r3, [r4, #8]
 800a982:	89a3      	ldrh	r3, [r4, #12]
 800a984:	071a      	lsls	r2, r3, #28
 800a986:	d52f      	bpl.n	800a9e8 <__swbuf_r+0x84>
 800a988:	6923      	ldr	r3, [r4, #16]
 800a98a:	b36b      	cbz	r3, 800a9e8 <__swbuf_r+0x84>
 800a98c:	6923      	ldr	r3, [r4, #16]
 800a98e:	6820      	ldr	r0, [r4, #0]
 800a990:	1ac0      	subs	r0, r0, r3
 800a992:	6963      	ldr	r3, [r4, #20]
 800a994:	b2f6      	uxtb	r6, r6
 800a996:	4283      	cmp	r3, r0
 800a998:	4637      	mov	r7, r6
 800a99a:	dc04      	bgt.n	800a9a6 <__swbuf_r+0x42>
 800a99c:	4621      	mov	r1, r4
 800a99e:	4628      	mov	r0, r5
 800a9a0:	f000 f93c 	bl	800ac1c <_fflush_r>
 800a9a4:	bb30      	cbnz	r0, 800a9f4 <__swbuf_r+0x90>
 800a9a6:	68a3      	ldr	r3, [r4, #8]
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	60a3      	str	r3, [r4, #8]
 800a9ac:	6823      	ldr	r3, [r4, #0]
 800a9ae:	1c5a      	adds	r2, r3, #1
 800a9b0:	6022      	str	r2, [r4, #0]
 800a9b2:	701e      	strb	r6, [r3, #0]
 800a9b4:	6963      	ldr	r3, [r4, #20]
 800a9b6:	3001      	adds	r0, #1
 800a9b8:	4283      	cmp	r3, r0
 800a9ba:	d004      	beq.n	800a9c6 <__swbuf_r+0x62>
 800a9bc:	89a3      	ldrh	r3, [r4, #12]
 800a9be:	07db      	lsls	r3, r3, #31
 800a9c0:	d506      	bpl.n	800a9d0 <__swbuf_r+0x6c>
 800a9c2:	2e0a      	cmp	r6, #10
 800a9c4:	d104      	bne.n	800a9d0 <__swbuf_r+0x6c>
 800a9c6:	4621      	mov	r1, r4
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	f000 f927 	bl	800ac1c <_fflush_r>
 800a9ce:	b988      	cbnz	r0, 800a9f4 <__swbuf_r+0x90>
 800a9d0:	4638      	mov	r0, r7
 800a9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9d4:	4b0a      	ldr	r3, [pc, #40]	; (800aa00 <__swbuf_r+0x9c>)
 800a9d6:	429c      	cmp	r4, r3
 800a9d8:	d101      	bne.n	800a9de <__swbuf_r+0x7a>
 800a9da:	68ac      	ldr	r4, [r5, #8]
 800a9dc:	e7cf      	b.n	800a97e <__swbuf_r+0x1a>
 800a9de:	4b09      	ldr	r3, [pc, #36]	; (800aa04 <__swbuf_r+0xa0>)
 800a9e0:	429c      	cmp	r4, r3
 800a9e2:	bf08      	it	eq
 800a9e4:	68ec      	ldreq	r4, [r5, #12]
 800a9e6:	e7ca      	b.n	800a97e <__swbuf_r+0x1a>
 800a9e8:	4621      	mov	r1, r4
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	f000 f81a 	bl	800aa24 <__swsetup_r>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	d0cb      	beq.n	800a98c <__swbuf_r+0x28>
 800a9f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a9f8:	e7ea      	b.n	800a9d0 <__swbuf_r+0x6c>
 800a9fa:	bf00      	nop
 800a9fc:	0800bb74 	.word	0x0800bb74
 800aa00:	0800bb94 	.word	0x0800bb94
 800aa04:	0800bb54 	.word	0x0800bb54

0800aa08 <__ascii_wctomb>:
 800aa08:	b149      	cbz	r1, 800aa1e <__ascii_wctomb+0x16>
 800aa0a:	2aff      	cmp	r2, #255	; 0xff
 800aa0c:	bf85      	ittet	hi
 800aa0e:	238a      	movhi	r3, #138	; 0x8a
 800aa10:	6003      	strhi	r3, [r0, #0]
 800aa12:	700a      	strbls	r2, [r1, #0]
 800aa14:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800aa18:	bf98      	it	ls
 800aa1a:	2001      	movls	r0, #1
 800aa1c:	4770      	bx	lr
 800aa1e:	4608      	mov	r0, r1
 800aa20:	4770      	bx	lr
	...

0800aa24 <__swsetup_r>:
 800aa24:	4b32      	ldr	r3, [pc, #200]	; (800aaf0 <__swsetup_r+0xcc>)
 800aa26:	b570      	push	{r4, r5, r6, lr}
 800aa28:	681d      	ldr	r5, [r3, #0]
 800aa2a:	4606      	mov	r6, r0
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	b125      	cbz	r5, 800aa3a <__swsetup_r+0x16>
 800aa30:	69ab      	ldr	r3, [r5, #24]
 800aa32:	b913      	cbnz	r3, 800aa3a <__swsetup_r+0x16>
 800aa34:	4628      	mov	r0, r5
 800aa36:	f000 f985 	bl	800ad44 <__sinit>
 800aa3a:	4b2e      	ldr	r3, [pc, #184]	; (800aaf4 <__swsetup_r+0xd0>)
 800aa3c:	429c      	cmp	r4, r3
 800aa3e:	d10f      	bne.n	800aa60 <__swsetup_r+0x3c>
 800aa40:	686c      	ldr	r4, [r5, #4]
 800aa42:	89a3      	ldrh	r3, [r4, #12]
 800aa44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa48:	0719      	lsls	r1, r3, #28
 800aa4a:	d42c      	bmi.n	800aaa6 <__swsetup_r+0x82>
 800aa4c:	06dd      	lsls	r5, r3, #27
 800aa4e:	d411      	bmi.n	800aa74 <__swsetup_r+0x50>
 800aa50:	2309      	movs	r3, #9
 800aa52:	6033      	str	r3, [r6, #0]
 800aa54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa58:	81a3      	strh	r3, [r4, #12]
 800aa5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa5e:	e03e      	b.n	800aade <__swsetup_r+0xba>
 800aa60:	4b25      	ldr	r3, [pc, #148]	; (800aaf8 <__swsetup_r+0xd4>)
 800aa62:	429c      	cmp	r4, r3
 800aa64:	d101      	bne.n	800aa6a <__swsetup_r+0x46>
 800aa66:	68ac      	ldr	r4, [r5, #8]
 800aa68:	e7eb      	b.n	800aa42 <__swsetup_r+0x1e>
 800aa6a:	4b24      	ldr	r3, [pc, #144]	; (800aafc <__swsetup_r+0xd8>)
 800aa6c:	429c      	cmp	r4, r3
 800aa6e:	bf08      	it	eq
 800aa70:	68ec      	ldreq	r4, [r5, #12]
 800aa72:	e7e6      	b.n	800aa42 <__swsetup_r+0x1e>
 800aa74:	0758      	lsls	r0, r3, #29
 800aa76:	d512      	bpl.n	800aa9e <__swsetup_r+0x7a>
 800aa78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa7a:	b141      	cbz	r1, 800aa8e <__swsetup_r+0x6a>
 800aa7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa80:	4299      	cmp	r1, r3
 800aa82:	d002      	beq.n	800aa8a <__swsetup_r+0x66>
 800aa84:	4630      	mov	r0, r6
 800aa86:	f7fd fcd1 	bl	800842c <_free_r>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	6363      	str	r3, [r4, #52]	; 0x34
 800aa8e:	89a3      	ldrh	r3, [r4, #12]
 800aa90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa94:	81a3      	strh	r3, [r4, #12]
 800aa96:	2300      	movs	r3, #0
 800aa98:	6063      	str	r3, [r4, #4]
 800aa9a:	6923      	ldr	r3, [r4, #16]
 800aa9c:	6023      	str	r3, [r4, #0]
 800aa9e:	89a3      	ldrh	r3, [r4, #12]
 800aaa0:	f043 0308 	orr.w	r3, r3, #8
 800aaa4:	81a3      	strh	r3, [r4, #12]
 800aaa6:	6923      	ldr	r3, [r4, #16]
 800aaa8:	b94b      	cbnz	r3, 800aabe <__swsetup_r+0x9a>
 800aaaa:	89a3      	ldrh	r3, [r4, #12]
 800aaac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aab4:	d003      	beq.n	800aabe <__swsetup_r+0x9a>
 800aab6:	4621      	mov	r1, r4
 800aab8:	4630      	mov	r0, r6
 800aaba:	f000 fa05 	bl	800aec8 <__smakebuf_r>
 800aabe:	89a0      	ldrh	r0, [r4, #12]
 800aac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aac4:	f010 0301 	ands.w	r3, r0, #1
 800aac8:	d00a      	beq.n	800aae0 <__swsetup_r+0xbc>
 800aaca:	2300      	movs	r3, #0
 800aacc:	60a3      	str	r3, [r4, #8]
 800aace:	6963      	ldr	r3, [r4, #20]
 800aad0:	425b      	negs	r3, r3
 800aad2:	61a3      	str	r3, [r4, #24]
 800aad4:	6923      	ldr	r3, [r4, #16]
 800aad6:	b943      	cbnz	r3, 800aaea <__swsetup_r+0xc6>
 800aad8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aadc:	d1ba      	bne.n	800aa54 <__swsetup_r+0x30>
 800aade:	bd70      	pop	{r4, r5, r6, pc}
 800aae0:	0781      	lsls	r1, r0, #30
 800aae2:	bf58      	it	pl
 800aae4:	6963      	ldrpl	r3, [r4, #20]
 800aae6:	60a3      	str	r3, [r4, #8]
 800aae8:	e7f4      	b.n	800aad4 <__swsetup_r+0xb0>
 800aaea:	2000      	movs	r0, #0
 800aaec:	e7f7      	b.n	800aade <__swsetup_r+0xba>
 800aaee:	bf00      	nop
 800aaf0:	200005e4 	.word	0x200005e4
 800aaf4:	0800bb74 	.word	0x0800bb74
 800aaf8:	0800bb94 	.word	0x0800bb94
 800aafc:	0800bb54 	.word	0x0800bb54

0800ab00 <abort>:
 800ab00:	b508      	push	{r3, lr}
 800ab02:	2006      	movs	r0, #6
 800ab04:	f000 fa48 	bl	800af98 <raise>
 800ab08:	2001      	movs	r0, #1
 800ab0a:	f000 fb4d 	bl	800b1a8 <_exit>
	...

0800ab10 <__sflush_r>:
 800ab10:	898a      	ldrh	r2, [r1, #12]
 800ab12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab16:	4605      	mov	r5, r0
 800ab18:	0710      	lsls	r0, r2, #28
 800ab1a:	460c      	mov	r4, r1
 800ab1c:	d458      	bmi.n	800abd0 <__sflush_r+0xc0>
 800ab1e:	684b      	ldr	r3, [r1, #4]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	dc05      	bgt.n	800ab30 <__sflush_r+0x20>
 800ab24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	dc02      	bgt.n	800ab30 <__sflush_r+0x20>
 800ab2a:	2000      	movs	r0, #0
 800ab2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab32:	2e00      	cmp	r6, #0
 800ab34:	d0f9      	beq.n	800ab2a <__sflush_r+0x1a>
 800ab36:	2300      	movs	r3, #0
 800ab38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab3c:	682f      	ldr	r7, [r5, #0]
 800ab3e:	602b      	str	r3, [r5, #0]
 800ab40:	d032      	beq.n	800aba8 <__sflush_r+0x98>
 800ab42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab44:	89a3      	ldrh	r3, [r4, #12]
 800ab46:	075a      	lsls	r2, r3, #29
 800ab48:	d505      	bpl.n	800ab56 <__sflush_r+0x46>
 800ab4a:	6863      	ldr	r3, [r4, #4]
 800ab4c:	1ac0      	subs	r0, r0, r3
 800ab4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab50:	b10b      	cbz	r3, 800ab56 <__sflush_r+0x46>
 800ab52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab54:	1ac0      	subs	r0, r0, r3
 800ab56:	2300      	movs	r3, #0
 800ab58:	4602      	mov	r2, r0
 800ab5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab5c:	6a21      	ldr	r1, [r4, #32]
 800ab5e:	4628      	mov	r0, r5
 800ab60:	47b0      	blx	r6
 800ab62:	1c43      	adds	r3, r0, #1
 800ab64:	89a3      	ldrh	r3, [r4, #12]
 800ab66:	d106      	bne.n	800ab76 <__sflush_r+0x66>
 800ab68:	6829      	ldr	r1, [r5, #0]
 800ab6a:	291d      	cmp	r1, #29
 800ab6c:	d82c      	bhi.n	800abc8 <__sflush_r+0xb8>
 800ab6e:	4a2a      	ldr	r2, [pc, #168]	; (800ac18 <__sflush_r+0x108>)
 800ab70:	40ca      	lsrs	r2, r1
 800ab72:	07d6      	lsls	r6, r2, #31
 800ab74:	d528      	bpl.n	800abc8 <__sflush_r+0xb8>
 800ab76:	2200      	movs	r2, #0
 800ab78:	6062      	str	r2, [r4, #4]
 800ab7a:	04d9      	lsls	r1, r3, #19
 800ab7c:	6922      	ldr	r2, [r4, #16]
 800ab7e:	6022      	str	r2, [r4, #0]
 800ab80:	d504      	bpl.n	800ab8c <__sflush_r+0x7c>
 800ab82:	1c42      	adds	r2, r0, #1
 800ab84:	d101      	bne.n	800ab8a <__sflush_r+0x7a>
 800ab86:	682b      	ldr	r3, [r5, #0]
 800ab88:	b903      	cbnz	r3, 800ab8c <__sflush_r+0x7c>
 800ab8a:	6560      	str	r0, [r4, #84]	; 0x54
 800ab8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab8e:	602f      	str	r7, [r5, #0]
 800ab90:	2900      	cmp	r1, #0
 800ab92:	d0ca      	beq.n	800ab2a <__sflush_r+0x1a>
 800ab94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab98:	4299      	cmp	r1, r3
 800ab9a:	d002      	beq.n	800aba2 <__sflush_r+0x92>
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	f7fd fc45 	bl	800842c <_free_r>
 800aba2:	2000      	movs	r0, #0
 800aba4:	6360      	str	r0, [r4, #52]	; 0x34
 800aba6:	e7c1      	b.n	800ab2c <__sflush_r+0x1c>
 800aba8:	6a21      	ldr	r1, [r4, #32]
 800abaa:	2301      	movs	r3, #1
 800abac:	4628      	mov	r0, r5
 800abae:	47b0      	blx	r6
 800abb0:	1c41      	adds	r1, r0, #1
 800abb2:	d1c7      	bne.n	800ab44 <__sflush_r+0x34>
 800abb4:	682b      	ldr	r3, [r5, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d0c4      	beq.n	800ab44 <__sflush_r+0x34>
 800abba:	2b1d      	cmp	r3, #29
 800abbc:	d001      	beq.n	800abc2 <__sflush_r+0xb2>
 800abbe:	2b16      	cmp	r3, #22
 800abc0:	d101      	bne.n	800abc6 <__sflush_r+0xb6>
 800abc2:	602f      	str	r7, [r5, #0]
 800abc4:	e7b1      	b.n	800ab2a <__sflush_r+0x1a>
 800abc6:	89a3      	ldrh	r3, [r4, #12]
 800abc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abcc:	81a3      	strh	r3, [r4, #12]
 800abce:	e7ad      	b.n	800ab2c <__sflush_r+0x1c>
 800abd0:	690f      	ldr	r7, [r1, #16]
 800abd2:	2f00      	cmp	r7, #0
 800abd4:	d0a9      	beq.n	800ab2a <__sflush_r+0x1a>
 800abd6:	0793      	lsls	r3, r2, #30
 800abd8:	680e      	ldr	r6, [r1, #0]
 800abda:	bf08      	it	eq
 800abdc:	694b      	ldreq	r3, [r1, #20]
 800abde:	600f      	str	r7, [r1, #0]
 800abe0:	bf18      	it	ne
 800abe2:	2300      	movne	r3, #0
 800abe4:	eba6 0807 	sub.w	r8, r6, r7
 800abe8:	608b      	str	r3, [r1, #8]
 800abea:	f1b8 0f00 	cmp.w	r8, #0
 800abee:	dd9c      	ble.n	800ab2a <__sflush_r+0x1a>
 800abf0:	6a21      	ldr	r1, [r4, #32]
 800abf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800abf4:	4643      	mov	r3, r8
 800abf6:	463a      	mov	r2, r7
 800abf8:	4628      	mov	r0, r5
 800abfa:	47b0      	blx	r6
 800abfc:	2800      	cmp	r0, #0
 800abfe:	dc06      	bgt.n	800ac0e <__sflush_r+0xfe>
 800ac00:	89a3      	ldrh	r3, [r4, #12]
 800ac02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac06:	81a3      	strh	r3, [r4, #12]
 800ac08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac0c:	e78e      	b.n	800ab2c <__sflush_r+0x1c>
 800ac0e:	4407      	add	r7, r0
 800ac10:	eba8 0800 	sub.w	r8, r8, r0
 800ac14:	e7e9      	b.n	800abea <__sflush_r+0xda>
 800ac16:	bf00      	nop
 800ac18:	20400001 	.word	0x20400001

0800ac1c <_fflush_r>:
 800ac1c:	b538      	push	{r3, r4, r5, lr}
 800ac1e:	690b      	ldr	r3, [r1, #16]
 800ac20:	4605      	mov	r5, r0
 800ac22:	460c      	mov	r4, r1
 800ac24:	b913      	cbnz	r3, 800ac2c <_fflush_r+0x10>
 800ac26:	2500      	movs	r5, #0
 800ac28:	4628      	mov	r0, r5
 800ac2a:	bd38      	pop	{r3, r4, r5, pc}
 800ac2c:	b118      	cbz	r0, 800ac36 <_fflush_r+0x1a>
 800ac2e:	6983      	ldr	r3, [r0, #24]
 800ac30:	b90b      	cbnz	r3, 800ac36 <_fflush_r+0x1a>
 800ac32:	f000 f887 	bl	800ad44 <__sinit>
 800ac36:	4b14      	ldr	r3, [pc, #80]	; (800ac88 <_fflush_r+0x6c>)
 800ac38:	429c      	cmp	r4, r3
 800ac3a:	d11b      	bne.n	800ac74 <_fflush_r+0x58>
 800ac3c:	686c      	ldr	r4, [r5, #4]
 800ac3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d0ef      	beq.n	800ac26 <_fflush_r+0xa>
 800ac46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac48:	07d0      	lsls	r0, r2, #31
 800ac4a:	d404      	bmi.n	800ac56 <_fflush_r+0x3a>
 800ac4c:	0599      	lsls	r1, r3, #22
 800ac4e:	d402      	bmi.n	800ac56 <_fflush_r+0x3a>
 800ac50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac52:	f7ff fcf8 	bl	800a646 <__retarget_lock_acquire_recursive>
 800ac56:	4628      	mov	r0, r5
 800ac58:	4621      	mov	r1, r4
 800ac5a:	f7ff ff59 	bl	800ab10 <__sflush_r>
 800ac5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac60:	07da      	lsls	r2, r3, #31
 800ac62:	4605      	mov	r5, r0
 800ac64:	d4e0      	bmi.n	800ac28 <_fflush_r+0xc>
 800ac66:	89a3      	ldrh	r3, [r4, #12]
 800ac68:	059b      	lsls	r3, r3, #22
 800ac6a:	d4dd      	bmi.n	800ac28 <_fflush_r+0xc>
 800ac6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac6e:	f7ff fceb 	bl	800a648 <__retarget_lock_release_recursive>
 800ac72:	e7d9      	b.n	800ac28 <_fflush_r+0xc>
 800ac74:	4b05      	ldr	r3, [pc, #20]	; (800ac8c <_fflush_r+0x70>)
 800ac76:	429c      	cmp	r4, r3
 800ac78:	d101      	bne.n	800ac7e <_fflush_r+0x62>
 800ac7a:	68ac      	ldr	r4, [r5, #8]
 800ac7c:	e7df      	b.n	800ac3e <_fflush_r+0x22>
 800ac7e:	4b04      	ldr	r3, [pc, #16]	; (800ac90 <_fflush_r+0x74>)
 800ac80:	429c      	cmp	r4, r3
 800ac82:	bf08      	it	eq
 800ac84:	68ec      	ldreq	r4, [r5, #12]
 800ac86:	e7da      	b.n	800ac3e <_fflush_r+0x22>
 800ac88:	0800bb74 	.word	0x0800bb74
 800ac8c:	0800bb94 	.word	0x0800bb94
 800ac90:	0800bb54 	.word	0x0800bb54

0800ac94 <std>:
 800ac94:	2300      	movs	r3, #0
 800ac96:	b510      	push	{r4, lr}
 800ac98:	4604      	mov	r4, r0
 800ac9a:	e9c0 3300 	strd	r3, r3, [r0]
 800ac9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aca2:	6083      	str	r3, [r0, #8]
 800aca4:	8181      	strh	r1, [r0, #12]
 800aca6:	6643      	str	r3, [r0, #100]	; 0x64
 800aca8:	81c2      	strh	r2, [r0, #14]
 800acaa:	6183      	str	r3, [r0, #24]
 800acac:	4619      	mov	r1, r3
 800acae:	2208      	movs	r2, #8
 800acb0:	305c      	adds	r0, #92	; 0x5c
 800acb2:	f7fd fbb3 	bl	800841c <memset>
 800acb6:	4b05      	ldr	r3, [pc, #20]	; (800accc <std+0x38>)
 800acb8:	6263      	str	r3, [r4, #36]	; 0x24
 800acba:	4b05      	ldr	r3, [pc, #20]	; (800acd0 <std+0x3c>)
 800acbc:	62a3      	str	r3, [r4, #40]	; 0x28
 800acbe:	4b05      	ldr	r3, [pc, #20]	; (800acd4 <std+0x40>)
 800acc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acc2:	4b05      	ldr	r3, [pc, #20]	; (800acd8 <std+0x44>)
 800acc4:	6224      	str	r4, [r4, #32]
 800acc6:	6323      	str	r3, [r4, #48]	; 0x30
 800acc8:	bd10      	pop	{r4, pc}
 800acca:	bf00      	nop
 800accc:	0800afd1 	.word	0x0800afd1
 800acd0:	0800aff3 	.word	0x0800aff3
 800acd4:	0800b02b 	.word	0x0800b02b
 800acd8:	0800b04f 	.word	0x0800b04f

0800acdc <_cleanup_r>:
 800acdc:	4901      	ldr	r1, [pc, #4]	; (800ace4 <_cleanup_r+0x8>)
 800acde:	f000 b8af 	b.w	800ae40 <_fwalk_reent>
 800ace2:	bf00      	nop
 800ace4:	0800ac1d 	.word	0x0800ac1d

0800ace8 <__sfmoreglue>:
 800ace8:	b570      	push	{r4, r5, r6, lr}
 800acea:	1e4a      	subs	r2, r1, #1
 800acec:	2568      	movs	r5, #104	; 0x68
 800acee:	4355      	muls	r5, r2
 800acf0:	460e      	mov	r6, r1
 800acf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800acf6:	f7fd fbe9 	bl	80084cc <_malloc_r>
 800acfa:	4604      	mov	r4, r0
 800acfc:	b140      	cbz	r0, 800ad10 <__sfmoreglue+0x28>
 800acfe:	2100      	movs	r1, #0
 800ad00:	e9c0 1600 	strd	r1, r6, [r0]
 800ad04:	300c      	adds	r0, #12
 800ad06:	60a0      	str	r0, [r4, #8]
 800ad08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad0c:	f7fd fb86 	bl	800841c <memset>
 800ad10:	4620      	mov	r0, r4
 800ad12:	bd70      	pop	{r4, r5, r6, pc}

0800ad14 <__sfp_lock_acquire>:
 800ad14:	4801      	ldr	r0, [pc, #4]	; (800ad1c <__sfp_lock_acquire+0x8>)
 800ad16:	f7ff bc96 	b.w	800a646 <__retarget_lock_acquire_recursive>
 800ad1a:	bf00      	nop
 800ad1c:	20001384 	.word	0x20001384

0800ad20 <__sfp_lock_release>:
 800ad20:	4801      	ldr	r0, [pc, #4]	; (800ad28 <__sfp_lock_release+0x8>)
 800ad22:	f7ff bc91 	b.w	800a648 <__retarget_lock_release_recursive>
 800ad26:	bf00      	nop
 800ad28:	20001384 	.word	0x20001384

0800ad2c <__sinit_lock_acquire>:
 800ad2c:	4801      	ldr	r0, [pc, #4]	; (800ad34 <__sinit_lock_acquire+0x8>)
 800ad2e:	f7ff bc8a 	b.w	800a646 <__retarget_lock_acquire_recursive>
 800ad32:	bf00      	nop
 800ad34:	2000137f 	.word	0x2000137f

0800ad38 <__sinit_lock_release>:
 800ad38:	4801      	ldr	r0, [pc, #4]	; (800ad40 <__sinit_lock_release+0x8>)
 800ad3a:	f7ff bc85 	b.w	800a648 <__retarget_lock_release_recursive>
 800ad3e:	bf00      	nop
 800ad40:	2000137f 	.word	0x2000137f

0800ad44 <__sinit>:
 800ad44:	b510      	push	{r4, lr}
 800ad46:	4604      	mov	r4, r0
 800ad48:	f7ff fff0 	bl	800ad2c <__sinit_lock_acquire>
 800ad4c:	69a3      	ldr	r3, [r4, #24]
 800ad4e:	b11b      	cbz	r3, 800ad58 <__sinit+0x14>
 800ad50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad54:	f7ff bff0 	b.w	800ad38 <__sinit_lock_release>
 800ad58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad5c:	6523      	str	r3, [r4, #80]	; 0x50
 800ad5e:	4b13      	ldr	r3, [pc, #76]	; (800adac <__sinit+0x68>)
 800ad60:	4a13      	ldr	r2, [pc, #76]	; (800adb0 <__sinit+0x6c>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad66:	42a3      	cmp	r3, r4
 800ad68:	bf04      	itt	eq
 800ad6a:	2301      	moveq	r3, #1
 800ad6c:	61a3      	streq	r3, [r4, #24]
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 f820 	bl	800adb4 <__sfp>
 800ad74:	6060      	str	r0, [r4, #4]
 800ad76:	4620      	mov	r0, r4
 800ad78:	f000 f81c 	bl	800adb4 <__sfp>
 800ad7c:	60a0      	str	r0, [r4, #8]
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f000 f818 	bl	800adb4 <__sfp>
 800ad84:	2200      	movs	r2, #0
 800ad86:	60e0      	str	r0, [r4, #12]
 800ad88:	2104      	movs	r1, #4
 800ad8a:	6860      	ldr	r0, [r4, #4]
 800ad8c:	f7ff ff82 	bl	800ac94 <std>
 800ad90:	68a0      	ldr	r0, [r4, #8]
 800ad92:	2201      	movs	r2, #1
 800ad94:	2109      	movs	r1, #9
 800ad96:	f7ff ff7d 	bl	800ac94 <std>
 800ad9a:	68e0      	ldr	r0, [r4, #12]
 800ad9c:	2202      	movs	r2, #2
 800ad9e:	2112      	movs	r1, #18
 800ada0:	f7ff ff78 	bl	800ac94 <std>
 800ada4:	2301      	movs	r3, #1
 800ada6:	61a3      	str	r3, [r4, #24]
 800ada8:	e7d2      	b.n	800ad50 <__sinit+0xc>
 800adaa:	bf00      	nop
 800adac:	0800b7d4 	.word	0x0800b7d4
 800adb0:	0800acdd 	.word	0x0800acdd

0800adb4 <__sfp>:
 800adb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb6:	4607      	mov	r7, r0
 800adb8:	f7ff ffac 	bl	800ad14 <__sfp_lock_acquire>
 800adbc:	4b1e      	ldr	r3, [pc, #120]	; (800ae38 <__sfp+0x84>)
 800adbe:	681e      	ldr	r6, [r3, #0]
 800adc0:	69b3      	ldr	r3, [r6, #24]
 800adc2:	b913      	cbnz	r3, 800adca <__sfp+0x16>
 800adc4:	4630      	mov	r0, r6
 800adc6:	f7ff ffbd 	bl	800ad44 <__sinit>
 800adca:	3648      	adds	r6, #72	; 0x48
 800adcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800add0:	3b01      	subs	r3, #1
 800add2:	d503      	bpl.n	800addc <__sfp+0x28>
 800add4:	6833      	ldr	r3, [r6, #0]
 800add6:	b30b      	cbz	r3, 800ae1c <__sfp+0x68>
 800add8:	6836      	ldr	r6, [r6, #0]
 800adda:	e7f7      	b.n	800adcc <__sfp+0x18>
 800addc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ade0:	b9d5      	cbnz	r5, 800ae18 <__sfp+0x64>
 800ade2:	4b16      	ldr	r3, [pc, #88]	; (800ae3c <__sfp+0x88>)
 800ade4:	60e3      	str	r3, [r4, #12]
 800ade6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800adea:	6665      	str	r5, [r4, #100]	; 0x64
 800adec:	f7ff fc2a 	bl	800a644 <__retarget_lock_init_recursive>
 800adf0:	f7ff ff96 	bl	800ad20 <__sfp_lock_release>
 800adf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800adf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800adfc:	6025      	str	r5, [r4, #0]
 800adfe:	61a5      	str	r5, [r4, #24]
 800ae00:	2208      	movs	r2, #8
 800ae02:	4629      	mov	r1, r5
 800ae04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae08:	f7fd fb08 	bl	800841c <memset>
 800ae0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae14:	4620      	mov	r0, r4
 800ae16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae18:	3468      	adds	r4, #104	; 0x68
 800ae1a:	e7d9      	b.n	800add0 <__sfp+0x1c>
 800ae1c:	2104      	movs	r1, #4
 800ae1e:	4638      	mov	r0, r7
 800ae20:	f7ff ff62 	bl	800ace8 <__sfmoreglue>
 800ae24:	4604      	mov	r4, r0
 800ae26:	6030      	str	r0, [r6, #0]
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d1d5      	bne.n	800add8 <__sfp+0x24>
 800ae2c:	f7ff ff78 	bl	800ad20 <__sfp_lock_release>
 800ae30:	230c      	movs	r3, #12
 800ae32:	603b      	str	r3, [r7, #0]
 800ae34:	e7ee      	b.n	800ae14 <__sfp+0x60>
 800ae36:	bf00      	nop
 800ae38:	0800b7d4 	.word	0x0800b7d4
 800ae3c:	ffff0001 	.word	0xffff0001

0800ae40 <_fwalk_reent>:
 800ae40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae44:	4606      	mov	r6, r0
 800ae46:	4688      	mov	r8, r1
 800ae48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae4c:	2700      	movs	r7, #0
 800ae4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae52:	f1b9 0901 	subs.w	r9, r9, #1
 800ae56:	d505      	bpl.n	800ae64 <_fwalk_reent+0x24>
 800ae58:	6824      	ldr	r4, [r4, #0]
 800ae5a:	2c00      	cmp	r4, #0
 800ae5c:	d1f7      	bne.n	800ae4e <_fwalk_reent+0xe>
 800ae5e:	4638      	mov	r0, r7
 800ae60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae64:	89ab      	ldrh	r3, [r5, #12]
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d907      	bls.n	800ae7a <_fwalk_reent+0x3a>
 800ae6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	d003      	beq.n	800ae7a <_fwalk_reent+0x3a>
 800ae72:	4629      	mov	r1, r5
 800ae74:	4630      	mov	r0, r6
 800ae76:	47c0      	blx	r8
 800ae78:	4307      	orrs	r7, r0
 800ae7a:	3568      	adds	r5, #104	; 0x68
 800ae7c:	e7e9      	b.n	800ae52 <_fwalk_reent+0x12>

0800ae7e <__swhatbuf_r>:
 800ae7e:	b570      	push	{r4, r5, r6, lr}
 800ae80:	460e      	mov	r6, r1
 800ae82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae86:	2900      	cmp	r1, #0
 800ae88:	b096      	sub	sp, #88	; 0x58
 800ae8a:	4614      	mov	r4, r2
 800ae8c:	461d      	mov	r5, r3
 800ae8e:	da07      	bge.n	800aea0 <__swhatbuf_r+0x22>
 800ae90:	2300      	movs	r3, #0
 800ae92:	602b      	str	r3, [r5, #0]
 800ae94:	89b3      	ldrh	r3, [r6, #12]
 800ae96:	061a      	lsls	r2, r3, #24
 800ae98:	d410      	bmi.n	800aebc <__swhatbuf_r+0x3e>
 800ae9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae9e:	e00e      	b.n	800aebe <__swhatbuf_r+0x40>
 800aea0:	466a      	mov	r2, sp
 800aea2:	f000 f8fb 	bl	800b09c <_fstat_r>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	dbf2      	blt.n	800ae90 <__swhatbuf_r+0x12>
 800aeaa:	9a01      	ldr	r2, [sp, #4]
 800aeac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aeb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aeb4:	425a      	negs	r2, r3
 800aeb6:	415a      	adcs	r2, r3
 800aeb8:	602a      	str	r2, [r5, #0]
 800aeba:	e7ee      	b.n	800ae9a <__swhatbuf_r+0x1c>
 800aebc:	2340      	movs	r3, #64	; 0x40
 800aebe:	2000      	movs	r0, #0
 800aec0:	6023      	str	r3, [r4, #0]
 800aec2:	b016      	add	sp, #88	; 0x58
 800aec4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aec8 <__smakebuf_r>:
 800aec8:	898b      	ldrh	r3, [r1, #12]
 800aeca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aecc:	079d      	lsls	r5, r3, #30
 800aece:	4606      	mov	r6, r0
 800aed0:	460c      	mov	r4, r1
 800aed2:	d507      	bpl.n	800aee4 <__smakebuf_r+0x1c>
 800aed4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aed8:	6023      	str	r3, [r4, #0]
 800aeda:	6123      	str	r3, [r4, #16]
 800aedc:	2301      	movs	r3, #1
 800aede:	6163      	str	r3, [r4, #20]
 800aee0:	b002      	add	sp, #8
 800aee2:	bd70      	pop	{r4, r5, r6, pc}
 800aee4:	ab01      	add	r3, sp, #4
 800aee6:	466a      	mov	r2, sp
 800aee8:	f7ff ffc9 	bl	800ae7e <__swhatbuf_r>
 800aeec:	9900      	ldr	r1, [sp, #0]
 800aeee:	4605      	mov	r5, r0
 800aef0:	4630      	mov	r0, r6
 800aef2:	f7fd faeb 	bl	80084cc <_malloc_r>
 800aef6:	b948      	cbnz	r0, 800af0c <__smakebuf_r+0x44>
 800aef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aefc:	059a      	lsls	r2, r3, #22
 800aefe:	d4ef      	bmi.n	800aee0 <__smakebuf_r+0x18>
 800af00:	f023 0303 	bic.w	r3, r3, #3
 800af04:	f043 0302 	orr.w	r3, r3, #2
 800af08:	81a3      	strh	r3, [r4, #12]
 800af0a:	e7e3      	b.n	800aed4 <__smakebuf_r+0xc>
 800af0c:	4b0d      	ldr	r3, [pc, #52]	; (800af44 <__smakebuf_r+0x7c>)
 800af0e:	62b3      	str	r3, [r6, #40]	; 0x28
 800af10:	89a3      	ldrh	r3, [r4, #12]
 800af12:	6020      	str	r0, [r4, #0]
 800af14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af18:	81a3      	strh	r3, [r4, #12]
 800af1a:	9b00      	ldr	r3, [sp, #0]
 800af1c:	6163      	str	r3, [r4, #20]
 800af1e:	9b01      	ldr	r3, [sp, #4]
 800af20:	6120      	str	r0, [r4, #16]
 800af22:	b15b      	cbz	r3, 800af3c <__smakebuf_r+0x74>
 800af24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af28:	4630      	mov	r0, r6
 800af2a:	f000 f8c9 	bl	800b0c0 <_isatty_r>
 800af2e:	b128      	cbz	r0, 800af3c <__smakebuf_r+0x74>
 800af30:	89a3      	ldrh	r3, [r4, #12]
 800af32:	f023 0303 	bic.w	r3, r3, #3
 800af36:	f043 0301 	orr.w	r3, r3, #1
 800af3a:	81a3      	strh	r3, [r4, #12]
 800af3c:	89a0      	ldrh	r0, [r4, #12]
 800af3e:	4305      	orrs	r5, r0
 800af40:	81a5      	strh	r5, [r4, #12]
 800af42:	e7cd      	b.n	800aee0 <__smakebuf_r+0x18>
 800af44:	0800acdd 	.word	0x0800acdd

0800af48 <_raise_r>:
 800af48:	291f      	cmp	r1, #31
 800af4a:	b538      	push	{r3, r4, r5, lr}
 800af4c:	4604      	mov	r4, r0
 800af4e:	460d      	mov	r5, r1
 800af50:	d904      	bls.n	800af5c <_raise_r+0x14>
 800af52:	2316      	movs	r3, #22
 800af54:	6003      	str	r3, [r0, #0]
 800af56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af5a:	bd38      	pop	{r3, r4, r5, pc}
 800af5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af5e:	b112      	cbz	r2, 800af66 <_raise_r+0x1e>
 800af60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af64:	b94b      	cbnz	r3, 800af7a <_raise_r+0x32>
 800af66:	4620      	mov	r0, r4
 800af68:	f000 f830 	bl	800afcc <_getpid_r>
 800af6c:	462a      	mov	r2, r5
 800af6e:	4601      	mov	r1, r0
 800af70:	4620      	mov	r0, r4
 800af72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af76:	f000 b817 	b.w	800afa8 <_kill_r>
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d00a      	beq.n	800af94 <_raise_r+0x4c>
 800af7e:	1c59      	adds	r1, r3, #1
 800af80:	d103      	bne.n	800af8a <_raise_r+0x42>
 800af82:	2316      	movs	r3, #22
 800af84:	6003      	str	r3, [r0, #0]
 800af86:	2001      	movs	r0, #1
 800af88:	e7e7      	b.n	800af5a <_raise_r+0x12>
 800af8a:	2400      	movs	r4, #0
 800af8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af90:	4628      	mov	r0, r5
 800af92:	4798      	blx	r3
 800af94:	2000      	movs	r0, #0
 800af96:	e7e0      	b.n	800af5a <_raise_r+0x12>

0800af98 <raise>:
 800af98:	4b02      	ldr	r3, [pc, #8]	; (800afa4 <raise+0xc>)
 800af9a:	4601      	mov	r1, r0
 800af9c:	6818      	ldr	r0, [r3, #0]
 800af9e:	f7ff bfd3 	b.w	800af48 <_raise_r>
 800afa2:	bf00      	nop
 800afa4:	200005e4 	.word	0x200005e4

0800afa8 <_kill_r>:
 800afa8:	b538      	push	{r3, r4, r5, lr}
 800afaa:	4d07      	ldr	r5, [pc, #28]	; (800afc8 <_kill_r+0x20>)
 800afac:	2300      	movs	r3, #0
 800afae:	4604      	mov	r4, r0
 800afb0:	4608      	mov	r0, r1
 800afb2:	4611      	mov	r1, r2
 800afb4:	602b      	str	r3, [r5, #0]
 800afb6:	f000 f8d7 	bl	800b168 <_kill>
 800afba:	1c43      	adds	r3, r0, #1
 800afbc:	d102      	bne.n	800afc4 <_kill_r+0x1c>
 800afbe:	682b      	ldr	r3, [r5, #0]
 800afc0:	b103      	cbz	r3, 800afc4 <_kill_r+0x1c>
 800afc2:	6023      	str	r3, [r4, #0]
 800afc4:	bd38      	pop	{r3, r4, r5, pc}
 800afc6:	bf00      	nop
 800afc8:	20001378 	.word	0x20001378

0800afcc <_getpid_r>:
 800afcc:	f000 b8bc 	b.w	800b148 <_getpid>

0800afd0 <__sread>:
 800afd0:	b510      	push	{r4, lr}
 800afd2:	460c      	mov	r4, r1
 800afd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afd8:	f000 f894 	bl	800b104 <_read_r>
 800afdc:	2800      	cmp	r0, #0
 800afde:	bfab      	itete	ge
 800afe0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800afe2:	89a3      	ldrhlt	r3, [r4, #12]
 800afe4:	181b      	addge	r3, r3, r0
 800afe6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800afea:	bfac      	ite	ge
 800afec:	6563      	strge	r3, [r4, #84]	; 0x54
 800afee:	81a3      	strhlt	r3, [r4, #12]
 800aff0:	bd10      	pop	{r4, pc}

0800aff2 <__swrite>:
 800aff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff6:	461f      	mov	r7, r3
 800aff8:	898b      	ldrh	r3, [r1, #12]
 800affa:	05db      	lsls	r3, r3, #23
 800affc:	4605      	mov	r5, r0
 800affe:	460c      	mov	r4, r1
 800b000:	4616      	mov	r6, r2
 800b002:	d505      	bpl.n	800b010 <__swrite+0x1e>
 800b004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b008:	2302      	movs	r3, #2
 800b00a:	2200      	movs	r2, #0
 800b00c:	f000 f868 	bl	800b0e0 <_lseek_r>
 800b010:	89a3      	ldrh	r3, [r4, #12]
 800b012:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b016:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b01a:	81a3      	strh	r3, [r4, #12]
 800b01c:	4632      	mov	r2, r6
 800b01e:	463b      	mov	r3, r7
 800b020:	4628      	mov	r0, r5
 800b022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b026:	f000 b817 	b.w	800b058 <_write_r>

0800b02a <__sseek>:
 800b02a:	b510      	push	{r4, lr}
 800b02c:	460c      	mov	r4, r1
 800b02e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b032:	f000 f855 	bl	800b0e0 <_lseek_r>
 800b036:	1c43      	adds	r3, r0, #1
 800b038:	89a3      	ldrh	r3, [r4, #12]
 800b03a:	bf15      	itete	ne
 800b03c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b03e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b042:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b046:	81a3      	strheq	r3, [r4, #12]
 800b048:	bf18      	it	ne
 800b04a:	81a3      	strhne	r3, [r4, #12]
 800b04c:	bd10      	pop	{r4, pc}

0800b04e <__sclose>:
 800b04e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b052:	f000 b813 	b.w	800b07c <_close_r>
	...

0800b058 <_write_r>:
 800b058:	b538      	push	{r3, r4, r5, lr}
 800b05a:	4d07      	ldr	r5, [pc, #28]	; (800b078 <_write_r+0x20>)
 800b05c:	4604      	mov	r4, r0
 800b05e:	4608      	mov	r0, r1
 800b060:	4611      	mov	r1, r2
 800b062:	2200      	movs	r2, #0
 800b064:	602a      	str	r2, [r5, #0]
 800b066:	461a      	mov	r2, r3
 800b068:	f000 f896 	bl	800b198 <_write>
 800b06c:	1c43      	adds	r3, r0, #1
 800b06e:	d102      	bne.n	800b076 <_write_r+0x1e>
 800b070:	682b      	ldr	r3, [r5, #0]
 800b072:	b103      	cbz	r3, 800b076 <_write_r+0x1e>
 800b074:	6023      	str	r3, [r4, #0]
 800b076:	bd38      	pop	{r3, r4, r5, pc}
 800b078:	20001378 	.word	0x20001378

0800b07c <_close_r>:
 800b07c:	b538      	push	{r3, r4, r5, lr}
 800b07e:	4d06      	ldr	r5, [pc, #24]	; (800b098 <_close_r+0x1c>)
 800b080:	2300      	movs	r3, #0
 800b082:	4604      	mov	r4, r0
 800b084:	4608      	mov	r0, r1
 800b086:	602b      	str	r3, [r5, #0]
 800b088:	f000 f84e 	bl	800b128 <_close>
 800b08c:	1c43      	adds	r3, r0, #1
 800b08e:	d102      	bne.n	800b096 <_close_r+0x1a>
 800b090:	682b      	ldr	r3, [r5, #0]
 800b092:	b103      	cbz	r3, 800b096 <_close_r+0x1a>
 800b094:	6023      	str	r3, [r4, #0]
 800b096:	bd38      	pop	{r3, r4, r5, pc}
 800b098:	20001378 	.word	0x20001378

0800b09c <_fstat_r>:
 800b09c:	b538      	push	{r3, r4, r5, lr}
 800b09e:	4d07      	ldr	r5, [pc, #28]	; (800b0bc <_fstat_r+0x20>)
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	4608      	mov	r0, r1
 800b0a6:	4611      	mov	r1, r2
 800b0a8:	602b      	str	r3, [r5, #0]
 800b0aa:	f000 f845 	bl	800b138 <_fstat>
 800b0ae:	1c43      	adds	r3, r0, #1
 800b0b0:	d102      	bne.n	800b0b8 <_fstat_r+0x1c>
 800b0b2:	682b      	ldr	r3, [r5, #0]
 800b0b4:	b103      	cbz	r3, 800b0b8 <_fstat_r+0x1c>
 800b0b6:	6023      	str	r3, [r4, #0]
 800b0b8:	bd38      	pop	{r3, r4, r5, pc}
 800b0ba:	bf00      	nop
 800b0bc:	20001378 	.word	0x20001378

0800b0c0 <_isatty_r>:
 800b0c0:	b538      	push	{r3, r4, r5, lr}
 800b0c2:	4d06      	ldr	r5, [pc, #24]	; (800b0dc <_isatty_r+0x1c>)
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	4608      	mov	r0, r1
 800b0ca:	602b      	str	r3, [r5, #0]
 800b0cc:	f000 f844 	bl	800b158 <_isatty>
 800b0d0:	1c43      	adds	r3, r0, #1
 800b0d2:	d102      	bne.n	800b0da <_isatty_r+0x1a>
 800b0d4:	682b      	ldr	r3, [r5, #0]
 800b0d6:	b103      	cbz	r3, 800b0da <_isatty_r+0x1a>
 800b0d8:	6023      	str	r3, [r4, #0]
 800b0da:	bd38      	pop	{r3, r4, r5, pc}
 800b0dc:	20001378 	.word	0x20001378

0800b0e0 <_lseek_r>:
 800b0e0:	b538      	push	{r3, r4, r5, lr}
 800b0e2:	4d07      	ldr	r5, [pc, #28]	; (800b100 <_lseek_r+0x20>)
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	4608      	mov	r0, r1
 800b0e8:	4611      	mov	r1, r2
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	602a      	str	r2, [r5, #0]
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	f000 f842 	bl	800b178 <_lseek>
 800b0f4:	1c43      	adds	r3, r0, #1
 800b0f6:	d102      	bne.n	800b0fe <_lseek_r+0x1e>
 800b0f8:	682b      	ldr	r3, [r5, #0]
 800b0fa:	b103      	cbz	r3, 800b0fe <_lseek_r+0x1e>
 800b0fc:	6023      	str	r3, [r4, #0]
 800b0fe:	bd38      	pop	{r3, r4, r5, pc}
 800b100:	20001378 	.word	0x20001378

0800b104 <_read_r>:
 800b104:	b538      	push	{r3, r4, r5, lr}
 800b106:	4d07      	ldr	r5, [pc, #28]	; (800b124 <_read_r+0x20>)
 800b108:	4604      	mov	r4, r0
 800b10a:	4608      	mov	r0, r1
 800b10c:	4611      	mov	r1, r2
 800b10e:	2200      	movs	r2, #0
 800b110:	602a      	str	r2, [r5, #0]
 800b112:	461a      	mov	r2, r3
 800b114:	f000 f838 	bl	800b188 <_read>
 800b118:	1c43      	adds	r3, r0, #1
 800b11a:	d102      	bne.n	800b122 <_read_r+0x1e>
 800b11c:	682b      	ldr	r3, [r5, #0]
 800b11e:	b103      	cbz	r3, 800b122 <_read_r+0x1e>
 800b120:	6023      	str	r3, [r4, #0]
 800b122:	bd38      	pop	{r3, r4, r5, pc}
 800b124:	20001378 	.word	0x20001378

0800b128 <_close>:
 800b128:	4b02      	ldr	r3, [pc, #8]	; (800b134 <_close+0xc>)
 800b12a:	2258      	movs	r2, #88	; 0x58
 800b12c:	601a      	str	r2, [r3, #0]
 800b12e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b132:	4770      	bx	lr
 800b134:	20001378 	.word	0x20001378

0800b138 <_fstat>:
 800b138:	4b02      	ldr	r3, [pc, #8]	; (800b144 <_fstat+0xc>)
 800b13a:	2258      	movs	r2, #88	; 0x58
 800b13c:	601a      	str	r2, [r3, #0]
 800b13e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b142:	4770      	bx	lr
 800b144:	20001378 	.word	0x20001378

0800b148 <_getpid>:
 800b148:	4b02      	ldr	r3, [pc, #8]	; (800b154 <_getpid+0xc>)
 800b14a:	2258      	movs	r2, #88	; 0x58
 800b14c:	601a      	str	r2, [r3, #0]
 800b14e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b152:	4770      	bx	lr
 800b154:	20001378 	.word	0x20001378

0800b158 <_isatty>:
 800b158:	4b02      	ldr	r3, [pc, #8]	; (800b164 <_isatty+0xc>)
 800b15a:	2258      	movs	r2, #88	; 0x58
 800b15c:	601a      	str	r2, [r3, #0]
 800b15e:	2000      	movs	r0, #0
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	20001378 	.word	0x20001378

0800b168 <_kill>:
 800b168:	4b02      	ldr	r3, [pc, #8]	; (800b174 <_kill+0xc>)
 800b16a:	2258      	movs	r2, #88	; 0x58
 800b16c:	601a      	str	r2, [r3, #0]
 800b16e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b172:	4770      	bx	lr
 800b174:	20001378 	.word	0x20001378

0800b178 <_lseek>:
 800b178:	4b02      	ldr	r3, [pc, #8]	; (800b184 <_lseek+0xc>)
 800b17a:	2258      	movs	r2, #88	; 0x58
 800b17c:	601a      	str	r2, [r3, #0]
 800b17e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b182:	4770      	bx	lr
 800b184:	20001378 	.word	0x20001378

0800b188 <_read>:
 800b188:	4b02      	ldr	r3, [pc, #8]	; (800b194 <_read+0xc>)
 800b18a:	2258      	movs	r2, #88	; 0x58
 800b18c:	601a      	str	r2, [r3, #0]
 800b18e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b192:	4770      	bx	lr
 800b194:	20001378 	.word	0x20001378

0800b198 <_write>:
 800b198:	4b02      	ldr	r3, [pc, #8]	; (800b1a4 <_write+0xc>)
 800b19a:	2258      	movs	r2, #88	; 0x58
 800b19c:	601a      	str	r2, [r3, #0]
 800b19e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1a2:	4770      	bx	lr
 800b1a4:	20001378 	.word	0x20001378

0800b1a8 <_exit>:
 800b1a8:	e7fe      	b.n	800b1a8 <_exit>
	...

0800b1ac <_init>:
 800b1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ae:	bf00      	nop
 800b1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1b2:	bc08      	pop	{r3}
 800b1b4:	469e      	mov	lr, r3
 800b1b6:	4770      	bx	lr

0800b1b8 <_fini>:
 800b1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ba:	bf00      	nop
 800b1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1be:	bc08      	pop	{r3}
 800b1c0:	469e      	mov	lr, r3
 800b1c2:	4770      	bx	lr
