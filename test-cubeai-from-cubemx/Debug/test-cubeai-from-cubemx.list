
test-cubeai-from-cubemx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013484  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002420  08013658  08013658  00023658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015a78  08015a78  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08015a78  08015a78  00025a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015a80  08015a80  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015a80  08015a80  00025a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015a84  08015a84  00025a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08015a88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00040d58  20000200  08015c88  00030200  2**3
                  ALLOC
 10 ._user_heap_stack 00001000  20040f58  08015c88  00030f58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b3e7  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000076cf  00000000  00000000  0006b617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b90  00000000  00000000  00072ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002860  00000000  00000000  00075878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035f58  00000000  00000000  000780d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000383cc  00000000  00000000  000ae030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012ba2e  00000000  00000000  000e63fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00211e2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cb1c  00000000  00000000  00211e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801363c 	.word	0x0801363c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	0801363c 	.word	0x0801363c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <audioLoop>:
 * This is the main audio loop (aka infinite while loop) which is responsible for real time audio processing tasks:
 * - transferring recorded audio from the DMA buffer to buf_input[]
 * - processing audio samples and writing them to buf_output[]
 * - transferring processed samples back to the DMA buffer
 */
void audioLoop() {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af02      	add	r7, sp, #8

	uiDisplayBasic();
 8000ee6:	f002 fe9d 	bl	8003c24 <uiDisplayBasic>

	/* Initialize SDRAM buffers */
	memset((int16_t*) AUDIO_SCRATCH_ADDR, 0, AUDIO_SCRATCH_SIZE * 2); // note that the size argument here always refers to bytes whatever the data type
 8000eea:	4a3d      	ldr	r2, [pc, #244]	; (8000fe0 <audioLoop+0x100>)
 8000eec:	2100      	movs	r1, #0
 8000eee:	483d      	ldr	r0, [pc, #244]	; (8000fe4 <audioLoop+0x104>)
 8000ef0:	f00f f99a 	bl	8010228 <memset>

	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000ef4:	4b3c      	ldr	r3, [pc, #240]	; (8000fe8 <audioLoop+0x108>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]

	// input device: INPUT_DEVICE_INPUT_LINE_1 or INPUT_DEVICE_DIGITAL_MICROPHONE_2 (not fully functional yet as you also need to change things in main.c:MX_SAI2_Init())
	// AudioFreq: AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_16K, etc (but also change accordingly hsai_BlockA2.Init.AudioFrequency in main.c, line 855)
	//start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, SAI_AUDIO_FREQUENCY_16K); // AUDIO_FREQUENCY_48K);
	start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, hsai_BlockA2.Init.AudioFrequency);
 8000efa:	4b3c      	ldr	r3, [pc, #240]	; (8000fec <audioLoop+0x10c>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f04:	22f0      	movs	r2, #240	; 0xf0
 8000f06:	493a      	ldr	r1, [pc, #232]	; (8000ff0 <audioLoop+0x110>)
 8000f08:	483a      	ldr	r0, [pc, #232]	; (8000ff4 <audioLoop+0x114>)
 8000f0a:	f003 fc79 	bl	8004800 <start_Audio_Processing>

	/* main audio loop */
	while (1) {

		accumulateInputLevels();
 8000f0e:	f000 f87d 	bl	800100c <accumulateInputLevels>
		count++;
 8000f12:	4b39      	ldr	r3, [pc, #228]	; (8000ff8 <audioLoop+0x118>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	4a37      	ldr	r2, [pc, #220]	; (8000ff8 <audioLoop+0x118>)
 8000f1a:	6013      	str	r3, [r2, #0]
		if (count >= 20) {
 8000f1c:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <audioLoop+0x118>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b13      	cmp	r3, #19
 8000f22:	dd3c      	ble.n	8000f9e <audioLoop+0xbe>
			count = 0;
 8000f24:	4b34      	ldr	r3, [pc, #208]	; (8000ff8 <audioLoop+0x118>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
			inputLevelL *= 0.05;
 8000f2a:	4b34      	ldr	r3, [pc, #208]	; (8000ffc <audioLoop+0x11c>)
 8000f2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f30:	a329      	add	r3, pc, #164	; (adr r3, 8000fd8 <audioLoop+0xf8>)
 8000f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f36:	f7ff fb7f 	bl	8000638 <__aeabi_dmul>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	492f      	ldr	r1, [pc, #188]	; (8000ffc <audioLoop+0x11c>)
 8000f40:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelR *= 0.05;
 8000f44:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <audioLoop+0x120>)
 8000f46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f4a:	a323      	add	r3, pc, #140	; (adr r3, 8000fd8 <audioLoop+0xf8>)
 8000f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f50:	f7ff fb72 	bl	8000638 <__aeabi_dmul>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4929      	ldr	r1, [pc, #164]	; (8001000 <audioLoop+0x120>)
 8000f5a:	e9c1 2300 	strd	r2, r3, [r1]

			uiDisplayInputLevel(inputLevelL, inputLevelR);
 8000f5e:	4b27      	ldr	r3, [pc, #156]	; (8000ffc <audioLoop+0x11c>)
 8000f60:	ed93 7b00 	vldr	d7, [r3]
 8000f64:	4b26      	ldr	r3, [pc, #152]	; (8001000 <audioLoop+0x120>)
 8000f66:	ed93 6b00 	vldr	d6, [r3]
 8000f6a:	eeb0 1a46 	vmov.f32	s2, s12
 8000f6e:	eef0 1a66 	vmov.f32	s3, s13
 8000f72:	eeb0 0a47 	vmov.f32	s0, s14
 8000f76:	eef0 0a67 	vmov.f32	s1, s15
 8000f7a:	f002 fe8d 	bl	8003c98 <uiDisplayInputLevel>

			inputLevelL = 0.;
 8000f7e:	491f      	ldr	r1, [pc, #124]	; (8000ffc <audioLoop+0x11c>)
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelR = 0.;
 8000f8c:	491c      	ldr	r1, [pc, #112]	; (8001000 <audioLoop+0x120>)
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	e9c1 2300 	strd	r2, r3, [r1]
		}

		/* Wait until first half block has been recorded */
		while (audio_rec_buffer_state != BUFFER_OFFSET_HALF) {
 8000f9a:	e000      	b.n	8000f9e <audioLoop+0xbe>
			asm("NOP");
 8000f9c:	bf00      	nop
		while (audio_rec_buffer_state != BUFFER_OFFSET_HALF) {
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <audioLoop+0x108>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d1fa      	bne.n	8000f9c <audioLoop+0xbc>
		}
		audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <audioLoop+0x108>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
		/* Copy recorded 1st half block */
		processAudio(buf_output, buf_input);
 8000fac:	4910      	ldr	r1, [pc, #64]	; (8000ff0 <audioLoop+0x110>)
 8000fae:	4811      	ldr	r0, [pc, #68]	; (8000ff4 <audioLoop+0x114>)
 8000fb0:	f000 f90a 	bl	80011c8 <processAudio>

		/* Wait until second half block has been recorded */
		while (audio_rec_buffer_state != BUFFER_OFFSET_FULL) {
 8000fb4:	e000      	b.n	8000fb8 <audioLoop+0xd8>
			asm("NOP");
 8000fb6:	bf00      	nop
		while (audio_rec_buffer_state != BUFFER_OFFSET_FULL) {
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <audioLoop+0x108>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d1fa      	bne.n	8000fb6 <audioLoop+0xd6>
		}
		audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <audioLoop+0x108>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
		/* Copy recorded 2nd half block */
		processAudio(buf_output_half, buf_input_half);
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <audioLoop+0x124>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a0f      	ldr	r2, [pc, #60]	; (8001008 <audioLoop+0x128>)
 8000fcc:	6812      	ldr	r2, [r2, #0]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f8f9 	bl	80011c8 <processAudio>
		accumulateInputLevels();
 8000fd6:	e79a      	b.n	8000f0e <audioLoop+0x2e>
 8000fd8:	9999999a 	.word	0x9999999a
 8000fdc:	3fa99999 	.word	0x3fa99999
 8000fe0:	0076a000 	.word	0x0076a000
 8000fe4:	c0096000 	.word	0xc0096000
 8000fe8:	200006ec 	.word	0x200006ec
 8000fec:	20000918 	.word	0x20000918
 8000ff0:	2000032c 	.word	0x2000032c
 8000ff4:	2000050c 	.word	0x2000050c
 8000ff8:	2000021c 	.word	0x2000021c
 8000ffc:	20000220 	.word	0x20000220
 8001000:	20000228 	.word	0x20000228
 8001004:	20000004 	.word	0x20000004
 8001008:	20000000 	.word	0x20000000

0800100c <accumulateInputLevels>:
 * Update input levels from the last audio frame (see global variable inputLevelL and inputLevelR).
 * Reminder: audio samples are actually interleaved L/R samples,
 * with left channel samples at even positions,
 * and right channel samples at odd positions.
 */
static void accumulateInputLevels() {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0

	// Left channel:
	uint32_t lvl = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	e016      	b.n	800104a <accumulateInputLevels+0x3e>
		int16_t v = (int16_t) buf_input[i];
 800101c:	4a3d      	ldr	r2, [pc, #244]	; (8001114 <accumulateInputLevels+0x108>)
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001024:	803b      	strh	r3, [r7, #0]
		if (v > 0)
 8001026:	f9b7 3000 	ldrsh.w	r3, [r7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	dd05      	ble.n	800103a <accumulateInputLevels+0x2e>
			lvl += v;
 800102e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	e004      	b.n	8001044 <accumulateInputLevels+0x38>
		else
			lvl -= v;
 800103a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	3302      	adds	r3, #2
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2bef      	cmp	r3, #239	; 0xef
 800104e:	d9e5      	bls.n	800101c <accumulateInputLevels+0x10>
	}
	inputLevelL += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f7ff fa77 	bl	8000544 <__aeabi_ui2d>
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	4b2f      	ldr	r3, [pc, #188]	; (8001118 <accumulateInputLevels+0x10c>)
 800105c:	f7ff fc16 	bl	800088c <__aeabi_ddiv>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	4b2b      	ldr	r3, [pc, #172]	; (800111c <accumulateInputLevels+0x110>)
 800106e:	f7ff fc0d 	bl	800088c <__aeabi_ddiv>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	4b29      	ldr	r3, [pc, #164]	; (8001120 <accumulateInputLevels+0x114>)
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	f7ff f924 	bl	80002cc <__adddf3>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4925      	ldr	r1, [pc, #148]	; (8001120 <accumulateInputLevels+0x114>)
 800108a:	e9c1 2300 	strd	r2, r3, [r1]

	// Right channel:
	lvl = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001092:	2301      	movs	r3, #1
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	e016      	b.n	80010c6 <accumulateInputLevels+0xba>
		int16_t v = (int16_t) buf_input[i];
 8001098:	4a1e      	ldr	r2, [pc, #120]	; (8001114 <accumulateInputLevels+0x108>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010a0:	807b      	strh	r3, [r7, #2]
		if (v > 0)
 80010a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	dd05      	ble.n	80010b6 <accumulateInputLevels+0xaa>
			lvl += v;
 80010aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	4413      	add	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	e004      	b.n	80010c0 <accumulateInputLevels+0xb4>
		else
			lvl -= v;
 80010b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3302      	adds	r3, #2
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2bef      	cmp	r3, #239	; 0xef
 80010ca:	d9e5      	bls.n	8001098 <accumulateInputLevels+0x8c>
	}
	inputLevelR += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f7ff fa39 	bl	8000544 <__aeabi_ui2d>
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <accumulateInputLevels+0x10c>)
 80010d8:	f7ff fbd8 	bl	800088c <__aeabi_ddiv>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <accumulateInputLevels+0x110>)
 80010ea:	f7ff fbcf 	bl	800088c <__aeabi_ddiv>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4610      	mov	r0, r2
 80010f4:	4619      	mov	r1, r3
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <accumulateInputLevels+0x118>)
 80010f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fc:	f7ff f8e6 	bl	80002cc <__adddf3>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4907      	ldr	r1, [pc, #28]	; (8001124 <accumulateInputLevels+0x118>)
 8001106:	e9c1 2300 	strd	r2, r3, [r1]
	;
}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000032c 	.word	0x2000032c
 8001118:	406e0000 	.word	0x406e0000
 800111c:	40e00000 	.word	0x40e00000
 8001120:	20000220 	.word	0x20000220
 8001124:	20000228 	.word	0x20000228

08001128 <HAL_SAI_RxCpltCallback>:
// --------------------------- Callbacks implementation ---------------------------

/**
 * Audio IN DMA Transfer complete interrupt.
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <HAL_SAI_RxCpltCallback+0x1c>)
 8001132:	2202      	movs	r2, #2
 8001134:	601a      	str	r2, [r3, #0]
	return;
 8001136:	bf00      	nop
}
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	200006ec 	.word	0x200006ec

08001148 <HAL_SAI_RxHalfCpltCallback>:

/**
 * Audio IN DMA Half Transfer complete interrupt.
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 8001152:	2201      	movs	r2, #1
 8001154:	601a      	str	r2, [r3, #0]
	return;
 8001156:	bf00      	nop
}
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	200006ec 	.word	0x200006ec

08001168 <no_effect>:
// --------------------------- AUDIO ALGORITHMS ---------------------------

/**
 * No effect function which simply reproduces the input on the output
 */
static void no_effect(int16_t *out, int16_t *in) {
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]

	float A = 1.0;
 8001172:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001176:	60bb      	str	r3, [r7, #8]

	for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	e01a      	b.n	80011b4 <no_effect+0x4c>
		out[n] = A * in[n];
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	4413      	add	r3, r2
 8001186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118a:	ee07 3a90 	vmov	s15, r3
 800118e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001192:	edd7 7a02 	vldr	s15, [r7, #8]
 8001196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a6:	ee17 2a90 	vmov	r2, s15
 80011aa:	b212      	sxth	r2, r2
 80011ac:	801a      	strh	r2, [r3, #0]
	for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	3301      	adds	r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b77      	cmp	r3, #119	; 0x77
 80011b8:	d9e1      	bls.n	800117e <no_effect+0x16>
	}

}
 80011ba:	bf00      	nop
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <processAudio>:
 * has been filled by the DMA, that is,  AUDIO_BUF_SIZE samples
 * have just been transferred from the CODEC
 * (keep in mind that this number represents interleaved L and R samples,
 * hence the true corresponding duration of this audio frame is AUDIO_BUF_SIZE/2 divided by the sampling frequency).
 */
static void processAudio(int16_t *out, int16_t *in) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]

	LED_On(); // for oscilloscope measurements...
 80011d2:	f002 fded 	bl	8003db0 <LED_On>

	no_effect(out, in); // If you want no effect on the audio output
 80011d6:	6839      	ldr	r1, [r7, #0]
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ffc5 	bl	8001168 <no_effect>
	// echo_effect(out, in); // If you want a echo effect on the audio output
	// noise_gate(out, in);

	LED_Off();
 80011de:	f002 fdf3 	bl	8003dc8 <LED_Off>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001204:	f3bf 8f4f 	dsb	sy
}
 8001208:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800120a:	f3bf 8f6f 	isb	sy
}
 800120e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001210:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <SCB_EnableICache+0x48>)
 8001212:	2200      	movs	r2, #0
 8001214:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001218:	f3bf 8f4f 	dsb	sy
}
 800121c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800121e:	f3bf 8f6f 	isb	sy
}
 8001222:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <SCB_EnableICache+0x48>)
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	4a07      	ldr	r2, [pc, #28]	; (8001248 <SCB_EnableICache+0x48>)
 800122a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001230:	f3bf 8f4f 	dsb	sy
}
 8001234:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001236:	f3bf 8f6f 	isb	sy
}
 800123a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <SCB_InvalidateICache>:
/**
  \brief   Invalidate I-Cache
  \details Invalidates I-Cache
  */
__STATIC_INLINE void SCB_InvalidateICache (void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001250:	f3bf 8f4f 	dsb	sy
}
 8001254:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001256:	f3bf 8f6f 	isb	sy
}
 800125a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <SCB_InvalidateICache+0x30>)
 800125e:	2200      	movs	r2, #0
 8001260:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001264:	f3bf 8f4f 	dsb	sy
}
 8001268:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800126a:	f3bf 8f6f 	isb	sy
}
 800126e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <SCB_EnableDCache+0x84>)
 8001288:	2200      	movs	r2, #0
 800128a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800128e:	f3bf 8f4f 	dsb	sy
}
 8001292:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <SCB_EnableDCache+0x84>)
 8001296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800129a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	0b5b      	lsrs	r3, r3, #13
 80012a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012a4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	08db      	lsrs	r3, r3, #3
 80012aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012ae:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	015a      	lsls	r2, r3, #5
 80012b4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80012b8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80012be:	4911      	ldr	r1, [pc, #68]	; (8001304 <SCB_EnableDCache+0x84>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1e5a      	subs	r2, r3, #1
 80012ca:	60ba      	str	r2, [r7, #8]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1ef      	bne.n	80012b0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	1e5a      	subs	r2, r3, #1
 80012d4:	60fa      	str	r2, [r7, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1e5      	bne.n	80012a6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80012da:	f3bf 8f4f 	dsb	sy
}
 80012de:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <SCB_EnableDCache+0x84>)
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	4a07      	ldr	r2, [pc, #28]	; (8001304 <SCB_EnableDCache+0x84>)
 80012e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012ec:	f3bf 8f4f 	dsb	sy
}
 80012f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f2:	f3bf 8f6f 	isb	sy
}
 80012f6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <SCB_InvalidateDCache>:
/**
  \brief   Invalidate D-Cache
  \details Invalidates D-Cache
  */
__STATIC_INLINE void SCB_InvalidateDCache (void)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800130e:	4b1b      	ldr	r3, [pc, #108]	; (800137c <SCB_InvalidateDCache+0x74>)
 8001310:	2200      	movs	r2, #0
 8001312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001316:	f3bf 8f4f 	dsb	sy
}
 800131a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800131c:	4b17      	ldr	r3, [pc, #92]	; (800137c <SCB_InvalidateDCache+0x74>)
 800131e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001322:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	0b5b      	lsrs	r3, r3, #13
 8001328:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800132c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	08db      	lsrs	r3, r3, #3
 8001332:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001336:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	015a      	lsls	r2, r3, #5
 800133c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001340:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001346:	490d      	ldr	r1, [pc, #52]	; (800137c <SCB_InvalidateDCache+0x74>)
 8001348:	4313      	orrs	r3, r2
 800134a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1e5a      	subs	r2, r3, #1
 8001352:	60ba      	str	r2, [r7, #8]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1ef      	bne.n	8001338 <SCB_InvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	1e5a      	subs	r2, r3, #1
 800135c:	60fa      	str	r2, [r7, #12]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1e5      	bne.n	800132e <SCB_InvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001362:	f3bf 8f4f 	dsb	sy
}
 8001366:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001368:	f3bf 8f6f 	isb	sy
}
 800136c:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	// this disables both I and D cache when tricky debugging
	// (but keep in mind caching approximately divides the audio processing time by 4)
	SCB_InvalidateDCache();
 8001384:	f7ff ffc0 	bl	8001308 <SCB_InvalidateDCache>
	SCB_InvalidateICache();
 8001388:	f7ff ff60 	bl	800124c <SCB_InvalidateICache>
	//SCB_EnableDCache();

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800138c:	f004 fbe3 	bl	8005b56 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001390:	f000 f842 	bl	8001418 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001394:	f001 f8a0 	bl	80024d8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001398:	f000 ffdc 	bl	8002354 <MX_DMA_Init>
	MX_ADC3_Init();
 800139c:	f000 f8fc 	bl	8001598 <MX_ADC3_Init>
	MX_CRC_Init();
 80013a0:	f000 f94c 	bl	800163c <MX_CRC_Init>
	MX_DCMI_Init();
 80013a4:	f000 f96c 	bl	8001680 <MX_DCMI_Init>
	MX_DMA2D_Init();
 80013a8:	f000 f99e 	bl	80016e8 <MX_DMA2D_Init>
	MX_FMC_Init();
 80013ac:	f001 f840 	bl	8002430 <MX_FMC_Init>
	MX_I2C1_Init();
 80013b0:	f000 f9cc 	bl	800174c <MX_I2C1_Init>
	MX_I2C3_Init();
 80013b4:	f000 fa0a 	bl	80017cc <MX_I2C3_Init>
	MX_LTDC_Init();
 80013b8:	f000 fa48 	bl	800184c <MX_LTDC_Init>
	MX_QUADSPI_Init();
 80013bc:	f000 faca 	bl	8001954 <MX_QUADSPI_Init>
	MX_RTC_Init();
 80013c0:	f000 fb0a 	bl	80019d8 <MX_RTC_Init>
	MX_SAI2_Init();
 80013c4:	f000 fbae 	bl	8001b24 <MX_SAI2_Init>
	MX_SDMMC1_SD_Init();
 80013c8:	f000 fc68 	bl	8001c9c <MX_SDMMC1_SD_Init>
	MX_SPDIFRX_Init();
 80013cc:	f000 fc86 	bl	8001cdc <MX_SPDIFRX_Init>
	MX_TIM1_Init();
 80013d0:	f000 fcb4 	bl	8001d3c <MX_TIM1_Init>
	MX_TIM2_Init();
 80013d4:	f000 fd5e 	bl	8001e94 <MX_TIM2_Init>
	MX_TIM3_Init();
 80013d8:	f000 fdd2 	bl	8001f80 <MX_TIM3_Init>
	MX_TIM5_Init();
 80013dc:	f000 fe48 	bl	8002070 <MX_TIM5_Init>
	MX_TIM8_Init();
 80013e0:	f000 febe 	bl	8002160 <MX_TIM8_Init>
	MX_TIM12_Init();
 80013e4:	f000 ff10 	bl	8002208 <MX_TIM12_Init>
	MX_USART1_UART_Init();
 80013e8:	f000 ff54 	bl	8002294 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 80013ec:	f000 ff82 	bl	80022f4 <MX_USART6_UART_Init>

//	MPU_Init();

	/* post-init SDRAM */
	// Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
	FMC_Bank1->BTCR[0] = 0x000030D2;
 80013f0:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80013f4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013f8:	601a      	str	r2, [r3, #0]

	/* post-init touchscreen */
	TS_Init();
 80013fa:	f003 faf5 	bl	80049e8 <TS_Init>
	printf("Touchscreen Init: OK\n");
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <main+0x94>)
 8001400:	f00f fcca 	bl	8010d98 <puts>

	SCB_EnableICache(); // comment out if in step debugging to avoid weird behaviours
 8001404:	f7ff fefc 	bl	8001200 <SCB_EnableICache>
	SCB_EnableDCache();
 8001408:	f7ff ff3a 	bl	8001280 <SCB_EnableDCache>

	//test();
	audioLoop(); // comment to use RTOS (see below)
 800140c:	f7ff fd68 	bl	8000ee0 <audioLoop>
      buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
      HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
      while(1);
    }*/

	while (1)
 8001410:	e7fe      	b.n	8001410 <main+0x90>
 8001412:	bf00      	nop
 8001414:	08013658 	.word	0x08013658

08001418 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0b4      	sub	sp, #208	; 0xd0
 800141c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001422:	2230      	movs	r2, #48	; 0x30
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f00e fefe 	bl	8010228 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800142c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	2284      	movs	r2, #132	; 0x84
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f00e feef 	bl	8010228 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800144a:	f008 ff5f 	bl	800a30c <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800144e:	4b4f      	ldr	r3, [pc, #316]	; (800158c <SystemClock_Config+0x174>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a4e      	ldr	r2, [pc, #312]	; (800158c <SystemClock_Config+0x174>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b4c      	ldr	r3, [pc, #304]	; (800158c <SystemClock_Config+0x174>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001466:	4b4a      	ldr	r3, [pc, #296]	; (8001590 <SystemClock_Config+0x178>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a49      	ldr	r2, [pc, #292]	; (8001590 <SystemClock_Config+0x178>)
 800146c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	4b47      	ldr	r3, [pc, #284]	; (8001590 <SystemClock_Config+0x178>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800147e:	2309      	movs	r3, #9
 8001480:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001488:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800148c:	2301      	movs	r3, #1
 800148e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001492:	2302      	movs	r3, #2
 8001494:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001498:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800149c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 80014a0:	2319      	movs	r3, #25
 80014a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 80014a6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80014aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ae:	2302      	movs	r3, #2
 80014b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 80014b4:	2309      	movs	r3, #9
 80014b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014be:	4618      	mov	r0, r3
 80014c0:	f009 ff48 	bl	800b354 <HAL_RCC_OscConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <SystemClock_Config+0xb6>
	{
		Error_Handler();
 80014ca:	f001 fa43 	bl	8002954 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014ce:	f008 ff2d 	bl	800a32c <HAL_PWREx_EnableOverDrive>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80014d8:	f001 fa3c 	bl	8002954 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014dc:	230f      	movs	r3, #15
 80014de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e2:	2302      	movs	r3, #2
 80014e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80014fe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001502:	2106      	movs	r1, #6
 8001504:	4618      	mov	r0, r3
 8001506:	f00a f9c9 	bl	800b89c <HAL_RCC_ClockConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8001510:	f001 fa20 	bl	8002954 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <SystemClock_Config+0x17c>)
 8001516:	60bb      	str	r3, [r7, #8]
			|RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
			|RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
			|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
			|RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001518:	2364      	movs	r3, #100	; 0x64
 800151a:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800151c:	2302      	movs	r3, #2
 800151e:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001520:	2302      	movs	r3, #2
 8001522:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001524:	2302      	movs	r3, #2
 8001526:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001528:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800152c:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800152e:	2305      	movs	r3, #5
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 8;
 8001532:	2308      	movs	r3, #8
 8001534:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001536:	2303      	movs	r3, #3
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLI2SDivQ = 1;
 800153a:	2301      	movs	r3, #1
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 800153e:	2301      	movs	r3, #1
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001542:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800154c:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800154e:	2300      	movs	r3, #0
 8001550:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001552:	2300      	movs	r3, #0
 8001554:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001556:	2300      	movs	r3, #0
 8001558:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800155a:	2300      	movs	r3, #0
 800155c:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800155e:	2300      	movs	r3, #0
 8001560:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001562:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001566:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	4618      	mov	r0, r3
 8001576:	f00a fb99 	bl	800bcac <HAL_RCCEx_PeriphCLKConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SystemClock_Config+0x16c>
	{
		Error_Handler();
 8001580:	f001 f9e8 	bl	8002954 <Error_Handler>
	}
}
 8001584:	bf00      	nop
 8001586:	37d0      	adds	r7, #208	; 0xd0
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	40007000 	.word	0x40007000
 8001594:	01b14868 	.word	0x01b14868

08001598 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800159e:	463b      	mov	r3, r7
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 80015aa:	4b21      	ldr	r3, [pc, #132]	; (8001630 <MX_ADC3_Init+0x98>)
 80015ac:	4a21      	ldr	r2, [pc, #132]	; (8001634 <MX_ADC3_Init+0x9c>)
 80015ae:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015b0:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <MX_ADC3_Init+0x98>)
 80015b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015b6:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <MX_ADC3_Init+0x98>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <MX_ADC3_Init+0x98>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <MX_ADC3_Init+0x98>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <MX_ADC3_Init+0x98>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <MX_ADC3_Init+0x98>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <MX_ADC3_Init+0x98>)
 80015da:	4a17      	ldr	r2, [pc, #92]	; (8001638 <MX_ADC3_Init+0xa0>)
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015de:	4b14      	ldr	r3, [pc, #80]	; (8001630 <MX_ADC3_Init+0x98>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <MX_ADC3_Init+0x98>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_ADC3_Init+0x98>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <MX_ADC3_Init+0x98>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80015f8:	480d      	ldr	r0, [pc, #52]	; (8001630 <MX_ADC3_Init+0x98>)
 80015fa:	f004 fafd 	bl	8005bf8 <HAL_ADC_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 8001604:	f001 f9a6 	bl	8002954 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8001608:	2304      	movs	r3, #4
 800160a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800160c:	2301      	movs	r3, #1
 800160e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001614:	463b      	mov	r3, r7
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_ADC3_Init+0x98>)
 800161a:	f004 fb31 	bl	8005c80 <HAL_ADC_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 8001624:	f001 f996 	bl	8002954 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000c30 	.word	0x20000c30
 8001634:	40012200 	.word	0x40012200
 8001638:	0f000001 	.word	0x0f000001

0800163c <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8001640:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <MX_CRC_Init+0x3c>)
 8001642:	4a0e      	ldr	r2, [pc, #56]	; (800167c <MX_CRC_Init+0x40>)
 8001644:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <MX_CRC_Init+0x3c>)
 8001648:	2200      	movs	r2, #0
 800164a:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <MX_CRC_Init+0x3c>)
 800164e:	2200      	movs	r2, #0
 8001650:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_CRC_Init+0x3c>)
 8001654:	2200      	movs	r2, #0
 8001656:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001658:	4b07      	ldr	r3, [pc, #28]	; (8001678 <MX_CRC_Init+0x3c>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <MX_CRC_Init+0x3c>)
 8001660:	2201      	movs	r2, #1
 8001662:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001664:	4804      	ldr	r0, [pc, #16]	; (8001678 <MX_CRC_Init+0x3c>)
 8001666:	f004 fe63 	bl	8006330 <HAL_CRC_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 8001670:	f001 f970 	bl	8002954 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	200009e8 	.word	0x200009e8
 800167c:	40023000 	.word	0x40023000

08001680 <MX_DCMI_Init>:
 * @brief DCMI Initialization Function
 * @param None
 * @retval None
 */
static void MX_DCMI_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	/* USER CODE END DCMI_Init 0 */

	/* USER CODE BEGIN DCMI_Init 1 */

	/* USER CODE END DCMI_Init 1 */
	hdcmi.Instance = DCMI;
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <MX_DCMI_Init+0x60>)
 8001686:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <MX_DCMI_Init+0x64>)
 8001688:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <MX_DCMI_Init+0x60>)
 800168c:	2200      	movs	r2, #0
 800168e:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001690:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <MX_DCMI_Init+0x60>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001696:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <MX_DCMI_Init+0x60>)
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800169c:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <MX_DCMI_Init+0x60>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <MX_DCMI_Init+0x60>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80016a8:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <MX_DCMI_Init+0x60>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <MX_DCMI_Init+0x60>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <MX_DCMI_Init+0x60>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <MX_DCMI_Init+0x60>)
 80016bc:	2200      	movs	r2, #0
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <MX_DCMI_Init+0x60>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	62da      	str	r2, [r3, #44]	; 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <MX_DCMI_Init+0x60>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80016cc:	4804      	ldr	r0, [pc, #16]	; (80016e0 <MX_DCMI_Init+0x60>)
 80016ce:	f004 ff19 	bl	8006504 <HAL_DCMI_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_DCMI_Init+0x5c>
	{
		Error_Handler();
 80016d8:	f001 f93c 	bl	8002954 <Error_Handler>
	}
	/* USER CODE BEGIN DCMI_Init 2 */

	/* USER CODE END DCMI_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000c78 	.word	0x20000c78
 80016e4:	50050000 	.word	0x50050000

080016e8 <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_DMA2D_Init+0x5c>)
 80016ee:	4a16      	ldr	r2, [pc, #88]	; (8001748 <MX_DMA2D_Init+0x60>)
 80016f0:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_DMA2D_Init+0x5c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <MX_DMA2D_Init+0x5c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_DMA2D_Init+0x5c>)
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_DMA2D_Init+0x5c>)
 8001706:	2200      	movs	r2, #0
 8001708:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_DMA2D_Init+0x5c>)
 800170c:	2200      	movs	r2, #0
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_DMA2D_Init+0x5c>)
 8001712:	2200      	movs	r2, #0
 8001714:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <MX_DMA2D_Init+0x5c>)
 8001718:	2200      	movs	r2, #0
 800171a:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800171c:	4809      	ldr	r0, [pc, #36]	; (8001744 <MX_DMA2D_Init+0x5c>)
 800171e:	f005 fc45 	bl	8006fac <HAL_DMA2D_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 8001728:	f001 f914 	bl	8002954 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800172c:	2101      	movs	r1, #1
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_DMA2D_Init+0x5c>)
 8001730:	f005 feaa 	bl	8007488 <HAL_DMA2D_ConfigLayer>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 800173a:	f001 f90b 	bl	8002954 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000e9c 	.word	0x20000e9c
 8001748:	4002b000 	.word	0x4002b000

0800174c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <MX_I2C1_Init+0x74>)
 8001752:	4a1c      	ldr	r2, [pc, #112]	; (80017c4 <MX_I2C1_Init+0x78>)
 8001754:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 8001756:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <MX_I2C1_Init+0x74>)
 8001758:	4a1b      	ldr	r2, [pc, #108]	; (80017c8 <MX_I2C1_Init+0x7c>)
 800175a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <MX_I2C1_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <MX_I2C1_Init+0x74>)
 8001764:	2201      	movs	r2, #1
 8001766:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <MX_I2C1_Init+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800176e:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <MX_I2C1_Init+0x74>)
 8001770:	2200      	movs	r2, #0
 8001772:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <MX_I2C1_Init+0x74>)
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <MX_I2C1_Init+0x74>)
 800177c:	2200      	movs	r2, #0
 800177e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_I2C1_Init+0x74>)
 8001782:	2200      	movs	r2, #0
 8001784:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001786:	480e      	ldr	r0, [pc, #56]	; (80017c0 <MX_I2C1_Init+0x74>)
 8001788:	f007 fd40 	bl	800920c <HAL_I2C_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8001792:	f001 f8df 	bl	8002954 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001796:	2100      	movs	r1, #0
 8001798:	4809      	ldr	r0, [pc, #36]	; (80017c0 <MX_I2C1_Init+0x74>)
 800179a:	f008 fa41 	bl	8009c20 <HAL_I2CEx_ConfigAnalogFilter>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 80017a4:	f001 f8d6 	bl	8002954 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017a8:	2100      	movs	r1, #0
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_I2C1_Init+0x74>)
 80017ac:	f008 fa83 	bl	8009cb6 <HAL_I2CEx_ConfigDigitalFilter>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 80017b6:	f001 f8cd 	bl	8002954 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	2000099c 	.word	0x2000099c
 80017c4:	40005400 	.word	0x40005400
 80017c8:	00c0eaff 	.word	0x00c0eaff

080017cc <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <MX_I2C3_Init+0x74>)
 80017d2:	4a1c      	ldr	r2, [pc, #112]	; (8001844 <MX_I2C3_Init+0x78>)
 80017d4:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <MX_I2C3_Init+0x74>)
 80017d8:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <MX_I2C3_Init+0x7c>)
 80017da:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 80017dc:	4b18      	ldr	r3, [pc, #96]	; (8001840 <MX_I2C3_Init+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e2:	4b17      	ldr	r3, [pc, #92]	; (8001840 <MX_I2C3_Init+0x74>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <MX_I2C3_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <MX_I2C3_Init+0x74>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <MX_I2C3_Init+0x74>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <MX_I2C3_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <MX_I2C3_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001806:	480e      	ldr	r0, [pc, #56]	; (8001840 <MX_I2C3_Init+0x74>)
 8001808:	f007 fd00 	bl	800920c <HAL_I2C_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 8001812:	f001 f89f 	bl	8002954 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001816:	2100      	movs	r1, #0
 8001818:	4809      	ldr	r0, [pc, #36]	; (8001840 <MX_I2C3_Init+0x74>)
 800181a:	f008 fa01 	bl	8009c20 <HAL_I2CEx_ConfigAnalogFilter>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 8001824:	f001 f896 	bl	8002954 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001828:	2100      	movs	r1, #0
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <MX_I2C3_Init+0x74>)
 800182c:	f008 fa43 	bl	8009cb6 <HAL_I2CEx_ConfigDigitalFilter>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 8001836:	f001 f88d 	bl	8002954 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000774 	.word	0x20000774
 8001844:	40005c00 	.word	0x40005c00
 8001848:	00c0eaff 	.word	0x00c0eaff

0800184c <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08e      	sub	sp, #56	; 0x38
 8001850:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2234      	movs	r2, #52	; 0x34
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f00e fce5 	bl	8010228 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 800185e:	4b3b      	ldr	r3, [pc, #236]	; (800194c <MX_LTDC_Init+0x100>)
 8001860:	4a3b      	ldr	r2, [pc, #236]	; (8001950 <MX_LTDC_Init+0x104>)
 8001862:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001864:	4b39      	ldr	r3, [pc, #228]	; (800194c <MX_LTDC_Init+0x100>)
 8001866:	2200      	movs	r2, #0
 8001868:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800186a:	4b38      	ldr	r3, [pc, #224]	; (800194c <MX_LTDC_Init+0x100>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001870:	4b36      	ldr	r3, [pc, #216]	; (800194c <MX_LTDC_Init+0x100>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001876:	4b35      	ldr	r3, [pc, #212]	; (800194c <MX_LTDC_Init+0x100>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 800187c:	4b33      	ldr	r3, [pc, #204]	; (800194c <MX_LTDC_Init+0x100>)
 800187e:	2228      	movs	r2, #40	; 0x28
 8001880:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 8001882:	4b32      	ldr	r3, [pc, #200]	; (800194c <MX_LTDC_Init+0x100>)
 8001884:	2209      	movs	r2, #9
 8001886:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 8001888:	4b30      	ldr	r3, [pc, #192]	; (800194c <MX_LTDC_Init+0x100>)
 800188a:	2235      	movs	r2, #53	; 0x35
 800188c:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 800188e:	4b2f      	ldr	r3, [pc, #188]	; (800194c <MX_LTDC_Init+0x100>)
 8001890:	220b      	movs	r2, #11
 8001892:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 8001894:	4b2d      	ldr	r3, [pc, #180]	; (800194c <MX_LTDC_Init+0x100>)
 8001896:	f240 2215 	movw	r2, #533	; 0x215
 800189a:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 800189c:	4b2b      	ldr	r3, [pc, #172]	; (800194c <MX_LTDC_Init+0x100>)
 800189e:	f240 121b 	movw	r2, #283	; 0x11b
 80018a2:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 80018a4:	4b29      	ldr	r3, [pc, #164]	; (800194c <MX_LTDC_Init+0x100>)
 80018a6:	f240 2235 	movw	r2, #565	; 0x235
 80018aa:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 80018ac:	4b27      	ldr	r3, [pc, #156]	; (800194c <MX_LTDC_Init+0x100>)
 80018ae:	f240 121d 	movw	r2, #285	; 0x11d
 80018b2:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <MX_LTDC_Init+0x100>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 80018bc:	4b23      	ldr	r3, [pc, #140]	; (800194c <MX_LTDC_Init+0x100>)
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <MX_LTDC_Init+0x100>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80018cc:	481f      	ldr	r0, [pc, #124]	; (800194c <MX_LTDC_Init+0x100>)
 80018ce:	f008 fa3f 	bl	8009d50 <HAL_LTDC_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 80018d8:	f001 f83c 	bl	8002954 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 80018e0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80018e4:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 80018ea:	f44f 7388 	mov.w	r3, #272	; 0x110
 80018ee:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80018f0:	2302      	movs	r3, #2
 80018f2:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 80018f4:	23ff      	movs	r3, #255	; 0xff
 80018f6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80018fc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001900:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001902:	2307      	movs	r3, #7
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 8001906:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 800190c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 8001912:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001916:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	2200      	movs	r2, #0
 800192e:	4619      	mov	r1, r3
 8001930:	4806      	ldr	r0, [pc, #24]	; (800194c <MX_LTDC_Init+0x100>)
 8001932:	f008 fadd 	bl	8009ef0 <HAL_LTDC_ConfigLayer>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 800193c:	f001 f80a 	bl	8002954 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	LCD_Init();
 8001940:	f002 fb44 	bl	8003fcc <LCD_Init>

	/* USER CODE END LTDC_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	3738      	adds	r7, #56	; 0x38
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000b88 	.word	0x20000b88
 8001950:	40016800 	.word	0x40016800

08001954 <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 8001958:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <MX_QUADSPI_Init+0x7c>)
 800195a:	4a1e      	ldr	r2, [pc, #120]	; (80019d4 <MX_QUADSPI_Init+0x80>)
 800195c:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 1;
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <MX_QUADSPI_Init+0x7c>)
 8001960:	2201      	movs	r2, #1
 8001962:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 4;
 8001964:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <MX_QUADSPI_Init+0x7c>)
 8001966:	2204      	movs	r2, #4
 8001968:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800196a:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <MX_QUADSPI_Init+0x7c>)
 800196c:	2210      	movs	r2, #16
 800196e:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 24;
 8001970:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <MX_QUADSPI_Init+0x7c>)
 8001972:	2218      	movs	r2, #24
 8001974:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <MX_QUADSPI_Init+0x7c>)
 8001978:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800197c:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <MX_QUADSPI_Init+0x7c>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
	hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_QUADSPI_Init+0x7c>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
	hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_QUADSPI_Init+0x7c>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001990:	480f      	ldr	r0, [pc, #60]	; (80019d0 <MX_QUADSPI_Init+0x7c>)
 8001992:	f008 fd1b 	bl	800a3cc <HAL_QSPI_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_QUADSPI_Init+0x4c>
	{
		Error_Handler();
 800199c:	f000 ffda 	bl	8002954 <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	// + memory reset + config dummy cycles on QSPI memory side, see disco_qspi.c
	/* QSPI memory reset */
	if (DISCO_QSPI_ResetMemory(&hqspi) != HAL_OK) Error_Handler();
 80019a0:	480b      	ldr	r0, [pc, #44]	; (80019d0 <MX_QUADSPI_Init+0x7c>)
 80019a2:	f002 fdf5 	bl	8004590 <DISCO_QSPI_ResetMemory>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_QUADSPI_Init+0x5c>
 80019ac:	f000 ffd2 	bl	8002954 <Error_Handler>
	/* Configuration of the dummy cycles on QSPI memory side */
	if (DISCO_QSPI_DummyCyclesCfg(&hqspi) != HAL_OK) Error_Handler();
 80019b0:	4807      	ldr	r0, [pc, #28]	; (80019d0 <MX_QUADSPI_Init+0x7c>)
 80019b2:	f002 fe2f 	bl	8004614 <DISCO_QSPI_DummyCyclesCfg>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_QUADSPI_Init+0x6c>
 80019bc:	f000 ffca 	bl	8002954 <Error_Handler>

	DISCO_QSPI_EnableMemoryMappedMode();
 80019c0:	f002 fdb4 	bl	800452c <DISCO_QSPI_EnableMemoryMappedMode>
	HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 80019c4:	205c      	movs	r0, #92	; 0x5c
 80019c6:	f004 fca5 	bl	8006314 <HAL_NVIC_DisableIRQ>


	/* USER CODE END QUADSPI_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000fa8 	.word	0x20000fa8
 80019d4:	a0001000 	.word	0xa0001000

080019d8 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b092      	sub	sp, #72	; 0x48
 80019dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 80019de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]
 80019ee:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 80019f0:	2300      	movs	r3, #0
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RTC_AlarmTypeDef sAlarm = {0};
 80019f4:	463b      	mov	r3, r7
 80019f6:	222c      	movs	r2, #44	; 0x2c
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f00e fc14 	bl	8010228 <memset>
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001a00:	4b46      	ldr	r3, [pc, #280]	; (8001b1c <MX_RTC_Init+0x144>)
 8001a02:	4a47      	ldr	r2, [pc, #284]	; (8001b20 <MX_RTC_Init+0x148>)
 8001a04:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a06:	4b45      	ldr	r3, [pc, #276]	; (8001b1c <MX_RTC_Init+0x144>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001a0c:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <MX_RTC_Init+0x144>)
 8001a0e:	227f      	movs	r2, #127	; 0x7f
 8001a10:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8001a12:	4b42      	ldr	r3, [pc, #264]	; (8001b1c <MX_RTC_Init+0x144>)
 8001a14:	22ff      	movs	r2, #255	; 0xff
 8001a16:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a18:	4b40      	ldr	r3, [pc, #256]	; (8001b1c <MX_RTC_Init+0x144>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a1e:	4b3f      	ldr	r3, [pc, #252]	; (8001b1c <MX_RTC_Init+0x144>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a24:	4b3d      	ldr	r3, [pc, #244]	; (8001b1c <MX_RTC_Init+0x144>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a2a:	483c      	ldr	r0, [pc, #240]	; (8001b1c <MX_RTC_Init+0x144>)
 8001a2c:	f00a fe72 	bl	800c714 <HAL_RTC_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_RTC_Init+0x62>
	{
		Error_Handler();
 8001a36:	f000 ff8d 	bl	8002954 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sTime.Minutes = 0x0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sTime.Seconds = 0x0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	482f      	ldr	r0, [pc, #188]	; (8001b1c <MX_RTC_Init+0x144>)
 8001a5e:	f00a feeb 	bl	800c838 <HAL_RTC_SetTime>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_RTC_Init+0x94>
	{
		Error_Handler();
 8001a68:	f000 ff74 	bl	8002954 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sDate.Month = RTC_MONTH_JANUARY;
 8001a72:	2301      	movs	r3, #1
 8001a74:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sDate.Date = 0x1;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sDate.Year = 0x0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4823      	ldr	r0, [pc, #140]	; (8001b1c <MX_RTC_Init+0x144>)
 8001a8e:	f00a ff91 	bl	800c9b4 <HAL_RTC_SetDate>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_RTC_Init+0xc4>
	{
		Error_Handler();
 8001a98:	f000 ff5c 	bl	8002954 <Error_Handler>
	}
	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 8001ac6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001acc:	463b      	mov	r3, r7
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4812      	ldr	r0, [pc, #72]	; (8001b1c <MX_RTC_Init+0x144>)
 8001ad4:	f00b f816 	bl	800cb04 <HAL_RTC_SetAlarm>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_RTC_Init+0x10a>
	{
		Error_Handler();
 8001ade:	f000 ff39 	bl	8002954 <Error_Handler>
	}
	/** Enable the Alarm B
	 */
	sAlarm.Alarm = RTC_ALARM_B;
 8001ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001ae8:	463b      	mov	r3, r7
 8001aea:	2201      	movs	r2, #1
 8001aec:	4619      	mov	r1, r3
 8001aee:	480b      	ldr	r0, [pc, #44]	; (8001b1c <MX_RTC_Init+0x144>)
 8001af0:	f00b f808 	bl	800cb04 <HAL_RTC_SetAlarm>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_RTC_Init+0x126>
	{
		Error_Handler();
 8001afa:	f000 ff2b 	bl	8002954 <Error_Handler>
	}
	/** Enable the TimeStamp
	 */
	if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001afe:	2202      	movs	r2, #2
 8001b00:	2100      	movs	r1, #0
 8001b02:	4806      	ldr	r0, [pc, #24]	; (8001b1c <MX_RTC_Init+0x144>)
 8001b04:	f00b f988 	bl	800ce18 <HAL_RTCEx_SetTimeStamp>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_RTC_Init+0x13a>
	{
		Error_Handler();
 8001b0e:	f000 ff21 	bl	8002954 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	3748      	adds	r7, #72	; 0x48
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000d4c 	.word	0x20000d4c
 8001b20:	40002800 	.word	0x40002800

08001b24 <MX_SAI2_Init>:
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 8001b28:	4b58      	ldr	r3, [pc, #352]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001b2a:	4a59      	ldr	r2, [pc, #356]	; (8001c90 <MX_SAI2_Init+0x16c>)
 8001b2c:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b2e:	4b57      	ldr	r3, [pc, #348]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001b34:	4b55      	ldr	r3, [pc, #340]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8001b3a:	4b54      	ldr	r3, [pc, #336]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001b3c:	2280      	movs	r2, #128	; 0x80
 8001b3e:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b40:	4b52      	ldr	r3, [pc, #328]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001b46:	4b51      	ldr	r3, [pc, #324]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001b4c:	4b4f      	ldr	r3, [pc, #316]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001b52:	4b4e      	ldr	r3, [pc, #312]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001b54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b58:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001b5a:	4b4c      	ldr	r3, [pc, #304]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001b60:	4b4a      	ldr	r3, [pc, #296]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K; // SAI_AUDIO_FREQUENCY_48K;
 8001b66:	4b49      	ldr	r3, [pc, #292]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001b68:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001b6c:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b6e:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b74:	4b45      	ldr	r3, [pc, #276]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b7a:	4b44      	ldr	r3, [pc, #272]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b80:	4b42      	ldr	r3, [pc, #264]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 64;
 8001b86:	4b41      	ldr	r3, [pc, #260]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001b88:	2240      	movs	r2, #64	; 0x40
 8001b8a:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8001b8c:	4b3f      	ldr	r3, [pc, #252]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001b8e:	2220      	movs	r2, #32
 8001b90:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001b92:	4b3e      	ldr	r3, [pc, #248]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001b94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b98:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b9a:	4b3c      	ldr	r3, [pc, #240]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001ba0:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001ba2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ba6:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001ba8:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001bae:	4b37      	ldr	r3, [pc, #220]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 4;
 8001bb4:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001bb6:	2204      	movs	r2, #4
 8001bb8:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 8001bba:	4b34      	ldr	r3, [pc, #208]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001bbc:	2205      	movs	r2, #5
 8001bbe:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001bc0:	4832      	ldr	r0, [pc, #200]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001bc2:	f00b f97f 	bl	800cec4 <HAL_SAI_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_SAI2_Init+0xac>
	{
		Error_Handler();
 8001bcc:	f000 fec2 	bl	8002954 <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 8001bd0:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001bd2:	4a31      	ldr	r2, [pc, #196]	; (8001c98 <MX_SAI2_Init+0x174>)
 8001bd4:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001bd6:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001bde:	2203      	movs	r2, #3
 8001be0:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8001be2:	4b2c      	ldr	r3, [pc, #176]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001be4:	2280      	movs	r2, #128	; 0x80
 8001be6:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001be8:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001bee:	4b29      	ldr	r3, [pc, #164]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001bf4:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001bfa:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001c00:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c06:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c0c:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c12:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c18:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 64;
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001c20:	2240      	movs	r2, #64	; 0x40
 8001c22:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 8001c24:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001c26:	2220      	movs	r2, #32
 8001c28:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001c2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c30:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001c3a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001c3e:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 4;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001c4e:	2204      	movs	r2, #4
 8001c50:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x0000000A;
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001c54:	220a      	movs	r2, #10
 8001c56:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001c58:	480e      	ldr	r0, [pc, #56]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001c5a:	f00b f933 	bl	800cec4 <HAL_SAI_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_SAI2_Init+0x144>
	{
		Error_Handler();
 8001c64:	f000 fe76 	bl	8002954 <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	// bug fix:
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <MX_SAI2_Init+0x168>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c76:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <MX_SAI2_Init+0x170>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c86:	601a      	str	r2, [r3, #0]

	/* USER CODE END SAI2_Init 2 */

}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000918 	.word	0x20000918
 8001c90:	40015c04 	.word	0x40015c04
 8001c94:	200006f0 	.word	0x200006f0
 8001c98:	40015c24 	.word	0x40015c24

08001c9c <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <MX_SDMMC1_SD_Init+0x38>)
 8001ca2:	4a0d      	ldr	r2, [pc, #52]	; (8001cd8 <MX_SDMMC1_SD_Init+0x3c>)
 8001ca4:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <MX_SDMMC1_SD_Init+0x38>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <MX_SDMMC1_SD_Init+0x38>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <MX_SDMMC1_SD_Init+0x38>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <MX_SDMMC1_SD_Init+0x38>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <MX_SDMMC1_SD_Init+0x38>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <MX_SDMMC1_SD_Init+0x38>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	20000a6c 	.word	0x20000a6c
 8001cd8:	40012c00 	.word	0x40012c00

08001cdc <MX_SPDIFRX_Init>:
 * @brief SPDIFRX Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPDIFRX_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	/* USER CODE END SPDIFRX_Init 0 */

	/* USER CODE BEGIN SPDIFRX_Init 1 */

	/* USER CODE END SPDIFRX_Init 1 */
	hspdif.Instance = SPDIFRX;
 8001ce0:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <MX_SPDIFRX_Init+0x5c>)
 8001ce2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001ce6:	601a      	str	r2, [r3, #0]
	hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <MX_SPDIFRX_Init+0x5c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	605a      	str	r2, [r3, #4]
	hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <MX_SPDIFRX_Init+0x5c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
	hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001cf4:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <MX_SPDIFRX_Init+0x5c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
	hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <MX_SPDIFRX_Init+0x5c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
	hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <MX_SPDIFRX_Init+0x5c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	615a      	str	r2, [r3, #20]
	hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_SPDIFRX_Init+0x5c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
	hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <MX_SPDIFRX_Init+0x5c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
	hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_SPDIFRX_Init+0x5c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
	hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <MX_SPDIFRX_Init+0x5c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24
	hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_SPDIFRX_Init+0x5c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001d24:	4804      	ldr	r0, [pc, #16]	; (8001d38 <MX_SPDIFRX_Init+0x5c>)
 8001d26:	f00b fd25 	bl	800d774 <HAL_SPDIFRX_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_SPDIFRX_Init+0x58>
	{
		Error_Handler();
 8001d30:	f000 fe10 	bl	8002954 <Error_Handler>
	}
	/* USER CODE BEGIN SPDIFRX_Init 2 */

	/* USER CODE END SPDIFRX_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	200008cc 	.word	0x200008cc

08001d3c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b09a      	sub	sp, #104	; 0x68
 8001d40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001d5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
 8001d6c:	615a      	str	r2, [r3, #20]
 8001d6e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	222c      	movs	r2, #44	; 0x2c
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f00e fa56 	bl	8010228 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001d7c:	4b43      	ldr	r3, [pc, #268]	; (8001e8c <MX_TIM1_Init+0x150>)
 8001d7e:	4a44      	ldr	r2, [pc, #272]	; (8001e90 <MX_TIM1_Init+0x154>)
 8001d80:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001d82:	4b42      	ldr	r3, [pc, #264]	; (8001e8c <MX_TIM1_Init+0x150>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d88:	4b40      	ldr	r3, [pc, #256]	; (8001e8c <MX_TIM1_Init+0x150>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001d8e:	4b3f      	ldr	r3, [pc, #252]	; (8001e8c <MX_TIM1_Init+0x150>)
 8001d90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d94:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d96:	4b3d      	ldr	r3, [pc, #244]	; (8001e8c <MX_TIM1_Init+0x150>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001d9c:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <MX_TIM1_Init+0x150>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da2:	4b3a      	ldr	r3, [pc, #232]	; (8001e8c <MX_TIM1_Init+0x150>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001da8:	4838      	ldr	r0, [pc, #224]	; (8001e8c <MX_TIM1_Init+0x150>)
 8001daa:	f00b fd3f 	bl	800d82c <HAL_TIM_Base_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8001db4:	f000 fdce 	bl	8002954 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dbc:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4831      	ldr	r0, [pc, #196]	; (8001e8c <MX_TIM1_Init+0x150>)
 8001dc6:	f00c f887 	bl	800ded8 <HAL_TIM_ConfigClockSource>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8001dd0:	f000 fdc0 	bl	8002954 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dd4:	482d      	ldr	r0, [pc, #180]	; (8001e8c <MX_TIM1_Init+0x150>)
 8001dd6:	f00b fdf9 	bl	800d9cc <HAL_TIM_PWM_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8001de0:	f000 fdb8 	bl	8002954 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de4:	2300      	movs	r3, #0
 8001de6:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001df0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001df4:	4619      	mov	r1, r3
 8001df6:	4825      	ldr	r0, [pc, #148]	; (8001e8c <MX_TIM1_Init+0x150>)
 8001df8:	f00c fcf4 	bl	800e7e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 8001e02:	f000 fda7 	bl	8002954 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e06:	2360      	movs	r3, #96	; 0x60
 8001e08:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e12:	2300      	movs	r3, #0
 8001e14:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e26:	2200      	movs	r2, #0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4818      	ldr	r0, [pc, #96]	; (8001e8c <MX_TIM1_Init+0x150>)
 8001e2c:	f00b ff44 	bl	800dcb8 <HAL_TIM_PWM_ConfigChannel>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 8001e36:	f000 fd8d 	bl	8002954 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e52:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4807      	ldr	r0, [pc, #28]	; (8001e8c <MX_TIM1_Init+0x150>)
 8001e70:	f00c fd46 	bl	800e900 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM1_Init+0x142>
	{
		Error_Handler();
 8001e7a:	f000 fd6b 	bl	8002954 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001e7e:	4803      	ldr	r0, [pc, #12]	; (8001e8c <MX_TIM1_Init+0x150>)
 8001e80:	f001 fa28 	bl	80032d4 <HAL_TIM_MspPostInit>

}
 8001e84:	bf00      	nop
 8001e86:	3768      	adds	r7, #104	; 0x68
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000d6c 	.word	0x20000d6c
 8001e90:	40010000 	.word	0x40010000

08001e94 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08e      	sub	sp, #56	; 0x38
 8001e98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea8:	f107 031c 	add.w	r3, r7, #28
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb4:	463b      	mov	r3, r7
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
 8001ec0:	611a      	str	r2, [r3, #16]
 8001ec2:	615a      	str	r2, [r3, #20]
 8001ec4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001ec6:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <MX_TIM2_Init+0xe8>)
 8001ec8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ecc:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001ece:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <MX_TIM2_Init+0xe8>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed4:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <MX_TIM2_Init+0xe8>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001eda:	4b28      	ldr	r3, [pc, #160]	; (8001f7c <MX_TIM2_Init+0xe8>)
 8001edc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ee0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee2:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <MX_TIM2_Init+0xe8>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee8:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <MX_TIM2_Init+0xe8>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001eee:	4823      	ldr	r0, [pc, #140]	; (8001f7c <MX_TIM2_Init+0xe8>)
 8001ef0:	f00b fc9c 	bl	800d82c <HAL_TIM_Base_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8001efa:	f000 fd2b 	bl	8002954 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f08:	4619      	mov	r1, r3
 8001f0a:	481c      	ldr	r0, [pc, #112]	; (8001f7c <MX_TIM2_Init+0xe8>)
 8001f0c:	f00b ffe4 	bl	800ded8 <HAL_TIM_ConfigClockSource>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 8001f16:	f000 fd1d 	bl	8002954 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f1a:	4818      	ldr	r0, [pc, #96]	; (8001f7c <MX_TIM2_Init+0xe8>)
 8001f1c:	f00b fd56 	bl	800d9cc <HAL_TIM_PWM_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 8001f26:	f000 fd15 	bl	8002954 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f32:	f107 031c 	add.w	r3, r7, #28
 8001f36:	4619      	mov	r1, r3
 8001f38:	4810      	ldr	r0, [pc, #64]	; (8001f7c <MX_TIM2_Init+0xe8>)
 8001f3a:	f00c fc53 	bl	800e7e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8001f44:	f000 fd06 	bl	8002954 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f48:	2360      	movs	r3, #96	; 0x60
 8001f4a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f58:	463b      	mov	r3, r7
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4807      	ldr	r0, [pc, #28]	; (8001f7c <MX_TIM2_Init+0xe8>)
 8001f60:	f00b feaa 	bl	800dcb8 <HAL_TIM_PWM_ConfigChannel>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 8001f6a:	f000 fcf3 	bl	8002954 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001f6e:	4803      	ldr	r0, [pc, #12]	; (8001f7c <MX_TIM2_Init+0xe8>)
 8001f70:	f001 f9b0 	bl	80032d4 <HAL_TIM_MspPostInit>

}
 8001f74:	bf00      	nop
 8001f76:	3738      	adds	r7, #56	; 0x38
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000edc 	.word	0x20000edc

08001f80 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08e      	sub	sp, #56	; 0x38
 8001f84:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001fa0:	463b      	mov	r3, r7
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]
 8001fac:	611a      	str	r2, [r3, #16]
 8001fae:	615a      	str	r2, [r3, #20]
 8001fb0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <MX_TIM3_Init+0xe8>)
 8001fb4:	4a2d      	ldr	r2, [pc, #180]	; (800206c <MX_TIM3_Init+0xec>)
 8001fb6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001fb8:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <MX_TIM3_Init+0xe8>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fbe:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <MX_TIM3_Init+0xe8>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001fc4:	4b28      	ldr	r3, [pc, #160]	; (8002068 <MX_TIM3_Init+0xe8>)
 8001fc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fca:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fcc:	4b26      	ldr	r3, [pc, #152]	; (8002068 <MX_TIM3_Init+0xe8>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd2:	4b25      	ldr	r3, [pc, #148]	; (8002068 <MX_TIM3_Init+0xe8>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fd8:	4823      	ldr	r0, [pc, #140]	; (8002068 <MX_TIM3_Init+0xe8>)
 8001fda:	f00b fc27 	bl	800d82c <HAL_TIM_Base_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 8001fe4:	f000 fcb6 	bl	8002954 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	481c      	ldr	r0, [pc, #112]	; (8002068 <MX_TIM3_Init+0xe8>)
 8001ff6:	f00b ff6f 	bl	800ded8 <HAL_TIM_ConfigClockSource>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 8002000:	f000 fca8 	bl	8002954 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002004:	4818      	ldr	r0, [pc, #96]	; (8002068 <MX_TIM3_Init+0xe8>)
 8002006:	f00b fce1 	bl	800d9cc <HAL_TIM_PWM_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 8002010:	f000 fca0 	bl	8002954 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002014:	2300      	movs	r3, #0
 8002016:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800201c:	f107 031c 	add.w	r3, r7, #28
 8002020:	4619      	mov	r1, r3
 8002022:	4811      	ldr	r0, [pc, #68]	; (8002068 <MX_TIM3_Init+0xe8>)
 8002024:	f00c fbde 	bl	800e7e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 800202e:	f000 fc91 	bl	8002954 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002032:	2360      	movs	r3, #96	; 0x60
 8002034:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002042:	463b      	mov	r3, r7
 8002044:	2200      	movs	r2, #0
 8002046:	4619      	mov	r1, r3
 8002048:	4807      	ldr	r0, [pc, #28]	; (8002068 <MX_TIM3_Init+0xe8>)
 800204a:	f00b fe35 	bl	800dcb8 <HAL_TIM_PWM_ConfigChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM3_Init+0xd8>
	{
		Error_Handler();
 8002054:	f000 fc7e 	bl	8002954 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002058:	4803      	ldr	r0, [pc, #12]	; (8002068 <MX_TIM3_Init+0xe8>)
 800205a:	f001 f93b 	bl	80032d4 <HAL_TIM_MspPostInit>

}
 800205e:	bf00      	nop
 8002060:	3738      	adds	r7, #56	; 0x38
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000b3c 	.word	0x20000b3c
 800206c:	40000400 	.word	0x40000400

08002070 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08e      	sub	sp, #56	; 0x38
 8002074:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002076:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002084:	f107 031c 	add.w	r3, r7, #28
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002090:	463b      	mov	r3, r7
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	611a      	str	r2, [r3, #16]
 800209e:	615a      	str	r2, [r3, #20]
 80020a0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80020a2:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <MX_TIM5_Init+0xe8>)
 80020a4:	4a2d      	ldr	r2, [pc, #180]	; (800215c <MX_TIM5_Init+0xec>)
 80020a6:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80020a8:	4b2b      	ldr	r3, [pc, #172]	; (8002158 <MX_TIM5_Init+0xe8>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ae:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <MX_TIM5_Init+0xe8>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 80020b4:	4b28      	ldr	r3, [pc, #160]	; (8002158 <MX_TIM5_Init+0xe8>)
 80020b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020ba:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020bc:	4b26      	ldr	r3, [pc, #152]	; (8002158 <MX_TIM5_Init+0xe8>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c2:	4b25      	ldr	r3, [pc, #148]	; (8002158 <MX_TIM5_Init+0xe8>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020c8:	4823      	ldr	r0, [pc, #140]	; (8002158 <MX_TIM5_Init+0xe8>)
 80020ca:	f00b fbaf 	bl	800d82c <HAL_TIM_Base_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM5_Init+0x68>
	{
		Error_Handler();
 80020d4:	f000 fc3e 	bl	8002954 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80020de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020e2:	4619      	mov	r1, r3
 80020e4:	481c      	ldr	r0, [pc, #112]	; (8002158 <MX_TIM5_Init+0xe8>)
 80020e6:	f00b fef7 	bl	800ded8 <HAL_TIM_ConfigClockSource>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM5_Init+0x84>
	{
		Error_Handler();
 80020f0:	f000 fc30 	bl	8002954 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80020f4:	4818      	ldr	r0, [pc, #96]	; (8002158 <MX_TIM5_Init+0xe8>)
 80020f6:	f00b fc69 	bl	800d9cc <HAL_TIM_PWM_Init>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM5_Init+0x94>
	{
		Error_Handler();
 8002100:	f000 fc28 	bl	8002954 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002104:	2300      	movs	r3, #0
 8002106:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800210c:	f107 031c 	add.w	r3, r7, #28
 8002110:	4619      	mov	r1, r3
 8002112:	4811      	ldr	r0, [pc, #68]	; (8002158 <MX_TIM5_Init+0xe8>)
 8002114:	f00c fb66 	bl	800e7e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM5_Init+0xb2>
	{
		Error_Handler();
 800211e:	f000 fc19 	bl	8002954 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002122:	2360      	movs	r3, #96	; 0x60
 8002124:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002132:	463b      	mov	r3, r7
 8002134:	220c      	movs	r2, #12
 8002136:	4619      	mov	r1, r3
 8002138:	4807      	ldr	r0, [pc, #28]	; (8002158 <MX_TIM5_Init+0xe8>)
 800213a:	f00b fdbd 	bl	800dcb8 <HAL_TIM_PWM_ConfigChannel>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM5_Init+0xd8>
	{
		Error_Handler();
 8002144:	f000 fc06 	bl	8002954 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8002148:	4803      	ldr	r0, [pc, #12]	; (8002158 <MX_TIM5_Init+0xe8>)
 800214a:	f001 f8c3 	bl	80032d4 <HAL_TIM_MspPostInit>

}
 800214e:	bf00      	nop
 8002150:	3738      	adds	r7, #56	; 0x38
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000af0 	.word	0x20000af0
 800215c:	40000c00 	.word	0x40000c00

08002160 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002166:	f107 0310 	add.w	r3, r7, #16
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <MX_TIM8_Init+0xa0>)
 8002180:	4a20      	ldr	r2, [pc, #128]	; (8002204 <MX_TIM8_Init+0xa4>)
 8002182:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8002184:	4b1e      	ldr	r3, [pc, #120]	; (8002200 <MX_TIM8_Init+0xa0>)
 8002186:	2200      	movs	r2, #0
 8002188:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218a:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <MX_TIM8_Init+0xa0>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <MX_TIM8_Init+0xa0>)
 8002192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002196:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <MX_TIM8_Init+0xa0>)
 800219a:	2200      	movs	r2, #0
 800219c:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800219e:	4b18      	ldr	r3, [pc, #96]	; (8002200 <MX_TIM8_Init+0xa0>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a4:	4b16      	ldr	r3, [pc, #88]	; (8002200 <MX_TIM8_Init+0xa0>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80021aa:	4815      	ldr	r0, [pc, #84]	; (8002200 <MX_TIM8_Init+0xa0>)
 80021ac:	f00b fb3e 	bl	800d82c <HAL_TIM_Base_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM8_Init+0x5a>
	{
		Error_Handler();
 80021b6:	f000 fbcd 	bl	8002954 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021be:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80021c0:	f107 0310 	add.w	r3, r7, #16
 80021c4:	4619      	mov	r1, r3
 80021c6:	480e      	ldr	r0, [pc, #56]	; (8002200 <MX_TIM8_Init+0xa0>)
 80021c8:	f00b fe86 	bl	800ded8 <HAL_TIM_ConfigClockSource>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM8_Init+0x76>
	{
		Error_Handler();
 80021d2:	f000 fbbf 	bl	8002954 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d6:	2300      	movs	r3, #0
 80021d8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	4619      	mov	r1, r3
 80021e6:	4806      	ldr	r0, [pc, #24]	; (8002200 <MX_TIM8_Init+0xa0>)
 80021e8:	f00c fafc 	bl	800e7e4 <HAL_TIMEx_MasterConfigSynchronization>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM8_Init+0x96>
	{
		Error_Handler();
 80021f2:	f000 fbaf 	bl	8002954 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 80021f6:	bf00      	nop
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000820 	.word	0x20000820
 8002204:	40010400 	.word	0x40010400

08002208 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
 800221c:	615a      	str	r2, [r3, #20]
 800221e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8002220:	4b1a      	ldr	r3, [pc, #104]	; (800228c <MX_TIM12_Init+0x84>)
 8002222:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <MX_TIM12_Init+0x88>)
 8002224:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 8002226:	4b19      	ldr	r3, [pc, #100]	; (800228c <MX_TIM12_Init+0x84>)
 8002228:	2200      	movs	r2, #0
 800222a:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222c:	4b17      	ldr	r3, [pc, #92]	; (800228c <MX_TIM12_Init+0x84>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 65535;
 8002232:	4b16      	ldr	r3, [pc, #88]	; (800228c <MX_TIM12_Init+0x84>)
 8002234:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002238:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223a:	4b14      	ldr	r3, [pc, #80]	; (800228c <MX_TIM12_Init+0x84>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <MX_TIM12_Init+0x84>)
 8002242:	2200      	movs	r2, #0
 8002244:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002246:	4811      	ldr	r0, [pc, #68]	; (800228c <MX_TIM12_Init+0x84>)
 8002248:	f00b fbc0 	bl	800d9cc <HAL_TIM_PWM_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM12_Init+0x4e>
	{
		Error_Handler();
 8002252:	f000 fb7f 	bl	8002954 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002256:	2360      	movs	r3, #96	; 0x60
 8002258:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	2200      	movs	r2, #0
 800226a:	4619      	mov	r1, r3
 800226c:	4807      	ldr	r0, [pc, #28]	; (800228c <MX_TIM12_Init+0x84>)
 800226e:	f00b fd23 	bl	800dcb8 <HAL_TIM_PWM_ConfigChannel>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM12_Init+0x74>
	{
		Error_Handler();
 8002278:	f000 fb6c 	bl	8002954 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 800227c:	4803      	ldr	r0, [pc, #12]	; (800228c <MX_TIM12_Init+0x84>)
 800227e:	f001 f829 	bl	80032d4 <HAL_TIM_MspPostInit>

}
 8002282:	bf00      	nop
 8002284:	3720      	adds	r7, #32
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000f28 	.word	0x20000f28
 8002290:	40001800 	.word	0x40001800

08002294 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002298:	4b14      	ldr	r3, [pc, #80]	; (80022ec <MX_USART1_UART_Init+0x58>)
 800229a:	4a15      	ldr	r2, [pc, #84]	; (80022f0 <MX_USART1_UART_Init+0x5c>)
 800229c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800229e:	4b13      	ldr	r3, [pc, #76]	; (80022ec <MX_USART1_UART_Init+0x58>)
 80022a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022a4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022a6:	4b11      	ldr	r3, [pc, #68]	; (80022ec <MX_USART1_UART_Init+0x58>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80022ac:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <MX_USART1_UART_Init+0x58>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <MX_USART1_UART_Init+0x58>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <MX_USART1_UART_Init+0x58>)
 80022ba:	220c      	movs	r2, #12
 80022bc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <MX_USART1_UART_Init+0x58>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <MX_USART1_UART_Init+0x58>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <MX_USART1_UART_Init+0x58>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <MX_USART1_UART_Init+0x58>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80022d6:	4805      	ldr	r0, [pc, #20]	; (80022ec <MX_USART1_UART_Init+0x58>)
 80022d8:	f00c fbae 	bl	800ea38 <HAL_UART_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80022e2:	f000 fb37 	bl	8002954 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000cc8 	.word	0x20000cc8
 80022f0:	40011000 	.word	0x40011000

080022f4 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <MX_USART6_UART_Init+0x58>)
 80022fa:	4a15      	ldr	r2, [pc, #84]	; (8002350 <MX_USART6_UART_Init+0x5c>)
 80022fc:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80022fe:	4b13      	ldr	r3, [pc, #76]	; (800234c <MX_USART6_UART_Init+0x58>)
 8002300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002304:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <MX_USART6_UART_Init+0x58>)
 8002308:	2200      	movs	r2, #0
 800230a:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <MX_USART6_UART_Init+0x58>)
 800230e:	2200      	movs	r2, #0
 8002310:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <MX_USART6_UART_Init+0x58>)
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <MX_USART6_UART_Init+0x58>)
 800231a:	220c      	movs	r2, #12
 800231c:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <MX_USART6_UART_Init+0x58>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <MX_USART6_UART_Init+0x58>)
 8002326:	2200      	movs	r2, #0
 8002328:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <MX_USART6_UART_Init+0x58>)
 800232c:	2200      	movs	r2, #0
 800232e:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <MX_USART6_UART_Init+0x58>)
 8002332:	2200      	movs	r2, #0
 8002334:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8002336:	4805      	ldr	r0, [pc, #20]	; (800234c <MX_USART6_UART_Init+0x58>)
 8002338:	f00c fb7e 	bl	800ea38 <HAL_UART_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_USART6_UART_Init+0x52>
	{
		Error_Handler();
 8002342:	f000 fb07 	bl	8002954 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000e18 	.word	0x20000e18
 8002350:	40011400 	.word	0x40011400

08002354 <MX_DMA_Init>:
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma2_stream0
 */
static void MX_DMA_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800235a:	4b32      	ldr	r3, [pc, #200]	; (8002424 <MX_DMA_Init+0xd0>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a31      	ldr	r2, [pc, #196]	; (8002424 <MX_DMA_Init+0xd0>)
 8002360:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b2f      	ldr	r3, [pc, #188]	; (8002424 <MX_DMA_Init+0xd0>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236e:	607b      	str	r3, [r7, #4]
 8002370:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
	hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8002372:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <MX_DMA_Init+0xd4>)
 8002374:	4a2d      	ldr	r2, [pc, #180]	; (800242c <MX_DMA_Init+0xd8>)
 8002376:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8002378:	4b2b      	ldr	r3, [pc, #172]	; (8002428 <MX_DMA_Init+0xd4>)
 800237a:	2200      	movs	r2, #0
 800237c:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800237e:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <MX_DMA_Init+0xd4>)
 8002380:	2280      	movs	r2, #128	; 0x80
 8002382:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8002384:	4b28      	ldr	r3, [pc, #160]	; (8002428 <MX_DMA_Init+0xd4>)
 8002386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800238a:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 800238c:	4b26      	ldr	r3, [pc, #152]	; (8002428 <MX_DMA_Init+0xd4>)
 800238e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002392:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002394:	4b24      	ldr	r3, [pc, #144]	; (8002428 <MX_DMA_Init+0xd4>)
 8002396:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800239a:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800239c:	4b22      	ldr	r3, [pc, #136]	; (8002428 <MX_DMA_Init+0xd4>)
 800239e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023a2:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 80023a4:	4b20      	ldr	r3, [pc, #128]	; (8002428 <MX_DMA_Init+0xd4>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 80023aa:	4b1f      	ldr	r3, [pc, #124]	; (8002428 <MX_DMA_Init+0xd4>)
 80023ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023b0:	621a      	str	r2, [r3, #32]
	hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <MX_DMA_Init+0xd4>)
 80023b4:	2204      	movs	r2, #4
 80023b6:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80023b8:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <MX_DMA_Init+0xd4>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80023be:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <MX_DMA_Init+0xd4>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80023c4:	4b18      	ldr	r3, [pc, #96]	; (8002428 <MX_DMA_Init+0xd4>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80023ca:	4817      	ldr	r0, [pc, #92]	; (8002428 <MX_DMA_Init+0xd4>)
 80023cc:	f004 f9e4 	bl	8006798 <HAL_DMA_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_DMA_Init+0x86>
	{
		Error_Handler( );
 80023d6:	f000 fabd 	bl	8002954 <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80023da:	2200      	movs	r2, #0
 80023dc:	2105      	movs	r1, #5
 80023de:	2038      	movs	r0, #56	; 0x38
 80023e0:	f003 ff6e 	bl	80062c0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80023e4:	2038      	movs	r0, #56	; 0x38
 80023e6:	f003 ff87 	bl	80062f8 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2105      	movs	r1, #5
 80023ee:	2039      	movs	r0, #57	; 0x39
 80023f0:	f003 ff66 	bl	80062c0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80023f4:	2039      	movs	r0, #57	; 0x39
 80023f6:	f003 ff7f 	bl	80062f8 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2105      	movs	r1, #5
 80023fe:	203c      	movs	r0, #60	; 0x3c
 8002400:	f003 ff5e 	bl	80062c0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002404:	203c      	movs	r0, #60	; 0x3c
 8002406:	f003 ff77 	bl	80062f8 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2105      	movs	r1, #5
 800240e:	2046      	movs	r0, #70	; 0x46
 8002410:	f003 ff56 	bl	80062c0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002414:	2046      	movs	r0, #70	; 0x46
 8002416:	f003 ff6f 	bl	80062f8 <HAL_NVIC_EnableIRQ>

}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	200007c0 	.word	0x200007c0
 800242c:	40026410 	.word	0x40026410

08002430 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
 8002444:	615a      	str	r2, [r3, #20]
 8002446:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002448:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <MX_FMC_Init+0xa0>)
 800244a:	4a22      	ldr	r2, [pc, #136]	; (80024d4 <MX_FMC_Init+0xa4>)
 800244c:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <MX_FMC_Init+0xa0>)
 8002450:	2200      	movs	r2, #0
 8002452:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002454:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <MX_FMC_Init+0xa0>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800245a:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <MX_FMC_Init+0xa0>)
 800245c:	2204      	movs	r2, #4
 800245e:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <MX_FMC_Init+0xa0>)
 8002462:	2210      	movs	r2, #16
 8002464:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002466:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <MX_FMC_Init+0xa0>)
 8002468:	2240      	movs	r2, #64	; 0x40
 800246a:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800246c:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <MX_FMC_Init+0xa0>)
 800246e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002472:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002474:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <MX_FMC_Init+0xa0>)
 8002476:	2200      	movs	r2, #0
 8002478:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <MX_FMC_Init+0xa0>)
 800247c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002480:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <MX_FMC_Init+0xa0>)
 8002484:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002488:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <MX_FMC_Init+0xa0>)
 800248c:	2200      	movs	r2, #0
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 8002490:	2302      	movs	r3, #2
 8002492:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8002494:	2307      	movs	r3, #7
 8002496:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8002498:	2304      	movs	r3, #4
 800249a:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 800249c:	2307      	movs	r3, #7
 800249e:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 80024a0:	2303      	movs	r3, #3
 80024a2:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 80024a4:	2302      	movs	r3, #2
 80024a6:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 80024a8:	2302      	movs	r3, #2
 80024aa:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	4619      	mov	r1, r3
 80024b0:	4807      	ldr	r0, [pc, #28]	; (80024d0 <MX_FMC_Init+0xa0>)
 80024b2:	f00b f8e0 	bl	800d676 <HAL_SDRAM_Init>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_FMC_Init+0x90>
	{
		Error_Handler( );
 80024bc:	f000 fa4a 	bl	8002954 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	DISCO_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80024c0:	f240 6003 	movw	r0, #1539	; 0x603
 80024c4:	f002 fa30 	bl	8004928 <DISCO_SDRAM_Initialization_sequence>

	/* USER CODE END FMC_Init 2 */
}
 80024c8:	bf00      	nop
 80024ca:	3720      	adds	r7, #32
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000f74 	.word	0x20000f74
 80024d4:	a0000140 	.word	0xa0000140

080024d8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b090      	sub	sp, #64	; 0x40
 80024dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
 80024ec:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80024ee:	4baf      	ldr	r3, [pc, #700]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4aae      	ldr	r2, [pc, #696]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80024f4:	f043 0310 	orr.w	r3, r3, #16
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4bac      	ldr	r3, [pc, #688]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
 8002504:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002506:	4ba9      	ldr	r3, [pc, #676]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4aa8      	ldr	r2, [pc, #672]	; (80027ac <MX_GPIO_Init+0x2d4>)
 800250c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4ba6      	ldr	r3, [pc, #664]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800251e:	4ba3      	ldr	r3, [pc, #652]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4aa2      	ldr	r2, [pc, #648]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4ba0      	ldr	r3, [pc, #640]	; (80027ac <MX_GPIO_Init+0x2d4>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	623b      	str	r3, [r7, #32]
 8002534:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002536:	4b9d      	ldr	r3, [pc, #628]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a9c      	ldr	r2, [pc, #624]	; (80027ac <MX_GPIO_Init+0x2d4>)
 800253c:	f043 0308 	orr.w	r3, r3, #8
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b9a      	ldr	r3, [pc, #616]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	61fb      	str	r3, [r7, #28]
 800254c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800254e:	4b97      	ldr	r3, [pc, #604]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a96      	ldr	r2, [pc, #600]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002554:	f043 0304 	orr.w	r3, r3, #4
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b94      	ldr	r3, [pc, #592]	; (80027ac <MX_GPIO_Init+0x2d4>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	61bb      	str	r3, [r7, #24]
 8002564:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002566:	4b91      	ldr	r3, [pc, #580]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a90      	ldr	r2, [pc, #576]	; (80027ac <MX_GPIO_Init+0x2d4>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b8e      	ldr	r3, [pc, #568]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 800257e:	4b8b      	ldr	r3, [pc, #556]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a8a      	ldr	r2, [pc, #552]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002584:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b88      	ldr	r3, [pc, #544]	; (80027ac <MX_GPIO_Init+0x2d4>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8002596:	4b85      	ldr	r3, [pc, #532]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	4a84      	ldr	r2, [pc, #528]	; (80027ac <MX_GPIO_Init+0x2d4>)
 800259c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a0:	6313      	str	r3, [r2, #48]	; 0x30
 80025a2:	4b82      	ldr	r3, [pc, #520]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 80025ae:	4b7f      	ldr	r3, [pc, #508]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	4a7e      	ldr	r2, [pc, #504]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80025b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ba:	4b7c      	ldr	r3, [pc, #496]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80025c6:	4b79      	ldr	r3, [pc, #484]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	4a78      	ldr	r2, [pc, #480]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80025cc:	f043 0320 	orr.w	r3, r3, #32
 80025d0:	6313      	str	r3, [r2, #48]	; 0x30
 80025d2:	4b76      	ldr	r3, [pc, #472]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	607b      	str	r3, [r7, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80025de:	4b73      	ldr	r3, [pc, #460]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	4a72      	ldr	r2, [pc, #456]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80025e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ea:	4b70      	ldr	r3, [pc, #448]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80025f6:	2201      	movs	r2, #1
 80025f8:	2120      	movs	r1, #32
 80025fa:	486d      	ldr	r0, [pc, #436]	; (80027b0 <MX_GPIO_Init+0x2d8>)
 80025fc:	f005 fb2a 	bl	8007c54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 8002600:	2200      	movs	r2, #0
 8002602:	210e      	movs	r1, #14
 8002604:	486b      	ldr	r0, [pc, #428]	; (80027b4 <MX_GPIO_Init+0x2dc>)
 8002606:	f005 fb25 	bl	8007c54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800260a:	2201      	movs	r2, #1
 800260c:	2108      	movs	r1, #8
 800260e:	486a      	ldr	r0, [pc, #424]	; (80027b8 <MX_GPIO_Init+0x2e0>)
 8002610:	f005 fb20 	bl	8007c54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002614:	2201      	movs	r2, #1
 8002616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800261a:	4866      	ldr	r0, [pc, #408]	; (80027b4 <MX_GPIO_Init+0x2dc>)
 800261c:	f005 fb1a 	bl	8007c54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002620:	2200      	movs	r2, #0
 8002622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002626:	4865      	ldr	r0, [pc, #404]	; (80027bc <MX_GPIO_Init+0x2e4>)
 8002628:	f005 fb14 	bl	8007c54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800262c:	2200      	movs	r2, #0
 800262e:	21c8      	movs	r1, #200	; 0xc8
 8002630:	4863      	ldr	r0, [pc, #396]	; (80027c0 <MX_GPIO_Init+0x2e8>)
 8002632:	f005 fb0f 	bl	8007c54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002636:	2308      	movs	r3, #8
 8002638:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800263a:	2300      	movs	r3, #0
 800263c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002642:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002646:	4619      	mov	r1, r3
 8002648:	485e      	ldr	r0, [pc, #376]	; (80027c4 <MX_GPIO_Init+0x2ec>)
 800264a:	f005 f84b 	bl	80076e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800264e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265c:	2303      	movs	r3, #3
 800265e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002660:	230b      	movs	r3, #11
 8002662:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002664:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002668:	4619      	mov	r1, r3
 800266a:	4855      	ldr	r0, [pc, #340]	; (80027c0 <MX_GPIO_Init+0x2e8>)
 800266c:	f005 f83a 	bl	80076e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002670:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267e:	2303      	movs	r3, #3
 8002680:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002682:	230a      	movs	r3, #10
 8002684:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002686:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800268a:	4619      	mov	r1, r3
 800268c:	484e      	ldr	r0, [pc, #312]	; (80027c8 <MX_GPIO_Init+0x2f0>)
 800268e:	f005 f829 	bl	80076e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002698:	2300      	movs	r3, #0
 800269a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80026a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026a4:	4619      	mov	r1, r3
 80026a6:	4849      	ldr	r0, [pc, #292]	; (80027cc <MX_GPIO_Init+0x2f4>)
 80026a8:	f005 f81c 	bl	80076e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 80026ac:	2340      	movs	r3, #64	; 0x40
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80026b0:	4b47      	ldr	r3, [pc, #284]	; (80027d0 <MX_GPIO_Init+0x2f8>)
 80026b2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80026b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026bc:	4619      	mov	r1, r3
 80026be:	483c      	ldr	r0, [pc, #240]	; (80027b0 <MX_GPIO_Init+0x2d8>)
 80026c0:	f005 f810 	bl	80076e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80026c4:	2320      	movs	r3, #32
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c8:	2301      	movs	r3, #1
 80026ca:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d0:	2300      	movs	r3, #0
 80026d2:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80026d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026d8:	4619      	mov	r1, r3
 80026da:	4835      	ldr	r0, [pc, #212]	; (80027b0 <MX_GPIO_Init+0x2d8>)
 80026dc:	f005 f802 	bl	80076e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 80026e0:	f241 030e 	movw	r3, #4110	; 0x100e
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e6:	2301      	movs	r3, #1
 80026e8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ee:	2300      	movs	r3, #0
 80026f0:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80026f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026f6:	4619      	mov	r1, r3
 80026f8:	482e      	ldr	r0, [pc, #184]	; (80027b4 <MX_GPIO_Init+0x2dc>)
 80026fa:	f004 fff3 	bl	80076e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80026fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002704:	2300      	movs	r3, #0
 8002706:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800270c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002710:	4619      	mov	r1, r3
 8002712:	4830      	ldr	r0, [pc, #192]	; (80027d4 <MX_GPIO_Init+0x2fc>)
 8002714:	f004 ffe6 	bl	80076e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002718:	2308      	movs	r3, #8
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800271c:	2301      	movs	r3, #1
 800271e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002724:	2300      	movs	r3, #0
 8002726:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800272c:	4619      	mov	r1, r3
 800272e:	4822      	ldr	r0, [pc, #136]	; (80027b8 <MX_GPIO_Init+0x2e0>)
 8002730:	f004 ffd8 	bl	80076e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002734:	2310      	movs	r3, #16
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002738:	2300      	movs	r3, #0
 800273a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002740:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002744:	4619      	mov	r1, r3
 8002746:	481a      	ldr	r0, [pc, #104]	; (80027b0 <MX_GPIO_Init+0x2d8>)
 8002748:	f004 ffcc 	bl	80076e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800274c:	f248 0304 	movw	r3, #32772	; 0x8004
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002752:	2300      	movs	r3, #0
 8002754:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800275a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800275e:	4619      	mov	r1, r3
 8002760:	4816      	ldr	r0, [pc, #88]	; (80027bc <MX_GPIO_Init+0x2e4>)
 8002762:	f004 ffbf 	bl	80076e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800276a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276c:	2301      	movs	r3, #1
 800276e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	2300      	movs	r3, #0
 8002776:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002778:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800277c:	4619      	mov	r1, r3
 800277e:	480f      	ldr	r0, [pc, #60]	; (80027bc <MX_GPIO_Init+0x2e4>)
 8002780:	f004 ffb0 	bl	80076e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : BLUE_BTN_Pin */
	GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 8002784:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800278a:	2300      	movs	r3, #0
 800278c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 8002792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002796:	4619      	mov	r1, r3
 8002798:	4806      	ldr	r0, [pc, #24]	; (80027b4 <MX_GPIO_Init+0x2dc>)
 800279a:	f004 ffa3 	bl	80076e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 800279e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <MX_GPIO_Init+0x300>)
 80027a6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	e017      	b.n	80027dc <MX_GPIO_Init+0x304>
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40020c00 	.word	0x40020c00
 80027b4:	40022000 	.word	0x40022000
 80027b8:	40022800 	.word	0x40022800
 80027bc:	40021c00 	.word	0x40021c00
 80027c0:	40021800 	.word	0x40021800
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40020400 	.word	0x40020400
 80027cc:	40022400 	.word	0x40022400
 80027d0:	10120000 	.word	0x10120000
 80027d4:	40020800 	.word	0x40020800
 80027d8:	10110000 	.word	0x10110000
 80027dc:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80027de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027e2:	4619      	mov	r1, r3
 80027e4:	4844      	ldr	r0, [pc, #272]	; (80028f8 <MX_GPIO_Init+0x420>)
 80027e6:	f004 ff7d 	bl	80076e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80027ea:	2310      	movs	r3, #16
 80027ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ee:	2302      	movs	r3, #2
 80027f0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f6:	2303      	movs	r3, #3
 80027f8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80027fa:	230a      	movs	r3, #10
 80027fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80027fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002802:	4619      	mov	r1, r3
 8002804:	483d      	ldr	r0, [pc, #244]	; (80028fc <MX_GPIO_Init+0x424>)
 8002806:	f004 ff6d 	bl	80076e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800280a:	23c8      	movs	r3, #200	; 0xc8
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800280e:	2301      	movs	r3, #1
 8002810:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002816:	2300      	movs	r3, #0
 8002818:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800281a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800281e:	4619      	mov	r1, r3
 8002820:	4837      	ldr	r0, [pc, #220]	; (8002900 <MX_GPIO_Init+0x428>)
 8002822:	f004 ff5f 	bl	80076e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002826:	2305      	movs	r3, #5
 8002828:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282a:	2302      	movs	r3, #2
 800282c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002832:	2303      	movs	r3, #3
 8002834:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002836:	230a      	movs	r3, #10
 8002838:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800283a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800283e:	4619      	mov	r1, r3
 8002840:	4830      	ldr	r0, [pc, #192]	; (8002904 <MX_GPIO_Init+0x42c>)
 8002842:	f004 ff4f 	bl	80076e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002846:	2332      	movs	r3, #50	; 0x32
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284a:	2302      	movs	r3, #2
 800284c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002852:	2303      	movs	r3, #3
 8002854:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002856:	230b      	movs	r3, #11
 8002858:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800285a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800285e:	4619      	mov	r1, r3
 8002860:	4828      	ldr	r0, [pc, #160]	; (8002904 <MX_GPIO_Init+0x42c>)
 8002862:	f004 ff3f 	bl	80076e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002866:	2304      	movs	r3, #4
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800286a:	2300      	movs	r3, #0
 800286c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002872:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002876:	4619      	mov	r1, r3
 8002878:	4821      	ldr	r0, [pc, #132]	; (8002900 <MX_GPIO_Init+0x428>)
 800287a:	f004 ff33 	bl	80076e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800287e:	2386      	movs	r3, #134	; 0x86
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002882:	2302      	movs	r3, #2
 8002884:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288a:	2303      	movs	r3, #3
 800288c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800288e:	230b      	movs	r3, #11
 8002890:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002896:	4619      	mov	r1, r3
 8002898:	481b      	ldr	r0, [pc, #108]	; (8002908 <MX_GPIO_Init+0x430>)
 800289a:	f004 ff23 	bl	80076e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800289e:	2328      	movs	r3, #40	; 0x28
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a2:	2302      	movs	r3, #2
 80028a4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028aa:	2303      	movs	r3, #3
 80028ac:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80028ae:	230a      	movs	r3, #10
 80028b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028b6:	4619      	mov	r1, r3
 80028b8:	4813      	ldr	r0, [pc, #76]	; (8002908 <MX_GPIO_Init+0x430>)
 80028ba:	f004 ff13 	bl	80076e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80028be:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028cc:	2300      	movs	r3, #0
 80028ce:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028d0:	2305      	movs	r3, #5
 80028d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028d8:	4619      	mov	r1, r3
 80028da:	480c      	ldr	r0, [pc, #48]	; (800290c <MX_GPIO_Init+0x434>)
 80028dc:	f004 ff02 	bl	80076e4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80028e0:	2200      	movs	r2, #0
 80028e2:	2105      	movs	r1, #5
 80028e4:	2028      	movs	r0, #40	; 0x28
 80028e6:	f003 fceb 	bl	80062c0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80028ea:	2028      	movs	r0, #40	; 0x28
 80028ec:	f003 fd04 	bl	80062f8 <HAL_NVIC_EnableIRQ>

}
 80028f0:	bf00      	nop
 80028f2:	3740      	adds	r7, #64	; 0x40
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40022000 	.word	0x40022000
 80028fc:	40021c00 	.word	0x40021c00
 8002900:	40021800 	.word	0x40021800
 8002904:	40020800 	.word	0x40020800
 8002908:	40020000 	.word	0x40020000
 800290c:	40020400 	.word	0x40020400

08002910 <Error>:

/* USER CODE BEGIN 4 */

void Error(char* msg)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	printf(msg);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f00e f9a1 	bl	8010c60 <iprintf>
	printf("\n");
 800291e:	200a      	movs	r0, #10
 8002920:	f00e f9b6 	bl	8010c90 <putchar>
	Error_Handler();
 8002924:	f000 f816 	bl	8002954 <Error_Handler>
}
 8002928:	bf00      	nop
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a04      	ldr	r2, [pc, #16]	; (8002950 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d101      	bne.n	8002946 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002942:	f003 f915 	bl	8005b70 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40001000 	.word	0x40001000

08002954 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	while (1)
	{
		LED_Toggle();
 8002958:	f001 fa42 	bl	8003de0 <LED_Toggle>
		HAL_Delay(100);
 800295c:	2064      	movs	r0, #100	; 0x64
 800295e:	f003 f927 	bl	8005bb0 <HAL_Delay>
		LED_Toggle();
 8002962:	e7f9      	b.n	8002958 <Error_Handler+0x4>

08002964 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800296a:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <HAL_MspInit+0x4c>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	4a10      	ldr	r2, [pc, #64]	; (80029b0 <HAL_MspInit+0x4c>)
 8002970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002974:	6413      	str	r3, [r2, #64]	; 0x40
 8002976:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <HAL_MspInit+0x4c>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297e:	607b      	str	r3, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_MspInit+0x4c>)
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <HAL_MspInit+0x4c>)
 8002988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800298c:	6453      	str	r3, [r2, #68]	; 0x44
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <HAL_MspInit+0x4c>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800299a:	2200      	movs	r2, #0
 800299c:	210f      	movs	r1, #15
 800299e:	f06f 0001 	mvn.w	r0, #1
 80029a2:	f003 fc8d 	bl	80062c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800

080029b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	; 0x28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a21      	ldr	r2, [pc, #132]	; (8002a58 <HAL_ADC_MspInit+0xa4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d13c      	bne.n	8002a50 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80029d6:	4b21      	ldr	r3, [pc, #132]	; (8002a5c <HAL_ADC_MspInit+0xa8>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	4a20      	ldr	r2, [pc, #128]	; (8002a5c <HAL_ADC_MspInit+0xa8>)
 80029dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029e0:	6453      	str	r3, [r2, #68]	; 0x44
 80029e2:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_ADC_MspInit+0xa8>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029ee:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <HAL_ADC_MspInit+0xa8>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a1a      	ldr	r2, [pc, #104]	; (8002a5c <HAL_ADC_MspInit+0xa8>)
 80029f4:	f043 0320 	orr.w	r3, r3, #32
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <HAL_ADC_MspInit+0xa8>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_ADC_MspInit+0xa8>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <HAL_ADC_MspInit+0xa8>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6313      	str	r3, [r2, #48]	; 0x30
 8002a12:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_ADC_MspInit+0xa8>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002a1e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002a22:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a24:	2303      	movs	r3, #3
 8002a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	4619      	mov	r1, r3
 8002a32:	480b      	ldr	r0, [pc, #44]	; (8002a60 <HAL_ADC_MspInit+0xac>)
 8002a34:	f004 fe56 	bl	80076e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4806      	ldr	r0, [pc, #24]	; (8002a64 <HAL_ADC_MspInit+0xb0>)
 8002a4c:	f004 fe4a 	bl	80076e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a50:	bf00      	nop
 8002a52:	3728      	adds	r7, #40	; 0x28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40012200 	.word	0x40012200
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40021400 	.word	0x40021400
 8002a64:	40020000 	.word	0x40020000

08002a68 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <HAL_CRC_MspInit+0x38>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d10b      	bne.n	8002a92 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <HAL_CRC_MspInit+0x3c>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a09      	ldr	r2, [pc, #36]	; (8002aa4 <HAL_CRC_MspInit+0x3c>)
 8002a80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <HAL_CRC_MspInit+0x3c>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40023000 	.word	0x40023000
 8002aa4:	40023800 	.word	0x40023800

08002aa8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08e      	sub	sp, #56	; 0x38
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a6c      	ldr	r2, [pc, #432]	; (8002c78 <HAL_DCMI_MspInit+0x1d0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	f040 80d2 	bne.w	8002c70 <HAL_DCMI_MspInit+0x1c8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002acc:	4b6b      	ldr	r3, [pc, #428]	; (8002c7c <HAL_DCMI_MspInit+0x1d4>)
 8002ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad0:	4a6a      	ldr	r2, [pc, #424]	; (8002c7c <HAL_DCMI_MspInit+0x1d4>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6353      	str	r3, [r2, #52]	; 0x34
 8002ad8:	4b68      	ldr	r3, [pc, #416]	; (8002c7c <HAL_DCMI_MspInit+0x1d4>)
 8002ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	623b      	str	r3, [r7, #32]
 8002ae2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ae4:	4b65      	ldr	r3, [pc, #404]	; (8002c7c <HAL_DCMI_MspInit+0x1d4>)
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	4a64      	ldr	r2, [pc, #400]	; (8002c7c <HAL_DCMI_MspInit+0x1d4>)
 8002aea:	f043 0310 	orr.w	r3, r3, #16
 8002aee:	6313      	str	r3, [r2, #48]	; 0x30
 8002af0:	4b62      	ldr	r3, [pc, #392]	; (8002c7c <HAL_DCMI_MspInit+0x1d4>)
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002afc:	4b5f      	ldr	r3, [pc, #380]	; (8002c7c <HAL_DCMI_MspInit+0x1d4>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	4a5e      	ldr	r2, [pc, #376]	; (8002c7c <HAL_DCMI_MspInit+0x1d4>)
 8002b02:	f043 0308 	orr.w	r3, r3, #8
 8002b06:	6313      	str	r3, [r2, #48]	; 0x30
 8002b08:	4b5c      	ldr	r3, [pc, #368]	; (8002c7c <HAL_DCMI_MspInit+0x1d4>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b14:	4b59      	ldr	r3, [pc, #356]	; (8002c7c <HAL_DCMI_MspInit+0x1d4>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	4a58      	ldr	r2, [pc, #352]	; (8002c7c <HAL_DCMI_MspInit+0x1d4>)
 8002b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b20:	4b56      	ldr	r3, [pc, #344]	; (8002c7c <HAL_DCMI_MspInit+0x1d4>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b2c:	4b53      	ldr	r3, [pc, #332]	; (8002c7c <HAL_DCMI_MspInit+0x1d4>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	4a52      	ldr	r2, [pc, #328]	; (8002c7c <HAL_DCMI_MspInit+0x1d4>)
 8002b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b36:	6313      	str	r3, [r2, #48]	; 0x30
 8002b38:	4b50      	ldr	r3, [pc, #320]	; (8002c7c <HAL_DCMI_MspInit+0x1d4>)
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b44:	4b4d      	ldr	r3, [pc, #308]	; (8002c7c <HAL_DCMI_MspInit+0x1d4>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	4a4c      	ldr	r2, [pc, #304]	; (8002c7c <HAL_DCMI_MspInit+0x1d4>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b50:	4b4a      	ldr	r3, [pc, #296]	; (8002c7c <HAL_DCMI_MspInit+0x1d4>)
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002b5c:	2360      	movs	r3, #96	; 0x60
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	2302      	movs	r3, #2
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002b6c:	230d      	movs	r3, #13
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b74:	4619      	mov	r1, r3
 8002b76:	4842      	ldr	r0, [pc, #264]	; (8002c80 <HAL_DCMI_MspInit+0x1d8>)
 8002b78:	f004 fdb4 	bl	80076e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b80:	2302      	movs	r3, #2
 8002b82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002b8c:	230d      	movs	r3, #13
 8002b8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b94:	4619      	mov	r1, r3
 8002b96:	483b      	ldr	r0, [pc, #236]	; (8002c84 <HAL_DCMI_MspInit+0x1dc>)
 8002b98:	f004 fda4 	bl	80076e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002baa:	2300      	movs	r3, #0
 8002bac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002bae:	230d      	movs	r3, #13
 8002bb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4833      	ldr	r0, [pc, #204]	; (8002c88 <HAL_DCMI_MspInit+0x1e0>)
 8002bba:	f004 fd93 	bl	80076e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002bbe:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002bd0:	230d      	movs	r3, #13
 8002bd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd8:	4619      	mov	r1, r3
 8002bda:	482c      	ldr	r0, [pc, #176]	; (8002c8c <HAL_DCMI_MspInit+0x1e4>)
 8002bdc:	f004 fd82 	bl	80076e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002be0:	2350      	movs	r3, #80	; 0x50
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bec:	2300      	movs	r3, #0
 8002bee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002bf0:	230d      	movs	r3, #13
 8002bf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4825      	ldr	r0, [pc, #148]	; (8002c90 <HAL_DCMI_MspInit+0x1e8>)
 8002bfc:	f004 fd72 	bl	80076e4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002c00:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <HAL_DCMI_MspInit+0x1ec>)
 8002c02:	4a25      	ldr	r2, [pc, #148]	; (8002c98 <HAL_DCMI_MspInit+0x1f0>)
 8002c04:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8002c06:	4b23      	ldr	r3, [pc, #140]	; (8002c94 <HAL_DCMI_MspInit+0x1ec>)
 8002c08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c0c:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c0e:	4b21      	ldr	r3, [pc, #132]	; (8002c94 <HAL_DCMI_MspInit+0x1ec>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c14:	4b1f      	ldr	r3, [pc, #124]	; (8002c94 <HAL_DCMI_MspInit+0x1ec>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002c1a:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <HAL_DCMI_MspInit+0x1ec>)
 8002c1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c20:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c22:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <HAL_DCMI_MspInit+0x1ec>)
 8002c24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c28:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c2a:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <HAL_DCMI_MspInit+0x1ec>)
 8002c2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c30:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8002c32:	4b18      	ldr	r3, [pc, #96]	; (8002c94 <HAL_DCMI_MspInit+0x1ec>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8002c38:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <HAL_DCMI_MspInit+0x1ec>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c3e:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <HAL_DCMI_MspInit+0x1ec>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002c44:	4813      	ldr	r0, [pc, #76]	; (8002c94 <HAL_DCMI_MspInit+0x1ec>)
 8002c46:	f003 fda7 	bl	8006798 <HAL_DMA_Init>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_DCMI_MspInit+0x1ac>
    {
      Error_Handler();
 8002c50:	f7ff fe80 	bl	8002954 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a0f      	ldr	r2, [pc, #60]	; (8002c94 <HAL_DCMI_MspInit+0x1ec>)
 8002c58:	649a      	str	r2, [r3, #72]	; 0x48
 8002c5a:	4a0e      	ldr	r2, [pc, #56]	; (8002c94 <HAL_DCMI_MspInit+0x1ec>)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8002c60:	2200      	movs	r2, #0
 8002c62:	2105      	movs	r1, #5
 8002c64:	204e      	movs	r0, #78	; 0x4e
 8002c66:	f003 fb2b 	bl	80062c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002c6a:	204e      	movs	r0, #78	; 0x4e
 8002c6c:	f003 fb44 	bl	80062f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002c70:	bf00      	nop
 8002c72:	3738      	adds	r7, #56	; 0x38
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	50050000 	.word	0x50050000
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40020c00 	.word	0x40020c00
 8002c88:	40021800 	.word	0x40021800
 8002c8c:	40021c00 	.word	0x40021c00
 8002c90:	40020000 	.word	0x40020000
 8002c94:	20000a0c 	.word	0x20000a0c
 8002c98:	40026428 	.word	0x40026428

08002c9c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a0d      	ldr	r2, [pc, #52]	; (8002ce0 <HAL_DMA2D_MspInit+0x44>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d113      	bne.n	8002cd6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002cae:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <HAL_DMA2D_MspInit+0x48>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	4a0c      	ldr	r2, [pc, #48]	; (8002ce4 <HAL_DMA2D_MspInit+0x48>)
 8002cb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <HAL_DMA2D_MspInit+0x48>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2105      	movs	r1, #5
 8002cca:	205a      	movs	r0, #90	; 0x5a
 8002ccc:	f003 faf8 	bl	80062c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002cd0:	205a      	movs	r0, #90	; 0x5a
 8002cd2:	f003 fb11 	bl	80062f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002cd6:	bf00      	nop
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	4002b000 	.word	0x4002b000
 8002ce4:	40023800 	.word	0x40023800

08002ce8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08c      	sub	sp, #48	; 0x30
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf0:	f107 031c 	add.w	r3, r7, #28
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a2f      	ldr	r2, [pc, #188]	; (8002dc4 <HAL_I2C_MspInit+0xdc>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d129      	bne.n	8002d5e <HAL_I2C_MspInit+0x76>
	//    gpio_init_structure.Speed = GPIO_SPEED_FAST;


  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0a:	4b2f      	ldr	r3, [pc, #188]	; (8002dc8 <HAL_I2C_MspInit+0xe0>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	4a2e      	ldr	r2, [pc, #184]	; (8002dc8 <HAL_I2C_MspInit+0xe0>)
 8002d10:	f043 0302 	orr.w	r3, r3, #2
 8002d14:	6313      	str	r3, [r2, #48]	; 0x30
 8002d16:	4b2c      	ldr	r3, [pc, #176]	; (8002dc8 <HAL_I2C_MspInit+0xe0>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002d22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d28:	2312      	movs	r3, #18
 8002d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d30:	2300      	movs	r3, #0
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d34:	2304      	movs	r3, #4
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d38:	f107 031c 	add.w	r3, r7, #28
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4823      	ldr	r0, [pc, #140]	; (8002dcc <HAL_I2C_MspInit+0xe4>)
 8002d40:	f004 fcd0 	bl	80076e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d44:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <HAL_I2C_MspInit+0xe0>)
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	4a1f      	ldr	r2, [pc, #124]	; (8002dc8 <HAL_I2C_MspInit+0xe0>)
 8002d4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d50:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <HAL_I2C_MspInit+0xe0>)
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002d5c:	e02d      	b.n	8002dba <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a1b      	ldr	r2, [pc, #108]	; (8002dd0 <HAL_I2C_MspInit+0xe8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d128      	bne.n	8002dba <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d68:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <HAL_I2C_MspInit+0xe0>)
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	4a16      	ldr	r2, [pc, #88]	; (8002dc8 <HAL_I2C_MspInit+0xe0>)
 8002d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d72:	6313      	str	r3, [r2, #48]	; 0x30
 8002d74:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <HAL_I2C_MspInit+0xe0>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002d80:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d86:	2312      	movs	r3, #18
 8002d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d92:	2304      	movs	r3, #4
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d96:	f107 031c 	add.w	r3, r7, #28
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	480d      	ldr	r0, [pc, #52]	; (8002dd4 <HAL_I2C_MspInit+0xec>)
 8002d9e:	f004 fca1 	bl	80076e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <HAL_I2C_MspInit+0xe0>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	4a08      	ldr	r2, [pc, #32]	; (8002dc8 <HAL_I2C_MspInit+0xe0>)
 8002da8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dac:	6413      	str	r3, [r2, #64]	; 0x40
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_I2C_MspInit+0xe0>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
}
 8002dba:	bf00      	nop
 8002dbc:	3730      	adds	r7, #48	; 0x30
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40005400 	.word	0x40005400
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40020400 	.word	0x40020400
 8002dd0:	40005c00 	.word	0x40005c00
 8002dd4:	40021c00 	.word	0x40021c00

08002dd8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a15      	ldr	r2, [pc, #84]	; (8002e3c <HAL_I2C_MspDeInit+0x64>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d110      	bne.n	8002e0c <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002dea:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <HAL_I2C_MspDeInit+0x68>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	4a14      	ldr	r2, [pc, #80]	; (8002e40 <HAL_I2C_MspDeInit+0x68>)
 8002df0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002df4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8002df6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dfa:	4812      	ldr	r0, [pc, #72]	; (8002e44 <HAL_I2C_MspDeInit+0x6c>)
 8002dfc:	f004 fe1e 	bl	8007a3c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002e00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e04:	480f      	ldr	r0, [pc, #60]	; (8002e44 <HAL_I2C_MspDeInit+0x6c>)
 8002e06:	f004 fe19 	bl	8007a3c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002e0a:	e013      	b.n	8002e34 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0d      	ldr	r2, [pc, #52]	; (8002e48 <HAL_I2C_MspDeInit+0x70>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d10e      	bne.n	8002e34 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002e16:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <HAL_I2C_MspDeInit+0x68>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	4a09      	ldr	r2, [pc, #36]	; (8002e40 <HAL_I2C_MspDeInit+0x68>)
 8002e1c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e20:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002e22:	2180      	movs	r1, #128	; 0x80
 8002e24:	4809      	ldr	r0, [pc, #36]	; (8002e4c <HAL_I2C_MspDeInit+0x74>)
 8002e26:	f004 fe09 	bl	8007a3c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8002e2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e2e:	4807      	ldr	r0, [pc, #28]	; (8002e4c <HAL_I2C_MspDeInit+0x74>)
 8002e30:	f004 fe04 	bl	8007a3c <HAL_GPIO_DeInit>
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40005400 	.word	0x40005400
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40020400 	.word	0x40020400
 8002e48:	40005c00 	.word	0x40005c00
 8002e4c:	40021c00 	.word	0x40021c00

08002e50 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08e      	sub	sp, #56	; 0x38
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a51      	ldr	r2, [pc, #324]	; (8002fb4 <HAL_LTDC_MspInit+0x164>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	f040 809b 	bne.w	8002faa <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002e74:	4b50      	ldr	r3, [pc, #320]	; (8002fb8 <HAL_LTDC_MspInit+0x168>)
 8002e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e78:	4a4f      	ldr	r2, [pc, #316]	; (8002fb8 <HAL_LTDC_MspInit+0x168>)
 8002e7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e7e:	6453      	str	r3, [r2, #68]	; 0x44
 8002e80:	4b4d      	ldr	r3, [pc, #308]	; (8002fb8 <HAL_LTDC_MspInit+0x168>)
 8002e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e88:	623b      	str	r3, [r7, #32]
 8002e8a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e8c:	4b4a      	ldr	r3, [pc, #296]	; (8002fb8 <HAL_LTDC_MspInit+0x168>)
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	4a49      	ldr	r2, [pc, #292]	; (8002fb8 <HAL_LTDC_MspInit+0x168>)
 8002e92:	f043 0310 	orr.w	r3, r3, #16
 8002e96:	6313      	str	r3, [r2, #48]	; 0x30
 8002e98:	4b47      	ldr	r3, [pc, #284]	; (8002fb8 <HAL_LTDC_MspInit+0x168>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ea4:	4b44      	ldr	r3, [pc, #272]	; (8002fb8 <HAL_LTDC_MspInit+0x168>)
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	4a43      	ldr	r2, [pc, #268]	; (8002fb8 <HAL_LTDC_MspInit+0x168>)
 8002eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eae:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb0:	4b41      	ldr	r3, [pc, #260]	; (8002fb8 <HAL_LTDC_MspInit+0x168>)
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002ebc:	4b3e      	ldr	r3, [pc, #248]	; (8002fb8 <HAL_LTDC_MspInit+0x168>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	4a3d      	ldr	r2, [pc, #244]	; (8002fb8 <HAL_LTDC_MspInit+0x168>)
 8002ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec8:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <HAL_LTDC_MspInit+0x168>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ed4:	4b38      	ldr	r3, [pc, #224]	; (8002fb8 <HAL_LTDC_MspInit+0x168>)
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	4a37      	ldr	r2, [pc, #220]	; (8002fb8 <HAL_LTDC_MspInit+0x168>)
 8002eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ede:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee0:	4b35      	ldr	r3, [pc, #212]	; (8002fb8 <HAL_LTDC_MspInit+0x168>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002eec:	4b32      	ldr	r3, [pc, #200]	; (8002fb8 <HAL_LTDC_MspInit+0x168>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	4a31      	ldr	r2, [pc, #196]	; (8002fb8 <HAL_LTDC_MspInit+0x168>)
 8002ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef8:	4b2f      	ldr	r3, [pc, #188]	; (8002fb8 <HAL_LTDC_MspInit+0x168>)
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002f04:	2310      	movs	r3, #16
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f10:	2300      	movs	r3, #0
 8002f12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f14:	230e      	movs	r3, #14
 8002f16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4827      	ldr	r0, [pc, #156]	; (8002fbc <HAL_LTDC_MspInit+0x16c>)
 8002f20:	f004 fbe0 	bl	80076e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002f24:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f32:	2300      	movs	r3, #0
 8002f34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f36:	230e      	movs	r3, #14
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f3e:	4619      	mov	r1, r3
 8002f40:	481f      	ldr	r0, [pc, #124]	; (8002fc0 <HAL_LTDC_MspInit+0x170>)
 8002f42:	f004 fbcf 	bl	80076e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002f46:	23f7      	movs	r3, #247	; 0xf7
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f52:	2300      	movs	r3, #0
 8002f54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f56:	230e      	movs	r3, #14
 8002f58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4818      	ldr	r0, [pc, #96]	; (8002fc4 <HAL_LTDC_MspInit+0x174>)
 8002f62:	f004 fbbf 	bl	80076e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f74:	2300      	movs	r3, #0
 8002f76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002f78:	2309      	movs	r3, #9
 8002f7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f80:	4619      	mov	r1, r3
 8002f82:	4811      	ldr	r0, [pc, #68]	; (8002fc8 <HAL_LTDC_MspInit+0x178>)
 8002f84:	f004 fbae 	bl	80076e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002f88:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f96:	2300      	movs	r3, #0
 8002f98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f9a:	230e      	movs	r3, #14
 8002f9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4809      	ldr	r0, [pc, #36]	; (8002fcc <HAL_LTDC_MspInit+0x17c>)
 8002fa6:	f004 fb9d 	bl	80076e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002faa:	bf00      	nop
 8002fac:	3738      	adds	r7, #56	; 0x38
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40016800 	.word	0x40016800
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40022400 	.word	0x40022400
 8002fc4:	40022800 	.word	0x40022800
 8002fc8:	40021800 	.word	0x40021800
 8002fcc:	40022000 	.word	0x40022000

08002fd0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08c      	sub	sp, #48	; 0x30
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd8:	f107 031c 	add.w	r3, r7, #28
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a3f      	ldr	r2, [pc, #252]	; (80030ec <HAL_QSPI_MspInit+0x11c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d178      	bne.n	80030e4 <HAL_QSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002ff2:	4b3f      	ldr	r3, [pc, #252]	; (80030f0 <HAL_QSPI_MspInit+0x120>)
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff6:	4a3e      	ldr	r2, [pc, #248]	; (80030f0 <HAL_QSPI_MspInit+0x120>)
 8002ff8:	f043 0302 	orr.w	r3, r3, #2
 8002ffc:	6393      	str	r3, [r2, #56]	; 0x38
 8002ffe:	4b3c      	ldr	r3, [pc, #240]	; (80030f0 <HAL_QSPI_MspInit+0x120>)
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	61bb      	str	r3, [r7, #24]
 8003008:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800300a:	4b39      	ldr	r3, [pc, #228]	; (80030f0 <HAL_QSPI_MspInit+0x120>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	4a38      	ldr	r2, [pc, #224]	; (80030f0 <HAL_QSPI_MspInit+0x120>)
 8003010:	f043 0310 	orr.w	r3, r3, #16
 8003014:	6313      	str	r3, [r2, #48]	; 0x30
 8003016:	4b36      	ldr	r3, [pc, #216]	; (80030f0 <HAL_QSPI_MspInit+0x120>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003022:	4b33      	ldr	r3, [pc, #204]	; (80030f0 <HAL_QSPI_MspInit+0x120>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	4a32      	ldr	r2, [pc, #200]	; (80030f0 <HAL_QSPI_MspInit+0x120>)
 8003028:	f043 0302 	orr.w	r3, r3, #2
 800302c:	6313      	str	r3, [r2, #48]	; 0x30
 800302e:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <HAL_QSPI_MspInit+0x120>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800303a:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <HAL_QSPI_MspInit+0x120>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	4a2c      	ldr	r2, [pc, #176]	; (80030f0 <HAL_QSPI_MspInit+0x120>)
 8003040:	f043 0308 	orr.w	r3, r3, #8
 8003044:	6313      	str	r3, [r2, #48]	; 0x30
 8003046:	4b2a      	ldr	r3, [pc, #168]	; (80030f0 <HAL_QSPI_MspInit+0x120>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003052:	2304      	movs	r3, #4
 8003054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003056:	2302      	movs	r3, #2
 8003058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305a:	2300      	movs	r3, #0
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800305e:	2303      	movs	r3, #3
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003062:	2309      	movs	r3, #9
 8003064:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003066:	f107 031c 	add.w	r3, r7, #28
 800306a:	4619      	mov	r1, r3
 800306c:	4821      	ldr	r0, [pc, #132]	; (80030f4 <HAL_QSPI_MspInit+0x124>)
 800306e:	f004 fb39 	bl	80076e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003072:	2340      	movs	r3, #64	; 0x40
 8003074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003076:	2302      	movs	r3, #2
 8003078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	2300      	movs	r3, #0
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307e:	2303      	movs	r3, #3
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003082:	230a      	movs	r3, #10
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003086:	f107 031c 	add.w	r3, r7, #28
 800308a:	4619      	mov	r1, r3
 800308c:	481a      	ldr	r0, [pc, #104]	; (80030f8 <HAL_QSPI_MspInit+0x128>)
 800308e:	f004 fb29 	bl	80076e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003092:	2304      	movs	r3, #4
 8003094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003096:	2302      	movs	r3, #2
 8003098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309a:	2300      	movs	r3, #0
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309e:	2303      	movs	r3, #3
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80030a2:	2309      	movs	r3, #9
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a6:	f107 031c 	add.w	r3, r7, #28
 80030aa:	4619      	mov	r1, r3
 80030ac:	4812      	ldr	r0, [pc, #72]	; (80030f8 <HAL_QSPI_MspInit+0x128>)
 80030ae:	f004 fb19 	bl	80076e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80030b2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80030b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b8:	2302      	movs	r3, #2
 80030ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c0:	2303      	movs	r3, #3
 80030c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80030c4:	2309      	movs	r3, #9
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030c8:	f107 031c 	add.w	r3, r7, #28
 80030cc:	4619      	mov	r1, r3
 80030ce:	480b      	ldr	r0, [pc, #44]	; (80030fc <HAL_QSPI_MspInit+0x12c>)
 80030d0:	f004 fb08 	bl	80076e4 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 80030d4:	2200      	movs	r2, #0
 80030d6:	2105      	movs	r1, #5
 80030d8:	205c      	movs	r0, #92	; 0x5c
 80030da:	f003 f8f1 	bl	80062c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80030de:	205c      	movs	r0, #92	; 0x5c
 80030e0:	f003 f90a 	bl	80062f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80030e4:	bf00      	nop
 80030e6:	3730      	adds	r7, #48	; 0x30
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	a0001000 	.word	0xa0001000
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40020400 	.word	0x40020400
 80030fc:	40020c00 	.word	0x40020c00

08003100 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a07      	ldr	r2, [pc, #28]	; (800312c <HAL_RTC_MspInit+0x2c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d105      	bne.n	800311e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003112:	4b07      	ldr	r3, [pc, #28]	; (8003130 <HAL_RTC_MspInit+0x30>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	4a06      	ldr	r2, [pc, #24]	; (8003130 <HAL_RTC_MspInit+0x30>)
 8003118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800311c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40002800 	.word	0x40002800
 8003130:	40023800 	.word	0x40023800

08003134 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08a      	sub	sp, #40	; 0x28
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313c:	f107 0314 	add.w	r3, r7, #20
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	60da      	str	r2, [r3, #12]
 800314a:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8003154:	d127      	bne.n	80031a6 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003156:	4b16      	ldr	r3, [pc, #88]	; (80031b0 <HAL_SPDIFRX_MspInit+0x7c>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	4a15      	ldr	r2, [pc, #84]	; (80031b0 <HAL_SPDIFRX_MspInit+0x7c>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003160:	6413      	str	r3, [r2, #64]	; 0x40
 8003162:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <HAL_SPDIFRX_MspInit+0x7c>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800316e:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <HAL_SPDIFRX_MspInit+0x7c>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	4a0f      	ldr	r2, [pc, #60]	; (80031b0 <HAL_SPDIFRX_MspInit+0x7c>)
 8003174:	f043 0308 	orr.w	r3, r3, #8
 8003178:	6313      	str	r3, [r2, #48]	; 0x30
 800317a:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <HAL_SPDIFRX_MspInit+0x7c>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318a:	2302      	movs	r3, #2
 800318c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003192:	2300      	movs	r3, #0
 8003194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003196:	2308      	movs	r3, #8
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800319a:	f107 0314 	add.w	r3, r7, #20
 800319e:	4619      	mov	r1, r3
 80031a0:	4804      	ldr	r0, [pc, #16]	; (80031b4 <HAL_SPDIFRX_MspInit+0x80>)
 80031a2:	f004 fa9f 	bl	80076e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80031a6:	bf00      	nop
 80031a8:	3728      	adds	r7, #40	; 0x28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800
 80031b4:	40020c00 	.word	0x40020c00

080031b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b089      	sub	sp, #36	; 0x24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a2e      	ldr	r2, [pc, #184]	; (8003280 <HAL_TIM_Base_MspInit+0xc8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d10c      	bne.n	80031e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031ca:	4b2e      	ldr	r3, [pc, #184]	; (8003284 <HAL_TIM_Base_MspInit+0xcc>)
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ce:	4a2d      	ldr	r2, [pc, #180]	; (8003284 <HAL_TIM_Base_MspInit+0xcc>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	6453      	str	r3, [r2, #68]	; 0x44
 80031d6:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <HAL_TIM_Base_MspInit+0xcc>)
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	61fb      	str	r3, [r7, #28]
 80031e0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80031e2:	e046      	b.n	8003272 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ec:	d10c      	bne.n	8003208 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031ee:	4b25      	ldr	r3, [pc, #148]	; (8003284 <HAL_TIM_Base_MspInit+0xcc>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	4a24      	ldr	r2, [pc, #144]	; (8003284 <HAL_TIM_Base_MspInit+0xcc>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	6413      	str	r3, [r2, #64]	; 0x40
 80031fa:	4b22      	ldr	r3, [pc, #136]	; (8003284 <HAL_TIM_Base_MspInit+0xcc>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	61bb      	str	r3, [r7, #24]
 8003204:	69bb      	ldr	r3, [r7, #24]
}
 8003206:	e034      	b.n	8003272 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1e      	ldr	r2, [pc, #120]	; (8003288 <HAL_TIM_Base_MspInit+0xd0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d10c      	bne.n	800322c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003212:	4b1c      	ldr	r3, [pc, #112]	; (8003284 <HAL_TIM_Base_MspInit+0xcc>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	4a1b      	ldr	r2, [pc, #108]	; (8003284 <HAL_TIM_Base_MspInit+0xcc>)
 8003218:	f043 0302 	orr.w	r3, r3, #2
 800321c:	6413      	str	r3, [r2, #64]	; 0x40
 800321e:	4b19      	ldr	r3, [pc, #100]	; (8003284 <HAL_TIM_Base_MspInit+0xcc>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	697b      	ldr	r3, [r7, #20]
}
 800322a:	e022      	b.n	8003272 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a16      	ldr	r2, [pc, #88]	; (800328c <HAL_TIM_Base_MspInit+0xd4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d10c      	bne.n	8003250 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003236:	4b13      	ldr	r3, [pc, #76]	; (8003284 <HAL_TIM_Base_MspInit+0xcc>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	4a12      	ldr	r2, [pc, #72]	; (8003284 <HAL_TIM_Base_MspInit+0xcc>)
 800323c:	f043 0308 	orr.w	r3, r3, #8
 8003240:	6413      	str	r3, [r2, #64]	; 0x40
 8003242:	4b10      	ldr	r3, [pc, #64]	; (8003284 <HAL_TIM_Base_MspInit+0xcc>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]
}
 800324e:	e010      	b.n	8003272 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0e      	ldr	r2, [pc, #56]	; (8003290 <HAL_TIM_Base_MspInit+0xd8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d10b      	bne.n	8003272 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800325a:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <HAL_TIM_Base_MspInit+0xcc>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	4a09      	ldr	r2, [pc, #36]	; (8003284 <HAL_TIM_Base_MspInit+0xcc>)
 8003260:	f043 0302 	orr.w	r3, r3, #2
 8003264:	6453      	str	r3, [r2, #68]	; 0x44
 8003266:	4b07      	ldr	r3, [pc, #28]	; (8003284 <HAL_TIM_Base_MspInit+0xcc>)
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
}
 8003272:	bf00      	nop
 8003274:	3724      	adds	r7, #36	; 0x24
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40010000 	.word	0x40010000
 8003284:	40023800 	.word	0x40023800
 8003288:	40000400 	.word	0x40000400
 800328c:	40000c00 	.word	0x40000c00
 8003290:	40010400 	.word	0x40010400

08003294 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0a      	ldr	r2, [pc, #40]	; (80032cc <HAL_TIM_PWM_MspInit+0x38>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d10b      	bne.n	80032be <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80032a6:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	4a09      	ldr	r2, [pc, #36]	; (80032d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80032ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b0:	6413      	str	r3, [r2, #64]	; 0x40
 80032b2:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80032be:	bf00      	nop
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40001800 	.word	0x40001800
 80032d0:	40023800 	.word	0x40023800

080032d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08c      	sub	sp, #48	; 0x30
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032dc:	f107 031c 	add.w	r3, r7, #28
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	60da      	str	r2, [r3, #12]
 80032ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a56      	ldr	r2, [pc, #344]	; (800344c <HAL_TIM_MspPostInit+0x178>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d11d      	bne.n	8003332 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f6:	4b56      	ldr	r3, [pc, #344]	; (8003450 <HAL_TIM_MspPostInit+0x17c>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	4a55      	ldr	r2, [pc, #340]	; (8003450 <HAL_TIM_MspPostInit+0x17c>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6313      	str	r3, [r2, #48]	; 0x30
 8003302:	4b53      	ldr	r3, [pc, #332]	; (8003450 <HAL_TIM_MspPostInit+0x17c>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800330e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003314:	2302      	movs	r3, #2
 8003316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	2300      	movs	r3, #0
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331c:	2300      	movs	r3, #0
 800331e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003320:	2301      	movs	r3, #1
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003324:	f107 031c 	add.w	r3, r7, #28
 8003328:	4619      	mov	r1, r3
 800332a:	484a      	ldr	r0, [pc, #296]	; (8003454 <HAL_TIM_MspPostInit+0x180>)
 800332c:	f004 f9da 	bl	80076e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003330:	e087      	b.n	8003442 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800333a:	d11d      	bne.n	8003378 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800333c:	4b44      	ldr	r3, [pc, #272]	; (8003450 <HAL_TIM_MspPostInit+0x17c>)
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	4a43      	ldr	r2, [pc, #268]	; (8003450 <HAL_TIM_MspPostInit+0x17c>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	6313      	str	r3, [r2, #48]	; 0x30
 8003348:	4b41      	ldr	r3, [pc, #260]	; (8003450 <HAL_TIM_MspPostInit+0x17c>)
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	617b      	str	r3, [r7, #20]
 8003352:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003354:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335a:	2302      	movs	r3, #2
 800335c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003362:	2300      	movs	r3, #0
 8003364:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003366:	2301      	movs	r3, #1
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800336a:	f107 031c 	add.w	r3, r7, #28
 800336e:	4619      	mov	r1, r3
 8003370:	4838      	ldr	r0, [pc, #224]	; (8003454 <HAL_TIM_MspPostInit+0x180>)
 8003372:	f004 f9b7 	bl	80076e4 <HAL_GPIO_Init>
}
 8003376:	e064      	b.n	8003442 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a36      	ldr	r2, [pc, #216]	; (8003458 <HAL_TIM_MspPostInit+0x184>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d11c      	bne.n	80033bc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003382:	4b33      	ldr	r3, [pc, #204]	; (8003450 <HAL_TIM_MspPostInit+0x17c>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	4a32      	ldr	r2, [pc, #200]	; (8003450 <HAL_TIM_MspPostInit+0x17c>)
 8003388:	f043 0302 	orr.w	r3, r3, #2
 800338c:	6313      	str	r3, [r2, #48]	; 0x30
 800338e:	4b30      	ldr	r3, [pc, #192]	; (8003450 <HAL_TIM_MspPostInit+0x17c>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800339a:	2310      	movs	r3, #16
 800339c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339e:	2302      	movs	r3, #2
 80033a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a6:	2300      	movs	r3, #0
 80033a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033aa:	2302      	movs	r3, #2
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80033ae:	f107 031c 	add.w	r3, r7, #28
 80033b2:	4619      	mov	r1, r3
 80033b4:	4829      	ldr	r0, [pc, #164]	; (800345c <HAL_TIM_MspPostInit+0x188>)
 80033b6:	f004 f995 	bl	80076e4 <HAL_GPIO_Init>
}
 80033ba:	e042      	b.n	8003442 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a27      	ldr	r2, [pc, #156]	; (8003460 <HAL_TIM_MspPostInit+0x18c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d11c      	bne.n	8003400 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80033c6:	4b22      	ldr	r3, [pc, #136]	; (8003450 <HAL_TIM_MspPostInit+0x17c>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	4a21      	ldr	r2, [pc, #132]	; (8003450 <HAL_TIM_MspPostInit+0x17c>)
 80033cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d0:	6313      	str	r3, [r2, #48]	; 0x30
 80033d2:	4b1f      	ldr	r3, [pc, #124]	; (8003450 <HAL_TIM_MspPostInit+0x17c>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80033de:	2301      	movs	r3, #1
 80033e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e2:	2302      	movs	r3, #2
 80033e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ea:	2300      	movs	r3, #0
 80033ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80033ee:	2302      	movs	r3, #2
 80033f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80033f2:	f107 031c 	add.w	r3, r7, #28
 80033f6:	4619      	mov	r1, r3
 80033f8:	481a      	ldr	r0, [pc, #104]	; (8003464 <HAL_TIM_MspPostInit+0x190>)
 80033fa:	f004 f973 	bl	80076e4 <HAL_GPIO_Init>
}
 80033fe:	e020      	b.n	8003442 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a18      	ldr	r2, [pc, #96]	; (8003468 <HAL_TIM_MspPostInit+0x194>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d11b      	bne.n	8003442 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800340a:	4b11      	ldr	r3, [pc, #68]	; (8003450 <HAL_TIM_MspPostInit+0x17c>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	4a10      	ldr	r2, [pc, #64]	; (8003450 <HAL_TIM_MspPostInit+0x17c>)
 8003410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003414:	6313      	str	r3, [r2, #48]	; 0x30
 8003416:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <HAL_TIM_MspPostInit+0x17c>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341e:	60bb      	str	r3, [r7, #8]
 8003420:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003422:	2340      	movs	r3, #64	; 0x40
 8003424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003426:	2302      	movs	r3, #2
 8003428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342a:	2300      	movs	r3, #0
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342e:	2300      	movs	r3, #0
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003432:	2309      	movs	r3, #9
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003436:	f107 031c 	add.w	r3, r7, #28
 800343a:	4619      	mov	r1, r3
 800343c:	480b      	ldr	r0, [pc, #44]	; (800346c <HAL_TIM_MspPostInit+0x198>)
 800343e:	f004 f951 	bl	80076e4 <HAL_GPIO_Init>
}
 8003442:	bf00      	nop
 8003444:	3730      	adds	r7, #48	; 0x30
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40010000 	.word	0x40010000
 8003450:	40023800 	.word	0x40023800
 8003454:	40020000 	.word	0x40020000
 8003458:	40000400 	.word	0x40000400
 800345c:	40020400 	.word	0x40020400
 8003460:	40000c00 	.word	0x40000c00
 8003464:	40022000 	.word	0x40022000
 8003468:	40001800 	.word	0x40001800
 800346c:	40021c00 	.word	0x40021c00

08003470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08c      	sub	sp, #48	; 0x30
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003478:	f107 031c 	add.w	r3, r7, #28
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a3c      	ldr	r2, [pc, #240]	; (8003580 <HAL_UART_MspInit+0x110>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d145      	bne.n	800351e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003492:	4b3c      	ldr	r3, [pc, #240]	; (8003584 <HAL_UART_MspInit+0x114>)
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	4a3b      	ldr	r2, [pc, #236]	; (8003584 <HAL_UART_MspInit+0x114>)
 8003498:	f043 0310 	orr.w	r3, r3, #16
 800349c:	6453      	str	r3, [r2, #68]	; 0x44
 800349e:	4b39      	ldr	r3, [pc, #228]	; (8003584 <HAL_UART_MspInit+0x114>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	61bb      	str	r3, [r7, #24]
 80034a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034aa:	4b36      	ldr	r3, [pc, #216]	; (8003584 <HAL_UART_MspInit+0x114>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	4a35      	ldr	r2, [pc, #212]	; (8003584 <HAL_UART_MspInit+0x114>)
 80034b0:	f043 0302 	orr.w	r3, r3, #2
 80034b4:	6313      	str	r3, [r2, #48]	; 0x30
 80034b6:	4b33      	ldr	r3, [pc, #204]	; (8003584 <HAL_UART_MspInit+0x114>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c2:	4b30      	ldr	r3, [pc, #192]	; (8003584 <HAL_UART_MspInit+0x114>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	4a2f      	ldr	r2, [pc, #188]	; (8003584 <HAL_UART_MspInit+0x114>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6313      	str	r3, [r2, #48]	; 0x30
 80034ce:	4b2d      	ldr	r3, [pc, #180]	; (8003584 <HAL_UART_MspInit+0x114>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034de:	2302      	movs	r3, #2
 80034e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e6:	2300      	movs	r3, #0
 80034e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034ea:	2307      	movs	r3, #7
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80034ee:	f107 031c 	add.w	r3, r7, #28
 80034f2:	4619      	mov	r1, r3
 80034f4:	4824      	ldr	r0, [pc, #144]	; (8003588 <HAL_UART_MspInit+0x118>)
 80034f6:	f004 f8f5 	bl	80076e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80034fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003500:	2302      	movs	r3, #2
 8003502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003504:	2300      	movs	r3, #0
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003508:	2300      	movs	r3, #0
 800350a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800350c:	2307      	movs	r3, #7
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003510:	f107 031c 	add.w	r3, r7, #28
 8003514:	4619      	mov	r1, r3
 8003516:	481d      	ldr	r0, [pc, #116]	; (800358c <HAL_UART_MspInit+0x11c>)
 8003518:	f004 f8e4 	bl	80076e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800351c:	e02c      	b.n	8003578 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1b      	ldr	r2, [pc, #108]	; (8003590 <HAL_UART_MspInit+0x120>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d127      	bne.n	8003578 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003528:	4b16      	ldr	r3, [pc, #88]	; (8003584 <HAL_UART_MspInit+0x114>)
 800352a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352c:	4a15      	ldr	r2, [pc, #84]	; (8003584 <HAL_UART_MspInit+0x114>)
 800352e:	f043 0320 	orr.w	r3, r3, #32
 8003532:	6453      	str	r3, [r2, #68]	; 0x44
 8003534:	4b13      	ldr	r3, [pc, #76]	; (8003584 <HAL_UART_MspInit+0x114>)
 8003536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003540:	4b10      	ldr	r3, [pc, #64]	; (8003584 <HAL_UART_MspInit+0x114>)
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	4a0f      	ldr	r2, [pc, #60]	; (8003584 <HAL_UART_MspInit+0x114>)
 8003546:	f043 0304 	orr.w	r3, r3, #4
 800354a:	6313      	str	r3, [r2, #48]	; 0x30
 800354c:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <HAL_UART_MspInit+0x114>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	60bb      	str	r3, [r7, #8]
 8003556:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003558:	23c0      	movs	r3, #192	; 0xc0
 800355a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355c:	2302      	movs	r3, #2
 800355e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003560:	2300      	movs	r3, #0
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003564:	2303      	movs	r3, #3
 8003566:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003568:	2308      	movs	r3, #8
 800356a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800356c:	f107 031c 	add.w	r3, r7, #28
 8003570:	4619      	mov	r1, r3
 8003572:	4808      	ldr	r0, [pc, #32]	; (8003594 <HAL_UART_MspInit+0x124>)
 8003574:	f004 f8b6 	bl	80076e4 <HAL_GPIO_Init>
}
 8003578:	bf00      	nop
 800357a:	3730      	adds	r7, #48	; 0x30
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40011000 	.word	0x40011000
 8003584:	40023800 	.word	0x40023800
 8003588:	40020400 	.word	0x40020400
 800358c:	40020000 	.word	0x40020000
 8003590:	40011400 	.word	0x40011400
 8003594:	40020800 	.word	0x40020800

08003598 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800359e:	1d3b      	adds	r3, r7, #4
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80035ac:	4b3d      	ldr	r3, [pc, #244]	; (80036a4 <HAL_FMC_MspInit+0x10c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d173      	bne.n	800369c <HAL_FMC_MspInit+0x104>
    return;
  }
  FMC_Initialized = 1;
 80035b4:	4b3b      	ldr	r3, [pc, #236]	; (80036a4 <HAL_FMC_MspInit+0x10c>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80035ba:	4b3b      	ldr	r3, [pc, #236]	; (80036a8 <HAL_FMC_MspInit+0x110>)
 80035bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035be:	4a3a      	ldr	r2, [pc, #232]	; (80036a8 <HAL_FMC_MspInit+0x110>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6393      	str	r3, [r2, #56]	; 0x38
 80035c6:	4b38      	ldr	r3, [pc, #224]	; (80036a8 <HAL_FMC_MspInit+0x110>)
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80035d2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80035d6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d8:	2302      	movs	r3, #2
 80035da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e0:	2303      	movs	r3, #3
 80035e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035e4:	230c      	movs	r3, #12
 80035e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035e8:	1d3b      	adds	r3, r7, #4
 80035ea:	4619      	mov	r1, r3
 80035ec:	482f      	ldr	r0, [pc, #188]	; (80036ac <HAL_FMC_MspInit+0x114>)
 80035ee:	f004 f879 	bl	80076e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80035f2:	f248 1333 	movw	r3, #33075	; 0x8133
 80035f6:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f8:	2302      	movs	r3, #2
 80035fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003600:	2303      	movs	r3, #3
 8003602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003604:	230c      	movs	r3, #12
 8003606:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003608:	1d3b      	adds	r3, r7, #4
 800360a:	4619      	mov	r1, r3
 800360c:	4828      	ldr	r0, [pc, #160]	; (80036b0 <HAL_FMC_MspInit+0x118>)
 800360e:	f004 f869 	bl	80076e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003612:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003616:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003618:	2302      	movs	r3, #2
 800361a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361c:	2300      	movs	r3, #0
 800361e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003620:	2303      	movs	r3, #3
 8003622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003624:	230c      	movs	r3, #12
 8003626:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003628:	1d3b      	adds	r3, r7, #4
 800362a:	4619      	mov	r1, r3
 800362c:	4821      	ldr	r0, [pc, #132]	; (80036b4 <HAL_FMC_MspInit+0x11c>)
 800362e:	f004 f859 	bl	80076e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003632:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003636:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003638:	2302      	movs	r3, #2
 800363a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363c:	2300      	movs	r3, #0
 800363e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003640:	2303      	movs	r3, #3
 8003642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003644:	230c      	movs	r3, #12
 8003646:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003648:	1d3b      	adds	r3, r7, #4
 800364a:	4619      	mov	r1, r3
 800364c:	481a      	ldr	r0, [pc, #104]	; (80036b8 <HAL_FMC_MspInit+0x120>)
 800364e:	f004 f849 	bl	80076e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003652:	2328      	movs	r3, #40	; 0x28
 8003654:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003656:	2302      	movs	r3, #2
 8003658:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800365e:	2303      	movs	r3, #3
 8003660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003662:	230c      	movs	r3, #12
 8003664:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003666:	1d3b      	adds	r3, r7, #4
 8003668:	4619      	mov	r1, r3
 800366a:	4814      	ldr	r0, [pc, #80]	; (80036bc <HAL_FMC_MspInit+0x124>)
 800366c:	f004 f83a 	bl	80076e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003670:	2308      	movs	r3, #8
 8003672:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003674:	2302      	movs	r3, #2
 8003676:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800367c:	2303      	movs	r3, #3
 800367e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003680:	230c      	movs	r3, #12
 8003682:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003684:	1d3b      	adds	r3, r7, #4
 8003686:	4619      	mov	r1, r3
 8003688:	480d      	ldr	r0, [pc, #52]	; (80036c0 <HAL_FMC_MspInit+0x128>)
 800368a:	f004 f82b 	bl	80076e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  // syd:
  /* Associate mem2mem DMA handle with SDRAM */
  __HAL_LINKDMA(&hsdram1, hdma, hdma_memtomem_dma2_stream0);
 800368e:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <HAL_FMC_MspInit+0x12c>)
 8003690:	4a0d      	ldr	r2, [pc, #52]	; (80036c8 <HAL_FMC_MspInit+0x130>)
 8003692:	631a      	str	r2, [r3, #48]	; 0x30
 8003694:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <HAL_FMC_MspInit+0x130>)
 8003696:	4a0b      	ldr	r2, [pc, #44]	; (80036c4 <HAL_FMC_MspInit+0x12c>)
 8003698:	639a      	str	r2, [r3, #56]	; 0x38
 800369a:	e000      	b.n	800369e <HAL_FMC_MspInit+0x106>
    return;
 800369c:	bf00      	nop
  //i.e.:
  // hsdram1.hdma = &hdma_memtomem_dma2_stream0;
  // hdma_memtomem_dma2_stream0.Parent = &hsdram1;

  /* USER CODE END FMC_MspInit 1 */
}
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20000230 	.word	0x20000230
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40021800 	.word	0x40021800
 80036b4:	40020c00 	.word	0x40020c00
 80036b8:	40021400 	.word	0x40021400
 80036bc:	40021c00 	.word	0x40021c00
 80036c0:	40020800 	.word	0x40020800
 80036c4:	20000f74 	.word	0x20000f74
 80036c8:	200007c0 	.word	0x200007c0

080036cc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80036d4:	f7ff ff60 	bl	8003598 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80036d8:	bf00      	nop
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a6f      	ldr	r2, [pc, #444]	; (80038ac <HAL_SAI_MspInit+0x1cc>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d175      	bne.n	80037de <HAL_SAI_MspInit+0xfe>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80036f2:	4b6f      	ldr	r3, [pc, #444]	; (80038b0 <HAL_SAI_MspInit+0x1d0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10b      	bne.n	8003712 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80036fa:	4b6e      	ldr	r3, [pc, #440]	; (80038b4 <HAL_SAI_MspInit+0x1d4>)
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	4a6d      	ldr	r2, [pc, #436]	; (80038b4 <HAL_SAI_MspInit+0x1d4>)
 8003700:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003704:	6453      	str	r3, [r2, #68]	; 0x44
 8003706:	4b6b      	ldr	r3, [pc, #428]	; (80038b4 <HAL_SAI_MspInit+0x1d4>)
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003712:	4b67      	ldr	r3, [pc, #412]	; (80038b0 <HAL_SAI_MspInit+0x1d0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3301      	adds	r3, #1
 8003718:	4a65      	ldr	r2, [pc, #404]	; (80038b0 <HAL_SAI_MspInit+0x1d0>)
 800371a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin;
 800371c:	2310      	movs	r3, #16
 800371e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003720:	2302      	movs	r3, #2
 8003722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003728:	2303      	movs	r3, #3
 800372a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800372c:	230a      	movs	r3, #10
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8003730:	f107 0314 	add.w	r3, r7, #20
 8003734:	4619      	mov	r1, r3
 8003736:	4860      	ldr	r0, [pc, #384]	; (80038b8 <HAL_SAI_MspInit+0x1d8>)
 8003738:	f003 ffd4 	bl	80076e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800373c:	23e0      	movs	r3, #224	; 0xe0
 800373e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003740:	2302      	movs	r3, #2
 8003742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003744:	2300      	movs	r3, #0
 8003746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003748:	2302      	movs	r3, #2
 800374a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800374c:	230a      	movs	r3, #10
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003750:	f107 0314 	add.w	r3, r7, #20
 8003754:	4619      	mov	r1, r3
 8003756:	4858      	ldr	r0, [pc, #352]	; (80038b8 <HAL_SAI_MspInit+0x1d8>)
 8003758:	f003 ffc4 	bl	80076e4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 800375c:	4b57      	ldr	r3, [pc, #348]	; (80038bc <HAL_SAI_MspInit+0x1dc>)
 800375e:	4a58      	ldr	r2, [pc, #352]	; (80038c0 <HAL_SAI_MspInit+0x1e0>)
 8003760:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8003762:	4b56      	ldr	r3, [pc, #344]	; (80038bc <HAL_SAI_MspInit+0x1dc>)
 8003764:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003768:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800376a:	4b54      	ldr	r3, [pc, #336]	; (80038bc <HAL_SAI_MspInit+0x1dc>)
 800376c:	2240      	movs	r2, #64	; 0x40
 800376e:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003770:	4b52      	ldr	r3, [pc, #328]	; (80038bc <HAL_SAI_MspInit+0x1dc>)
 8003772:	2200      	movs	r2, #0
 8003774:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8003776:	4b51      	ldr	r3, [pc, #324]	; (80038bc <HAL_SAI_MspInit+0x1dc>)
 8003778:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800377c:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800377e:	4b4f      	ldr	r3, [pc, #316]	; (80038bc <HAL_SAI_MspInit+0x1dc>)
 8003780:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003784:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003786:	4b4d      	ldr	r3, [pc, #308]	; (80038bc <HAL_SAI_MspInit+0x1dc>)
 8003788:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800378c:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 800378e:	4b4b      	ldr	r3, [pc, #300]	; (80038bc <HAL_SAI_MspInit+0x1dc>)
 8003790:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003794:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8003796:	4b49      	ldr	r3, [pc, #292]	; (80038bc <HAL_SAI_MspInit+0x1dc>)
 8003798:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800379c:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800379e:	4b47      	ldr	r3, [pc, #284]	; (80038bc <HAL_SAI_MspInit+0x1dc>)
 80037a0:	2204      	movs	r2, #4
 80037a2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80037a4:	4b45      	ldr	r3, [pc, #276]	; (80038bc <HAL_SAI_MspInit+0x1dc>)
 80037a6:	2203      	movs	r2, #3
 80037a8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 80037aa:	4b44      	ldr	r3, [pc, #272]	; (80038bc <HAL_SAI_MspInit+0x1dc>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80037b0:	4b42      	ldr	r3, [pc, #264]	; (80038bc <HAL_SAI_MspInit+0x1dc>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 80037b6:	4841      	ldr	r0, [pc, #260]	; (80038bc <HAL_SAI_MspInit+0x1dc>)
 80037b8:	f002 ffee 	bl	8006798 <HAL_DMA_Init>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_SAI_MspInit+0xe6>
    {
      Error_Handler();
 80037c2:	f7ff f8c7 	bl	8002954 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a3c      	ldr	r2, [pc, #240]	; (80038bc <HAL_SAI_MspInit+0x1dc>)
 80037ca:	671a      	str	r2, [r3, #112]	; 0x70
 80037cc:	4a3b      	ldr	r2, [pc, #236]	; (80038bc <HAL_SAI_MspInit+0x1dc>)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a39      	ldr	r2, [pc, #228]	; (80038bc <HAL_SAI_MspInit+0x1dc>)
 80037d6:	66da      	str	r2, [r3, #108]	; 0x6c
 80037d8:	4a38      	ldr	r2, [pc, #224]	; (80038bc <HAL_SAI_MspInit+0x1dc>)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a38      	ldr	r2, [pc, #224]	; (80038c4 <HAL_SAI_MspInit+0x1e4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d15c      	bne.n	80038a2 <HAL_SAI_MspInit+0x1c2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80037e8:	4b31      	ldr	r3, [pc, #196]	; (80038b0 <HAL_SAI_MspInit+0x1d0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10b      	bne.n	8003808 <HAL_SAI_MspInit+0x128>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80037f0:	4b30      	ldr	r3, [pc, #192]	; (80038b4 <HAL_SAI_MspInit+0x1d4>)
 80037f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f4:	4a2f      	ldr	r2, [pc, #188]	; (80038b4 <HAL_SAI_MspInit+0x1d4>)
 80037f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037fa:	6453      	str	r3, [r2, #68]	; 0x44
 80037fc:	4b2d      	ldr	r3, [pc, #180]	; (80038b4 <HAL_SAI_MspInit+0x1d4>)
 80037fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003800:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003808:	4b29      	ldr	r3, [pc, #164]	; (80038b0 <HAL_SAI_MspInit+0x1d0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3301      	adds	r3, #1
 800380e:	4a28      	ldr	r2, [pc, #160]	; (80038b0 <HAL_SAI_MspInit+0x1d0>)
 8003810:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003818:	2302      	movs	r3, #2
 800381a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381c:	2300      	movs	r3, #0
 800381e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003820:	2302      	movs	r3, #2
 8003822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003824:	230a      	movs	r3, #10
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003828:	f107 0314 	add.w	r3, r7, #20
 800382c:	4619      	mov	r1, r3
 800382e:	4826      	ldr	r0, [pc, #152]	; (80038c8 <HAL_SAI_MspInit+0x1e8>)
 8003830:	f003 ff58 	bl	80076e4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 8003834:	4b25      	ldr	r3, [pc, #148]	; (80038cc <HAL_SAI_MspInit+0x1ec>)
 8003836:	4a26      	ldr	r2, [pc, #152]	; (80038d0 <HAL_SAI_MspInit+0x1f0>)
 8003838:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 800383a:	4b24      	ldr	r3, [pc, #144]	; (80038cc <HAL_SAI_MspInit+0x1ec>)
 800383c:	2200      	movs	r2, #0
 800383e:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003840:	4b22      	ldr	r3, [pc, #136]	; (80038cc <HAL_SAI_MspInit+0x1ec>)
 8003842:	2200      	movs	r2, #0
 8003844:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003846:	4b21      	ldr	r3, [pc, #132]	; (80038cc <HAL_SAI_MspInit+0x1ec>)
 8003848:	2200      	movs	r2, #0
 800384a:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 800384c:	4b1f      	ldr	r3, [pc, #124]	; (80038cc <HAL_SAI_MspInit+0x1ec>)
 800384e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003852:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003854:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <HAL_SAI_MspInit+0x1ec>)
 8003856:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800385a:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800385c:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <HAL_SAI_MspInit+0x1ec>)
 800385e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003862:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003864:	4b19      	ldr	r3, [pc, #100]	; (80038cc <HAL_SAI_MspInit+0x1ec>)
 8003866:	f44f 7280 	mov.w	r2, #256	; 0x100
 800386a:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 800386c:	4b17      	ldr	r3, [pc, #92]	; (80038cc <HAL_SAI_MspInit+0x1ec>)
 800386e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003872:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003874:	4b15      	ldr	r3, [pc, #84]	; (80038cc <HAL_SAI_MspInit+0x1ec>)
 8003876:	2200      	movs	r2, #0
 8003878:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 800387a:	4814      	ldr	r0, [pc, #80]	; (80038cc <HAL_SAI_MspInit+0x1ec>)
 800387c:	f002 ff8c 	bl	8006798 <HAL_DMA_Init>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_SAI_MspInit+0x1aa>
    {
      Error_Handler();
 8003886:	f7ff f865 	bl	8002954 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a0f      	ldr	r2, [pc, #60]	; (80038cc <HAL_SAI_MspInit+0x1ec>)
 800388e:	671a      	str	r2, [r3, #112]	; 0x70
 8003890:	4a0e      	ldr	r2, [pc, #56]	; (80038cc <HAL_SAI_MspInit+0x1ec>)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a0c      	ldr	r2, [pc, #48]	; (80038cc <HAL_SAI_MspInit+0x1ec>)
 800389a:	66da      	str	r2, [r3, #108]	; 0x6c
 800389c:	4a0b      	ldr	r2, [pc, #44]	; (80038cc <HAL_SAI_MspInit+0x1ec>)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80038a2:	bf00      	nop
 80038a4:	3728      	adds	r7, #40	; 0x28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40015c04 	.word	0x40015c04
 80038b0:	20000234 	.word	0x20000234
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40022000 	.word	0x40022000
 80038bc:	20000db8 	.word	0x20000db8
 80038c0:	40026470 	.word	0x40026470
 80038c4:	40015c24 	.word	0x40015c24
 80038c8:	40021800 	.word	0x40021800
 80038cc:	2000086c 	.word	0x2000086c
 80038d0:	400264b8 	.word	0x400264b8

080038d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08c      	sub	sp, #48	; 0x30
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80038e4:	2200      	movs	r2, #0
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	2036      	movs	r0, #54	; 0x36
 80038ea:	f002 fce9 	bl	80062c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80038ee:	2036      	movs	r0, #54	; 0x36
 80038f0:	f002 fd02 	bl	80062f8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80038f4:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <HAL_InitTick+0xa0>)
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	4a1e      	ldr	r2, [pc, #120]	; (8003974 <HAL_InitTick+0xa0>)
 80038fa:	f043 0310 	orr.w	r3, r3, #16
 80038fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003900:	4b1c      	ldr	r3, [pc, #112]	; (8003974 <HAL_InitTick+0xa0>)
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800390c:	f107 0210 	add.w	r2, r7, #16
 8003910:	f107 0314 	add.w	r3, r7, #20
 8003914:	4611      	mov	r1, r2
 8003916:	4618      	mov	r0, r3
 8003918:	f008 f996 	bl	800bc48 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800391c:	f008 f96c 	bl	800bbf8 <HAL_RCC_GetPCLK1Freq>
 8003920:	4603      	mov	r3, r0
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003928:	4a13      	ldr	r2, [pc, #76]	; (8003978 <HAL_InitTick+0xa4>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	0c9b      	lsrs	r3, r3, #18
 8003930:	3b01      	subs	r3, #1
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003934:	4b11      	ldr	r3, [pc, #68]	; (800397c <HAL_InitTick+0xa8>)
 8003936:	4a12      	ldr	r2, [pc, #72]	; (8003980 <HAL_InitTick+0xac>)
 8003938:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800393a:	4b10      	ldr	r3, [pc, #64]	; (800397c <HAL_InitTick+0xa8>)
 800393c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003940:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003942:	4a0e      	ldr	r2, [pc, #56]	; (800397c <HAL_InitTick+0xa8>)
 8003944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003946:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <HAL_InitTick+0xa8>)
 800394a:	2200      	movs	r2, #0
 800394c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800394e:	4b0b      	ldr	r3, [pc, #44]	; (800397c <HAL_InitTick+0xa8>)
 8003950:	2200      	movs	r2, #0
 8003952:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003954:	4809      	ldr	r0, [pc, #36]	; (800397c <HAL_InitTick+0xa8>)
 8003956:	f009 ff69 	bl	800d82c <HAL_TIM_Base_Init>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d104      	bne.n	800396a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003960:	4806      	ldr	r0, [pc, #24]	; (800397c <HAL_InitTick+0xa8>)
 8003962:	f009 ffbb 	bl	800d8dc <HAL_TIM_Base_Start_IT>
 8003966:	4603      	mov	r3, r0
 8003968:	e000      	b.n	800396c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
}
 800396c:	4618      	mov	r0, r3
 800396e:	3730      	adds	r7, #48	; 0x30
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40023800 	.word	0x40023800
 8003978:	431bde83 	.word	0x431bde83
 800397c:	20000ff4 	.word	0x20000ff4
 8003980:	40001000 	.word	0x40001000

08003984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003988:	e7fe      	b.n	8003988 <NMI_Handler+0x4>

0800398a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800398a:	b480      	push	{r7}
 800398c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800398e:	e7fe      	b.n	800398e <HardFault_Handler+0x4>

08003990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003994:	e7fe      	b.n	8003994 <MemManage_Handler+0x4>

08003996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003996:	b480      	push	{r7}
 8003998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800399a:	e7fe      	b.n	800399a <BusFault_Handler+0x4>

0800399c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039a0:	e7fe      	b.n	80039a0 <UsageFault_Handler+0x4>

080039a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039a2:	b480      	push	{r7}
 80039a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039a6:	bf00      	nop
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80039b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80039b8:	f004 f980 	bl	8007cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039bc:	bf00      	nop
 80039be:	bd80      	pop	{r7, pc}

080039c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80039c4:	4802      	ldr	r0, [pc, #8]	; (80039d0 <TIM6_DAC_IRQHandler+0x10>)
 80039c6:	f00a f858 	bl	800da7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000ff4 	.word	0x20000ff4

080039d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// mem2mem DMA (eg SDRAM to RAM)

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 80039d8:	4802      	ldr	r0, [pc, #8]	; (80039e4 <DMA2_Stream0_IRQHandler+0x10>)
 80039da:	f003 f87d 	bl	8006ad8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	200007c0 	.word	0x200007c0

080039e8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	// DMA streaming from camera to memory

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80039ec:	4802      	ldr	r0, [pc, #8]	; (80039f8 <DMA2_Stream1_IRQHandler+0x10>)
 80039ee:	f003 f873 	bl	8006ad8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80039f2:	bf00      	nop
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000a0c 	.word	0x20000a0c

080039fc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	// audio out

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8003a00:	4802      	ldr	r0, [pc, #8]	; (8003a0c <DMA2_Stream4_IRQHandler+0x10>)
 8003a02:	f003 f869 	bl	8006ad8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000db8 	.word	0x20000db8

08003a10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003a14:	4802      	ldr	r0, [pc, #8]	; (8003a20 <OTG_FS_IRQHandler+0x10>)
 8003a16:	f004 f974 	bl	8007d02 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003a1a:	bf00      	nop
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20040c44 	.word	0x20040c44

08003a24 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

	// audio in

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8003a28:	4802      	ldr	r0, [pc, #8]	; (8003a34 <DMA2_Stream7_IRQHandler+0x10>)
 8003a2a:	f003 f855 	bl	8006ad8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	2000086c 	.word	0x2000086c

08003a38 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

	// c'était BSP_CAMERA_IRQHandler()

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003a3c:	4802      	ldr	r0, [pc, #8]	; (8003a48 <DCMI_IRQHandler+0x10>)
 8003a3e:	f002 fddb 	bl	80065f8 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000c78 	.word	0x20000c78

08003a4c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

	// c'était BSP_LCD_DMA2D_IRQHandler();

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003a50:	4802      	ldr	r0, [pc, #8]	; (8003a5c <DMA2D_IRQHandler+0x10>)
 8003a52:	f003 fc09 	bl	8007268 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000e9c 	.word	0x20000e9c

08003a60 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8003a64:	4802      	ldr	r0, [pc, #8]	; (8003a70 <QUADSPI_IRQHandler+0x10>)
 8003a66:	f006 fd2d 	bl	800a4c4 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20000fa8 	.word	0x20000fa8

08003a74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
	return 1;
 8003a78:	2301      	movs	r3, #1
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <_kill>:

int _kill(int pid, int sig)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a8e:	f00c fb8b 	bl	80101a8 <__errno>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2216      	movs	r2, #22
 8003a96:	601a      	str	r2, [r3, #0]
	return -1;
 8003a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <_exit>:

void _exit (int status)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003aac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff ffe7 	bl	8003a84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003ab6:	e7fe      	b.n	8003ab6 <_exit+0x12>

08003ab8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	e00a      	b.n	8003ae0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003aca:	f3af 8000 	nop.w
 8003ace:	4601      	mov	r1, r0
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	60ba      	str	r2, [r7, #8]
 8003ad6:	b2ca      	uxtb	r2, r1
 8003ad8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	3301      	adds	r3, #1
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	dbf0      	blt.n	8003aca <_read+0x12>
	}

return len;
 8003ae8:	687b      	ldr	r3, [r7, #4]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b086      	sub	sp, #24
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	e009      	b.n	8003b18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	60ba      	str	r2, [r7, #8]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 f971 	bl	8003df4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	3301      	adds	r3, #1
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	dbf1      	blt.n	8003b04 <_write+0x12>
	}
	return len;
 8003b20:	687b      	ldr	r3, [r7, #4]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <_close>:

int _close(int file)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
	return -1;
 8003b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b52:	605a      	str	r2, [r3, #4]
	return 0;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <_isatty>:

int _isatty(int file)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
	return 1;
 8003b6a:	2301      	movs	r3, #1
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
	return 0;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
	...

08003b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b9c:	4a14      	ldr	r2, [pc, #80]	; (8003bf0 <_sbrk+0x5c>)
 8003b9e:	4b15      	ldr	r3, [pc, #84]	; (8003bf4 <_sbrk+0x60>)
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ba8:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <_sbrk+0x64>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d102      	bne.n	8003bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bb0:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <_sbrk+0x64>)
 8003bb2:	4a12      	ldr	r2, [pc, #72]	; (8003bfc <_sbrk+0x68>)
 8003bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bb6:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <_sbrk+0x64>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d207      	bcs.n	8003bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bc4:	f00c faf0 	bl	80101a8 <__errno>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	220c      	movs	r2, #12
 8003bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bd2:	e009      	b.n	8003be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bd4:	4b08      	ldr	r3, [pc, #32]	; (8003bf8 <_sbrk+0x64>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bda:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <_sbrk+0x64>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4413      	add	r3, r2
 8003be2:	4a05      	ldr	r2, [pc, #20]	; (8003bf8 <_sbrk+0x64>)
 8003be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003be6:	68fb      	ldr	r3, [r7, #12]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	20050000 	.word	0x20050000
 8003bf4:	00000800 	.word	0x00000800
 8003bf8:	20000238 	.word	0x20000238
 8003bfc:	20040f58 	.word	0x20040f58

08003c00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <SystemInit+0x20>)
 8003c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0a:	4a05      	ldr	r2, [pc, #20]	; (8003c20 <SystemInit+0x20>)
 8003c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c14:	bf00      	nop
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	e000ed00 	.word	0xe000ed00

08003c24 <uiDisplayBasic>:
#include <stdio.h>

/**
 * Display basic UI information.
 */
void uiDisplayBasic(void) {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af02      	add	r7, sp, #8

	LCD_Clear(LCD_COLOR_WHITE);
 8003c2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c2e:	f000 fa91 	bl	8004154 <LCD_Clear>

	//LCD_SetTextColor(LCD_COLOR_BLUE);
	//LCD_FillRect(0, 0, LCD_GetXSize(), 90);

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8003c32:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003c36:	f000 fa13 	bl	8004060 <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 8003c3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c3e:	f000 fa3f 	bl	80040c0 <LCD_SetBackColor>
	LCD_SetFont(&Font24);
 8003c42:	4810      	ldr	r0, [pc, #64]	; (8003c84 <uiDisplayBasic+0x60>)
 8003c44:	f000 fa54 	bl	80040f0 <LCD_SetFont>
	LCD_DrawString(0, 0, (uint8_t*) "SIA 2021 - RT AUDIO FX", CENTER_MODE, true);
 8003c48:	2301      	movs	r3, #1
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	4a0e      	ldr	r2, [pc, #56]	; (8003c88 <uiDisplayBasic+0x64>)
 8003c50:	2100      	movs	r1, #0
 8003c52:	2000      	movs	r0, #0
 8003c54:	f000 fac6 	bl	80041e4 <LCD_DrawString>

	LCD_SetFont(&Font12);
 8003c58:	480c      	ldr	r0, [pc, #48]	; (8003c8c <uiDisplayBasic+0x68>)
 8003c5a:	f000 fa49 	bl	80040f0 <LCD_SetFont>
	LCD_DrawString(10, 30, (uint8_t*) "Input L =", LEFT_MODE, true);
 8003c5e:	2301      	movs	r3, #1
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	2303      	movs	r3, #3
 8003c64:	4a0a      	ldr	r2, [pc, #40]	; (8003c90 <uiDisplayBasic+0x6c>)
 8003c66:	211e      	movs	r1, #30
 8003c68:	200a      	movs	r0, #10
 8003c6a:	f000 fabb 	bl	80041e4 <LCD_DrawString>
	LCD_DrawString(10, 50, (uint8_t*) "Input R =", LEFT_MODE, true);
 8003c6e:	2301      	movs	r3, #1
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	2303      	movs	r3, #3
 8003c74:	4a07      	ldr	r2, [pc, #28]	; (8003c94 <uiDisplayBasic+0x70>)
 8003c76:	2132      	movs	r1, #50	; 0x32
 8003c78:	200a      	movs	r0, #10
 8003c7a:	f000 fab3 	bl	80041e4 <LCD_DrawString>

	/* Set the LCD Text Color */
	//LCD_SetTextColor(LCD_COLOR_BLUE);
	//LCD_DrawRect(10, 100, LCD_GetXSize() - 20, LCD_GetYSize() - 110);
	//LCD_DrawRect(11, 101, LCD_GetXSize() - 22, LCD_GetYSize() - 112);
}
 8003c7e:	bf00      	nop
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	2000001c 	.word	0x2000001c
 8003c88:	08013694 	.word	0x08013694
 8003c8c:	20000014 	.word	0x20000014
 8003c90:	080136ac 	.word	0x080136ac
 8003c94:	080136b8 	.word	0x080136b8

08003c98 <uiDisplayInputLevel>:


/**
 * Displays line or microphones input level on the LCD.
 */
void uiDisplayInputLevel(double inputLevelL, double inputLevelR) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b096      	sub	sp, #88	; 0x58
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	ed87 0b02 	vstr	d0, [r7, #8]
 8003ca2:	ed87 1b00 	vstr	d1, [r7]

	uint8_t buf[50];

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8003ca6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003caa:	f000 f9d9 	bl	8004060 <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 8003cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cb2:	f000 fa05 	bl	80040c0 <LCD_SetBackColor>
	LCD_SetFont(&Font12);
 8003cb6:	483a      	ldr	r0, [pc, #232]	; (8003da0 <uiDisplayInputLevel+0x108>)
 8003cb8:	f000 fa1a 	bl	80040f0 <LCD_SetFont>
	 LCD_DisplayStringAt(90, 30, (uint8_t *)buf, LEFT_MODE);

	 sprintf((char *)buf, "%d     ", (int)(inputLevelR));
	 LCD_DisplayStringAt(90, 50, (uint8_t *)buf, LEFT_MODE);*/

	if (inputLevelL > 0) {
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cc8:	f7fc ff46 	bl	8000b58 <__aeabi_dcmpgt>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d023      	beq.n	8003d1a <uiDisplayInputLevel+0x82>
		int lvl_db = (int) (20. * log10(inputLevelL));
 8003cd2:	ed97 0b02 	vldr	d0, [r7, #8]
 8003cd6:	f00f fa1b 	bl	8013110 <log10>
 8003cda:	ec51 0b10 	vmov	r0, r1, d0
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	4b30      	ldr	r3, [pc, #192]	; (8003da4 <uiDisplayInputLevel+0x10c>)
 8003ce4:	f7fc fca8 	bl	8000638 <__aeabi_dmul>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4610      	mov	r0, r2
 8003cee:	4619      	mov	r1, r3
 8003cf0:	f7fc ff52 	bl	8000b98 <__aeabi_d2iz>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
		sprintf((char*) buf, "%d dB   ", lvl_db);
 8003cf8:	f107 0314 	add.w	r3, r7, #20
 8003cfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cfe:	492a      	ldr	r1, [pc, #168]	; (8003da8 <uiDisplayInputLevel+0x110>)
 8003d00:	4618      	mov	r0, r3
 8003d02:	f00d f861 	bl	8010dc8 <siprintf>
		LCD_DrawString(90, 30, (uint8_t*) buf, LEFT_MODE, true);
 8003d06:	f107 0214 	add.w	r2, r7, #20
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	2303      	movs	r3, #3
 8003d10:	211e      	movs	r1, #30
 8003d12:	205a      	movs	r0, #90	; 0x5a
 8003d14:	f000 fa66 	bl	80041e4 <LCD_DrawString>
 8003d18:	e007      	b.n	8003d2a <uiDisplayInputLevel+0x92>
	} else
		LCD_DrawString(90, 30, (uint8_t*) "-inf dB", LEFT_MODE, true);
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	2303      	movs	r3, #3
 8003d20:	4a22      	ldr	r2, [pc, #136]	; (8003dac <uiDisplayInputLevel+0x114>)
 8003d22:	211e      	movs	r1, #30
 8003d24:	205a      	movs	r0, #90	; 0x5a
 8003d26:	f000 fa5d 	bl	80041e4 <LCD_DrawString>

	if (inputLevelR > 0) {
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d36:	f7fc ff0f 	bl	8000b58 <__aeabi_dcmpgt>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d023      	beq.n	8003d88 <uiDisplayInputLevel+0xf0>
		int lvl_db = (int) (20. * log10(inputLevelR));
 8003d40:	ed97 0b00 	vldr	d0, [r7]
 8003d44:	f00f f9e4 	bl	8013110 <log10>
 8003d48:	ec51 0b10 	vmov	r0, r1, d0
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	4b14      	ldr	r3, [pc, #80]	; (8003da4 <uiDisplayInputLevel+0x10c>)
 8003d52:	f7fc fc71 	bl	8000638 <__aeabi_dmul>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	f7fc ff1b 	bl	8000b98 <__aeabi_d2iz>
 8003d62:	4603      	mov	r3, r0
 8003d64:	64bb      	str	r3, [r7, #72]	; 0x48
		sprintf((char*) buf, "%d dB   ", lvl_db);
 8003d66:	f107 0314 	add.w	r3, r7, #20
 8003d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d6c:	490e      	ldr	r1, [pc, #56]	; (8003da8 <uiDisplayInputLevel+0x110>)
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f00d f82a 	bl	8010dc8 <siprintf>
		LCD_DrawString(90, 50, (uint8_t*) buf, LEFT_MODE, true);
 8003d74:	f107 0214 	add.w	r2, r7, #20
 8003d78:	2301      	movs	r3, #1
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	2132      	movs	r1, #50	; 0x32
 8003d80:	205a      	movs	r0, #90	; 0x5a
 8003d82:	f000 fa2f 	bl	80041e4 <LCD_DrawString>
	} else
		LCD_DrawString(90, 50, (uint8_t*) "-inf dB", LEFT_MODE, true);

}
 8003d86:	e007      	b.n	8003d98 <uiDisplayInputLevel+0x100>
		LCD_DrawString(90, 50, (uint8_t*) "-inf dB", LEFT_MODE, true);
 8003d88:	2301      	movs	r3, #1
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	4a07      	ldr	r2, [pc, #28]	; (8003dac <uiDisplayInputLevel+0x114>)
 8003d90:	2132      	movs	r1, #50	; 0x32
 8003d92:	205a      	movs	r0, #90	; 0x5a
 8003d94:	f000 fa26 	bl	80041e4 <LCD_DrawString>
}
 8003d98:	bf00      	nop
 8003d9a:	3750      	adds	r7, #80	; 0x50
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20000014 	.word	0x20000014
 8003da4:	40340000 	.word	0x40340000
 8003da8:	080136c4 	.word	0x080136c4
 8003dac:	080136d0 	.word	0x080136d0

08003db0 <LED_On>:
#include "stdio.h"


// -------------------------------- onboard green led (CN7, pin D13) --------------------------------

void LED_On(){
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_SET);
 8003db4:	2201      	movs	r2, #1
 8003db6:	2102      	movs	r1, #2
 8003db8:	4802      	ldr	r0, [pc, #8]	; (8003dc4 <LED_On+0x14>)
 8003dba:	f003 ff4b 	bl	8007c54 <HAL_GPIO_WritePin>
}
 8003dbe:	bf00      	nop
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40022000 	.word	0x40022000

08003dc8 <LED_Off>:

void LED_Off(){
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2102      	movs	r1, #2
 8003dd0:	4802      	ldr	r0, [pc, #8]	; (8003ddc <LED_Off+0x14>)
 8003dd2:	f003 ff3f 	bl	8007c54 <HAL_GPIO_WritePin>
}
 8003dd6:	bf00      	nop
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40022000 	.word	0x40022000

08003de0 <LED_Toggle>:

void LED_Toggle(){
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 8003de4:	2102      	movs	r1, #2
 8003de6:	4802      	ldr	r0, [pc, #8]	; (8003df0 <LED_Toggle+0x10>)
 8003de8:	f003 ff4d 	bl	8007c86 <HAL_GPIO_TogglePin>

}
 8003dec:	bf00      	nop
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40022000 	.word	0x40022000

08003df4 <__io_putchar>:
 * of the STLink (USB) programming port, it is enough to open a serial terminal on the host PC
 * (e.g., Hyperterminal or Putty on Windows, screen on Linux or Macos) to obtain a debugging console.
 * On linux/MacOS, this VCP shows up as /dev/ttyUSBSomething (ls /dev etc will provide you with its real name),
 * while on Windows, it's COMSOmething (from COM1 to ...).
 */
int __io_putchar(int ch){
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF); // beware blocking call! TODO => use DMA
 8003dfc:	1d39      	adds	r1, r7, #4
 8003dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e02:	2201      	movs	r2, #1
 8003e04:	4803      	ldr	r0, [pc, #12]	; (8003e14 <__io_putchar+0x20>)
 8003e06:	f00a fe65 	bl	800ead4 <HAL_UART_Transmit>
	return ch;
 8003e0a:	687b      	ldr	r3, [r7, #4]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20000cc8 	.word	0x20000cc8

08003e18 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08a      	sub	sp, #40	; 0x28
 8003e1c:	af04      	add	r7, sp, #16
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	4608      	mov	r0, r1
 8003e22:	4611      	mov	r1, r2
 8003e24:	461a      	mov	r2, r3
 8003e26:	4603      	mov	r3, r0
 8003e28:	72fb      	strb	r3, [r7, #11]
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	813b      	strh	r3, [r7, #8]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003e36:	7afb      	ldrb	r3, [r7, #11]
 8003e38:	b299      	uxth	r1, r3
 8003e3a:	88f8      	ldrh	r0, [r7, #6]
 8003e3c:	893a      	ldrh	r2, [r7, #8]
 8003e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e42:	9302      	str	r3, [sp, #8]
 8003e44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e46:	9301      	str	r3, [sp, #4]
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f005 fbb0 	bl	80095b4 <HAL_I2C_Mem_Read>
 8003e54:	4603      	mov	r3, r0
 8003e56:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003e58:	7dfb      	ldrb	r3, [r7, #23]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d004      	beq.n	8003e68 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003e5e:	7afb      	ldrb	r3, [r7, #11]
 8003e60:	4619      	mov	r1, r3
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f832 	bl	8003ecc <I2Cx_Error>
  }
  return status;
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b08a      	sub	sp, #40	; 0x28
 8003e76:	af04      	add	r7, sp, #16
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	4608      	mov	r0, r1
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	461a      	mov	r2, r3
 8003e80:	4603      	mov	r3, r0
 8003e82:	72fb      	strb	r3, [r7, #11]
 8003e84:	460b      	mov	r3, r1
 8003e86:	813b      	strh	r3, [r7, #8]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003e90:	7afb      	ldrb	r3, [r7, #11]
 8003e92:	b299      	uxth	r1, r3
 8003e94:	88f8      	ldrh	r0, [r7, #6]
 8003e96:	893a      	ldrh	r2, [r7, #8]
 8003e98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e9c:	9302      	str	r3, [sp, #8]
 8003e9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f005 fa6f 	bl	800938c <HAL_I2C_Mem_Write>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003eb2:	7dfb      	ldrb	r3, [r7, #23]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003eb8:	7afb      	ldrb	r3, [r7, #11]
 8003eba:	4619      	mov	r1, r3
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f805 	bl	8003ecc <I2Cx_Error>
  }
  return status;
 8003ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f005 fa27 	bl	800932c <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  HAL_I2C_Init(i2c_handler);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f005 f994 	bl	800920c <HAL_I2C_Init>
}
 8003ee4:	bf00      	nop
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <AUDIO_I2C_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_I2C_Write(uint8_t Addr, uint16_t Reg, uint16_t Value){
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	71fb      	strb	r3, [r7, #7]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	80bb      	strh	r3, [r7, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	807b      	strh	r3, [r7, #2]

  uint16_t tmp = Value;
 8003efe:	887b      	ldrh	r3, [r7, #2]
 8003f00:	81fb      	strh	r3, [r7, #14]

  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8003f02:	89fb      	ldrh	r3, [r7, #14]
 8003f04:	0a1b      	lsrs	r3, r3, #8
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	807b      	strh	r3, [r7, #2]

  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8003f0a:	89fb      	ldrh	r3, [r7, #14]
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	b21a      	sxth	r2, r3
 8003f12:	887b      	ldrh	r3, [r7, #2]
 8003f14:	b21b      	sxth	r3, r3
 8003f16:	4313      	orrs	r3, r2
 8003f18:	b21b      	sxth	r3, r3
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	807b      	strh	r3, [r7, #2]

  I2Cx_WriteMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8003f1e:	88ba      	ldrh	r2, [r7, #4]
 8003f20:	79f9      	ldrb	r1, [r7, #7]
 8003f22:	2302      	movs	r3, #2
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	1cbb      	adds	r3, r7, #2
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	4803      	ldr	r0, [pc, #12]	; (8003f3c <AUDIO_I2C_Write+0x50>)
 8003f2e:	f7ff ffa0 	bl	8003e72 <I2Cx_WriteMultiple>
}
 8003f32:	bf00      	nop
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000774 	.word	0x20000774

08003f40 <AUDIO_I2C_Read>:
  * Reads a single CONTROL data from the audio codec over the I2C bus.
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint16_t AUDIO_I2C_Read(uint8_t Addr, uint16_t Reg){
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	4603      	mov	r3, r0
 8003f48:	460a      	mov	r2, r1
 8003f4a:	71fb      	strb	r3, [r7, #7]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	80bb      	strh	r3, [r7, #4]

  uint16_t read_value = 0, tmp = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	81bb      	strh	r3, [r7, #12]
 8003f54:	2300      	movs	r3, #0
 8003f56:	81fb      	strh	r3, [r7, #14]

  I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8003f58:	88ba      	ldrh	r2, [r7, #4]
 8003f5a:	79f9      	ldrb	r1, [r7, #7]
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	9301      	str	r3, [sp, #4]
 8003f60:	f107 030c 	add.w	r3, r7, #12
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	2302      	movs	r3, #2
 8003f68:	480a      	ldr	r0, [pc, #40]	; (8003f94 <AUDIO_I2C_Read+0x54>)
 8003f6a:	f7ff ff55 	bl	8003e18 <I2Cx_ReadMultiple>

  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8003f6e:	89bb      	ldrh	r3, [r7, #12]
 8003f70:	0a1b      	lsrs	r3, r3, #8
 8003f72:	81fb      	strh	r3, [r7, #14]

  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8003f74:	89bb      	ldrh	r3, [r7, #12]
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	b21a      	sxth	r2, r3
 8003f7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	b21b      	sxth	r3, r3
 8003f84:	81fb      	strh	r3, [r7, #14]

  read_value = tmp;
 8003f86:	89fb      	ldrh	r3, [r7, #14]
 8003f88:	81bb      	strh	r3, [r7, #12]

  return read_value;
 8003f8a:	89bb      	ldrh	r3, [r7, #12]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000774 	.word	0x20000774

08003f98 <TS_I2C_Write>:
  * Writes a single control data to the touchscreen controller over the I2C bus.
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_I2C_Write(uint8_t Reg, uint8_t Value){
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	460a      	mov	r2, r1
 8003fa2:	71fb      	strb	r3, [r7, #7]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	71bb      	strb	r3, [r7, #6]

  I2Cx_WriteMultiple(&hi2c3, TS_I2C_ADDRESS, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	2301      	movs	r3, #1
 8003fae:	9301      	str	r3, [sp, #4]
 8003fb0:	1dbb      	adds	r3, r7, #6
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	2170      	movs	r1, #112	; 0x70
 8003fb8:	4803      	ldr	r0, [pc, #12]	; (8003fc8 <TS_I2C_Write+0x30>)
 8003fba:	f7ff ff5a 	bl	8003e72 <I2Cx_WriteMultiple>

}
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000774 	.word	0x20000774

08003fcc <LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
void LCD_Init(void){
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0

	/* check if FB has a pixel format coherent with PF_565 define */
#ifdef PF_565
	if (hltdc.LayerCfg[0].PixelFormat != LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB565, check MX_LTDC_Init() or undefine PF_565");
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <LCD_Init+0x44>)
 8003fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d002      	beq.n	8003fde <LCD_Init+0x12>
 8003fd8:	480e      	ldr	r0, [pc, #56]	; (8004014 <LCD_Init+0x48>)
 8003fda:	f7fe fc99 	bl	8002910 <Error>
#else
	if (hltdc.LayerCfg[0].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB888, check MX_LTDC_Init() or define PF_565");
#endif

#ifndef FB_IN_SDRAM
	HAL_LTDC_SetAddress(&hltdc, frameBuf0, 0);
 8003fde:	4b0e      	ldr	r3, [pc, #56]	; (8004018 <LCD_Init+0x4c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	480a      	ldr	r0, [pc, #40]	; (8004010 <LCD_Init+0x44>)
 8003fe8:	f005 ffc0 	bl	8009f6c <HAL_LTDC_SetAddress>
#endif

	LCD_DisplayOn();
 8003fec:	f000 f81a 	bl	8004024 <LCD_DisplayOn>

	LCD_SetFont(&LCD_DEFAULT_FONT);
 8003ff0:	480a      	ldr	r0, [pc, #40]	; (800401c <LCD_Init+0x50>)
 8003ff2:	f000 f87d 	bl	80040f0 <LCD_SetFont>

	LCD_SetBackColor(LCD_COLOR_WHITE);
 8003ff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ffa:	f000 f861 	bl	80040c0 <LCD_SetBackColor>
	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8003ffe:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8004002:	f000 f82d 	bl	8004060 <LCD_SetStrokeColor>
	LCD_SetFillColor(LCD_COLOR_RED);
 8004006:	4806      	ldr	r0, [pc, #24]	; (8004020 <LCD_Init+0x54>)
 8004008:	f000 f842 	bl	8004090 <LCD_SetFillColor>


}
 800400c:	bf00      	nop
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20000b88 	.word	0x20000b88
 8004014:	080136d8 	.word	0x080136d8
 8004018:	2000000c 	.word	0x2000000c
 800401c:	2000001c 	.word	0x2000001c
 8004020:	ffff0000 	.word	0xffff0000

08004024 <LCD_DisplayOn>:
/**
 * @brief  Enables the display.
 * @retval None
 */
void LCD_DisplayOn(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
	__HAL_LTDC_ENABLE(&hltdc);
 8004028:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <LCD_DisplayOn+0x30>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699a      	ldr	r2, [r3, #24]
 800402e:	4b09      	ldr	r3, [pc, #36]	; (8004054 <LCD_DisplayOn+0x30>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004038:	2201      	movs	r2, #1
 800403a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800403e:	4806      	ldr	r0, [pc, #24]	; (8004058 <LCD_DisplayOn+0x34>)
 8004040:	f003 fe08 	bl	8007c54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004044:	2201      	movs	r2, #1
 8004046:	2108      	movs	r1, #8
 8004048:	4804      	ldr	r0, [pc, #16]	; (800405c <LCD_DisplayOn+0x38>)
 800404a:	f003 fe03 	bl	8007c54 <HAL_GPIO_WritePin>
}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000b88 	.word	0x20000b88
 8004058:	40022000 	.word	0x40022000
 800405c:	40022800 	.word	0x40022800

08004060 <LCD_SetStrokeColor>:
/**
 * @brief  Sets the LCD stroke (and text) color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetStrokeColor(uint32_t Color8888)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
	StrokeColor = Color8888;
 8004068:	4a07      	ldr	r2, [pc, #28]	; (8004088 <LCD_SetStrokeColor+0x28>)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	StrokeColor565 = ARGB888ToRGB565(StrokeColor);
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <LCD_SetStrokeColor+0x28>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fa2c 	bl	80044d0 <ARGB888ToRGB565>
 8004078:	4603      	mov	r3, r0
 800407a:	461a      	mov	r2, r3
 800407c:	4b03      	ldr	r3, [pc, #12]	; (800408c <LCD_SetStrokeColor+0x2c>)
 800407e:	601a      	str	r2, [r3, #0]
#endif
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	2000023c 	.word	0x2000023c
 800408c:	20000248 	.word	0x20000248

08004090 <LCD_SetFillColor>:
/**
 * @brief  Sets the LCD fill color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetFillColor(uint32_t Color8888)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
	FillColor = Color8888;
 8004098:	4a07      	ldr	r2, [pc, #28]	; (80040b8 <LCD_SetFillColor+0x28>)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	FillColor565 = ARGB888ToRGB565(FillColor);
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <LCD_SetFillColor+0x28>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fa14 	bl	80044d0 <ARGB888ToRGB565>
 80040a8:	4603      	mov	r3, r0
 80040aa:	461a      	mov	r2, r3
 80040ac:	4b03      	ldr	r3, [pc, #12]	; (80040bc <LCD_SetFillColor+0x2c>)
 80040ae:	601a      	str	r2, [r3, #0]
#endif
}
 80040b0:	bf00      	nop
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	20000240 	.word	0x20000240
 80040bc:	2000024c 	.word	0x2000024c

080040c0 <LCD_SetBackColor>:
 * @brief  Sets the LCD background color.
 * @param  Color: Layer background color code ARGB(8-8-8-8)
 * @retval None
 */
void LCD_SetBackColor(uint32_t Color)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
	BackColor = Color;
 80040c8:	4a07      	ldr	r2, [pc, #28]	; (80040e8 <LCD_SetBackColor+0x28>)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	BackColor565 = ARGB888ToRGB565(BackColor);
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <LCD_SetBackColor+0x28>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 f9fc 	bl	80044d0 <ARGB888ToRGB565>
 80040d8:	4603      	mov	r3, r0
 80040da:	461a      	mov	r2, r3
 80040dc:	4b03      	ldr	r3, [pc, #12]	; (80040ec <LCD_SetBackColor+0x2c>)
 80040de:	601a      	str	r2, [r3, #0]
#endif
}
 80040e0:	bf00      	nop
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000244 	.word	0x20000244
 80040ec:	20000250 	.word	0x20000250

080040f0 <LCD_SetFont>:
 * @brief  Sets the LCD text font.
 * @param  fonts: Layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *fonts)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
	pFont = fonts;
 80040f8:	4a04      	ldr	r2, [pc, #16]	; (800410c <LCD_SetFont+0x1c>)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6013      	str	r3, [r2, #0]
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	20000254 	.word	0x20000254

08004110 <LCD_ErasePixel>:
 * @param  Xpos: X position
 * @param  Ypos: Y position
 * @retval None
 */
void LCD_ErasePixel(uint16_t Xpos, uint16_t Ypos)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	460a      	mov	r2, r1
 800411a:	80fb      	strh	r3, [r7, #6]
 800411c:	4613      	mov	r3, r2
 800411e:	80bb      	strh	r3, [r7, #4]
	__DrawPixel(Xpos, Ypos, BACK_COLOR);
 8004120:	4b0a      	ldr	r3, [pc, #40]	; (800414c <LCD_ErasePixel+0x3c>)
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <LCD_ErasePixel+0x40>)
 8004126:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004128:	88ba      	ldrh	r2, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	015b      	lsls	r3, r3, #5
 8004132:	461a      	mov	r2, r3
 8004134:	88fb      	ldrh	r3, [r7, #6]
 8004136:	4413      	add	r3, r2
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	440b      	add	r3, r1
 800413c:	b282      	uxth	r2, r0
 800413e:	801a      	strh	r2, [r3, #0]
	__CleanDCache();
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	20000250 	.word	0x20000250
 8004150:	20000b88 	.word	0x20000b88

08004154 <LCD_Clear>:
/**
 * @brief  Clears the whole LCD, ie fills with background color
 * @retval None
 */
void LCD_Clear()
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af02      	add	r7, sp, #8
	/* Clear the LCD */
	LL_FillBuffer((uint32_t *)(hltdc.LayerCfg[0].FBStartAdress), LCD_SCREEN_WIDTH, LCD_SCREEN_HEIGHT, 0, BackColor);
 800415a:	4b08      	ldr	r3, [pc, #32]	; (800417c <LCD_Clear+0x28>)
 800415c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415e:	4618      	mov	r0, r3
 8004160:	4b07      	ldr	r3, [pc, #28]	; (8004180 <LCD_Clear+0x2c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	2300      	movs	r3, #0
 8004168:	f44f 7288 	mov.w	r2, #272	; 0x110
 800416c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004170:	f000 f976 	bl	8004460 <LL_FillBuffer>
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000b88 	.word	0x20000b88
 8004180:	20000244 	.word	0x20000244

08004184 <LCD_DrawChar>:
 * @param  Ascii: Character ascii code
 *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
 * @retval None
 */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii, const boolean_t isOpaqueBackground)
{
 8004184:	b590      	push	{r4, r7, lr}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	4604      	mov	r4, r0
 800418c:	4608      	mov	r0, r1
 800418e:	4611      	mov	r1, r2
 8004190:	461a      	mov	r2, r3
 8004192:	4623      	mov	r3, r4
 8004194:	80fb      	strh	r3, [r7, #6]
 8004196:	4603      	mov	r3, r0
 8004198:	80bb      	strh	r3, [r7, #4]
 800419a:	460b      	mov	r3, r1
 800419c:	70fb      	strb	r3, [r7, #3]
 800419e:	4613      	mov	r3, r2
 80041a0:	70bb      	strb	r3, [r7, #2]
	DrawChar(Xpos, Ypos, &pFont->table[(Ascii-' ') * pFont->Height * ((pFont->Width + 7) / 8)], isOpaqueBackground);
 80041a2:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <LCD_DrawChar+0x5c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	3b20      	subs	r3, #32
 80041ac:	490c      	ldr	r1, [pc, #48]	; (80041e0 <LCD_DrawChar+0x5c>)
 80041ae:	6809      	ldr	r1, [r1, #0]
 80041b0:	88c9      	ldrh	r1, [r1, #6]
 80041b2:	fb01 f103 	mul.w	r1, r1, r3
 80041b6:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <LCD_DrawChar+0x5c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	889b      	ldrh	r3, [r3, #4]
 80041bc:	3307      	adds	r3, #7
 80041be:	2b00      	cmp	r3, #0
 80041c0:	da00      	bge.n	80041c4 <LCD_DrawChar+0x40>
 80041c2:	3307      	adds	r3, #7
 80041c4:	10db      	asrs	r3, r3, #3
 80041c6:	fb03 f301 	mul.w	r3, r3, r1
 80041ca:	441a      	add	r2, r3
 80041cc:	78bb      	ldrb	r3, [r7, #2]
 80041ce:	88b9      	ldrh	r1, [r7, #4]
 80041d0:	88f8      	ldrh	r0, [r7, #6]
 80041d2:	f000 f89d 	bl	8004310 <DrawChar>

}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd90      	pop	{r4, r7, pc}
 80041de:	bf00      	nop
 80041e0:	20000254 	.word	0x20000254

080041e4 <LCD_DrawString>:
 *            @arg  RIGHT_MODE
 *            @arg  LEFT_MODE
 * @retval None
 */
void LCD_DrawString(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Alignment, const boolean_t isOpaqueBackground)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60ba      	str	r2, [r7, #8]
 80041ec:	461a      	mov	r2, r3
 80041ee:	4603      	mov	r3, r0
 80041f0:	81fb      	strh	r3, [r7, #14]
 80041f2:	460b      	mov	r3, r1
 80041f4:	81bb      	strh	r3, [r7, #12]
 80041f6:	4613      	mov	r3, r2
 80041f8:	71fb      	strb	r3, [r7, #7]
	uint16_t ref_column = 1, i = 0;
 80041fa:	2301      	movs	r3, #1
 80041fc:	83fb      	strh	r3, [r7, #30]
 80041fe:	2300      	movs	r3, #0
 8004200:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 8004202:	2300      	movs	r3, #0
 8004204:	61bb      	str	r3, [r7, #24]
 8004206:	2300      	movs	r3, #0
 8004208:	613b      	str	r3, [r7, #16]
	uint8_t  *ptr = Text;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++) size ++ ;
 800420e:	e002      	b.n	8004216 <LCD_DrawString+0x32>
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	3301      	adds	r3, #1
 8004214:	61bb      	str	r3, [r7, #24]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	617a      	str	r2, [r7, #20]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f6      	bne.n	8004210 <LCD_DrawString+0x2c>

	/* Characters number per line */
	xsize = (LCD_SCREEN_WIDTH / pFont->Width);
 8004222:	4b3a      	ldr	r3, [pc, #232]	; (800430c <LCD_DrawString+0x128>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	889b      	ldrh	r3, [r3, #4]
 8004228:	461a      	mov	r2, r3
 800422a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800422e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004232:	613b      	str	r3, [r7, #16]

	switch (Alignment)
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	2b03      	cmp	r3, #3
 8004238:	d014      	beq.n	8004264 <LCD_DrawString+0x80>
 800423a:	2b03      	cmp	r3, #3
 800423c:	dc23      	bgt.n	8004286 <LCD_DrawString+0xa2>
 800423e:	2b01      	cmp	r3, #1
 8004240:	d002      	beq.n	8004248 <LCD_DrawString+0x64>
 8004242:	2b02      	cmp	r3, #2
 8004244:	d011      	beq.n	800426a <LCD_DrawString+0x86>
 8004246:	e01e      	b.n	8004286 <LCD_DrawString+0xa2>
	{
	case CENTER_MODE:
	{
		ref_column = Xpos + ((xsize - size)* pFont->Width) / 2;
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	4a2f      	ldr	r2, [pc, #188]	; (800430c <LCD_DrawString+0x128>)
 8004250:	6812      	ldr	r2, [r2, #0]
 8004252:	8892      	ldrh	r2, [r2, #4]
 8004254:	fb02 f303 	mul.w	r3, r2, r3
 8004258:	085b      	lsrs	r3, r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	89fb      	ldrh	r3, [r7, #14]
 800425e:	4413      	add	r3, r2
 8004260:	83fb      	strh	r3, [r7, #30]
		break;
 8004262:	e013      	b.n	800428c <LCD_DrawString+0xa8>
	}
	case LEFT_MODE:
	{
		ref_column = Xpos;
 8004264:	89fb      	ldrh	r3, [r7, #14]
 8004266:	83fb      	strh	r3, [r7, #30]
		break;
 8004268:	e010      	b.n	800428c <LCD_DrawString+0xa8>
	}
	case RIGHT_MODE:
	{
		ref_column = - Xpos + ((xsize - size)*pFont->Width);
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	b29a      	uxth	r2, r3
 8004272:	4b26      	ldr	r3, [pc, #152]	; (800430c <LCD_DrawString+0x128>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	889b      	ldrh	r3, [r3, #4]
 8004278:	fb12 f303 	smulbb	r3, r2, r3
 800427c:	b29a      	uxth	r2, r3
 800427e:	89fb      	ldrh	r3, [r7, #14]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	83fb      	strh	r3, [r7, #30]
		break;
 8004284:	e002      	b.n	800428c <LCD_DrawString+0xa8>
	}
	default:
	{
		ref_column = Xpos;
 8004286:	89fb      	ldrh	r3, [r7, #14]
 8004288:	83fb      	strh	r3, [r7, #30]
		break;
 800428a:	bf00      	nop
	}
	}

	/* Check that the Start column is located in the screen */
	if ((ref_column < 1) || (ref_column >= 0x8000))
 800428c:	8bfb      	ldrh	r3, [r7, #30]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <LCD_DrawString+0xb6>
 8004292:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004296:	2b00      	cmp	r3, #0
 8004298:	da16      	bge.n	80042c8 <LCD_DrawString+0xe4>
	{
		ref_column = 1;
 800429a:	2301      	movs	r3, #1
 800429c:	83fb      	strh	r3, [r7, #30]
	}

	/* Send the string character by character on LCD */
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 800429e:	e013      	b.n	80042c8 <LCD_DrawString+0xe4>
	{
		/* Display one character on LCD */
		LCD_DrawChar(ref_column, Ypos, *Text, isOpaqueBackground);
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	781a      	ldrb	r2, [r3, #0]
 80042a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80042a8:	89b9      	ldrh	r1, [r7, #12]
 80042aa:	8bf8      	ldrh	r0, [r7, #30]
 80042ac:	f7ff ff6a 	bl	8004184 <LCD_DrawChar>
		/* Decrement the column position by 16 */
		ref_column += pFont->Width;
 80042b0:	4b16      	ldr	r3, [pc, #88]	; (800430c <LCD_DrawString+0x128>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	889a      	ldrh	r2, [r3, #4]
 80042b6:	8bfb      	ldrh	r3, [r7, #30]
 80042b8:	4413      	add	r3, r2
 80042ba:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		Text++;
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	3301      	adds	r3, #1
 80042c0:	60bb      	str	r3, [r7, #8]
		i++;
 80042c2:	8bbb      	ldrh	r3, [r7, #28]
 80042c4:	3301      	adds	r3, #1
 80042c6:	83bb      	strh	r3, [r7, #28]
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bf14      	ite	ne
 80042d0:	2301      	movne	r3, #1
 80042d2:	2300      	moveq	r3, #0
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	8bbb      	ldrh	r3, [r7, #28]
 80042d8:	490c      	ldr	r1, [pc, #48]	; (800430c <LCD_DrawString+0x128>)
 80042da:	6809      	ldr	r1, [r1, #0]
 80042dc:	8889      	ldrh	r1, [r1, #4]
 80042de:	fb01 f303 	mul.w	r3, r1, r3
 80042e2:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	4908      	ldr	r1, [pc, #32]	; (800430c <LCD_DrawString+0x128>)
 80042ea:	6809      	ldr	r1, [r1, #0]
 80042ec:	8889      	ldrh	r1, [r1, #4]
 80042ee:	428b      	cmp	r3, r1
 80042f0:	bfac      	ite	ge
 80042f2:	2301      	movge	r3, #1
 80042f4:	2300      	movlt	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	4013      	ands	r3, r2
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1cf      	bne.n	80042a0 <LCD_DrawString+0xbc>
	}
}
 8004300:	bf00      	nop
 8004302:	bf00      	nop
 8004304:	3720      	adds	r7, #32
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20000254 	.word	0x20000254

08004310 <DrawChar>:
 * @param  Ypos: Start column address
 * @param  c: Pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c, const boolean_t isOpaqueBackground)
{
 8004310:	b590      	push	{r4, r7, lr}
 8004312:	b08b      	sub	sp, #44	; 0x2c
 8004314:	af00      	add	r7, sp, #0
 8004316:	60ba      	str	r2, [r7, #8]
 8004318:	461a      	mov	r2, r3
 800431a:	4603      	mov	r3, r0
 800431c:	81fb      	strh	r3, [r7, #14]
 800431e:	460b      	mov	r3, r1
 8004320:	81bb      	strh	r3, [r7, #12]
 8004322:	4613      	mov	r3, r2
 8004324:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 0, j = 0;
 8004326:	2300      	movs	r3, #0
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
 800432a:	2300      	movs	r3, #0
 800432c:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t  offset;
	uint8_t  *pchar;
	uint32_t line;

	height = pFont->Height;
 800432e:	4b49      	ldr	r3, [pc, #292]	; (8004454 <DrawChar+0x144>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	88db      	ldrh	r3, [r3, #6]
 8004334:	837b      	strh	r3, [r7, #26]
	width  = pFont->Width;
 8004336:	4b47      	ldr	r3, [pc, #284]	; (8004454 <DrawChar+0x144>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	889b      	ldrh	r3, [r3, #4]
 800433c:	833b      	strh	r3, [r7, #24]

	offset =  8 *((width + 7)/8) -  width ;
 800433e:	8b3b      	ldrh	r3, [r7, #24]
 8004340:	3307      	adds	r3, #7
 8004342:	2b00      	cmp	r3, #0
 8004344:	da00      	bge.n	8004348 <DrawChar+0x38>
 8004346:	3307      	adds	r3, #7
 8004348:	10db      	asrs	r3, r3, #3
 800434a:	b2db      	uxtb	r3, r3
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	b2da      	uxtb	r2, r3
 8004350:	8b3b      	ldrh	r3, [r7, #24]
 8004352:	b2db      	uxtb	r3, r3
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	75fb      	strb	r3, [r7, #23]

	for(i = 0; i < height; i++)
 8004358:	2300      	movs	r3, #0
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
 800435c:	e070      	b.n	8004440 <DrawChar+0x130>
	{
		pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800435e:	8b3b      	ldrh	r3, [r7, #24]
 8004360:	3307      	adds	r3, #7
 8004362:	2b00      	cmp	r3, #0
 8004364:	da00      	bge.n	8004368 <DrawChar+0x58>
 8004366:	3307      	adds	r3, #7
 8004368:	10db      	asrs	r3, r3, #3
 800436a:	461a      	mov	r2, r3
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	fb03 f302 	mul.w	r3, r3, r2
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	4413      	add	r3, r2
 8004376:	613b      	str	r3, [r7, #16]

		switch(((width + 7)/8))
 8004378:	8b3b      	ldrh	r3, [r7, #24]
 800437a:	3307      	adds	r3, #7
 800437c:	2b00      	cmp	r3, #0
 800437e:	da00      	bge.n	8004382 <DrawChar+0x72>
 8004380:	3307      	adds	r3, #7
 8004382:	10db      	asrs	r3, r3, #3
 8004384:	2b01      	cmp	r3, #1
 8004386:	d002      	beq.n	800438e <DrawChar+0x7e>
 8004388:	2b02      	cmp	r3, #2
 800438a:	d004      	beq.n	8004396 <DrawChar+0x86>
 800438c:	e00c      	b.n	80043a8 <DrawChar+0x98>
		{

		case 1:
			line =  pchar[0];
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	61fb      	str	r3, [r7, #28]
			break;
 8004394:	e016      	b.n	80043c4 <DrawChar+0xb4>

		case 2:
			line =  (pchar[0]<< 8) | pchar[1];
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	021b      	lsls	r3, r3, #8
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	3201      	adds	r2, #1
 80043a0:	7812      	ldrb	r2, [r2, #0]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	61fb      	str	r3, [r7, #28]
			break;
 80043a6:	e00d      	b.n	80043c4 <DrawChar+0xb4>

		case 3:
		default:
			line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	041a      	lsls	r2, r3, #16
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	3301      	adds	r3, #1
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	021b      	lsls	r3, r3, #8
 80043b6:	4313      	orrs	r3, r2
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	3202      	adds	r2, #2
 80043bc:	7812      	ldrb	r2, [r2, #0]
 80043be:	4313      	orrs	r3, r2
 80043c0:	61fb      	str	r3, [r7, #28]
			break;
 80043c2:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 80043c4:	2300      	movs	r3, #0
 80043c6:	623b      	str	r3, [r7, #32]
 80043c8:	e030      	b.n	800442c <DrawChar+0x11c>
		{
			if(line & (1 << (width- j + offset- 1)))
 80043ca:	8b3a      	ldrh	r2, [r7, #24]
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	1ad2      	subs	r2, r2, r3
 80043d0:	7dfb      	ldrb	r3, [r7, #23]
 80043d2:	4413      	add	r3, r2
 80043d4:	3b01      	subs	r3, #1
 80043d6:	2201      	movs	r2, #1
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	461a      	mov	r2, r3
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d012      	beq.n	800440c <DrawChar+0xfc>
			{
				__DrawPixel((Xpos + j), Ypos, STROKE_COLOR);
 80043e6:	4b1c      	ldr	r3, [pc, #112]	; (8004458 <DrawChar+0x148>)
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	4b1c      	ldr	r3, [pc, #112]	; (800445c <DrawChar+0x14c>)
 80043ec:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80043ee:	89ba      	ldrh	r2, [r7, #12]
 80043f0:	4613      	mov	r3, r2
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	1a9b      	subs	r3, r3, r2
 80043f6:	015b      	lsls	r3, r3, #5
 80043f8:	461c      	mov	r4, r3
 80043fa:	89fa      	ldrh	r2, [r7, #14]
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	4413      	add	r3, r2
 8004400:	4423      	add	r3, r4
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	440b      	add	r3, r1
 8004406:	b282      	uxth	r2, r0
 8004408:	801a      	strh	r2, [r3, #0]
 800440a:	e00c      	b.n	8004426 <DrawChar+0x116>
			}
			else
			{
				if (isOpaqueBackground == true) LCD_ErasePixel((Xpos + j), Ypos);
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d109      	bne.n	8004426 <DrawChar+0x116>
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	b29a      	uxth	r2, r3
 8004416:	89fb      	ldrh	r3, [r7, #14]
 8004418:	4413      	add	r3, r2
 800441a:	b29b      	uxth	r3, r3
 800441c:	89ba      	ldrh	r2, [r7, #12]
 800441e:	4611      	mov	r1, r2
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fe75 	bl	8004110 <LCD_ErasePixel>
		for (j = 0; j < width; j++)
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	3301      	adds	r3, #1
 800442a:	623b      	str	r3, [r7, #32]
 800442c:	8b3b      	ldrh	r3, [r7, #24]
 800442e:	6a3a      	ldr	r2, [r7, #32]
 8004430:	429a      	cmp	r2, r3
 8004432:	d3ca      	bcc.n	80043ca <DrawChar+0xba>
			}
		}
		Ypos++;
 8004434:	89bb      	ldrh	r3, [r7, #12]
 8004436:	3301      	adds	r3, #1
 8004438:	81bb      	strh	r3, [r7, #12]
	for(i = 0; i < height; i++)
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	3301      	adds	r3, #1
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
 8004440:	8b7b      	ldrh	r3, [r7, #26]
 8004442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004444:	429a      	cmp	r2, r3
 8004446:	d38a      	bcc.n	800435e <DrawChar+0x4e>
	}

	__CleanDCache();
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	372c      	adds	r7, #44	; 0x2c
 800444e:	46bd      	mov	sp, r7
 8004450:	bd90      	pop	{r4, r7, pc}
 8004452:	bf00      	nop
 8004454:	20000254 	.word	0x20000254
 8004458:	20000248 	.word	0x20000248
 800445c:	20000b88 	.word	0x20000b88

08004460 <LL_FillBuffer>:
 * @param  OffLine: Offset
 * @param  withColor: fill color in ARGB888 format (even if FB may use RGB565)
 * @retval None
 */
static void LL_FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t withColor)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af02      	add	r7, sp, #8
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
	/* Register to memory mode with ARGB8888 as color Mode */
	hdma2d.Init.Mode         = DMA2D_R2M;
 800446e:	4b16      	ldr	r3, [pc, #88]	; (80044c8 <LL_FillBuffer+0x68>)
 8004470:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004474:	605a      	str	r2, [r3, #4]
#ifdef PF_565
	/* RGB565 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_RGB565;
 8004476:	4b14      	ldr	r3, [pc, #80]	; (80044c8 <LL_FillBuffer+0x68>)
 8004478:	2202      	movs	r2, #2
 800447a:	609a      	str	r2, [r3, #8]
#else
	/* ARGB8888 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
#endif
	hdma2d.Init.OutputOffset = OffLine;
 800447c:	4a12      	ldr	r2, [pc, #72]	; (80044c8 <LL_FillBuffer+0x68>)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	60d3      	str	r3, [r2, #12]

	hdma2d.Instance = DMA2D;
 8004482:	4b11      	ldr	r3, [pc, #68]	; (80044c8 <LL_FillBuffer+0x68>)
 8004484:	4a11      	ldr	r2, [pc, #68]	; (80044cc <LL_FillBuffer+0x6c>)
 8004486:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8004488:	480f      	ldr	r0, [pc, #60]	; (80044c8 <LL_FillBuffer+0x68>)
 800448a:	f002 fd8f 	bl	8006fac <HAL_DMA2D_Init>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d115      	bne.n	80044c0 <LL_FillBuffer+0x60>
	{
		if(HAL_DMA2D_ConfigLayer(&hdma2d, 0) == HAL_OK)
 8004494:	2100      	movs	r1, #0
 8004496:	480c      	ldr	r0, [pc, #48]	; (80044c8 <LL_FillBuffer+0x68>)
 8004498:	f002 fff6 	bl	8007488 <HAL_DMA2D_ConfigLayer>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10e      	bne.n	80044c0 <LL_FillBuffer+0x60>
		{
			if (HAL_DMA2D_Start(&hdma2d, withColor, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	69b9      	ldr	r1, [r7, #24]
 80044ac:	4806      	ldr	r0, [pc, #24]	; (80044c8 <LL_FillBuffer+0x68>)
 80044ae:	f002 fdc7 	bl	8007040 <HAL_DMA2D_Start>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d103      	bne.n	80044c0 <LL_FillBuffer+0x60>
			{
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(&hdma2d, 10); // TODO : adapt to to CMSIS-RTOS
 80044b8:	210a      	movs	r1, #10
 80044ba:	4803      	ldr	r0, [pc, #12]	; (80044c8 <LL_FillBuffer+0x68>)
 80044bc:	f002 fdeb 	bl	8007096 <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 80044c0:	bf00      	nop
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20000e9c 	.word	0x20000e9c
 80044cc:	4002b000 	.word	0x4002b000

080044d0 <ARGB888ToRGB565>:

/**
 * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
 */
static uint16_t ARGB888ToRGB565(uint32_t RGB_Code)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
	uint8_t red   = (RGB_Code & 0x00FF0000) >> 16;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	0c1b      	lsrs	r3, r3, #16
 80044dc:	75fb      	strb	r3, [r7, #23]
	uint8_t green = (RGB_Code & 0x0000FF00) >> 8;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	0a1b      	lsrs	r3, r3, #8
 80044e2:	75bb      	strb	r3, [r7, #22]
	uint8_t blue  = (RGB_Code & 0x000000FF);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	757b      	strb	r3, [r7, #21]

	uint16_t b = (blue >> 3) & 0x1f; // 5 bits
 80044e8:	7d7b      	ldrb	r3, [r7, #21]
 80044ea:	08db      	lsrs	r3, r3, #3
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	f003 031f 	and.w	r3, r3, #31
 80044f4:	827b      	strh	r3, [r7, #18]
	uint16_t g = ((green >> 2) & 0x3f) << 5; // 6 bits
 80044f6:	7dbb      	ldrb	r3, [r7, #22]
 80044f8:	089b      	lsrs	r3, r3, #2
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	015b      	lsls	r3, r3, #5
 80044fe:	b29b      	uxth	r3, r3
 8004500:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8004504:	823b      	strh	r3, [r7, #16]
	uint16_t r = ((red >> 3) & 0x1f) << 11; // 5 bits
 8004506:	7dfb      	ldrb	r3, [r7, #23]
 8004508:	08db      	lsrs	r3, r3, #3
 800450a:	b2db      	uxtb	r3, r3
 800450c:	02db      	lsls	r3, r3, #11
 800450e:	81fb      	strh	r3, [r7, #14]

	return (uint16_t) (r | g | b);
 8004510:	89fa      	ldrh	r2, [r7, #14]
 8004512:	8a3b      	ldrh	r3, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	b29a      	uxth	r2, r3
 8004518:	8a7b      	ldrh	r3, [r7, #18]
 800451a:	4313      	orrs	r3, r2
 800451c:	b29b      	uxth	r3, r3
}
 800451e:	4618      	mov	r0, r3
 8004520:	371c      	adds	r7, #28
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
	...

0800452c <DISCO_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t DISCO_QSPI_EnableMemoryMappedMode(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b090      	sub	sp, #64	; 0x40
 8004530:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004532:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004536:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8004538:	23eb      	movs	r3, #235	; 0xeb
 800453a:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800453c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8004542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004546:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004548:	2300      	movs	r3, #0
 800454a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800454c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8004550:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8004552:	230a      	movs	r3, #10
 8004554:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004556:	2300      	movs	r3, #0
 8004558:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800455a:	2300      	movs	r3, #0
 800455c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800455e:	2300      	movs	r3, #0
 8004560:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8004562:	2300      	movs	r3, #0
 8004564:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004566:	2300      	movs	r3, #0
 8004568:	603b      	str	r3, [r7, #0]

  if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800456a:	463a      	mov	r2, r7
 800456c:	f107 0308 	add.w	r3, r7, #8
 8004570:	4619      	mov	r1, r3
 8004572:	4806      	ldr	r0, [pc, #24]	; (800458c <DISCO_QSPI_EnableMemoryMappedMode+0x60>)
 8004574:	f006 fb74 	bl	800ac60 <HAL_QSPI_MemoryMapped>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <DISCO_QSPI_EnableMemoryMappedMode+0x56>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <DISCO_QSPI_EnableMemoryMappedMode+0x58>
  }

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3740      	adds	r7, #64	; 0x40
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	20000fa8 	.word	0x20000fa8

08004590 <DISCO_QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b090      	sub	sp, #64	; 0x40
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800459c:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 800459e:	2366      	movs	r3, #102	; 0x66
 80045a0:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80045a2:	2300      	movs	r3, #0
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80045a6:	2300      	movs	r3, #0
 80045a8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80045aa:	2300      	movs	r3, #0
 80045ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80045b2:	2300      	movs	r3, #0
 80045b4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80045b6:	2300      	movs	r3, #0
 80045b8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80045ba:	2300      	movs	r3, #0
 80045bc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045be:	f107 0308 	add.w	r3, r7, #8
 80045c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c6:	4619      	mov	r1, r3
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f006 f93b 	bl	800a844 <HAL_QSPI_Command>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <DISCO_QSPI_ResetMemory+0x48>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e019      	b.n	800460c <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 80045d8:	2399      	movs	r3, #153	; 0x99
 80045da:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045dc:	f107 0308 	add.w	r3, r7, #8
 80045e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f006 f92c 	bl	800a844 <HAL_QSPI_Command>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <DISCO_QSPI_ResetMemory+0x66>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e00a      	b.n	800460c <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045f6:	f241 3188 	movw	r1, #5000	; 0x1388
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f8c7 	bl	800478e <QSPI_AutoPollingMemReady>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <DISCO_QSPI_ResetMemory+0x7a>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <DISCO_QSPI_ResetMemory+0x7c>
  }

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3740      	adds	r7, #64	; 0x40
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <DISCO_QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b094      	sub	sp, #80	; 0x50
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800461c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004620:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8004622:	2385      	movs	r3, #133	; 0x85
 8004624:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004626:	2300      	movs	r3, #0
 8004628:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800462a:	2300      	movs	r3, #0
 800462c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800462e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004632:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8004638:	2301      	movs	r3, #1
 800463a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800463c:	2300      	movs	r3, #0
 800463e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004640:	2300      	movs	r3, #0
 8004642:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004644:	2300      	movs	r3, #0
 8004646:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004648:	f107 0310 	add.w	r3, r7, #16
 800464c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004650:	4619      	mov	r1, r3
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f006 f8f6 	bl	800a844 <HAL_QSPI_Command>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <DISCO_QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e048      	b.n	80046f4 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004662:	f107 030f 	add.w	r3, r7, #15
 8004666:	f241 3288 	movw	r2, #5000	; 0x1388
 800466a:	4619      	mov	r1, r3
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f006 f9de 	bl	800aa2e <HAL_QSPI_Receive>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <DISCO_QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e03b      	b.n	80046f4 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != HAL_OK)
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f83d 	bl	80046fc <QSPI_WriteEnable>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <DISCO_QSPI_DummyCyclesCfg+0x78>
  {
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e033      	b.n	80046f4 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 800468c:	2381      	movs	r3, #129	; 0x81
 800468e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004690:	7bfb      	ldrb	r3, [r7, #15]
 8004692:	b25b      	sxtb	r3, r3
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	b25a      	sxtb	r2, r3
 800469a:	23f0      	movs	r3, #240	; 0xf0
 800469c:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a0:	fa93 f3a3 	rbit	r3, r3
 80046a4:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046a8:	fab3 f383 	clz	r3, r3
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	4619      	mov	r1, r3
 80046b0:	230a      	movs	r3, #10
 80046b2:	408b      	lsls	r3, r1
 80046b4:	b25b      	sxtb	r3, r3
 80046b6:	4313      	orrs	r3, r2
 80046b8:	b25b      	sxtb	r3, r3
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	73fb      	strb	r3, [r7, #15]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046be:	f107 0310 	add.w	r3, r7, #16
 80046c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c6:	4619      	mov	r1, r3
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f006 f8bb 	bl	800a844 <HAL_QSPI_Command>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <DISCO_QSPI_DummyCyclesCfg+0xc4>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e00d      	b.n	80046f4 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046d8:	f107 030f 	add.w	r3, r7, #15
 80046dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e0:	4619      	mov	r1, r3
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f006 f90c 	bl	800a900 <HAL_QSPI_Transmit>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <DISCO_QSPI_DummyCyclesCfg+0xde>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3750      	adds	r7, #80	; 0x50
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b096      	sub	sp, #88	; 0x58
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004704:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004708:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800470a:	2306      	movs	r3, #6
 800470c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800470e:	2300      	movs	r3, #0
 8004710:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004712:	2300      	movs	r3, #0
 8004714:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8004716:	2300      	movs	r3, #0
 8004718:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800471a:	2300      	movs	r3, #0
 800471c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800471e:	2300      	movs	r3, #0
 8004720:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004722:	2300      	movs	r3, #0
 8004724:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004726:	2300      	movs	r3, #0
 8004728:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800472a:	f107 0320 	add.w	r3, r7, #32
 800472e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004732:	4619      	mov	r1, r3
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f006 f885 	bl	800a844 <HAL_QSPI_Command>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <QSPI_WriteEnable+0x48>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e020      	b.n	8004786 <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = N25Q128A_SR_WREN;
 8004744:	2302      	movs	r3, #2
 8004746:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8004748:	2302      	movs	r3, #2
 800474a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800474c:	2300      	movs	r3, #0
 800474e:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8004750:	2301      	movs	r3, #1
 8004752:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8004754:	2310      	movs	r3, #16
 8004756:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004758:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800475c:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 800475e:	2305      	movs	r3, #5
 8004760:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8004762:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004766:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004768:	f107 0208 	add.w	r2, r7, #8
 800476c:	f107 0120 	add.w	r1, r7, #32
 8004770:	f241 3388 	movw	r3, #5000	; 0x1388
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f006 f9fc 	bl	800ab72 <HAL_QSPI_AutoPolling>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <QSPI_WriteEnable+0x88>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <QSPI_WriteEnable+0x8a>
  }

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3758      	adds	r7, #88	; 0x58
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b096      	sub	sp, #88	; 0x58
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004798:	f44f 7380 	mov.w	r3, #256	; 0x100
 800479c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800479e:	2305      	movs	r3, #5
 80047a0:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80047a2:	2300      	movs	r3, #0
 80047a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80047a6:	2300      	movs	r3, #0
 80047a8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80047aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047ae:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80047b4:	2300      	movs	r3, #0
 80047b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80047b8:	2300      	movs	r3, #0
 80047ba:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80047bc:	2300      	movs	r3, #0
 80047be:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 80047c4:	2301      	movs	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80047c8:	2300      	movs	r3, #0
 80047ca:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80047cc:	2301      	movs	r3, #1
 80047ce:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80047d0:	2310      	movs	r3, #16
 80047d2:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80047d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80047d8:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80047da:	f107 0208 	add.w	r2, r7, #8
 80047de:	f107 0120 	add.w	r1, r7, #32
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f006 f9c4 	bl	800ab72 <HAL_QSPI_AutoPolling>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <QSPI_AutoPollingMemReady+0x66>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e000      	b.n	80047f6 <QSPI_AutoPollingMemReady+0x68>
  }

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3758      	adds	r7, #88	; 0x58
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <start_Audio_Processing>:
 * @param AudioFreq I2S_AUDIOFREQ_16K, I2S_AUDIOFREQ_48K, etc (48kHz frequency group)
 *
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
void start_Audio_Processing(int16_t *buf_output, int16_t *buf_input,
		uint32_t audio_dma_buf_size, uint16_t InputDevice, uint32_t AudioFreq) {
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	807b      	strh	r3, [r7, #2]

	if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1)
 800480e:	887b      	ldrh	r3, [r7, #2]
 8004810:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004814:	d005      	beq.n	8004822 <start_Audio_Processing+0x22>
			&& (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8004816:	887b      	ldrh	r3, [r7, #2]
 8004818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800481c:	d001      	beq.n	8004822 <start_Audio_Processing+0x22>
		Error_Handler();
 800481e:	f7fe f899 	bl	8002954 <Error_Handler>

	__HAL_RCC_SAI2_CLK_ENABLE();// bug fix syd: was not called in stm32f7xx_hal_msp.c (pb with static variable SAI2_client)
 8004822:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <start_Audio_Processing+0xb4>)
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	4a23      	ldr	r2, [pc, #140]	; (80048b4 <start_Audio_Processing+0xb4>)
 8004828:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800482c:	6453      	str	r3, [r2, #68]	; 0x44
 800482e:	4b21      	ldr	r3, [pc, #132]	; (80048b4 <start_Audio_Processing+0xb4>)
 8004830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004832:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	697b      	ldr	r3, [r7, #20]

	//  Initialize WM8994 CODEC

	if (wm8994_ReadID(AUDIO_I2C_ADDRESS) != WM8994_ID) Error_Handler();
 800483a:	2034      	movs	r0, #52	; 0x34
 800483c:	f000 ffa8 	bl	8005790 <wm8994_ReadID>
 8004840:	4603      	mov	r3, r0
 8004842:	f648 1294 	movw	r2, #35220	; 0x8994
 8004846:	4293      	cmp	r3, r2
 8004848:	d001      	beq.n	800484e <start_Audio_Processing+0x4e>
 800484a:	f7fe f883 	bl	8002954 <Error_Handler>
	/* Reset the Codec Registers */
	wm8994_Reset(AUDIO_I2C_ADDRESS);
 800484e:	2034      	movs	r0, #52	; 0x34
 8004850:	f001 f920 	bl	8005a94 <wm8994_Reset>
	/* Initialize the codec internal registers */
	wm8994_Init(AUDIO_I2C_ADDRESS, InputDevice | OUTPUT_DEVICE_HEADPHONE, 100, AudioFreq);
 8004854:	887b      	ldrh	r3, [r7, #2]
 8004856:	f043 0302 	orr.w	r3, r3, #2
 800485a:	b299      	uxth	r1, r3
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	2264      	movs	r2, #100	; 0x64
 8004860:	2034      	movs	r0, #52	; 0x34
 8004862:	f000 f8db 	bl	8004a1c <wm8994_Init>
	/* set lower initial volume for Line In */
	if (InputDevice == INPUT_DEVICE_INPUT_LINE_1)
 8004866:	887b      	ldrh	r3, [r7, #2]
 8004868:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800486c:	d104      	bne.n	8004878 <start_Audio_Processing+0x78>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 75);
 800486e:	214b      	movs	r1, #75	; 0x4b
 8004870:	2034      	movs	r0, #52	; 0x34
 8004872:	f000 ff9d 	bl	80057b0 <wm8994_SetVolume>
 8004876:	e007      	b.n	8004888 <start_Audio_Processing+0x88>
	else if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8004878:	887b      	ldrh	r3, [r7, #2]
 800487a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800487e:	d103      	bne.n	8004888 <start_Audio_Processing+0x88>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 200);
 8004880:	21c8      	movs	r1, #200	; 0xc8
 8004882:	2034      	movs	r0, #52	; 0x34
 8004884:	f000 ff94 	bl	80057b0 <wm8994_SetVolume>
	// unmute CODEC output
	wm8994_SetMute(AUDIO_I2C_ADDRESS, AUDIO_MUTE_OFF);
 8004888:	2100      	movs	r1, #0
 800488a:	2034      	movs	r0, #52	; 0x34
 800488c:	f001 f8b4 	bl	80059f8 <wm8994_SetMute>

	//  Start DMA transfers

	/* Start Recording */
	HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*) buf_input, audio_dma_buf_size);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	b29b      	uxth	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	4807      	ldr	r0, [pc, #28]	; (80048b8 <start_Audio_Processing+0xb8>)
 800489a:	f008 fd41 	bl	800d320 <HAL_SAI_Receive_DMA>
	/* Start Playback */
	HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) buf_output, audio_dma_buf_size);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	68f9      	ldr	r1, [r7, #12]
 80048a6:	4805      	ldr	r0, [pc, #20]	; (80048bc <start_Audio_Processing+0xbc>)
 80048a8:	f008 fc8a 	bl	800d1c0 <HAL_SAI_Transmit_DMA>

}
 80048ac:	bf00      	nop
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40023800 	.word	0x40023800
 80048b8:	200006f0 	.word	0x200006f0
 80048bc:	20000918 	.word	0x20000918

080048c0 <HAL_SAI_TxCpltCallback>:

/*------------------------------------------------------------------------------
 SAI DMA Callbacks
 ----------------------------------------------------------------------------*/

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]

	if (hsai == &hsai_BlockA2)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a09      	ldr	r2, [pc, #36]	; (8004918 <HAL_SAI_ErrorCallback+0x30>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d103      	bne.n	8004900 <HAL_SAI_ErrorCallback+0x18>
		printf("DMA Out error\n");
 80048f8:	4808      	ldr	r0, [pc, #32]	; (800491c <HAL_SAI_ErrorCallback+0x34>)
 80048fa:	f00c fa4d 	bl	8010d98 <puts>
	else if (hsai == &hsai_BlockB2)
		printf("DMA In error\n");
}
 80048fe:	e006      	b.n	800490e <HAL_SAI_ErrorCallback+0x26>
	else if (hsai == &hsai_BlockB2)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a07      	ldr	r2, [pc, #28]	; (8004920 <HAL_SAI_ErrorCallback+0x38>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d102      	bne.n	800490e <HAL_SAI_ErrorCallback+0x26>
		printf("DMA In error\n");
 8004908:	4806      	ldr	r0, [pc, #24]	; (8004924 <HAL_SAI_ErrorCallback+0x3c>)
 800490a:	f00c fa45 	bl	8010d98 <puts>
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20000918 	.word	0x20000918
 800491c:	08013728 	.word	0x08013728
 8004920:	200006f0 	.word	0x200006f0
 8004924:	08013738 	.word	0x08013738

08004928 <DISCO_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  * @retval None
  */
void DISCO_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004930:	2300      	movs	r3, #0
 8004932:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004934:	4b2a      	ldr	r3, [pc, #168]	; (80049e0 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004936:	2201      	movs	r2, #1
 8004938:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800493a:	4b29      	ldr	r3, [pc, #164]	; (80049e0 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800493c:	2210      	movs	r2, #16
 800493e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004940:	4b27      	ldr	r3, [pc, #156]	; (80049e0 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004942:	2201      	movs	r2, #1
 8004944:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004946:	4b26      	ldr	r3, [pc, #152]	; (80049e0 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004948:	2200      	movs	r2, #0
 800494a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800494c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004950:	4923      	ldr	r1, [pc, #140]	; (80049e0 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004952:	4824      	ldr	r0, [pc, #144]	; (80049e4 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004954:	f008 fec3 	bl	800d6de <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004958:	2001      	movs	r0, #1
 800495a:	f001 f929 	bl	8005bb0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800495e:	4b20      	ldr	r3, [pc, #128]	; (80049e0 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004960:	2202      	movs	r2, #2
 8004962:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004964:	4b1e      	ldr	r3, [pc, #120]	; (80049e0 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004966:	2210      	movs	r2, #16
 8004968:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800496a:	4b1d      	ldr	r3, [pc, #116]	; (80049e0 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800496c:	2201      	movs	r2, #1
 800496e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004970:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004972:	2200      	movs	r2, #0
 8004974:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800497a:	4919      	ldr	r1, [pc, #100]	; (80049e0 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800497c:	4819      	ldr	r0, [pc, #100]	; (80049e4 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 800497e:	f008 feae 	bl	800d6de <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004982:	4b17      	ldr	r3, [pc, #92]	; (80049e0 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004984:	2203      	movs	r2, #3
 8004986:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004988:	4b15      	ldr	r3, [pc, #84]	; (80049e0 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800498a:	2210      	movs	r2, #16
 800498c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800498e:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004990:	2208      	movs	r2, #8
 8004992:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004994:	4b12      	ldr	r3, [pc, #72]	; (80049e0 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004996:	2200      	movs	r2, #0
 8004998:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800499a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800499e:	4910      	ldr	r1, [pc, #64]	; (80049e0 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80049a0:	4810      	ldr	r0, [pc, #64]	; (80049e4 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 80049a2:	f008 fe9c 	bl	800d6de <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80049a6:	f44f 7308 	mov.w	r3, #544	; 0x220
 80049aa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80049ac:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80049ae:	2204      	movs	r2, #4
 80049b0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80049b4:	2210      	movs	r2, #16
 80049b6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80049b8:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80049ba:	2201      	movs	r2, #1
 80049bc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4a07      	ldr	r2, [pc, #28]	; (80049e0 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80049c2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80049c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049c8:	4905      	ldr	r1, [pc, #20]	; (80049e0 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80049ca:	4806      	ldr	r0, [pc, #24]	; (80049e4 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 80049cc:	f008 fe87 	bl	800d6de <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	4804      	ldr	r0, [pc, #16]	; (80049e4 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 80049d4:	f008 feae 	bl	800d734 <HAL_SDRAM_ProgramRefreshRate>
}
 80049d8:	bf00      	nop
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20000258 	.word	0x20000258
 80049e4:	20000f74 	.word	0x20000f74

080049e8 <TS_Init>:
 * @brief  Initializes and configures the touch screen functionalities and
 *         configures all necessary hardware resources (GPIOs, I2C, clocks..).
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
void TS_Init()
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
	/* Wait at least 200ms after power up before accessing registers
	 * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
	HAL_Delay(200);
 80049ec:	20c8      	movs	r0, #200	; 0xc8
 80049ee:	f001 f8df 	bl	8005bb0 <HAL_Delay>

	TS_DisableIT();
 80049f2:	f000 f802 	bl	80049fa <TS_DisableIT>

}
 80049f6:	bf00      	nop
 80049f8:	bd80      	pop	{r7, pc}

080049fa <TS_DisableIT>:
  * @brief  Configure the FT5336 device to stop generating IT on the given INT pin
  *         connected to MCU as EXTI.
  * @retval None
  */
void TS_DisableIT()
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
  uint8_t regValue = 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	71fb      	strb	r3, [r7, #7]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8004a04:	2300      	movs	r3, #0
 8004a06:	71fb      	strb	r3, [r7, #7]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_I2C_Write(FT5336_GMODE_REG, regValue);
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	20a4      	movs	r0, #164	; 0xa4
 8004a0e:	f7ff fac3 	bl	8003f98 <TS_I2C_Write>
}
 8004a12:	bf00      	nop
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	607b      	str	r3, [r7, #4]
 8004a24:	4603      	mov	r3, r0
 8004a26:	81fb      	strh	r3, [r7, #14]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	81bb      	strh	r3, [r7, #12]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8004a34:	89bb      	ldrh	r3, [r7, #12]
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8004a3a:	89bb      	ldrh	r3, [r7, #12]
 8004a3c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a40:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	837b      	strh	r3, [r7, #26]

  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8004a46:	89fb      	ldrh	r3, [r7, #14]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2203      	movs	r2, #3
 8004a4c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004a50:	4618      	mov	r0, r3
 8004a52:	f001 f83f 	bl	8005ad4 <CODEC_IO_Write>
 8004a56:	4603      	mov	r3, r0
 8004a58:	461a      	mov	r2, r3
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8004a60:	89fb      	ldrh	r3, [r7, #14]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2200      	movs	r2, #0
 8004a66:	f640 0117 	movw	r1, #2071	; 0x817
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f001 f832 	bl	8005ad4 <CODEC_IO_Write>
 8004a70:	4603      	mov	r3, r0
 8004a72:	461a      	mov	r2, r3
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	4413      	add	r3, r2
 8004a78:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8004a7a:	89fb      	ldrh	r3, [r7, #14]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004a84:	4618      	mov	r0, r3
 8004a86:	f001 f825 	bl	8005ad4 <CODEC_IO_Write>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	4413      	add	r3, r2
 8004a92:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8004a94:	89fb      	ldrh	r3, [r7, #14]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	226c      	movs	r2, #108	; 0x6c
 8004a9a:	2139      	movs	r1, #57	; 0x39
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f001 f819 	bl	8005ad4 <CODEC_IO_Write>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8004aac:	8afb      	ldrh	r3, [r7, #22]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00c      	beq.n	8004acc <wm8994_Init+0xb0>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8004ab2:	89fb      	ldrh	r3, [r7, #14]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2213      	movs	r2, #19
 8004ab8:	2101      	movs	r1, #1
 8004aba:	4618      	mov	r0, r3
 8004abc:	f001 f80a 	bl	8005ad4 <CODEC_IO_Write>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	61fb      	str	r3, [r7, #28]
 8004aca:	e00b      	b.n	8004ae4 <wm8994_Init+0xc8>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8004acc:	89fb      	ldrh	r3, [r7, #14]
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fffd 	bl	8005ad4 <CODEC_IO_Write>
 8004ada:	4603      	mov	r3, r0
 8004adc:	461a      	mov	r2, r3
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  HAL_Delay(50);
 8004ae4:	2032      	movs	r0, #50	; 0x32
 8004ae6:	f001 f863 	bl	8005bb0 <HAL_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8004aea:	8b3b      	ldrh	r3, [r7, #24]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 815f 	beq.w	8004db0 <wm8994_Init+0x394>
  {
    outputEnabled = 1;
 8004af2:	4bae      	ldr	r3, [pc, #696]	; (8004dac <wm8994_Init+0x390>)
 8004af4:	2201      	movs	r2, #1
 8004af6:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8004af8:	8b3b      	ldrh	r3, [r7, #24]
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	f000 808c 	beq.w	8004c18 <wm8994_Init+0x1fc>
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	f300 8111 	bgt.w	8004d28 <wm8994_Init+0x30c>
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d002      	beq.n	8004b10 <wm8994_Init+0xf4>
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d042      	beq.n	8004b94 <wm8994_Init+0x178>
 8004b0e:	e10b      	b.n	8004d28 <wm8994_Init+0x30c>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8004b10:	89fb      	ldrh	r3, [r7, #14]
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	f640 420c 	movw	r2, #3084	; 0xc0c
 8004b18:	2105      	movs	r1, #5
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 ffda 	bl	8005ad4 <CODEC_IO_Write>
 8004b20:	4603      	mov	r3, r0
 8004b22:	461a      	mov	r2, r3
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	4413      	add	r3, r2
 8004b28:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8004b2a:	89fb      	ldrh	r3, [r7, #14]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f240 6101 	movw	r1, #1537	; 0x601
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 ffcd 	bl	8005ad4 <CODEC_IO_Write>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	4413      	add	r3, r2
 8004b42:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8004b44:	89fb      	ldrh	r3, [r7, #14]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f240 6102 	movw	r1, #1538	; 0x602
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 ffc0 	bl	8005ad4 <CODEC_IO_Write>
 8004b54:	4603      	mov	r3, r0
 8004b56:	461a      	mov	r2, r3
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004b5e:	89fb      	ldrh	r3, [r7, #14]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2202      	movs	r2, #2
 8004b64:	f240 6104 	movw	r1, #1540	; 0x604
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 ffb3 	bl	8005ad4 <CODEC_IO_Write>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	461a      	mov	r2, r3
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	4413      	add	r3, r2
 8004b76:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8004b78:	89fb      	ldrh	r3, [r7, #14]
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	f240 6105 	movw	r1, #1541	; 0x605
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 ffa6 	bl	8005ad4 <CODEC_IO_Write>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	4413      	add	r3, r2
 8004b90:	61fb      	str	r3, [r7, #28]
      break;
 8004b92:	e110      	b.n	8004db6 <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8004b94:	89fb      	ldrh	r3, [r7, #14]
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	f240 3203 	movw	r2, #771	; 0x303
 8004b9c:	2105      	movs	r1, #5
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 ff98 	bl	8005ad4 <CODEC_IO_Write>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	4413      	add	r3, r2
 8004bac:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004bae:	89fb      	ldrh	r3, [r7, #14]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f240 6101 	movw	r1, #1537	; 0x601
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 ff8b 	bl	8005ad4 <CODEC_IO_Write>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004bc8:	89fb      	ldrh	r3, [r7, #14]
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f240 6102 	movw	r1, #1538	; 0x602
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 ff7e 	bl	8005ad4 <CODEC_IO_Write>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	461a      	mov	r2, r3
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	4413      	add	r3, r2
 8004be0:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004be2:	89fb      	ldrh	r3, [r7, #14]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2200      	movs	r2, #0
 8004be8:	f240 6104 	movw	r1, #1540	; 0x604
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 ff71 	bl	8005ad4 <CODEC_IO_Write>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004bfc:	89fb      	ldrh	r3, [r7, #14]
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2200      	movs	r2, #0
 8004c02:	f240 6105 	movw	r1, #1541	; 0x605
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 ff64 	bl	8005ad4 <CODEC_IO_Write>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	461a      	mov	r2, r3
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	4413      	add	r3, r2
 8004c14:	61fb      	str	r3, [r7, #28]
      break;
 8004c16:	e0ce      	b.n	8004db6 <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004c18:	8afb      	ldrh	r3, [r7, #22]
 8004c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c1e:	d141      	bne.n	8004ca4 <wm8994_Init+0x288>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004c20:	89fb      	ldrh	r3, [r7, #14]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	f640 720f 	movw	r2, #3855	; 0xf0f
 8004c28:	2105      	movs	r1, #5
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 ff52 	bl	8005ad4 <CODEC_IO_Write>
 8004c30:	4603      	mov	r3, r0
 8004c32:	461a      	mov	r2, r3
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	4413      	add	r3, r2
 8004c38:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8004c3a:	89fb      	ldrh	r3, [r7, #14]
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2203      	movs	r2, #3
 8004c40:	f240 6101 	movw	r1, #1537	; 0x601
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 ff45 	bl	8005ad4 <CODEC_IO_Write>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	4413      	add	r3, r2
 8004c52:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8004c54:	89fb      	ldrh	r3, [r7, #14]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2203      	movs	r2, #3
 8004c5a:	f240 6102 	movw	r1, #1538	; 0x602
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 ff38 	bl	8005ad4 <CODEC_IO_Write>
 8004c64:	4603      	mov	r3, r0
 8004c66:	461a      	mov	r2, r3
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8004c6e:	89fb      	ldrh	r3, [r7, #14]
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2203      	movs	r2, #3
 8004c74:	f240 6104 	movw	r1, #1540	; 0x604
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 ff2b 	bl	8005ad4 <CODEC_IO_Write>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	461a      	mov	r2, r3
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	4413      	add	r3, r2
 8004c86:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8004c88:	89fb      	ldrh	r3, [r7, #14]
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	f240 6105 	movw	r1, #1541	; 0x605
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 ff1e 	bl	8005ad4 <CODEC_IO_Write>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);

        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
      }
      break;
 8004ca2:	e088      	b.n	8004db6 <wm8994_Init+0x39a>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004ca4:	89fb      	ldrh	r3, [r7, #14]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	f640 720f 	movw	r2, #3855	; 0xf0f
 8004cac:	2105      	movs	r1, #5
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 ff10 	bl	8005ad4 <CODEC_IO_Write>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	4413      	add	r3, r2
 8004cbc:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004cbe:	89fb      	ldrh	r3, [r7, #14]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f240 6101 	movw	r1, #1537	; 0x601
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 ff03 	bl	8005ad4 <CODEC_IO_Write>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004cd8:	89fb      	ldrh	r3, [r7, #14]
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f240 6102 	movw	r1, #1538	; 0x602
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fef6 	bl	8005ad4 <CODEC_IO_Write>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	461a      	mov	r2, r3
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	4413      	add	r3, r2
 8004cf0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004cf2:	89fb      	ldrh	r3, [r7, #14]
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f240 6104 	movw	r1, #1540	; 0x604
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 fee9 	bl	8005ad4 <CODEC_IO_Write>
 8004d02:	4603      	mov	r3, r0
 8004d04:	461a      	mov	r2, r3
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	4413      	add	r3, r2
 8004d0a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8004d0c:	89fb      	ldrh	r3, [r7, #14]
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2202      	movs	r2, #2
 8004d12:	f240 6105 	movw	r1, #1541	; 0x605
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fedc 	bl	8005ad4 <CODEC_IO_Write>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	461a      	mov	r2, r3
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	4413      	add	r3, r2
 8004d24:	61fb      	str	r3, [r7, #28]
      break;
 8004d26:	e046      	b.n	8004db6 <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8004d28:	89fb      	ldrh	r3, [r7, #14]
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	f240 3203 	movw	r2, #771	; 0x303
 8004d30:	2105      	movs	r1, #5
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fece 	bl	8005ad4 <CODEC_IO_Write>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	4413      	add	r3, r2
 8004d40:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004d42:	89fb      	ldrh	r3, [r7, #14]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2201      	movs	r2, #1
 8004d48:	f240 6101 	movw	r1, #1537	; 0x601
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 fec1 	bl	8005ad4 <CODEC_IO_Write>
 8004d52:	4603      	mov	r3, r0
 8004d54:	461a      	mov	r2, r3
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	4413      	add	r3, r2
 8004d5a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004d5c:	89fb      	ldrh	r3, [r7, #14]
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2201      	movs	r2, #1
 8004d62:	f240 6102 	movw	r1, #1538	; 0x602
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 feb4 	bl	8005ad4 <CODEC_IO_Write>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	461a      	mov	r2, r3
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	4413      	add	r3, r2
 8004d74:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004d76:	89fb      	ldrh	r3, [r7, #14]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f240 6104 	movw	r1, #1540	; 0x604
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 fea7 	bl	8005ad4 <CODEC_IO_Write>
 8004d86:	4603      	mov	r3, r0
 8004d88:	461a      	mov	r2, r3
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004d90:	89fb      	ldrh	r3, [r7, #14]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2200      	movs	r2, #0
 8004d96:	f240 6105 	movw	r1, #1541	; 0x605
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fe9a 	bl	8005ad4 <CODEC_IO_Write>
 8004da0:	4603      	mov	r3, r0
 8004da2:	461a      	mov	r2, r3
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	4413      	add	r3, r2
 8004da8:	61fb      	str	r3, [r7, #28]
      break;
 8004daa:	e004      	b.n	8004db6 <wm8994_Init+0x39a>
 8004dac:	20000268 	.word	0x20000268
    }
  }
  else
  {
    outputEnabled = 0;
 8004db0:	4b99      	ldr	r3, [pc, #612]	; (8005018 <wm8994_Init+0x5fc>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8004db6:	8afb      	ldrh	r3, [r7, #22]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 81ab 	beq.w	8005114 <wm8994_Init+0x6f8>
  {
    inputEnabled = 1;
 8004dbe:	4b97      	ldr	r3, [pc, #604]	; (800501c <wm8994_Init+0x600>)
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8004dc4:	8afb      	ldrh	r3, [r7, #22]
 8004dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dca:	f000 8129 	beq.w	8005020 <wm8994_Init+0x604>
 8004dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dd2:	f300 819b 	bgt.w	800510c <wm8994_Init+0x6f0>
 8004dd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dda:	d05a      	beq.n	8004e92 <wm8994_Init+0x476>
 8004ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004de0:	f300 8194 	bgt.w	800510c <wm8994_Init+0x6f0>
 8004de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004de8:	f000 80c6 	beq.w	8004f78 <wm8994_Init+0x55c>
 8004dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df0:	f040 818c 	bne.w	800510c <wm8994_Init+0x6f0>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8004df4:	89fb      	ldrh	r3, [r7, #14]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8004dfc:	2104      	movs	r1, #4
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fe68 	bl	8005ad4 <CODEC_IO_Write>
 8004e04:	4603      	mov	r3, r0
 8004e06:	461a      	mov	r2, r3
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8004e0e:	89fb      	ldrh	r3, [r7, #14]
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	22db      	movs	r2, #219	; 0xdb
 8004e14:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fe5b 	bl	8005ad4 <CODEC_IO_Write>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	461a      	mov	r2, r3
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	4413      	add	r3, r2
 8004e26:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8004e28:	89fb      	ldrh	r3, [r7, #14]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8004e30:	2102      	movs	r1, #2
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fe4e 	bl	8005ad4 <CODEC_IO_Write>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	4413      	add	r3, r2
 8004e40:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8004e42:	89fb      	ldrh	r3, [r7, #14]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2202      	movs	r2, #2
 8004e48:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fe41 	bl	8005ad4 <CODEC_IO_Write>
 8004e52:	4603      	mov	r3, r0
 8004e54:	461a      	mov	r2, r3
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	4413      	add	r3, r2
 8004e5a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8004e5c:	89fb      	ldrh	r3, [r7, #14]
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2202      	movs	r2, #2
 8004e62:	f240 6109 	movw	r1, #1545	; 0x609
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fe34 	bl	8005ad4 <CODEC_IO_Write>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	461a      	mov	r2, r3
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	4413      	add	r3, r2
 8004e74:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8004e76:	89fb      	ldrh	r3, [r7, #14]
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	220e      	movs	r2, #14
 8004e7c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fe27 	bl	8005ad4 <CODEC_IO_Write>
 8004e86:	4603      	mov	r3, r0
 8004e88:	461a      	mov	r2, r3
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	61fb      	str	r3, [r7, #28]
      break;
 8004e90:	e143      	b.n	800511a <wm8994_Init+0x6fe>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8004e92:	89fb      	ldrh	r3, [r7, #14]
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2211      	movs	r2, #17
 8004e98:	2128      	movs	r1, #40	; 0x28
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fe1a 	bl	8005ad4 <CODEC_IO_Write>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      // syd : counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 8004eaa:	89fb      	ldrh	r3, [r7, #14]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2220      	movs	r2, #32
 8004eb0:	2129      	movs	r1, #41	; 0x29
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fe0e 	bl	8005ad4 <CODEC_IO_Write>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	461a      	mov	r2, r3
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //syd : counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 8004ec2:	89fb      	ldrh	r3, [r7, #14]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	212a      	movs	r1, #42	; 0x2a
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fe02 	bl	8005ad4 <CODEC_IO_Write>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8004eda:	89fb      	ldrh	r3, [r7, #14]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	f240 3203 	movw	r2, #771	; 0x303
 8004ee2:	2104      	movs	r1, #4
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 fdf5 	bl	8005ad4 <CODEC_IO_Write>
 8004eea:	4603      	mov	r3, r0
 8004eec:	461a      	mov	r2, r3
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8004ef4:	89fb      	ldrh	r3, [r7, #14]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	22db      	movs	r2, #219	; 0xdb
 8004efa:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fde8 	bl	8005ad4 <CODEC_IO_Write>
 8004f04:	4603      	mov	r3, r0
 8004f06:	461a      	mov	r2, r3
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8004f0e:	89fb      	ldrh	r3, [r7, #14]
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	f246 3250 	movw	r2, #25424	; 0x6350
 8004f16:	2102      	movs	r1, #2
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 fddb 	bl	8005ad4 <CODEC_IO_Write>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	461a      	mov	r2, r3
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	4413      	add	r3, r2
 8004f26:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8004f28:	89fb      	ldrh	r3, [r7, #14]
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	f240 6106 	movw	r1, #1542	; 0x606
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fdce 	bl	8005ad4 <CODEC_IO_Write>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	4413      	add	r3, r2
 8004f40:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004f42:	89fb      	ldrh	r3, [r7, #14]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2202      	movs	r2, #2
 8004f48:	f240 6107 	movw	r1, #1543	; 0x607
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fdc1 	bl	8005ad4 <CODEC_IO_Write>
 8004f52:	4603      	mov	r3, r0
 8004f54:	461a      	mov	r2, r3
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	4413      	add	r3, r2
 8004f5a:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8004f5c:	89fb      	ldrh	r3, [r7, #14]
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	220d      	movs	r2, #13
 8004f62:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fdb4 	bl	8005ad4 <CODEC_IO_Write>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	461a      	mov	r2, r3
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	4413      	add	r3, r2
 8004f74:	61fb      	str	r3, [r7, #28]
      break;
 8004f76:	e0d0      	b.n	800511a <wm8994_Init+0x6fe>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8004f78:	89fb      	ldrh	r3, [r7, #14]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8004f80:	2104      	movs	r1, #4
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fda6 	bl	8005ad4 <CODEC_IO_Write>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	4413      	add	r3, r2
 8004f90:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8004f92:	89fb      	ldrh	r3, [r7, #14]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	22db      	movs	r2, #219	; 0xdb
 8004f98:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 fd99 	bl	8005ad4 <CODEC_IO_Write>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8004fac:	89fb      	ldrh	r3, [r7, #14]
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	f246 3250 	movw	r2, #25424	; 0x6350
 8004fb4:	2102      	movs	r1, #2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fd8c 	bl	8005ad4 <CODEC_IO_Write>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8004fc6:	89fb      	ldrh	r3, [r7, #14]
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f240 6106 	movw	r1, #1542	; 0x606
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fd7f 	bl	8005ad4 <CODEC_IO_Write>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	461a      	mov	r2, r3
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	4413      	add	r3, r2
 8004fde:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004fe0:	89fb      	ldrh	r3, [r7, #14]
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	f240 6107 	movw	r1, #1543	; 0x607
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fd72 	bl	8005ad4 <CODEC_IO_Write>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8004ffa:	89fb      	ldrh	r3, [r7, #14]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	220d      	movs	r2, #13
 8005000:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005004:	4618      	mov	r0, r3
 8005006:	f000 fd65 	bl	8005ad4 <CODEC_IO_Write>
 800500a:	4603      	mov	r3, r0
 800500c:	461a      	mov	r2, r3
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	4413      	add	r3, r2
 8005012:	61fb      	str	r3, [r7, #28]
      break;
 8005014:	e081      	b.n	800511a <wm8994_Init+0x6fe>
 8005016:	bf00      	nop
 8005018:	20000268 	.word	0x20000268
 800501c:	2000026c 	.word	0x2000026c
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8005020:	89fb      	ldrh	r3, [r7, #14]
 8005022:	b2db      	uxtb	r3, r3
 8005024:	f640 723c 	movw	r2, #3900	; 0xf3c
 8005028:	2104      	movs	r1, #4
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fd52 	bl	8005ad4 <CODEC_IO_Write>
 8005030:	4603      	mov	r3, r0
 8005032:	461a      	mov	r2, r3
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	4413      	add	r3, r2
 8005038:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800503a:	89fb      	ldrh	r3, [r7, #14]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	22db      	movs	r2, #219	; 0xdb
 8005040:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8005044:	4618      	mov	r0, r3
 8005046:	f000 fd45 	bl	8005ad4 <CODEC_IO_Write>
 800504a:	4603      	mov	r3, r0
 800504c:	461a      	mov	r2, r3
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	4413      	add	r3, r2
 8005052:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8005054:	89fb      	ldrh	r3, [r7, #14]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	22db      	movs	r2, #219	; 0xdb
 800505a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fd38 	bl	8005ad4 <CODEC_IO_Write>
 8005064:	4603      	mov	r3, r0
 8005066:	461a      	mov	r2, r3
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	4413      	add	r3, r2
 800506c:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 800506e:	89fb      	ldrh	r3, [r7, #14]
 8005070:	b2db      	uxtb	r3, r3
 8005072:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8005076:	2102      	movs	r1, #2
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fd2b 	bl	8005ad4 <CODEC_IO_Write>
 800507e:	4603      	mov	r3, r0
 8005080:	461a      	mov	r2, r3
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	4413      	add	r3, r2
 8005086:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8005088:	89fb      	ldrh	r3, [r7, #14]
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2202      	movs	r2, #2
 800508e:	f240 6106 	movw	r1, #1542	; 0x606
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fd1e 	bl	8005ad4 <CODEC_IO_Write>
 8005098:	4603      	mov	r3, r0
 800509a:	461a      	mov	r2, r3
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	4413      	add	r3, r2
 80050a0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80050a2:	89fb      	ldrh	r3, [r7, #14]
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2202      	movs	r2, #2
 80050a8:	f240 6107 	movw	r1, #1543	; 0x607
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fd11 	bl	8005ad4 <CODEC_IO_Write>
 80050b2:	4603      	mov	r3, r0
 80050b4:	461a      	mov	r2, r3
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80050bc:	89fb      	ldrh	r3, [r7, #14]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2202      	movs	r2, #2
 80050c2:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fd04 	bl	8005ad4 <CODEC_IO_Write>
 80050cc:	4603      	mov	r3, r0
 80050ce:	461a      	mov	r2, r3
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	4413      	add	r3, r2
 80050d4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80050d6:	89fb      	ldrh	r3, [r7, #14]
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2202      	movs	r2, #2
 80050dc:	f240 6109 	movw	r1, #1545	; 0x609
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 fcf7 	bl	8005ad4 <CODEC_IO_Write>
 80050e6:	4603      	mov	r3, r0
 80050e8:	461a      	mov	r2, r3
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	4413      	add	r3, r2
 80050ee:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80050f0:	89fb      	ldrh	r3, [r7, #14]
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	220d      	movs	r2, #13
 80050f6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fcea 	bl	8005ad4 <CODEC_IO_Write>
 8005100:	4603      	mov	r3, r0
 8005102:	461a      	mov	r2, r3
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	4413      	add	r3, r2
 8005108:	61fb      	str	r3, [r7, #28]
      break;
 800510a:	e006      	b.n	800511a <wm8994_Init+0x6fe>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	3301      	adds	r3, #1
 8005110:	61fb      	str	r3, [r7, #28]
      break;
 8005112:	e002      	b.n	800511a <wm8994_Init+0x6fe>
    }
  }
  else
  {
    inputEnabled = 0;
 8005114:	4ba4      	ldr	r3, [pc, #656]	; (80053a8 <wm8994_Init+0x98c>)
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]
  }

  /*  Clock Configurations */
  switch (AudioFreq)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4aa3      	ldr	r2, [pc, #652]	; (80053ac <wm8994_Init+0x990>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d079      	beq.n	8005216 <wm8994_Init+0x7fa>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4aa1      	ldr	r2, [pc, #644]	; (80053ac <wm8994_Init+0x990>)
 8005126:	4293      	cmp	r3, r2
 8005128:	f200 80ad 	bhi.w	8005286 <wm8994_Init+0x86a>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8005132:	4293      	cmp	r3, r2
 8005134:	d061      	beq.n	80051fa <wm8994_Init+0x7de>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800513c:	4293      	cmp	r3, r2
 800513e:	f200 80a2 	bhi.w	8005286 <wm8994_Init+0x86a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005148:	4293      	cmp	r3, r2
 800514a:	f000 808e 	beq.w	800526a <wm8994_Init+0x84e>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005154:	4293      	cmp	r3, r2
 8005156:	f200 8096 	bhi.w	8005286 <wm8994_Init+0x86a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8005160:	d03d      	beq.n	80051de <wm8994_Init+0x7c2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8005168:	f200 808d 	bhi.w	8005286 <wm8994_Init+0x86a>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f245 6222 	movw	r2, #22050	; 0x5622
 8005172:	4293      	cmp	r3, r2
 8005174:	d06b      	beq.n	800524e <wm8994_Init+0x832>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f245 6222 	movw	r2, #22050	; 0x5622
 800517c:	4293      	cmp	r3, r2
 800517e:	f200 8082 	bhi.w	8005286 <wm8994_Init+0x86a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8005188:	d01b      	beq.n	80051c2 <wm8994_Init+0x7a6>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8005190:	d879      	bhi.n	8005286 <wm8994_Init+0x86a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005198:	d005      	beq.n	80051a6 <wm8994_Init+0x78a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f642 3211 	movw	r2, #11025	; 0x2b11
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d046      	beq.n	8005232 <wm8994_Init+0x816>
 80051a4:	e06f      	b.n	8005286 <wm8994_Init+0x86a>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80051a6:	89fb      	ldrh	r3, [r7, #14]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2203      	movs	r2, #3
 80051ac:	f44f 7104 	mov.w	r1, #528	; 0x210
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 fc8f 	bl	8005ad4 <CODEC_IO_Write>
 80051b6:	4603      	mov	r3, r0
 80051b8:	461a      	mov	r2, r3
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	4413      	add	r3, r2
 80051be:	61fb      	str	r3, [r7, #28]
    break;
 80051c0:	e06f      	b.n	80052a2 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80051c2:	89fb      	ldrh	r3, [r7, #14]
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2233      	movs	r2, #51	; 0x33
 80051c8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 fc81 	bl	8005ad4 <CODEC_IO_Write>
 80051d2:	4603      	mov	r3, r0
 80051d4:	461a      	mov	r2, r3
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	4413      	add	r3, r2
 80051da:	61fb      	str	r3, [r7, #28]
    break;
 80051dc:	e061      	b.n	80052a2 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80051de:	89fb      	ldrh	r3, [r7, #14]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2263      	movs	r2, #99	; 0x63
 80051e4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fc73 	bl	8005ad4 <CODEC_IO_Write>
 80051ee:	4603      	mov	r3, r0
 80051f0:	461a      	mov	r2, r3
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	4413      	add	r3, r2
 80051f6:	61fb      	str	r3, [r7, #28]
    break;
 80051f8:	e053      	b.n	80052a2 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80051fa:	89fb      	ldrh	r3, [r7, #14]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2283      	movs	r2, #131	; 0x83
 8005200:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fc65 	bl	8005ad4 <CODEC_IO_Write>
 800520a:	4603      	mov	r3, r0
 800520c:	461a      	mov	r2, r3
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	4413      	add	r3, r2
 8005212:	61fb      	str	r3, [r7, #28]
    break;
 8005214:	e045      	b.n	80052a2 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8005216:	89fb      	ldrh	r3, [r7, #14]
 8005218:	b2db      	uxtb	r3, r3
 800521a:	22a3      	movs	r2, #163	; 0xa3
 800521c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005220:	4618      	mov	r0, r3
 8005222:	f000 fc57 	bl	8005ad4 <CODEC_IO_Write>
 8005226:	4603      	mov	r3, r0
 8005228:	461a      	mov	r2, r3
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	61fb      	str	r3, [r7, #28]
    break;
 8005230:	e037      	b.n	80052a2 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8005232:	89fb      	ldrh	r3, [r7, #14]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2213      	movs	r2, #19
 8005238:	f44f 7104 	mov.w	r1, #528	; 0x210
 800523c:	4618      	mov	r0, r3
 800523e:	f000 fc49 	bl	8005ad4 <CODEC_IO_Write>
 8005242:	4603      	mov	r3, r0
 8005244:	461a      	mov	r2, r3
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	4413      	add	r3, r2
 800524a:	61fb      	str	r3, [r7, #28]
    break;
 800524c:	e029      	b.n	80052a2 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800524e:	89fb      	ldrh	r3, [r7, #14]
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2243      	movs	r2, #67	; 0x43
 8005254:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fc3b 	bl	8005ad4 <CODEC_IO_Write>
 800525e:	4603      	mov	r3, r0
 8005260:	461a      	mov	r2, r3
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	4413      	add	r3, r2
 8005266:	61fb      	str	r3, [r7, #28]
    break;
 8005268:	e01b      	b.n	80052a2 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800526a:	89fb      	ldrh	r3, [r7, #14]
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2273      	movs	r2, #115	; 0x73
 8005270:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005274:	4618      	mov	r0, r3
 8005276:	f000 fc2d 	bl	8005ad4 <CODEC_IO_Write>
 800527a:	4603      	mov	r3, r0
 800527c:	461a      	mov	r2, r3
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4413      	add	r3, r2
 8005282:	61fb      	str	r3, [r7, #28]
    break;
 8005284:	e00d      	b.n	80052a2 <wm8994_Init+0x886>

  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8005286:	89fb      	ldrh	r3, [r7, #14]
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2283      	movs	r2, #131	; 0x83
 800528c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005290:	4618      	mov	r0, r3
 8005292:	f000 fc1f 	bl	8005ad4 <CODEC_IO_Write>
 8005296:	4603      	mov	r3, r0
 8005298:	461a      	mov	r2, r3
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	4413      	add	r3, r2
 800529e:	61fb      	str	r3, [r7, #28]
    break;
 80052a0:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80052a2:	8afb      	ldrh	r3, [r7, #22]
 80052a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052a8:	d10e      	bne.n	80052c8 <wm8994_Init+0x8ac>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);
 80052aa:	89fb      	ldrh	r3, [r7, #14]
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	f244 0218 	movw	r2, #16408	; 0x4018
 80052b2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fc0c 	bl	8005ad4 <CODEC_IO_Write>
 80052bc:	4603      	mov	r3, r0
 80052be:	461a      	mov	r2, r3
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	4413      	add	r3, r2
 80052c4:	61fb      	str	r3, [r7, #28]
 80052c6:	e00d      	b.n	80052e4 <wm8994_Init+0x8c8>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80052c8:	89fb      	ldrh	r3, [r7, #14]
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	f244 0210 	movw	r2, #16400	; 0x4010
 80052d0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 fbfd 	bl	8005ad4 <CODEC_IO_Write>
 80052da:	4603      	mov	r3, r0
 80052dc:	461a      	mov	r2, r3
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	4413      	add	r3, r2
 80052e2:	61fb      	str	r3, [r7, #28]
  }

  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80052e4:	89fb      	ldrh	r3, [r7, #14]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2200      	movs	r2, #0
 80052ea:	f240 3102 	movw	r1, #770	; 0x302
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fbf0 	bl	8005ad4 <CODEC_IO_Write>
 80052f4:	4603      	mov	r3, r0
 80052f6:	461a      	mov	r2, r3
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	4413      	add	r3, r2
 80052fc:	61fb      	str	r3, [r7, #28]

  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80052fe:	89fb      	ldrh	r3, [r7, #14]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	220a      	movs	r2, #10
 8005304:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fbe3 	bl	8005ad4 <CODEC_IO_Write>
 800530e:	4603      	mov	r3, r0
 8005310:	461a      	mov	r2, r3
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	4413      	add	r3, r2
 8005316:	61fb      	str	r3, [r7, #28]

  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8005318:	89fb      	ldrh	r3, [r7, #14]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2201      	movs	r2, #1
 800531e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fbd6 	bl	8005ad4 <CODEC_IO_Write>
 8005328:	4603      	mov	r3, r0
 800532a:	461a      	mov	r2, r3
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	4413      	add	r3, r2
 8005330:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8005332:	8b3b      	ldrh	r3, [r7, #24]
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 817b 	beq.w	8005630 <wm8994_Init+0xc14>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 800533a:	8b3b      	ldrh	r3, [r7, #24]
 800533c:	2b02      	cmp	r3, #2
 800533e:	d157      	bne.n	80053f0 <wm8994_Init+0x9d4>
    {
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8005340:	89fb      	ldrh	r3, [r7, #14]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005348:	212d      	movs	r1, #45	; 0x2d
 800534a:	4618      	mov	r0, r3
 800534c:	f000 fbc2 	bl	8005ad4 <CODEC_IO_Write>
 8005350:	4603      	mov	r3, r0
 8005352:	461a      	mov	r2, r3
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	4413      	add	r3, r2
 8005358:	61fb      	str	r3, [r7, #28]

      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);
 800535a:	89fb      	ldrh	r3, [r7, #14]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005362:	212e      	movs	r1, #46	; 0x2e
 8005364:	4618      	mov	r0, r3
 8005366:	f000 fbb5 	bl	8005ad4 <CODEC_IO_Write>
 800536a:	4603      	mov	r3, r0
 800536c:	461a      	mov	r2, r3
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	4413      	add	r3, r2
 8005372:	61fb      	str	r3, [r7, #28]

      /* Startup sequence for Headphone */
      if(ColdStartup)
 8005374:	4b0e      	ldr	r3, [pc, #56]	; (80053b0 <wm8994_Init+0x994>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d01b      	beq.n	80053b4 <wm8994_Init+0x998>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 800537c:	89fb      	ldrh	r3, [r7, #14]
 800537e:	b2db      	uxtb	r3, r3
 8005380:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8005384:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005388:	4618      	mov	r0, r3
 800538a:	f000 fba3 	bl	8005ad4 <CODEC_IO_Write>
 800538e:	4603      	mov	r3, r0
 8005390:	461a      	mov	r2, r3
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	4413      	add	r3, r2
 8005396:	61fb      	str	r3, [r7, #28]

        ColdStartup=0;
 8005398:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <wm8994_Init+0x994>)
 800539a:	2200      	movs	r2, #0
 800539c:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        HAL_Delay(300);
 800539e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80053a2:	f000 fc05 	bl	8005bb0 <HAL_Delay>
 80053a6:	e016      	b.n	80053d6 <wm8994_Init+0x9ba>
 80053a8:	2000026c 	.word	0x2000026c
 80053ac:	00017700 	.word	0x00017700
 80053b0:	20000010 	.word	0x20000010
      }
      else /* Headphone Warm Start-Up */
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 80053b4:	89fb      	ldrh	r3, [r7, #14]
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	f248 1208 	movw	r2, #33032	; 0x8108
 80053bc:	f44f 7188 	mov.w	r1, #272	; 0x110
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 fb87 	bl	8005ad4 <CODEC_IO_Write>
 80053c6:	4603      	mov	r3, r0
 80053c8:	461a      	mov	r2, r3
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	4413      	add	r3, r2
 80053ce:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        HAL_Delay(50);
 80053d0:	2032      	movs	r0, #50	; 0x32
 80053d2:	f000 fbed 	bl	8005bb0 <HAL_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80053d6:	89fb      	ldrh	r3, [r7, #14]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2200      	movs	r2, #0
 80053dc:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 fb77 	bl	8005ad4 <CODEC_IO_Write>
 80053e6:	4603      	mov	r3, r0
 80053e8:	461a      	mov	r2, r3
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	4413      	add	r3, r2
 80053ee:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80053f0:	89fb      	ldrh	r3, [r7, #14]
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80053f8:	2103      	movs	r1, #3
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fb6a 	bl	8005ad4 <CODEC_IO_Write>
 8005400:	4603      	mov	r3, r0
 8005402:	461a      	mov	r2, r3
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	4413      	add	r3, r2
 8005408:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 800540a:	89fb      	ldrh	r3, [r7, #14]
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2200      	movs	r2, #0
 8005410:	2122      	movs	r1, #34	; 0x22
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fb5e 	bl	8005ad4 <CODEC_IO_Write>
 8005418:	4603      	mov	r3, r0
 800541a:	461a      	mov	r2, r3
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	4413      	add	r3, r2
 8005420:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8005422:	89fb      	ldrh	r3, [r7, #14]
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2200      	movs	r2, #0
 8005428:	2123      	movs	r1, #35	; 0x23
 800542a:	4618      	mov	r0, r3
 800542c:	f000 fb52 	bl	8005ad4 <CODEC_IO_Write>
 8005430:	4603      	mov	r3, r0
 8005432:	461a      	mov	r2, r3
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	4413      	add	r3, r2
 8005438:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 800543a:	89fb      	ldrh	r3, [r7, #14]
 800543c:	b2db      	uxtb	r3, r3
 800543e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005442:	2136      	movs	r1, #54	; 0x36
 8005444:	4618      	mov	r0, r3
 8005446:	f000 fb45 	bl	8005ad4 <CODEC_IO_Write>
 800544a:	4603      	mov	r3, r0
 800544c:	461a      	mov	r2, r3
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	4413      	add	r3, r2
 8005452:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8005454:	89fb      	ldrh	r3, [r7, #14]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	f243 0203 	movw	r2, #12291	; 0x3003
 800545c:	2101      	movs	r1, #1
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fb38 	bl	8005ad4 <CODEC_IO_Write>
 8005464:	4603      	mov	r3, r0
 8005466:	461a      	mov	r2, r3
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	4413      	add	r3, r2
 800546c:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800546e:	8afb      	ldrh	r3, [r7, #22]
 8005470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005474:	d10d      	bne.n	8005492 <wm8994_Init+0xa76>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8005476:	89fb      	ldrh	r3, [r7, #14]
 8005478:	b2db      	uxtb	r3, r3
 800547a:	f240 2205 	movw	r2, #517	; 0x205
 800547e:	2151      	movs	r1, #81	; 0x51
 8005480:	4618      	mov	r0, r3
 8005482:	f000 fb27 	bl	8005ad4 <CODEC_IO_Write>
 8005486:	4603      	mov	r3, r0
 8005488:	461a      	mov	r2, r3
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	4413      	add	r3, r2
 800548e:	61fb      	str	r3, [r7, #28]
 8005490:	e00b      	b.n	80054aa <wm8994_Init+0xa8e>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);
 8005492:	89fb      	ldrh	r3, [r7, #14]
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2205      	movs	r2, #5
 8005498:	2151      	movs	r1, #81	; 0x51
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fb1a 	bl	8005ad4 <CODEC_IO_Write>
 80054a0:	4603      	mov	r3, r0
 80054a2:	461a      	mov	r2, r3
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	4413      	add	r3, r2
 80054a8:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80054aa:	8b7b      	ldrh	r3, [r7, #26]
 80054ac:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 80054b0:	f043 0303 	orr.w	r3, r3, #3
 80054b4:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80054b6:	89fb      	ldrh	r3, [r7, #14]
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	8b7a      	ldrh	r2, [r7, #26]
 80054bc:	2101      	movs	r1, #1
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fb08 	bl	8005ad4 <CODEC_IO_Write>
 80054c4:	4603      	mov	r3, r0
 80054c6:	461a      	mov	r2, r3
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	4413      	add	r3, r2
 80054cc:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 80054ce:	89fb      	ldrh	r3, [r7, #14]
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2222      	movs	r2, #34	; 0x22
 80054d4:	2160      	movs	r1, #96	; 0x60
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 fafc 	bl	8005ad4 <CODEC_IO_Write>
 80054dc:	4603      	mov	r3, r0
 80054de:	461a      	mov	r2, r3
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	4413      	add	r3, r2
 80054e4:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 80054e6:	89fb      	ldrh	r3, [r7, #14]
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	f649 7225 	movw	r2, #40741	; 0x9f25
 80054ee:	214c      	movs	r1, #76	; 0x4c
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 faef 	bl	8005ad4 <CODEC_IO_Write>
 80054f6:	4603      	mov	r3, r0
 80054f8:	461a      	mov	r2, r3
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	4413      	add	r3, r2
 80054fe:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(15);
 8005500:	200f      	movs	r0, #15
 8005502:	f000 fb55 	bl	8005bb0 <HAL_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8005506:	89fb      	ldrh	r3, [r7, #14]
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2201      	movs	r2, #1
 800550c:	212d      	movs	r1, #45	; 0x2d
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fae0 	bl	8005ad4 <CODEC_IO_Write>
 8005514:	4603      	mov	r3, r0
 8005516:	461a      	mov	r2, r3
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	4413      	add	r3, r2
 800551c:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 800551e:	89fb      	ldrh	r3, [r7, #14]
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2201      	movs	r2, #1
 8005524:	212e      	movs	r1, #46	; 0x2e
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fad4 	bl	8005ad4 <CODEC_IO_Write>
 800552c:	4603      	mov	r3, r0
 800552e:	461a      	mov	r2, r3
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	4413      	add	r3, r2
 8005534:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8005536:	89fb      	ldrh	r3, [r7, #14]
 8005538:	b2db      	uxtb	r3, r3
 800553a:	f44f 724c 	mov.w	r2, #816	; 0x330
 800553e:	2103      	movs	r1, #3
 8005540:	4618      	mov	r0, r3
 8005542:	f000 fac7 	bl	8005ad4 <CODEC_IO_Write>
 8005546:	4603      	mov	r3, r0
 8005548:	461a      	mov	r2, r3
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	4413      	add	r3, r2
 800554e:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8005550:	89fb      	ldrh	r3, [r7, #14]
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2233      	movs	r2, #51	; 0x33
 8005556:	2154      	movs	r1, #84	; 0x54
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fabb 	bl	8005ad4 <CODEC_IO_Write>
 800555e:	4603      	mov	r3, r0
 8005560:	461a      	mov	r2, r3
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	4413      	add	r3, r2
 8005566:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(257);
 8005568:	f240 1001 	movw	r0, #257	; 0x101
 800556c:	f000 fb20 	bl	8005bb0 <HAL_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8005570:	89fb      	ldrh	r3, [r7, #14]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	22ee      	movs	r2, #238	; 0xee
 8005576:	2160      	movs	r1, #96	; 0x60
 8005578:	4618      	mov	r0, r3
 800557a:	f000 faab 	bl	8005ad4 <CODEC_IO_Write>
 800557e:	4603      	mov	r3, r0
 8005580:	461a      	mov	r2, r3
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	4413      	add	r3, r2
 8005586:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8005588:	89fb      	ldrh	r3, [r7, #14]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	22c0      	movs	r2, #192	; 0xc0
 800558e:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fa9e 	bl	8005ad4 <CODEC_IO_Write>
 8005598:	4603      	mov	r3, r0
 800559a:	461a      	mov	r2, r3
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	4413      	add	r3, r2
 80055a0:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80055a2:	89fb      	ldrh	r3, [r7, #14]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	22c0      	movs	r2, #192	; 0xc0
 80055a8:	f240 6111 	movw	r1, #1553	; 0x611
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 fa91 	bl	8005ad4 <CODEC_IO_Write>
 80055b2:	4603      	mov	r3, r0
 80055b4:	461a      	mov	r2, r3
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	4413      	add	r3, r2
 80055ba:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80055bc:	89fb      	ldrh	r3, [r7, #14]
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2210      	movs	r2, #16
 80055c2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fa84 	bl	8005ad4 <CODEC_IO_Write>
 80055cc:	4603      	mov	r3, r0
 80055ce:	461a      	mov	r2, r3
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	4413      	add	r3, r2
 80055d4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 80055d6:	89fb      	ldrh	r3, [r7, #14]
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	22c0      	movs	r2, #192	; 0xc0
 80055dc:	f240 6112 	movw	r1, #1554	; 0x612
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 fa77 	bl	8005ad4 <CODEC_IO_Write>
 80055e6:	4603      	mov	r3, r0
 80055e8:	461a      	mov	r2, r3
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	4413      	add	r3, r2
 80055ee:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 80055f0:	89fb      	ldrh	r3, [r7, #14]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	22c0      	movs	r2, #192	; 0xc0
 80055f6:	f240 6113 	movw	r1, #1555	; 0x613
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fa6a 	bl	8005ad4 <CODEC_IO_Write>
 8005600:	4603      	mov	r3, r0
 8005602:	461a      	mov	r2, r3
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	4413      	add	r3, r2
 8005608:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800560a:	89fb      	ldrh	r3, [r7, #14]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2210      	movs	r2, #16
 8005610:	f240 4122 	movw	r1, #1058	; 0x422
 8005614:	4618      	mov	r0, r3
 8005616:	f000 fa5d 	bl	8005ad4 <CODEC_IO_Write>
 800561a:	4603      	mov	r3, r0
 800561c:	461a      	mov	r2, r3
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	4413      	add	r3, r2
 8005622:	61fb      	str	r3, [r7, #28]

    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8005624:	7afa      	ldrb	r2, [r7, #11]
 8005626:	89fb      	ldrh	r3, [r7, #14]
 8005628:	4611      	mov	r1, r2
 800562a:	4618      	mov	r0, r3
 800562c:	f000 f8c0 	bl	80057b0 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8005630:	8afb      	ldrh	r3, [r7, #22]
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 80a6 	beq.w	8005784 <wm8994_Init+0xd68>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8005638:	8afb      	ldrh	r3, [r7, #22]
 800563a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800563e:	d003      	beq.n	8005648 <wm8994_Init+0xc2c>
 8005640:	8afb      	ldrh	r3, [r7, #22]
 8005642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005646:	d12b      	bne.n	80056a0 <wm8994_Init+0xc84>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8005648:	8b7b      	ldrh	r3, [r7, #26]
 800564a:	f043 0313 	orr.w	r3, r3, #19
 800564e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8005650:	89fb      	ldrh	r3, [r7, #14]
 8005652:	b2db      	uxtb	r3, r3
 8005654:	8b7a      	ldrh	r2, [r7, #26]
 8005656:	2101      	movs	r1, #1
 8005658:	4618      	mov	r0, r3
 800565a:	f000 fa3b 	bl	8005ad4 <CODEC_IO_Write>
 800565e:	4603      	mov	r3, r0
 8005660:	461a      	mov	r2, r3
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	4413      	add	r3, r2
 8005666:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8005668:	89fb      	ldrh	r3, [r7, #14]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2202      	movs	r2, #2
 800566e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fa2e 	bl	8005ad4 <CODEC_IO_Write>
 8005678:	4603      	mov	r3, r0
 800567a:	461a      	mov	r2, r3
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	4413      	add	r3, r2
 8005680:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8005682:	89fb      	ldrh	r3, [r7, #14]
 8005684:	b2db      	uxtb	r3, r3
 8005686:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800568a:	f240 4111 	movw	r1, #1041	; 0x411
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fa20 	bl	8005ad4 <CODEC_IO_Write>
 8005694:	4603      	mov	r3, r0
 8005696:	461a      	mov	r2, r3
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	4413      	add	r3, r2
 800569c:	61fb      	str	r3, [r7, #28]
 800569e:	e06b      	b.n	8005778 <wm8994_Init+0xd5c>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80056a0:	8afb      	ldrh	r3, [r7, #22]
 80056a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056a6:	d139      	bne.n	800571c <wm8994_Init+0xd00>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80056a8:	8b7b      	ldrh	r3, [r7, #26]
 80056aa:	f043 0313 	orr.w	r3, r3, #19
 80056ae:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80056b0:	89fb      	ldrh	r3, [r7, #14]
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	8b7a      	ldrh	r2, [r7, #26]
 80056b6:	2101      	movs	r1, #1
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 fa0b 	bl	8005ad4 <CODEC_IO_Write>
 80056be:	4603      	mov	r3, r0
 80056c0:	461a      	mov	r2, r3
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	4413      	add	r3, r2
 80056c6:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80056c8:	89fb      	ldrh	r3, [r7, #14]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2202      	movs	r2, #2
 80056ce:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 f9fe 	bl	8005ad4 <CODEC_IO_Write>
 80056d8:	4603      	mov	r3, r0
 80056da:	461a      	mov	r2, r3
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	4413      	add	r3, r2
 80056e0:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80056e2:	89fb      	ldrh	r3, [r7, #14]
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80056ea:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 f9f0 	bl	8005ad4 <CODEC_IO_Write>
 80056f4:	4603      	mov	r3, r0
 80056f6:	461a      	mov	r2, r3
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	4413      	add	r3, r2
 80056fc:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);
 80056fe:	89fb      	ldrh	r3, [r7, #14]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8005706:	f240 4111 	movw	r1, #1041	; 0x411
 800570a:	4618      	mov	r0, r3
 800570c:	f000 f9e2 	bl	8005ad4 <CODEC_IO_Write>
 8005710:	4603      	mov	r3, r0
 8005712:	461a      	mov	r2, r3
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	4413      	add	r3, r2
 8005718:	61fb      	str	r3, [r7, #28]
 800571a:	e02d      	b.n	8005778 <wm8994_Init+0xd5c>
    }
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 800571c:	8afb      	ldrh	r3, [r7, #22]
 800571e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005722:	d003      	beq.n	800572c <wm8994_Init+0xd10>
 8005724:	8afb      	ldrh	r3, [r7, #22]
 8005726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800572a:	d125      	bne.n	8005778 <wm8994_Init+0xd5c>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 800572c:	89fb      	ldrh	r3, [r7, #14]
 800572e:	b2db      	uxtb	r3, r3
 8005730:	220b      	movs	r2, #11
 8005732:	2118      	movs	r1, #24
 8005734:	4618      	mov	r0, r3
 8005736:	f000 f9cd 	bl	8005ad4 <CODEC_IO_Write>
 800573a:	4603      	mov	r3, r0
 800573c:	461a      	mov	r2, r3
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8005744:	89fb      	ldrh	r3, [r7, #14]
 8005746:	b2db      	uxtb	r3, r3
 8005748:	220b      	movs	r2, #11
 800574a:	211a      	movs	r1, #26
 800574c:	4618      	mov	r0, r3
 800574e:	f000 f9c1 	bl	8005ad4 <CODEC_IO_Write>
 8005752:	4603      	mov	r3, r0
 8005754:	461a      	mov	r2, r3
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	4413      	add	r3, r2
 800575a:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800575c:	89fb      	ldrh	r3, [r7, #14]
 800575e:	b2db      	uxtb	r3, r3
 8005760:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8005764:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8005768:	4618      	mov	r0, r3
 800576a:	f000 f9b3 	bl	8005ad4 <CODEC_IO_Write>
 800576e:	4603      	mov	r3, r0
 8005770:	461a      	mov	r2, r3
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	4413      	add	r3, r2
 8005776:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8005778:	7afa      	ldrb	r2, [r7, #11]
 800577a:	89fb      	ldrh	r3, [r7, #14]
 800577c:	4611      	mov	r1, r2
 800577e:	4618      	mov	r0, r3
 8005780:	f000 f816 	bl	80057b0 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;
 8005784:	69fb      	ldr	r3, [r7, #28]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3720      	adds	r7, #32
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop

08005790 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	4603      	mov	r3, r0
 8005798:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  return ((uint32_t)AUDIO_I2C_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 800579a:	88fb      	ldrh	r3, [r7, #6]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2100      	movs	r1, #0
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7fe fbcd 	bl	8003f40 <AUDIO_I2C_Read>
 80057a6:	4603      	mov	r3, r0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	4603      	mov	r3, r0
 80057b8:	460a      	mov	r2, r1
 80057ba:	80fb      	strh	r3, [r7, #6]
 80057bc:	4613      	mov	r3, r2
 80057be:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80057c0:	2300      	movs	r3, #0
 80057c2:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80057c4:	797b      	ldrb	r3, [r7, #5]
 80057c6:	2b64      	cmp	r3, #100	; 0x64
 80057c8:	d80b      	bhi.n	80057e2 <wm8994_SetVolume+0x32>
 80057ca:	797a      	ldrb	r2, [r7, #5]
 80057cc:	4613      	mov	r3, r2
 80057ce:	019b      	lsls	r3, r3, #6
 80057d0:	1a9b      	subs	r3, r3, r2
 80057d2:	4a86      	ldr	r2, [pc, #536]	; (80059ec <wm8994_SetVolume+0x23c>)
 80057d4:	fb82 1203 	smull	r1, r2, r2, r3
 80057d8:	1152      	asrs	r2, r2, #5
 80057da:	17db      	asrs	r3, r3, #31
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	e000      	b.n	80057e4 <wm8994_SetVolume+0x34>
 80057e2:	2364      	movs	r3, #100	; 0x64
 80057e4:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 80057e6:	4b82      	ldr	r3, [pc, #520]	; (80059f0 <wm8994_SetVolume+0x240>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 809b 	beq.w	8005926 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 80057f0:	7afb      	ldrb	r3, [r7, #11]
 80057f2:	2b3e      	cmp	r3, #62	; 0x3e
 80057f4:	d93d      	bls.n	8005872 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80057f6:	88fb      	ldrh	r3, [r7, #6]
 80057f8:	2100      	movs	r1, #0
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 f8fc 	bl	80059f8 <wm8994_SetMute>
 8005800:	4602      	mov	r2, r0
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4413      	add	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8005808:	88fb      	ldrh	r3, [r7, #6]
 800580a:	b2db      	uxtb	r3, r3
 800580c:	f240 127f 	movw	r2, #383	; 0x17f
 8005810:	211c      	movs	r1, #28
 8005812:	4618      	mov	r0, r3
 8005814:	f000 f95e 	bl	8005ad4 <CODEC_IO_Write>
 8005818:	4603      	mov	r3, r0
 800581a:	461a      	mov	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4413      	add	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8005822:	88fb      	ldrh	r3, [r7, #6]
 8005824:	b2db      	uxtb	r3, r3
 8005826:	f240 127f 	movw	r2, #383	; 0x17f
 800582a:	211d      	movs	r1, #29
 800582c:	4618      	mov	r0, r3
 800582e:	f000 f951 	bl	8005ad4 <CODEC_IO_Write>
 8005832:	4603      	mov	r3, r0
 8005834:	461a      	mov	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 800583c:	88fb      	ldrh	r3, [r7, #6]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	f240 127f 	movw	r2, #383	; 0x17f
 8005844:	2126      	movs	r1, #38	; 0x26
 8005846:	4618      	mov	r0, r3
 8005848:	f000 f944 	bl	8005ad4 <CODEC_IO_Write>
 800584c:	4603      	mov	r3, r0
 800584e:	461a      	mov	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8005856:	88fb      	ldrh	r3, [r7, #6]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	f240 127f 	movw	r2, #383	; 0x17f
 800585e:	2127      	movs	r1, #39	; 0x27
 8005860:	4618      	mov	r0, r3
 8005862:	f000 f937 	bl	8005ad4 <CODEC_IO_Write>
 8005866:	4603      	mov	r3, r0
 8005868:	461a      	mov	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4413      	add	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	e059      	b.n	8005926 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8005872:	797b      	ldrb	r3, [r7, #5]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d109      	bne.n	800588c <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8005878:	88fb      	ldrh	r3, [r7, #6]
 800587a:	2101      	movs	r1, #1
 800587c:	4618      	mov	r0, r3
 800587e:	f000 f8bb 	bl	80059f8 <wm8994_SetMute>
 8005882:	4602      	mov	r2, r0
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4413      	add	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	e04c      	b.n	8005926 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800588c:	88fb      	ldrh	r3, [r7, #6]
 800588e:	2100      	movs	r1, #0
 8005890:	4618      	mov	r0, r3
 8005892:	f000 f8b1 	bl	80059f8 <wm8994_SetMute>
 8005896:	4602      	mov	r2, r0
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4413      	add	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800589e:	88fb      	ldrh	r3, [r7, #6]
 80058a0:	b2d8      	uxtb	r0, r3
 80058a2:	7afb      	ldrb	r3, [r7, #11]
 80058a4:	b21b      	sxth	r3, r3
 80058a6:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80058aa:	b21b      	sxth	r3, r3
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	211c      	movs	r1, #28
 80058b2:	f000 f90f 	bl	8005ad4 <CODEC_IO_Write>
 80058b6:	4603      	mov	r3, r0
 80058b8:	461a      	mov	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4413      	add	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80058c0:	88fb      	ldrh	r3, [r7, #6]
 80058c2:	b2d8      	uxtb	r0, r3
 80058c4:	7afb      	ldrb	r3, [r7, #11]
 80058c6:	b21b      	sxth	r3, r3
 80058c8:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80058cc:	b21b      	sxth	r3, r3
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	461a      	mov	r2, r3
 80058d2:	211d      	movs	r1, #29
 80058d4:	f000 f8fe 	bl	8005ad4 <CODEC_IO_Write>
 80058d8:	4603      	mov	r3, r0
 80058da:	461a      	mov	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 80058e2:	88fb      	ldrh	r3, [r7, #6]
 80058e4:	b2d8      	uxtb	r0, r3
 80058e6:	7afb      	ldrb	r3, [r7, #11]
 80058e8:	b21b      	sxth	r3, r3
 80058ea:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80058ee:	b21b      	sxth	r3, r3
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	461a      	mov	r2, r3
 80058f4:	2126      	movs	r1, #38	; 0x26
 80058f6:	f000 f8ed 	bl	8005ad4 <CODEC_IO_Write>
 80058fa:	4603      	mov	r3, r0
 80058fc:	461a      	mov	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4413      	add	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8005904:	88fb      	ldrh	r3, [r7, #6]
 8005906:	b2d8      	uxtb	r0, r3
 8005908:	7afb      	ldrb	r3, [r7, #11]
 800590a:	b21b      	sxth	r3, r3
 800590c:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005910:	b21b      	sxth	r3, r3
 8005912:	b29b      	uxth	r3, r3
 8005914:	461a      	mov	r2, r3
 8005916:	2127      	movs	r1, #39	; 0x27
 8005918:	f000 f8dc 	bl	8005ad4 <CODEC_IO_Write>
 800591c:	4603      	mov	r3, r0
 800591e:	461a      	mov	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4413      	add	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8005926:	4b33      	ldr	r3, [pc, #204]	; (80059f4 <wm8994_SetVolume+0x244>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d059      	beq.n	80059e2 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800592e:	797b      	ldrb	r3, [r7, #5]
 8005930:	2b63      	cmp	r3, #99	; 0x63
 8005932:	d80c      	bhi.n	800594e <wm8994_SetVolume+0x19e>
 8005934:	797a      	ldrb	r2, [r7, #5]
 8005936:	4613      	mov	r3, r2
 8005938:	011b      	lsls	r3, r3, #4
 800593a:	1a9b      	subs	r3, r3, r2
 800593c:	011b      	lsls	r3, r3, #4
 800593e:	4a2b      	ldr	r2, [pc, #172]	; (80059ec <wm8994_SetVolume+0x23c>)
 8005940:	fb82 1203 	smull	r1, r2, r2, r3
 8005944:	1152      	asrs	r2, r2, #5
 8005946:	17db      	asrs	r3, r3, #31
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	b2db      	uxtb	r3, r3
 800594c:	e000      	b.n	8005950 <wm8994_SetVolume+0x1a0>
 800594e:	23ef      	movs	r3, #239	; 0xef
 8005950:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8005952:	88fb      	ldrh	r3, [r7, #6]
 8005954:	b2d8      	uxtb	r0, r3
 8005956:	7afb      	ldrb	r3, [r7, #11]
 8005958:	b21b      	sxth	r3, r3
 800595a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800595e:	b21b      	sxth	r3, r3
 8005960:	b29b      	uxth	r3, r3
 8005962:	461a      	mov	r2, r3
 8005964:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005968:	f000 f8b4 	bl	8005ad4 <CODEC_IO_Write>
 800596c:	4603      	mov	r3, r0
 800596e:	461a      	mov	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4413      	add	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8005976:	88fb      	ldrh	r3, [r7, #6]
 8005978:	b2d8      	uxtb	r0, r3
 800597a:	7afb      	ldrb	r3, [r7, #11]
 800597c:	b21b      	sxth	r3, r3
 800597e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005982:	b21b      	sxth	r3, r3
 8005984:	b29b      	uxth	r3, r3
 8005986:	461a      	mov	r2, r3
 8005988:	f240 4101 	movw	r1, #1025	; 0x401
 800598c:	f000 f8a2 	bl	8005ad4 <CODEC_IO_Write>
 8005990:	4603      	mov	r3, r0
 8005992:	461a      	mov	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 800599a:	88fb      	ldrh	r3, [r7, #6]
 800599c:	b2d8      	uxtb	r0, r3
 800599e:	7afb      	ldrb	r3, [r7, #11]
 80059a0:	b21b      	sxth	r3, r3
 80059a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059a6:	b21b      	sxth	r3, r3
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	461a      	mov	r2, r3
 80059ac:	f240 4104 	movw	r1, #1028	; 0x404
 80059b0:	f000 f890 	bl	8005ad4 <CODEC_IO_Write>
 80059b4:	4603      	mov	r3, r0
 80059b6:	461a      	mov	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80059be:	88fb      	ldrh	r3, [r7, #6]
 80059c0:	b2d8      	uxtb	r0, r3
 80059c2:	7afb      	ldrb	r3, [r7, #11]
 80059c4:	b21b      	sxth	r3, r3
 80059c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ca:	b21b      	sxth	r3, r3
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	461a      	mov	r2, r3
 80059d0:	f240 4105 	movw	r1, #1029	; 0x405
 80059d4:	f000 f87e 	bl	8005ad4 <CODEC_IO_Write>
 80059d8:	4603      	mov	r3, r0
 80059da:	461a      	mov	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80059e2:	68fb      	ldr	r3, [r7, #12]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	51eb851f 	.word	0x51eb851f
 80059f0:	20000268 	.word	0x20000268
 80059f4:	2000026c 	.word	0x2000026c

080059f8 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	4603      	mov	r3, r0
 8005a00:	6039      	str	r1, [r7, #0]
 8005a02:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8005a08:	4b21      	ldr	r3, [pc, #132]	; (8005a90 <wm8994_SetMute+0x98>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d039      	beq.n	8005a84 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d11c      	bne.n	8005a50 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8005a16:	88fb      	ldrh	r3, [r7, #6]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a1e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 f856 	bl	8005ad4 <CODEC_IO_Write>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8005a32:	88fb      	ldrh	r3, [r7, #6]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a3a:	f240 4122 	movw	r1, #1058	; 0x422
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 f848 	bl	8005ad4 <CODEC_IO_Write>
 8005a44:	4603      	mov	r3, r0
 8005a46:	461a      	mov	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	e019      	b.n	8005a84 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8005a50:	88fb      	ldrh	r3, [r7, #6]
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2210      	movs	r2, #16
 8005a56:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 f83a 	bl	8005ad4 <CODEC_IO_Write>
 8005a60:	4603      	mov	r3, r0
 8005a62:	461a      	mov	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4413      	add	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8005a6a:	88fb      	ldrh	r3, [r7, #6]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2210      	movs	r2, #16
 8005a70:	f240 4122 	movw	r1, #1058	; 0x422
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 f82d 	bl	8005ad4 <CODEC_IO_Write>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4413      	add	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8005a84:	68fb      	ldr	r3, [r7, #12]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	20000268 	.word	0x20000268

08005a94 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8005aa2:	88fb      	ldrh	r3, [r7, #6]
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 f812 	bl	8005ad4 <CODEC_IO_Write>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <wm8994_Reset+0x38>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8005aba:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <wm8994_Reset+0x3c>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]

  return counter;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20000268 	.word	0x20000268
 8005ad0:	2000026c 	.word	0x2000026c

08005ad4 <CODEC_IO_Write>:
  * @param  Value: Data to be written
  * @retval None
  * TODO : delete
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	4603      	mov	r3, r0
 8005adc:	71fb      	strb	r3, [r7, #7]
 8005ade:	460b      	mov	r3, r1
 8005ae0:	80bb      	strh	r3, [r7, #4]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]

 AUDIO_I2C_Write(Addr, Reg, Value);
 8005aea:	887a      	ldrh	r2, [r7, #2]
 8005aec:	88b9      	ldrh	r1, [r7, #4]
 8005aee:	79fb      	ldrb	r3, [r7, #7]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fe f9fb 	bl	8003eec <AUDIO_I2C_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_I2C_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */

  return result;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	b2db      	uxtb	r3, r3
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005b08:	480d      	ldr	r0, [pc, #52]	; (8005b40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005b0a:	490e      	ldr	r1, [pc, #56]	; (8005b44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005b0c:	4a0e      	ldr	r2, [pc, #56]	; (8005b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b10:	e002      	b.n	8005b18 <LoopCopyDataInit>

08005b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b16:	3304      	adds	r3, #4

08005b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b1c:	d3f9      	bcc.n	8005b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b1e:	4a0b      	ldr	r2, [pc, #44]	; (8005b4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005b20:	4c0b      	ldr	r4, [pc, #44]	; (8005b50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b24:	e001      	b.n	8005b2a <LoopFillZerobss>

08005b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b28:	3204      	adds	r2, #4

08005b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b2c:	d3fb      	bcc.n	8005b26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005b2e:	f7fe f867 	bl	8003c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b32:	f00a fb3f 	bl	80101b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b36:	f7fb fc23 	bl	8001380 <main>
  bx  lr    
 8005b3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005b3c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b44:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8005b48:	08015a88 	.word	0x08015a88
  ldr r2, =_sbss
 8005b4c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8005b50:	20040f58 	.word	0x20040f58

08005b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b54:	e7fe      	b.n	8005b54 <ADC_IRQHandler>

08005b56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b5a:	2003      	movs	r0, #3
 8005b5c:	f000 fba5 	bl	80062aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b60:	2000      	movs	r0, #0
 8005b62:	f7fd feb7 	bl	80038d4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005b66:	f7fc fefd 	bl	8002964 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b74:	4b06      	ldr	r3, [pc, #24]	; (8005b90 <HAL_IncTick+0x20>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	4b06      	ldr	r3, [pc, #24]	; (8005b94 <HAL_IncTick+0x24>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4413      	add	r3, r2
 8005b80:	4a04      	ldr	r2, [pc, #16]	; (8005b94 <HAL_IncTick+0x24>)
 8005b82:	6013      	str	r3, [r2, #0]
}
 8005b84:	bf00      	nop
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	20000028 	.word	0x20000028
 8005b94:	20040c40 	.word	0x20040c40

08005b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8005b9c:	4b03      	ldr	r3, [pc, #12]	; (8005bac <HAL_GetTick+0x14>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	20040c40 	.word	0x20040c40

08005bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005bb8:	f7ff ffee 	bl	8005b98 <HAL_GetTick>
 8005bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bc8:	d005      	beq.n	8005bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005bca:	4b0a      	ldr	r3, [pc, #40]	; (8005bf4 <HAL_Delay+0x44>)
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005bd6:	bf00      	nop
 8005bd8:	f7ff ffde 	bl	8005b98 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d8f7      	bhi.n	8005bd8 <HAL_Delay+0x28>
  {
  }
}
 8005be8:	bf00      	nop
 8005bea:	bf00      	nop
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000028 	.word	0x20000028

08005bf8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e031      	b.n	8005c72 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7fc fecc 	bl	80029b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	f003 0310 	and.w	r3, r3, #16
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d116      	bne.n	8005c64 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c3a:	4b10      	ldr	r3, [pc, #64]	; (8005c7c <HAL_ADC_Init+0x84>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	f043 0202 	orr.w	r2, r3, #2
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f964 	bl	8005f14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	f023 0303 	bic.w	r3, r3, #3
 8005c5a:	f043 0201 	orr.w	r2, r3, #1
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	641a      	str	r2, [r3, #64]	; 0x40
 8005c62:	e001      	b.n	8005c68 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	ffffeefd 	.word	0xffffeefd

08005c80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_ADC_ConfigChannel+0x1c>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e12a      	b.n	8005ef2 <HAL_ADC_ConfigChannel+0x272>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b09      	cmp	r3, #9
 8005caa:	d93a      	bls.n	8005d22 <HAL_ADC_ConfigChannel+0xa2>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cb4:	d035      	beq.n	8005d22 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68d9      	ldr	r1, [r3, #12]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	4413      	add	r3, r2
 8005cca:	3b1e      	subs	r3, #30
 8005ccc:	2207      	movs	r2, #7
 8005cce:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd2:	43da      	mvns	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	400a      	ands	r2, r1
 8005cda:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a87      	ldr	r2, [pc, #540]	; (8005f00 <HAL_ADC_ConfigChannel+0x280>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d10a      	bne.n	8005cfc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68d9      	ldr	r1, [r3, #12]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	061a      	lsls	r2, r3, #24
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005cfa:	e035      	b.n	8005d68 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68d9      	ldr	r1, [r3, #12]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	4603      	mov	r3, r0
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	4403      	add	r3, r0
 8005d14:	3b1e      	subs	r3, #30
 8005d16:	409a      	lsls	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d20:	e022      	b.n	8005d68 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6919      	ldr	r1, [r3, #16]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	461a      	mov	r2, r3
 8005d30:	4613      	mov	r3, r2
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	4413      	add	r3, r2
 8005d36:	2207      	movs	r2, #7
 8005d38:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3c:	43da      	mvns	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	400a      	ands	r2, r1
 8005d44:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6919      	ldr	r1, [r3, #16]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	4618      	mov	r0, r3
 8005d58:	4603      	mov	r3, r0
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	4403      	add	r3, r0
 8005d5e:	409a      	lsls	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	2b06      	cmp	r3, #6
 8005d6e:	d824      	bhi.n	8005dba <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	3b05      	subs	r3, #5
 8005d82:	221f      	movs	r2, #31
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	43da      	mvns	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	400a      	ands	r2, r1
 8005d90:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	4618      	mov	r0, r3
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	3b05      	subs	r3, #5
 8005dac:	fa00 f203 	lsl.w	r2, r0, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	635a      	str	r2, [r3, #52]	; 0x34
 8005db8:	e04c      	b.n	8005e54 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	2b0c      	cmp	r3, #12
 8005dc0:	d824      	bhi.n	8005e0c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	3b23      	subs	r3, #35	; 0x23
 8005dd4:	221f      	movs	r2, #31
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	43da      	mvns	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	400a      	ands	r2, r1
 8005de2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	4618      	mov	r0, r3
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	4613      	mov	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	3b23      	subs	r3, #35	; 0x23
 8005dfe:	fa00 f203 	lsl.w	r2, r0, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	631a      	str	r2, [r3, #48]	; 0x30
 8005e0a:	e023      	b.n	8005e54 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	3b41      	subs	r3, #65	; 0x41
 8005e1e:	221f      	movs	r2, #31
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	43da      	mvns	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	400a      	ands	r2, r1
 8005e2c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	3b41      	subs	r3, #65	; 0x41
 8005e48:	fa00 f203 	lsl.w	r2, r0, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a2a      	ldr	r2, [pc, #168]	; (8005f04 <HAL_ADC_ConfigChannel+0x284>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d10a      	bne.n	8005e74 <HAL_ADC_ConfigChannel+0x1f4>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e66:	d105      	bne.n	8005e74 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005e68:	4b27      	ldr	r3, [pc, #156]	; (8005f08 <HAL_ADC_ConfigChannel+0x288>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	4a26      	ldr	r2, [pc, #152]	; (8005f08 <HAL_ADC_ConfigChannel+0x288>)
 8005e6e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005e72:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a22      	ldr	r2, [pc, #136]	; (8005f04 <HAL_ADC_ConfigChannel+0x284>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d109      	bne.n	8005e92 <HAL_ADC_ConfigChannel+0x212>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b12      	cmp	r3, #18
 8005e84:	d105      	bne.n	8005e92 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005e86:	4b20      	ldr	r3, [pc, #128]	; (8005f08 <HAL_ADC_ConfigChannel+0x288>)
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	4a1f      	ldr	r2, [pc, #124]	; (8005f08 <HAL_ADC_ConfigChannel+0x288>)
 8005e8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e90:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1b      	ldr	r2, [pc, #108]	; (8005f04 <HAL_ADC_ConfigChannel+0x284>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d125      	bne.n	8005ee8 <HAL_ADC_ConfigChannel+0x268>
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a17      	ldr	r2, [pc, #92]	; (8005f00 <HAL_ADC_ConfigChannel+0x280>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d003      	beq.n	8005eae <HAL_ADC_ConfigChannel+0x22e>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b11      	cmp	r3, #17
 8005eac:	d11c      	bne.n	8005ee8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005eae:	4b16      	ldr	r3, [pc, #88]	; (8005f08 <HAL_ADC_ConfigChannel+0x288>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	4a15      	ldr	r2, [pc, #84]	; (8005f08 <HAL_ADC_ConfigChannel+0x288>)
 8005eb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005eb8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a10      	ldr	r2, [pc, #64]	; (8005f00 <HAL_ADC_ConfigChannel+0x280>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d111      	bne.n	8005ee8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005ec4:	4b11      	ldr	r3, [pc, #68]	; (8005f0c <HAL_ADC_ConfigChannel+0x28c>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a11      	ldr	r2, [pc, #68]	; (8005f10 <HAL_ADC_ConfigChannel+0x290>)
 8005eca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ece:	0c9a      	lsrs	r2, r3, #18
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005eda:	e002      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1f9      	bne.n	8005edc <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	10000012 	.word	0x10000012
 8005f04:	40012000 	.word	0x40012000
 8005f08:	40012300 	.word	0x40012300
 8005f0c:	20000008 	.word	0x20000008
 8005f10:	431bde83 	.word	0x431bde83

08005f14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005f1c:	4b78      	ldr	r3, [pc, #480]	; (8006100 <ADC_Init+0x1ec>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	4a77      	ldr	r2, [pc, #476]	; (8006100 <ADC_Init+0x1ec>)
 8005f22:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005f26:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005f28:	4b75      	ldr	r3, [pc, #468]	; (8006100 <ADC_Init+0x1ec>)
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	4973      	ldr	r1, [pc, #460]	; (8006100 <ADC_Init+0x1ec>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6859      	ldr	r1, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	021a      	lsls	r2, r3, #8
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005f68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6859      	ldr	r1, [r3, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6899      	ldr	r1, [r3, #8]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa2:	4a58      	ldr	r2, [pc, #352]	; (8006104 <ADC_Init+0x1f0>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d022      	beq.n	8005fee <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005fb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6899      	ldr	r1, [r3, #8]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005fd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6899      	ldr	r1, [r3, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	609a      	str	r2, [r3, #8]
 8005fec:	e00f      	b.n	800600e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ffc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800600c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0202 	bic.w	r2, r2, #2
 800601c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6899      	ldr	r1, [r3, #8]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	005a      	lsls	r2, r3, #1
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d01b      	beq.n	8006074 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800604a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800605a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6859      	ldr	r1, [r3, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	3b01      	subs	r3, #1
 8006068:	035a      	lsls	r2, r3, #13
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	605a      	str	r2, [r3, #4]
 8006072:	e007      	b.n	8006084 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006082:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006092:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	3b01      	subs	r3, #1
 80060a0:	051a      	lsls	r2, r3, #20
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80060b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6899      	ldr	r1, [r3, #8]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060c6:	025a      	lsls	r2, r3, #9
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6899      	ldr	r1, [r3, #8]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	029a      	lsls	r2, r3, #10
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	609a      	str	r2, [r3, #8]
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	40012300 	.word	0x40012300
 8006104:	0f000001 	.word	0x0f000001

08006108 <__NVIC_SetPriorityGrouping>:
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f003 0307 	and.w	r3, r3, #7
 8006116:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006118:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <__NVIC_SetPriorityGrouping+0x40>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006124:	4013      	ands	r3, r2
 8006126:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006130:	4b06      	ldr	r3, [pc, #24]	; (800614c <__NVIC_SetPriorityGrouping+0x44>)
 8006132:	4313      	orrs	r3, r2
 8006134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006136:	4a04      	ldr	r2, [pc, #16]	; (8006148 <__NVIC_SetPriorityGrouping+0x40>)
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	60d3      	str	r3, [r2, #12]
}
 800613c:	bf00      	nop
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	e000ed00 	.word	0xe000ed00
 800614c:	05fa0000 	.word	0x05fa0000

08006150 <__NVIC_GetPriorityGrouping>:
{
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006154:	4b04      	ldr	r3, [pc, #16]	; (8006168 <__NVIC_GetPriorityGrouping+0x18>)
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	0a1b      	lsrs	r3, r3, #8
 800615a:	f003 0307 	and.w	r3, r3, #7
}
 800615e:	4618      	mov	r0, r3
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr
 8006168:	e000ed00 	.word	0xe000ed00

0800616c <__NVIC_EnableIRQ>:
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	4603      	mov	r3, r0
 8006174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800617a:	2b00      	cmp	r3, #0
 800617c:	db0b      	blt.n	8006196 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800617e:	79fb      	ldrb	r3, [r7, #7]
 8006180:	f003 021f 	and.w	r2, r3, #31
 8006184:	4907      	ldr	r1, [pc, #28]	; (80061a4 <__NVIC_EnableIRQ+0x38>)
 8006186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800618a:	095b      	lsrs	r3, r3, #5
 800618c:	2001      	movs	r0, #1
 800618e:	fa00 f202 	lsl.w	r2, r0, r2
 8006192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	e000e100 	.word	0xe000e100

080061a8 <__NVIC_DisableIRQ>:
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	4603      	mov	r3, r0
 80061b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	db12      	blt.n	80061e0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061ba:	79fb      	ldrb	r3, [r7, #7]
 80061bc:	f003 021f 	and.w	r2, r3, #31
 80061c0:	490a      	ldr	r1, [pc, #40]	; (80061ec <__NVIC_DisableIRQ+0x44>)
 80061c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061c6:	095b      	lsrs	r3, r3, #5
 80061c8:	2001      	movs	r0, #1
 80061ca:	fa00 f202 	lsl.w	r2, r0, r2
 80061ce:	3320      	adds	r3, #32
 80061d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80061d4:	f3bf 8f4f 	dsb	sy
}
 80061d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80061da:	f3bf 8f6f 	isb	sy
}
 80061de:	bf00      	nop
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	e000e100 	.word	0xe000e100

080061f0 <__NVIC_SetPriority>:
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	4603      	mov	r3, r0
 80061f8:	6039      	str	r1, [r7, #0]
 80061fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006200:	2b00      	cmp	r3, #0
 8006202:	db0a      	blt.n	800621a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	b2da      	uxtb	r2, r3
 8006208:	490c      	ldr	r1, [pc, #48]	; (800623c <__NVIC_SetPriority+0x4c>)
 800620a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800620e:	0112      	lsls	r2, r2, #4
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	440b      	add	r3, r1
 8006214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006218:	e00a      	b.n	8006230 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	b2da      	uxtb	r2, r3
 800621e:	4908      	ldr	r1, [pc, #32]	; (8006240 <__NVIC_SetPriority+0x50>)
 8006220:	79fb      	ldrb	r3, [r7, #7]
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	3b04      	subs	r3, #4
 8006228:	0112      	lsls	r2, r2, #4
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	440b      	add	r3, r1
 800622e:	761a      	strb	r2, [r3, #24]
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	e000e100 	.word	0xe000e100
 8006240:	e000ed00 	.word	0xe000ed00

08006244 <NVIC_EncodePriority>:
{
 8006244:	b480      	push	{r7}
 8006246:	b089      	sub	sp, #36	; 0x24
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	f1c3 0307 	rsb	r3, r3, #7
 800625e:	2b04      	cmp	r3, #4
 8006260:	bf28      	it	cs
 8006262:	2304      	movcs	r3, #4
 8006264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	3304      	adds	r3, #4
 800626a:	2b06      	cmp	r3, #6
 800626c:	d902      	bls.n	8006274 <NVIC_EncodePriority+0x30>
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	3b03      	subs	r3, #3
 8006272:	e000      	b.n	8006276 <NVIC_EncodePriority+0x32>
 8006274:	2300      	movs	r3, #0
 8006276:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	fa02 f303 	lsl.w	r3, r2, r3
 8006282:	43da      	mvns	r2, r3
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	401a      	ands	r2, r3
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800628c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	fa01 f303 	lsl.w	r3, r1, r3
 8006296:	43d9      	mvns	r1, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800629c:	4313      	orrs	r3, r2
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3724      	adds	r7, #36	; 0x24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b082      	sub	sp, #8
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7ff ff28 	bl	8006108 <__NVIC_SetPriorityGrouping>
}
 80062b8:	bf00      	nop
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	4603      	mov	r3, r0
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80062ce:	2300      	movs	r3, #0
 80062d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80062d2:	f7ff ff3d 	bl	8006150 <__NVIC_GetPriorityGrouping>
 80062d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	68b9      	ldr	r1, [r7, #8]
 80062dc:	6978      	ldr	r0, [r7, #20]
 80062de:	f7ff ffb1 	bl	8006244 <NVIC_EncodePriority>
 80062e2:	4602      	mov	r2, r0
 80062e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062e8:	4611      	mov	r1, r2
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7ff ff80 	bl	80061f0 <__NVIC_SetPriority>
}
 80062f0:	bf00      	nop
 80062f2:	3718      	adds	r7, #24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	4603      	mov	r3, r0
 8006300:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff ff30 	bl	800616c <__NVIC_EnableIRQ>
}
 800630c:	bf00      	nop
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	4603      	mov	r3, r0
 800631c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800631e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff ff40 	bl	80061a8 <__NVIC_DisableIRQ>
}
 8006328:	bf00      	nop
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e054      	b.n	80063ec <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	7f5b      	ldrb	r3, [r3, #29]
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	d105      	bne.n	8006358 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7fc fb88 	bl	8002a68 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	791b      	ldrb	r3, [r3, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10c      	bne.n	8006380 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a22      	ldr	r2, [pc, #136]	; (80063f4 <HAL_CRC_Init+0xc4>)
 800636c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0218 	bic.w	r2, r2, #24
 800637c:	609a      	str	r2, [r3, #8]
 800637e:	e00c      	b.n	800639a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6899      	ldr	r1, [r3, #8]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	461a      	mov	r2, r3
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f834 	bl	80063f8 <HAL_CRCEx_Polynomial_Set>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e028      	b.n	80063ec <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	795b      	ldrb	r3, [r3, #5]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d105      	bne.n	80063ae <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063aa:	611a      	str	r2, [r3, #16]
 80063ac:	e004      	b.n	80063b8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6912      	ldr	r2, [r2, #16]
 80063b6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	695a      	ldr	r2, [r3, #20]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	699a      	ldr	r2, [r3, #24]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	04c11db7 	.word	0x04c11db7

080063f8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b087      	sub	sp, #28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006408:	231f      	movs	r3, #31
 800640a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800640c:	bf00      	nop
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	1e5a      	subs	r2, r3, #1
 8006412:	613a      	str	r2, [r7, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d009      	beq.n	800642c <HAL_CRCEx_Polynomial_Set+0x34>
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f003 031f 	and.w	r3, r3, #31
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	fa22 f303 	lsr.w	r3, r2, r3
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	d0f0      	beq.n	800640e <HAL_CRCEx_Polynomial_Set+0x16>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b18      	cmp	r3, #24
 8006430:	d846      	bhi.n	80064c0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006432:	a201      	add	r2, pc, #4	; (adr r2, 8006438 <HAL_CRCEx_Polynomial_Set+0x40>)
 8006434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006438:	080064c7 	.word	0x080064c7
 800643c:	080064c1 	.word	0x080064c1
 8006440:	080064c1 	.word	0x080064c1
 8006444:	080064c1 	.word	0x080064c1
 8006448:	080064c1 	.word	0x080064c1
 800644c:	080064c1 	.word	0x080064c1
 8006450:	080064c1 	.word	0x080064c1
 8006454:	080064c1 	.word	0x080064c1
 8006458:	080064b5 	.word	0x080064b5
 800645c:	080064c1 	.word	0x080064c1
 8006460:	080064c1 	.word	0x080064c1
 8006464:	080064c1 	.word	0x080064c1
 8006468:	080064c1 	.word	0x080064c1
 800646c:	080064c1 	.word	0x080064c1
 8006470:	080064c1 	.word	0x080064c1
 8006474:	080064c1 	.word	0x080064c1
 8006478:	080064a9 	.word	0x080064a9
 800647c:	080064c1 	.word	0x080064c1
 8006480:	080064c1 	.word	0x080064c1
 8006484:	080064c1 	.word	0x080064c1
 8006488:	080064c1 	.word	0x080064c1
 800648c:	080064c1 	.word	0x080064c1
 8006490:	080064c1 	.word	0x080064c1
 8006494:	080064c1 	.word	0x080064c1
 8006498:	0800649d 	.word	0x0800649d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	2b06      	cmp	r3, #6
 80064a0:	d913      	bls.n	80064ca <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80064a6:	e010      	b.n	80064ca <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	2b07      	cmp	r3, #7
 80064ac:	d90f      	bls.n	80064ce <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80064b2:	e00c      	b.n	80064ce <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	2b0f      	cmp	r3, #15
 80064b8:	d90b      	bls.n	80064d2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80064be:	e008      	b.n	80064d2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	75fb      	strb	r3, [r7, #23]
      break;
 80064c4:	e006      	b.n	80064d4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80064c6:	bf00      	nop
 80064c8:	e004      	b.n	80064d4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80064ca:	bf00      	nop
 80064cc:	e002      	b.n	80064d4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80064ce:	bf00      	nop
 80064d0:	e000      	b.n	80064d4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80064d2:	bf00      	nop
  }
  if (status == HAL_OK)
 80064d4:	7dfb      	ldrb	r3, [r7, #23]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10d      	bne.n	80064f6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f023 0118 	bic.w	r1, r3, #24
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80064f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	371c      	adds	r7, #28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e069      	b.n	80065ea <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d102      	bne.n	8006528 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7fc fac0 	bl	8002aa8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6819      	ldr	r1, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	4b2a      	ldr	r3, [pc, #168]	; (80065f4 <HAL_DCMI_Init+0xf0>)
 800654a:	400b      	ands	r3, r1
 800654c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6819      	ldr	r1, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006562:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800656e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800657a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006586:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006592:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	2b10      	cmp	r3, #16
 80065a2:	d112      	bne.n	80065ca <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	7f1b      	ldrb	r3, [r3, #28]
 80065a8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	7f5b      	ldrb	r3, [r3, #29]
 80065ae:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80065b0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	7f9b      	ldrb	r3, [r3, #30]
 80065b6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80065b8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	7fdb      	ldrb	r3, [r3, #31]
 80065c0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80065c6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80065c8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f042 021e 	orr.w	r2, r2, #30
 80065d8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	ffe0f007 	.word	0xffe0f007

080065f8 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f003 0304 	and.w	r3, r3, #4
 800660e:	2b00      	cmp	r3, #0
 8006610:	d016      	beq.n	8006640 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2204      	movs	r2, #4
 8006618:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800661e:	f043 0202 	orr.w	r2, r3, #2
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2204      	movs	r2, #4
 800662a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006632:	4a35      	ldr	r2, [pc, #212]	; (8006708 <HAL_DCMI_IRQHandler+0x110>)
 8006634:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800663a:	4618      	mov	r0, r3
 800663c:	f000 fa2a 	bl	8006a94 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d01e      	beq.n	8006688 <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2202      	movs	r2, #2
 8006650:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006656:	f043 0201 	orr.w	r2, r3, #1
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2204      	movs	r2, #4
 8006662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800666a:	4a27      	ldr	r2, [pc, #156]	; (8006708 <HAL_DCMI_IRQHandler+0x110>)
 800666c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fa0e 	bl	8006a94 <HAL_DMA_Abort_IT>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d004      	beq.n	8006688 <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006682:	4618      	mov	r0, r3
 8006684:	f000 f86a 	bl	800675c <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f003 0310 	and.w	r3, r3, #16
 800668e:	2b00      	cmp	r3, #0
 8006690:	d006      	beq.n	80066a0 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2210      	movs	r2, #16
 8006698:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f840 	bl	8006720 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f003 0308 	and.w	r3, r3, #8
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d006      	beq.n	80066b8 <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2208      	movs	r2, #8
 80066b0:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f83e 	bl	8006734 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d01d      	beq.n	80066fe <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d107      	bne.n	80066e0 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 021e 	bic.w	r2, r2, #30
 80066de:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68da      	ldr	r2, [r3, #12]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0201 	bic.w	r2, r2, #1
 80066ee:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2201      	movs	r2, #1
 80066f6:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f825 	bl	8006748 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80066fe:	bf00      	nop
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	0800675d 	.word	0x0800675d

0800670c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006768:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800676e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006770:	2b02      	cmp	r3, #2
 8006772:	d009      	beq.n	8006788 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006780:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f7ff ffbf 	bl	800670c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 800678e:	bf00      	nop
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
	...

08006798 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80067a4:	f7ff f9f8 	bl	8005b98 <HAL_GetTick>
 80067a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e099      	b.n	80068e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 0201 	bic.w	r2, r2, #1
 80067d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067d4:	e00f      	b.n	80067f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80067d6:	f7ff f9df 	bl	8005b98 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	2b05      	cmp	r3, #5
 80067e2:	d908      	bls.n	80067f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2220      	movs	r2, #32
 80067e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2203      	movs	r2, #3
 80067ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e078      	b.n	80068e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e8      	bne.n	80067d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	4b38      	ldr	r3, [pc, #224]	; (80068f0 <HAL_DMA_Init+0x158>)
 8006810:	4013      	ands	r3, r2
 8006812:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006822:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800682e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800683a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	4313      	orrs	r3, r2
 8006846:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	2b04      	cmp	r3, #4
 800684e:	d107      	bne.n	8006860 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006858:	4313      	orrs	r3, r2
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	4313      	orrs	r3, r2
 800685e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f023 0307 	bic.w	r3, r3, #7
 8006876:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006886:	2b04      	cmp	r3, #4
 8006888:	d117      	bne.n	80068ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	4313      	orrs	r3, r2
 8006892:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00e      	beq.n	80068ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fb09 	bl	8006eb4 <DMA_CheckFifoParam>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d008      	beq.n	80068ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2240      	movs	r2, #64	; 0x40
 80068ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80068b6:	2301      	movs	r3, #1
 80068b8:	e016      	b.n	80068e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fac0 	bl	8006e48 <DMA_CalcBaseAndBitshift>
 80068c8:	4603      	mov	r3, r0
 80068ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d0:	223f      	movs	r2, #63	; 0x3f
 80068d2:	409a      	lsls	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	f010803f 	.word	0xf010803f

080068f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006902:	2300      	movs	r3, #0
 8006904:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800690a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006912:	2b01      	cmp	r3, #1
 8006914:	d101      	bne.n	800691a <HAL_DMA_Start_IT+0x26>
 8006916:	2302      	movs	r3, #2
 8006918:	e048      	b.n	80069ac <HAL_DMA_Start_IT+0xb8>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b01      	cmp	r3, #1
 800692c:	d137      	bne.n	800699e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2202      	movs	r2, #2
 8006932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	68b9      	ldr	r1, [r7, #8]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 fa52 	bl	8006dec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694c:	223f      	movs	r2, #63	; 0x3f
 800694e:	409a      	lsls	r2, r3
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0216 	orr.w	r2, r2, #22
 8006962:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	695a      	ldr	r2, [r3, #20]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006972:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006978:	2b00      	cmp	r3, #0
 800697a:	d007      	beq.n	800698c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 0208 	orr.w	r2, r2, #8
 800698a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0201 	orr.w	r2, r2, #1
 800699a:	601a      	str	r2, [r3, #0]
 800699c:	e005      	b.n	80069aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80069a6:	2302      	movs	r3, #2
 80069a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80069c2:	f7ff f8e9 	bl	8005b98 <HAL_GetTick>
 80069c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d008      	beq.n	80069e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2280      	movs	r2, #128	; 0x80
 80069d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e052      	b.n	8006a8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0216 	bic.w	r2, r2, #22
 80069f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	695a      	ldr	r2, [r3, #20]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d103      	bne.n	8006a16 <HAL_DMA_Abort+0x62>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d007      	beq.n	8006a26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0208 	bic.w	r2, r2, #8
 8006a24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0201 	bic.w	r2, r2, #1
 8006a34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a36:	e013      	b.n	8006a60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a38:	f7ff f8ae 	bl	8005b98 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	2b05      	cmp	r3, #5
 8006a44:	d90c      	bls.n	8006a60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2203      	movs	r2, #3
 8006a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e015      	b.n	8006a8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e4      	bne.n	8006a38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a72:	223f      	movs	r2, #63	; 0x3f
 8006a74:	409a      	lsls	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d004      	beq.n	8006ab2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2280      	movs	r2, #128	; 0x80
 8006aac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e00c      	b.n	8006acc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2205      	movs	r2, #5
 8006ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 0201 	bic.w	r2, r2, #1
 8006ac8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006ae4:	4b92      	ldr	r3, [pc, #584]	; (8006d30 <HAL_DMA_IRQHandler+0x258>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a92      	ldr	r2, [pc, #584]	; (8006d34 <HAL_DMA_IRQHandler+0x25c>)
 8006aea:	fba2 2303 	umull	r2, r3, r2, r3
 8006aee:	0a9b      	lsrs	r3, r3, #10
 8006af0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b02:	2208      	movs	r2, #8
 8006b04:	409a      	lsls	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d01a      	beq.n	8006b44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d013      	beq.n	8006b44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0204 	bic.w	r2, r2, #4
 8006b2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b30:	2208      	movs	r2, #8
 8006b32:	409a      	lsls	r2, r3
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b3c:	f043 0201 	orr.w	r2, r3, #1
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b48:	2201      	movs	r2, #1
 8006b4a:	409a      	lsls	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d012      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00b      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b66:	2201      	movs	r2, #1
 8006b68:	409a      	lsls	r2, r3
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b72:	f043 0202 	orr.w	r2, r3, #2
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b7e:	2204      	movs	r2, #4
 8006b80:	409a      	lsls	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	4013      	ands	r3, r2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d012      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00b      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b9c:	2204      	movs	r2, #4
 8006b9e:	409a      	lsls	r2, r3
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba8:	f043 0204 	orr.w	r2, r3, #4
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb4:	2210      	movs	r2, #16
 8006bb6:	409a      	lsls	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d043      	beq.n	8006c48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0308 	and.w	r3, r3, #8
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d03c      	beq.n	8006c48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd2:	2210      	movs	r2, #16
 8006bd4:	409a      	lsls	r2, r3
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d018      	beq.n	8006c1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d108      	bne.n	8006c08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d024      	beq.n	8006c48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	4798      	blx	r3
 8006c06:	e01f      	b.n	8006c48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01b      	beq.n	8006c48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	4798      	blx	r3
 8006c18:	e016      	b.n	8006c48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d107      	bne.n	8006c38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f022 0208 	bic.w	r2, r2, #8
 8006c36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	409a      	lsls	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4013      	ands	r3, r2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 808e 	beq.w	8006d76 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0310 	and.w	r3, r3, #16
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 8086 	beq.w	8006d76 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c6e:	2220      	movs	r2, #32
 8006c70:	409a      	lsls	r2, r3
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b05      	cmp	r3, #5
 8006c80:	d136      	bne.n	8006cf0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0216 	bic.w	r2, r2, #22
 8006c90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	695a      	ldr	r2, [r3, #20]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ca0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d103      	bne.n	8006cb2 <HAL_DMA_IRQHandler+0x1da>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d007      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 0208 	bic.w	r2, r2, #8
 8006cc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc6:	223f      	movs	r2, #63	; 0x3f
 8006cc8:	409a      	lsls	r2, r3
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d07d      	beq.n	8006de2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	4798      	blx	r3
        }
        return;
 8006cee:	e078      	b.n	8006de2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d01c      	beq.n	8006d38 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d108      	bne.n	8006d1e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d030      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	4798      	blx	r3
 8006d1c:	e02b      	b.n	8006d76 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d027      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	4798      	blx	r3
 8006d2e:	e022      	b.n	8006d76 <HAL_DMA_IRQHandler+0x29e>
 8006d30:	20000008 	.word	0x20000008
 8006d34:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10f      	bne.n	8006d66 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 0210 	bic.w	r2, r2, #16
 8006d54:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d032      	beq.n	8006de4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d022      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2205      	movs	r2, #5
 8006d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 0201 	bic.w	r2, r2, #1
 8006da0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	3301      	adds	r3, #1
 8006da6:	60bb      	str	r3, [r7, #8]
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d307      	bcc.n	8006dbe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1f2      	bne.n	8006da2 <HAL_DMA_IRQHandler+0x2ca>
 8006dbc:	e000      	b.n	8006dc0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006dbe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d005      	beq.n	8006de4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	4798      	blx	r3
 8006de0:	e000      	b.n	8006de4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006de2:	bf00      	nop
    }
  }
}
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop

08006dec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	2b40      	cmp	r3, #64	; 0x40
 8006e18:	d108      	bne.n	8006e2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006e2a:	e007      	b.n	8006e3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	60da      	str	r2, [r3, #12]
}
 8006e3c:	bf00      	nop
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	3b10      	subs	r3, #16
 8006e58:	4a13      	ldr	r2, [pc, #76]	; (8006ea8 <DMA_CalcBaseAndBitshift+0x60>)
 8006e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5e:	091b      	lsrs	r3, r3, #4
 8006e60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006e62:	4a12      	ldr	r2, [pc, #72]	; (8006eac <DMA_CalcBaseAndBitshift+0x64>)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d908      	bls.n	8006e88 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	4b0c      	ldr	r3, [pc, #48]	; (8006eb0 <DMA_CalcBaseAndBitshift+0x68>)
 8006e7e:	4013      	ands	r3, r2
 8006e80:	1d1a      	adds	r2, r3, #4
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	659a      	str	r2, [r3, #88]	; 0x58
 8006e86:	e006      	b.n	8006e96 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	4b08      	ldr	r3, [pc, #32]	; (8006eb0 <DMA_CalcBaseAndBitshift+0x68>)
 8006e90:	4013      	ands	r3, r2
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	aaaaaaab 	.word	0xaaaaaaab
 8006eac:	0801568c 	.word	0x0801568c
 8006eb0:	fffffc00 	.word	0xfffffc00

08006eb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d11f      	bne.n	8006f0e <DMA_CheckFifoParam+0x5a>
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b03      	cmp	r3, #3
 8006ed2:	d856      	bhi.n	8006f82 <DMA_CheckFifoParam+0xce>
 8006ed4:	a201      	add	r2, pc, #4	; (adr r2, 8006edc <DMA_CheckFifoParam+0x28>)
 8006ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eda:	bf00      	nop
 8006edc:	08006eed 	.word	0x08006eed
 8006ee0:	08006eff 	.word	0x08006eff
 8006ee4:	08006eed 	.word	0x08006eed
 8006ee8:	08006f83 	.word	0x08006f83
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d046      	beq.n	8006f86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006efc:	e043      	b.n	8006f86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f06:	d140      	bne.n	8006f8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f0c:	e03d      	b.n	8006f8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f16:	d121      	bne.n	8006f5c <DMA_CheckFifoParam+0xa8>
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d837      	bhi.n	8006f8e <DMA_CheckFifoParam+0xda>
 8006f1e:	a201      	add	r2, pc, #4	; (adr r2, 8006f24 <DMA_CheckFifoParam+0x70>)
 8006f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f24:	08006f35 	.word	0x08006f35
 8006f28:	08006f3b 	.word	0x08006f3b
 8006f2c:	08006f35 	.word	0x08006f35
 8006f30:	08006f4d 	.word	0x08006f4d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	73fb      	strb	r3, [r7, #15]
      break;
 8006f38:	e030      	b.n	8006f9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d025      	beq.n	8006f92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f4a:	e022      	b.n	8006f92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f54:	d11f      	bne.n	8006f96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006f5a:	e01c      	b.n	8006f96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d903      	bls.n	8006f6a <DMA_CheckFifoParam+0xb6>
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b03      	cmp	r3, #3
 8006f66:	d003      	beq.n	8006f70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006f68:	e018      	b.n	8006f9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f6e:	e015      	b.n	8006f9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00e      	beq.n	8006f9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f80:	e00b      	b.n	8006f9a <DMA_CheckFifoParam+0xe6>
      break;
 8006f82:	bf00      	nop
 8006f84:	e00a      	b.n	8006f9c <DMA_CheckFifoParam+0xe8>
      break;
 8006f86:	bf00      	nop
 8006f88:	e008      	b.n	8006f9c <DMA_CheckFifoParam+0xe8>
      break;
 8006f8a:	bf00      	nop
 8006f8c:	e006      	b.n	8006f9c <DMA_CheckFifoParam+0xe8>
      break;
 8006f8e:	bf00      	nop
 8006f90:	e004      	b.n	8006f9c <DMA_CheckFifoParam+0xe8>
      break;
 8006f92:	bf00      	nop
 8006f94:	e002      	b.n	8006f9c <DMA_CheckFifoParam+0xe8>
      break;   
 8006f96:	bf00      	nop
 8006f98:	e000      	b.n	8006f9c <DMA_CheckFifoParam+0xe8>
      break;
 8006f9a:	bf00      	nop
    }
  } 
  
  return status; 
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop

08006fac <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e039      	b.n	8007032 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d106      	bne.n	8006fd8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7fb fe62 	bl	8002c9c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685a      	ldr	r2, [r3, #4]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffc:	f023 0107 	bic.w	r1, r3, #7
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689a      	ldr	r2, [r3, #8]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007012:	4b0a      	ldr	r3, [pc, #40]	; (800703c <HAL_DMA2D_Init+0x90>)
 8007014:	4013      	ands	r3, r2
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	68d1      	ldr	r1, [r2, #12]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	6812      	ldr	r2, [r2, #0]
 800701e:	430b      	orrs	r3, r1
 8007020:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	ffffc000 	.word	0xffffc000

08007040 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af02      	add	r7, sp, #8
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
 800704c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007054:	2b01      	cmp	r3, #1
 8007056:	d101      	bne.n	800705c <HAL_DMA2D_Start+0x1c>
 8007058:	2302      	movs	r3, #2
 800705a:	e018      	b.n	800708e <HAL_DMA2D_Start+0x4e>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	68b9      	ldr	r1, [r7, #8]
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 fa98 	bl	80075ac <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f042 0201 	orr.w	r2, r2, #1
 800708a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b086      	sub	sp, #24
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d056      	beq.n	8007160 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80070b2:	f7fe fd71 	bl	8005b98 <HAL_GetTick>
 80070b6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80070b8:	e04b      	b.n	8007152 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d023      	beq.n	8007114 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f003 0320 	and.w	r3, r3, #32
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d005      	beq.n	80070e2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070da:	f043 0202 	orr.w	r2, r3, #2
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d005      	beq.n	80070f8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f0:	f043 0201 	orr.w	r2, r3, #1
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2221      	movs	r2, #33	; 0x21
 80070fe:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2204      	movs	r2, #4
 8007104:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e0a5      	b.n	8007260 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800711a:	d01a      	beq.n	8007152 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800711c:	f7fe fd3c 	bl	8005b98 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	429a      	cmp	r2, r3
 800712a:	d302      	bcc.n	8007132 <HAL_DMA2D_PollForTransfer+0x9c>
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10f      	bne.n	8007152 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007136:	f043 0220 	orr.w	r2, r3, #32
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2203      	movs	r2, #3
 8007142:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e086      	b.n	8007260 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0ac      	beq.n	80070ba <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	f003 0320 	and.w	r3, r3, #32
 800716a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007172:	f003 0320 	and.w	r3, r3, #32
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	4313      	orrs	r3, r2
 800717a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d061      	beq.n	8007246 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007182:	f7fe fd09 	bl	8005b98 <HAL_GetTick>
 8007186:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007188:	e056      	b.n	8007238 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007198:	2b00      	cmp	r3, #0
 800719a:	d02e      	beq.n	80071fa <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f003 0308 	and.w	r3, r3, #8
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d005      	beq.n	80071b2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071aa:	f043 0204 	orr.w	r2, r3, #4
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f003 0320 	and.w	r3, r3, #32
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d005      	beq.n	80071c8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c0:	f043 0202 	orr.w	r2, r3, #2
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d6:	f043 0201 	orr.w	r2, r3, #1
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2229      	movs	r2, #41	; 0x29
 80071e4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2204      	movs	r2, #4
 80071ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e032      	b.n	8007260 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007200:	d01a      	beq.n	8007238 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007202:	f7fe fcc9 	bl	8005b98 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	429a      	cmp	r2, r3
 8007210:	d302      	bcc.n	8007218 <HAL_DMA2D_PollForTransfer+0x182>
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10f      	bne.n	8007238 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721c:	f043 0220 	orr.w	r2, r3, #32
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2203      	movs	r2, #3
 8007228:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e013      	b.n	8007260 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f003 0310 	and.w	r3, r3, #16
 8007242:	2b00      	cmp	r3, #0
 8007244:	d0a1      	beq.n	800718a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2212      	movs	r2, #18
 800724c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3718      	adds	r7, #24
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d026      	beq.n	80072d8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007290:	2b00      	cmp	r3, #0
 8007292:	d021      	beq.n	80072d8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072a2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a8:	f043 0201 	orr.w	r2, r3, #1
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2201      	movs	r2, #1
 80072b6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2204      	movs	r2, #4
 80072bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d003      	beq.n	80072d8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f003 0320 	and.w	r3, r3, #32
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d026      	beq.n	8007330 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d021      	beq.n	8007330 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072fa:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2220      	movs	r2, #32
 8007302:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007308:	f043 0202 	orr.w	r2, r3, #2
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2204      	movs	r2, #4
 8007314:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f003 0308 	and.w	r3, r3, #8
 8007336:	2b00      	cmp	r3, #0
 8007338:	d026      	beq.n	8007388 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007340:	2b00      	cmp	r3, #0
 8007342:	d021      	beq.n	8007388 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007352:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2208      	movs	r2, #8
 800735a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007360:	f043 0204 	orr.w	r2, r3, #4
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2204      	movs	r2, #4
 800736c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d003      	beq.n	8007388 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f003 0304 	and.w	r3, r3, #4
 800738e:	2b00      	cmp	r3, #0
 8007390:	d013      	beq.n	80073ba <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00e      	beq.n	80073ba <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073aa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2204      	movs	r2, #4
 80073b2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f853 	bl	8007460 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f003 0302 	and.w	r3, r3, #2
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d024      	beq.n	800740e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d01f      	beq.n	800740e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80073dc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2202      	movs	r2, #2
 80073e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f003 0310 	and.w	r3, r3, #16
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01f      	beq.n	8007458 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d01a      	beq.n	8007458 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007430:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2210      	movs	r2, #16
 8007438:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f80e 	bl	8007474 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007458:	bf00      	nop
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d101      	bne.n	80074a8 <HAL_DMA2D_ConfigLayer+0x20>
 80074a4:	2302      	movs	r3, #2
 80074a6:	e079      	b.n	800759c <HAL_DMA2D_ConfigLayer+0x114>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	011b      	lsls	r3, r3, #4
 80074bc:	3318      	adds	r3, #24
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	4413      	add	r3, r2
 80074c2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	685a      	ldr	r2, [r3, #4]
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	041b      	lsls	r3, r3, #16
 80074ce:	4313      	orrs	r3, r2
 80074d0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80074d2:	4b35      	ldr	r3, [pc, #212]	; (80075a8 <HAL_DMA2D_ConfigLayer+0x120>)
 80074d4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	2b0a      	cmp	r3, #10
 80074dc:	d003      	beq.n	80074e6 <HAL_DMA2D_ConfigLayer+0x5e>
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2b09      	cmp	r3, #9
 80074e4:	d107      	bne.n	80074f6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]
 80074f4:	e005      	b.n	8007502 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	061b      	lsls	r3, r3, #24
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	4313      	orrs	r3, r2
 8007500:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d120      	bne.n	800754a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	43db      	mvns	r3, r3
 8007512:	ea02 0103 	and.w	r1, r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	430a      	orrs	r2, r1
 800751e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	6812      	ldr	r2, [r2, #0]
 8007528:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	2b0a      	cmp	r3, #10
 8007530:	d003      	beq.n	800753a <HAL_DMA2D_ConfigLayer+0xb2>
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	2b09      	cmp	r3, #9
 8007538:	d127      	bne.n	800758a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	68da      	ldr	r2, [r3, #12]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007546:	629a      	str	r2, [r3, #40]	; 0x28
 8007548:	e01f      	b.n	800758a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	69da      	ldr	r2, [r3, #28]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	43db      	mvns	r3, r3
 8007554:	ea02 0103 	and.w	r1, r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	430a      	orrs	r2, r1
 8007560:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	6812      	ldr	r2, [r2, #0]
 800756a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	2b0a      	cmp	r3, #10
 8007572:	d003      	beq.n	800757c <HAL_DMA2D_ConfigLayer+0xf4>
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	2b09      	cmp	r3, #9
 800757a:	d106      	bne.n	800758a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	68da      	ldr	r2, [r3, #12]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007588:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	371c      	adds	r7, #28
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr
 80075a8:	ff03000f 	.word	0xff03000f

080075ac <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b08b      	sub	sp, #44	; 0x2c
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	041a      	lsls	r2, r3, #16
 80075c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ca:	431a      	orrs	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80075e4:	d174      	bne.n	80076d0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80075ec:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075f4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80075fc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	b2db      	uxtb	r3, r3
 8007602:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d108      	bne.n	800761e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800760c:	69ba      	ldr	r2, [r7, #24]
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	431a      	orrs	r2, r3
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	4313      	orrs	r3, r2
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	627b      	str	r3, [r7, #36]	; 0x24
 800761c:	e053      	b.n	80076c6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d106      	bne.n	8007634 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007626:	69ba      	ldr	r2, [r7, #24]
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	4313      	orrs	r3, r2
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	4313      	orrs	r3, r2
 8007630:	627b      	str	r3, [r7, #36]	; 0x24
 8007632:	e048      	b.n	80076c6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	2b02      	cmp	r3, #2
 800763a:	d111      	bne.n	8007660 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	0cdb      	lsrs	r3, r3, #19
 8007640:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	0a9b      	lsrs	r3, r3, #10
 8007646:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	08db      	lsrs	r3, r3, #3
 800764c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	015a      	lsls	r2, r3, #5
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	02db      	lsls	r3, r3, #11
 8007656:	4313      	orrs	r3, r2
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	4313      	orrs	r3, r2
 800765c:	627b      	str	r3, [r7, #36]	; 0x24
 800765e:	e032      	b.n	80076c6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	2b03      	cmp	r3, #3
 8007666:	d117      	bne.n	8007698 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	0fdb      	lsrs	r3, r3, #31
 800766c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	0cdb      	lsrs	r3, r3, #19
 8007672:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	0adb      	lsrs	r3, r3, #11
 8007678:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	08db      	lsrs	r3, r3, #3
 800767e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	029b      	lsls	r3, r3, #10
 8007688:	431a      	orrs	r2, r3
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	03db      	lsls	r3, r3, #15
 800768e:	4313      	orrs	r3, r2
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	4313      	orrs	r3, r2
 8007694:	627b      	str	r3, [r7, #36]	; 0x24
 8007696:	e016      	b.n	80076c6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	0f1b      	lsrs	r3, r3, #28
 800769c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	0d1b      	lsrs	r3, r3, #20
 80076a2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	0b1b      	lsrs	r3, r3, #12
 80076a8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	091b      	lsrs	r3, r3, #4
 80076ae:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	011a      	lsls	r2, r3, #4
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	021b      	lsls	r3, r3, #8
 80076b8:	431a      	orrs	r2, r3
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	031b      	lsls	r3, r3, #12
 80076be:	4313      	orrs	r3, r2
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076cc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80076ce:	e003      	b.n	80076d8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	60da      	str	r2, [r3, #12]
}
 80076d8:	bf00      	nop
 80076da:	372c      	adds	r7, #44	; 0x2c
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b089      	sub	sp, #36	; 0x24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80076ee:	2300      	movs	r3, #0
 80076f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80076f2:	2300      	movs	r3, #0
 80076f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80076f6:	2300      	movs	r3, #0
 80076f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80076fa:	2300      	movs	r3, #0
 80076fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80076fe:	2300      	movs	r3, #0
 8007700:	61fb      	str	r3, [r7, #28]
 8007702:	e175      	b.n	80079f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007704:	2201      	movs	r2, #1
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	fa02 f303 	lsl.w	r3, r2, r3
 800770c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	4013      	ands	r3, r2
 8007716:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	429a      	cmp	r2, r3
 800771e:	f040 8164 	bne.w	80079ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d00b      	beq.n	8007742 <HAL_GPIO_Init+0x5e>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	2b02      	cmp	r3, #2
 8007730:	d007      	beq.n	8007742 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007736:	2b11      	cmp	r3, #17
 8007738:	d003      	beq.n	8007742 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	2b12      	cmp	r3, #18
 8007740:	d130      	bne.n	80077a4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	2203      	movs	r2, #3
 800774e:	fa02 f303 	lsl.w	r3, r2, r3
 8007752:	43db      	mvns	r3, r3
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	4013      	ands	r3, r2
 8007758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	fa02 f303 	lsl.w	r3, r2, r3
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	4313      	orrs	r3, r2
 800776a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	69ba      	ldr	r2, [r7, #24]
 8007770:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007778:	2201      	movs	r2, #1
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	fa02 f303 	lsl.w	r3, r2, r3
 8007780:	43db      	mvns	r3, r3
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	4013      	ands	r3, r2
 8007786:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	091b      	lsrs	r3, r3, #4
 800778e:	f003 0201 	and.w	r2, r3, #1
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	fa02 f303 	lsl.w	r3, r2, r3
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	4313      	orrs	r3, r2
 800779c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	69ba      	ldr	r2, [r7, #24]
 80077a2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	005b      	lsls	r3, r3, #1
 80077ae:	2203      	movs	r2, #3
 80077b0:	fa02 f303 	lsl.w	r3, r2, r3
 80077b4:	43db      	mvns	r3, r3
 80077b6:	69ba      	ldr	r2, [r7, #24]
 80077b8:	4013      	ands	r3, r2
 80077ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	689a      	ldr	r2, [r3, #8]
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	005b      	lsls	r3, r3, #1
 80077c4:	fa02 f303 	lsl.w	r3, r2, r3
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d003      	beq.n	80077e4 <HAL_GPIO_Init+0x100>
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	2b12      	cmp	r3, #18
 80077e2:	d123      	bne.n	800782c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	08da      	lsrs	r2, r3, #3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3208      	adds	r2, #8
 80077ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	f003 0307 	and.w	r3, r3, #7
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	220f      	movs	r2, #15
 80077fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007800:	43db      	mvns	r3, r3
 8007802:	69ba      	ldr	r2, [r7, #24]
 8007804:	4013      	ands	r3, r2
 8007806:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	691a      	ldr	r2, [r3, #16]
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	f003 0307 	and.w	r3, r3, #7
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	fa02 f303 	lsl.w	r3, r2, r3
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	4313      	orrs	r3, r2
 800781c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	08da      	lsrs	r2, r3, #3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	3208      	adds	r2, #8
 8007826:	69b9      	ldr	r1, [r7, #24]
 8007828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	2203      	movs	r2, #3
 8007838:	fa02 f303 	lsl.w	r3, r2, r3
 800783c:	43db      	mvns	r3, r3
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	4013      	ands	r3, r2
 8007842:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f003 0203 	and.w	r2, r3, #3
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	fa02 f303 	lsl.w	r3, r2, r3
 8007854:	69ba      	ldr	r2, [r7, #24]
 8007856:	4313      	orrs	r3, r2
 8007858:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	69ba      	ldr	r2, [r7, #24]
 800785e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 80be 	beq.w	80079ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800786e:	4b66      	ldr	r3, [pc, #408]	; (8007a08 <HAL_GPIO_Init+0x324>)
 8007870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007872:	4a65      	ldr	r2, [pc, #404]	; (8007a08 <HAL_GPIO_Init+0x324>)
 8007874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007878:	6453      	str	r3, [r2, #68]	; 0x44
 800787a:	4b63      	ldr	r3, [pc, #396]	; (8007a08 <HAL_GPIO_Init+0x324>)
 800787c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800787e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007886:	4a61      	ldr	r2, [pc, #388]	; (8007a0c <HAL_GPIO_Init+0x328>)
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	089b      	lsrs	r3, r3, #2
 800788c:	3302      	adds	r3, #2
 800788e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007892:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	f003 0303 	and.w	r3, r3, #3
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	220f      	movs	r2, #15
 800789e:	fa02 f303 	lsl.w	r3, r2, r3
 80078a2:	43db      	mvns	r3, r3
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	4013      	ands	r3, r2
 80078a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a58      	ldr	r2, [pc, #352]	; (8007a10 <HAL_GPIO_Init+0x32c>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d037      	beq.n	8007922 <HAL_GPIO_Init+0x23e>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a57      	ldr	r2, [pc, #348]	; (8007a14 <HAL_GPIO_Init+0x330>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d031      	beq.n	800791e <HAL_GPIO_Init+0x23a>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a56      	ldr	r2, [pc, #344]	; (8007a18 <HAL_GPIO_Init+0x334>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d02b      	beq.n	800791a <HAL_GPIO_Init+0x236>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a55      	ldr	r2, [pc, #340]	; (8007a1c <HAL_GPIO_Init+0x338>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d025      	beq.n	8007916 <HAL_GPIO_Init+0x232>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a54      	ldr	r2, [pc, #336]	; (8007a20 <HAL_GPIO_Init+0x33c>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d01f      	beq.n	8007912 <HAL_GPIO_Init+0x22e>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a53      	ldr	r2, [pc, #332]	; (8007a24 <HAL_GPIO_Init+0x340>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d019      	beq.n	800790e <HAL_GPIO_Init+0x22a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a52      	ldr	r2, [pc, #328]	; (8007a28 <HAL_GPIO_Init+0x344>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d013      	beq.n	800790a <HAL_GPIO_Init+0x226>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a51      	ldr	r2, [pc, #324]	; (8007a2c <HAL_GPIO_Init+0x348>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00d      	beq.n	8007906 <HAL_GPIO_Init+0x222>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a50      	ldr	r2, [pc, #320]	; (8007a30 <HAL_GPIO_Init+0x34c>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d007      	beq.n	8007902 <HAL_GPIO_Init+0x21e>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a4f      	ldr	r2, [pc, #316]	; (8007a34 <HAL_GPIO_Init+0x350>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d101      	bne.n	80078fe <HAL_GPIO_Init+0x21a>
 80078fa:	2309      	movs	r3, #9
 80078fc:	e012      	b.n	8007924 <HAL_GPIO_Init+0x240>
 80078fe:	230a      	movs	r3, #10
 8007900:	e010      	b.n	8007924 <HAL_GPIO_Init+0x240>
 8007902:	2308      	movs	r3, #8
 8007904:	e00e      	b.n	8007924 <HAL_GPIO_Init+0x240>
 8007906:	2307      	movs	r3, #7
 8007908:	e00c      	b.n	8007924 <HAL_GPIO_Init+0x240>
 800790a:	2306      	movs	r3, #6
 800790c:	e00a      	b.n	8007924 <HAL_GPIO_Init+0x240>
 800790e:	2305      	movs	r3, #5
 8007910:	e008      	b.n	8007924 <HAL_GPIO_Init+0x240>
 8007912:	2304      	movs	r3, #4
 8007914:	e006      	b.n	8007924 <HAL_GPIO_Init+0x240>
 8007916:	2303      	movs	r3, #3
 8007918:	e004      	b.n	8007924 <HAL_GPIO_Init+0x240>
 800791a:	2302      	movs	r3, #2
 800791c:	e002      	b.n	8007924 <HAL_GPIO_Init+0x240>
 800791e:	2301      	movs	r3, #1
 8007920:	e000      	b.n	8007924 <HAL_GPIO_Init+0x240>
 8007922:	2300      	movs	r3, #0
 8007924:	69fa      	ldr	r2, [r7, #28]
 8007926:	f002 0203 	and.w	r2, r2, #3
 800792a:	0092      	lsls	r2, r2, #2
 800792c:	4093      	lsls	r3, r2
 800792e:	69ba      	ldr	r2, [r7, #24]
 8007930:	4313      	orrs	r3, r2
 8007932:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007934:	4935      	ldr	r1, [pc, #212]	; (8007a0c <HAL_GPIO_Init+0x328>)
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	089b      	lsrs	r3, r3, #2
 800793a:	3302      	adds	r3, #2
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007942:	4b3d      	ldr	r3, [pc, #244]	; (8007a38 <HAL_GPIO_Init+0x354>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	43db      	mvns	r3, r3
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	4013      	ands	r3, r2
 8007950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d003      	beq.n	8007966 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800795e:	69ba      	ldr	r2, [r7, #24]
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	4313      	orrs	r3, r2
 8007964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007966:	4a34      	ldr	r2, [pc, #208]	; (8007a38 <HAL_GPIO_Init+0x354>)
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800796c:	4b32      	ldr	r3, [pc, #200]	; (8007a38 <HAL_GPIO_Init+0x354>)
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	43db      	mvns	r3, r3
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	4013      	ands	r3, r2
 800797a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d003      	beq.n	8007990 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	4313      	orrs	r3, r2
 800798e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007990:	4a29      	ldr	r2, [pc, #164]	; (8007a38 <HAL_GPIO_Init+0x354>)
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007996:	4b28      	ldr	r3, [pc, #160]	; (8007a38 <HAL_GPIO_Init+0x354>)
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	43db      	mvns	r3, r3
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	4013      	ands	r3, r2
 80079a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80079b2:	69ba      	ldr	r2, [r7, #24]
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80079ba:	4a1f      	ldr	r2, [pc, #124]	; (8007a38 <HAL_GPIO_Init+0x354>)
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80079c0:	4b1d      	ldr	r3, [pc, #116]	; (8007a38 <HAL_GPIO_Init+0x354>)
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	43db      	mvns	r3, r3
 80079ca:	69ba      	ldr	r2, [r7, #24]
 80079cc:	4013      	ands	r3, r2
 80079ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80079e4:	4a14      	ldr	r2, [pc, #80]	; (8007a38 <HAL_GPIO_Init+0x354>)
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	3301      	adds	r3, #1
 80079ee:	61fb      	str	r3, [r7, #28]
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	2b0f      	cmp	r3, #15
 80079f4:	f67f ae86 	bls.w	8007704 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80079f8:	bf00      	nop
 80079fa:	bf00      	nop
 80079fc:	3724      	adds	r7, #36	; 0x24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	40023800 	.word	0x40023800
 8007a0c:	40013800 	.word	0x40013800
 8007a10:	40020000 	.word	0x40020000
 8007a14:	40020400 	.word	0x40020400
 8007a18:	40020800 	.word	0x40020800
 8007a1c:	40020c00 	.word	0x40020c00
 8007a20:	40021000 	.word	0x40021000
 8007a24:	40021400 	.word	0x40021400
 8007a28:	40021800 	.word	0x40021800
 8007a2c:	40021c00 	.word	0x40021c00
 8007a30:	40022000 	.word	0x40022000
 8007a34:	40022400 	.word	0x40022400
 8007a38:	40013c00 	.word	0x40013c00

08007a3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b087      	sub	sp, #28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007a46:	2300      	movs	r3, #0
 8007a48:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]
 8007a56:	e0d9      	b.n	8007c0c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007a58:	2201      	movs	r2, #1
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a60:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	4013      	ands	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	f040 80c9 	bne.w	8007c06 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007a74:	4a6b      	ldr	r2, [pc, #428]	; (8007c24 <HAL_GPIO_DeInit+0x1e8>)
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	089b      	lsrs	r3, r3, #2
 8007a7a:	3302      	adds	r3, #2
 8007a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a80:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f003 0303 	and.w	r3, r3, #3
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	220f      	movs	r2, #15
 8007a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	4013      	ands	r3, r2
 8007a94:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a63      	ldr	r2, [pc, #396]	; (8007c28 <HAL_GPIO_DeInit+0x1ec>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d037      	beq.n	8007b0e <HAL_GPIO_DeInit+0xd2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a62      	ldr	r2, [pc, #392]	; (8007c2c <HAL_GPIO_DeInit+0x1f0>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d031      	beq.n	8007b0a <HAL_GPIO_DeInit+0xce>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a61      	ldr	r2, [pc, #388]	; (8007c30 <HAL_GPIO_DeInit+0x1f4>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d02b      	beq.n	8007b06 <HAL_GPIO_DeInit+0xca>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a60      	ldr	r2, [pc, #384]	; (8007c34 <HAL_GPIO_DeInit+0x1f8>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d025      	beq.n	8007b02 <HAL_GPIO_DeInit+0xc6>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a5f      	ldr	r2, [pc, #380]	; (8007c38 <HAL_GPIO_DeInit+0x1fc>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d01f      	beq.n	8007afe <HAL_GPIO_DeInit+0xc2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a5e      	ldr	r2, [pc, #376]	; (8007c3c <HAL_GPIO_DeInit+0x200>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d019      	beq.n	8007afa <HAL_GPIO_DeInit+0xbe>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a5d      	ldr	r2, [pc, #372]	; (8007c40 <HAL_GPIO_DeInit+0x204>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d013      	beq.n	8007af6 <HAL_GPIO_DeInit+0xba>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a5c      	ldr	r2, [pc, #368]	; (8007c44 <HAL_GPIO_DeInit+0x208>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d00d      	beq.n	8007af2 <HAL_GPIO_DeInit+0xb6>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a5b      	ldr	r2, [pc, #364]	; (8007c48 <HAL_GPIO_DeInit+0x20c>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d007      	beq.n	8007aee <HAL_GPIO_DeInit+0xb2>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a5a      	ldr	r2, [pc, #360]	; (8007c4c <HAL_GPIO_DeInit+0x210>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d101      	bne.n	8007aea <HAL_GPIO_DeInit+0xae>
 8007ae6:	2309      	movs	r3, #9
 8007ae8:	e012      	b.n	8007b10 <HAL_GPIO_DeInit+0xd4>
 8007aea:	230a      	movs	r3, #10
 8007aec:	e010      	b.n	8007b10 <HAL_GPIO_DeInit+0xd4>
 8007aee:	2308      	movs	r3, #8
 8007af0:	e00e      	b.n	8007b10 <HAL_GPIO_DeInit+0xd4>
 8007af2:	2307      	movs	r3, #7
 8007af4:	e00c      	b.n	8007b10 <HAL_GPIO_DeInit+0xd4>
 8007af6:	2306      	movs	r3, #6
 8007af8:	e00a      	b.n	8007b10 <HAL_GPIO_DeInit+0xd4>
 8007afa:	2305      	movs	r3, #5
 8007afc:	e008      	b.n	8007b10 <HAL_GPIO_DeInit+0xd4>
 8007afe:	2304      	movs	r3, #4
 8007b00:	e006      	b.n	8007b10 <HAL_GPIO_DeInit+0xd4>
 8007b02:	2303      	movs	r3, #3
 8007b04:	e004      	b.n	8007b10 <HAL_GPIO_DeInit+0xd4>
 8007b06:	2302      	movs	r3, #2
 8007b08:	e002      	b.n	8007b10 <HAL_GPIO_DeInit+0xd4>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e000      	b.n	8007b10 <HAL_GPIO_DeInit+0xd4>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	f002 0203 	and.w	r2, r2, #3
 8007b16:	0092      	lsls	r2, r2, #2
 8007b18:	4093      	lsls	r3, r2
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d132      	bne.n	8007b86 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007b20:	4b4b      	ldr	r3, [pc, #300]	; (8007c50 <HAL_GPIO_DeInit+0x214>)
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	43db      	mvns	r3, r3
 8007b28:	4949      	ldr	r1, [pc, #292]	; (8007c50 <HAL_GPIO_DeInit+0x214>)
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007b2e:	4b48      	ldr	r3, [pc, #288]	; (8007c50 <HAL_GPIO_DeInit+0x214>)
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	43db      	mvns	r3, r3
 8007b36:	4946      	ldr	r1, [pc, #280]	; (8007c50 <HAL_GPIO_DeInit+0x214>)
 8007b38:	4013      	ands	r3, r2
 8007b3a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007b3c:	4b44      	ldr	r3, [pc, #272]	; (8007c50 <HAL_GPIO_DeInit+0x214>)
 8007b3e:	689a      	ldr	r2, [r3, #8]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	43db      	mvns	r3, r3
 8007b44:	4942      	ldr	r1, [pc, #264]	; (8007c50 <HAL_GPIO_DeInit+0x214>)
 8007b46:	4013      	ands	r3, r2
 8007b48:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007b4a:	4b41      	ldr	r3, [pc, #260]	; (8007c50 <HAL_GPIO_DeInit+0x214>)
 8007b4c:	68da      	ldr	r2, [r3, #12]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	43db      	mvns	r3, r3
 8007b52:	493f      	ldr	r1, [pc, #252]	; (8007c50 <HAL_GPIO_DeInit+0x214>)
 8007b54:	4013      	ands	r3, r2
 8007b56:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f003 0303 	and.w	r3, r3, #3
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	220f      	movs	r2, #15
 8007b62:	fa02 f303 	lsl.w	r3, r2, r3
 8007b66:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007b68:	4a2e      	ldr	r2, [pc, #184]	; (8007c24 <HAL_GPIO_DeInit+0x1e8>)
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	089b      	lsrs	r3, r3, #2
 8007b6e:	3302      	adds	r3, #2
 8007b70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	43da      	mvns	r2, r3
 8007b78:	482a      	ldr	r0, [pc, #168]	; (8007c24 <HAL_GPIO_DeInit+0x1e8>)
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	089b      	lsrs	r3, r3, #2
 8007b7e:	400a      	ands	r2, r1
 8007b80:	3302      	adds	r3, #2
 8007b82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	005b      	lsls	r3, r3, #1
 8007b8e:	2103      	movs	r1, #3
 8007b90:	fa01 f303 	lsl.w	r3, r1, r3
 8007b94:	43db      	mvns	r3, r3
 8007b96:	401a      	ands	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	08da      	lsrs	r2, r3, #3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	3208      	adds	r2, #8
 8007ba4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f003 0307 	and.w	r3, r3, #7
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	220f      	movs	r2, #15
 8007bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb6:	43db      	mvns	r3, r3
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	08d2      	lsrs	r2, r2, #3
 8007bbc:	4019      	ands	r1, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	3208      	adds	r2, #8
 8007bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	005b      	lsls	r3, r3, #1
 8007bce:	2103      	movs	r1, #3
 8007bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd4:	43db      	mvns	r3, r3
 8007bd6:	401a      	ands	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	2101      	movs	r1, #1
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	fa01 f303 	lsl.w	r3, r1, r3
 8007be8:	43db      	mvns	r3, r3
 8007bea:	401a      	ands	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	689a      	ldr	r2, [r3, #8]
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	005b      	lsls	r3, r3, #1
 8007bf8:	2103      	movs	r1, #3
 8007bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8007bfe:	43db      	mvns	r3, r3
 8007c00:	401a      	ands	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	617b      	str	r3, [r7, #20]
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	2b0f      	cmp	r3, #15
 8007c10:	f67f af22 	bls.w	8007a58 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007c14:	bf00      	nop
 8007c16:	bf00      	nop
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	40013800 	.word	0x40013800
 8007c28:	40020000 	.word	0x40020000
 8007c2c:	40020400 	.word	0x40020400
 8007c30:	40020800 	.word	0x40020800
 8007c34:	40020c00 	.word	0x40020c00
 8007c38:	40021000 	.word	0x40021000
 8007c3c:	40021400 	.word	0x40021400
 8007c40:	40021800 	.word	0x40021800
 8007c44:	40021c00 	.word	0x40021c00
 8007c48:	40022000 	.word	0x40022000
 8007c4c:	40022400 	.word	0x40022400
 8007c50:	40013c00 	.word	0x40013c00

08007c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	807b      	strh	r3, [r7, #2]
 8007c60:	4613      	mov	r3, r2
 8007c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007c64:	787b      	ldrb	r3, [r7, #1]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c6a:	887a      	ldrh	r2, [r7, #2]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007c70:	e003      	b.n	8007c7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007c72:	887b      	ldrh	r3, [r7, #2]
 8007c74:	041a      	lsls	r2, r3, #16
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	619a      	str	r2, [r3, #24]
}
 8007c7a:	bf00      	nop
 8007c7c:	370c      	adds	r7, #12
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b085      	sub	sp, #20
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	460b      	mov	r3, r1
 8007c90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007c98:	887a      	ldrh	r2, [r7, #2]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	041a      	lsls	r2, r3, #16
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	43d9      	mvns	r1, r3
 8007ca4:	887b      	ldrh	r3, [r7, #2]
 8007ca6:	400b      	ands	r3, r1
 8007ca8:	431a      	orrs	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	619a      	str	r2, [r3, #24]
}
 8007cae:	bf00      	nop
 8007cb0:	3714      	adds	r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
	...

08007cbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007cc6:	4b08      	ldr	r3, [pc, #32]	; (8007ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007cc8:	695a      	ldr	r2, [r3, #20]
 8007cca:	88fb      	ldrh	r3, [r7, #6]
 8007ccc:	4013      	ands	r3, r2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d006      	beq.n	8007ce0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007cd2:	4a05      	ldr	r2, [pc, #20]	; (8007ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007cd4:	88fb      	ldrh	r3, [r7, #6]
 8007cd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007cd8:	88fb      	ldrh	r3, [r7, #6]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 f806 	bl	8007cec <HAL_GPIO_EXTI_Callback>
  }
}
 8007ce0:	bf00      	nop
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	40013c00 	.word	0x40013c00

08007cec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007cf6:	bf00      	nop
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b086      	sub	sp, #24
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f007 fcf3 	bl	800f704 <USB_GetMode>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	f040 80ef 	bne.w	8007f04 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f007 fcd7 	bl	800f6de <USB_ReadInterrupts>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f000 80e5 	beq.w	8007f02 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f007 fcce 	bl	800f6de <USB_ReadInterrupts>
 8007d42:	4603      	mov	r3, r0
 8007d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d4c:	d104      	bne.n	8007d58 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007d56:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f007 fcbe 	bl	800f6de <USB_ReadInterrupts>
 8007d62:	4603      	mov	r3, r0
 8007d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d6c:	d104      	bne.n	8007d78 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007d76:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f007 fcae 	bl	800f6de <USB_ReadInterrupts>
 8007d82:	4603      	mov	r3, r0
 8007d84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d8c:	d104      	bne.n	8007d98 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007d96:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f007 fc9e 	bl	800f6de <USB_ReadInterrupts>
 8007da2:	4603      	mov	r3, r0
 8007da4:	f003 0302 	and.w	r3, r3, #2
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d103      	bne.n	8007db4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2202      	movs	r2, #2
 8007db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4618      	mov	r0, r3
 8007dba:	f007 fc90 	bl	800f6de <USB_ReadInterrupts>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dc8:	d115      	bne.n	8007df6 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007dd2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d108      	bne.n	8007df6 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f008 f95f 	bl	80100a8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2101      	movs	r1, #1
 8007df0:	4618      	mov	r0, r3
 8007df2:	f007 fc95 	bl	800f720 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f007 fc6f 	bl	800f6de <USB_ReadInterrupts>
 8007e00:	4603      	mov	r3, r0
 8007e02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e0a:	d102      	bne.n	8007e12 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f001 f98a 	bl	8009126 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f007 fc61 	bl	800f6de <USB_ReadInterrupts>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	f003 0308 	and.w	r3, r3, #8
 8007e22:	2b08      	cmp	r3, #8
 8007e24:	d106      	bne.n	8007e34 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f008 f922 	bl	8010070 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2208      	movs	r2, #8
 8007e32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f007 fc50 	bl	800f6de <USB_ReadInterrupts>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	f003 0310 	and.w	r3, r3, #16
 8007e44:	2b10      	cmp	r3, #16
 8007e46:	d101      	bne.n	8007e4c <HAL_HCD_IRQHandler+0x14a>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e000      	b.n	8007e4e <HAL_HCD_IRQHandler+0x14c>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d012      	beq.n	8007e78 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	699a      	ldr	r2, [r3, #24]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f022 0210 	bic.w	r2, r2, #16
 8007e60:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f001 f88d 	bl	8008f82 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699a      	ldr	r2, [r3, #24]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f042 0210 	orr.w	r2, r2, #16
 8007e76:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f007 fc2e 	bl	800f6de <USB_ReadInterrupts>
 8007e82:	4603      	mov	r3, r0
 8007e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e8c:	d13a      	bne.n	8007f04 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f007 fc7e 	bl	800f794 <USB_HC_ReadInterrupt>
 8007e98:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	617b      	str	r3, [r7, #20]
 8007e9e:	e025      	b.n	8007eec <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	f003 030f 	and.w	r3, r3, #15
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d018      	beq.n	8007ee6 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	015a      	lsls	r2, r3, #5
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	4413      	add	r3, r2
 8007ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eca:	d106      	bne.n	8007eda <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f836 	bl	8007f44 <HCD_HC_IN_IRQHandler>
 8007ed8:	e005      	b.n	8007ee6 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fc51 	bl	8008788 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	617b      	str	r3, [r7, #20]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d3d4      	bcc.n	8007ea0 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007efe:	615a      	str	r2, [r3, #20]
 8007f00:	e000      	b.n	8007f04 <HAL_HCD_IRQHandler+0x202>
      return;
 8007f02:	bf00      	nop
    }
  }
}
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d101      	bne.n	8007f20 <HAL_HCD_Stop+0x16>
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	e00d      	b.n	8007f3c <HAL_HCD_Stop+0x32>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f007 fd5e 	bl	800f9ee <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8007f5a:	78fb      	ldrb	r3, [r7, #3]
 8007f5c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f003 0304 	and.w	r3, r3, #4
 8007f70:	2b04      	cmp	r3, #4
 8007f72:	d119      	bne.n	8007fa8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	015a      	lsls	r2, r3, #5
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f80:	461a      	mov	r2, r3
 8007f82:	2304      	movs	r3, #4
 8007f84:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	015a      	lsls	r2, r3, #5
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	0151      	lsls	r1, r2, #5
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	440a      	add	r2, r1
 8007f9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fa0:	f043 0302 	orr.w	r3, r3, #2
 8007fa4:	60d3      	str	r3, [r2, #12]
 8007fa6:	e101      	b.n	80081ac <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fbe:	d12b      	bne.n	8008018 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fcc:	461a      	mov	r2, r3
 8007fce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	212c      	movs	r1, #44	; 0x2c
 8007fda:	fb01 f303 	mul.w	r3, r1, r3
 8007fde:	4413      	add	r3, r2
 8007fe0:	3361      	adds	r3, #97	; 0x61
 8007fe2:	2207      	movs	r2, #7
 8007fe4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	015a      	lsls	r2, r3, #5
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	0151      	lsls	r1, r2, #5
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	440a      	add	r2, r1
 8007ffc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008000:	f043 0302 	orr.w	r3, r3, #2
 8008004:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	b2d2      	uxtb	r2, r2
 800800e:	4611      	mov	r1, r2
 8008010:	4618      	mov	r0, r3
 8008012:	f007 fbd0 	bl	800f7b6 <USB_HC_Halt>
 8008016:	e0c9      	b.n	80081ac <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	4413      	add	r3, r2
 8008020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b20      	cmp	r3, #32
 800802c:	d109      	bne.n	8008042 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	4413      	add	r3, r2
 8008036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800803a:	461a      	mov	r2, r3
 800803c:	2320      	movs	r3, #32
 800803e:	6093      	str	r3, [r2, #8]
 8008040:	e0b4      	b.n	80081ac <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	015a      	lsls	r2, r3, #5
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	4413      	add	r3, r2
 800804a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f003 0308 	and.w	r3, r3, #8
 8008054:	2b08      	cmp	r3, #8
 8008056:	d133      	bne.n	80080c0 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	015a      	lsls	r2, r3, #5
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	4413      	add	r3, r2
 8008060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	0151      	lsls	r1, r2, #5
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	440a      	add	r2, r1
 800806e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008072:	f043 0302 	orr.w	r3, r3, #2
 8008076:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	212c      	movs	r1, #44	; 0x2c
 800807e:	fb01 f303 	mul.w	r3, r1, r3
 8008082:	4413      	add	r3, r2
 8008084:	3361      	adds	r3, #97	; 0x61
 8008086:	2205      	movs	r2, #5
 8008088:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	015a      	lsls	r2, r3, #5
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	4413      	add	r3, r2
 8008092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008096:	461a      	mov	r2, r3
 8008098:	2310      	movs	r3, #16
 800809a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	015a      	lsls	r2, r3, #5
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	4413      	add	r3, r2
 80080a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080a8:	461a      	mov	r2, r3
 80080aa:	2308      	movs	r3, #8
 80080ac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	b2d2      	uxtb	r2, r2
 80080b6:	4611      	mov	r1, r2
 80080b8:	4618      	mov	r0, r3
 80080ba:	f007 fb7c 	bl	800f7b6 <USB_HC_Halt>
 80080be:	e075      	b.n	80081ac <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	015a      	lsls	r2, r3, #5
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080d6:	d134      	bne.n	8008142 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	0151      	lsls	r1, r2, #5
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	440a      	add	r2, r1
 80080ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080f2:	f043 0302 	orr.w	r3, r3, #2
 80080f6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	212c      	movs	r1, #44	; 0x2c
 80080fe:	fb01 f303 	mul.w	r3, r1, r3
 8008102:	4413      	add	r3, r2
 8008104:	3361      	adds	r3, #97	; 0x61
 8008106:	2208      	movs	r2, #8
 8008108:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	4413      	add	r3, r2
 8008112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008116:	461a      	mov	r2, r3
 8008118:	2310      	movs	r3, #16
 800811a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	4413      	add	r3, r2
 8008124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008128:	461a      	mov	r2, r3
 800812a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800812e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	b2d2      	uxtb	r2, r2
 8008138:	4611      	mov	r1, r2
 800813a:	4618      	mov	r0, r3
 800813c:	f007 fb3b 	bl	800f7b6 <USB_HC_Halt>
 8008140:	e034      	b.n	80081ac <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	015a      	lsls	r2, r3, #5
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	4413      	add	r3, r2
 800814a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008154:	2b80      	cmp	r3, #128	; 0x80
 8008156:	d129      	bne.n	80081ac <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	015a      	lsls	r2, r3, #5
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	4413      	add	r3, r2
 8008160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	0151      	lsls	r1, r2, #5
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	440a      	add	r2, r1
 800816e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008172:	f043 0302 	orr.w	r3, r3, #2
 8008176:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	212c      	movs	r1, #44	; 0x2c
 800817e:	fb01 f303 	mul.w	r3, r1, r3
 8008182:	4413      	add	r3, r2
 8008184:	3361      	adds	r3, #97	; 0x61
 8008186:	2206      	movs	r2, #6
 8008188:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	b2d2      	uxtb	r2, r2
 8008192:	4611      	mov	r1, r2
 8008194:	4618      	mov	r0, r3
 8008196:	f007 fb0e 	bl	800f7b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081a6:	461a      	mov	r2, r3
 80081a8:	2380      	movs	r3, #128	; 0x80
 80081aa:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081c2:	d122      	bne.n	800820a <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	015a      	lsls	r2, r3, #5
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	4413      	add	r3, r2
 80081cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	0151      	lsls	r1, r2, #5
 80081d6:	693a      	ldr	r2, [r7, #16]
 80081d8:	440a      	add	r2, r1
 80081da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081de:	f043 0302 	orr.w	r3, r3, #2
 80081e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	b2d2      	uxtb	r2, r2
 80081ec:	4611      	mov	r1, r2
 80081ee:	4618      	mov	r0, r3
 80081f0:	f007 fae1 	bl	800f7b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	015a      	lsls	r2, r3, #5
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008200:	461a      	mov	r2, r3
 8008202:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008206:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8008208:	e2ba      	b.n	8008780 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	015a      	lsls	r2, r3, #5
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	4413      	add	r3, r2
 8008212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	2b01      	cmp	r3, #1
 800821e:	f040 811b 	bne.w	8008458 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d019      	beq.n	800825e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	212c      	movs	r1, #44	; 0x2c
 8008230:	fb01 f303 	mul.w	r3, r1, r3
 8008234:	4413      	add	r3, r2
 8008236:	3348      	adds	r3, #72	; 0x48
 8008238:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	0159      	lsls	r1, r3, #5
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	440b      	add	r3, r1
 8008242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800824c:	1ad2      	subs	r2, r2, r3
 800824e:	6879      	ldr	r1, [r7, #4]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	202c      	movs	r0, #44	; 0x2c
 8008254:	fb00 f303 	mul.w	r3, r0, r3
 8008258:	440b      	add	r3, r1
 800825a:	3350      	adds	r3, #80	; 0x50
 800825c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	212c      	movs	r1, #44	; 0x2c
 8008264:	fb01 f303 	mul.w	r3, r1, r3
 8008268:	4413      	add	r3, r2
 800826a:	3361      	adds	r3, #97	; 0x61
 800826c:	2201      	movs	r2, #1
 800826e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	212c      	movs	r1, #44	; 0x2c
 8008276:	fb01 f303 	mul.w	r3, r1, r3
 800827a:	4413      	add	r3, r2
 800827c:	335c      	adds	r3, #92	; 0x5c
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	4413      	add	r3, r2
 800828a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800828e:	461a      	mov	r2, r3
 8008290:	2301      	movs	r3, #1
 8008292:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	212c      	movs	r1, #44	; 0x2c
 800829a:	fb01 f303 	mul.w	r3, r1, r3
 800829e:	4413      	add	r3, r2
 80082a0:	333f      	adds	r3, #63	; 0x3f
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d009      	beq.n	80082bc <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	212c      	movs	r1, #44	; 0x2c
 80082ae:	fb01 f303 	mul.w	r3, r1, r3
 80082b2:	4413      	add	r3, r2
 80082b4:	333f      	adds	r3, #63	; 0x3f
 80082b6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d121      	bne.n	8008300 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	0151      	lsls	r1, r2, #5
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	440a      	add	r2, r1
 80082d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082d6:	f043 0302 	orr.w	r3, r3, #2
 80082da:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	b2d2      	uxtb	r2, r2
 80082e4:	4611      	mov	r1, r2
 80082e6:	4618      	mov	r0, r3
 80082e8:	f007 fa65 	bl	800f7b6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	015a      	lsls	r2, r3, #5
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	4413      	add	r3, r2
 80082f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082f8:	461a      	mov	r2, r3
 80082fa:	2310      	movs	r3, #16
 80082fc:	6093      	str	r3, [r2, #8]
 80082fe:	e066      	b.n	80083ce <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	212c      	movs	r1, #44	; 0x2c
 8008306:	fb01 f303 	mul.w	r3, r1, r3
 800830a:	4413      	add	r3, r2
 800830c:	333f      	adds	r3, #63	; 0x3f
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	2b03      	cmp	r3, #3
 8008312:	d127      	bne.n	8008364 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	4413      	add	r3, r2
 800831c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	0151      	lsls	r1, r2, #5
 8008326:	693a      	ldr	r2, [r7, #16]
 8008328:	440a      	add	r2, r1
 800832a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800832e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008332:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	212c      	movs	r1, #44	; 0x2c
 800833a:	fb01 f303 	mul.w	r3, r1, r3
 800833e:	4413      	add	r3, r2
 8008340:	3360      	adds	r3, #96	; 0x60
 8008342:	2201      	movs	r2, #1
 8008344:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	b2d9      	uxtb	r1, r3
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	202c      	movs	r0, #44	; 0x2c
 8008350:	fb00 f303 	mul.w	r3, r0, r3
 8008354:	4413      	add	r3, r2
 8008356:	3360      	adds	r3, #96	; 0x60
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f007 feb1 	bl	80100c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008362:	e034      	b.n	80083ce <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	212c      	movs	r1, #44	; 0x2c
 800836a:	fb01 f303 	mul.w	r3, r1, r3
 800836e:	4413      	add	r3, r2
 8008370:	333f      	adds	r3, #63	; 0x3f
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d12a      	bne.n	80083ce <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	212c      	movs	r1, #44	; 0x2c
 800837e:	fb01 f303 	mul.w	r3, r1, r3
 8008382:	4413      	add	r3, r2
 8008384:	3360      	adds	r3, #96	; 0x60
 8008386:	2201      	movs	r2, #1
 8008388:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	212c      	movs	r1, #44	; 0x2c
 8008390:	fb01 f303 	mul.w	r3, r1, r3
 8008394:	4413      	add	r3, r2
 8008396:	3354      	adds	r3, #84	; 0x54
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	f083 0301 	eor.w	r3, r3, #1
 800839e:	b2d8      	uxtb	r0, r3
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	212c      	movs	r1, #44	; 0x2c
 80083a6:	fb01 f303 	mul.w	r3, r1, r3
 80083aa:	4413      	add	r3, r2
 80083ac:	3354      	adds	r3, #84	; 0x54
 80083ae:	4602      	mov	r2, r0
 80083b0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	b2d9      	uxtb	r1, r3
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	202c      	movs	r0, #44	; 0x2c
 80083bc:	fb00 f303 	mul.w	r3, r0, r3
 80083c0:	4413      	add	r3, r2
 80083c2:	3360      	adds	r3, #96	; 0x60
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f007 fe7b 	bl	80100c4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d12b      	bne.n	800842e <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	212c      	movs	r1, #44	; 0x2c
 80083dc:	fb01 f303 	mul.w	r3, r1, r3
 80083e0:	4413      	add	r3, r2
 80083e2:	3348      	adds	r3, #72	; 0x48
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6879      	ldr	r1, [r7, #4]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	202c      	movs	r0, #44	; 0x2c
 80083ec:	fb00 f202 	mul.w	r2, r0, r2
 80083f0:	440a      	add	r2, r1
 80083f2:	3240      	adds	r2, #64	; 0x40
 80083f4:	8812      	ldrh	r2, [r2, #0]
 80083f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f000 81be 	beq.w	8008780 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	212c      	movs	r1, #44	; 0x2c
 800840a:	fb01 f303 	mul.w	r3, r1, r3
 800840e:	4413      	add	r3, r2
 8008410:	3354      	adds	r3, #84	; 0x54
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	f083 0301 	eor.w	r3, r3, #1
 8008418:	b2d8      	uxtb	r0, r3
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	212c      	movs	r1, #44	; 0x2c
 8008420:	fb01 f303 	mul.w	r3, r1, r3
 8008424:	4413      	add	r3, r2
 8008426:	3354      	adds	r3, #84	; 0x54
 8008428:	4602      	mov	r2, r0
 800842a:	701a      	strb	r2, [r3, #0]
}
 800842c:	e1a8      	b.n	8008780 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	212c      	movs	r1, #44	; 0x2c
 8008434:	fb01 f303 	mul.w	r3, r1, r3
 8008438:	4413      	add	r3, r2
 800843a:	3354      	adds	r3, #84	; 0x54
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	f083 0301 	eor.w	r3, r3, #1
 8008442:	b2d8      	uxtb	r0, r3
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	212c      	movs	r1, #44	; 0x2c
 800844a:	fb01 f303 	mul.w	r3, r1, r3
 800844e:	4413      	add	r3, r2
 8008450:	3354      	adds	r3, #84	; 0x54
 8008452:	4602      	mov	r2, r0
 8008454:	701a      	strb	r2, [r3, #0]
}
 8008456:	e193      	b.n	8008780 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	4413      	add	r3, r2
 8008460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	f003 0302 	and.w	r3, r3, #2
 800846a:	2b02      	cmp	r3, #2
 800846c:	f040 8106 	bne.w	800867c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	4413      	add	r3, r2
 8008478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	0151      	lsls	r1, r2, #5
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	440a      	add	r2, r1
 8008486:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800848a:	f023 0302 	bic.w	r3, r3, #2
 800848e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	212c      	movs	r1, #44	; 0x2c
 8008496:	fb01 f303 	mul.w	r3, r1, r3
 800849a:	4413      	add	r3, r2
 800849c:	3361      	adds	r3, #97	; 0x61
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d109      	bne.n	80084b8 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	212c      	movs	r1, #44	; 0x2c
 80084aa:	fb01 f303 	mul.w	r3, r1, r3
 80084ae:	4413      	add	r3, r2
 80084b0:	3360      	adds	r3, #96	; 0x60
 80084b2:	2201      	movs	r2, #1
 80084b4:	701a      	strb	r2, [r3, #0]
 80084b6:	e0c9      	b.n	800864c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	212c      	movs	r1, #44	; 0x2c
 80084be:	fb01 f303 	mul.w	r3, r1, r3
 80084c2:	4413      	add	r3, r2
 80084c4:	3361      	adds	r3, #97	; 0x61
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	2b05      	cmp	r3, #5
 80084ca:	d109      	bne.n	80084e0 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	212c      	movs	r1, #44	; 0x2c
 80084d2:	fb01 f303 	mul.w	r3, r1, r3
 80084d6:	4413      	add	r3, r2
 80084d8:	3360      	adds	r3, #96	; 0x60
 80084da:	2205      	movs	r2, #5
 80084dc:	701a      	strb	r2, [r3, #0]
 80084de:	e0b5      	b.n	800864c <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	212c      	movs	r1, #44	; 0x2c
 80084e6:	fb01 f303 	mul.w	r3, r1, r3
 80084ea:	4413      	add	r3, r2
 80084ec:	3361      	adds	r3, #97	; 0x61
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	2b06      	cmp	r3, #6
 80084f2:	d009      	beq.n	8008508 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	212c      	movs	r1, #44	; 0x2c
 80084fa:	fb01 f303 	mul.w	r3, r1, r3
 80084fe:	4413      	add	r3, r2
 8008500:	3361      	adds	r3, #97	; 0x61
 8008502:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008504:	2b08      	cmp	r3, #8
 8008506:	d150      	bne.n	80085aa <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	212c      	movs	r1, #44	; 0x2c
 800850e:	fb01 f303 	mul.w	r3, r1, r3
 8008512:	4413      	add	r3, r2
 8008514:	335c      	adds	r3, #92	; 0x5c
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	1c5a      	adds	r2, r3, #1
 800851a:	6879      	ldr	r1, [r7, #4]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	202c      	movs	r0, #44	; 0x2c
 8008520:	fb00 f303 	mul.w	r3, r0, r3
 8008524:	440b      	add	r3, r1
 8008526:	335c      	adds	r3, #92	; 0x5c
 8008528:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	212c      	movs	r1, #44	; 0x2c
 8008530:	fb01 f303 	mul.w	r3, r1, r3
 8008534:	4413      	add	r3, r2
 8008536:	335c      	adds	r3, #92	; 0x5c
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b02      	cmp	r3, #2
 800853c:	d912      	bls.n	8008564 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	212c      	movs	r1, #44	; 0x2c
 8008544:	fb01 f303 	mul.w	r3, r1, r3
 8008548:	4413      	add	r3, r2
 800854a:	335c      	adds	r3, #92	; 0x5c
 800854c:	2200      	movs	r2, #0
 800854e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	212c      	movs	r1, #44	; 0x2c
 8008556:	fb01 f303 	mul.w	r3, r1, r3
 800855a:	4413      	add	r3, r2
 800855c:	3360      	adds	r3, #96	; 0x60
 800855e:	2204      	movs	r2, #4
 8008560:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008562:	e073      	b.n	800864c <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	212c      	movs	r1, #44	; 0x2c
 800856a:	fb01 f303 	mul.w	r3, r1, r3
 800856e:	4413      	add	r3, r2
 8008570:	3360      	adds	r3, #96	; 0x60
 8008572:	2202      	movs	r2, #2
 8008574:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	4413      	add	r3, r2
 800857e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800858c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008594:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	015a      	lsls	r2, r3, #5
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	4413      	add	r3, r2
 800859e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085a2:	461a      	mov	r2, r3
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80085a8:	e050      	b.n	800864c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	212c      	movs	r1, #44	; 0x2c
 80085b0:	fb01 f303 	mul.w	r3, r1, r3
 80085b4:	4413      	add	r3, r2
 80085b6:	3361      	adds	r3, #97	; 0x61
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	d122      	bne.n	8008604 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	212c      	movs	r1, #44	; 0x2c
 80085c4:	fb01 f303 	mul.w	r3, r1, r3
 80085c8:	4413      	add	r3, r2
 80085ca:	3360      	adds	r3, #96	; 0x60
 80085cc:	2202      	movs	r2, #2
 80085ce:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085e6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085ee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085fc:	461a      	mov	r2, r3
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	6013      	str	r3, [r2, #0]
 8008602:	e023      	b.n	800864c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	212c      	movs	r1, #44	; 0x2c
 800860a:	fb01 f303 	mul.w	r3, r1, r3
 800860e:	4413      	add	r3, r2
 8008610:	3361      	adds	r3, #97	; 0x61
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	2b07      	cmp	r3, #7
 8008616:	d119      	bne.n	800864c <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	212c      	movs	r1, #44	; 0x2c
 800861e:	fb01 f303 	mul.w	r3, r1, r3
 8008622:	4413      	add	r3, r2
 8008624:	335c      	adds	r3, #92	; 0x5c
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	1c5a      	adds	r2, r3, #1
 800862a:	6879      	ldr	r1, [r7, #4]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	202c      	movs	r0, #44	; 0x2c
 8008630:	fb00 f303 	mul.w	r3, r0, r3
 8008634:	440b      	add	r3, r1
 8008636:	335c      	adds	r3, #92	; 0x5c
 8008638:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	212c      	movs	r1, #44	; 0x2c
 8008640:	fb01 f303 	mul.w	r3, r1, r3
 8008644:	4413      	add	r3, r2
 8008646:	3360      	adds	r3, #96	; 0x60
 8008648:	2204      	movs	r2, #4
 800864a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	4413      	add	r3, r2
 8008654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008658:	461a      	mov	r2, r3
 800865a:	2302      	movs	r3, #2
 800865c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	b2d9      	uxtb	r1, r3
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	202c      	movs	r0, #44	; 0x2c
 8008668:	fb00 f303 	mul.w	r3, r0, r3
 800866c:	4413      	add	r3, r2
 800866e:	3360      	adds	r3, #96	; 0x60
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	461a      	mov	r2, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f007 fd25 	bl	80100c4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800867a:	e081      	b.n	8008780 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	015a      	lsls	r2, r3, #5
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	4413      	add	r3, r2
 8008684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f003 0310 	and.w	r3, r3, #16
 800868e:	2b10      	cmp	r3, #16
 8008690:	d176      	bne.n	8008780 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	212c      	movs	r1, #44	; 0x2c
 8008698:	fb01 f303 	mul.w	r3, r1, r3
 800869c:	4413      	add	r3, r2
 800869e:	333f      	adds	r3, #63	; 0x3f
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	2b03      	cmp	r3, #3
 80086a4:	d121      	bne.n	80086ea <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	212c      	movs	r1, #44	; 0x2c
 80086ac:	fb01 f303 	mul.w	r3, r1, r3
 80086b0:	4413      	add	r3, r2
 80086b2:	335c      	adds	r3, #92	; 0x5c
 80086b4:	2200      	movs	r2, #0
 80086b6:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	0151      	lsls	r1, r2, #5
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	440a      	add	r2, r1
 80086ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086d2:	f043 0302 	orr.w	r3, r3, #2
 80086d6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	b2d2      	uxtb	r2, r2
 80086e0:	4611      	mov	r1, r2
 80086e2:	4618      	mov	r0, r3
 80086e4:	f007 f867 	bl	800f7b6 <USB_HC_Halt>
 80086e8:	e041      	b.n	800876e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	212c      	movs	r1, #44	; 0x2c
 80086f0:	fb01 f303 	mul.w	r3, r1, r3
 80086f4:	4413      	add	r3, r2
 80086f6:	333f      	adds	r3, #63	; 0x3f
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d009      	beq.n	8008712 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	212c      	movs	r1, #44	; 0x2c
 8008704:	fb01 f303 	mul.w	r3, r1, r3
 8008708:	4413      	add	r3, r2
 800870a:	333f      	adds	r3, #63	; 0x3f
 800870c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800870e:	2b02      	cmp	r3, #2
 8008710:	d12d      	bne.n	800876e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	212c      	movs	r1, #44	; 0x2c
 8008718:	fb01 f303 	mul.w	r3, r1, r3
 800871c:	4413      	add	r3, r2
 800871e:	335c      	adds	r3, #92	; 0x5c
 8008720:	2200      	movs	r2, #0
 8008722:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d120      	bne.n	800876e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	212c      	movs	r1, #44	; 0x2c
 8008732:	fb01 f303 	mul.w	r3, r1, r3
 8008736:	4413      	add	r3, r2
 8008738:	3361      	adds	r3, #97	; 0x61
 800873a:	2203      	movs	r2, #3
 800873c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	015a      	lsls	r2, r3, #5
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	4413      	add	r3, r2
 8008746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	0151      	lsls	r1, r2, #5
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	440a      	add	r2, r1
 8008754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008758:	f043 0302 	orr.w	r3, r3, #2
 800875c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	b2d2      	uxtb	r2, r2
 8008766:	4611      	mov	r1, r2
 8008768:	4618      	mov	r0, r3
 800876a:	f007 f824 	bl	800f7b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	015a      	lsls	r2, r3, #5
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	4413      	add	r3, r2
 8008776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800877a:	461a      	mov	r2, r3
 800877c:	2310      	movs	r3, #16
 800877e:	6093      	str	r3, [r2, #8]
}
 8008780:	bf00      	nop
 8008782:	3718      	adds	r7, #24
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b088      	sub	sp, #32
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800879e:	78fb      	ldrb	r3, [r7, #3]
 80087a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	f003 0304 	and.w	r3, r3, #4
 80087b4:	2b04      	cmp	r3, #4
 80087b6:	d119      	bne.n	80087ec <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	015a      	lsls	r2, r3, #5
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	4413      	add	r3, r2
 80087c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c4:	461a      	mov	r2, r3
 80087c6:	2304      	movs	r3, #4
 80087c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	015a      	lsls	r2, r3, #5
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	4413      	add	r3, r2
 80087d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	0151      	lsls	r1, r2, #5
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	440a      	add	r2, r1
 80087e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087e4:	f043 0302 	orr.w	r3, r3, #2
 80087e8:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80087ea:	e3c6      	b.n	8008f7a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f003 0320 	and.w	r3, r3, #32
 80087fe:	2b20      	cmp	r3, #32
 8008800:	d13e      	bne.n	8008880 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	015a      	lsls	r2, r3, #5
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	4413      	add	r3, r2
 800880a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800880e:	461a      	mov	r2, r3
 8008810:	2320      	movs	r3, #32
 8008812:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	212c      	movs	r1, #44	; 0x2c
 800881a:	fb01 f303 	mul.w	r3, r1, r3
 800881e:	4413      	add	r3, r2
 8008820:	333d      	adds	r3, #61	; 0x3d
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	2b01      	cmp	r3, #1
 8008826:	f040 83a8 	bne.w	8008f7a <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	212c      	movs	r1, #44	; 0x2c
 8008830:	fb01 f303 	mul.w	r3, r1, r3
 8008834:	4413      	add	r3, r2
 8008836:	333d      	adds	r3, #61	; 0x3d
 8008838:	2200      	movs	r2, #0
 800883a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	212c      	movs	r1, #44	; 0x2c
 8008842:	fb01 f303 	mul.w	r3, r1, r3
 8008846:	4413      	add	r3, r2
 8008848:	3360      	adds	r3, #96	; 0x60
 800884a:	2202      	movs	r2, #2
 800884c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	015a      	lsls	r2, r3, #5
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	4413      	add	r3, r2
 8008856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	697a      	ldr	r2, [r7, #20]
 800885e:	0151      	lsls	r1, r2, #5
 8008860:	69ba      	ldr	r2, [r7, #24]
 8008862:	440a      	add	r2, r1
 8008864:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008868:	f043 0302 	orr.w	r3, r3, #2
 800886c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	b2d2      	uxtb	r2, r2
 8008876:	4611      	mov	r1, r2
 8008878:	4618      	mov	r0, r3
 800887a:	f006 ff9c 	bl	800f7b6 <USB_HC_Halt>
}
 800887e:	e37c      	b.n	8008f7a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	4413      	add	r3, r2
 8008888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008896:	d122      	bne.n	80088de <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	0151      	lsls	r1, r2, #5
 80088aa:	69ba      	ldr	r2, [r7, #24]
 80088ac:	440a      	add	r2, r1
 80088ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088b2:	f043 0302 	orr.w	r3, r3, #2
 80088b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	b2d2      	uxtb	r2, r2
 80088c0:	4611      	mov	r1, r2
 80088c2:	4618      	mov	r0, r3
 80088c4:	f006 ff77 	bl	800f7b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088d4:	461a      	mov	r2, r3
 80088d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088da:	6093      	str	r3, [r2, #8]
}
 80088dc:	e34d      	b.n	8008f7a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	015a      	lsls	r2, r3, #5
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	4413      	add	r3, r2
 80088e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f003 0301 	and.w	r3, r3, #1
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d150      	bne.n	8008996 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	212c      	movs	r1, #44	; 0x2c
 80088fa:	fb01 f303 	mul.w	r3, r1, r3
 80088fe:	4413      	add	r3, r2
 8008900:	335c      	adds	r3, #92	; 0x5c
 8008902:	2200      	movs	r2, #0
 8008904:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	015a      	lsls	r2, r3, #5
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	4413      	add	r3, r2
 800890e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008918:	2b40      	cmp	r3, #64	; 0x40
 800891a:	d111      	bne.n	8008940 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	212c      	movs	r1, #44	; 0x2c
 8008922:	fb01 f303 	mul.w	r3, r1, r3
 8008926:	4413      	add	r3, r2
 8008928:	333d      	adds	r3, #61	; 0x3d
 800892a:	2201      	movs	r2, #1
 800892c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	015a      	lsls	r2, r3, #5
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	4413      	add	r3, r2
 8008936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800893a:	461a      	mov	r2, r3
 800893c:	2340      	movs	r3, #64	; 0x40
 800893e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	4413      	add	r3, r2
 8008948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	0151      	lsls	r1, r2, #5
 8008952:	69ba      	ldr	r2, [r7, #24]
 8008954:	440a      	add	r2, r1
 8008956:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800895a:	f043 0302 	orr.w	r3, r3, #2
 800895e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	b2d2      	uxtb	r2, r2
 8008968:	4611      	mov	r1, r2
 800896a:	4618      	mov	r0, r3
 800896c:	f006 ff23 	bl	800f7b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	015a      	lsls	r2, r3, #5
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	4413      	add	r3, r2
 8008978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800897c:	461a      	mov	r2, r3
 800897e:	2301      	movs	r3, #1
 8008980:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	212c      	movs	r1, #44	; 0x2c
 8008988:	fb01 f303 	mul.w	r3, r1, r3
 800898c:	4413      	add	r3, r2
 800898e:	3361      	adds	r3, #97	; 0x61
 8008990:	2201      	movs	r2, #1
 8008992:	701a      	strb	r2, [r3, #0]
}
 8008994:	e2f1      	b.n	8008f7a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	015a      	lsls	r2, r3, #5
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	4413      	add	r3, r2
 800899e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a8:	2b40      	cmp	r3, #64	; 0x40
 80089aa:	d13c      	bne.n	8008a26 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	212c      	movs	r1, #44	; 0x2c
 80089b2:	fb01 f303 	mul.w	r3, r1, r3
 80089b6:	4413      	add	r3, r2
 80089b8:	3361      	adds	r3, #97	; 0x61
 80089ba:	2204      	movs	r2, #4
 80089bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	212c      	movs	r1, #44	; 0x2c
 80089c4:	fb01 f303 	mul.w	r3, r1, r3
 80089c8:	4413      	add	r3, r2
 80089ca:	333d      	adds	r3, #61	; 0x3d
 80089cc:	2201      	movs	r2, #1
 80089ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	212c      	movs	r1, #44	; 0x2c
 80089d6:	fb01 f303 	mul.w	r3, r1, r3
 80089da:	4413      	add	r3, r2
 80089dc:	335c      	adds	r3, #92	; 0x5c
 80089de:	2200      	movs	r2, #0
 80089e0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	0151      	lsls	r1, r2, #5
 80089f4:	69ba      	ldr	r2, [r7, #24]
 80089f6:	440a      	add	r2, r1
 80089f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089fc:	f043 0302 	orr.w	r3, r3, #2
 8008a00:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	b2d2      	uxtb	r2, r2
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f006 fed2 	bl	800f7b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a1e:	461a      	mov	r2, r3
 8008a20:	2340      	movs	r3, #64	; 0x40
 8008a22:	6093      	str	r3, [r2, #8]
}
 8008a24:	e2a9      	b.n	8008f7a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	015a      	lsls	r2, r3, #5
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	f003 0308 	and.w	r3, r3, #8
 8008a38:	2b08      	cmp	r3, #8
 8008a3a:	d12a      	bne.n	8008a92 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a48:	461a      	mov	r2, r3
 8008a4a:	2308      	movs	r3, #8
 8008a4c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	015a      	lsls	r2, r3, #5
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	4413      	add	r3, r2
 8008a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	0151      	lsls	r1, r2, #5
 8008a60:	69ba      	ldr	r2, [r7, #24]
 8008a62:	440a      	add	r2, r1
 8008a64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a68:	f043 0302 	orr.w	r3, r3, #2
 8008a6c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	b2d2      	uxtb	r2, r2
 8008a76:	4611      	mov	r1, r2
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f006 fe9c 	bl	800f7b6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	212c      	movs	r1, #44	; 0x2c
 8008a84:	fb01 f303 	mul.w	r3, r1, r3
 8008a88:	4413      	add	r3, r2
 8008a8a:	3361      	adds	r3, #97	; 0x61
 8008a8c:	2205      	movs	r2, #5
 8008a8e:	701a      	strb	r2, [r3, #0]
}
 8008a90:	e273      	b.n	8008f7a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	015a      	lsls	r2, r3, #5
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	4413      	add	r3, r2
 8008a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f003 0310 	and.w	r3, r3, #16
 8008aa4:	2b10      	cmp	r3, #16
 8008aa6:	d150      	bne.n	8008b4a <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	212c      	movs	r1, #44	; 0x2c
 8008aae:	fb01 f303 	mul.w	r3, r1, r3
 8008ab2:	4413      	add	r3, r2
 8008ab4:	335c      	adds	r3, #92	; 0x5c
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	212c      	movs	r1, #44	; 0x2c
 8008ac0:	fb01 f303 	mul.w	r3, r1, r3
 8008ac4:	4413      	add	r3, r2
 8008ac6:	3361      	adds	r3, #97	; 0x61
 8008ac8:	2203      	movs	r2, #3
 8008aca:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	212c      	movs	r1, #44	; 0x2c
 8008ad2:	fb01 f303 	mul.w	r3, r1, r3
 8008ad6:	4413      	add	r3, r2
 8008ad8:	333d      	adds	r3, #61	; 0x3d
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d112      	bne.n	8008b06 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	212c      	movs	r1, #44	; 0x2c
 8008ae6:	fb01 f303 	mul.w	r3, r1, r3
 8008aea:	4413      	add	r3, r2
 8008aec:	333c      	adds	r3, #60	; 0x3c
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d108      	bne.n	8008b06 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	212c      	movs	r1, #44	; 0x2c
 8008afa:	fb01 f303 	mul.w	r3, r1, r3
 8008afe:	4413      	add	r3, r2
 8008b00:	333d      	adds	r3, #61	; 0x3d
 8008b02:	2201      	movs	r2, #1
 8008b04:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	0151      	lsls	r1, r2, #5
 8008b18:	69ba      	ldr	r2, [r7, #24]
 8008b1a:	440a      	add	r2, r1
 8008b1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b20:	f043 0302 	orr.w	r3, r3, #2
 8008b24:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	b2d2      	uxtb	r2, r2
 8008b2e:	4611      	mov	r1, r2
 8008b30:	4618      	mov	r0, r3
 8008b32:	f006 fe40 	bl	800f7b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	015a      	lsls	r2, r3, #5
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b42:	461a      	mov	r2, r3
 8008b44:	2310      	movs	r3, #16
 8008b46:	6093      	str	r3, [r2, #8]
}
 8008b48:	e217      	b.n	8008f7a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	015a      	lsls	r2, r3, #5
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	4413      	add	r3, r2
 8008b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b5c:	2b80      	cmp	r3, #128	; 0x80
 8008b5e:	d174      	bne.n	8008c4a <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d121      	bne.n	8008bac <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	212c      	movs	r1, #44	; 0x2c
 8008b6e:	fb01 f303 	mul.w	r3, r1, r3
 8008b72:	4413      	add	r3, r2
 8008b74:	3361      	adds	r3, #97	; 0x61
 8008b76:	2206      	movs	r2, #6
 8008b78:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	015a      	lsls	r2, r3, #5
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	4413      	add	r3, r2
 8008b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	697a      	ldr	r2, [r7, #20]
 8008b8a:	0151      	lsls	r1, r2, #5
 8008b8c:	69ba      	ldr	r2, [r7, #24]
 8008b8e:	440a      	add	r2, r1
 8008b90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b94:	f043 0302 	orr.w	r3, r3, #2
 8008b98:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	697a      	ldr	r2, [r7, #20]
 8008ba0:	b2d2      	uxtb	r2, r2
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f006 fe06 	bl	800f7b6 <USB_HC_Halt>
 8008baa:	e044      	b.n	8008c36 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	212c      	movs	r1, #44	; 0x2c
 8008bb2:	fb01 f303 	mul.w	r3, r1, r3
 8008bb6:	4413      	add	r3, r2
 8008bb8:	335c      	adds	r3, #92	; 0x5c
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	1c5a      	adds	r2, r3, #1
 8008bbe:	6879      	ldr	r1, [r7, #4]
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	202c      	movs	r0, #44	; 0x2c
 8008bc4:	fb00 f303 	mul.w	r3, r0, r3
 8008bc8:	440b      	add	r3, r1
 8008bca:	335c      	adds	r3, #92	; 0x5c
 8008bcc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	212c      	movs	r1, #44	; 0x2c
 8008bd4:	fb01 f303 	mul.w	r3, r1, r3
 8008bd8:	4413      	add	r3, r2
 8008bda:	335c      	adds	r3, #92	; 0x5c
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d920      	bls.n	8008c24 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	212c      	movs	r1, #44	; 0x2c
 8008be8:	fb01 f303 	mul.w	r3, r1, r3
 8008bec:	4413      	add	r3, r2
 8008bee:	335c      	adds	r3, #92	; 0x5c
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	212c      	movs	r1, #44	; 0x2c
 8008bfa:	fb01 f303 	mul.w	r3, r1, r3
 8008bfe:	4413      	add	r3, r2
 8008c00:	3360      	adds	r3, #96	; 0x60
 8008c02:	2204      	movs	r2, #4
 8008c04:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	b2d9      	uxtb	r1, r3
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	202c      	movs	r0, #44	; 0x2c
 8008c10:	fb00 f303 	mul.w	r3, r0, r3
 8008c14:	4413      	add	r3, r2
 8008c16:	3360      	adds	r3, #96	; 0x60
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f007 fa51 	bl	80100c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008c22:	e008      	b.n	8008c36 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	212c      	movs	r1, #44	; 0x2c
 8008c2a:	fb01 f303 	mul.w	r3, r1, r3
 8008c2e:	4413      	add	r3, r2
 8008c30:	3360      	adds	r3, #96	; 0x60
 8008c32:	2202      	movs	r2, #2
 8008c34:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	015a      	lsls	r2, r3, #5
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c42:	461a      	mov	r2, r3
 8008c44:	2380      	movs	r3, #128	; 0x80
 8008c46:	6093      	str	r3, [r2, #8]
}
 8008c48:	e197      	b.n	8008f7a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	015a      	lsls	r2, r3, #5
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c60:	d134      	bne.n	8008ccc <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	015a      	lsls	r2, r3, #5
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	4413      	add	r3, r2
 8008c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	697a      	ldr	r2, [r7, #20]
 8008c72:	0151      	lsls	r1, r2, #5
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	440a      	add	r2, r1
 8008c78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c7c:	f043 0302 	orr.w	r3, r3, #2
 8008c80:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	b2d2      	uxtb	r2, r2
 8008c8a:	4611      	mov	r1, r2
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f006 fd92 	bl	800f7b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	015a      	lsls	r2, r3, #5
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	4413      	add	r3, r2
 8008c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	2310      	movs	r3, #16
 8008ca2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	015a      	lsls	r2, r3, #5
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	4413      	add	r3, r2
 8008cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	212c      	movs	r1, #44	; 0x2c
 8008cbe:	fb01 f303 	mul.w	r3, r1, r3
 8008cc2:	4413      	add	r3, r2
 8008cc4:	3361      	adds	r3, #97	; 0x61
 8008cc6:	2208      	movs	r2, #8
 8008cc8:	701a      	strb	r2, [r3, #0]
}
 8008cca:	e156      	b.n	8008f7a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	015a      	lsls	r2, r3, #5
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	f003 0302 	and.w	r3, r3, #2
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	f040 814b 	bne.w	8008f7a <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	015a      	lsls	r2, r3, #5
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	4413      	add	r3, r2
 8008cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	0151      	lsls	r1, r2, #5
 8008cf6:	69ba      	ldr	r2, [r7, #24]
 8008cf8:	440a      	add	r2, r1
 8008cfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cfe:	f023 0302 	bic.w	r3, r3, #2
 8008d02:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	212c      	movs	r1, #44	; 0x2c
 8008d0a:	fb01 f303 	mul.w	r3, r1, r3
 8008d0e:	4413      	add	r3, r2
 8008d10:	3361      	adds	r3, #97	; 0x61
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d179      	bne.n	8008e0c <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	212c      	movs	r1, #44	; 0x2c
 8008d1e:	fb01 f303 	mul.w	r3, r1, r3
 8008d22:	4413      	add	r3, r2
 8008d24:	3360      	adds	r3, #96	; 0x60
 8008d26:	2201      	movs	r2, #1
 8008d28:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	212c      	movs	r1, #44	; 0x2c
 8008d30:	fb01 f303 	mul.w	r3, r1, r3
 8008d34:	4413      	add	r3, r2
 8008d36:	333f      	adds	r3, #63	; 0x3f
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d00a      	beq.n	8008d54 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	212c      	movs	r1, #44	; 0x2c
 8008d44:	fb01 f303 	mul.w	r3, r1, r3
 8008d48:	4413      	add	r3, r2
 8008d4a:	333f      	adds	r3, #63	; 0x3f
 8008d4c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	f040 80fc 	bne.w	8008f4c <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d142      	bne.n	8008de2 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	212c      	movs	r1, #44	; 0x2c
 8008d62:	fb01 f303 	mul.w	r3, r1, r3
 8008d66:	4413      	add	r3, r2
 8008d68:	334c      	adds	r3, #76	; 0x4c
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f000 80ed 	beq.w	8008f4c <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	212c      	movs	r1, #44	; 0x2c
 8008d78:	fb01 f303 	mul.w	r3, r1, r3
 8008d7c:	4413      	add	r3, r2
 8008d7e:	334c      	adds	r3, #76	; 0x4c
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	6879      	ldr	r1, [r7, #4]
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	202c      	movs	r0, #44	; 0x2c
 8008d88:	fb00 f202 	mul.w	r2, r0, r2
 8008d8c:	440a      	add	r2, r1
 8008d8e:	3240      	adds	r2, #64	; 0x40
 8008d90:	8812      	ldrh	r2, [r2, #0]
 8008d92:	4413      	add	r3, r2
 8008d94:	3b01      	subs	r3, #1
 8008d96:	6879      	ldr	r1, [r7, #4]
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	202c      	movs	r0, #44	; 0x2c
 8008d9c:	fb00 f202 	mul.w	r2, r0, r2
 8008da0:	440a      	add	r2, r1
 8008da2:	3240      	adds	r2, #64	; 0x40
 8008da4:	8812      	ldrh	r2, [r2, #0]
 8008da6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008daa:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f000 80ca 	beq.w	8008f4c <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	212c      	movs	r1, #44	; 0x2c
 8008dbe:	fb01 f303 	mul.w	r3, r1, r3
 8008dc2:	4413      	add	r3, r2
 8008dc4:	3355      	adds	r3, #85	; 0x55
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	f083 0301 	eor.w	r3, r3, #1
 8008dcc:	b2d8      	uxtb	r0, r3
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	212c      	movs	r1, #44	; 0x2c
 8008dd4:	fb01 f303 	mul.w	r3, r1, r3
 8008dd8:	4413      	add	r3, r2
 8008dda:	3355      	adds	r3, #85	; 0x55
 8008ddc:	4602      	mov	r2, r0
 8008dde:	701a      	strb	r2, [r3, #0]
 8008de0:	e0b4      	b.n	8008f4c <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	212c      	movs	r1, #44	; 0x2c
 8008de8:	fb01 f303 	mul.w	r3, r1, r3
 8008dec:	4413      	add	r3, r2
 8008dee:	3355      	adds	r3, #85	; 0x55
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	f083 0301 	eor.w	r3, r3, #1
 8008df6:	b2d8      	uxtb	r0, r3
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	212c      	movs	r1, #44	; 0x2c
 8008dfe:	fb01 f303 	mul.w	r3, r1, r3
 8008e02:	4413      	add	r3, r2
 8008e04:	3355      	adds	r3, #85	; 0x55
 8008e06:	4602      	mov	r2, r0
 8008e08:	701a      	strb	r2, [r3, #0]
 8008e0a:	e09f      	b.n	8008f4c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	212c      	movs	r1, #44	; 0x2c
 8008e12:	fb01 f303 	mul.w	r3, r1, r3
 8008e16:	4413      	add	r3, r2
 8008e18:	3361      	adds	r3, #97	; 0x61
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	2b03      	cmp	r3, #3
 8008e1e:	d109      	bne.n	8008e34 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	212c      	movs	r1, #44	; 0x2c
 8008e26:	fb01 f303 	mul.w	r3, r1, r3
 8008e2a:	4413      	add	r3, r2
 8008e2c:	3360      	adds	r3, #96	; 0x60
 8008e2e:	2202      	movs	r2, #2
 8008e30:	701a      	strb	r2, [r3, #0]
 8008e32:	e08b      	b.n	8008f4c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	212c      	movs	r1, #44	; 0x2c
 8008e3a:	fb01 f303 	mul.w	r3, r1, r3
 8008e3e:	4413      	add	r3, r2
 8008e40:	3361      	adds	r3, #97	; 0x61
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	2b04      	cmp	r3, #4
 8008e46:	d109      	bne.n	8008e5c <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	212c      	movs	r1, #44	; 0x2c
 8008e4e:	fb01 f303 	mul.w	r3, r1, r3
 8008e52:	4413      	add	r3, r2
 8008e54:	3360      	adds	r3, #96	; 0x60
 8008e56:	2202      	movs	r2, #2
 8008e58:	701a      	strb	r2, [r3, #0]
 8008e5a:	e077      	b.n	8008f4c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	212c      	movs	r1, #44	; 0x2c
 8008e62:	fb01 f303 	mul.w	r3, r1, r3
 8008e66:	4413      	add	r3, r2
 8008e68:	3361      	adds	r3, #97	; 0x61
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	2b05      	cmp	r3, #5
 8008e6e:	d109      	bne.n	8008e84 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	212c      	movs	r1, #44	; 0x2c
 8008e76:	fb01 f303 	mul.w	r3, r1, r3
 8008e7a:	4413      	add	r3, r2
 8008e7c:	3360      	adds	r3, #96	; 0x60
 8008e7e:	2205      	movs	r2, #5
 8008e80:	701a      	strb	r2, [r3, #0]
 8008e82:	e063      	b.n	8008f4c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	212c      	movs	r1, #44	; 0x2c
 8008e8a:	fb01 f303 	mul.w	r3, r1, r3
 8008e8e:	4413      	add	r3, r2
 8008e90:	3361      	adds	r3, #97	; 0x61
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	2b06      	cmp	r3, #6
 8008e96:	d009      	beq.n	8008eac <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	212c      	movs	r1, #44	; 0x2c
 8008e9e:	fb01 f303 	mul.w	r3, r1, r3
 8008ea2:	4413      	add	r3, r2
 8008ea4:	3361      	adds	r3, #97	; 0x61
 8008ea6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008ea8:	2b08      	cmp	r3, #8
 8008eaa:	d14f      	bne.n	8008f4c <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	212c      	movs	r1, #44	; 0x2c
 8008eb2:	fb01 f303 	mul.w	r3, r1, r3
 8008eb6:	4413      	add	r3, r2
 8008eb8:	335c      	adds	r3, #92	; 0x5c
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	1c5a      	adds	r2, r3, #1
 8008ebe:	6879      	ldr	r1, [r7, #4]
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	202c      	movs	r0, #44	; 0x2c
 8008ec4:	fb00 f303 	mul.w	r3, r0, r3
 8008ec8:	440b      	add	r3, r1
 8008eca:	335c      	adds	r3, #92	; 0x5c
 8008ecc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	212c      	movs	r1, #44	; 0x2c
 8008ed4:	fb01 f303 	mul.w	r3, r1, r3
 8008ed8:	4413      	add	r3, r2
 8008eda:	335c      	adds	r3, #92	; 0x5c
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d912      	bls.n	8008f08 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	212c      	movs	r1, #44	; 0x2c
 8008ee8:	fb01 f303 	mul.w	r3, r1, r3
 8008eec:	4413      	add	r3, r2
 8008eee:	335c      	adds	r3, #92	; 0x5c
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	212c      	movs	r1, #44	; 0x2c
 8008efa:	fb01 f303 	mul.w	r3, r1, r3
 8008efe:	4413      	add	r3, r2
 8008f00:	3360      	adds	r3, #96	; 0x60
 8008f02:	2204      	movs	r2, #4
 8008f04:	701a      	strb	r2, [r3, #0]
 8008f06:	e021      	b.n	8008f4c <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	212c      	movs	r1, #44	; 0x2c
 8008f0e:	fb01 f303 	mul.w	r3, r1, r3
 8008f12:	4413      	add	r3, r2
 8008f14:	3360      	adds	r3, #96	; 0x60
 8008f16:	2202      	movs	r2, #2
 8008f18:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	015a      	lsls	r2, r3, #5
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f30:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f38:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	015a      	lsls	r2, r3, #5
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	4413      	add	r3, r2
 8008f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f46:	461a      	mov	r2, r3
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	015a      	lsls	r2, r3, #5
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	4413      	add	r3, r2
 8008f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f58:	461a      	mov	r2, r3
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	b2d9      	uxtb	r1, r3
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	202c      	movs	r0, #44	; 0x2c
 8008f68:	fb00 f303 	mul.w	r3, r0, r3
 8008f6c:	4413      	add	r3, r2
 8008f6e:	3360      	adds	r3, #96	; 0x60
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f007 f8a5 	bl	80100c4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008f7a:	bf00      	nop
 8008f7c:	3720      	adds	r7, #32
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b08a      	sub	sp, #40	; 0x28
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f92:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	f003 030f 	and.w	r3, r3, #15
 8008fa2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	0c5b      	lsrs	r3, r3, #17
 8008fa8:	f003 030f 	and.w	r3, r3, #15
 8008fac:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	091b      	lsrs	r3, r3, #4
 8008fb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008fb6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d004      	beq.n	8008fc8 <HCD_RXQLVL_IRQHandler+0x46>
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	2b05      	cmp	r3, #5
 8008fc2:	f000 80a9 	beq.w	8009118 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8008fc6:	e0aa      	b.n	800911e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f000 80a6 	beq.w	800911c <HCD_RXQLVL_IRQHandler+0x19a>
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	212c      	movs	r1, #44	; 0x2c
 8008fd6:	fb01 f303 	mul.w	r3, r1, r3
 8008fda:	4413      	add	r3, r2
 8008fdc:	3344      	adds	r3, #68	; 0x44
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 809b 	beq.w	800911c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	212c      	movs	r1, #44	; 0x2c
 8008fec:	fb01 f303 	mul.w	r3, r1, r3
 8008ff0:	4413      	add	r3, r2
 8008ff2:	3350      	adds	r3, #80	; 0x50
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	441a      	add	r2, r3
 8008ffa:	6879      	ldr	r1, [r7, #4]
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	202c      	movs	r0, #44	; 0x2c
 8009000:	fb00 f303 	mul.w	r3, r0, r3
 8009004:	440b      	add	r3, r1
 8009006:	334c      	adds	r3, #76	; 0x4c
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	429a      	cmp	r2, r3
 800900c:	d87a      	bhi.n	8009104 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6818      	ldr	r0, [r3, #0]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	212c      	movs	r1, #44	; 0x2c
 8009018:	fb01 f303 	mul.w	r3, r1, r3
 800901c:	4413      	add	r3, r2
 800901e:	3344      	adds	r3, #68	; 0x44
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	693a      	ldr	r2, [r7, #16]
 8009024:	b292      	uxth	r2, r2
 8009026:	4619      	mov	r1, r3
 8009028:	f006 fb30 	bl	800f68c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	212c      	movs	r1, #44	; 0x2c
 8009032:	fb01 f303 	mul.w	r3, r1, r3
 8009036:	4413      	add	r3, r2
 8009038:	3344      	adds	r3, #68	; 0x44
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	441a      	add	r2, r3
 8009040:	6879      	ldr	r1, [r7, #4]
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	202c      	movs	r0, #44	; 0x2c
 8009046:	fb00 f303 	mul.w	r3, r0, r3
 800904a:	440b      	add	r3, r1
 800904c:	3344      	adds	r3, #68	; 0x44
 800904e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	212c      	movs	r1, #44	; 0x2c
 8009056:	fb01 f303 	mul.w	r3, r1, r3
 800905a:	4413      	add	r3, r2
 800905c:	3350      	adds	r3, #80	; 0x50
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	441a      	add	r2, r3
 8009064:	6879      	ldr	r1, [r7, #4]
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	202c      	movs	r0, #44	; 0x2c
 800906a:	fb00 f303 	mul.w	r3, r0, r3
 800906e:	440b      	add	r3, r1
 8009070:	3350      	adds	r3, #80	; 0x50
 8009072:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	015a      	lsls	r2, r3, #5
 8009078:	6a3b      	ldr	r3, [r7, #32]
 800907a:	4413      	add	r3, r2
 800907c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	0cdb      	lsrs	r3, r3, #19
 8009084:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009088:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	212c      	movs	r1, #44	; 0x2c
 8009090:	fb01 f303 	mul.w	r3, r1, r3
 8009094:	4413      	add	r3, r2
 8009096:	3340      	adds	r3, #64	; 0x40
 8009098:	881b      	ldrh	r3, [r3, #0]
 800909a:	461a      	mov	r2, r3
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	4293      	cmp	r3, r2
 80090a0:	d13c      	bne.n	800911c <HCD_RXQLVL_IRQHandler+0x19a>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d039      	beq.n	800911c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	015a      	lsls	r2, r3, #5
 80090ac:	6a3b      	ldr	r3, [r7, #32]
 80090ae:	4413      	add	r3, r2
 80090b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80090be:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80090c6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	015a      	lsls	r2, r3, #5
 80090cc:	6a3b      	ldr	r3, [r7, #32]
 80090ce:	4413      	add	r3, r2
 80090d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090d4:	461a      	mov	r2, r3
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	212c      	movs	r1, #44	; 0x2c
 80090e0:	fb01 f303 	mul.w	r3, r1, r3
 80090e4:	4413      	add	r3, r2
 80090e6:	3354      	adds	r3, #84	; 0x54
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	f083 0301 	eor.w	r3, r3, #1
 80090ee:	b2d8      	uxtb	r0, r3
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	212c      	movs	r1, #44	; 0x2c
 80090f6:	fb01 f303 	mul.w	r3, r1, r3
 80090fa:	4413      	add	r3, r2
 80090fc:	3354      	adds	r3, #84	; 0x54
 80090fe:	4602      	mov	r2, r0
 8009100:	701a      	strb	r2, [r3, #0]
      break;
 8009102:	e00b      	b.n	800911c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	212c      	movs	r1, #44	; 0x2c
 800910a:	fb01 f303 	mul.w	r3, r1, r3
 800910e:	4413      	add	r3, r2
 8009110:	3360      	adds	r3, #96	; 0x60
 8009112:	2204      	movs	r2, #4
 8009114:	701a      	strb	r2, [r3, #0]
      break;
 8009116:	e001      	b.n	800911c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8009118:	bf00      	nop
 800911a:	e000      	b.n	800911e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800911c:	bf00      	nop
  }
}
 800911e:	bf00      	nop
 8009120:	3728      	adds	r7, #40	; 0x28
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b086      	sub	sp, #24
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009152:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f003 0302 	and.w	r3, r3, #2
 800915a:	2b02      	cmp	r3, #2
 800915c:	d10b      	bne.n	8009176 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f003 0301 	and.w	r3, r3, #1
 8009164:	2b01      	cmp	r3, #1
 8009166:	d102      	bne.n	800916e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f006 ff8f 	bl	801008c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	f043 0302 	orr.w	r3, r3, #2
 8009174:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f003 0308 	and.w	r3, r3, #8
 800917c:	2b08      	cmp	r3, #8
 800917e:	d132      	bne.n	80091e6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	f043 0308 	orr.w	r3, r3, #8
 8009186:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f003 0304 	and.w	r3, r3, #4
 800918e:	2b04      	cmp	r3, #4
 8009190:	d126      	bne.n	80091e0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	2b02      	cmp	r3, #2
 8009198:	d113      	bne.n	80091c2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80091a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091a4:	d106      	bne.n	80091b4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2102      	movs	r1, #2
 80091ac:	4618      	mov	r0, r3
 80091ae:	f006 fab7 	bl	800f720 <USB_InitFSLSPClkSel>
 80091b2:	e011      	b.n	80091d8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2101      	movs	r1, #1
 80091ba:	4618      	mov	r0, r3
 80091bc:	f006 fab0 	bl	800f720 <USB_InitFSLSPClkSel>
 80091c0:	e00a      	b.n	80091d8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d106      	bne.n	80091d8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091d0:	461a      	mov	r2, r3
 80091d2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80091d6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f006 ff81 	bl	80100e0 <HAL_HCD_PortEnabled_Callback>
 80091de:	e002      	b.n	80091e6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f006 ff8b 	bl	80100fc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f003 0320 	and.w	r3, r3, #32
 80091ec:	2b20      	cmp	r3, #32
 80091ee:	d103      	bne.n	80091f8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	f043 0320 	orr.w	r3, r3, #32
 80091f6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80091fe:	461a      	mov	r2, r3
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	6013      	str	r3, [r2, #0]
}
 8009204:	bf00      	nop
 8009206:	3718      	adds	r7, #24
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d101      	bne.n	800921e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e07f      	b.n	800931e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009224:	b2db      	uxtb	r3, r3
 8009226:	2b00      	cmp	r3, #0
 8009228:	d106      	bne.n	8009238 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f7f9 fd58 	bl	8002ce8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2224      	movs	r2, #36	; 0x24
 800923c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f022 0201 	bic.w	r2, r2, #1
 800924e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800925c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	689a      	ldr	r2, [r3, #8]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800926c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	2b01      	cmp	r3, #1
 8009274:	d107      	bne.n	8009286 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	689a      	ldr	r2, [r3, #8]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009282:	609a      	str	r2, [r3, #8]
 8009284:	e006      	b.n	8009294 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	689a      	ldr	r2, [r3, #8]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009292:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	2b02      	cmp	r3, #2
 800929a:	d104      	bne.n	80092a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	6859      	ldr	r1, [r3, #4]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	4b1d      	ldr	r3, [pc, #116]	; (8009328 <HAL_I2C_Init+0x11c>)
 80092b2:	430b      	orrs	r3, r1
 80092b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68da      	ldr	r2, [r3, #12]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80092c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	691a      	ldr	r2, [r3, #16]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	ea42 0103 	orr.w	r1, r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	021a      	lsls	r2, r3, #8
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	430a      	orrs	r2, r1
 80092de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	69d9      	ldr	r1, [r3, #28]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a1a      	ldr	r2, [r3, #32]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	430a      	orrs	r2, r1
 80092ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f042 0201 	orr.w	r2, r2, #1
 80092fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2220      	movs	r2, #32
 800930a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	02008000 	.word	0x02008000

0800932c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e021      	b.n	8009382 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2224      	movs	r2, #36	; 0x24
 8009342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f022 0201 	bic.w	r2, r2, #1
 8009354:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f7f9 fd3e 	bl	8002dd8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
	...

0800938c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b088      	sub	sp, #32
 8009390:	af02      	add	r7, sp, #8
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	4608      	mov	r0, r1
 8009396:	4611      	mov	r1, r2
 8009398:	461a      	mov	r2, r3
 800939a:	4603      	mov	r3, r0
 800939c:	817b      	strh	r3, [r7, #10]
 800939e:	460b      	mov	r3, r1
 80093a0:	813b      	strh	r3, [r7, #8]
 80093a2:	4613      	mov	r3, r2
 80093a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	2b20      	cmp	r3, #32
 80093b0:	f040 80f9 	bne.w	80095a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80093b4:	6a3b      	ldr	r3, [r7, #32]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d002      	beq.n	80093c0 <HAL_I2C_Mem_Write+0x34>
 80093ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d105      	bne.n	80093cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e0ed      	b.n	80095a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d101      	bne.n	80093da <HAL_I2C_Mem_Write+0x4e>
 80093d6:	2302      	movs	r3, #2
 80093d8:	e0e6      	b.n	80095a8 <HAL_I2C_Mem_Write+0x21c>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2201      	movs	r2, #1
 80093de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80093e2:	f7fc fbd9 	bl	8005b98 <HAL_GetTick>
 80093e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	2319      	movs	r3, #25
 80093ee:	2201      	movs	r2, #1
 80093f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f000 fac3 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e0d1      	b.n	80095a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2221      	movs	r2, #33	; 0x21
 8009408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2240      	movs	r2, #64	; 0x40
 8009410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6a3a      	ldr	r2, [r7, #32]
 800941e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009424:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800942c:	88f8      	ldrh	r0, [r7, #6]
 800942e:	893a      	ldrh	r2, [r7, #8]
 8009430:	8979      	ldrh	r1, [r7, #10]
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	9301      	str	r3, [sp, #4]
 8009436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	4603      	mov	r3, r0
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f000 f9d3 	bl	80097e8 <I2C_RequestMemoryWrite>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d005      	beq.n	8009454 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	e0a9      	b.n	80095a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009458:	b29b      	uxth	r3, r3
 800945a:	2bff      	cmp	r3, #255	; 0xff
 800945c:	d90e      	bls.n	800947c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	22ff      	movs	r2, #255	; 0xff
 8009462:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009468:	b2da      	uxtb	r2, r3
 800946a:	8979      	ldrh	r1, [r7, #10]
 800946c:	2300      	movs	r3, #0
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f000 fba5 	bl	8009bc4 <I2C_TransferConfig>
 800947a:	e00f      	b.n	800949c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009480:	b29a      	uxth	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800948a:	b2da      	uxtb	r2, r3
 800948c:	8979      	ldrh	r1, [r7, #10]
 800948e:	2300      	movs	r3, #0
 8009490:	9300      	str	r3, [sp, #0]
 8009492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f000 fb94 	bl	8009bc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800949c:	697a      	ldr	r2, [r7, #20]
 800949e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 faad 	bl	8009a00 <I2C_WaitOnTXISFlagUntilTimeout>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d001      	beq.n	80094b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	e07b      	b.n	80095a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b4:	781a      	ldrb	r2, [r3, #0]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c0:	1c5a      	adds	r2, r3, #1
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	3b01      	subs	r3, #1
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094d8:	3b01      	subs	r3, #1
 80094da:	b29a      	uxth	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d034      	beq.n	8009554 <HAL_I2C_Mem_Write+0x1c8>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d130      	bne.n	8009554 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f8:	2200      	movs	r2, #0
 80094fa:	2180      	movs	r1, #128	; 0x80
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f000 fa3f 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e04d      	b.n	80095a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009510:	b29b      	uxth	r3, r3
 8009512:	2bff      	cmp	r3, #255	; 0xff
 8009514:	d90e      	bls.n	8009534 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	22ff      	movs	r2, #255	; 0xff
 800951a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009520:	b2da      	uxtb	r2, r3
 8009522:	8979      	ldrh	r1, [r7, #10]
 8009524:	2300      	movs	r3, #0
 8009526:	9300      	str	r3, [sp, #0]
 8009528:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f000 fb49 	bl	8009bc4 <I2C_TransferConfig>
 8009532:	e00f      	b.n	8009554 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009538:	b29a      	uxth	r2, r3
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009542:	b2da      	uxtb	r2, r3
 8009544:	8979      	ldrh	r1, [r7, #10]
 8009546:	2300      	movs	r3, #0
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f000 fb38 	bl	8009bc4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009558:	b29b      	uxth	r3, r3
 800955a:	2b00      	cmp	r3, #0
 800955c:	d19e      	bne.n	800949c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800955e:	697a      	ldr	r2, [r7, #20]
 8009560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f000 fa8c 	bl	8009a80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e01a      	b.n	80095a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2220      	movs	r2, #32
 8009578:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	6859      	ldr	r1, [r3, #4]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	4b0a      	ldr	r3, [pc, #40]	; (80095b0 <HAL_I2C_Mem_Write+0x224>)
 8009586:	400b      	ands	r3, r1
 8009588:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2220      	movs	r2, #32
 800958e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80095a2:	2300      	movs	r3, #0
 80095a4:	e000      	b.n	80095a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80095a6:	2302      	movs	r3, #2
  }
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3718      	adds	r7, #24
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	fe00e800 	.word	0xfe00e800

080095b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b088      	sub	sp, #32
 80095b8:	af02      	add	r7, sp, #8
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	4608      	mov	r0, r1
 80095be:	4611      	mov	r1, r2
 80095c0:	461a      	mov	r2, r3
 80095c2:	4603      	mov	r3, r0
 80095c4:	817b      	strh	r3, [r7, #10]
 80095c6:	460b      	mov	r3, r1
 80095c8:	813b      	strh	r3, [r7, #8]
 80095ca:	4613      	mov	r3, r2
 80095cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b20      	cmp	r3, #32
 80095d8:	f040 80fd 	bne.w	80097d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80095dc:	6a3b      	ldr	r3, [r7, #32]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d002      	beq.n	80095e8 <HAL_I2C_Mem_Read+0x34>
 80095e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d105      	bne.n	80095f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e0f1      	b.n	80097d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d101      	bne.n	8009602 <HAL_I2C_Mem_Read+0x4e>
 80095fe:	2302      	movs	r3, #2
 8009600:	e0ea      	b.n	80097d8 <HAL_I2C_Mem_Read+0x224>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2201      	movs	r2, #1
 8009606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800960a:	f7fc fac5 	bl	8005b98 <HAL_GetTick>
 800960e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	2319      	movs	r3, #25
 8009616:	2201      	movs	r2, #1
 8009618:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 f9af 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d001      	beq.n	800962c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	e0d5      	b.n	80097d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2222      	movs	r2, #34	; 0x22
 8009630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2240      	movs	r2, #64	; 0x40
 8009638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6a3a      	ldr	r2, [r7, #32]
 8009646:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800964c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009654:	88f8      	ldrh	r0, [r7, #6]
 8009656:	893a      	ldrh	r2, [r7, #8]
 8009658:	8979      	ldrh	r1, [r7, #10]
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	9301      	str	r3, [sp, #4]
 800965e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	4603      	mov	r3, r0
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f000 f913 	bl	8009890 <I2C_RequestMemoryRead>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d005      	beq.n	800967c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	e0ad      	b.n	80097d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009680:	b29b      	uxth	r3, r3
 8009682:	2bff      	cmp	r3, #255	; 0xff
 8009684:	d90e      	bls.n	80096a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	22ff      	movs	r2, #255	; 0xff
 800968a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009690:	b2da      	uxtb	r2, r3
 8009692:	8979      	ldrh	r1, [r7, #10]
 8009694:	4b52      	ldr	r3, [pc, #328]	; (80097e0 <HAL_I2C_Mem_Read+0x22c>)
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f000 fa91 	bl	8009bc4 <I2C_TransferConfig>
 80096a2:	e00f      	b.n	80096c4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	8979      	ldrh	r1, [r7, #10]
 80096b6:	4b4a      	ldr	r3, [pc, #296]	; (80097e0 <HAL_I2C_Mem_Read+0x22c>)
 80096b8:	9300      	str	r3, [sp, #0]
 80096ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f000 fa80 	bl	8009bc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ca:	2200      	movs	r2, #0
 80096cc:	2104      	movs	r1, #4
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 f956 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d001      	beq.n	80096de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	e07c      	b.n	80097d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e8:	b2d2      	uxtb	r2, r2
 80096ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096fa:	3b01      	subs	r3, #1
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009706:	b29b      	uxth	r3, r3
 8009708:	3b01      	subs	r3, #1
 800970a:	b29a      	uxth	r2, r3
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009714:	b29b      	uxth	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d034      	beq.n	8009784 <HAL_I2C_Mem_Read+0x1d0>
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800971e:	2b00      	cmp	r3, #0
 8009720:	d130      	bne.n	8009784 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009728:	2200      	movs	r2, #0
 800972a:	2180      	movs	r1, #128	; 0x80
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 f927 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d001      	beq.n	800973c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	e04d      	b.n	80097d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009740:	b29b      	uxth	r3, r3
 8009742:	2bff      	cmp	r3, #255	; 0xff
 8009744:	d90e      	bls.n	8009764 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	22ff      	movs	r2, #255	; 0xff
 800974a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009750:	b2da      	uxtb	r2, r3
 8009752:	8979      	ldrh	r1, [r7, #10]
 8009754:	2300      	movs	r3, #0
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f000 fa31 	bl	8009bc4 <I2C_TransferConfig>
 8009762:	e00f      	b.n	8009784 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009768:	b29a      	uxth	r2, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009772:	b2da      	uxtb	r2, r3
 8009774:	8979      	ldrh	r1, [r7, #10]
 8009776:	2300      	movs	r3, #0
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f000 fa20 	bl	8009bc4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009788:	b29b      	uxth	r3, r3
 800978a:	2b00      	cmp	r3, #0
 800978c:	d19a      	bne.n	80096c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f000 f974 	bl	8009a80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	e01a      	b.n	80097d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2220      	movs	r2, #32
 80097a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	6859      	ldr	r1, [r3, #4]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	4b0b      	ldr	r3, [pc, #44]	; (80097e4 <HAL_I2C_Mem_Read+0x230>)
 80097b6:	400b      	ands	r3, r1
 80097b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2220      	movs	r2, #32
 80097be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	e000      	b.n	80097d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80097d6:	2302      	movs	r3, #2
  }
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3718      	adds	r7, #24
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	80002400 	.word	0x80002400
 80097e4:	fe00e800 	.word	0xfe00e800

080097e8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b086      	sub	sp, #24
 80097ec:	af02      	add	r7, sp, #8
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	4608      	mov	r0, r1
 80097f2:	4611      	mov	r1, r2
 80097f4:	461a      	mov	r2, r3
 80097f6:	4603      	mov	r3, r0
 80097f8:	817b      	strh	r3, [r7, #10]
 80097fa:	460b      	mov	r3, r1
 80097fc:	813b      	strh	r3, [r7, #8]
 80097fe:	4613      	mov	r3, r2
 8009800:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009802:	88fb      	ldrh	r3, [r7, #6]
 8009804:	b2da      	uxtb	r2, r3
 8009806:	8979      	ldrh	r1, [r7, #10]
 8009808:	4b20      	ldr	r3, [pc, #128]	; (800988c <I2C_RequestMemoryWrite+0xa4>)
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009810:	68f8      	ldr	r0, [r7, #12]
 8009812:	f000 f9d7 	bl	8009bc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009816:	69fa      	ldr	r2, [r7, #28]
 8009818:	69b9      	ldr	r1, [r7, #24]
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f000 f8f0 	bl	8009a00 <I2C_WaitOnTXISFlagUntilTimeout>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	e02c      	b.n	8009884 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800982a:	88fb      	ldrh	r3, [r7, #6]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d105      	bne.n	800983c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009830:	893b      	ldrh	r3, [r7, #8]
 8009832:	b2da      	uxtb	r2, r3
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	629a      	str	r2, [r3, #40]	; 0x28
 800983a:	e015      	b.n	8009868 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800983c:	893b      	ldrh	r3, [r7, #8]
 800983e:	0a1b      	lsrs	r3, r3, #8
 8009840:	b29b      	uxth	r3, r3
 8009842:	b2da      	uxtb	r2, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800984a:	69fa      	ldr	r2, [r7, #28]
 800984c:	69b9      	ldr	r1, [r7, #24]
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f000 f8d6 	bl	8009a00 <I2C_WaitOnTXISFlagUntilTimeout>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e012      	b.n	8009884 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800985e:	893b      	ldrh	r3, [r7, #8]
 8009860:	b2da      	uxtb	r2, r3
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	9300      	str	r3, [sp, #0]
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	2200      	movs	r2, #0
 8009870:	2180      	movs	r1, #128	; 0x80
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f000 f884 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e000      	b.n	8009884 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	80002000 	.word	0x80002000

08009890 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af02      	add	r7, sp, #8
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	4608      	mov	r0, r1
 800989a:	4611      	mov	r1, r2
 800989c:	461a      	mov	r2, r3
 800989e:	4603      	mov	r3, r0
 80098a0:	817b      	strh	r3, [r7, #10]
 80098a2:	460b      	mov	r3, r1
 80098a4:	813b      	strh	r3, [r7, #8]
 80098a6:	4613      	mov	r3, r2
 80098a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80098aa:	88fb      	ldrh	r3, [r7, #6]
 80098ac:	b2da      	uxtb	r2, r3
 80098ae:	8979      	ldrh	r1, [r7, #10]
 80098b0:	4b20      	ldr	r3, [pc, #128]	; (8009934 <I2C_RequestMemoryRead+0xa4>)
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	2300      	movs	r3, #0
 80098b6:	68f8      	ldr	r0, [r7, #12]
 80098b8:	f000 f984 	bl	8009bc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098bc:	69fa      	ldr	r2, [r7, #28]
 80098be:	69b9      	ldr	r1, [r7, #24]
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f000 f89d 	bl	8009a00 <I2C_WaitOnTXISFlagUntilTimeout>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d001      	beq.n	80098d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e02c      	b.n	800992a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80098d0:	88fb      	ldrh	r3, [r7, #6]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d105      	bne.n	80098e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80098d6:	893b      	ldrh	r3, [r7, #8]
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	629a      	str	r2, [r3, #40]	; 0x28
 80098e0:	e015      	b.n	800990e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80098e2:	893b      	ldrh	r3, [r7, #8]
 80098e4:	0a1b      	lsrs	r3, r3, #8
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	b2da      	uxtb	r2, r3
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098f0:	69fa      	ldr	r2, [r7, #28]
 80098f2:	69b9      	ldr	r1, [r7, #24]
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	f000 f883 	bl	8009a00 <I2C_WaitOnTXISFlagUntilTimeout>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d001      	beq.n	8009904 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	e012      	b.n	800992a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009904:	893b      	ldrh	r3, [r7, #8]
 8009906:	b2da      	uxtb	r2, r3
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	9300      	str	r3, [sp, #0]
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	2200      	movs	r2, #0
 8009916:	2140      	movs	r1, #64	; 0x40
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f000 f831 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d001      	beq.n	8009928 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	e000      	b.n	800992a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	80002000 	.word	0x80002000

08009938 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	699b      	ldr	r3, [r3, #24]
 8009946:	f003 0302 	and.w	r3, r3, #2
 800994a:	2b02      	cmp	r3, #2
 800994c:	d103      	bne.n	8009956 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2200      	movs	r2, #0
 8009954:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	699b      	ldr	r3, [r3, #24]
 800995c:	f003 0301 	and.w	r3, r3, #1
 8009960:	2b01      	cmp	r3, #1
 8009962:	d007      	beq.n	8009974 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	699a      	ldr	r2, [r3, #24]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f042 0201 	orr.w	r2, r2, #1
 8009972:	619a      	str	r2, [r3, #24]
  }
}
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	603b      	str	r3, [r7, #0]
 800998c:	4613      	mov	r3, r2
 800998e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009990:	e022      	b.n	80099d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009998:	d01e      	beq.n	80099d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800999a:	f7fc f8fd 	bl	8005b98 <HAL_GetTick>
 800999e:	4602      	mov	r2, r0
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d302      	bcc.n	80099b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d113      	bne.n	80099d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099b4:	f043 0220 	orr.w	r2, r3, #32
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2220      	movs	r2, #32
 80099c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	e00f      	b.n	80099f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	699a      	ldr	r2, [r3, #24]
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	4013      	ands	r3, r2
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	bf0c      	ite	eq
 80099e8:	2301      	moveq	r3, #1
 80099ea:	2300      	movne	r3, #0
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	461a      	mov	r2, r3
 80099f0:	79fb      	ldrb	r3, [r7, #7]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d0cd      	beq.n	8009992 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a0c:	e02c      	b.n	8009a68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	68b9      	ldr	r1, [r7, #8]
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f000 f870 	bl	8009af8 <I2C_IsAcknowledgeFailed>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d001      	beq.n	8009a22 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e02a      	b.n	8009a78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a28:	d01e      	beq.n	8009a68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a2a:	f7fc f8b5 	bl	8005b98 <HAL_GetTick>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d302      	bcc.n	8009a40 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d113      	bne.n	8009a68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a44:	f043 0220 	orr.w	r2, r3, #32
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2220      	movs	r2, #32
 8009a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	e007      	b.n	8009a78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	699b      	ldr	r3, [r3, #24]
 8009a6e:	f003 0302 	and.w	r3, r3, #2
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d1cb      	bne.n	8009a0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3710      	adds	r7, #16
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a8c:	e028      	b.n	8009ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	68b9      	ldr	r1, [r7, #8]
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 f830 	bl	8009af8 <I2C_IsAcknowledgeFailed>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e026      	b.n	8009af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009aa2:	f7fc f879 	bl	8005b98 <HAL_GetTick>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	1ad3      	subs	r3, r2, r3
 8009aac:	68ba      	ldr	r2, [r7, #8]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d302      	bcc.n	8009ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d113      	bne.n	8009ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009abc:	f043 0220 	orr.w	r2, r3, #32
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2220      	movs	r2, #32
 8009ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	e007      	b.n	8009af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	f003 0320 	and.w	r3, r3, #32
 8009aea:	2b20      	cmp	r3, #32
 8009aec:	d1cf      	bne.n	8009a8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	f003 0310 	and.w	r3, r3, #16
 8009b0e:	2b10      	cmp	r3, #16
 8009b10:	d151      	bne.n	8009bb6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b12:	e022      	b.n	8009b5a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b1a:	d01e      	beq.n	8009b5a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b1c:	f7fc f83c 	bl	8005b98 <HAL_GetTick>
 8009b20:	4602      	mov	r2, r0
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	1ad3      	subs	r3, r2, r3
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d302      	bcc.n	8009b32 <I2C_IsAcknowledgeFailed+0x3a>
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d113      	bne.n	8009b5a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b36:	f043 0220 	orr.w	r2, r3, #32
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2220      	movs	r2, #32
 8009b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e02e      	b.n	8009bb8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	699b      	ldr	r3, [r3, #24]
 8009b60:	f003 0320 	and.w	r3, r3, #32
 8009b64:	2b20      	cmp	r3, #32
 8009b66:	d1d5      	bne.n	8009b14 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2210      	movs	r2, #16
 8009b6e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2220      	movs	r2, #32
 8009b76:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f7ff fedd 	bl	8009938 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	6859      	ldr	r1, [r3, #4]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	4b0d      	ldr	r3, [pc, #52]	; (8009bc0 <I2C_IsAcknowledgeFailed+0xc8>)
 8009b8a:	400b      	ands	r3, r1
 8009b8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b92:	f043 0204 	orr.w	r2, r3, #4
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2220      	movs	r2, #32
 8009b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e000      	b.n	8009bb8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	fe00e800 	.word	0xfe00e800

08009bc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	607b      	str	r3, [r7, #4]
 8009bce:	460b      	mov	r3, r1
 8009bd0:	817b      	strh	r3, [r7, #10]
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	0d5b      	lsrs	r3, r3, #21
 8009be0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009be4:	4b0d      	ldr	r3, [pc, #52]	; (8009c1c <I2C_TransferConfig+0x58>)
 8009be6:	430b      	orrs	r3, r1
 8009be8:	43db      	mvns	r3, r3
 8009bea:	ea02 0103 	and.w	r1, r2, r3
 8009bee:	897b      	ldrh	r3, [r7, #10]
 8009bf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009bf4:	7a7b      	ldrb	r3, [r7, #9]
 8009bf6:	041b      	lsls	r3, r3, #16
 8009bf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009bfc:	431a      	orrs	r2, r3
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	431a      	orrs	r2, r3
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	431a      	orrs	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8009c0e:	bf00      	nop
 8009c10:	3714      	adds	r7, #20
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	03ff63ff 	.word	0x03ff63ff

08009c20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	2b20      	cmp	r3, #32
 8009c34:	d138      	bne.n	8009ca8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d101      	bne.n	8009c44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009c40:	2302      	movs	r3, #2
 8009c42:	e032      	b.n	8009caa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2224      	movs	r2, #36	; 0x24
 8009c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f022 0201 	bic.w	r2, r2, #1
 8009c62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009c72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6819      	ldr	r1, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	683a      	ldr	r2, [r7, #0]
 8009c80:	430a      	orrs	r2, r1
 8009c82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f042 0201 	orr.w	r2, r2, #1
 8009c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2220      	movs	r2, #32
 8009c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	e000      	b.n	8009caa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ca8:	2302      	movs	r3, #2
  }
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	370c      	adds	r7, #12
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	b085      	sub	sp, #20
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
 8009cbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	2b20      	cmp	r3, #32
 8009cca:	d139      	bne.n	8009d40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d101      	bne.n	8009cda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009cd6:	2302      	movs	r3, #2
 8009cd8:	e033      	b.n	8009d42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2224      	movs	r2, #36	; 0x24
 8009ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f022 0201 	bic.w	r2, r2, #1
 8009cf8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009d08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	021b      	lsls	r3, r3, #8
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f042 0201 	orr.w	r2, r2, #1
 8009d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2220      	movs	r2, #32
 8009d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	e000      	b.n	8009d42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009d40:	2302      	movs	r3, #2
  }
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
	...

08009d50 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d101      	bne.n	8009d62 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e0bf      	b.n	8009ee2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d106      	bne.n	8009d7c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7f9 f86a 	bl	8002e50 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2202      	movs	r2, #2
 8009d80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	699a      	ldr	r2, [r3, #24]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009d92:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	6999      	ldr	r1, [r3, #24]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	685a      	ldr	r2, [r3, #4]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009da8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	430a      	orrs	r2, r1
 8009db6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	6899      	ldr	r1, [r3, #8]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	4b4a      	ldr	r3, [pc, #296]	; (8009eec <HAL_LTDC_Init+0x19c>)
 8009dc4:	400b      	ands	r3, r1
 8009dc6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	695b      	ldr	r3, [r3, #20]
 8009dcc:	041b      	lsls	r3, r3, #16
 8009dce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	6899      	ldr	r1, [r3, #8]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	699a      	ldr	r2, [r3, #24]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	431a      	orrs	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	430a      	orrs	r2, r1
 8009de4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68d9      	ldr	r1, [r3, #12]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	4b3e      	ldr	r3, [pc, #248]	; (8009eec <HAL_LTDC_Init+0x19c>)
 8009df2:	400b      	ands	r3, r1
 8009df4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	69db      	ldr	r3, [r3, #28]
 8009dfa:	041b      	lsls	r3, r3, #16
 8009dfc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68d9      	ldr	r1, [r3, #12]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a1a      	ldr	r2, [r3, #32]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	431a      	orrs	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	430a      	orrs	r2, r1
 8009e12:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	6919      	ldr	r1, [r3, #16]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	4b33      	ldr	r3, [pc, #204]	; (8009eec <HAL_LTDC_Init+0x19c>)
 8009e20:	400b      	ands	r3, r1
 8009e22:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e28:	041b      	lsls	r3, r3, #16
 8009e2a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6919      	ldr	r1, [r3, #16]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	431a      	orrs	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	430a      	orrs	r2, r1
 8009e40:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	6959      	ldr	r1, [r3, #20]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	4b27      	ldr	r3, [pc, #156]	; (8009eec <HAL_LTDC_Init+0x19c>)
 8009e4e:	400b      	ands	r3, r1
 8009e50:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e56:	041b      	lsls	r3, r3, #16
 8009e58:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	6959      	ldr	r1, [r3, #20]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	431a      	orrs	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	430a      	orrs	r2, r1
 8009e6e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e76:	021b      	lsls	r3, r3, #8
 8009e78:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009e80:	041b      	lsls	r3, r3, #16
 8009e82:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009e92:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009ea6:	431a      	orrs	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	430a      	orrs	r2, r1
 8009eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f042 0206 	orr.w	r2, r2, #6
 8009ebe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	699a      	ldr	r2, [r3, #24]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f042 0201 	orr.w	r2, r2, #1
 8009ece:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	f000f800 	.word	0xf000f800

08009ef0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009ef0:	b5b0      	push	{r4, r5, r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d101      	bne.n	8009f0a <HAL_LTDC_ConfigLayer+0x1a>
 8009f06:	2302      	movs	r3, #2
 8009f08:	e02c      	b.n	8009f64 <HAL_LTDC_ConfigLayer+0x74>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2202      	movs	r2, #2
 8009f16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2134      	movs	r1, #52	; 0x34
 8009f20:	fb01 f303 	mul.w	r3, r1, r3
 8009f24:	4413      	add	r3, r2
 8009f26:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	4614      	mov	r4, r2
 8009f2e:	461d      	mov	r5, r3
 8009f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	68b9      	ldr	r1, [r7, #8]
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f000 f847 	bl	8009fd8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3710      	adds	r7, #16
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bdb0      	pop	{r4, r5, r7, pc}

08009f6c <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b086      	sub	sp, #24
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d101      	bne.n	8009f86 <HAL_LTDC_SetAddress+0x1a>
 8009f82:	2302      	movs	r3, #2
 8009f84:	e024      	b.n	8009fd0 <HAL_LTDC_SetAddress+0x64>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2202      	movs	r2, #2
 8009f92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2234      	movs	r2, #52	; 0x34
 8009f9a:	fb02 f303 	mul.w	r3, r2, r3
 8009f9e:	3338      	adds	r3, #56	; 0x38
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	6979      	ldr	r1, [r7, #20]
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f000 f811 	bl	8009fd8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3718      	adds	r7, #24
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b089      	sub	sp, #36	; 0x24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	685a      	ldr	r2, [r3, #4]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	0c1b      	lsrs	r3, r3, #16
 8009ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ff4:	4413      	add	r3, r2
 8009ff6:	041b      	lsls	r3, r3, #16
 8009ff8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	461a      	mov	r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	01db      	lsls	r3, r3, #7
 800a004:	4413      	add	r3, r2
 800a006:	3384      	adds	r3, #132	; 0x84
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	6812      	ldr	r2, [r2, #0]
 800a00e:	4611      	mov	r1, r2
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	01d2      	lsls	r2, r2, #7
 800a014:	440a      	add	r2, r1
 800a016:	3284      	adds	r2, #132	; 0x84
 800a018:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a01c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	0c1b      	lsrs	r3, r3, #16
 800a02a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a02e:	4413      	add	r3, r2
 800a030:	1c5a      	adds	r2, r3, #1
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4619      	mov	r1, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	01db      	lsls	r3, r3, #7
 800a03c:	440b      	add	r3, r1
 800a03e:	3384      	adds	r3, #132	; 0x84
 800a040:	4619      	mov	r1, r3
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	4313      	orrs	r3, r2
 800a046:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	68da      	ldr	r2, [r3, #12]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a056:	4413      	add	r3, r2
 800a058:	041b      	lsls	r3, r3, #16
 800a05a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	461a      	mov	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	01db      	lsls	r3, r3, #7
 800a066:	4413      	add	r3, r2
 800a068:	3384      	adds	r3, #132	; 0x84
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	6812      	ldr	r2, [r2, #0]
 800a070:	4611      	mov	r1, r2
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	01d2      	lsls	r2, r2, #7
 800a076:	440a      	add	r2, r1
 800a078:	3284      	adds	r2, #132	; 0x84
 800a07a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a07e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	689a      	ldr	r2, [r3, #8]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a08e:	4413      	add	r3, r2
 800a090:	1c5a      	adds	r2, r3, #1
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4619      	mov	r1, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	01db      	lsls	r3, r3, #7
 800a09c:	440b      	add	r3, r1
 800a09e:	3384      	adds	r3, #132	; 0x84
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	01db      	lsls	r3, r3, #7
 800a0b2:	4413      	add	r3, r2
 800a0b4:	3384      	adds	r3, #132	; 0x84
 800a0b6:	691b      	ldr	r3, [r3, #16]
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	6812      	ldr	r2, [r2, #0]
 800a0bc:	4611      	mov	r1, r2
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	01d2      	lsls	r2, r2, #7
 800a0c2:	440a      	add	r2, r1
 800a0c4:	3284      	adds	r2, #132	; 0x84
 800a0c6:	f023 0307 	bic.w	r3, r3, #7
 800a0ca:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	01db      	lsls	r3, r3, #7
 800a0d6:	4413      	add	r3, r2
 800a0d8:	3384      	adds	r3, #132	; 0x84
 800a0da:	461a      	mov	r2, r3
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a0e8:	021b      	lsls	r3, r3, #8
 800a0ea:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a0f2:	041b      	lsls	r3, r3, #16
 800a0f4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	061b      	lsls	r3, r3, #24
 800a0fc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	01db      	lsls	r3, r3, #7
 800a108:	4413      	add	r3, r2
 800a10a:	3384      	adds	r3, #132	; 0x84
 800a10c:	699b      	ldr	r3, [r3, #24]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	461a      	mov	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	01db      	lsls	r3, r3, #7
 800a118:	4413      	add	r3, r2
 800a11a:	3384      	adds	r3, #132	; 0x84
 800a11c:	461a      	mov	r2, r3
 800a11e:	2300      	movs	r3, #0
 800a120:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a128:	461a      	mov	r2, r3
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	431a      	orrs	r2, r3
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	431a      	orrs	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4619      	mov	r1, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	01db      	lsls	r3, r3, #7
 800a13c:	440b      	add	r3, r1
 800a13e:	3384      	adds	r3, #132	; 0x84
 800a140:	4619      	mov	r1, r3
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	4313      	orrs	r3, r2
 800a146:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	461a      	mov	r2, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	01db      	lsls	r3, r3, #7
 800a152:	4413      	add	r3, r2
 800a154:	3384      	adds	r3, #132	; 0x84
 800a156:	695b      	ldr	r3, [r3, #20]
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	6812      	ldr	r2, [r2, #0]
 800a15c:	4611      	mov	r1, r2
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	01d2      	lsls	r2, r2, #7
 800a162:	440a      	add	r2, r1
 800a164:	3284      	adds	r2, #132	; 0x84
 800a166:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a16a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	461a      	mov	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	01db      	lsls	r3, r3, #7
 800a176:	4413      	add	r3, r2
 800a178:	3384      	adds	r3, #132	; 0x84
 800a17a:	461a      	mov	r2, r3
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	695b      	ldr	r3, [r3, #20]
 800a180:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	461a      	mov	r2, r3
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	01db      	lsls	r3, r3, #7
 800a18c:	4413      	add	r3, r2
 800a18e:	3384      	adds	r3, #132	; 0x84
 800a190:	69da      	ldr	r2, [r3, #28]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4619      	mov	r1, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	01db      	lsls	r3, r3, #7
 800a19c:	440b      	add	r3, r1
 800a19e:	3384      	adds	r3, #132	; 0x84
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	4b58      	ldr	r3, [pc, #352]	; (800a304 <LTDC_SetConfig+0x32c>)
 800a1a4:	4013      	ands	r3, r2
 800a1a6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	69da      	ldr	r2, [r3, #28]
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	6a1b      	ldr	r3, [r3, #32]
 800a1b0:	68f9      	ldr	r1, [r7, #12]
 800a1b2:	6809      	ldr	r1, [r1, #0]
 800a1b4:	4608      	mov	r0, r1
 800a1b6:	6879      	ldr	r1, [r7, #4]
 800a1b8:	01c9      	lsls	r1, r1, #7
 800a1ba:	4401      	add	r1, r0
 800a1bc:	3184      	adds	r1, #132	; 0x84
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	01db      	lsls	r3, r3, #7
 800a1cc:	4413      	add	r3, r2
 800a1ce:	3384      	adds	r3, #132	; 0x84
 800a1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	01db      	lsls	r3, r3, #7
 800a1dc:	4413      	add	r3, r2
 800a1de:	3384      	adds	r3, #132	; 0x84
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	01db      	lsls	r3, r3, #7
 800a1f0:	4413      	add	r3, r2
 800a1f2:	3384      	adds	r3, #132	; 0x84
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fa:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d102      	bne.n	800a20a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a204:	2304      	movs	r3, #4
 800a206:	61fb      	str	r3, [r7, #28]
 800a208:	e01b      	b.n	800a242 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d102      	bne.n	800a218 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a212:	2303      	movs	r3, #3
 800a214:	61fb      	str	r3, [r7, #28]
 800a216:	e014      	b.n	800a242 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	691b      	ldr	r3, [r3, #16]
 800a21c:	2b04      	cmp	r3, #4
 800a21e:	d00b      	beq.n	800a238 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a224:	2b02      	cmp	r3, #2
 800a226:	d007      	beq.n	800a238 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a22c:	2b03      	cmp	r3, #3
 800a22e:	d003      	beq.n	800a238 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a234:	2b07      	cmp	r3, #7
 800a236:	d102      	bne.n	800a23e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a238:	2302      	movs	r3, #2
 800a23a:	61fb      	str	r3, [r7, #28]
 800a23c:	e001      	b.n	800a242 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a23e:	2301      	movs	r3, #1
 800a240:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	461a      	mov	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	01db      	lsls	r3, r3, #7
 800a24c:	4413      	add	r3, r2
 800a24e:	3384      	adds	r3, #132	; 0x84
 800a250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	6812      	ldr	r2, [r2, #0]
 800a256:	4611      	mov	r1, r2
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	01d2      	lsls	r2, r2, #7
 800a25c:	440a      	add	r2, r1
 800a25e:	3284      	adds	r2, #132	; 0x84
 800a260:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a264:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a26a:	69fa      	ldr	r2, [r7, #28]
 800a26c:	fb02 f303 	mul.w	r3, r2, r3
 800a270:	041a      	lsls	r2, r3, #16
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	6859      	ldr	r1, [r3, #4]
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	1acb      	subs	r3, r1, r3
 800a27c:	69f9      	ldr	r1, [r7, #28]
 800a27e:	fb01 f303 	mul.w	r3, r1, r3
 800a282:	3303      	adds	r3, #3
 800a284:	68f9      	ldr	r1, [r7, #12]
 800a286:	6809      	ldr	r1, [r1, #0]
 800a288:	4608      	mov	r0, r1
 800a28a:	6879      	ldr	r1, [r7, #4]
 800a28c:	01c9      	lsls	r1, r1, #7
 800a28e:	4401      	add	r1, r0
 800a290:	3184      	adds	r1, #132	; 0x84
 800a292:	4313      	orrs	r3, r2
 800a294:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	461a      	mov	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	01db      	lsls	r3, r3, #7
 800a2a0:	4413      	add	r3, r2
 800a2a2:	3384      	adds	r3, #132	; 0x84
 800a2a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	01db      	lsls	r3, r3, #7
 800a2b0:	440b      	add	r3, r1
 800a2b2:	3384      	adds	r3, #132	; 0x84
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	4b14      	ldr	r3, [pc, #80]	; (800a308 <LTDC_SetConfig+0x330>)
 800a2b8:	4013      	ands	r3, r2
 800a2ba:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	01db      	lsls	r3, r3, #7
 800a2c6:	4413      	add	r3, r2
 800a2c8:	3384      	adds	r3, #132	; 0x84
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	01db      	lsls	r3, r3, #7
 800a2dc:	4413      	add	r3, r2
 800a2de:	3384      	adds	r3, #132	; 0x84
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	6812      	ldr	r2, [r2, #0]
 800a2e6:	4611      	mov	r1, r2
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	01d2      	lsls	r2, r2, #7
 800a2ec:	440a      	add	r2, r1
 800a2ee:	3284      	adds	r2, #132	; 0x84
 800a2f0:	f043 0301 	orr.w	r3, r3, #1
 800a2f4:	6013      	str	r3, [r2, #0]
}
 800a2f6:	bf00      	nop
 800a2f8:	3724      	adds	r7, #36	; 0x24
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	fffff8f8 	.word	0xfffff8f8
 800a308:	fffff800 	.word	0xfffff800

0800a30c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a30c:	b480      	push	{r7}
 800a30e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a310:	4b05      	ldr	r3, [pc, #20]	; (800a328 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a04      	ldr	r2, [pc, #16]	; (800a328 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a31a:	6013      	str	r3, [r2, #0]
}
 800a31c:	bf00      	nop
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	40007000 	.word	0x40007000

0800a32c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a332:	2300      	movs	r3, #0
 800a334:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a336:	4b23      	ldr	r3, [pc, #140]	; (800a3c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800a338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33a:	4a22      	ldr	r2, [pc, #136]	; (800a3c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800a33c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a340:	6413      	str	r3, [r2, #64]	; 0x40
 800a342:	4b20      	ldr	r3, [pc, #128]	; (800a3c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800a344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a34a:	603b      	str	r3, [r7, #0]
 800a34c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a34e:	4b1e      	ldr	r3, [pc, #120]	; (800a3c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a1d      	ldr	r2, [pc, #116]	; (800a3c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a358:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a35a:	f7fb fc1d 	bl	8005b98 <HAL_GetTick>
 800a35e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a360:	e009      	b.n	800a376 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a362:	f7fb fc19 	bl	8005b98 <HAL_GetTick>
 800a366:	4602      	mov	r2, r0
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a370:	d901      	bls.n	800a376 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a372:	2303      	movs	r3, #3
 800a374:	e022      	b.n	800a3bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a376:	4b14      	ldr	r3, [pc, #80]	; (800a3c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a37e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a382:	d1ee      	bne.n	800a362 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a384:	4b10      	ldr	r3, [pc, #64]	; (800a3c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a0f      	ldr	r2, [pc, #60]	; (800a3c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a38a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a38e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a390:	f7fb fc02 	bl	8005b98 <HAL_GetTick>
 800a394:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a396:	e009      	b.n	800a3ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a398:	f7fb fbfe 	bl	8005b98 <HAL_GetTick>
 800a39c:	4602      	mov	r2, r0
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3a6:	d901      	bls.n	800a3ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a3a8:	2303      	movs	r3, #3
 800a3aa:	e007      	b.n	800a3bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a3ac:	4b06      	ldr	r3, [pc, #24]	; (800a3c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3b8:	d1ee      	bne.n	800a398 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3708      	adds	r7, #8
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	40023800 	.word	0x40023800
 800a3c8:	40007000 	.word	0x40007000

0800a3cc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af02      	add	r7, sp, #8
 800a3d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a3d4:	f7fb fbe0 	bl	8005b98 <HAL_GetTick>
 800a3d8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d101      	bne.n	800a3e4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e067      	b.n	800a4b4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10b      	bne.n	800a408 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f7f8 fde9 	bl	8002fd0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a3fe:	f241 3188 	movw	r1, #5000	; 0x1388
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 fda8 	bl	800af58 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	3b01      	subs	r3, #1
 800a418:	021a      	lsls	r2, r3, #8
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	430a      	orrs	r2, r1
 800a420:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	2120      	movs	r1, #32
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fdd3 	bl	800afda <QSPI_WaitFlagStateUntilTimeout>
 800a434:	4603      	mov	r3, r0
 800a436:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a438:	7afb      	ldrb	r3, [r7, #11]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d135      	bne.n	800a4aa <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	4b1d      	ldr	r3, [pc, #116]	; (800a4bc <HAL_QSPI_Init+0xf0>)
 800a446:	4013      	ands	r3, r2
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	6852      	ldr	r2, [r2, #4]
 800a44c:	0611      	lsls	r1, r2, #24
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	68d2      	ldr	r2, [r2, #12]
 800a452:	4311      	orrs	r1, r2
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	69d2      	ldr	r2, [r2, #28]
 800a458:	4311      	orrs	r1, r2
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	6a12      	ldr	r2, [r2, #32]
 800a45e:	4311      	orrs	r1, r2
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	6812      	ldr	r2, [r2, #0]
 800a464:	430b      	orrs	r3, r1
 800a466:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	685a      	ldr	r2, [r3, #4]
 800a46e:	4b14      	ldr	r3, [pc, #80]	; (800a4c0 <HAL_QSPI_Init+0xf4>)
 800a470:	4013      	ands	r3, r2
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	6912      	ldr	r2, [r2, #16]
 800a476:	0411      	lsls	r1, r2, #16
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	6952      	ldr	r2, [r2, #20]
 800a47c:	4311      	orrs	r1, r2
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	6992      	ldr	r2, [r2, #24]
 800a482:	4311      	orrs	r1, r2
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	6812      	ldr	r2, [r2, #0]
 800a488:	430b      	orrs	r3, r1
 800a48a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f042 0201 	orr.w	r2, r2, #1
 800a49a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a4b2:	7afb      	ldrb	r3, [r7, #11]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	00ffff2f 	.word	0x00ffff2f
 800a4c0:	ffe0f8fe 	.word	0xffe0f8fe

0800a4c4 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b086      	sub	sp, #24
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	f003 0304 	and.w	r3, r3, #4
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d064      	beq.n	800a5b0 <HAL_QSPI_IRQHandler+0xec>
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d05f      	beq.n	800a5b0 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	3320      	adds	r3, #32
 800a4f6:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	2b12      	cmp	r3, #18
 800a502:	d125      	bne.n	800a550 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800a504:	e01c      	b.n	800a540 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00f      	beq.n	800a52e <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a512:	781a      	ldrb	r2, [r3, #0]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51c:	1c5a      	adds	r2, r3, #1
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a526:	1e5a      	subs	r2, r3, #1
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	62da      	str	r2, [r3, #44]	; 0x2c
 800a52c:	e008      	b.n	800a540 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a53c:	601a      	str	r2, [r3, #0]
          break;
 800a53e:	e033      	b.n	800a5a8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	f003 0304 	and.w	r3, r3, #4
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1db      	bne.n	800a506 <HAL_QSPI_IRQHandler+0x42>
 800a54e:	e02b      	b.n	800a5a8 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a556:	b2db      	uxtb	r3, r3
 800a558:	2b22      	cmp	r3, #34	; 0x22
 800a55a:	d125      	bne.n	800a5a8 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800a55c:	e01d      	b.n	800a59a <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a562:	2b00      	cmp	r3, #0
 800a564:	d010      	beq.n	800a588 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a56a:	68fa      	ldr	r2, [r7, #12]
 800a56c:	7812      	ldrb	r2, [r2, #0]
 800a56e:	b2d2      	uxtb	r2, r2
 800a570:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a576:	1c5a      	adds	r2, r3, #1
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a580:	1e5a      	subs	r2, r3, #1
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	639a      	str	r2, [r3, #56]	; 0x38
 800a586:	e008      	b.n	800a59a <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a596:	601a      	str	r2, [r3, #0]
          break;
 800a598:	e006      	b.n	800a5a8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	f003 0304 	and.w	r3, r3, #4
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1da      	bne.n	800a55e <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fbed 	bl	800ad88 <HAL_QSPI_FifoThresholdCallback>
 800a5ae:	e142      	b.n	800a836 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	f003 0302 	and.w	r3, r3, #2
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f000 80b6 	beq.w	800a728 <HAL_QSPI_IRQHandler+0x264>
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f000 80b0 	beq.w	800a728 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2202      	movs	r2, #2
 800a5ce:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800a5de:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	2b12      	cmp	r3, #18
 800a5ea:	d123      	bne.n	800a634 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f003 0304 	and.w	r3, r3, #4
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d011      	beq.n	800a61e <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f022 0204 	bic.w	r2, r2, #4
 800a608:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f022 0201 	bic.w	r2, r2, #1
 800a61c:	601a      	str	r2, [r3, #0]
      }

#if  defined(QSPI1_V1_0)
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 fc3e 	bl	800aea0 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 fba1 	bl	800ad74 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a632:	e0fd      	b.n	800a830 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	2b22      	cmp	r3, #34	; 0x22
 800a63e:	d146      	bne.n	800a6ce <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 0304 	and.w	r3, r3, #4
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d012      	beq.n	800a674 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f022 0204 	bic.w	r2, r2, #4
 800a65c:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f022 0201 	bic.w	r2, r2, #1
 800a670:	601a      	str	r2, [r3, #0]
 800a672:	e021      	b.n	800a6b8 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	3320      	adds	r3, #32
 800a67a:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800a67c:	e013      	b.n	800a6a6 <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a682:	2b00      	cmp	r3, #0
 800a684:	d017      	beq.n	800a6b6 <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	7812      	ldrb	r2, [r2, #0]
 800a68e:	b2d2      	uxtb	r2, r2
 800a690:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a696:	1c5a      	adds	r2, r3, #1
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a0:	1e5a      	subs	r2, r3, #1
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d1e4      	bne.n	800a67e <HAL_QSPI_IRQHandler+0x1ba>
 800a6b4:	e000      	b.n	800a6b8 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800a6b6:	bf00      	nop
        }
      }

#if  defined(QSPI1_V1_0)
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 fbf1 	bl	800aea0 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 fb4a 	bl	800ad60 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a6cc:	e0b0      	b.n	800a830 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d107      	bne.n	800a6ea <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 fb32 	bl	800ad4c <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a6e8:	e0a2      	b.n	800a830 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	2b08      	cmp	r3, #8
 800a6f4:	f040 809c 	bne.w	800a830 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	695a      	ldr	r2, [r3, #20]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800a706:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a714:	2b00      	cmp	r3, #0
 800a716:	d103      	bne.n	800a720 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 fb0d 	bl	800ad38 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a71e:	e087      	b.n	800a830 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 faff 	bl	800ad24 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a726:	e083      	b.n	800a830 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	f003 0308 	and.w	r3, r3, #8
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d01f      	beq.n	800a772 <HAL_QSPI_IRQHandler+0x2ae>
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d01a      	beq.n	800a772 <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2208      	movs	r2, #8
 800a742:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00b      	beq.n	800a76a <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800a760:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2201      	movs	r2, #1
 800a766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 fb16 	bl	800ad9c <HAL_QSPI_StatusMatchCallback>
 800a770:	e061      	b.n	800a836 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	f003 0301 	and.w	r3, r3, #1
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d047      	beq.n	800a80c <HAL_QSPI_IRQHandler+0x348>
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a782:	2b00      	cmp	r3, #0
 800a784:	d042      	beq.n	800a80c <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2201      	movs	r2, #1
 800a78c:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800a79c:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7a2:	f043 0202 	orr.w	r2, r3, #2
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f003 0304 	and.w	r3, r3, #4
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d021      	beq.n	800a7fc <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f022 0204 	bic.w	r2, r2, #4
 800a7c6:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7cc:	4a1c      	ldr	r2, [pc, #112]	; (800a840 <HAL_QSPI_IRQHandler+0x37c>)
 800a7ce:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7fc f95d 	bl	8006a94 <HAL_DMA_Abort_IT>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d029      	beq.n	800a834 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e4:	f043 0204 	orr.w	r2, r3, #4
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 fa95 	bl	800ad24 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a7fa:	e01b      	b.n	800a834 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fa8d 	bl	800ad24 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a80a:	e013      	b.n	800a834 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	f003 0310 	and.w	r3, r3, #16
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00f      	beq.n	800a836 <HAL_QSPI_IRQHandler+0x372>
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00a      	beq.n	800a836 <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2210      	movs	r2, #16
 800a826:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 fac1 	bl	800adb0 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800a82e:	e002      	b.n	800a836 <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a830:	bf00      	nop
 800a832:	e000      	b.n	800a836 <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a834:	bf00      	nop
}
 800a836:	bf00      	nop
 800a838:	3718      	adds	r7, #24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	0800af75 	.word	0x0800af75

0800a844 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b088      	sub	sp, #32
 800a848:	af02      	add	r7, sp, #8
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a850:	f7fb f9a2 	bl	8005b98 <HAL_GetTick>
 800a854:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d101      	bne.n	800a866 <HAL_QSPI_Command+0x22>
 800a862:	2302      	movs	r3, #2
 800a864:	e048      	b.n	800a8f8 <HAL_QSPI_Command+0xb4>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a874:	b2db      	uxtb	r3, r3
 800a876:	2b01      	cmp	r3, #1
 800a878:	d137      	bne.n	800a8ea <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2200      	movs	r2, #0
 800a87e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2202      	movs	r2, #2
 800a884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	2200      	movs	r2, #0
 800a890:	2120      	movs	r1, #32
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f000 fba1 	bl	800afda <QSPI_WaitFlagStateUntilTimeout>
 800a898:	4603      	mov	r3, r0
 800a89a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800a89c:	7dfb      	ldrb	r3, [r7, #23]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d125      	bne.n	800a8ee <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	68b9      	ldr	r1, [r7, #8]
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f000 fbce 	bl	800b048 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d115      	bne.n	800a8e0 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	2102      	movs	r1, #2
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f000 fb8b 	bl	800afda <QSPI_WaitFlagStateUntilTimeout>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800a8c8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d10f      	bne.n	800a8ee <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2202      	movs	r2, #2
 800a8d4:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8de:	e006      	b.n	800a8ee <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8e8:	e001      	b.n	800a8ee <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a8f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3718      	adds	r7, #24
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b08a      	sub	sp, #40	; 0x28
 800a904:	af02      	add	r7, sp, #8
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a90c:	2300      	movs	r3, #0
 800a90e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800a910:	f7fb f942 	bl	8005b98 <HAL_GetTick>
 800a914:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3320      	adds	r3, #32
 800a91c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a924:	b2db      	uxtb	r3, r3
 800a926:	2b01      	cmp	r3, #1
 800a928:	d101      	bne.n	800a92e <HAL_QSPI_Transmit+0x2e>
 800a92a:	2302      	movs	r3, #2
 800a92c:	e07b      	b.n	800aa26 <HAL_QSPI_Transmit+0x126>
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d16a      	bne.n	800aa18 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2200      	movs	r2, #0
 800a946:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d05b      	beq.n	800aa06 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2212      	movs	r2, #18
 800a952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	1c5a      	adds	r2, r3, #1
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	691b      	ldr	r3, [r3, #16]
 800a968:	1c5a      	adds	r2, r3, #1
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	695a      	ldr	r2, [r3, #20]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800a982:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800a984:	e01b      	b.n	800a9be <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	9300      	str	r3, [sp, #0]
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	2201      	movs	r2, #1
 800a98e:	2104      	movs	r1, #4
 800a990:	68f8      	ldr	r0, [r7, #12]
 800a992:	f000 fb22 	bl	800afda <QSPI_WaitFlagStateUntilTimeout>
 800a996:	4603      	mov	r3, r0
 800a998:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800a99a:	7ffb      	ldrb	r3, [r7, #31]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d113      	bne.n	800a9c8 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a4:	781a      	ldrb	r2, [r3, #0]
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ae:	1c5a      	adds	r2, r3, #1
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b8:	1e5a      	subs	r2, r3, #1
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1df      	bne.n	800a986 <HAL_QSPI_Transmit+0x86>
 800a9c6:	e000      	b.n	800a9ca <HAL_QSPI_Transmit+0xca>
          break;
 800a9c8:	bf00      	nop
      }

      if (status == HAL_OK)
 800a9ca:	7ffb      	ldrb	r3, [r7, #31]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d115      	bne.n	800a9fc <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	9300      	str	r3, [sp, #0]
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	2102      	movs	r1, #2
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f000 fafd 	bl	800afda <QSPI_WaitFlagStateUntilTimeout>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800a9e4:	7ffb      	ldrb	r3, [r7, #31]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d108      	bne.n	800a9fc <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	2202      	movs	r2, #2
 800a9f0:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f000 f9e6 	bl	800adc4 <HAL_QSPI_Abort>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa04:	e00a      	b.n	800aa1c <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa0a:	f043 0208 	orr.w	r2, r3, #8
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	77fb      	strb	r3, [r7, #31]
 800aa16:	e001      	b.n	800aa1c <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800aa18:	2302      	movs	r3, #2
 800aa1a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800aa24:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3720      	adds	r7, #32
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b08a      	sub	sp, #40	; 0x28
 800aa32:	af02      	add	r7, sp, #8
 800aa34:	60f8      	str	r0, [r7, #12]
 800aa36:	60b9      	str	r1, [r7, #8]
 800aa38:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800aa3e:	f7fb f8ab 	bl	8005b98 <HAL_GetTick>
 800aa42:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	699b      	ldr	r3, [r3, #24]
 800aa4a:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	3320      	adds	r3, #32
 800aa52:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d101      	bne.n	800aa64 <HAL_QSPI_Receive+0x36>
 800aa60:	2302      	movs	r3, #2
 800aa62:	e082      	b.n	800ab6a <HAL_QSPI_Receive+0x13c>
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d171      	bne.n	800ab5c <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d062      	beq.n	800ab4a <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2222      	movs	r2, #34	; 0x22
 800aa88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	1c5a      	adds	r2, r3, #1
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	1c5a      	adds	r2, r3, #1
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	68ba      	ldr	r2, [r7, #8]
 800aaa8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	695b      	ldr	r3, [r3, #20]
 800aab0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800aabc:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	697a      	ldr	r2, [r7, #20]
 800aac4:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800aac6:	e01c      	b.n	800ab02 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	9300      	str	r3, [sp, #0]
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	2201      	movs	r2, #1
 800aad0:	2106      	movs	r1, #6
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f000 fa81 	bl	800afda <QSPI_WaitFlagStateUntilTimeout>
 800aad8:	4603      	mov	r3, r0
 800aada:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800aadc:	7ffb      	ldrb	r3, [r7, #31]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d114      	bne.n	800ab0c <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae6:	693a      	ldr	r2, [r7, #16]
 800aae8:	7812      	ldrb	r2, [r2, #0]
 800aaea:	b2d2      	uxtb	r2, r2
 800aaec:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf2:	1c5a      	adds	r2, r3, #1
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafc:	1e5a      	subs	r2, r3, #1
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d1de      	bne.n	800aac8 <HAL_QSPI_Receive+0x9a>
 800ab0a:	e000      	b.n	800ab0e <HAL_QSPI_Receive+0xe0>
          break;
 800ab0c:	bf00      	nop
      }

      if (status == HAL_OK)
 800ab0e:	7ffb      	ldrb	r3, [r7, #31]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d115      	bne.n	800ab40 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	9300      	str	r3, [sp, #0]
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	2102      	movs	r1, #2
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f000 fa5b 	bl	800afda <QSPI_WaitFlagStateUntilTimeout>
 800ab24:	4603      	mov	r3, r0
 800ab26:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800ab28:	7ffb      	ldrb	r3, [r7, #31]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d108      	bne.n	800ab40 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2202      	movs	r2, #2
 800ab34:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800ab36:	68f8      	ldr	r0, [r7, #12]
 800ab38:	f000 f944 	bl	800adc4 <HAL_QSPI_Abort>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab48:	e00a      	b.n	800ab60 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab4e:	f043 0208 	orr.w	r2, r3, #8
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	77fb      	strb	r3, [r7, #31]
 800ab5a:	e001      	b.n	800ab60 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2200      	movs	r2, #0
 800ab64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800ab68:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3720      	adds	r7, #32
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b088      	sub	sp, #32
 800ab76:	af02      	add	r7, sp, #8
 800ab78:	60f8      	str	r0, [r7, #12]
 800ab7a:	60b9      	str	r1, [r7, #8]
 800ab7c:	607a      	str	r2, [r7, #4]
 800ab7e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ab80:	f7fb f80a 	bl	8005b98 <HAL_GetTick>
 800ab84:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d101      	bne.n	800ab96 <HAL_QSPI_AutoPolling+0x24>
 800ab92:	2302      	movs	r3, #2
 800ab94:	e060      	b.n	800ac58 <HAL_QSPI_AutoPolling+0xe6>
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d14f      	bne.n	800ac4a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2200      	movs	r2, #0
 800abae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2242      	movs	r2, #66	; 0x42
 800abb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	2200      	movs	r2, #0
 800abc0:	2120      	movs	r1, #32
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f000 fa09 	bl	800afda <QSPI_WaitFlagStateUntilTimeout>
 800abc8:	4603      	mov	r3, r0
 800abca:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800abcc:	7dfb      	ldrb	r3, [r7, #23]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d13d      	bne.n	800ac4e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	6812      	ldr	r2, [r2, #0]
 800abda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	6852      	ldr	r2, [r2, #4]
 800abe4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	6892      	ldr	r2, [r2, #8]
 800abee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	431a      	orrs	r2, r3
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800ac08:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	68da      	ldr	r2, [r3, #12]
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800ac12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ac16:	68b9      	ldr	r1, [r7, #8]
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f000 fa15 	bl	800b048 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	9300      	str	r3, [sp, #0]
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	2201      	movs	r2, #1
 800ac26:	2108      	movs	r1, #8
 800ac28:	68f8      	ldr	r0, [r7, #12]
 800ac2a:	f000 f9d6 	bl	800afda <QSPI_WaitFlagStateUntilTimeout>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800ac32:	7dfb      	ldrb	r3, [r7, #23]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d10a      	bne.n	800ac4e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2208      	movs	r2, #8
 800ac3e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2201      	movs	r2, #1
 800ac44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac48:	e001      	b.n	800ac4e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800ac4a:	2302      	movs	r3, #2
 800ac4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2200      	movs	r2, #0
 800ac52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800ac56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3718      	adds	r7, #24
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b088      	sub	sp, #32
 800ac64:	af02      	add	r7, sp, #8
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ac6c:	f7fa ff94 	bl	8005b98 <HAL_GetTick>
 800ac70:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac78:	b2db      	uxtb	r3, r3
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d101      	bne.n	800ac82 <HAL_QSPI_MemoryMapped+0x22>
 800ac7e:	2302      	movs	r3, #2
 800ac80:	e04c      	b.n	800ad1c <HAL_QSPI_MemoryMapped+0xbc>
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2201      	movs	r2, #1
 800ac86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d13b      	bne.n	800ad0e <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2282      	movs	r2, #130	; 0x82
 800aca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aca8:	9300      	str	r3, [sp, #0]
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	2200      	movs	r2, #0
 800acae:	2120      	movs	r1, #32
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f000 f992 	bl	800afda <QSPI_WaitFlagStateUntilTimeout>
 800acb6:	4603      	mov	r3, r0
 800acb8:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800acba:	7dfb      	ldrb	r3, [r7, #23]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d128      	bne.n	800ad12 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f023 0108 	bic.w	r1, r3, #8
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	685a      	ldr	r2, [r3, #4]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	430a      	orrs	r2, r1
 800acd4:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	2b08      	cmp	r3, #8
 800acdc:	d110      	bne.n	800ad00 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	6812      	ldr	r2, [r2, #0]
 800ace6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2210      	movs	r2, #16
 800acee:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800acfe:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800ad00:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800ad04:	68b9      	ldr	r1, [r7, #8]
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f000 f99e 	bl	800b048 <QSPI_Config>
 800ad0c:	e001      	b.n	800ad12 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800ad0e:	2302      	movs	r3, #2
 800ad10:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800ad1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3718      	adds	r7, #24
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800ad2c:	bf00      	nop
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800ad40:	bf00      	nop
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800ad54:	bf00      	nop
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800ad68:	bf00      	nop
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800ad7c:	bf00      	nop
 800ad7e:	370c      	adds	r7, #12
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800ad90:	bf00      	nop
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800ada4:	bf00      	nop
 800ada6:	370c      	adds	r7, #12
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800adb8:	bf00      	nop
 800adba:	370c      	adds	r7, #12
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b086      	sub	sp, #24
 800adc8:	af02      	add	r7, sp, #8
 800adca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800adcc:	2300      	movs	r3, #0
 800adce:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800add0:	f7fa fee2 	bl	8005b98 <HAL_GetTick>
 800add4:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800addc:	b2db      	uxtb	r3, r3
 800adde:	f003 0302 	and.w	r3, r3, #2
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d056      	beq.n	800ae94 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f003 0304 	and.w	r3, r3, #4
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d017      	beq.n	800ae2c <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f022 0204 	bic.w	r2, r2, #4
 800ae0a:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7fb fdcf 	bl	80069b4 <HAL_DMA_Abort>
 800ae16:	4603      	mov	r3, r0
 800ae18:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800ae1a:	7bfb      	ldrb	r3, [r7, #15]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d005      	beq.n	800ae2c <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae24:	f043 0204 	orr.w	r2, r3, #4
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f042 0202 	orr.w	r2, r2, #2
 800ae3a:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae40:	9300      	str	r3, [sp, #0]
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	2201      	movs	r2, #1
 800ae46:	2102      	movs	r1, #2
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 f8c6 	bl	800afda <QSPI_WaitFlagStateUntilTimeout>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800ae52:	7bfb      	ldrb	r3, [r7, #15]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d10e      	bne.n	800ae76 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2202      	movs	r2, #2
 800ae5e:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae64:	9300      	str	r3, [sp, #0]
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	2120      	movs	r1, #32
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 f8b4 	bl	800afda <QSPI_WaitFlagStateUntilTimeout>
 800ae72:	4603      	mov	r3, r0
 800ae74:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ae76:	7bfb      	ldrb	r3, [r7, #15]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d10b      	bne.n	800ae94 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	695a      	ldr	r2, [r3, #20]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800ae8a:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 800ae94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3710      	adds	r7, #16
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
	...

0800aea0 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	f003 0302 	and.w	r3, r3, #2
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d046      	beq.n	800af4a <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2208      	movs	r2, #8
 800aec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800aeda:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 0304 	and.w	r3, r3, #4
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d01b      	beq.n	800af22 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f022 0204 	bic.w	r2, r2, #4
 800aef8:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aefe:	4a15      	ldr	r2, [pc, #84]	; (800af54 <HAL_QSPI_Abort_IT+0xb4>)
 800af00:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af06:	4618      	mov	r0, r3
 800af08:	f7fb fdc4 	bl	8006a94 <HAL_DMA_Abort_IT>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d01b      	beq.n	800af4a <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2201      	movs	r2, #1
 800af16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7ff ff0c 	bl	800ad38 <HAL_QSPI_AbortCpltCallback>
 800af20:	e013      	b.n	800af4a <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2202      	movs	r2, #2
 800af28:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800af38:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f042 0202 	orr.w	r2, r2, #2
 800af48:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 800af4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3710      	adds	r7, #16
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	0800af75 	.word	0x0800af75

0800af58 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	683a      	ldr	r2, [r7, #0]
 800af66:	649a      	str	r2, [r3, #72]	; 0x48
}
 800af68:	bf00      	nop
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af80:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2200      	movs	r2, #0
 800af86:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2200      	movs	r2, #0
 800af8c:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af94:	b2db      	uxtb	r3, r3
 800af96:	2b08      	cmp	r3, #8
 800af98:	d114      	bne.n	800afc4 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2202      	movs	r2, #2
 800afa0:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800afb0:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f042 0202 	orr.w	r2, r2, #2
 800afc0:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800afc2:	e006      	b.n	800afd2 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2201      	movs	r2, #1
 800afc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800afcc:	68f8      	ldr	r0, [r7, #12]
 800afce:	f7ff fea9 	bl	800ad24 <HAL_QSPI_ErrorCallback>
}
 800afd2:	bf00      	nop
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b084      	sub	sp, #16
 800afde:	af00      	add	r7, sp, #0
 800afe0:	60f8      	str	r0, [r7, #12]
 800afe2:	60b9      	str	r1, [r7, #8]
 800afe4:	603b      	str	r3, [r7, #0]
 800afe6:	4613      	mov	r3, r2
 800afe8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800afea:	e01a      	b.n	800b022 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aff2:	d016      	beq.n	800b022 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aff4:	f7fa fdd0 	bl	8005b98 <HAL_GetTick>
 800aff8:	4602      	mov	r2, r0
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	1ad3      	subs	r3, r2, r3
 800affe:	69ba      	ldr	r2, [r7, #24]
 800b000:	429a      	cmp	r2, r3
 800b002:	d302      	bcc.n	800b00a <QSPI_WaitFlagStateUntilTimeout+0x30>
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d10b      	bne.n	800b022 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2204      	movs	r2, #4
 800b00e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b016:	f043 0201 	orr.w	r2, r3, #1
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	e00e      	b.n	800b040 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	689a      	ldr	r2, [r3, #8]
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	4013      	ands	r3, r2
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	bf14      	ite	ne
 800b030:	2301      	movne	r3, #1
 800b032:	2300      	moveq	r3, #0
 800b034:	b2db      	uxtb	r3, r3
 800b036:	461a      	mov	r2, r3
 800b038:	79fb      	ldrb	r3, [r7, #7]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d1d6      	bne.n	800afec <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3710      	adds	r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d009      	beq.n	800b070 <QSPI_Config+0x28>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b062:	d005      	beq.n	800b070 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	3a01      	subs	r2, #1
 800b06e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	2b00      	cmp	r3, #0
 800b076:	f000 80b9 	beq.w	800b1ec <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	6a1b      	ldr	r3, [r3, #32]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d05f      	beq.n	800b142 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	68ba      	ldr	r2, [r7, #8]
 800b088:	6892      	ldr	r2, [r2, #8]
 800b08a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	69db      	ldr	r3, [r3, #28]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d031      	beq.n	800b0f8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b09c:	431a      	orrs	r2, r3
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0a2:	431a      	orrs	r2, r3
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a8:	431a      	orrs	r2, r3
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	695b      	ldr	r3, [r3, #20]
 800b0ae:	049b      	lsls	r3, r3, #18
 800b0b0:	431a      	orrs	r2, r3
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	431a      	orrs	r2, r3
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	6a1b      	ldr	r3, [r3, #32]
 800b0bc:	431a      	orrs	r2, r3
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	431a      	orrs	r2, r3
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	69db      	ldr	r3, [r3, #28]
 800b0c8:	431a      	orrs	r2, r3
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	699b      	ldr	r3, [r3, #24]
 800b0ce:	431a      	orrs	r2, r3
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	ea42 0103 	orr.w	r1, r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	430a      	orrs	r2, r1
 800b0e0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b0e8:	f000 812e 	beq.w	800b348 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	6852      	ldr	r2, [r2, #4]
 800b0f4:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800b0f6:	e127      	b.n	800b348 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b100:	431a      	orrs	r2, r3
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b106:	431a      	orrs	r2, r3
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10c:	431a      	orrs	r2, r3
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	695b      	ldr	r3, [r3, #20]
 800b112:	049b      	lsls	r3, r3, #18
 800b114:	431a      	orrs	r2, r3
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	431a      	orrs	r2, r3
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	6a1b      	ldr	r3, [r3, #32]
 800b120:	431a      	orrs	r2, r3
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	69db      	ldr	r3, [r3, #28]
 800b126:	431a      	orrs	r2, r3
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	699b      	ldr	r3, [r3, #24]
 800b12c:	431a      	orrs	r2, r3
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	ea42 0103 	orr.w	r1, r2, r3
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	430a      	orrs	r2, r1
 800b13e:	615a      	str	r2, [r3, #20]
}
 800b140:	e102      	b.n	800b348 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	69db      	ldr	r3, [r3, #28]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d02e      	beq.n	800b1a8 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b152:	431a      	orrs	r2, r3
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b158:	431a      	orrs	r2, r3
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15e:	431a      	orrs	r2, r3
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	695b      	ldr	r3, [r3, #20]
 800b164:	049b      	lsls	r3, r3, #18
 800b166:	431a      	orrs	r2, r3
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	6a1b      	ldr	r3, [r3, #32]
 800b16c:	431a      	orrs	r2, r3
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	431a      	orrs	r2, r3
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	69db      	ldr	r3, [r3, #28]
 800b178:	431a      	orrs	r2, r3
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	699b      	ldr	r3, [r3, #24]
 800b17e:	431a      	orrs	r2, r3
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	ea42 0103 	orr.w	r1, r2, r3
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	430a      	orrs	r2, r1
 800b190:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b198:	f000 80d6 	beq.w	800b348 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	68ba      	ldr	r2, [r7, #8]
 800b1a2:	6852      	ldr	r2, [r2, #4]
 800b1a4:	619a      	str	r2, [r3, #24]
}
 800b1a6:	e0cf      	b.n	800b348 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1b0:	431a      	orrs	r2, r3
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1b6:	431a      	orrs	r2, r3
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1bc:	431a      	orrs	r2, r3
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	695b      	ldr	r3, [r3, #20]
 800b1c2:	049b      	lsls	r3, r3, #18
 800b1c4:	431a      	orrs	r2, r3
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	6a1b      	ldr	r3, [r3, #32]
 800b1ca:	431a      	orrs	r2, r3
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	69db      	ldr	r3, [r3, #28]
 800b1d0:	431a      	orrs	r2, r3
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	699b      	ldr	r3, [r3, #24]
 800b1d6:	431a      	orrs	r2, r3
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	ea42 0103 	orr.w	r1, r2, r3
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	430a      	orrs	r2, r1
 800b1e8:	615a      	str	r2, [r3, #20]
}
 800b1ea:	e0ad      	b.n	800b348 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	6a1b      	ldr	r3, [r3, #32]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d058      	beq.n	800b2a6 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	68ba      	ldr	r2, [r7, #8]
 800b1fa:	6892      	ldr	r2, [r2, #8]
 800b1fc:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	69db      	ldr	r3, [r3, #28]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d02d      	beq.n	800b262 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b20e:	431a      	orrs	r2, r3
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b214:	431a      	orrs	r2, r3
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21a:	431a      	orrs	r2, r3
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	695b      	ldr	r3, [r3, #20]
 800b220:	049b      	lsls	r3, r3, #18
 800b222:	431a      	orrs	r2, r3
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	691b      	ldr	r3, [r3, #16]
 800b228:	431a      	orrs	r2, r3
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	6a1b      	ldr	r3, [r3, #32]
 800b22e:	431a      	orrs	r2, r3
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	431a      	orrs	r2, r3
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	69db      	ldr	r3, [r3, #28]
 800b23a:	431a      	orrs	r2, r3
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	ea42 0103 	orr.w	r1, r2, r3
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	430a      	orrs	r2, r1
 800b24c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b254:	d078      	beq.n	800b348 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68ba      	ldr	r2, [r7, #8]
 800b25c:	6852      	ldr	r2, [r2, #4]
 800b25e:	619a      	str	r2, [r3, #24]
}
 800b260:	e072      	b.n	800b348 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b26a:	431a      	orrs	r2, r3
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b270:	431a      	orrs	r2, r3
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b276:	431a      	orrs	r2, r3
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	695b      	ldr	r3, [r3, #20]
 800b27c:	049b      	lsls	r3, r3, #18
 800b27e:	431a      	orrs	r2, r3
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	691b      	ldr	r3, [r3, #16]
 800b284:	431a      	orrs	r2, r3
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	6a1b      	ldr	r3, [r3, #32]
 800b28a:	431a      	orrs	r2, r3
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	69db      	ldr	r3, [r3, #28]
 800b290:	431a      	orrs	r2, r3
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	699b      	ldr	r3, [r3, #24]
 800b296:	ea42 0103 	orr.w	r1, r2, r3
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	430a      	orrs	r2, r1
 800b2a2:	615a      	str	r2, [r3, #20]
}
 800b2a4:	e050      	b.n	800b348 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	69db      	ldr	r3, [r3, #28]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d02a      	beq.n	800b304 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b6:	431a      	orrs	r2, r3
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2bc:	431a      	orrs	r2, r3
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c2:	431a      	orrs	r2, r3
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	695b      	ldr	r3, [r3, #20]
 800b2c8:	049b      	lsls	r3, r3, #18
 800b2ca:	431a      	orrs	r2, r3
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	6a1b      	ldr	r3, [r3, #32]
 800b2d0:	431a      	orrs	r2, r3
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	431a      	orrs	r2, r3
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	69db      	ldr	r3, [r3, #28]
 800b2dc:	431a      	orrs	r2, r3
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	699b      	ldr	r3, [r3, #24]
 800b2e2:	ea42 0103 	orr.w	r1, r2, r3
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	430a      	orrs	r2, r1
 800b2ee:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b2f6:	d027      	beq.n	800b348 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	6852      	ldr	r2, [r2, #4]
 800b300:	619a      	str	r2, [r3, #24]
}
 800b302:	e021      	b.n	800b348 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d01d      	beq.n	800b348 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b314:	431a      	orrs	r2, r3
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b31a:	431a      	orrs	r2, r3
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b320:	431a      	orrs	r2, r3
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	695b      	ldr	r3, [r3, #20]
 800b326:	049b      	lsls	r3, r3, #18
 800b328:	431a      	orrs	r2, r3
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	6a1b      	ldr	r3, [r3, #32]
 800b32e:	431a      	orrs	r2, r3
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	69db      	ldr	r3, [r3, #28]
 800b334:	431a      	orrs	r2, r3
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	699b      	ldr	r3, [r3, #24]
 800b33a:	ea42 0103 	orr.w	r1, r2, r3
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	430a      	orrs	r2, r1
 800b346:	615a      	str	r2, [r3, #20]
}
 800b348:	bf00      	nop
 800b34a:	3714      	adds	r7, #20
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b086      	sub	sp, #24
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b35c:	2300      	movs	r3, #0
 800b35e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d101      	bne.n	800b36a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	e291      	b.n	800b88e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f003 0301 	and.w	r3, r3, #1
 800b372:	2b00      	cmp	r3, #0
 800b374:	f000 8087 	beq.w	800b486 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b378:	4b96      	ldr	r3, [pc, #600]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	f003 030c 	and.w	r3, r3, #12
 800b380:	2b04      	cmp	r3, #4
 800b382:	d00c      	beq.n	800b39e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b384:	4b93      	ldr	r3, [pc, #588]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	f003 030c 	and.w	r3, r3, #12
 800b38c:	2b08      	cmp	r3, #8
 800b38e:	d112      	bne.n	800b3b6 <HAL_RCC_OscConfig+0x62>
 800b390:	4b90      	ldr	r3, [pc, #576]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b398:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b39c:	d10b      	bne.n	800b3b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b39e:	4b8d      	ldr	r3, [pc, #564]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d06c      	beq.n	800b484 <HAL_RCC_OscConfig+0x130>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d168      	bne.n	800b484 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e26b      	b.n	800b88e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3be:	d106      	bne.n	800b3ce <HAL_RCC_OscConfig+0x7a>
 800b3c0:	4b84      	ldr	r3, [pc, #528]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a83      	ldr	r2, [pc, #524]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b3c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b3ca:	6013      	str	r3, [r2, #0]
 800b3cc:	e02e      	b.n	800b42c <HAL_RCC_OscConfig+0xd8>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d10c      	bne.n	800b3f0 <HAL_RCC_OscConfig+0x9c>
 800b3d6:	4b7f      	ldr	r3, [pc, #508]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a7e      	ldr	r2, [pc, #504]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b3dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3e0:	6013      	str	r3, [r2, #0]
 800b3e2:	4b7c      	ldr	r3, [pc, #496]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a7b      	ldr	r2, [pc, #492]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b3e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b3ec:	6013      	str	r3, [r2, #0]
 800b3ee:	e01d      	b.n	800b42c <HAL_RCC_OscConfig+0xd8>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b3f8:	d10c      	bne.n	800b414 <HAL_RCC_OscConfig+0xc0>
 800b3fa:	4b76      	ldr	r3, [pc, #472]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a75      	ldr	r2, [pc, #468]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b404:	6013      	str	r3, [r2, #0]
 800b406:	4b73      	ldr	r3, [pc, #460]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a72      	ldr	r2, [pc, #456]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b40c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b410:	6013      	str	r3, [r2, #0]
 800b412:	e00b      	b.n	800b42c <HAL_RCC_OscConfig+0xd8>
 800b414:	4b6f      	ldr	r3, [pc, #444]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a6e      	ldr	r2, [pc, #440]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b41a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b41e:	6013      	str	r3, [r2, #0]
 800b420:	4b6c      	ldr	r3, [pc, #432]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a6b      	ldr	r2, [pc, #428]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b42a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d013      	beq.n	800b45c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b434:	f7fa fbb0 	bl	8005b98 <HAL_GetTick>
 800b438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b43a:	e008      	b.n	800b44e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b43c:	f7fa fbac 	bl	8005b98 <HAL_GetTick>
 800b440:	4602      	mov	r2, r0
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	1ad3      	subs	r3, r2, r3
 800b446:	2b64      	cmp	r3, #100	; 0x64
 800b448:	d901      	bls.n	800b44e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b44a:	2303      	movs	r3, #3
 800b44c:	e21f      	b.n	800b88e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b44e:	4b61      	ldr	r3, [pc, #388]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b456:	2b00      	cmp	r3, #0
 800b458:	d0f0      	beq.n	800b43c <HAL_RCC_OscConfig+0xe8>
 800b45a:	e014      	b.n	800b486 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b45c:	f7fa fb9c 	bl	8005b98 <HAL_GetTick>
 800b460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b462:	e008      	b.n	800b476 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b464:	f7fa fb98 	bl	8005b98 <HAL_GetTick>
 800b468:	4602      	mov	r2, r0
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	1ad3      	subs	r3, r2, r3
 800b46e:	2b64      	cmp	r3, #100	; 0x64
 800b470:	d901      	bls.n	800b476 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b472:	2303      	movs	r3, #3
 800b474:	e20b      	b.n	800b88e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b476:	4b57      	ldr	r3, [pc, #348]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1f0      	bne.n	800b464 <HAL_RCC_OscConfig+0x110>
 800b482:	e000      	b.n	800b486 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 0302 	and.w	r3, r3, #2
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d069      	beq.n	800b566 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b492:	4b50      	ldr	r3, [pc, #320]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	f003 030c 	and.w	r3, r3, #12
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00b      	beq.n	800b4b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b49e:	4b4d      	ldr	r3, [pc, #308]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	f003 030c 	and.w	r3, r3, #12
 800b4a6:	2b08      	cmp	r3, #8
 800b4a8:	d11c      	bne.n	800b4e4 <HAL_RCC_OscConfig+0x190>
 800b4aa:	4b4a      	ldr	r3, [pc, #296]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d116      	bne.n	800b4e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b4b6:	4b47      	ldr	r3, [pc, #284]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f003 0302 	and.w	r3, r3, #2
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d005      	beq.n	800b4ce <HAL_RCC_OscConfig+0x17a>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d001      	beq.n	800b4ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e1df      	b.n	800b88e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4ce:	4b41      	ldr	r3, [pc, #260]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	00db      	lsls	r3, r3, #3
 800b4dc:	493d      	ldr	r1, [pc, #244]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b4e2:	e040      	b.n	800b566 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d023      	beq.n	800b534 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b4ec:	4b39      	ldr	r3, [pc, #228]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a38      	ldr	r2, [pc, #224]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b4f2:	f043 0301 	orr.w	r3, r3, #1
 800b4f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4f8:	f7fa fb4e 	bl	8005b98 <HAL_GetTick>
 800b4fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b4fe:	e008      	b.n	800b512 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b500:	f7fa fb4a 	bl	8005b98 <HAL_GetTick>
 800b504:	4602      	mov	r2, r0
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	1ad3      	subs	r3, r2, r3
 800b50a:	2b02      	cmp	r3, #2
 800b50c:	d901      	bls.n	800b512 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b50e:	2303      	movs	r3, #3
 800b510:	e1bd      	b.n	800b88e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b512:	4b30      	ldr	r3, [pc, #192]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f003 0302 	and.w	r3, r3, #2
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d0f0      	beq.n	800b500 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b51e:	4b2d      	ldr	r3, [pc, #180]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	691b      	ldr	r3, [r3, #16]
 800b52a:	00db      	lsls	r3, r3, #3
 800b52c:	4929      	ldr	r1, [pc, #164]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b52e:	4313      	orrs	r3, r2
 800b530:	600b      	str	r3, [r1, #0]
 800b532:	e018      	b.n	800b566 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b534:	4b27      	ldr	r3, [pc, #156]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a26      	ldr	r2, [pc, #152]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b53a:	f023 0301 	bic.w	r3, r3, #1
 800b53e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b540:	f7fa fb2a 	bl	8005b98 <HAL_GetTick>
 800b544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b546:	e008      	b.n	800b55a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b548:	f7fa fb26 	bl	8005b98 <HAL_GetTick>
 800b54c:	4602      	mov	r2, r0
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	1ad3      	subs	r3, r2, r3
 800b552:	2b02      	cmp	r3, #2
 800b554:	d901      	bls.n	800b55a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b556:	2303      	movs	r3, #3
 800b558:	e199      	b.n	800b88e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b55a:	4b1e      	ldr	r3, [pc, #120]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f003 0302 	and.w	r3, r3, #2
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1f0      	bne.n	800b548 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f003 0308 	and.w	r3, r3, #8
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d038      	beq.n	800b5e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	695b      	ldr	r3, [r3, #20]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d019      	beq.n	800b5ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b57a:	4b16      	ldr	r3, [pc, #88]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b57c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b57e:	4a15      	ldr	r2, [pc, #84]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b580:	f043 0301 	orr.w	r3, r3, #1
 800b584:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b586:	f7fa fb07 	bl	8005b98 <HAL_GetTick>
 800b58a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b58c:	e008      	b.n	800b5a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b58e:	f7fa fb03 	bl	8005b98 <HAL_GetTick>
 800b592:	4602      	mov	r2, r0
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	1ad3      	subs	r3, r2, r3
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d901      	bls.n	800b5a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b59c:	2303      	movs	r3, #3
 800b59e:	e176      	b.n	800b88e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b5a0:	4b0c      	ldr	r3, [pc, #48]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b5a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5a4:	f003 0302 	and.w	r3, r3, #2
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d0f0      	beq.n	800b58e <HAL_RCC_OscConfig+0x23a>
 800b5ac:	e01a      	b.n	800b5e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b5ae:	4b09      	ldr	r3, [pc, #36]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b5b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5b2:	4a08      	ldr	r2, [pc, #32]	; (800b5d4 <HAL_RCC_OscConfig+0x280>)
 800b5b4:	f023 0301 	bic.w	r3, r3, #1
 800b5b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5ba:	f7fa faed 	bl	8005b98 <HAL_GetTick>
 800b5be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b5c0:	e00a      	b.n	800b5d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b5c2:	f7fa fae9 	bl	8005b98 <HAL_GetTick>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	2b02      	cmp	r3, #2
 800b5ce:	d903      	bls.n	800b5d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b5d0:	2303      	movs	r3, #3
 800b5d2:	e15c      	b.n	800b88e <HAL_RCC_OscConfig+0x53a>
 800b5d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b5d8:	4b91      	ldr	r3, [pc, #580]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b5da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5dc:	f003 0302 	and.w	r3, r3, #2
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d1ee      	bne.n	800b5c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f003 0304 	and.w	r3, r3, #4
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f000 80a4 	beq.w	800b73a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b5f2:	4b8b      	ldr	r3, [pc, #556]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d10d      	bne.n	800b61a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b5fe:	4b88      	ldr	r3, [pc, #544]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b602:	4a87      	ldr	r2, [pc, #540]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b608:	6413      	str	r3, [r2, #64]	; 0x40
 800b60a:	4b85      	ldr	r3, [pc, #532]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b612:	60bb      	str	r3, [r7, #8]
 800b614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b616:	2301      	movs	r3, #1
 800b618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b61a:	4b82      	ldr	r3, [pc, #520]	; (800b824 <HAL_RCC_OscConfig+0x4d0>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b622:	2b00      	cmp	r3, #0
 800b624:	d118      	bne.n	800b658 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b626:	4b7f      	ldr	r3, [pc, #508]	; (800b824 <HAL_RCC_OscConfig+0x4d0>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4a7e      	ldr	r2, [pc, #504]	; (800b824 <HAL_RCC_OscConfig+0x4d0>)
 800b62c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b632:	f7fa fab1 	bl	8005b98 <HAL_GetTick>
 800b636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b638:	e008      	b.n	800b64c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b63a:	f7fa faad 	bl	8005b98 <HAL_GetTick>
 800b63e:	4602      	mov	r2, r0
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	1ad3      	subs	r3, r2, r3
 800b644:	2b64      	cmp	r3, #100	; 0x64
 800b646:	d901      	bls.n	800b64c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b648:	2303      	movs	r3, #3
 800b64a:	e120      	b.n	800b88e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b64c:	4b75      	ldr	r3, [pc, #468]	; (800b824 <HAL_RCC_OscConfig+0x4d0>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b654:	2b00      	cmp	r3, #0
 800b656:	d0f0      	beq.n	800b63a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d106      	bne.n	800b66e <HAL_RCC_OscConfig+0x31a>
 800b660:	4b6f      	ldr	r3, [pc, #444]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b664:	4a6e      	ldr	r2, [pc, #440]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b666:	f043 0301 	orr.w	r3, r3, #1
 800b66a:	6713      	str	r3, [r2, #112]	; 0x70
 800b66c:	e02d      	b.n	800b6ca <HAL_RCC_OscConfig+0x376>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d10c      	bne.n	800b690 <HAL_RCC_OscConfig+0x33c>
 800b676:	4b6a      	ldr	r3, [pc, #424]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b67a:	4a69      	ldr	r2, [pc, #420]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b67c:	f023 0301 	bic.w	r3, r3, #1
 800b680:	6713      	str	r3, [r2, #112]	; 0x70
 800b682:	4b67      	ldr	r3, [pc, #412]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b686:	4a66      	ldr	r2, [pc, #408]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b688:	f023 0304 	bic.w	r3, r3, #4
 800b68c:	6713      	str	r3, [r2, #112]	; 0x70
 800b68e:	e01c      	b.n	800b6ca <HAL_RCC_OscConfig+0x376>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	2b05      	cmp	r3, #5
 800b696:	d10c      	bne.n	800b6b2 <HAL_RCC_OscConfig+0x35e>
 800b698:	4b61      	ldr	r3, [pc, #388]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b69a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b69c:	4a60      	ldr	r2, [pc, #384]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b69e:	f043 0304 	orr.w	r3, r3, #4
 800b6a2:	6713      	str	r3, [r2, #112]	; 0x70
 800b6a4:	4b5e      	ldr	r3, [pc, #376]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b6a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6a8:	4a5d      	ldr	r2, [pc, #372]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b6aa:	f043 0301 	orr.w	r3, r3, #1
 800b6ae:	6713      	str	r3, [r2, #112]	; 0x70
 800b6b0:	e00b      	b.n	800b6ca <HAL_RCC_OscConfig+0x376>
 800b6b2:	4b5b      	ldr	r3, [pc, #364]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b6b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6b6:	4a5a      	ldr	r2, [pc, #360]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b6b8:	f023 0301 	bic.w	r3, r3, #1
 800b6bc:	6713      	str	r3, [r2, #112]	; 0x70
 800b6be:	4b58      	ldr	r3, [pc, #352]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b6c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6c2:	4a57      	ldr	r2, [pc, #348]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b6c4:	f023 0304 	bic.w	r3, r3, #4
 800b6c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d015      	beq.n	800b6fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6d2:	f7fa fa61 	bl	8005b98 <HAL_GetTick>
 800b6d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b6d8:	e00a      	b.n	800b6f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6da:	f7fa fa5d 	bl	8005b98 <HAL_GetTick>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	1ad3      	subs	r3, r2, r3
 800b6e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d901      	bls.n	800b6f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b6ec:	2303      	movs	r3, #3
 800b6ee:	e0ce      	b.n	800b88e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b6f0:	4b4b      	ldr	r3, [pc, #300]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b6f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6f4:	f003 0302 	and.w	r3, r3, #2
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d0ee      	beq.n	800b6da <HAL_RCC_OscConfig+0x386>
 800b6fc:	e014      	b.n	800b728 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6fe:	f7fa fa4b 	bl	8005b98 <HAL_GetTick>
 800b702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b704:	e00a      	b.n	800b71c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b706:	f7fa fa47 	bl	8005b98 <HAL_GetTick>
 800b70a:	4602      	mov	r2, r0
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	1ad3      	subs	r3, r2, r3
 800b710:	f241 3288 	movw	r2, #5000	; 0x1388
 800b714:	4293      	cmp	r3, r2
 800b716:	d901      	bls.n	800b71c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b718:	2303      	movs	r3, #3
 800b71a:	e0b8      	b.n	800b88e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b71c:	4b40      	ldr	r3, [pc, #256]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b71e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b720:	f003 0302 	and.w	r3, r3, #2
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1ee      	bne.n	800b706 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b728:	7dfb      	ldrb	r3, [r7, #23]
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d105      	bne.n	800b73a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b72e:	4b3c      	ldr	r3, [pc, #240]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b732:	4a3b      	ldr	r2, [pc, #236]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b738:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	699b      	ldr	r3, [r3, #24]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	f000 80a4 	beq.w	800b88c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b744:	4b36      	ldr	r3, [pc, #216]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	f003 030c 	and.w	r3, r3, #12
 800b74c:	2b08      	cmp	r3, #8
 800b74e:	d06b      	beq.n	800b828 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	699b      	ldr	r3, [r3, #24]
 800b754:	2b02      	cmp	r3, #2
 800b756:	d149      	bne.n	800b7ec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b758:	4b31      	ldr	r3, [pc, #196]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a30      	ldr	r2, [pc, #192]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b75e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b764:	f7fa fa18 	bl	8005b98 <HAL_GetTick>
 800b768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b76a:	e008      	b.n	800b77e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b76c:	f7fa fa14 	bl	8005b98 <HAL_GetTick>
 800b770:	4602      	mov	r2, r0
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	2b02      	cmp	r3, #2
 800b778:	d901      	bls.n	800b77e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b77a:	2303      	movs	r3, #3
 800b77c:	e087      	b.n	800b88e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b77e:	4b28      	ldr	r3, [pc, #160]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b786:	2b00      	cmp	r3, #0
 800b788:	d1f0      	bne.n	800b76c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	69da      	ldr	r2, [r3, #28]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6a1b      	ldr	r3, [r3, #32]
 800b792:	431a      	orrs	r2, r3
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b798:	019b      	lsls	r3, r3, #6
 800b79a:	431a      	orrs	r2, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7a0:	085b      	lsrs	r3, r3, #1
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	041b      	lsls	r3, r3, #16
 800b7a6:	431a      	orrs	r2, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ac:	061b      	lsls	r3, r3, #24
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	4a1b      	ldr	r2, [pc, #108]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b7b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b7b6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b7b8:	4b19      	ldr	r3, [pc, #100]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4a18      	ldr	r2, [pc, #96]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b7be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b7c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7c4:	f7fa f9e8 	bl	8005b98 <HAL_GetTick>
 800b7c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b7ca:	e008      	b.n	800b7de <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7cc:	f7fa f9e4 	bl	8005b98 <HAL_GetTick>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	1ad3      	subs	r3, r2, r3
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d901      	bls.n	800b7de <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800b7da:	2303      	movs	r3, #3
 800b7dc:	e057      	b.n	800b88e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b7de:	4b10      	ldr	r3, [pc, #64]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d0f0      	beq.n	800b7cc <HAL_RCC_OscConfig+0x478>
 800b7ea:	e04f      	b.n	800b88c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b7ec:	4b0c      	ldr	r3, [pc, #48]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4a0b      	ldr	r2, [pc, #44]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b7f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b7f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7f8:	f7fa f9ce 	bl	8005b98 <HAL_GetTick>
 800b7fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b7fe:	e008      	b.n	800b812 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b800:	f7fa f9ca 	bl	8005b98 <HAL_GetTick>
 800b804:	4602      	mov	r2, r0
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	1ad3      	subs	r3, r2, r3
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	d901      	bls.n	800b812 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800b80e:	2303      	movs	r3, #3
 800b810:	e03d      	b.n	800b88e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b812:	4b03      	ldr	r3, [pc, #12]	; (800b820 <HAL_RCC_OscConfig+0x4cc>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d1f0      	bne.n	800b800 <HAL_RCC_OscConfig+0x4ac>
 800b81e:	e035      	b.n	800b88c <HAL_RCC_OscConfig+0x538>
 800b820:	40023800 	.word	0x40023800
 800b824:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b828:	4b1b      	ldr	r3, [pc, #108]	; (800b898 <HAL_RCC_OscConfig+0x544>)
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	699b      	ldr	r3, [r3, #24]
 800b832:	2b01      	cmp	r3, #1
 800b834:	d028      	beq.n	800b888 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b840:	429a      	cmp	r2, r3
 800b842:	d121      	bne.n	800b888 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b84e:	429a      	cmp	r2, r3
 800b850:	d11a      	bne.n	800b888 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b852:	68fa      	ldr	r2, [r7, #12]
 800b854:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b858:	4013      	ands	r3, r2
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b85e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b860:	4293      	cmp	r3, r2
 800b862:	d111      	bne.n	800b888 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b86e:	085b      	lsrs	r3, r3, #1
 800b870:	3b01      	subs	r3, #1
 800b872:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b874:	429a      	cmp	r2, r3
 800b876:	d107      	bne.n	800b888 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b882:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b884:	429a      	cmp	r2, r3
 800b886:	d001      	beq.n	800b88c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800b888:	2301      	movs	r3, #1
 800b88a:	e000      	b.n	800b88e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3718      	adds	r7, #24
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	40023800 	.word	0x40023800

0800b89c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d101      	bne.n	800b8b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e0d0      	b.n	800ba56 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b8b4:	4b6a      	ldr	r3, [pc, #424]	; (800ba60 <HAL_RCC_ClockConfig+0x1c4>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f003 030f 	and.w	r3, r3, #15
 800b8bc:	683a      	ldr	r2, [r7, #0]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d910      	bls.n	800b8e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b8c2:	4b67      	ldr	r3, [pc, #412]	; (800ba60 <HAL_RCC_ClockConfig+0x1c4>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f023 020f 	bic.w	r2, r3, #15
 800b8ca:	4965      	ldr	r1, [pc, #404]	; (800ba60 <HAL_RCC_ClockConfig+0x1c4>)
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b8d2:	4b63      	ldr	r3, [pc, #396]	; (800ba60 <HAL_RCC_ClockConfig+0x1c4>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f003 030f 	and.w	r3, r3, #15
 800b8da:	683a      	ldr	r2, [r7, #0]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d001      	beq.n	800b8e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	e0b8      	b.n	800ba56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f003 0302 	and.w	r3, r3, #2
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d020      	beq.n	800b932 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f003 0304 	and.w	r3, r3, #4
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d005      	beq.n	800b908 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b8fc:	4b59      	ldr	r3, [pc, #356]	; (800ba64 <HAL_RCC_ClockConfig+0x1c8>)
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	4a58      	ldr	r2, [pc, #352]	; (800ba64 <HAL_RCC_ClockConfig+0x1c8>)
 800b902:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b906:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f003 0308 	and.w	r3, r3, #8
 800b910:	2b00      	cmp	r3, #0
 800b912:	d005      	beq.n	800b920 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b914:	4b53      	ldr	r3, [pc, #332]	; (800ba64 <HAL_RCC_ClockConfig+0x1c8>)
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	4a52      	ldr	r2, [pc, #328]	; (800ba64 <HAL_RCC_ClockConfig+0x1c8>)
 800b91a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b91e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b920:	4b50      	ldr	r3, [pc, #320]	; (800ba64 <HAL_RCC_ClockConfig+0x1c8>)
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	494d      	ldr	r1, [pc, #308]	; (800ba64 <HAL_RCC_ClockConfig+0x1c8>)
 800b92e:	4313      	orrs	r3, r2
 800b930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f003 0301 	and.w	r3, r3, #1
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d040      	beq.n	800b9c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	2b01      	cmp	r3, #1
 800b944:	d107      	bne.n	800b956 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b946:	4b47      	ldr	r3, [pc, #284]	; (800ba64 <HAL_RCC_ClockConfig+0x1c8>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d115      	bne.n	800b97e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b952:	2301      	movs	r3, #1
 800b954:	e07f      	b.n	800ba56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	2b02      	cmp	r3, #2
 800b95c:	d107      	bne.n	800b96e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b95e:	4b41      	ldr	r3, [pc, #260]	; (800ba64 <HAL_RCC_ClockConfig+0x1c8>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b966:	2b00      	cmp	r3, #0
 800b968:	d109      	bne.n	800b97e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	e073      	b.n	800ba56 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b96e:	4b3d      	ldr	r3, [pc, #244]	; (800ba64 <HAL_RCC_ClockConfig+0x1c8>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f003 0302 	and.w	r3, r3, #2
 800b976:	2b00      	cmp	r3, #0
 800b978:	d101      	bne.n	800b97e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b97a:	2301      	movs	r3, #1
 800b97c:	e06b      	b.n	800ba56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b97e:	4b39      	ldr	r3, [pc, #228]	; (800ba64 <HAL_RCC_ClockConfig+0x1c8>)
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	f023 0203 	bic.w	r2, r3, #3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	4936      	ldr	r1, [pc, #216]	; (800ba64 <HAL_RCC_ClockConfig+0x1c8>)
 800b98c:	4313      	orrs	r3, r2
 800b98e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b990:	f7fa f902 	bl	8005b98 <HAL_GetTick>
 800b994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b996:	e00a      	b.n	800b9ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b998:	f7fa f8fe 	bl	8005b98 <HAL_GetTick>
 800b99c:	4602      	mov	r2, r0
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	1ad3      	subs	r3, r2, r3
 800b9a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d901      	bls.n	800b9ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b9aa:	2303      	movs	r3, #3
 800b9ac:	e053      	b.n	800ba56 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b9ae:	4b2d      	ldr	r3, [pc, #180]	; (800ba64 <HAL_RCC_ClockConfig+0x1c8>)
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	f003 020c 	and.w	r2, r3, #12
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d1eb      	bne.n	800b998 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b9c0:	4b27      	ldr	r3, [pc, #156]	; (800ba60 <HAL_RCC_ClockConfig+0x1c4>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f003 030f 	and.w	r3, r3, #15
 800b9c8:	683a      	ldr	r2, [r7, #0]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d210      	bcs.n	800b9f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b9ce:	4b24      	ldr	r3, [pc, #144]	; (800ba60 <HAL_RCC_ClockConfig+0x1c4>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f023 020f 	bic.w	r2, r3, #15
 800b9d6:	4922      	ldr	r1, [pc, #136]	; (800ba60 <HAL_RCC_ClockConfig+0x1c4>)
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9de:	4b20      	ldr	r3, [pc, #128]	; (800ba60 <HAL_RCC_ClockConfig+0x1c4>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f003 030f 	and.w	r3, r3, #15
 800b9e6:	683a      	ldr	r2, [r7, #0]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d001      	beq.n	800b9f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e032      	b.n	800ba56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f003 0304 	and.w	r3, r3, #4
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d008      	beq.n	800ba0e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b9fc:	4b19      	ldr	r3, [pc, #100]	; (800ba64 <HAL_RCC_ClockConfig+0x1c8>)
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	4916      	ldr	r1, [pc, #88]	; (800ba64 <HAL_RCC_ClockConfig+0x1c8>)
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f003 0308 	and.w	r3, r3, #8
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d009      	beq.n	800ba2e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ba1a:	4b12      	ldr	r3, [pc, #72]	; (800ba64 <HAL_RCC_ClockConfig+0x1c8>)
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	691b      	ldr	r3, [r3, #16]
 800ba26:	00db      	lsls	r3, r3, #3
 800ba28:	490e      	ldr	r1, [pc, #56]	; (800ba64 <HAL_RCC_ClockConfig+0x1c8>)
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ba2e:	f000 f821 	bl	800ba74 <HAL_RCC_GetSysClockFreq>
 800ba32:	4602      	mov	r2, r0
 800ba34:	4b0b      	ldr	r3, [pc, #44]	; (800ba64 <HAL_RCC_ClockConfig+0x1c8>)
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	091b      	lsrs	r3, r3, #4
 800ba3a:	f003 030f 	and.w	r3, r3, #15
 800ba3e:	490a      	ldr	r1, [pc, #40]	; (800ba68 <HAL_RCC_ClockConfig+0x1cc>)
 800ba40:	5ccb      	ldrb	r3, [r1, r3]
 800ba42:	fa22 f303 	lsr.w	r3, r2, r3
 800ba46:	4a09      	ldr	r2, [pc, #36]	; (800ba6c <HAL_RCC_ClockConfig+0x1d0>)
 800ba48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ba4a:	4b09      	ldr	r3, [pc, #36]	; (800ba70 <HAL_RCC_ClockConfig+0x1d4>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7f7 ff40 	bl	80038d4 <HAL_InitTick>

  return HAL_OK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3710      	adds	r7, #16
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	40023c00 	.word	0x40023c00
 800ba64:	40023800 	.word	0x40023800
 800ba68:	08013748 	.word	0x08013748
 800ba6c:	20000008 	.word	0x20000008
 800ba70:	20000024 	.word	0x20000024

0800ba74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ba74:	b5b0      	push	{r4, r5, r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	6079      	str	r1, [r7, #4]
 800ba7e:	2100      	movs	r1, #0
 800ba80:	60f9      	str	r1, [r7, #12]
 800ba82:	2100      	movs	r1, #0
 800ba84:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800ba86:	2100      	movs	r1, #0
 800ba88:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ba8a:	4952      	ldr	r1, [pc, #328]	; (800bbd4 <HAL_RCC_GetSysClockFreq+0x160>)
 800ba8c:	6889      	ldr	r1, [r1, #8]
 800ba8e:	f001 010c 	and.w	r1, r1, #12
 800ba92:	2908      	cmp	r1, #8
 800ba94:	d00d      	beq.n	800bab2 <HAL_RCC_GetSysClockFreq+0x3e>
 800ba96:	2908      	cmp	r1, #8
 800ba98:	f200 8094 	bhi.w	800bbc4 <HAL_RCC_GetSysClockFreq+0x150>
 800ba9c:	2900      	cmp	r1, #0
 800ba9e:	d002      	beq.n	800baa6 <HAL_RCC_GetSysClockFreq+0x32>
 800baa0:	2904      	cmp	r1, #4
 800baa2:	d003      	beq.n	800baac <HAL_RCC_GetSysClockFreq+0x38>
 800baa4:	e08e      	b.n	800bbc4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800baa6:	4b4c      	ldr	r3, [pc, #304]	; (800bbd8 <HAL_RCC_GetSysClockFreq+0x164>)
 800baa8:	60bb      	str	r3, [r7, #8]
      break;
 800baaa:	e08e      	b.n	800bbca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800baac:	4b4b      	ldr	r3, [pc, #300]	; (800bbdc <HAL_RCC_GetSysClockFreq+0x168>)
 800baae:	60bb      	str	r3, [r7, #8]
      break;
 800bab0:	e08b      	b.n	800bbca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bab2:	4948      	ldr	r1, [pc, #288]	; (800bbd4 <HAL_RCC_GetSysClockFreq+0x160>)
 800bab4:	6849      	ldr	r1, [r1, #4]
 800bab6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800baba:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800babc:	4945      	ldr	r1, [pc, #276]	; (800bbd4 <HAL_RCC_GetSysClockFreq+0x160>)
 800babe:	6849      	ldr	r1, [r1, #4]
 800bac0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800bac4:	2900      	cmp	r1, #0
 800bac6:	d024      	beq.n	800bb12 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bac8:	4942      	ldr	r1, [pc, #264]	; (800bbd4 <HAL_RCC_GetSysClockFreq+0x160>)
 800baca:	6849      	ldr	r1, [r1, #4]
 800bacc:	0989      	lsrs	r1, r1, #6
 800bace:	4608      	mov	r0, r1
 800bad0:	f04f 0100 	mov.w	r1, #0
 800bad4:	f240 14ff 	movw	r4, #511	; 0x1ff
 800bad8:	f04f 0500 	mov.w	r5, #0
 800badc:	ea00 0204 	and.w	r2, r0, r4
 800bae0:	ea01 0305 	and.w	r3, r1, r5
 800bae4:	493d      	ldr	r1, [pc, #244]	; (800bbdc <HAL_RCC_GetSysClockFreq+0x168>)
 800bae6:	fb01 f003 	mul.w	r0, r1, r3
 800baea:	2100      	movs	r1, #0
 800baec:	fb01 f102 	mul.w	r1, r1, r2
 800baf0:	1844      	adds	r4, r0, r1
 800baf2:	493a      	ldr	r1, [pc, #232]	; (800bbdc <HAL_RCC_GetSysClockFreq+0x168>)
 800baf4:	fba2 0101 	umull	r0, r1, r2, r1
 800baf8:	1863      	adds	r3, r4, r1
 800bafa:	4619      	mov	r1, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	461a      	mov	r2, r3
 800bb00:	f04f 0300 	mov.w	r3, #0
 800bb04:	f7f5 f870 	bl	8000be8 <__aeabi_uldivmod>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	4613      	mov	r3, r2
 800bb0e:	60fb      	str	r3, [r7, #12]
 800bb10:	e04a      	b.n	800bba8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bb12:	4b30      	ldr	r3, [pc, #192]	; (800bbd4 <HAL_RCC_GetSysClockFreq+0x160>)
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	099b      	lsrs	r3, r3, #6
 800bb18:	461a      	mov	r2, r3
 800bb1a:	f04f 0300 	mov.w	r3, #0
 800bb1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bb22:	f04f 0100 	mov.w	r1, #0
 800bb26:	ea02 0400 	and.w	r4, r2, r0
 800bb2a:	ea03 0501 	and.w	r5, r3, r1
 800bb2e:	4620      	mov	r0, r4
 800bb30:	4629      	mov	r1, r5
 800bb32:	f04f 0200 	mov.w	r2, #0
 800bb36:	f04f 0300 	mov.w	r3, #0
 800bb3a:	014b      	lsls	r3, r1, #5
 800bb3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bb40:	0142      	lsls	r2, r0, #5
 800bb42:	4610      	mov	r0, r2
 800bb44:	4619      	mov	r1, r3
 800bb46:	1b00      	subs	r0, r0, r4
 800bb48:	eb61 0105 	sbc.w	r1, r1, r5
 800bb4c:	f04f 0200 	mov.w	r2, #0
 800bb50:	f04f 0300 	mov.w	r3, #0
 800bb54:	018b      	lsls	r3, r1, #6
 800bb56:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bb5a:	0182      	lsls	r2, r0, #6
 800bb5c:	1a12      	subs	r2, r2, r0
 800bb5e:	eb63 0301 	sbc.w	r3, r3, r1
 800bb62:	f04f 0000 	mov.w	r0, #0
 800bb66:	f04f 0100 	mov.w	r1, #0
 800bb6a:	00d9      	lsls	r1, r3, #3
 800bb6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bb70:	00d0      	lsls	r0, r2, #3
 800bb72:	4602      	mov	r2, r0
 800bb74:	460b      	mov	r3, r1
 800bb76:	1912      	adds	r2, r2, r4
 800bb78:	eb45 0303 	adc.w	r3, r5, r3
 800bb7c:	f04f 0000 	mov.w	r0, #0
 800bb80:	f04f 0100 	mov.w	r1, #0
 800bb84:	0299      	lsls	r1, r3, #10
 800bb86:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800bb8a:	0290      	lsls	r0, r2, #10
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	460b      	mov	r3, r1
 800bb90:	4610      	mov	r0, r2
 800bb92:	4619      	mov	r1, r3
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	461a      	mov	r2, r3
 800bb98:	f04f 0300 	mov.w	r3, #0
 800bb9c:	f7f5 f824 	bl	8000be8 <__aeabi_uldivmod>
 800bba0:	4602      	mov	r2, r0
 800bba2:	460b      	mov	r3, r1
 800bba4:	4613      	mov	r3, r2
 800bba6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800bba8:	4b0a      	ldr	r3, [pc, #40]	; (800bbd4 <HAL_RCC_GetSysClockFreq+0x160>)
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	0c1b      	lsrs	r3, r3, #16
 800bbae:	f003 0303 	and.w	r3, r3, #3
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	005b      	lsls	r3, r3, #1
 800bbb6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbc0:	60bb      	str	r3, [r7, #8]
      break;
 800bbc2:	e002      	b.n	800bbca <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bbc4:	4b04      	ldr	r3, [pc, #16]	; (800bbd8 <HAL_RCC_GetSysClockFreq+0x164>)
 800bbc6:	60bb      	str	r3, [r7, #8]
      break;
 800bbc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bbca:	68bb      	ldr	r3, [r7, #8]
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3710      	adds	r7, #16
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bdb0      	pop	{r4, r5, r7, pc}
 800bbd4:	40023800 	.word	0x40023800
 800bbd8:	00f42400 	.word	0x00f42400
 800bbdc:	017d7840 	.word	0x017d7840

0800bbe0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bbe4:	4b03      	ldr	r3, [pc, #12]	; (800bbf4 <HAL_RCC_GetHCLKFreq+0x14>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop
 800bbf4:	20000008 	.word	0x20000008

0800bbf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bbfc:	f7ff fff0 	bl	800bbe0 <HAL_RCC_GetHCLKFreq>
 800bc00:	4602      	mov	r2, r0
 800bc02:	4b05      	ldr	r3, [pc, #20]	; (800bc18 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	0a9b      	lsrs	r3, r3, #10
 800bc08:	f003 0307 	and.w	r3, r3, #7
 800bc0c:	4903      	ldr	r1, [pc, #12]	; (800bc1c <HAL_RCC_GetPCLK1Freq+0x24>)
 800bc0e:	5ccb      	ldrb	r3, [r1, r3]
 800bc10:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	40023800 	.word	0x40023800
 800bc1c:	08013758 	.word	0x08013758

0800bc20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bc24:	f7ff ffdc 	bl	800bbe0 <HAL_RCC_GetHCLKFreq>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	4b05      	ldr	r3, [pc, #20]	; (800bc40 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bc2c:	689b      	ldr	r3, [r3, #8]
 800bc2e:	0b5b      	lsrs	r3, r3, #13
 800bc30:	f003 0307 	and.w	r3, r3, #7
 800bc34:	4903      	ldr	r1, [pc, #12]	; (800bc44 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bc36:	5ccb      	ldrb	r3, [r1, r3]
 800bc38:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	40023800 	.word	0x40023800
 800bc44:	08013758 	.word	0x08013758

0800bc48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	220f      	movs	r2, #15
 800bc56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bc58:	4b12      	ldr	r3, [pc, #72]	; (800bca4 <HAL_RCC_GetClockConfig+0x5c>)
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	f003 0203 	and.w	r2, r3, #3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800bc64:	4b0f      	ldr	r3, [pc, #60]	; (800bca4 <HAL_RCC_GetClockConfig+0x5c>)
 800bc66:	689b      	ldr	r3, [r3, #8]
 800bc68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800bc70:	4b0c      	ldr	r3, [pc, #48]	; (800bca4 <HAL_RCC_GetClockConfig+0x5c>)
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800bc7c:	4b09      	ldr	r3, [pc, #36]	; (800bca4 <HAL_RCC_GetClockConfig+0x5c>)
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	08db      	lsrs	r3, r3, #3
 800bc82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bc8a:	4b07      	ldr	r3, [pc, #28]	; (800bca8 <HAL_RCC_GetClockConfig+0x60>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f003 020f 	and.w	r2, r3, #15
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	601a      	str	r2, [r3, #0]
}
 800bc96:	bf00      	nop
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop
 800bca4:	40023800 	.word	0x40023800
 800bca8:	40023c00 	.word	0x40023c00

0800bcac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b088      	sub	sp, #32
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f003 0301 	and.w	r3, r3, #1
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d012      	beq.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bcd4:	4b69      	ldr	r3, [pc, #420]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	4a68      	ldr	r2, [pc, #416]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bcda:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bcde:	6093      	str	r3, [r2, #8]
 800bce0:	4b66      	ldr	r3, [pc, #408]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bce2:	689a      	ldr	r2, [r3, #8]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bce8:	4964      	ldr	r1, [pc, #400]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bcea:	4313      	orrs	r3, r2
 800bcec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d101      	bne.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d017      	beq.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bd06:	4b5d      	ldr	r3, [pc, #372]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd14:	4959      	ldr	r1, [pc, #356]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd16:	4313      	orrs	r3, r2
 800bd18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd24:	d101      	bne.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800bd26:	2301      	movs	r3, #1
 800bd28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d101      	bne.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800bd32:	2301      	movs	r3, #1
 800bd34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d017      	beq.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bd42:	4b4e      	ldr	r3, [pc, #312]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd50:	494a      	ldr	r1, [pc, #296]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd52:	4313      	orrs	r3, r2
 800bd54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd60:	d101      	bne.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800bd62:	2301      	movs	r3, #1
 800bd64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d101      	bne.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d001      	beq.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f003 0320 	and.w	r3, r3, #32
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	f000 808b 	beq.w	800bea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bd90:	4b3a      	ldr	r3, [pc, #232]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd94:	4a39      	ldr	r2, [pc, #228]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd9a:	6413      	str	r3, [r2, #64]	; 0x40
 800bd9c:	4b37      	ldr	r3, [pc, #220]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bda4:	60bb      	str	r3, [r7, #8]
 800bda6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bda8:	4b35      	ldr	r3, [pc, #212]	; (800be80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a34      	ldr	r2, [pc, #208]	; (800be80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bdae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdb4:	f7f9 fef0 	bl	8005b98 <HAL_GetTick>
 800bdb8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bdba:	e008      	b.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bdbc:	f7f9 feec 	bl	8005b98 <HAL_GetTick>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	1ad3      	subs	r3, r2, r3
 800bdc6:	2b64      	cmp	r3, #100	; 0x64
 800bdc8:	d901      	bls.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800bdca:	2303      	movs	r3, #3
 800bdcc:	e357      	b.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bdce:	4b2c      	ldr	r3, [pc, #176]	; (800be80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d0f0      	beq.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bdda:	4b28      	ldr	r3, [pc, #160]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bde2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d035      	beq.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdf2:	693a      	ldr	r2, [r7, #16]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d02e      	beq.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bdf8:	4b20      	ldr	r3, [pc, #128]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bdfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be00:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800be02:	4b1e      	ldr	r3, [pc, #120]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be06:	4a1d      	ldr	r2, [pc, #116]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be0c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800be0e:	4b1b      	ldr	r3, [pc, #108]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be12:	4a1a      	ldr	r2, [pc, #104]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800be1a:	4a18      	ldr	r2, [pc, #96]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800be20:	4b16      	ldr	r3, [pc, #88]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be24:	f003 0301 	and.w	r3, r3, #1
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d114      	bne.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be2c:	f7f9 feb4 	bl	8005b98 <HAL_GetTick>
 800be30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be32:	e00a      	b.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800be34:	f7f9 feb0 	bl	8005b98 <HAL_GetTick>
 800be38:	4602      	mov	r2, r0
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	1ad3      	subs	r3, r2, r3
 800be3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800be42:	4293      	cmp	r3, r2
 800be44:	d901      	bls.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800be46:	2303      	movs	r3, #3
 800be48:	e319      	b.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be4a:	4b0c      	ldr	r3, [pc, #48]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be4e:	f003 0302 	and.w	r3, r3, #2
 800be52:	2b00      	cmp	r3, #0
 800be54:	d0ee      	beq.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be62:	d111      	bne.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800be64:	4b05      	ldr	r3, [pc, #20]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be66:	689b      	ldr	r3, [r3, #8]
 800be68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800be70:	4b04      	ldr	r3, [pc, #16]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800be72:	400b      	ands	r3, r1
 800be74:	4901      	ldr	r1, [pc, #4]	; (800be7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be76:	4313      	orrs	r3, r2
 800be78:	608b      	str	r3, [r1, #8]
 800be7a:	e00b      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800be7c:	40023800 	.word	0x40023800
 800be80:	40007000 	.word	0x40007000
 800be84:	0ffffcff 	.word	0x0ffffcff
 800be88:	4bb1      	ldr	r3, [pc, #708]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	4ab0      	ldr	r2, [pc, #704]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800be8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800be92:	6093      	str	r3, [r2, #8]
 800be94:	4bae      	ldr	r3, [pc, #696]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800be96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bea0:	49ab      	ldr	r1, [pc, #684]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bea2:	4313      	orrs	r3, r2
 800bea4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f003 0310 	and.w	r3, r3, #16
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d010      	beq.n	800bed4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800beb2:	4ba7      	ldr	r3, [pc, #668]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800beb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800beb8:	4aa5      	ldr	r2, [pc, #660]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800beba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bebe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800bec2:	4ba3      	ldr	r3, [pc, #652]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bec4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800becc:	49a0      	ldr	r1, [pc, #640]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bece:	4313      	orrs	r3, r2
 800bed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d00a      	beq.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bee0:	4b9b      	ldr	r3, [pc, #620]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bee6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800beee:	4998      	ldr	r1, [pc, #608]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bef0:	4313      	orrs	r3, r2
 800bef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d00a      	beq.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bf02:	4b93      	ldr	r3, [pc, #588]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bf04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf10:	498f      	ldr	r1, [pc, #572]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bf12:	4313      	orrs	r3, r2
 800bf14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d00a      	beq.n	800bf3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bf24:	4b8a      	ldr	r3, [pc, #552]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bf26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf32:	4987      	ldr	r1, [pc, #540]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bf34:	4313      	orrs	r3, r2
 800bf36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00a      	beq.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bf46:	4b82      	ldr	r3, [pc, #520]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bf48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf54:	497e      	ldr	r1, [pc, #504]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bf56:	4313      	orrs	r3, r2
 800bf58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d00a      	beq.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bf68:	4b79      	ldr	r3, [pc, #484]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bf6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf6e:	f023 0203 	bic.w	r2, r3, #3
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf76:	4976      	ldr	r1, [pc, #472]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00a      	beq.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bf8a:	4b71      	ldr	r3, [pc, #452]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bf8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf90:	f023 020c 	bic.w	r2, r3, #12
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf98:	496d      	ldr	r1, [pc, #436]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bf9a:	4313      	orrs	r3, r2
 800bf9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d00a      	beq.n	800bfc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bfac:	4b68      	ldr	r3, [pc, #416]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bfae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfb2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfba:	4965      	ldr	r1, [pc, #404]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00a      	beq.n	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bfce:	4b60      	ldr	r3, [pc, #384]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bfd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfd4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfdc:	495c      	ldr	r1, [pc, #368]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00a      	beq.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bff0:	4b57      	ldr	r3, [pc, #348]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bff6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bffe:	4954      	ldr	r1, [pc, #336]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c000:	4313      	orrs	r3, r2
 800c002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d00a      	beq.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c012:	4b4f      	ldr	r3, [pc, #316]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c018:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c020:	494b      	ldr	r1, [pc, #300]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c022:	4313      	orrs	r3, r2
 800c024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c030:	2b00      	cmp	r3, #0
 800c032:	d00a      	beq.n	800c04a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c034:	4b46      	ldr	r3, [pc, #280]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c03a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c042:	4943      	ldr	r1, [pc, #268]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c044:	4313      	orrs	r3, r2
 800c046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00a      	beq.n	800c06c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c056:	4b3e      	ldr	r3, [pc, #248]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c05c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c064:	493a      	ldr	r1, [pc, #232]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c066:	4313      	orrs	r3, r2
 800c068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00a      	beq.n	800c08e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c078:	4b35      	ldr	r3, [pc, #212]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c07a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c07e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c086:	4932      	ldr	r1, [pc, #200]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c088:	4313      	orrs	r3, r2
 800c08a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c096:	2b00      	cmp	r3, #0
 800c098:	d011      	beq.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c09a:	4b2d      	ldr	r3, [pc, #180]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c09c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0a8:	4929      	ldr	r1, [pc, #164]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0b8:	d101      	bne.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f003 0308 	and.w	r3, r3, #8
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d001      	beq.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00a      	beq.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c0da:	4b1d      	ldr	r3, [pc, #116]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c0dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0e8:	4919      	ldr	r1, [pc, #100]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d00b      	beq.n	800c114 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c0fc:	4b14      	ldr	r3, [pc, #80]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c0fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c102:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c10c:	4910      	ldr	r1, [pc, #64]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c10e:	4313      	orrs	r3, r2
 800c110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	2b01      	cmp	r3, #1
 800c118:	d006      	beq.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c122:	2b00      	cmp	r3, #0
 800c124:	f000 80d9 	beq.w	800c2da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c128:	4b09      	ldr	r3, [pc, #36]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a08      	ldr	r2, [pc, #32]	; (800c150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c12e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c132:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c134:	f7f9 fd30 	bl	8005b98 <HAL_GetTick>
 800c138:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c13a:	e00b      	b.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c13c:	f7f9 fd2c 	bl	8005b98 <HAL_GetTick>
 800c140:	4602      	mov	r2, r0
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	1ad3      	subs	r3, r2, r3
 800c146:	2b64      	cmp	r3, #100	; 0x64
 800c148:	d904      	bls.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c14a:	2303      	movs	r3, #3
 800c14c:	e197      	b.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800c14e:	bf00      	nop
 800c150:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c154:	4b6c      	ldr	r3, [pc, #432]	; (800c308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d1ed      	bne.n	800c13c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f003 0301 	and.w	r3, r3, #1
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d021      	beq.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c170:	2b00      	cmp	r3, #0
 800c172:	d11d      	bne.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c174:	4b64      	ldr	r3, [pc, #400]	; (800c308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c17a:	0c1b      	lsrs	r3, r3, #16
 800c17c:	f003 0303 	and.w	r3, r3, #3
 800c180:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c182:	4b61      	ldr	r3, [pc, #388]	; (800c308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c188:	0e1b      	lsrs	r3, r3, #24
 800c18a:	f003 030f 	and.w	r3, r3, #15
 800c18e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	019a      	lsls	r2, r3, #6
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	041b      	lsls	r3, r3, #16
 800c19a:	431a      	orrs	r2, r3
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	061b      	lsls	r3, r3, #24
 800c1a0:	431a      	orrs	r2, r3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	071b      	lsls	r3, r3, #28
 800c1a8:	4957      	ldr	r1, [pc, #348]	; (800c308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d004      	beq.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1c4:	d00a      	beq.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d02e      	beq.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1da:	d129      	bne.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c1dc:	4b4a      	ldr	r3, [pc, #296]	; (800c308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c1de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1e2:	0c1b      	lsrs	r3, r3, #16
 800c1e4:	f003 0303 	and.w	r3, r3, #3
 800c1e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c1ea:	4b47      	ldr	r3, [pc, #284]	; (800c308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c1ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1f0:	0f1b      	lsrs	r3, r3, #28
 800c1f2:	f003 0307 	and.w	r3, r3, #7
 800c1f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	019a      	lsls	r2, r3, #6
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	041b      	lsls	r3, r3, #16
 800c202:	431a      	orrs	r2, r3
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	061b      	lsls	r3, r3, #24
 800c20a:	431a      	orrs	r2, r3
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	071b      	lsls	r3, r3, #28
 800c210:	493d      	ldr	r1, [pc, #244]	; (800c308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c212:	4313      	orrs	r3, r2
 800c214:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c218:	4b3b      	ldr	r3, [pc, #236]	; (800c308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c21a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c21e:	f023 021f 	bic.w	r2, r3, #31
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c226:	3b01      	subs	r3, #1
 800c228:	4937      	ldr	r1, [pc, #220]	; (800c308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c22a:	4313      	orrs	r3, r2
 800c22c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d01d      	beq.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c23c:	4b32      	ldr	r3, [pc, #200]	; (800c308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c23e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c242:	0e1b      	lsrs	r3, r3, #24
 800c244:	f003 030f 	and.w	r3, r3, #15
 800c248:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c24a:	4b2f      	ldr	r3, [pc, #188]	; (800c308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c24c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c250:	0f1b      	lsrs	r3, r3, #28
 800c252:	f003 0307 	and.w	r3, r3, #7
 800c256:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	019a      	lsls	r2, r3, #6
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	691b      	ldr	r3, [r3, #16]
 800c262:	041b      	lsls	r3, r3, #16
 800c264:	431a      	orrs	r2, r3
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	061b      	lsls	r3, r3, #24
 800c26a:	431a      	orrs	r2, r3
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	071b      	lsls	r3, r3, #28
 800c270:	4925      	ldr	r1, [pc, #148]	; (800c308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c272:	4313      	orrs	r3, r2
 800c274:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c280:	2b00      	cmp	r3, #0
 800c282:	d011      	beq.n	800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	019a      	lsls	r2, r3, #6
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	691b      	ldr	r3, [r3, #16]
 800c28e:	041b      	lsls	r3, r3, #16
 800c290:	431a      	orrs	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	061b      	lsls	r3, r3, #24
 800c298:	431a      	orrs	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	071b      	lsls	r3, r3, #28
 800c2a0:	4919      	ldr	r1, [pc, #100]	; (800c308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c2a8:	4b17      	ldr	r3, [pc, #92]	; (800c308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4a16      	ldr	r2, [pc, #88]	; (800c308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c2ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c2b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2b4:	f7f9 fc70 	bl	8005b98 <HAL_GetTick>
 800c2b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c2ba:	e008      	b.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c2bc:	f7f9 fc6c 	bl	8005b98 <HAL_GetTick>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	1ad3      	subs	r3, r2, r3
 800c2c6:	2b64      	cmp	r3, #100	; 0x64
 800c2c8:	d901      	bls.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c2ca:	2303      	movs	r3, #3
 800c2cc:	e0d7      	b.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c2ce:	4b0e      	ldr	r3, [pc, #56]	; (800c308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d0f0      	beq.n	800c2bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c2da:	69bb      	ldr	r3, [r7, #24]
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	f040 80cd 	bne.w	800c47c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c2e2:	4b09      	ldr	r3, [pc, #36]	; (800c308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4a08      	ldr	r2, [pc, #32]	; (800c308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c2e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2ee:	f7f9 fc53 	bl	8005b98 <HAL_GetTick>
 800c2f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c2f4:	e00a      	b.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c2f6:	f7f9 fc4f 	bl	8005b98 <HAL_GetTick>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	1ad3      	subs	r3, r2, r3
 800c300:	2b64      	cmp	r3, #100	; 0x64
 800c302:	d903      	bls.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c304:	2303      	movs	r3, #3
 800c306:	e0ba      	b.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800c308:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c30c:	4b5e      	ldr	r3, [pc, #376]	; (800c488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c318:	d0ed      	beq.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c322:	2b00      	cmp	r3, #0
 800c324:	d003      	beq.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0x682>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d009      	beq.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c336:	2b00      	cmp	r3, #0
 800c338:	d02e      	beq.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d12a      	bne.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c342:	4b51      	ldr	r3, [pc, #324]	; (800c488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c348:	0c1b      	lsrs	r3, r3, #16
 800c34a:	f003 0303 	and.w	r3, r3, #3
 800c34e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c350:	4b4d      	ldr	r3, [pc, #308]	; (800c488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c356:	0f1b      	lsrs	r3, r3, #28
 800c358:	f003 0307 	and.w	r3, r3, #7
 800c35c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	695b      	ldr	r3, [r3, #20]
 800c362:	019a      	lsls	r2, r3, #6
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	041b      	lsls	r3, r3, #16
 800c368:	431a      	orrs	r2, r3
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	699b      	ldr	r3, [r3, #24]
 800c36e:	061b      	lsls	r3, r3, #24
 800c370:	431a      	orrs	r2, r3
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	071b      	lsls	r3, r3, #28
 800c376:	4944      	ldr	r1, [pc, #272]	; (800c488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c378:	4313      	orrs	r3, r2
 800c37a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c37e:	4b42      	ldr	r3, [pc, #264]	; (800c488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c384:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c38c:	3b01      	subs	r3, #1
 800c38e:	021b      	lsls	r3, r3, #8
 800c390:	493d      	ldr	r1, [pc, #244]	; (800c488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c392:	4313      	orrs	r3, r2
 800c394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d022      	beq.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3ac:	d11d      	bne.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c3ae:	4b36      	ldr	r3, [pc, #216]	; (800c488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c3b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3b4:	0e1b      	lsrs	r3, r3, #24
 800c3b6:	f003 030f 	and.w	r3, r3, #15
 800c3ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c3bc:	4b32      	ldr	r3, [pc, #200]	; (800c488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3c2:	0f1b      	lsrs	r3, r3, #28
 800c3c4:	f003 0307 	and.w	r3, r3, #7
 800c3c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	695b      	ldr	r3, [r3, #20]
 800c3ce:	019a      	lsls	r2, r3, #6
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6a1b      	ldr	r3, [r3, #32]
 800c3d4:	041b      	lsls	r3, r3, #16
 800c3d6:	431a      	orrs	r2, r3
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	061b      	lsls	r3, r3, #24
 800c3dc:	431a      	orrs	r2, r3
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	071b      	lsls	r3, r3, #28
 800c3e2:	4929      	ldr	r1, [pc, #164]	; (800c488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f003 0308 	and.w	r3, r3, #8
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d028      	beq.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c3f6:	4b24      	ldr	r3, [pc, #144]	; (800c488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c3f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3fc:	0e1b      	lsrs	r3, r3, #24
 800c3fe:	f003 030f 	and.w	r3, r3, #15
 800c402:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c404:	4b20      	ldr	r3, [pc, #128]	; (800c488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c40a:	0c1b      	lsrs	r3, r3, #16
 800c40c:	f003 0303 	and.w	r3, r3, #3
 800c410:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	695b      	ldr	r3, [r3, #20]
 800c416:	019a      	lsls	r2, r3, #6
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	041b      	lsls	r3, r3, #16
 800c41c:	431a      	orrs	r2, r3
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	061b      	lsls	r3, r3, #24
 800c422:	431a      	orrs	r2, r3
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	69db      	ldr	r3, [r3, #28]
 800c428:	071b      	lsls	r3, r3, #28
 800c42a:	4917      	ldr	r1, [pc, #92]	; (800c488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c42c:	4313      	orrs	r3, r2
 800c42e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c432:	4b15      	ldr	r3, [pc, #84]	; (800c488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c440:	4911      	ldr	r1, [pc, #68]	; (800c488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c442:	4313      	orrs	r3, r2
 800c444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c448:	4b0f      	ldr	r3, [pc, #60]	; (800c488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a0e      	ldr	r2, [pc, #56]	; (800c488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c44e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c454:	f7f9 fba0 	bl	8005b98 <HAL_GetTick>
 800c458:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c45a:	e008      	b.n	800c46e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c45c:	f7f9 fb9c 	bl	8005b98 <HAL_GetTick>
 800c460:	4602      	mov	r2, r0
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	1ad3      	subs	r3, r2, r3
 800c466:	2b64      	cmp	r3, #100	; 0x64
 800c468:	d901      	bls.n	800c46e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c46a:	2303      	movs	r3, #3
 800c46c:	e007      	b.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c46e:	4b06      	ldr	r3, [pc, #24]	; (800c488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c47a:	d1ef      	bne.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800c47c:	2300      	movs	r3, #0
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3720      	adds	r7, #32
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	40023800 	.word	0x40023800

0800c48c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b087      	sub	sp, #28
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c494:	2300      	movs	r3, #0
 800c496:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800c498:	2300      	movs	r3, #0
 800c49a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800c49c:	2300      	movs	r3, #0
 800c49e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c4aa:	f040 808c 	bne.w	800c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c4ae:	4b95      	ldr	r3, [pc, #596]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c4b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4b4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c4bc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c4c4:	d07c      	beq.n	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c4cc:	d87d      	bhi.n	800c5ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d004      	beq.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c4da:	d039      	beq.n	800c550 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c4dc:	e075      	b.n	800c5ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c4de:	4b89      	ldr	r3, [pc, #548]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d108      	bne.n	800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c4ea:	4b86      	ldr	r3, [pc, #536]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4f2:	4a85      	ldr	r2, [pc, #532]	; (800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c4f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4f8:	613b      	str	r3, [r7, #16]
 800c4fa:	e007      	b.n	800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c4fc:	4b81      	ldr	r3, [pc, #516]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c504:	4a81      	ldr	r2, [pc, #516]	; (800c70c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c506:	fbb2 f3f3 	udiv	r3, r2, r3
 800c50a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c50c:	4b7d      	ldr	r3, [pc, #500]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c50e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c512:	0e1b      	lsrs	r3, r3, #24
 800c514:	f003 030f 	and.w	r3, r3, #15
 800c518:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c51a:	4b7a      	ldr	r3, [pc, #488]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c51c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c520:	099b      	lsrs	r3, r3, #6
 800c522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c526:	693a      	ldr	r2, [r7, #16]
 800c528:	fb02 f203 	mul.w	r2, r2, r3
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c532:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c534:	4b73      	ldr	r3, [pc, #460]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c53a:	0a1b      	lsrs	r3, r3, #8
 800c53c:	f003 031f 	and.w	r3, r3, #31
 800c540:	3301      	adds	r3, #1
 800c542:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c544:	697a      	ldr	r2, [r7, #20]
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	fbb2 f3f3 	udiv	r3, r2, r3
 800c54c:	617b      	str	r3, [r7, #20]
        break;
 800c54e:	e03d      	b.n	800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c550:	4b6c      	ldr	r3, [pc, #432]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d108      	bne.n	800c56e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c55c:	4b69      	ldr	r3, [pc, #420]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c564:	4a68      	ldr	r2, [pc, #416]	; (800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c566:	fbb2 f3f3 	udiv	r3, r2, r3
 800c56a:	613b      	str	r3, [r7, #16]
 800c56c:	e007      	b.n	800c57e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c56e:	4b65      	ldr	r3, [pc, #404]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c576:	4a65      	ldr	r2, [pc, #404]	; (800c70c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c578:	fbb2 f3f3 	udiv	r3, r2, r3
 800c57c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c57e:	4b61      	ldr	r3, [pc, #388]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c584:	0e1b      	lsrs	r3, r3, #24
 800c586:	f003 030f 	and.w	r3, r3, #15
 800c58a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c58c:	4b5d      	ldr	r3, [pc, #372]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c58e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c592:	099b      	lsrs	r3, r3, #6
 800c594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c598:	693a      	ldr	r2, [r7, #16]
 800c59a:	fb02 f203 	mul.w	r2, r2, r3
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5a4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c5a6:	4b57      	ldr	r3, [pc, #348]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c5a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5ac:	f003 031f 	and.w	r3, r3, #31
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c5b4:	697a      	ldr	r2, [r7, #20]
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5bc:	617b      	str	r3, [r7, #20]
        break;
 800c5be:	e005      	b.n	800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c5c0:	4b53      	ldr	r3, [pc, #332]	; (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800c5c2:	617b      	str	r3, [r7, #20]
        break;
 800c5c4:	e002      	b.n	800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800c5c6:	bf00      	nop
 800c5c8:	e000      	b.n	800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800c5ca:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5d2:	f040 808c 	bne.w	800c6ee <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c5d6:	4b4b      	ldr	r3, [pc, #300]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c5d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5dc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c5e4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c5ec:	d07c      	beq.n	800c6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c5f4:	d87d      	bhi.n	800c6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d004      	beq.n	800c606 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c602:	d039      	beq.n	800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c604:	e075      	b.n	800c6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c606:	4b3f      	ldr	r3, [pc, #252]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d108      	bne.n	800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c612:	4b3c      	ldr	r3, [pc, #240]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c614:	685b      	ldr	r3, [r3, #4]
 800c616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c61a:	4a3b      	ldr	r2, [pc, #236]	; (800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c61c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c620:	613b      	str	r3, [r7, #16]
 800c622:	e007      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c624:	4b37      	ldr	r3, [pc, #220]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c62c:	4a37      	ldr	r2, [pc, #220]	; (800c70c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c62e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c632:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c634:	4b33      	ldr	r3, [pc, #204]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c63a:	0e1b      	lsrs	r3, r3, #24
 800c63c:	f003 030f 	and.w	r3, r3, #15
 800c640:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c642:	4b30      	ldr	r3, [pc, #192]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c648:	099b      	lsrs	r3, r3, #6
 800c64a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c64e:	693a      	ldr	r2, [r7, #16]
 800c650:	fb02 f203 	mul.w	r2, r2, r3
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	fbb2 f3f3 	udiv	r3, r2, r3
 800c65a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c65c:	4b29      	ldr	r3, [pc, #164]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c65e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c662:	0a1b      	lsrs	r3, r3, #8
 800c664:	f003 031f 	and.w	r3, r3, #31
 800c668:	3301      	adds	r3, #1
 800c66a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c66c:	697a      	ldr	r2, [r7, #20]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	fbb2 f3f3 	udiv	r3, r2, r3
 800c674:	617b      	str	r3, [r7, #20]
        break;
 800c676:	e03d      	b.n	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c678:	4b22      	ldr	r3, [pc, #136]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c680:	2b00      	cmp	r3, #0
 800c682:	d108      	bne.n	800c696 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c684:	4b1f      	ldr	r3, [pc, #124]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c68c:	4a1e      	ldr	r2, [pc, #120]	; (800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c68e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c692:	613b      	str	r3, [r7, #16]
 800c694:	e007      	b.n	800c6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c696:	4b1b      	ldr	r3, [pc, #108]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c69e:	4a1b      	ldr	r2, [pc, #108]	; (800c70c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c6a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6a4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c6a6:	4b17      	ldr	r3, [pc, #92]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c6a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6ac:	0e1b      	lsrs	r3, r3, #24
 800c6ae:	f003 030f 	and.w	r3, r3, #15
 800c6b2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c6b4:	4b13      	ldr	r3, [pc, #76]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c6b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6ba:	099b      	lsrs	r3, r3, #6
 800c6bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6c0:	693a      	ldr	r2, [r7, #16]
 800c6c2:	fb02 f203 	mul.w	r2, r2, r3
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6cc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c6ce:	4b0d      	ldr	r3, [pc, #52]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c6d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6d4:	f003 031f 	and.w	r3, r3, #31
 800c6d8:	3301      	adds	r3, #1
 800c6da:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c6dc:	697a      	ldr	r2, [r7, #20]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6e4:	617b      	str	r3, [r7, #20]
        break;
 800c6e6:	e005      	b.n	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c6e8:	4b09      	ldr	r3, [pc, #36]	; (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800c6ea:	617b      	str	r3, [r7, #20]
        break;
 800c6ec:	e002      	b.n	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800c6ee:	bf00      	nop
 800c6f0:	e000      	b.n	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800c6f2:	bf00      	nop

  return frequency;
 800c6f4:	697b      	ldr	r3, [r7, #20]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	371c      	adds	r7, #28
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	40023800 	.word	0x40023800
 800c708:	00f42400 	.word	0x00f42400
 800c70c:	017d7840 	.word	0x017d7840
 800c710:	00bb8000 	.word	0x00bb8000

0800c714 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d101      	bne.n	800c726 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800c722:	2301      	movs	r3, #1
 800c724:	e081      	b.n	800c82a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	7f5b      	ldrb	r3, [r3, #29]
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d105      	bne.n	800c73c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f7f6 fce2 	bl	8003100 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2202      	movs	r2, #2
 800c740:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	22ca      	movs	r2, #202	; 0xca
 800c748:	625a      	str	r2, [r3, #36]	; 0x24
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2253      	movs	r2, #83	; 0x53
 800c750:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 fb16 	bl	800cd84 <RTC_EnterInitMode>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d008      	beq.n	800c770 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	22ff      	movs	r2, #255	; 0xff
 800c764:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2204      	movs	r2, #4
 800c76a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800c76c:	2301      	movs	r3, #1
 800c76e:	e05c      	b.n	800c82a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	6899      	ldr	r1, [r3, #8]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	4b2e      	ldr	r3, [pc, #184]	; (800c834 <HAL_RTC_Init+0x120>)
 800c77c:	400b      	ands	r3, r1
 800c77e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	6899      	ldr	r1, [r3, #8]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	685a      	ldr	r2, [r3, #4]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	691b      	ldr	r3, [r3, #16]
 800c78e:	431a      	orrs	r2, r3
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	695b      	ldr	r3, [r3, #20]
 800c794:	431a      	orrs	r2, r3
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	430a      	orrs	r2, r1
 800c79c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	68d2      	ldr	r2, [r2, #12]
 800c7a6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	6919      	ldr	r1, [r3, #16]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	041a      	lsls	r2, r3, #16
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	430a      	orrs	r2, r1
 800c7ba:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	68da      	ldr	r2, [r3, #12]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c7ca:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	689b      	ldr	r3, [r3, #8]
 800c7d2:	f003 0320 	and.w	r3, r3, #32
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d10e      	bne.n	800c7f8 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 faaa 	bl	800cd34 <HAL_RTC_WaitForSynchro>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d008      	beq.n	800c7f8 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	22ff      	movs	r2, #255	; 0xff
 800c7ec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2204      	movs	r2, #4
 800c7f2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	e018      	b.n	800c82a <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f022 0208 	bic.w	r2, r2, #8
 800c806:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	699a      	ldr	r2, [r3, #24]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	430a      	orrs	r2, r1
 800c818:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	22ff      	movs	r2, #255	; 0xff
 800c820:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2201      	movs	r2, #1
 800c826:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800c828:	2300      	movs	r3, #0
  }
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3708      	adds	r7, #8
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	ff8fffbf 	.word	0xff8fffbf

0800c838 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c838:	b590      	push	{r4, r7, lr}
 800c83a:	b087      	sub	sp, #28
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800c844:	2300      	movs	r3, #0
 800c846:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	7f1b      	ldrb	r3, [r3, #28]
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d101      	bne.n	800c854 <HAL_RTC_SetTime+0x1c>
 800c850:	2302      	movs	r3, #2
 800c852:	e0a8      	b.n	800c9a6 <HAL_RTC_SetTime+0x16e>
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2201      	movs	r2, #1
 800c858:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	2202      	movs	r2, #2
 800c85e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d126      	bne.n	800c8b4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	689b      	ldr	r3, [r3, #8]
 800c86c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c870:	2b00      	cmp	r3, #0
 800c872:	d102      	bne.n	800c87a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	2200      	movs	r2, #0
 800c878:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	4618      	mov	r0, r3
 800c880:	f000 faac 	bl	800cddc <RTC_ByteToBcd2>
 800c884:	4603      	mov	r3, r0
 800c886:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	785b      	ldrb	r3, [r3, #1]
 800c88c:	4618      	mov	r0, r3
 800c88e:	f000 faa5 	bl	800cddc <RTC_ByteToBcd2>
 800c892:	4603      	mov	r3, r0
 800c894:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800c896:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	789b      	ldrb	r3, [r3, #2]
 800c89c:	4618      	mov	r0, r3
 800c89e:	f000 fa9d 	bl	800cddc <RTC_ByteToBcd2>
 800c8a2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800c8a4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	7b1b      	ldrb	r3, [r3, #12]
 800c8ac:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	617b      	str	r3, [r7, #20]
 800c8b2:	e018      	b.n	800c8e6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	689b      	ldr	r3, [r3, #8]
 800c8ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d102      	bne.n	800c8c8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	785b      	ldrb	r3, [r3, #1]
 800c8d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800c8d4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800c8d6:	68ba      	ldr	r2, [r7, #8]
 800c8d8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800c8da:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	7b1b      	ldrb	r3, [r3, #12]
 800c8e0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800c8e2:	4313      	orrs	r3, r2
 800c8e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	22ca      	movs	r2, #202	; 0xca
 800c8ec:	625a      	str	r2, [r3, #36]	; 0x24
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	2253      	movs	r2, #83	; 0x53
 800c8f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c8f6:	68f8      	ldr	r0, [r7, #12]
 800c8f8:	f000 fa44 	bl	800cd84 <RTC_EnterInitMode>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00b      	beq.n	800c91a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	22ff      	movs	r2, #255	; 0xff
 800c908:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2204      	movs	r2, #4
 800c90e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2200      	movs	r2, #0
 800c914:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c916:	2301      	movs	r3, #1
 800c918:	e045      	b.n	800c9a6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	6979      	ldr	r1, [r7, #20]
 800c920:	4b23      	ldr	r3, [pc, #140]	; (800c9b0 <HAL_RTC_SetTime+0x178>)
 800c922:	400b      	ands	r3, r1
 800c924:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	689a      	ldr	r2, [r3, #8]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c934:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	6899      	ldr	r1, [r3, #8]
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	691a      	ldr	r2, [r3, #16]
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	695b      	ldr	r3, [r3, #20]
 800c944:	431a      	orrs	r2, r3
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	430a      	orrs	r2, r1
 800c94c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	68da      	ldr	r2, [r3, #12]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c95c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	f003 0320 	and.w	r3, r3, #32
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d111      	bne.n	800c990 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	f000 f9e1 	bl	800cd34 <HAL_RTC_WaitForSynchro>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d00b      	beq.n	800c990 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	22ff      	movs	r2, #255	; 0xff
 800c97e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2204      	movs	r2, #4
 800c984:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	2200      	movs	r2, #0
 800c98a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c98c:	2301      	movs	r3, #1
 800c98e:	e00a      	b.n	800c9a6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	22ff      	movs	r2, #255	; 0xff
 800c996:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2201      	movs	r2, #1
 800c99c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800c9a4:	2300      	movs	r3, #0
  }
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	371c      	adds	r7, #28
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd90      	pop	{r4, r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	007f7f7f 	.word	0x007f7f7f

0800c9b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c9b4:	b590      	push	{r4, r7, lr}
 800c9b6:	b087      	sub	sp, #28
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	7f1b      	ldrb	r3, [r3, #28]
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d101      	bne.n	800c9d0 <HAL_RTC_SetDate+0x1c>
 800c9cc:	2302      	movs	r3, #2
 800c9ce:	e092      	b.n	800caf6 <HAL_RTC_SetDate+0x142>
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2202      	movs	r2, #2
 800c9da:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d10e      	bne.n	800ca00 <HAL_RTC_SetDate+0x4c>
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	785b      	ldrb	r3, [r3, #1]
 800c9e6:	f003 0310 	and.w	r3, r3, #16
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d008      	beq.n	800ca00 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	785b      	ldrb	r3, [r3, #1]
 800c9f2:	f023 0310 	bic.w	r3, r3, #16
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	330a      	adds	r3, #10
 800c9fa:	b2da      	uxtb	r2, r3
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d11c      	bne.n	800ca40 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	78db      	ldrb	r3, [r3, #3]
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f000 f9e6 	bl	800cddc <RTC_ByteToBcd2>
 800ca10:	4603      	mov	r3, r0
 800ca12:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	785b      	ldrb	r3, [r3, #1]
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f000 f9df 	bl	800cddc <RTC_ByteToBcd2>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ca22:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	789b      	ldrb	r3, [r3, #2]
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f000 f9d7 	bl	800cddc <RTC_ByteToBcd2>
 800ca2e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800ca30:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	617b      	str	r3, [r7, #20]
 800ca3e:	e00e      	b.n	800ca5e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	78db      	ldrb	r3, [r3, #3]
 800ca44:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	785b      	ldrb	r3, [r3, #1]
 800ca4a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800ca4c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800ca4e:	68ba      	ldr	r2, [r7, #8]
 800ca50:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800ca52:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	22ca      	movs	r2, #202	; 0xca
 800ca64:	625a      	str	r2, [r3, #36]	; 0x24
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	2253      	movs	r2, #83	; 0x53
 800ca6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f000 f988 	bl	800cd84 <RTC_EnterInitMode>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d00b      	beq.n	800ca92 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	22ff      	movs	r2, #255	; 0xff
 800ca80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2204      	movs	r2, #4
 800ca86:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	e031      	b.n	800caf6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	6979      	ldr	r1, [r7, #20]
 800ca98:	4b19      	ldr	r3, [pc, #100]	; (800cb00 <HAL_RTC_SetDate+0x14c>)
 800ca9a:	400b      	ands	r3, r1
 800ca9c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	68da      	ldr	r2, [r3, #12]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800caac:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	689b      	ldr	r3, [r3, #8]
 800cab4:	f003 0320 	and.w	r3, r3, #32
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d111      	bne.n	800cae0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cabc:	68f8      	ldr	r0, [r7, #12]
 800cabe:	f000 f939 	bl	800cd34 <HAL_RTC_WaitForSynchro>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d00b      	beq.n	800cae0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	22ff      	movs	r2, #255	; 0xff
 800cace:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2204      	movs	r2, #4
 800cad4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2200      	movs	r2, #0
 800cada:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800cadc:	2301      	movs	r3, #1
 800cade:	e00a      	b.n	800caf6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	22ff      	movs	r2, #255	; 0xff
 800cae6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2201      	movs	r2, #1
 800caec:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2200      	movs	r2, #0
 800caf2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800caf4:	2300      	movs	r3, #0
  }
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	371c      	adds	r7, #28
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd90      	pop	{r4, r7, pc}
 800cafe:	bf00      	nop
 800cb00:	00ffff3f 	.word	0x00ffff3f

0800cb04 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800cb04:	b590      	push	{r4, r7, lr}
 800cb06:	b089      	sub	sp, #36	; 0x24
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	60f8      	str	r0, [r7, #12]
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800cb10:	2300      	movs	r3, #0
 800cb12:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800cb14:	2300      	movs	r3, #0
 800cb16:	61fb      	str	r3, [r7, #28]
 800cb18:	2300      	movs	r3, #0
 800cb1a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	7f1b      	ldrb	r3, [r3, #28]
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	d101      	bne.n	800cb28 <HAL_RTC_SetAlarm+0x24>
 800cb24:	2302      	movs	r3, #2
 800cb26:	e101      	b.n	800cd2c <HAL_RTC_SetAlarm+0x228>
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2202      	movs	r2, #2
 800cb32:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d137      	bne.n	800cbaa <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d102      	bne.n	800cb4e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	4618      	mov	r0, r3
 800cb54:	f000 f942 	bl	800cddc <RTC_ByteToBcd2>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	785b      	ldrb	r3, [r3, #1]
 800cb60:	4618      	mov	r0, r3
 800cb62:	f000 f93b 	bl	800cddc <RTC_ByteToBcd2>
 800cb66:	4603      	mov	r3, r0
 800cb68:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800cb6a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	789b      	ldrb	r3, [r3, #2]
 800cb70:	4618      	mov	r0, r3
 800cb72:	f000 f933 	bl	800cddc <RTC_ByteToBcd2>
 800cb76:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800cb78:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	7b1b      	ldrb	r3, [r3, #12]
 800cb80:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800cb82:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f000 f925 	bl	800cddc <RTC_ByteToBcd2>
 800cb92:	4603      	mov	r3, r0
 800cb94:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800cb96:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800cb9e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800cba4:	4313      	orrs	r3, r2
 800cba6:	61fb      	str	r3, [r7, #28]
 800cba8:	e023      	b.n	800cbf2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	689b      	ldr	r3, [r3, #8]
 800cbb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d102      	bne.n	800cbbe <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	785b      	ldrb	r3, [r3, #1]
 800cbc8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800cbca:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800cbcc:	68ba      	ldr	r2, [r7, #8]
 800cbce:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800cbd0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	7b1b      	ldrb	r3, [r3, #12]
 800cbd6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800cbd8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cbe0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800cbe2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800cbe8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	685a      	ldr	r2, [r3, #4]
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	69db      	ldr	r3, [r3, #28]
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	22ca      	movs	r2, #202	; 0xca
 800cc04:	625a      	str	r2, [r3, #36]	; 0x24
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	2253      	movs	r2, #83	; 0x53
 800cc0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc16:	d13f      	bne.n	800cc98 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	689a      	ldr	r2, [r3, #8]
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cc26:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	689a      	ldr	r2, [r3, #8]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cc36:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cc38:	f7f8 ffae 	bl	8005b98 <HAL_GetTick>
 800cc3c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800cc3e:	e013      	b.n	800cc68 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cc40:	f7f8 ffaa 	bl	8005b98 <HAL_GetTick>
 800cc44:	4602      	mov	r2, r0
 800cc46:	69bb      	ldr	r3, [r7, #24]
 800cc48:	1ad3      	subs	r3, r2, r3
 800cc4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc4e:	d90b      	bls.n	800cc68 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	22ff      	movs	r2, #255	; 0xff
 800cc56:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2203      	movs	r2, #3
 800cc5c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	2200      	movs	r2, #0
 800cc62:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800cc64:	2303      	movs	r3, #3
 800cc66:	e061      	b.n	800cd2c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	f003 0301 	and.w	r3, r3, #1
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d0e4      	beq.n	800cc40 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	69fa      	ldr	r2, [r7, #28]
 800cc7c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	697a      	ldr	r2, [r7, #20]
 800cc84:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	689a      	ldr	r2, [r3, #8]
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cc94:	609a      	str	r2, [r3, #8]
 800cc96:	e03e      	b.n	800cd16 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	689a      	ldr	r2, [r3, #8]
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cca6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	689a      	ldr	r2, [r3, #8]
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ccb6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ccb8:	f7f8 ff6e 	bl	8005b98 <HAL_GetTick>
 800ccbc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800ccbe:	e013      	b.n	800cce8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ccc0:	f7f8 ff6a 	bl	8005b98 <HAL_GetTick>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	1ad3      	subs	r3, r2, r3
 800ccca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ccce:	d90b      	bls.n	800cce8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	22ff      	movs	r2, #255	; 0xff
 800ccd6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2203      	movs	r2, #3
 800ccdc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2200      	movs	r2, #0
 800cce2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800cce4:	2303      	movs	r3, #3
 800cce6:	e021      	b.n	800cd2c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	68db      	ldr	r3, [r3, #12]
 800ccee:	f003 0302 	and.w	r3, r3, #2
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d0e4      	beq.n	800ccc0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	69fa      	ldr	r2, [r7, #28]
 800ccfc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	697a      	ldr	r2, [r7, #20]
 800cd04:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	689a      	ldr	r2, [r3, #8]
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd14:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	22ff      	movs	r2, #255	; 0xff
 800cd1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2201      	movs	r2, #1
 800cd22:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2200      	movs	r2, #0
 800cd28:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800cd2a:	2300      	movs	r3, #0
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3724      	adds	r7, #36	; 0x24
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd90      	pop	{r4, r7, pc}

0800cd34 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	68da      	ldr	r2, [r3, #12]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cd4e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cd50:	f7f8 ff22 	bl	8005b98 <HAL_GetTick>
 800cd54:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800cd56:	e009      	b.n	800cd6c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cd58:	f7f8 ff1e 	bl	8005b98 <HAL_GetTick>
 800cd5c:	4602      	mov	r2, r0
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	1ad3      	subs	r3, r2, r3
 800cd62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd66:	d901      	bls.n	800cd6c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800cd68:	2303      	movs	r3, #3
 800cd6a:	e007      	b.n	800cd7c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	f003 0320 	and.w	r3, r3, #32
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d0ee      	beq.n	800cd58 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800cd7a:	2300      	movs	r3, #0
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d119      	bne.n	800cdd2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cda6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cda8:	f7f8 fef6 	bl	8005b98 <HAL_GetTick>
 800cdac:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cdae:	e009      	b.n	800cdc4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cdb0:	f7f8 fef2 	bl	8005b98 <HAL_GetTick>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	1ad3      	subs	r3, r2, r3
 800cdba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cdbe:	d901      	bls.n	800cdc4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800cdc0:	2303      	movs	r3, #3
 800cdc2:	e007      	b.n	800cdd4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d0ee      	beq.n	800cdb0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800cdd2:	2300      	movs	r3, #0
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3710      	adds	r7, #16
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b085      	sub	sp, #20
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	4603      	mov	r3, r0
 800cde4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800cde6:	2300      	movs	r3, #0
 800cde8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800cdea:	e005      	b.n	800cdf8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	3301      	adds	r3, #1
 800cdf0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800cdf2:	79fb      	ldrb	r3, [r7, #7]
 800cdf4:	3b0a      	subs	r3, #10
 800cdf6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800cdf8:	79fb      	ldrb	r3, [r7, #7]
 800cdfa:	2b09      	cmp	r3, #9
 800cdfc:	d8f6      	bhi.n	800cdec <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	b2db      	uxtb	r3, r3
 800ce02:	011b      	lsls	r3, r3, #4
 800ce04:	b2da      	uxtb	r2, r3
 800ce06:	79fb      	ldrb	r3, [r7, #7]
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	b2db      	uxtb	r3, r3
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3714      	adds	r7, #20
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr

0800ce18 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b087      	sub	sp, #28
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800ce24:	2300      	movs	r3, #0
 800ce26:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	7f1b      	ldrb	r3, [r3, #28]
 800ce2c:	2b01      	cmp	r3, #1
 800ce2e:	d101      	bne.n	800ce34 <HAL_RTCEx_SetTimeStamp+0x1c>
 800ce30:	2302      	movs	r3, #2
 800ce32:	e03e      	b.n	800ceb2 <HAL_RTCEx_SetTimeStamp+0x9a>
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2201      	movs	r2, #1
 800ce38:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2202      	movs	r2, #2
 800ce3e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	689a      	ldr	r2, [r3, #8]
 800ce46:	4b1e      	ldr	r3, [pc, #120]	; (800cec0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800ce48:	4013      	ands	r3, r2
 800ce4a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800ce4c:	697a      	ldr	r2, [r7, #20]
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	4313      	orrs	r3, r2
 800ce52:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	22ca      	movs	r2, #202	; 0xca
 800ce5a:	625a      	str	r2, [r3, #36]	; 0x24
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	2253      	movs	r2, #83	; 0x53
 800ce62:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f022 0206 	bic.w	r2, r2, #6
 800ce72:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	430a      	orrs	r2, r1
 800ce82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	697a      	ldr	r2, [r7, #20]
 800ce8a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	689a      	ldr	r2, [r3, #8]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce9a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	22ff      	movs	r2, #255	; 0xff
 800cea2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2201      	movs	r2, #1
 800cea8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2200      	movs	r2, #0
 800ceae:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800ceb0:	2300      	movs	r3, #0
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	371c      	adds	r7, #28
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop
 800cec0:	fffff7f7 	.word	0xfffff7f7

0800cec4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b088      	sub	sp, #32
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800cecc:	2300      	movs	r3, #0
 800cece:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800ced0:	2300      	movs	r3, #0
 800ced2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800ced4:	2300      	movs	r3, #0
 800ced6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d101      	bne.n	800cee2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800cede:	2301      	movs	r3, #1
 800cee0:	e156      	b.n	800d190 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800cee8:	b2db      	uxtb	r3, r3
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d106      	bne.n	800cefc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2200      	movs	r2, #0
 800cef2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f7f6 fbf2 	bl	80036e0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2202      	movs	r2, #2
 800cf00:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f000 facf 	bl	800d4a8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	68db      	ldr	r3, [r3, #12]
 800cf0e:	2b02      	cmp	r3, #2
 800cf10:	d00c      	beq.n	800cf2c <HAL_SAI_Init+0x68>
 800cf12:	2b02      	cmp	r3, #2
 800cf14:	d80d      	bhi.n	800cf32 <HAL_SAI_Init+0x6e>
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d002      	beq.n	800cf20 <HAL_SAI_Init+0x5c>
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d003      	beq.n	800cf26 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800cf1e:	e008      	b.n	800cf32 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800cf20:	2300      	movs	r3, #0
 800cf22:	61fb      	str	r3, [r7, #28]
      break;
 800cf24:	e006      	b.n	800cf34 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800cf26:	2310      	movs	r3, #16
 800cf28:	61fb      	str	r3, [r7, #28]
      break;
 800cf2a:	e003      	b.n	800cf34 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800cf2c:	2320      	movs	r3, #32
 800cf2e:	61fb      	str	r3, [r7, #28]
      break;
 800cf30:	e000      	b.n	800cf34 <HAL_SAI_Init+0x70>
      break;
 800cf32:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	2b03      	cmp	r3, #3
 800cf3a:	d81e      	bhi.n	800cf7a <HAL_SAI_Init+0xb6>
 800cf3c:	a201      	add	r2, pc, #4	; (adr r2, 800cf44 <HAL_SAI_Init+0x80>)
 800cf3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf42:	bf00      	nop
 800cf44:	0800cf55 	.word	0x0800cf55
 800cf48:	0800cf5b 	.word	0x0800cf5b
 800cf4c:	0800cf63 	.word	0x0800cf63
 800cf50:	0800cf6b 	.word	0x0800cf6b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800cf54:	2300      	movs	r3, #0
 800cf56:	617b      	str	r3, [r7, #20]
    }
    break;
 800cf58:	e010      	b.n	800cf7c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800cf5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf5e:	617b      	str	r3, [r7, #20]
    }
    break;
 800cf60:	e00c      	b.n	800cf7c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800cf62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf66:	617b      	str	r3, [r7, #20]
    }
    break;
 800cf68:	e008      	b.n	800cf7c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800cf6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf6e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800cf70:	69fb      	ldr	r3, [r7, #28]
 800cf72:	f043 0301 	orr.w	r3, r3, #1
 800cf76:	61fb      	str	r3, [r7, #28]
    }
    break;
 800cf78:	e000      	b.n	800cf7c <HAL_SAI_Init+0xb8>
    default:
      break;
 800cf7a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4a85      	ldr	r2, [pc, #532]	; (800d198 <HAL_SAI_Init+0x2d4>)
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d004      	beq.n	800cf90 <HAL_SAI_Init+0xcc>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4a84      	ldr	r2, [pc, #528]	; (800d19c <HAL_SAI_Init+0x2d8>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d103      	bne.n	800cf98 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800cf90:	4a83      	ldr	r2, [pc, #524]	; (800d1a0 <HAL_SAI_Init+0x2dc>)
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	6013      	str	r3, [r2, #0]
 800cf96:	e002      	b.n	800cf9e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800cf98:	4a82      	ldr	r2, [pc, #520]	; (800d1a4 <HAL_SAI_Init+0x2e0>)
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	69db      	ldr	r3, [r3, #28]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d04c      	beq.n	800d040 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	4a7a      	ldr	r2, [pc, #488]	; (800d198 <HAL_SAI_Init+0x2d4>)
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d004      	beq.n	800cfbe <HAL_SAI_Init+0xfa>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4a78      	ldr	r2, [pc, #480]	; (800d19c <HAL_SAI_Init+0x2d8>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d104      	bne.n	800cfc8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800cfbe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800cfc2:	f7ff fa63 	bl	800c48c <HAL_RCCEx_GetPeriphCLKFreq>
 800cfc6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a76      	ldr	r2, [pc, #472]	; (800d1a8 <HAL_SAI_Init+0x2e4>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d004      	beq.n	800cfdc <HAL_SAI_Init+0x118>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4a75      	ldr	r2, [pc, #468]	; (800d1ac <HAL_SAI_Init+0x2e8>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d104      	bne.n	800cfe6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800cfdc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800cfe0:	f7ff fa54 	bl	800c48c <HAL_RCCEx_GetPeriphCLKFreq>
 800cfe4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800cfe6:	693a      	ldr	r2, [r7, #16]
 800cfe8:	4613      	mov	r3, r2
 800cfea:	009b      	lsls	r3, r3, #2
 800cfec:	4413      	add	r3, r2
 800cfee:	005b      	lsls	r3, r3, #1
 800cff0:	461a      	mov	r2, r3
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	69db      	ldr	r3, [r3, #28]
 800cff6:	025b      	lsls	r3, r3, #9
 800cff8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cffc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	4a6b      	ldr	r2, [pc, #428]	; (800d1b0 <HAL_SAI_Init+0x2ec>)
 800d002:	fba2 2303 	umull	r2, r3, r2, r3
 800d006:	08da      	lsrs	r2, r3, #3
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800d00c:	68f9      	ldr	r1, [r7, #12]
 800d00e:	4b68      	ldr	r3, [pc, #416]	; (800d1b0 <HAL_SAI_Init+0x2ec>)
 800d010:	fba3 2301 	umull	r2, r3, r3, r1
 800d014:	08da      	lsrs	r2, r3, #3
 800d016:	4613      	mov	r3, r2
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	4413      	add	r3, r2
 800d01c:	005b      	lsls	r3, r3, #1
 800d01e:	1aca      	subs	r2, r1, r3
 800d020:	2a08      	cmp	r2, #8
 800d022:	d904      	bls.n	800d02e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6a1b      	ldr	r3, [r3, #32]
 800d028:	1c5a      	adds	r2, r3, #1
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d032:	2b04      	cmp	r3, #4
 800d034:	d104      	bne.n	800d040 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6a1b      	ldr	r3, [r3, #32]
 800d03a:	085a      	lsrs	r2, r3, #1
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	685b      	ldr	r3, [r3, #4]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d003      	beq.n	800d050 <HAL_SAI_Init+0x18c>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	d109      	bne.n	800d064 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d054:	2b01      	cmp	r3, #1
 800d056:	d101      	bne.n	800d05c <HAL_SAI_Init+0x198>
 800d058:	2300      	movs	r3, #0
 800d05a:	e001      	b.n	800d060 <HAL_SAI_Init+0x19c>
 800d05c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d060:	61bb      	str	r3, [r7, #24]
 800d062:	e008      	b.n	800d076 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d068:	2b01      	cmp	r3, #1
 800d06a:	d102      	bne.n	800d072 <HAL_SAI_Init+0x1ae>
 800d06c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d070:	e000      	b.n	800d074 <HAL_SAI_Init+0x1b0>
 800d072:	2300      	movs	r3, #0
 800d074:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	6819      	ldr	r1, [r3, #0]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681a      	ldr	r2, [r3, #0]
 800d080:	4b4c      	ldr	r3, [pc, #304]	; (800d1b4 <HAL_SAI_Init+0x2f0>)
 800d082:	400b      	ands	r3, r1
 800d084:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	6819      	ldr	r1, [r3, #0]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	685a      	ldr	r2, [r3, #4]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d094:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d09a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a0:	431a      	orrs	r2, r3
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800d0ae:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	691b      	ldr	r3, [r3, #16]
 800d0b4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d0ba:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6a1b      	ldr	r3, [r3, #32]
 800d0c0:	051b      	lsls	r3, r3, #20
 800d0c2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	430a      	orrs	r2, r1
 800d0ca:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	6859      	ldr	r1, [r3, #4]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	4b38      	ldr	r3, [pc, #224]	; (800d1b8 <HAL_SAI_Init+0x2f4>)
 800d0d8:	400b      	ands	r3, r1
 800d0da:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	6859      	ldr	r1, [r3, #4]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	699a      	ldr	r2, [r3, #24]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ea:	431a      	orrs	r2, r3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0f0:	431a      	orrs	r2, r3
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	430a      	orrs	r2, r1
 800d0f8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	6899      	ldr	r1, [r3, #8]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	4b2d      	ldr	r3, [pc, #180]	; (800d1bc <HAL_SAI_Init+0x2f8>)
 800d106:	400b      	ands	r3, r1
 800d108:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	6899      	ldr	r1, [r3, #8]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d114:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d11a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800d120:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800d126:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d12c:	3b01      	subs	r3, #1
 800d12e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800d130:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	430a      	orrs	r2, r1
 800d138:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	68d9      	ldr	r1, [r3, #12]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	f24f 0320 	movw	r3, #61472	; 0xf020
 800d148:	400b      	ands	r3, r1
 800d14a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	68d9      	ldr	r1, [r3, #12]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d15a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d160:	041b      	lsls	r3, r3, #16
 800d162:	431a      	orrs	r2, r3
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d168:	3b01      	subs	r3, #1
 800d16a:	021b      	lsls	r3, r3, #8
 800d16c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	430a      	orrs	r2, r1
 800d174:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2201      	movs	r2, #1
 800d182:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2200      	movs	r2, #0
 800d18a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d18e:	2300      	movs	r3, #0
}
 800d190:	4618      	mov	r0, r3
 800d192:	3720      	adds	r7, #32
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	40015804 	.word	0x40015804
 800d19c:	40015824 	.word	0x40015824
 800d1a0:	40015800 	.word	0x40015800
 800d1a4:	40015c00 	.word	0x40015c00
 800d1a8:	40015c04 	.word	0x40015c04
 800d1ac:	40015c24 	.word	0x40015c24
 800d1b0:	cccccccd 	.word	0xcccccccd
 800d1b4:	ff05c010 	.word	0xff05c010
 800d1b8:	ffff1ff0 	.word	0xffff1ff0
 800d1bc:	fff88000 	.word	0xfff88000

0800d1c0 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b086      	sub	sp, #24
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	60f8      	str	r0, [r7, #12]
 800d1c8:	60b9      	str	r1, [r7, #8]
 800d1ca:	4613      	mov	r3, r2
 800d1cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800d1ce:	f7f8 fce3 	bl	8005b98 <HAL_GetTick>
 800d1d2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d002      	beq.n	800d1e0 <HAL_SAI_Transmit_DMA+0x20>
 800d1da:	88fb      	ldrh	r3, [r7, #6]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d101      	bne.n	800d1e4 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	e093      	b.n	800d30c <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d1ea:	b2db      	uxtb	r3, r3
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	f040 808c 	bne.w	800d30a <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d101      	bne.n	800d200 <HAL_SAI_Transmit_DMA+0x40>
 800d1fc:	2302      	movs	r3, #2
 800d1fe:	e085      	b.n	800d30c <HAL_SAI_Transmit_DMA+0x14c>
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2201      	movs	r2, #1
 800d204:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	68ba      	ldr	r2, [r7, #8]
 800d20c:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	88fa      	ldrh	r2, [r7, #6]
 800d212:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	88fa      	ldrh	r2, [r7, #6]
 800d21a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2200      	movs	r2, #0
 800d222:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2212      	movs	r2, #18
 800d22a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d232:	4a38      	ldr	r2, [pc, #224]	; (800d314 <HAL_SAI_Transmit_DMA+0x154>)
 800d234:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d23a:	4a37      	ldr	r2, [pc, #220]	; (800d318 <HAL_SAI_Transmit_DMA+0x158>)
 800d23c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d242:	4a36      	ldr	r2, [pc, #216]	; (800d31c <HAL_SAI_Transmit_DMA+0x15c>)
 800d244:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d24a:	2200      	movs	r2, #0
 800d24c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d256:	4619      	mov	r1, r3
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	331c      	adds	r3, #28
 800d25e:	461a      	mov	r2, r3
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d266:	f7f9 fb45 	bl	80068f4 <HAL_DMA_Start_IT>
 800d26a:	4603      	mov	r3, r0
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d005      	beq.n	800d27c <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2200      	movs	r2, #0
 800d274:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800d278:	2301      	movs	r3, #1
 800d27a:	e047      	b.n	800d30c <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d27c:	2100      	movs	r1, #0
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	f000 f8dc 	bl	800d43c <SAI_InterruptFlag>
 800d284:	4601      	mov	r1, r0
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	691a      	ldr	r2, [r3, #16]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	430a      	orrs	r2, r1
 800d292:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	681a      	ldr	r2, [r3, #0]
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d2a2:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800d2a4:	e015      	b.n	800d2d2 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800d2a6:	f7f8 fc77 	bl	8005b98 <HAL_GetTick>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	1ad3      	subs	r3, r2, r3
 800d2b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2b4:	d90d      	bls.n	800d2d2 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d2bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800d2ce:	2303      	movs	r3, #3
 800d2d0:	e01c      	b.n	800d30c <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	695b      	ldr	r3, [r3, #20]
 800d2d8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d0e2      	beq.n	800d2a6 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d107      	bne.n	800d2fe <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	681a      	ldr	r2, [r3, #0]
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d2fc:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2200      	movs	r2, #0
 800d302:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800d306:	2300      	movs	r3, #0
 800d308:	e000      	b.n	800d30c <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800d30a:	2302      	movs	r3, #2
  }
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3718      	adds	r7, #24
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}
 800d314:	0800d579 	.word	0x0800d579
 800d318:	0800d519 	.word	0x0800d519
 800d31c:	0800d611 	.word	0x0800d611

0800d320 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	4613      	mov	r3, r2
 800d32c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d002      	beq.n	800d33a <HAL_SAI_Receive_DMA+0x1a>
 800d334:	88fb      	ldrh	r3, [r7, #6]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d101      	bne.n	800d33e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800d33a:	2301      	movs	r3, #1
 800d33c:	e074      	b.n	800d428 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d344:	b2db      	uxtb	r3, r3
 800d346:	2b01      	cmp	r3, #1
 800d348:	d16d      	bne.n	800d426 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d350:	2b01      	cmp	r3, #1
 800d352:	d101      	bne.n	800d358 <HAL_SAI_Receive_DMA+0x38>
 800d354:	2302      	movs	r3, #2
 800d356:	e067      	b.n	800d428 <HAL_SAI_Receive_DMA+0x108>
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2201      	movs	r2, #1
 800d35c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	68ba      	ldr	r2, [r7, #8]
 800d364:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	88fa      	ldrh	r2, [r7, #6]
 800d36a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	88fa      	ldrh	r2, [r7, #6]
 800d372:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2200      	movs	r2, #0
 800d37a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	2222      	movs	r2, #34	; 0x22
 800d382:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d38a:	4a29      	ldr	r2, [pc, #164]	; (800d430 <HAL_SAI_Receive_DMA+0x110>)
 800d38c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d392:	4a28      	ldr	r2, [pc, #160]	; (800d434 <HAL_SAI_Receive_DMA+0x114>)
 800d394:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d39a:	4a27      	ldr	r2, [pc, #156]	; (800d438 <HAL_SAI_Receive_DMA+0x118>)
 800d39c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	331c      	adds	r3, #28
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d3be:	f7f9 fa99 	bl	80068f4 <HAL_DMA_Start_IT>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d005      	beq.n	800d3d4 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	e029      	b.n	800d428 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d3d4:	2100      	movs	r1, #0
 800d3d6:	68f8      	ldr	r0, [r7, #12]
 800d3d8:	f000 f830 	bl	800d43c <SAI_InterruptFlag>
 800d3dc:	4601      	mov	r1, r0
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	691a      	ldr	r2, [r3, #16]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	430a      	orrs	r2, r1
 800d3ea:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d3fa:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d406:	2b00      	cmp	r3, #0
 800d408:	d107      	bne.n	800d41a <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d418:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2200      	movs	r2, #0
 800d41e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800d422:	2300      	movs	r3, #0
 800d424:	e000      	b.n	800d428 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800d426:	2302      	movs	r3, #2
  }
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3710      	adds	r7, #16
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	0800d5f5 	.word	0x0800d5f5
 800d434:	0800d595 	.word	0x0800d595
 800d438:	0800d611 	.word	0x0800d611

0800d43c <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b085      	sub	sp, #20
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800d446:	2301      	movs	r3, #1
 800d448:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d103      	bne.n	800d458 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	f043 0308 	orr.w	r3, r3, #8
 800d456:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d45c:	2b08      	cmp	r3, #8
 800d45e:	d10b      	bne.n	800d478 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d464:	2b03      	cmp	r3, #3
 800d466:	d003      	beq.n	800d470 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	685b      	ldr	r3, [r3, #4]
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d103      	bne.n	800d478 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	f043 0310 	orr.w	r3, r3, #16
 800d476:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	2b03      	cmp	r3, #3
 800d47e:	d003      	beq.n	800d488 <SAI_InterruptFlag+0x4c>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	2b02      	cmp	r3, #2
 800d486:	d104      	bne.n	800d492 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d48e:	60fb      	str	r3, [r7, #12]
 800d490:	e003      	b.n	800d49a <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	f043 0304 	orr.w	r3, r3, #4
 800d498:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800d49a:	68fb      	ldr	r3, [r7, #12]
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3714      	adds	r7, #20
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr

0800d4a8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b085      	sub	sp, #20
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800d4b0:	4b17      	ldr	r3, [pc, #92]	; (800d510 <SAI_Disable+0x68>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4a17      	ldr	r2, [pc, #92]	; (800d514 <SAI_Disable+0x6c>)
 800d4b6:	fba2 2303 	umull	r2, r3, r2, r3
 800d4ba:	0b1b      	lsrs	r3, r3, #12
 800d4bc:	009b      	lsls	r3, r3, #2
 800d4be:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	681a      	ldr	r2, [r3, #0]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d4d2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	1e5a      	subs	r2, r3, #1
 800d4d8:	60fa      	str	r2, [r7, #12]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d10a      	bne.n	800d4f4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800d4ee:	2303      	movs	r3, #3
 800d4f0:	72fb      	strb	r3, [r7, #11]
      break;
 800d4f2:	e006      	b.n	800d502 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d1e8      	bne.n	800d4d4 <SAI_Disable+0x2c>

  return status;
 800d502:	7afb      	ldrb	r3, [r7, #11]
}
 800d504:	4618      	mov	r0, r3
 800d506:	3714      	adds	r7, #20
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr
 800d510:	20000008 	.word	0x20000008
 800d514:	95cbec1b 	.word	0x95cbec1b

0800d518 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d524:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	69db      	ldr	r3, [r3, #28]
 800d52a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d52e:	d01c      	beq.n	800d56a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2200      	movs	r2, #0
 800d534:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	681a      	ldr	r2, [r3, #0]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d546:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d548:	2100      	movs	r1, #0
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f7ff ff76 	bl	800d43c <SAI_InterruptFlag>
 800d550:	4603      	mov	r3, r0
 800d552:	43d9      	mvns	r1, r3
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	691a      	ldr	r2, [r3, #16]
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	400a      	ands	r2, r1
 800d560:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2201      	movs	r2, #1
 800d566:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800d56a:	68f8      	ldr	r0, [r7, #12]
 800d56c:	f7f7 f9a8 	bl	80048c0 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d570:	bf00      	nop
 800d572:	3710      	adds	r7, #16
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d584:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800d586:	68f8      	ldr	r0, [r7, #12]
 800d588:	f7f7 f9a4 	bl	80048d4 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d58c:	bf00      	nop
 800d58e:	3710      	adds	r7, #16
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b084      	sub	sp, #16
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5a0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	69db      	ldr	r3, [r3, #28]
 800d5a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5aa:	d01c      	beq.n	800d5e6 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d5ba:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d5c4:	2100      	movs	r1, #0
 800d5c6:	68f8      	ldr	r0, [r7, #12]
 800d5c8:	f7ff ff38 	bl	800d43c <SAI_InterruptFlag>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	43d9      	mvns	r1, r3
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	691a      	ldr	r2, [r3, #16]
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	400a      	ands	r2, r1
 800d5dc:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800d5e6:	68f8      	ldr	r0, [r7, #12]
 800d5e8:	f7f3 fd9e 	bl	8001128 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d5ec:	bf00      	nop
 800d5ee:	3710      	adds	r7, #16
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b084      	sub	sp, #16
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d600:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800d602:	68f8      	ldr	r0, [r7, #12]
 800d604:	f7f3 fda0 	bl	8001148 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d608:	bf00      	nop
 800d60a:	3710      	adds	r7, #16
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d61c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d624:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d634:	2b01      	cmp	r3, #1
 800d636:	d004      	beq.n	800d642 <SAI_DMAError+0x32>
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d63c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d112      	bne.n	800d668 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	681a      	ldr	r2, [r3, #0]
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d650:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800d652:	68f8      	ldr	r0, [r7, #12]
 800d654:	f7ff ff28 	bl	800d4a8 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2201      	movs	r2, #1
 800d65c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2200      	movs	r2, #0
 800d664:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f7f7 f93d 	bl	80048e8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d66e:	bf00      	nop
 800d670:	3710      	adds	r7, #16
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}

0800d676 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800d676:	b580      	push	{r7, lr}
 800d678:	b082      	sub	sp, #8
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
 800d67e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d101      	bne.n	800d68a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d686:	2301      	movs	r3, #1
 800d688:	e025      	b.n	800d6d6 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d690:	b2db      	uxtb	r3, r3
 800d692:	2b00      	cmp	r3, #0
 800d694:	d106      	bne.n	800d6a4 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2200      	movs	r2, #0
 800d69a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f7f6 f814 	bl	80036cc <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2202      	movs	r2, #2
 800d6a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	3304      	adds	r3, #4
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	4610      	mov	r0, r2
 800d6b8:	f001 fe54 	bl	800f364 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6818      	ldr	r0, [r3, #0]
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	6839      	ldr	r1, [r7, #0]
 800d6c8:	f001 febe 	bl	800f448 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800d6d4:	2300      	movs	r3, #0
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3708      	adds	r7, #8
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}

0800d6de <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d6de:	b580      	push	{r7, lr}
 800d6e0:	b084      	sub	sp, #16
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	60f8      	str	r0, [r7, #12]
 800d6e6:	60b9      	str	r1, [r7, #8]
 800d6e8:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d6f0:	b2db      	uxtb	r3, r3
 800d6f2:	2b02      	cmp	r3, #2
 800d6f4:	d101      	bne.n	800d6fa <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800d6f6:	2302      	movs	r3, #2
 800d6f8:	e018      	b.n	800d72c <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2202      	movs	r2, #2
 800d6fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	687a      	ldr	r2, [r7, #4]
 800d708:	68b9      	ldr	r1, [r7, #8]
 800d70a:	4618      	mov	r0, r3
 800d70c:	f001 ff1c 	bl	800f548 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	2b02      	cmp	r3, #2
 800d716:	d104      	bne.n	800d722 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2205      	movs	r2, #5
 800d71c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800d720:	e003      	b.n	800d72a <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2201      	movs	r2, #1
 800d726:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800d72a:	2300      	movs	r3, #0
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3710      	adds	r7, #16
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d744:	b2db      	uxtb	r3, r3
 800d746:	2b02      	cmp	r3, #2
 800d748:	d101      	bne.n	800d74e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d74a:	2302      	movs	r3, #2
 800d74c:	e00e      	b.n	800d76c <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2202      	movs	r2, #2
 800d752:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	6839      	ldr	r1, [r7, #0]
 800d75c:	4618      	mov	r0, r3
 800d75e:	f001 ff17 	bl	800f590 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2201      	movs	r2, #1
 800d766:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800d76a:	2300      	movs	r3, #0
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3708      	adds	r7, #8
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}

0800d774 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d101      	bne.n	800d786 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800d782:	2301      	movs	r3, #1
 800d784:	e04c      	b.n	800d820 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d78c:	b2db      	uxtb	r3, r3
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d106      	bne.n	800d7a0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2200      	movs	r2, #0
 800d796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f7f5 fcca 	bl	8003134 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2202      	movs	r2, #2
 800d7a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	681a      	ldr	r2, [r3, #0]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f022 0203 	bic.w	r2, r2, #3
 800d7b6:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800d7c0:	68fa      	ldr	r2, [r7, #12]
 800d7c2:	4b19      	ldr	r3, [pc, #100]	; (800d828 <HAL_SPDIFRX_Init+0xb4>)
 800d7c4:	4013      	ands	r3, r2
 800d7c6:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800d7d0:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800d7d6:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800d7dc:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800d7e2:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800d7e8:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800d7ee:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800d7f4:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800d7fa:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800d800:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800d802:	68fa      	ldr	r2, [r7, #12]
 800d804:	4313      	orrs	r3, r2
 800d806:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	68fa      	ldr	r2, [r7, #12]
 800d80e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2200      	movs	r2, #0
 800d814:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2201      	movs	r2, #1
 800d81a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800d81e:	2300      	movs	r3, #0
}
 800d820:	4618      	mov	r0, r3
 800d822:	3710      	adds	r7, #16
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}
 800d828:	fff88407 	.word	0xfff88407

0800d82c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b082      	sub	sp, #8
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d101      	bne.n	800d83e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d83a:	2301      	movs	r3, #1
 800d83c:	e049      	b.n	800d8d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d844:	b2db      	uxtb	r3, r3
 800d846:	2b00      	cmp	r3, #0
 800d848:	d106      	bne.n	800d858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2200      	movs	r2, #0
 800d84e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f7f5 fcb0 	bl	80031b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2202      	movs	r2, #2
 800d85c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	3304      	adds	r3, #4
 800d868:	4619      	mov	r1, r3
 800d86a:	4610      	mov	r0, r2
 800d86c:	f000 fc22 	bl	800e0b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2201      	movs	r2, #1
 800d874:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2201      	movs	r2, #1
 800d87c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2201      	movs	r2, #1
 800d884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2201      	movs	r2, #1
 800d88c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2201      	movs	r2, #1
 800d894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2201      	movs	r2, #1
 800d89c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d8d0:	2300      	movs	r3, #0
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3708      	adds	r7, #8
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
	...

0800d8dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b085      	sub	sp, #20
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d001      	beq.n	800d8f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	e054      	b.n	800d99e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2202      	movs	r2, #2
 800d8f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	68da      	ldr	r2, [r3, #12]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f042 0201 	orr.w	r2, r2, #1
 800d90a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	4a26      	ldr	r2, [pc, #152]	; (800d9ac <HAL_TIM_Base_Start_IT+0xd0>)
 800d912:	4293      	cmp	r3, r2
 800d914:	d022      	beq.n	800d95c <HAL_TIM_Base_Start_IT+0x80>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d91e:	d01d      	beq.n	800d95c <HAL_TIM_Base_Start_IT+0x80>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	4a22      	ldr	r2, [pc, #136]	; (800d9b0 <HAL_TIM_Base_Start_IT+0xd4>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d018      	beq.n	800d95c <HAL_TIM_Base_Start_IT+0x80>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	4a21      	ldr	r2, [pc, #132]	; (800d9b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800d930:	4293      	cmp	r3, r2
 800d932:	d013      	beq.n	800d95c <HAL_TIM_Base_Start_IT+0x80>
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4a1f      	ldr	r2, [pc, #124]	; (800d9b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d00e      	beq.n	800d95c <HAL_TIM_Base_Start_IT+0x80>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	4a1e      	ldr	r2, [pc, #120]	; (800d9bc <HAL_TIM_Base_Start_IT+0xe0>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d009      	beq.n	800d95c <HAL_TIM_Base_Start_IT+0x80>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a1c      	ldr	r2, [pc, #112]	; (800d9c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d004      	beq.n	800d95c <HAL_TIM_Base_Start_IT+0x80>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4a1b      	ldr	r2, [pc, #108]	; (800d9c4 <HAL_TIM_Base_Start_IT+0xe8>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d115      	bne.n	800d988 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	689a      	ldr	r2, [r3, #8]
 800d962:	4b19      	ldr	r3, [pc, #100]	; (800d9c8 <HAL_TIM_Base_Start_IT+0xec>)
 800d964:	4013      	ands	r3, r2
 800d966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2b06      	cmp	r3, #6
 800d96c:	d015      	beq.n	800d99a <HAL_TIM_Base_Start_IT+0xbe>
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d974:	d011      	beq.n	800d99a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	681a      	ldr	r2, [r3, #0]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f042 0201 	orr.w	r2, r2, #1
 800d984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d986:	e008      	b.n	800d99a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	681a      	ldr	r2, [r3, #0]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	f042 0201 	orr.w	r2, r2, #1
 800d996:	601a      	str	r2, [r3, #0]
 800d998:	e000      	b.n	800d99c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d99a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d99c:	2300      	movs	r3, #0
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3714      	adds	r7, #20
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr
 800d9aa:	bf00      	nop
 800d9ac:	40010000 	.word	0x40010000
 800d9b0:	40000400 	.word	0x40000400
 800d9b4:	40000800 	.word	0x40000800
 800d9b8:	40000c00 	.word	0x40000c00
 800d9bc:	40010400 	.word	0x40010400
 800d9c0:	40014000 	.word	0x40014000
 800d9c4:	40001800 	.word	0x40001800
 800d9c8:	00010007 	.word	0x00010007

0800d9cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b082      	sub	sp, #8
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d101      	bne.n	800d9de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	e049      	b.n	800da72 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9e4:	b2db      	uxtb	r3, r3
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d106      	bne.n	800d9f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f7f5 fc4e 	bl	8003294 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2202      	movs	r2, #2
 800d9fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	3304      	adds	r3, #4
 800da08:	4619      	mov	r1, r3
 800da0a:	4610      	mov	r0, r2
 800da0c:	f000 fb52 	bl	800e0b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2201      	movs	r2, #1
 800da14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2201      	movs	r2, #1
 800da1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2201      	movs	r2, #1
 800da24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2201      	movs	r2, #1
 800da2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2201      	movs	r2, #1
 800da34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2201      	movs	r2, #1
 800da3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2201      	movs	r2, #1
 800da44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2201      	movs	r2, #1
 800da4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2201      	movs	r2, #1
 800da54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2201      	movs	r2, #1
 800da5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2201      	movs	r2, #1
 800da64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2201      	movs	r2, #1
 800da6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800da70:	2300      	movs	r3, #0
}
 800da72:	4618      	mov	r0, r3
 800da74:	3708      	adds	r7, #8
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}

0800da7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800da7a:	b580      	push	{r7, lr}
 800da7c:	b082      	sub	sp, #8
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	691b      	ldr	r3, [r3, #16]
 800da88:	f003 0302 	and.w	r3, r3, #2
 800da8c:	2b02      	cmp	r3, #2
 800da8e:	d122      	bne.n	800dad6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	68db      	ldr	r3, [r3, #12]
 800da96:	f003 0302 	and.w	r3, r3, #2
 800da9a:	2b02      	cmp	r3, #2
 800da9c:	d11b      	bne.n	800dad6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f06f 0202 	mvn.w	r2, #2
 800daa6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2201      	movs	r2, #1
 800daac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	699b      	ldr	r3, [r3, #24]
 800dab4:	f003 0303 	and.w	r3, r3, #3
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d003      	beq.n	800dac4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f000 fadb 	bl	800e078 <HAL_TIM_IC_CaptureCallback>
 800dac2:	e005      	b.n	800dad0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f000 facd 	bl	800e064 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f000 fade 	bl	800e08c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	691b      	ldr	r3, [r3, #16]
 800dadc:	f003 0304 	and.w	r3, r3, #4
 800dae0:	2b04      	cmp	r3, #4
 800dae2:	d122      	bne.n	800db2a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	f003 0304 	and.w	r3, r3, #4
 800daee:	2b04      	cmp	r3, #4
 800daf0:	d11b      	bne.n	800db2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f06f 0204 	mvn.w	r2, #4
 800dafa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2202      	movs	r2, #2
 800db00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	699b      	ldr	r3, [r3, #24]
 800db08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d003      	beq.n	800db18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f000 fab1 	bl	800e078 <HAL_TIM_IC_CaptureCallback>
 800db16:	e005      	b.n	800db24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f000 faa3 	bl	800e064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 fab4 	bl	800e08c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2200      	movs	r2, #0
 800db28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	691b      	ldr	r3, [r3, #16]
 800db30:	f003 0308 	and.w	r3, r3, #8
 800db34:	2b08      	cmp	r3, #8
 800db36:	d122      	bne.n	800db7e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	68db      	ldr	r3, [r3, #12]
 800db3e:	f003 0308 	and.w	r3, r3, #8
 800db42:	2b08      	cmp	r3, #8
 800db44:	d11b      	bne.n	800db7e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f06f 0208 	mvn.w	r2, #8
 800db4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2204      	movs	r2, #4
 800db54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	69db      	ldr	r3, [r3, #28]
 800db5c:	f003 0303 	and.w	r3, r3, #3
 800db60:	2b00      	cmp	r3, #0
 800db62:	d003      	beq.n	800db6c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f000 fa87 	bl	800e078 <HAL_TIM_IC_CaptureCallback>
 800db6a:	e005      	b.n	800db78 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f000 fa79 	bl	800e064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 fa8a 	bl	800e08c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2200      	movs	r2, #0
 800db7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	691b      	ldr	r3, [r3, #16]
 800db84:	f003 0310 	and.w	r3, r3, #16
 800db88:	2b10      	cmp	r3, #16
 800db8a:	d122      	bne.n	800dbd2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	68db      	ldr	r3, [r3, #12]
 800db92:	f003 0310 	and.w	r3, r3, #16
 800db96:	2b10      	cmp	r3, #16
 800db98:	d11b      	bne.n	800dbd2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f06f 0210 	mvn.w	r2, #16
 800dba2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2208      	movs	r2, #8
 800dba8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	69db      	ldr	r3, [r3, #28]
 800dbb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d003      	beq.n	800dbc0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f000 fa5d 	bl	800e078 <HAL_TIM_IC_CaptureCallback>
 800dbbe:	e005      	b.n	800dbcc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 fa4f 	bl	800e064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f000 fa60 	bl	800e08c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	691b      	ldr	r3, [r3, #16]
 800dbd8:	f003 0301 	and.w	r3, r3, #1
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d10e      	bne.n	800dbfe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	68db      	ldr	r3, [r3, #12]
 800dbe6:	f003 0301 	and.w	r3, r3, #1
 800dbea:	2b01      	cmp	r3, #1
 800dbec:	d107      	bne.n	800dbfe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f06f 0201 	mvn.w	r2, #1
 800dbf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f7f4 fe99 	bl	8002930 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	691b      	ldr	r3, [r3, #16]
 800dc04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc08:	2b80      	cmp	r3, #128	; 0x80
 800dc0a:	d10e      	bne.n	800dc2a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	68db      	ldr	r3, [r3, #12]
 800dc12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc16:	2b80      	cmp	r3, #128	; 0x80
 800dc18:	d107      	bne.n	800dc2a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dc22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f000 fef3 	bl	800ea10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	691b      	ldr	r3, [r3, #16]
 800dc30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc38:	d10e      	bne.n	800dc58 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	68db      	ldr	r3, [r3, #12]
 800dc40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc44:	2b80      	cmp	r3, #128	; 0x80
 800dc46:	d107      	bne.n	800dc58 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dc50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 fee6 	bl	800ea24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	691b      	ldr	r3, [r3, #16]
 800dc5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc62:	2b40      	cmp	r3, #64	; 0x40
 800dc64:	d10e      	bne.n	800dc84 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	68db      	ldr	r3, [r3, #12]
 800dc6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc70:	2b40      	cmp	r3, #64	; 0x40
 800dc72:	d107      	bne.n	800dc84 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dc7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f000 fa0e 	bl	800e0a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	691b      	ldr	r3, [r3, #16]
 800dc8a:	f003 0320 	and.w	r3, r3, #32
 800dc8e:	2b20      	cmp	r3, #32
 800dc90:	d10e      	bne.n	800dcb0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	68db      	ldr	r3, [r3, #12]
 800dc98:	f003 0320 	and.w	r3, r3, #32
 800dc9c:	2b20      	cmp	r3, #32
 800dc9e:	d107      	bne.n	800dcb0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f06f 0220 	mvn.w	r2, #32
 800dca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 fea6 	bl	800e9fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dcb0:	bf00      	nop
 800dcb2:	3708      	adds	r7, #8
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	60f8      	str	r0, [r7, #12]
 800dcc0:	60b9      	str	r1, [r7, #8]
 800dcc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	d101      	bne.n	800dcd2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800dcce:	2302      	movs	r3, #2
 800dcd0:	e0fd      	b.n	800dece <HAL_TIM_PWM_ConfigChannel+0x216>
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	2201      	movs	r2, #1
 800dcd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2b14      	cmp	r3, #20
 800dcde:	f200 80f0 	bhi.w	800dec2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800dce2:	a201      	add	r2, pc, #4	; (adr r2, 800dce8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800dce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dce8:	0800dd3d 	.word	0x0800dd3d
 800dcec:	0800dec3 	.word	0x0800dec3
 800dcf0:	0800dec3 	.word	0x0800dec3
 800dcf4:	0800dec3 	.word	0x0800dec3
 800dcf8:	0800dd7d 	.word	0x0800dd7d
 800dcfc:	0800dec3 	.word	0x0800dec3
 800dd00:	0800dec3 	.word	0x0800dec3
 800dd04:	0800dec3 	.word	0x0800dec3
 800dd08:	0800ddbf 	.word	0x0800ddbf
 800dd0c:	0800dec3 	.word	0x0800dec3
 800dd10:	0800dec3 	.word	0x0800dec3
 800dd14:	0800dec3 	.word	0x0800dec3
 800dd18:	0800ddff 	.word	0x0800ddff
 800dd1c:	0800dec3 	.word	0x0800dec3
 800dd20:	0800dec3 	.word	0x0800dec3
 800dd24:	0800dec3 	.word	0x0800dec3
 800dd28:	0800de41 	.word	0x0800de41
 800dd2c:	0800dec3 	.word	0x0800dec3
 800dd30:	0800dec3 	.word	0x0800dec3
 800dd34:	0800dec3 	.word	0x0800dec3
 800dd38:	0800de81 	.word	0x0800de81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	68b9      	ldr	r1, [r7, #8]
 800dd42:	4618      	mov	r0, r3
 800dd44:	f000 fa56 	bl	800e1f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	699a      	ldr	r2, [r3, #24]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f042 0208 	orr.w	r2, r2, #8
 800dd56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	699a      	ldr	r2, [r3, #24]
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f022 0204 	bic.w	r2, r2, #4
 800dd66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	6999      	ldr	r1, [r3, #24]
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	691a      	ldr	r2, [r3, #16]
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	430a      	orrs	r2, r1
 800dd78:	619a      	str	r2, [r3, #24]
      break;
 800dd7a:	e0a3      	b.n	800dec4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	68b9      	ldr	r1, [r7, #8]
 800dd82:	4618      	mov	r0, r3
 800dd84:	f000 faa8 	bl	800e2d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	699a      	ldr	r2, [r3, #24]
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dd96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	699a      	ldr	r2, [r3, #24]
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dda6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	6999      	ldr	r1, [r3, #24]
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	691b      	ldr	r3, [r3, #16]
 800ddb2:	021a      	lsls	r2, r3, #8
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	430a      	orrs	r2, r1
 800ddba:	619a      	str	r2, [r3, #24]
      break;
 800ddbc:	e082      	b.n	800dec4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	68b9      	ldr	r1, [r7, #8]
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f000 faff 	bl	800e3c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	69da      	ldr	r2, [r3, #28]
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	f042 0208 	orr.w	r2, r2, #8
 800ddd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	69da      	ldr	r2, [r3, #28]
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f022 0204 	bic.w	r2, r2, #4
 800dde8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	69d9      	ldr	r1, [r3, #28]
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	691a      	ldr	r2, [r3, #16]
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	430a      	orrs	r2, r1
 800ddfa:	61da      	str	r2, [r3, #28]
      break;
 800ddfc:	e062      	b.n	800dec4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	68b9      	ldr	r1, [r7, #8]
 800de04:	4618      	mov	r0, r3
 800de06:	f000 fb55 	bl	800e4b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	69da      	ldr	r2, [r3, #28]
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	69da      	ldr	r2, [r3, #28]
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	69d9      	ldr	r1, [r3, #28]
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	691b      	ldr	r3, [r3, #16]
 800de34:	021a      	lsls	r2, r3, #8
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	430a      	orrs	r2, r1
 800de3c:	61da      	str	r2, [r3, #28]
      break;
 800de3e:	e041      	b.n	800dec4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	68b9      	ldr	r1, [r7, #8]
 800de46:	4618      	mov	r0, r3
 800de48:	f000 fb8c 	bl	800e564 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f042 0208 	orr.w	r2, r2, #8
 800de5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f022 0204 	bic.w	r2, r2, #4
 800de6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	691a      	ldr	r2, [r3, #16]
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	430a      	orrs	r2, r1
 800de7c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800de7e:	e021      	b.n	800dec4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	68b9      	ldr	r1, [r7, #8]
 800de86:	4618      	mov	r0, r3
 800de88:	f000 fbbe 	bl	800e608 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800deaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	691b      	ldr	r3, [r3, #16]
 800deb6:	021a      	lsls	r2, r3, #8
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	430a      	orrs	r2, r1
 800debe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dec0:	e000      	b.n	800dec4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800dec2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	2200      	movs	r2, #0
 800dec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800decc:	2300      	movs	r3, #0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3710      	adds	r7, #16
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop

0800ded8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dee8:	2b01      	cmp	r3, #1
 800deea:	d101      	bne.n	800def0 <HAL_TIM_ConfigClockSource+0x18>
 800deec:	2302      	movs	r3, #2
 800deee:	e0b3      	b.n	800e058 <HAL_TIM_ConfigClockSource+0x180>
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2201      	movs	r2, #1
 800def4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2202      	movs	r2, #2
 800defc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	689b      	ldr	r3, [r3, #8]
 800df06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800df08:	68fa      	ldr	r2, [r7, #12]
 800df0a:	4b55      	ldr	r3, [pc, #340]	; (800e060 <HAL_TIM_ConfigClockSource+0x188>)
 800df0c:	4013      	ands	r3, r2
 800df0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800df16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	68fa      	ldr	r2, [r7, #12]
 800df1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df28:	d03e      	beq.n	800dfa8 <HAL_TIM_ConfigClockSource+0xd0>
 800df2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df2e:	f200 8087 	bhi.w	800e040 <HAL_TIM_ConfigClockSource+0x168>
 800df32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df36:	f000 8085 	beq.w	800e044 <HAL_TIM_ConfigClockSource+0x16c>
 800df3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df3e:	d87f      	bhi.n	800e040 <HAL_TIM_ConfigClockSource+0x168>
 800df40:	2b70      	cmp	r3, #112	; 0x70
 800df42:	d01a      	beq.n	800df7a <HAL_TIM_ConfigClockSource+0xa2>
 800df44:	2b70      	cmp	r3, #112	; 0x70
 800df46:	d87b      	bhi.n	800e040 <HAL_TIM_ConfigClockSource+0x168>
 800df48:	2b60      	cmp	r3, #96	; 0x60
 800df4a:	d050      	beq.n	800dfee <HAL_TIM_ConfigClockSource+0x116>
 800df4c:	2b60      	cmp	r3, #96	; 0x60
 800df4e:	d877      	bhi.n	800e040 <HAL_TIM_ConfigClockSource+0x168>
 800df50:	2b50      	cmp	r3, #80	; 0x50
 800df52:	d03c      	beq.n	800dfce <HAL_TIM_ConfigClockSource+0xf6>
 800df54:	2b50      	cmp	r3, #80	; 0x50
 800df56:	d873      	bhi.n	800e040 <HAL_TIM_ConfigClockSource+0x168>
 800df58:	2b40      	cmp	r3, #64	; 0x40
 800df5a:	d058      	beq.n	800e00e <HAL_TIM_ConfigClockSource+0x136>
 800df5c:	2b40      	cmp	r3, #64	; 0x40
 800df5e:	d86f      	bhi.n	800e040 <HAL_TIM_ConfigClockSource+0x168>
 800df60:	2b30      	cmp	r3, #48	; 0x30
 800df62:	d064      	beq.n	800e02e <HAL_TIM_ConfigClockSource+0x156>
 800df64:	2b30      	cmp	r3, #48	; 0x30
 800df66:	d86b      	bhi.n	800e040 <HAL_TIM_ConfigClockSource+0x168>
 800df68:	2b20      	cmp	r3, #32
 800df6a:	d060      	beq.n	800e02e <HAL_TIM_ConfigClockSource+0x156>
 800df6c:	2b20      	cmp	r3, #32
 800df6e:	d867      	bhi.n	800e040 <HAL_TIM_ConfigClockSource+0x168>
 800df70:	2b00      	cmp	r3, #0
 800df72:	d05c      	beq.n	800e02e <HAL_TIM_ConfigClockSource+0x156>
 800df74:	2b10      	cmp	r3, #16
 800df76:	d05a      	beq.n	800e02e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800df78:	e062      	b.n	800e040 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6818      	ldr	r0, [r3, #0]
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	6899      	ldr	r1, [r3, #8]
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	685a      	ldr	r2, [r3, #4]
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	68db      	ldr	r3, [r3, #12]
 800df8a:	f000 fc0b 	bl	800e7a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	689b      	ldr	r3, [r3, #8]
 800df94:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800df9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	68fa      	ldr	r2, [r7, #12]
 800dfa4:	609a      	str	r2, [r3, #8]
      break;
 800dfa6:	e04e      	b.n	800e046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6818      	ldr	r0, [r3, #0]
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	6899      	ldr	r1, [r3, #8]
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	685a      	ldr	r2, [r3, #4]
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	68db      	ldr	r3, [r3, #12]
 800dfb8:	f000 fbf4 	bl	800e7a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	689a      	ldr	r2, [r3, #8]
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dfca:	609a      	str	r2, [r3, #8]
      break;
 800dfcc:	e03b      	b.n	800e046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6818      	ldr	r0, [r3, #0]
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	6859      	ldr	r1, [r3, #4]
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	68db      	ldr	r3, [r3, #12]
 800dfda:	461a      	mov	r2, r3
 800dfdc:	f000 fb68 	bl	800e6b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	2150      	movs	r1, #80	; 0x50
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f000 fbc1 	bl	800e76e <TIM_ITRx_SetConfig>
      break;
 800dfec:	e02b      	b.n	800e046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6818      	ldr	r0, [r3, #0]
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	6859      	ldr	r1, [r3, #4]
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	68db      	ldr	r3, [r3, #12]
 800dffa:	461a      	mov	r2, r3
 800dffc:	f000 fb87 	bl	800e70e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2160      	movs	r1, #96	; 0x60
 800e006:	4618      	mov	r0, r3
 800e008:	f000 fbb1 	bl	800e76e <TIM_ITRx_SetConfig>
      break;
 800e00c:	e01b      	b.n	800e046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6818      	ldr	r0, [r3, #0]
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	6859      	ldr	r1, [r3, #4]
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	68db      	ldr	r3, [r3, #12]
 800e01a:	461a      	mov	r2, r3
 800e01c:	f000 fb48 	bl	800e6b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2140      	movs	r1, #64	; 0x40
 800e026:	4618      	mov	r0, r3
 800e028:	f000 fba1 	bl	800e76e <TIM_ITRx_SetConfig>
      break;
 800e02c:	e00b      	b.n	800e046 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	4619      	mov	r1, r3
 800e038:	4610      	mov	r0, r2
 800e03a:	f000 fb98 	bl	800e76e <TIM_ITRx_SetConfig>
        break;
 800e03e:	e002      	b.n	800e046 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800e040:	bf00      	nop
 800e042:	e000      	b.n	800e046 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800e044:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2201      	movs	r2, #1
 800e04a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2200      	movs	r2, #0
 800e052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e056:	2300      	movs	r3, #0
}
 800e058:	4618      	mov	r0, r3
 800e05a:	3710      	adds	r7, #16
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}
 800e060:	fffeff88 	.word	0xfffeff88

0800e064 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e064:	b480      	push	{r7}
 800e066:	b083      	sub	sp, #12
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e06c:	bf00      	nop
 800e06e:	370c      	adds	r7, #12
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr

0800e078 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e078:	b480      	push	{r7}
 800e07a:	b083      	sub	sp, #12
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e080:	bf00      	nop
 800e082:	370c      	adds	r7, #12
 800e084:	46bd      	mov	sp, r7
 800e086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08a:	4770      	bx	lr

0800e08c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e08c:	b480      	push	{r7}
 800e08e:	b083      	sub	sp, #12
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e094:	bf00      	nop
 800e096:	370c      	adds	r7, #12
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr

0800e0a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b083      	sub	sp, #12
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e0a8:	bf00      	nop
 800e0aa:	370c      	adds	r7, #12
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr

0800e0b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b085      	sub	sp, #20
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	4a40      	ldr	r2, [pc, #256]	; (800e1c8 <TIM_Base_SetConfig+0x114>)
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d013      	beq.n	800e0f4 <TIM_Base_SetConfig+0x40>
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0d2:	d00f      	beq.n	800e0f4 <TIM_Base_SetConfig+0x40>
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	4a3d      	ldr	r2, [pc, #244]	; (800e1cc <TIM_Base_SetConfig+0x118>)
 800e0d8:	4293      	cmp	r3, r2
 800e0da:	d00b      	beq.n	800e0f4 <TIM_Base_SetConfig+0x40>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	4a3c      	ldr	r2, [pc, #240]	; (800e1d0 <TIM_Base_SetConfig+0x11c>)
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	d007      	beq.n	800e0f4 <TIM_Base_SetConfig+0x40>
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	4a3b      	ldr	r2, [pc, #236]	; (800e1d4 <TIM_Base_SetConfig+0x120>)
 800e0e8:	4293      	cmp	r3, r2
 800e0ea:	d003      	beq.n	800e0f4 <TIM_Base_SetConfig+0x40>
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	4a3a      	ldr	r2, [pc, #232]	; (800e1d8 <TIM_Base_SetConfig+0x124>)
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d108      	bne.n	800e106 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	68fa      	ldr	r2, [r7, #12]
 800e102:	4313      	orrs	r3, r2
 800e104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	4a2f      	ldr	r2, [pc, #188]	; (800e1c8 <TIM_Base_SetConfig+0x114>)
 800e10a:	4293      	cmp	r3, r2
 800e10c:	d02b      	beq.n	800e166 <TIM_Base_SetConfig+0xb2>
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e114:	d027      	beq.n	800e166 <TIM_Base_SetConfig+0xb2>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	4a2c      	ldr	r2, [pc, #176]	; (800e1cc <TIM_Base_SetConfig+0x118>)
 800e11a:	4293      	cmp	r3, r2
 800e11c:	d023      	beq.n	800e166 <TIM_Base_SetConfig+0xb2>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	4a2b      	ldr	r2, [pc, #172]	; (800e1d0 <TIM_Base_SetConfig+0x11c>)
 800e122:	4293      	cmp	r3, r2
 800e124:	d01f      	beq.n	800e166 <TIM_Base_SetConfig+0xb2>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	4a2a      	ldr	r2, [pc, #168]	; (800e1d4 <TIM_Base_SetConfig+0x120>)
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d01b      	beq.n	800e166 <TIM_Base_SetConfig+0xb2>
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	4a29      	ldr	r2, [pc, #164]	; (800e1d8 <TIM_Base_SetConfig+0x124>)
 800e132:	4293      	cmp	r3, r2
 800e134:	d017      	beq.n	800e166 <TIM_Base_SetConfig+0xb2>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	4a28      	ldr	r2, [pc, #160]	; (800e1dc <TIM_Base_SetConfig+0x128>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d013      	beq.n	800e166 <TIM_Base_SetConfig+0xb2>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	4a27      	ldr	r2, [pc, #156]	; (800e1e0 <TIM_Base_SetConfig+0x12c>)
 800e142:	4293      	cmp	r3, r2
 800e144:	d00f      	beq.n	800e166 <TIM_Base_SetConfig+0xb2>
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	4a26      	ldr	r2, [pc, #152]	; (800e1e4 <TIM_Base_SetConfig+0x130>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d00b      	beq.n	800e166 <TIM_Base_SetConfig+0xb2>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	4a25      	ldr	r2, [pc, #148]	; (800e1e8 <TIM_Base_SetConfig+0x134>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d007      	beq.n	800e166 <TIM_Base_SetConfig+0xb2>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	4a24      	ldr	r2, [pc, #144]	; (800e1ec <TIM_Base_SetConfig+0x138>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d003      	beq.n	800e166 <TIM_Base_SetConfig+0xb2>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	4a23      	ldr	r2, [pc, #140]	; (800e1f0 <TIM_Base_SetConfig+0x13c>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d108      	bne.n	800e178 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e16c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	68db      	ldr	r3, [r3, #12]
 800e172:	68fa      	ldr	r2, [r7, #12]
 800e174:	4313      	orrs	r3, r2
 800e176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	695b      	ldr	r3, [r3, #20]
 800e182:	4313      	orrs	r3, r2
 800e184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	68fa      	ldr	r2, [r7, #12]
 800e18a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	689a      	ldr	r2, [r3, #8]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	4a0a      	ldr	r2, [pc, #40]	; (800e1c8 <TIM_Base_SetConfig+0x114>)
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d003      	beq.n	800e1ac <TIM_Base_SetConfig+0xf8>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	4a0c      	ldr	r2, [pc, #48]	; (800e1d8 <TIM_Base_SetConfig+0x124>)
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	d103      	bne.n	800e1b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	691a      	ldr	r2, [r3, #16]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	615a      	str	r2, [r3, #20]
}
 800e1ba:	bf00      	nop
 800e1bc:	3714      	adds	r7, #20
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr
 800e1c6:	bf00      	nop
 800e1c8:	40010000 	.word	0x40010000
 800e1cc:	40000400 	.word	0x40000400
 800e1d0:	40000800 	.word	0x40000800
 800e1d4:	40000c00 	.word	0x40000c00
 800e1d8:	40010400 	.word	0x40010400
 800e1dc:	40014000 	.word	0x40014000
 800e1e0:	40014400 	.word	0x40014400
 800e1e4:	40014800 	.word	0x40014800
 800e1e8:	40001800 	.word	0x40001800
 800e1ec:	40001c00 	.word	0x40001c00
 800e1f0:	40002000 	.word	0x40002000

0800e1f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b087      	sub	sp, #28
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
 800e1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6a1b      	ldr	r3, [r3, #32]
 800e202:	f023 0201 	bic.w	r2, r3, #1
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6a1b      	ldr	r3, [r3, #32]
 800e20e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	699b      	ldr	r3, [r3, #24]
 800e21a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e21c:	68fa      	ldr	r2, [r7, #12]
 800e21e:	4b2b      	ldr	r3, [pc, #172]	; (800e2cc <TIM_OC1_SetConfig+0xd8>)
 800e220:	4013      	ands	r3, r2
 800e222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	f023 0303 	bic.w	r3, r3, #3
 800e22a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	68fa      	ldr	r2, [r7, #12]
 800e232:	4313      	orrs	r3, r2
 800e234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	f023 0302 	bic.w	r3, r3, #2
 800e23c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	689b      	ldr	r3, [r3, #8]
 800e242:	697a      	ldr	r2, [r7, #20]
 800e244:	4313      	orrs	r3, r2
 800e246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	4a21      	ldr	r2, [pc, #132]	; (800e2d0 <TIM_OC1_SetConfig+0xdc>)
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d003      	beq.n	800e258 <TIM_OC1_SetConfig+0x64>
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	4a20      	ldr	r2, [pc, #128]	; (800e2d4 <TIM_OC1_SetConfig+0xe0>)
 800e254:	4293      	cmp	r3, r2
 800e256:	d10c      	bne.n	800e272 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	f023 0308 	bic.w	r3, r3, #8
 800e25e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	68db      	ldr	r3, [r3, #12]
 800e264:	697a      	ldr	r2, [r7, #20]
 800e266:	4313      	orrs	r3, r2
 800e268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	f023 0304 	bic.w	r3, r3, #4
 800e270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	4a16      	ldr	r2, [pc, #88]	; (800e2d0 <TIM_OC1_SetConfig+0xdc>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d003      	beq.n	800e282 <TIM_OC1_SetConfig+0x8e>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	4a15      	ldr	r2, [pc, #84]	; (800e2d4 <TIM_OC1_SetConfig+0xe0>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d111      	bne.n	800e2a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	695b      	ldr	r3, [r3, #20]
 800e296:	693a      	ldr	r2, [r7, #16]
 800e298:	4313      	orrs	r3, r2
 800e29a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	699b      	ldr	r3, [r3, #24]
 800e2a0:	693a      	ldr	r2, [r7, #16]
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	693a      	ldr	r2, [r7, #16]
 800e2aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	68fa      	ldr	r2, [r7, #12]
 800e2b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	685a      	ldr	r2, [r3, #4]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	697a      	ldr	r2, [r7, #20]
 800e2be:	621a      	str	r2, [r3, #32]
}
 800e2c0:	bf00      	nop
 800e2c2:	371c      	adds	r7, #28
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr
 800e2cc:	fffeff8f 	.word	0xfffeff8f
 800e2d0:	40010000 	.word	0x40010000
 800e2d4:	40010400 	.word	0x40010400

0800e2d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b087      	sub	sp, #28
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6a1b      	ldr	r3, [r3, #32]
 800e2e6:	f023 0210 	bic.w	r2, r3, #16
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6a1b      	ldr	r3, [r3, #32]
 800e2f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	699b      	ldr	r3, [r3, #24]
 800e2fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e300:	68fa      	ldr	r2, [r7, #12]
 800e302:	4b2e      	ldr	r3, [pc, #184]	; (800e3bc <TIM_OC2_SetConfig+0xe4>)
 800e304:	4013      	ands	r3, r2
 800e306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e30e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	021b      	lsls	r3, r3, #8
 800e316:	68fa      	ldr	r2, [r7, #12]
 800e318:	4313      	orrs	r3, r2
 800e31a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	f023 0320 	bic.w	r3, r3, #32
 800e322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	689b      	ldr	r3, [r3, #8]
 800e328:	011b      	lsls	r3, r3, #4
 800e32a:	697a      	ldr	r2, [r7, #20]
 800e32c:	4313      	orrs	r3, r2
 800e32e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	4a23      	ldr	r2, [pc, #140]	; (800e3c0 <TIM_OC2_SetConfig+0xe8>)
 800e334:	4293      	cmp	r3, r2
 800e336:	d003      	beq.n	800e340 <TIM_OC2_SetConfig+0x68>
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	4a22      	ldr	r2, [pc, #136]	; (800e3c4 <TIM_OC2_SetConfig+0xec>)
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d10d      	bne.n	800e35c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	68db      	ldr	r3, [r3, #12]
 800e34c:	011b      	lsls	r3, r3, #4
 800e34e:	697a      	ldr	r2, [r7, #20]
 800e350:	4313      	orrs	r3, r2
 800e352:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e35a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	4a18      	ldr	r2, [pc, #96]	; (800e3c0 <TIM_OC2_SetConfig+0xe8>)
 800e360:	4293      	cmp	r3, r2
 800e362:	d003      	beq.n	800e36c <TIM_OC2_SetConfig+0x94>
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	4a17      	ldr	r2, [pc, #92]	; (800e3c4 <TIM_OC2_SetConfig+0xec>)
 800e368:	4293      	cmp	r3, r2
 800e36a:	d113      	bne.n	800e394 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e372:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e37a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	695b      	ldr	r3, [r3, #20]
 800e380:	009b      	lsls	r3, r3, #2
 800e382:	693a      	ldr	r2, [r7, #16]
 800e384:	4313      	orrs	r3, r2
 800e386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	699b      	ldr	r3, [r3, #24]
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	693a      	ldr	r2, [r7, #16]
 800e390:	4313      	orrs	r3, r2
 800e392:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	693a      	ldr	r2, [r7, #16]
 800e398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	68fa      	ldr	r2, [r7, #12]
 800e39e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	685a      	ldr	r2, [r3, #4]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	697a      	ldr	r2, [r7, #20]
 800e3ac:	621a      	str	r2, [r3, #32]
}
 800e3ae:	bf00      	nop
 800e3b0:	371c      	adds	r7, #28
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b8:	4770      	bx	lr
 800e3ba:	bf00      	nop
 800e3bc:	feff8fff 	.word	0xfeff8fff
 800e3c0:	40010000 	.word	0x40010000
 800e3c4:	40010400 	.word	0x40010400

0800e3c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b087      	sub	sp, #28
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6a1b      	ldr	r3, [r3, #32]
 800e3d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6a1b      	ldr	r3, [r3, #32]
 800e3e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	69db      	ldr	r3, [r3, #28]
 800e3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e3f0:	68fa      	ldr	r2, [r7, #12]
 800e3f2:	4b2d      	ldr	r3, [pc, #180]	; (800e4a8 <TIM_OC3_SetConfig+0xe0>)
 800e3f4:	4013      	ands	r3, r2
 800e3f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f023 0303 	bic.w	r3, r3, #3
 800e3fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	68fa      	ldr	r2, [r7, #12]
 800e406:	4313      	orrs	r3, r2
 800e408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	689b      	ldr	r3, [r3, #8]
 800e416:	021b      	lsls	r3, r3, #8
 800e418:	697a      	ldr	r2, [r7, #20]
 800e41a:	4313      	orrs	r3, r2
 800e41c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	4a22      	ldr	r2, [pc, #136]	; (800e4ac <TIM_OC3_SetConfig+0xe4>)
 800e422:	4293      	cmp	r3, r2
 800e424:	d003      	beq.n	800e42e <TIM_OC3_SetConfig+0x66>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	4a21      	ldr	r2, [pc, #132]	; (800e4b0 <TIM_OC3_SetConfig+0xe8>)
 800e42a:	4293      	cmp	r3, r2
 800e42c:	d10d      	bne.n	800e44a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e434:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	68db      	ldr	r3, [r3, #12]
 800e43a:	021b      	lsls	r3, r3, #8
 800e43c:	697a      	ldr	r2, [r7, #20]
 800e43e:	4313      	orrs	r3, r2
 800e440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	4a17      	ldr	r2, [pc, #92]	; (800e4ac <TIM_OC3_SetConfig+0xe4>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d003      	beq.n	800e45a <TIM_OC3_SetConfig+0x92>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	4a16      	ldr	r2, [pc, #88]	; (800e4b0 <TIM_OC3_SetConfig+0xe8>)
 800e456:	4293      	cmp	r3, r2
 800e458:	d113      	bne.n	800e482 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e45a:	693b      	ldr	r3, [r7, #16]
 800e45c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	695b      	ldr	r3, [r3, #20]
 800e46e:	011b      	lsls	r3, r3, #4
 800e470:	693a      	ldr	r2, [r7, #16]
 800e472:	4313      	orrs	r3, r2
 800e474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	699b      	ldr	r3, [r3, #24]
 800e47a:	011b      	lsls	r3, r3, #4
 800e47c:	693a      	ldr	r2, [r7, #16]
 800e47e:	4313      	orrs	r3, r2
 800e480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	693a      	ldr	r2, [r7, #16]
 800e486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	68fa      	ldr	r2, [r7, #12]
 800e48c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	685a      	ldr	r2, [r3, #4]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	697a      	ldr	r2, [r7, #20]
 800e49a:	621a      	str	r2, [r3, #32]
}
 800e49c:	bf00      	nop
 800e49e:	371c      	adds	r7, #28
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a6:	4770      	bx	lr
 800e4a8:	fffeff8f 	.word	0xfffeff8f
 800e4ac:	40010000 	.word	0x40010000
 800e4b0:	40010400 	.word	0x40010400

0800e4b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b087      	sub	sp, #28
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6a1b      	ldr	r3, [r3, #32]
 800e4c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6a1b      	ldr	r3, [r3, #32]
 800e4ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	69db      	ldr	r3, [r3, #28]
 800e4da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e4dc:	68fa      	ldr	r2, [r7, #12]
 800e4de:	4b1e      	ldr	r3, [pc, #120]	; (800e558 <TIM_OC4_SetConfig+0xa4>)
 800e4e0:	4013      	ands	r3, r2
 800e4e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e4ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	021b      	lsls	r3, r3, #8
 800e4f2:	68fa      	ldr	r2, [r7, #12]
 800e4f4:	4313      	orrs	r3, r2
 800e4f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e4fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	689b      	ldr	r3, [r3, #8]
 800e504:	031b      	lsls	r3, r3, #12
 800e506:	693a      	ldr	r2, [r7, #16]
 800e508:	4313      	orrs	r3, r2
 800e50a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	4a13      	ldr	r2, [pc, #76]	; (800e55c <TIM_OC4_SetConfig+0xa8>)
 800e510:	4293      	cmp	r3, r2
 800e512:	d003      	beq.n	800e51c <TIM_OC4_SetConfig+0x68>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	4a12      	ldr	r2, [pc, #72]	; (800e560 <TIM_OC4_SetConfig+0xac>)
 800e518:	4293      	cmp	r3, r2
 800e51a:	d109      	bne.n	800e530 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e522:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	695b      	ldr	r3, [r3, #20]
 800e528:	019b      	lsls	r3, r3, #6
 800e52a:	697a      	ldr	r2, [r7, #20]
 800e52c:	4313      	orrs	r3, r2
 800e52e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	697a      	ldr	r2, [r7, #20]
 800e534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	68fa      	ldr	r2, [r7, #12]
 800e53a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	685a      	ldr	r2, [r3, #4]
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	693a      	ldr	r2, [r7, #16]
 800e548:	621a      	str	r2, [r3, #32]
}
 800e54a:	bf00      	nop
 800e54c:	371c      	adds	r7, #28
 800e54e:	46bd      	mov	sp, r7
 800e550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e554:	4770      	bx	lr
 800e556:	bf00      	nop
 800e558:	feff8fff 	.word	0xfeff8fff
 800e55c:	40010000 	.word	0x40010000
 800e560:	40010400 	.word	0x40010400

0800e564 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e564:	b480      	push	{r7}
 800e566:	b087      	sub	sp, #28
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6a1b      	ldr	r3, [r3, #32]
 800e572:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6a1b      	ldr	r3, [r3, #32]
 800e57e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e58a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e58c:	68fa      	ldr	r2, [r7, #12]
 800e58e:	4b1b      	ldr	r3, [pc, #108]	; (800e5fc <TIM_OC5_SetConfig+0x98>)
 800e590:	4013      	ands	r3, r2
 800e592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	68fa      	ldr	r2, [r7, #12]
 800e59a:	4313      	orrs	r3, r2
 800e59c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e5a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	689b      	ldr	r3, [r3, #8]
 800e5aa:	041b      	lsls	r3, r3, #16
 800e5ac:	693a      	ldr	r2, [r7, #16]
 800e5ae:	4313      	orrs	r3, r2
 800e5b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	4a12      	ldr	r2, [pc, #72]	; (800e600 <TIM_OC5_SetConfig+0x9c>)
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d003      	beq.n	800e5c2 <TIM_OC5_SetConfig+0x5e>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	4a11      	ldr	r2, [pc, #68]	; (800e604 <TIM_OC5_SetConfig+0xa0>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d109      	bne.n	800e5d6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e5c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	695b      	ldr	r3, [r3, #20]
 800e5ce:	021b      	lsls	r3, r3, #8
 800e5d0:	697a      	ldr	r2, [r7, #20]
 800e5d2:	4313      	orrs	r3, r2
 800e5d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	697a      	ldr	r2, [r7, #20]
 800e5da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	68fa      	ldr	r2, [r7, #12]
 800e5e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	685a      	ldr	r2, [r3, #4]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	693a      	ldr	r2, [r7, #16]
 800e5ee:	621a      	str	r2, [r3, #32]
}
 800e5f0:	bf00      	nop
 800e5f2:	371c      	adds	r7, #28
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr
 800e5fc:	fffeff8f 	.word	0xfffeff8f
 800e600:	40010000 	.word	0x40010000
 800e604:	40010400 	.word	0x40010400

0800e608 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e608:	b480      	push	{r7}
 800e60a:	b087      	sub	sp, #28
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6a1b      	ldr	r3, [r3, #32]
 800e616:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6a1b      	ldr	r3, [r3, #32]
 800e622:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e62e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e630:	68fa      	ldr	r2, [r7, #12]
 800e632:	4b1c      	ldr	r3, [pc, #112]	; (800e6a4 <TIM_OC6_SetConfig+0x9c>)
 800e634:	4013      	ands	r3, r2
 800e636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	021b      	lsls	r3, r3, #8
 800e63e:	68fa      	ldr	r2, [r7, #12]
 800e640:	4313      	orrs	r3, r2
 800e642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e64a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	689b      	ldr	r3, [r3, #8]
 800e650:	051b      	lsls	r3, r3, #20
 800e652:	693a      	ldr	r2, [r7, #16]
 800e654:	4313      	orrs	r3, r2
 800e656:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	4a13      	ldr	r2, [pc, #76]	; (800e6a8 <TIM_OC6_SetConfig+0xa0>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d003      	beq.n	800e668 <TIM_OC6_SetConfig+0x60>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	4a12      	ldr	r2, [pc, #72]	; (800e6ac <TIM_OC6_SetConfig+0xa4>)
 800e664:	4293      	cmp	r3, r2
 800e666:	d109      	bne.n	800e67c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e66e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	695b      	ldr	r3, [r3, #20]
 800e674:	029b      	lsls	r3, r3, #10
 800e676:	697a      	ldr	r2, [r7, #20]
 800e678:	4313      	orrs	r3, r2
 800e67a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	697a      	ldr	r2, [r7, #20]
 800e680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	68fa      	ldr	r2, [r7, #12]
 800e686:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	685a      	ldr	r2, [r3, #4]
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	693a      	ldr	r2, [r7, #16]
 800e694:	621a      	str	r2, [r3, #32]
}
 800e696:	bf00      	nop
 800e698:	371c      	adds	r7, #28
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop
 800e6a4:	feff8fff 	.word	0xfeff8fff
 800e6a8:	40010000 	.word	0x40010000
 800e6ac:	40010400 	.word	0x40010400

0800e6b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b087      	sub	sp, #28
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	60f8      	str	r0, [r7, #12]
 800e6b8:	60b9      	str	r1, [r7, #8]
 800e6ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	6a1b      	ldr	r3, [r3, #32]
 800e6c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	6a1b      	ldr	r3, [r3, #32]
 800e6c6:	f023 0201 	bic.w	r2, r3, #1
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	699b      	ldr	r3, [r3, #24]
 800e6d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e6da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	011b      	lsls	r3, r3, #4
 800e6e0:	693a      	ldr	r2, [r7, #16]
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	f023 030a 	bic.w	r3, r3, #10
 800e6ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e6ee:	697a      	ldr	r2, [r7, #20]
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	4313      	orrs	r3, r2
 800e6f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	693a      	ldr	r2, [r7, #16]
 800e6fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	697a      	ldr	r2, [r7, #20]
 800e700:	621a      	str	r2, [r3, #32]
}
 800e702:	bf00      	nop
 800e704:	371c      	adds	r7, #28
 800e706:	46bd      	mov	sp, r7
 800e708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70c:	4770      	bx	lr

0800e70e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e70e:	b480      	push	{r7}
 800e710:	b087      	sub	sp, #28
 800e712:	af00      	add	r7, sp, #0
 800e714:	60f8      	str	r0, [r7, #12]
 800e716:	60b9      	str	r1, [r7, #8]
 800e718:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	6a1b      	ldr	r3, [r3, #32]
 800e71e:	f023 0210 	bic.w	r2, r3, #16
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	699b      	ldr	r3, [r3, #24]
 800e72a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	6a1b      	ldr	r3, [r3, #32]
 800e730:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e738:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	031b      	lsls	r3, r3, #12
 800e73e:	697a      	ldr	r2, [r7, #20]
 800e740:	4313      	orrs	r3, r2
 800e742:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e74a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	011b      	lsls	r3, r3, #4
 800e750:	693a      	ldr	r2, [r7, #16]
 800e752:	4313      	orrs	r3, r2
 800e754:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	697a      	ldr	r2, [r7, #20]
 800e75a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	693a      	ldr	r2, [r7, #16]
 800e760:	621a      	str	r2, [r3, #32]
}
 800e762:	bf00      	nop
 800e764:	371c      	adds	r7, #28
 800e766:	46bd      	mov	sp, r7
 800e768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76c:	4770      	bx	lr

0800e76e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e76e:	b480      	push	{r7}
 800e770:	b085      	sub	sp, #20
 800e772:	af00      	add	r7, sp, #0
 800e774:	6078      	str	r0, [r7, #4]
 800e776:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	689b      	ldr	r3, [r3, #8]
 800e77c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e784:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e786:	683a      	ldr	r2, [r7, #0]
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	4313      	orrs	r3, r2
 800e78c:	f043 0307 	orr.w	r3, r3, #7
 800e790:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	68fa      	ldr	r2, [r7, #12]
 800e796:	609a      	str	r2, [r3, #8]
}
 800e798:	bf00      	nop
 800e79a:	3714      	adds	r7, #20
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr

0800e7a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b087      	sub	sp, #28
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	607a      	str	r2, [r7, #4]
 800e7b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	689b      	ldr	r3, [r3, #8]
 800e7b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e7be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	021a      	lsls	r2, r3, #8
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	431a      	orrs	r2, r3
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	697a      	ldr	r2, [r7, #20]
 800e7ce:	4313      	orrs	r3, r2
 800e7d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	697a      	ldr	r2, [r7, #20]
 800e7d6:	609a      	str	r2, [r3, #8]
}
 800e7d8:	bf00      	nop
 800e7da:	371c      	adds	r7, #28
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr

0800e7e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b085      	sub	sp, #20
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
 800e7ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e7f4:	2b01      	cmp	r3, #1
 800e7f6:	d101      	bne.n	800e7fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e7f8:	2302      	movs	r3, #2
 800e7fa:	e06d      	b.n	800e8d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2201      	movs	r2, #1
 800e800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2202      	movs	r2, #2
 800e808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	689b      	ldr	r3, [r3, #8]
 800e81a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	4a30      	ldr	r2, [pc, #192]	; (800e8e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e822:	4293      	cmp	r3, r2
 800e824:	d004      	beq.n	800e830 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	4a2f      	ldr	r2, [pc, #188]	; (800e8e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d108      	bne.n	800e842 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e836:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	68fa      	ldr	r2, [r7, #12]
 800e83e:	4313      	orrs	r3, r2
 800e840:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e848:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	68fa      	ldr	r2, [r7, #12]
 800e850:	4313      	orrs	r3, r2
 800e852:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	68fa      	ldr	r2, [r7, #12]
 800e85a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	4a20      	ldr	r2, [pc, #128]	; (800e8e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e862:	4293      	cmp	r3, r2
 800e864:	d022      	beq.n	800e8ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e86e:	d01d      	beq.n	800e8ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	4a1d      	ldr	r2, [pc, #116]	; (800e8ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e876:	4293      	cmp	r3, r2
 800e878:	d018      	beq.n	800e8ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	4a1c      	ldr	r2, [pc, #112]	; (800e8f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e880:	4293      	cmp	r3, r2
 800e882:	d013      	beq.n	800e8ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4a1a      	ldr	r2, [pc, #104]	; (800e8f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d00e      	beq.n	800e8ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	4a15      	ldr	r2, [pc, #84]	; (800e8e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e894:	4293      	cmp	r3, r2
 800e896:	d009      	beq.n	800e8ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	4a16      	ldr	r2, [pc, #88]	; (800e8f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d004      	beq.n	800e8ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	4a15      	ldr	r2, [pc, #84]	; (800e8fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e8a8:	4293      	cmp	r3, r2
 800e8aa:	d10c      	bne.n	800e8c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e8b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	689b      	ldr	r3, [r3, #8]
 800e8b8:	68ba      	ldr	r2, [r7, #8]
 800e8ba:	4313      	orrs	r3, r2
 800e8bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	68ba      	ldr	r2, [r7, #8]
 800e8c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2201      	movs	r2, #1
 800e8ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e8d6:	2300      	movs	r3, #0
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3714      	adds	r7, #20
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr
 800e8e4:	40010000 	.word	0x40010000
 800e8e8:	40010400 	.word	0x40010400
 800e8ec:	40000400 	.word	0x40000400
 800e8f0:	40000800 	.word	0x40000800
 800e8f4:	40000c00 	.word	0x40000c00
 800e8f8:	40014000 	.word	0x40014000
 800e8fc:	40001800 	.word	0x40001800

0800e900 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e900:	b480      	push	{r7}
 800e902:	b085      	sub	sp, #20
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e90a:	2300      	movs	r3, #0
 800e90c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e914:	2b01      	cmp	r3, #1
 800e916:	d101      	bne.n	800e91c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e918:	2302      	movs	r3, #2
 800e91a:	e065      	b.n	800e9e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2201      	movs	r2, #1
 800e920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	68db      	ldr	r3, [r3, #12]
 800e92e:	4313      	orrs	r3, r2
 800e930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	689b      	ldr	r3, [r3, #8]
 800e93c:	4313      	orrs	r3, r2
 800e93e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	4313      	orrs	r3, r2
 800e94c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4313      	orrs	r3, r2
 800e95a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	691b      	ldr	r3, [r3, #16]
 800e966:	4313      	orrs	r3, r2
 800e968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	695b      	ldr	r3, [r3, #20]
 800e974:	4313      	orrs	r3, r2
 800e976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e982:	4313      	orrs	r3, r2
 800e984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	699b      	ldr	r3, [r3, #24]
 800e990:	041b      	lsls	r3, r3, #16
 800e992:	4313      	orrs	r3, r2
 800e994:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	4a16      	ldr	r2, [pc, #88]	; (800e9f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d004      	beq.n	800e9aa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4a14      	ldr	r2, [pc, #80]	; (800e9f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	d115      	bne.n	800e9d6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9b4:	051b      	lsls	r3, r3, #20
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	69db      	ldr	r3, [r3, #28]
 800e9c4:	4313      	orrs	r3, r2
 800e9c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	6a1b      	ldr	r3, [r3, #32]
 800e9d2:	4313      	orrs	r3, r2
 800e9d4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	68fa      	ldr	r2, [r7, #12]
 800e9dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e9e6:	2300      	movs	r3, #0
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	3714      	adds	r7, #20
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr
 800e9f4:	40010000 	.word	0x40010000
 800e9f8:	40010400 	.word	0x40010400

0800e9fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	b083      	sub	sp, #12
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ea04:	bf00      	nop
 800ea06:	370c      	adds	r7, #12
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0e:	4770      	bx	lr

0800ea10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ea18:	bf00      	nop
 800ea1a:	370c      	adds	r7, #12
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr

0800ea24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ea24:	b480      	push	{r7}
 800ea26:	b083      	sub	sp, #12
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ea2c:	bf00      	nop
 800ea2e:	370c      	adds	r7, #12
 800ea30:	46bd      	mov	sp, r7
 800ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea36:	4770      	bx	lr

0800ea38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d101      	bne.n	800ea4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ea46:	2301      	movs	r3, #1
 800ea48:	e040      	b.n	800eacc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d106      	bne.n	800ea60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2200      	movs	r2, #0
 800ea56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f7f4 fd08 	bl	8003470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2224      	movs	r2, #36	; 0x24
 800ea64:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	f022 0201 	bic.w	r2, r2, #1
 800ea74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f000 f8c0 	bl	800ebfc <UART_SetConfig>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d101      	bne.n	800ea86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ea82:	2301      	movs	r3, #1
 800ea84:	e022      	b.n	800eacc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d002      	beq.n	800ea94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f000 fb16 	bl	800f0c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	685a      	ldr	r2, [r3, #4]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eaa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	689a      	ldr	r2, [r3, #8]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eab2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f042 0201 	orr.w	r2, r2, #1
 800eac2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f000 fb9d 	bl	800f204 <UART_CheckIdleState>
 800eaca:	4603      	mov	r3, r0
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3708      	adds	r7, #8
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b08a      	sub	sp, #40	; 0x28
 800ead8:	af02      	add	r7, sp, #8
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	60b9      	str	r1, [r7, #8]
 800eade:	603b      	str	r3, [r7, #0]
 800eae0:	4613      	mov	r3, r2
 800eae2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eae8:	2b20      	cmp	r3, #32
 800eaea:	f040 8081 	bne.w	800ebf0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d002      	beq.n	800eafa <HAL_UART_Transmit+0x26>
 800eaf4:	88fb      	ldrh	r3, [r7, #6]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d101      	bne.n	800eafe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800eafa:	2301      	movs	r3, #1
 800eafc:	e079      	b.n	800ebf2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800eb04:	2b01      	cmp	r3, #1
 800eb06:	d101      	bne.n	800eb0c <HAL_UART_Transmit+0x38>
 800eb08:	2302      	movs	r3, #2
 800eb0a:	e072      	b.n	800ebf2 <HAL_UART_Transmit+0x11e>
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	2201      	movs	r2, #1
 800eb10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2200      	movs	r2, #0
 800eb18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2221      	movs	r2, #33	; 0x21
 800eb20:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eb22:	f7f7 f839 	bl	8005b98 <HAL_GetTick>
 800eb26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	88fa      	ldrh	r2, [r7, #6]
 800eb2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	88fa      	ldrh	r2, [r7, #6]
 800eb34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	689b      	ldr	r3, [r3, #8]
 800eb3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb40:	d108      	bne.n	800eb54 <HAL_UART_Transmit+0x80>
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	691b      	ldr	r3, [r3, #16]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d104      	bne.n	800eb54 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	61bb      	str	r3, [r7, #24]
 800eb52:	e003      	b.n	800eb5c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800eb64:	e02c      	b.n	800ebc0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	9300      	str	r3, [sp, #0]
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	2180      	movs	r1, #128	; 0x80
 800eb70:	68f8      	ldr	r0, [r7, #12]
 800eb72:	f000 fb7a 	bl	800f26a <UART_WaitOnFlagUntilTimeout>
 800eb76:	4603      	mov	r3, r0
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d001      	beq.n	800eb80 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800eb7c:	2303      	movs	r3, #3
 800eb7e:	e038      	b.n	800ebf2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800eb80:	69fb      	ldr	r3, [r7, #28]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d10b      	bne.n	800eb9e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800eb86:	69bb      	ldr	r3, [r7, #24]
 800eb88:	881b      	ldrh	r3, [r3, #0]
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eb94:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800eb96:	69bb      	ldr	r3, [r7, #24]
 800eb98:	3302      	adds	r3, #2
 800eb9a:	61bb      	str	r3, [r7, #24]
 800eb9c:	e007      	b.n	800ebae <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800eb9e:	69fb      	ldr	r3, [r7, #28]
 800eba0:	781a      	ldrb	r2, [r3, #0]
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800eba8:	69fb      	ldr	r3, [r7, #28]
 800ebaa:	3301      	adds	r3, #1
 800ebac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ebb4:	b29b      	uxth	r3, r3
 800ebb6:	3b01      	subs	r3, #1
 800ebb8:	b29a      	uxth	r2, r3
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ebc6:	b29b      	uxth	r3, r3
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d1cc      	bne.n	800eb66 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	9300      	str	r3, [sp, #0]
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	2140      	movs	r1, #64	; 0x40
 800ebd6:	68f8      	ldr	r0, [r7, #12]
 800ebd8:	f000 fb47 	bl	800f26a <UART_WaitOnFlagUntilTimeout>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d001      	beq.n	800ebe6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800ebe2:	2303      	movs	r3, #3
 800ebe4:	e005      	b.n	800ebf2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	2220      	movs	r2, #32
 800ebea:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800ebec:	2300      	movs	r3, #0
 800ebee:	e000      	b.n	800ebf2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800ebf0:	2302      	movs	r3, #2
  }
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3720      	adds	r7, #32
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
	...

0800ebfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b088      	sub	sp, #32
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ec04:	2300      	movs	r3, #0
 800ec06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	689a      	ldr	r2, [r3, #8]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	691b      	ldr	r3, [r3, #16]
 800ec10:	431a      	orrs	r2, r3
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	695b      	ldr	r3, [r3, #20]
 800ec16:	431a      	orrs	r2, r3
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	69db      	ldr	r3, [r3, #28]
 800ec1c:	4313      	orrs	r3, r2
 800ec1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	4ba7      	ldr	r3, [pc, #668]	; (800eec4 <UART_SetConfig+0x2c8>)
 800ec28:	4013      	ands	r3, r2
 800ec2a:	687a      	ldr	r2, [r7, #4]
 800ec2c:	6812      	ldr	r2, [r2, #0]
 800ec2e:	6979      	ldr	r1, [r7, #20]
 800ec30:	430b      	orrs	r3, r1
 800ec32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	68da      	ldr	r2, [r3, #12]
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	430a      	orrs	r2, r1
 800ec48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	699b      	ldr	r3, [r3, #24]
 800ec4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6a1b      	ldr	r3, [r3, #32]
 800ec54:	697a      	ldr	r2, [r7, #20]
 800ec56:	4313      	orrs	r3, r2
 800ec58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	689b      	ldr	r3, [r3, #8]
 800ec60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	697a      	ldr	r2, [r7, #20]
 800ec6a:	430a      	orrs	r2, r1
 800ec6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	4a95      	ldr	r2, [pc, #596]	; (800eec8 <UART_SetConfig+0x2cc>)
 800ec74:	4293      	cmp	r3, r2
 800ec76:	d120      	bne.n	800ecba <UART_SetConfig+0xbe>
 800ec78:	4b94      	ldr	r3, [pc, #592]	; (800eecc <UART_SetConfig+0x2d0>)
 800ec7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec7e:	f003 0303 	and.w	r3, r3, #3
 800ec82:	2b03      	cmp	r3, #3
 800ec84:	d816      	bhi.n	800ecb4 <UART_SetConfig+0xb8>
 800ec86:	a201      	add	r2, pc, #4	; (adr r2, 800ec8c <UART_SetConfig+0x90>)
 800ec88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec8c:	0800ec9d 	.word	0x0800ec9d
 800ec90:	0800eca9 	.word	0x0800eca9
 800ec94:	0800eca3 	.word	0x0800eca3
 800ec98:	0800ecaf 	.word	0x0800ecaf
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	77fb      	strb	r3, [r7, #31]
 800eca0:	e14f      	b.n	800ef42 <UART_SetConfig+0x346>
 800eca2:	2302      	movs	r3, #2
 800eca4:	77fb      	strb	r3, [r7, #31]
 800eca6:	e14c      	b.n	800ef42 <UART_SetConfig+0x346>
 800eca8:	2304      	movs	r3, #4
 800ecaa:	77fb      	strb	r3, [r7, #31]
 800ecac:	e149      	b.n	800ef42 <UART_SetConfig+0x346>
 800ecae:	2308      	movs	r3, #8
 800ecb0:	77fb      	strb	r3, [r7, #31]
 800ecb2:	e146      	b.n	800ef42 <UART_SetConfig+0x346>
 800ecb4:	2310      	movs	r3, #16
 800ecb6:	77fb      	strb	r3, [r7, #31]
 800ecb8:	e143      	b.n	800ef42 <UART_SetConfig+0x346>
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	4a84      	ldr	r2, [pc, #528]	; (800eed0 <UART_SetConfig+0x2d4>)
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d132      	bne.n	800ed2a <UART_SetConfig+0x12e>
 800ecc4:	4b81      	ldr	r3, [pc, #516]	; (800eecc <UART_SetConfig+0x2d0>)
 800ecc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecca:	f003 030c 	and.w	r3, r3, #12
 800ecce:	2b0c      	cmp	r3, #12
 800ecd0:	d828      	bhi.n	800ed24 <UART_SetConfig+0x128>
 800ecd2:	a201      	add	r2, pc, #4	; (adr r2, 800ecd8 <UART_SetConfig+0xdc>)
 800ecd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecd8:	0800ed0d 	.word	0x0800ed0d
 800ecdc:	0800ed25 	.word	0x0800ed25
 800ece0:	0800ed25 	.word	0x0800ed25
 800ece4:	0800ed25 	.word	0x0800ed25
 800ece8:	0800ed19 	.word	0x0800ed19
 800ecec:	0800ed25 	.word	0x0800ed25
 800ecf0:	0800ed25 	.word	0x0800ed25
 800ecf4:	0800ed25 	.word	0x0800ed25
 800ecf8:	0800ed13 	.word	0x0800ed13
 800ecfc:	0800ed25 	.word	0x0800ed25
 800ed00:	0800ed25 	.word	0x0800ed25
 800ed04:	0800ed25 	.word	0x0800ed25
 800ed08:	0800ed1f 	.word	0x0800ed1f
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	77fb      	strb	r3, [r7, #31]
 800ed10:	e117      	b.n	800ef42 <UART_SetConfig+0x346>
 800ed12:	2302      	movs	r3, #2
 800ed14:	77fb      	strb	r3, [r7, #31]
 800ed16:	e114      	b.n	800ef42 <UART_SetConfig+0x346>
 800ed18:	2304      	movs	r3, #4
 800ed1a:	77fb      	strb	r3, [r7, #31]
 800ed1c:	e111      	b.n	800ef42 <UART_SetConfig+0x346>
 800ed1e:	2308      	movs	r3, #8
 800ed20:	77fb      	strb	r3, [r7, #31]
 800ed22:	e10e      	b.n	800ef42 <UART_SetConfig+0x346>
 800ed24:	2310      	movs	r3, #16
 800ed26:	77fb      	strb	r3, [r7, #31]
 800ed28:	e10b      	b.n	800ef42 <UART_SetConfig+0x346>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	4a69      	ldr	r2, [pc, #420]	; (800eed4 <UART_SetConfig+0x2d8>)
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d120      	bne.n	800ed76 <UART_SetConfig+0x17a>
 800ed34:	4b65      	ldr	r3, [pc, #404]	; (800eecc <UART_SetConfig+0x2d0>)
 800ed36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ed3e:	2b30      	cmp	r3, #48	; 0x30
 800ed40:	d013      	beq.n	800ed6a <UART_SetConfig+0x16e>
 800ed42:	2b30      	cmp	r3, #48	; 0x30
 800ed44:	d814      	bhi.n	800ed70 <UART_SetConfig+0x174>
 800ed46:	2b20      	cmp	r3, #32
 800ed48:	d009      	beq.n	800ed5e <UART_SetConfig+0x162>
 800ed4a:	2b20      	cmp	r3, #32
 800ed4c:	d810      	bhi.n	800ed70 <UART_SetConfig+0x174>
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d002      	beq.n	800ed58 <UART_SetConfig+0x15c>
 800ed52:	2b10      	cmp	r3, #16
 800ed54:	d006      	beq.n	800ed64 <UART_SetConfig+0x168>
 800ed56:	e00b      	b.n	800ed70 <UART_SetConfig+0x174>
 800ed58:	2300      	movs	r3, #0
 800ed5a:	77fb      	strb	r3, [r7, #31]
 800ed5c:	e0f1      	b.n	800ef42 <UART_SetConfig+0x346>
 800ed5e:	2302      	movs	r3, #2
 800ed60:	77fb      	strb	r3, [r7, #31]
 800ed62:	e0ee      	b.n	800ef42 <UART_SetConfig+0x346>
 800ed64:	2304      	movs	r3, #4
 800ed66:	77fb      	strb	r3, [r7, #31]
 800ed68:	e0eb      	b.n	800ef42 <UART_SetConfig+0x346>
 800ed6a:	2308      	movs	r3, #8
 800ed6c:	77fb      	strb	r3, [r7, #31]
 800ed6e:	e0e8      	b.n	800ef42 <UART_SetConfig+0x346>
 800ed70:	2310      	movs	r3, #16
 800ed72:	77fb      	strb	r3, [r7, #31]
 800ed74:	e0e5      	b.n	800ef42 <UART_SetConfig+0x346>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	4a57      	ldr	r2, [pc, #348]	; (800eed8 <UART_SetConfig+0x2dc>)
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d120      	bne.n	800edc2 <UART_SetConfig+0x1c6>
 800ed80:	4b52      	ldr	r3, [pc, #328]	; (800eecc <UART_SetConfig+0x2d0>)
 800ed82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ed8a:	2bc0      	cmp	r3, #192	; 0xc0
 800ed8c:	d013      	beq.n	800edb6 <UART_SetConfig+0x1ba>
 800ed8e:	2bc0      	cmp	r3, #192	; 0xc0
 800ed90:	d814      	bhi.n	800edbc <UART_SetConfig+0x1c0>
 800ed92:	2b80      	cmp	r3, #128	; 0x80
 800ed94:	d009      	beq.n	800edaa <UART_SetConfig+0x1ae>
 800ed96:	2b80      	cmp	r3, #128	; 0x80
 800ed98:	d810      	bhi.n	800edbc <UART_SetConfig+0x1c0>
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d002      	beq.n	800eda4 <UART_SetConfig+0x1a8>
 800ed9e:	2b40      	cmp	r3, #64	; 0x40
 800eda0:	d006      	beq.n	800edb0 <UART_SetConfig+0x1b4>
 800eda2:	e00b      	b.n	800edbc <UART_SetConfig+0x1c0>
 800eda4:	2300      	movs	r3, #0
 800eda6:	77fb      	strb	r3, [r7, #31]
 800eda8:	e0cb      	b.n	800ef42 <UART_SetConfig+0x346>
 800edaa:	2302      	movs	r3, #2
 800edac:	77fb      	strb	r3, [r7, #31]
 800edae:	e0c8      	b.n	800ef42 <UART_SetConfig+0x346>
 800edb0:	2304      	movs	r3, #4
 800edb2:	77fb      	strb	r3, [r7, #31]
 800edb4:	e0c5      	b.n	800ef42 <UART_SetConfig+0x346>
 800edb6:	2308      	movs	r3, #8
 800edb8:	77fb      	strb	r3, [r7, #31]
 800edba:	e0c2      	b.n	800ef42 <UART_SetConfig+0x346>
 800edbc:	2310      	movs	r3, #16
 800edbe:	77fb      	strb	r3, [r7, #31]
 800edc0:	e0bf      	b.n	800ef42 <UART_SetConfig+0x346>
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	4a45      	ldr	r2, [pc, #276]	; (800eedc <UART_SetConfig+0x2e0>)
 800edc8:	4293      	cmp	r3, r2
 800edca:	d125      	bne.n	800ee18 <UART_SetConfig+0x21c>
 800edcc:	4b3f      	ldr	r3, [pc, #252]	; (800eecc <UART_SetConfig+0x2d0>)
 800edce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800edd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800edda:	d017      	beq.n	800ee0c <UART_SetConfig+0x210>
 800eddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ede0:	d817      	bhi.n	800ee12 <UART_SetConfig+0x216>
 800ede2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ede6:	d00b      	beq.n	800ee00 <UART_SetConfig+0x204>
 800ede8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edec:	d811      	bhi.n	800ee12 <UART_SetConfig+0x216>
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d003      	beq.n	800edfa <UART_SetConfig+0x1fe>
 800edf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edf6:	d006      	beq.n	800ee06 <UART_SetConfig+0x20a>
 800edf8:	e00b      	b.n	800ee12 <UART_SetConfig+0x216>
 800edfa:	2300      	movs	r3, #0
 800edfc:	77fb      	strb	r3, [r7, #31]
 800edfe:	e0a0      	b.n	800ef42 <UART_SetConfig+0x346>
 800ee00:	2302      	movs	r3, #2
 800ee02:	77fb      	strb	r3, [r7, #31]
 800ee04:	e09d      	b.n	800ef42 <UART_SetConfig+0x346>
 800ee06:	2304      	movs	r3, #4
 800ee08:	77fb      	strb	r3, [r7, #31]
 800ee0a:	e09a      	b.n	800ef42 <UART_SetConfig+0x346>
 800ee0c:	2308      	movs	r3, #8
 800ee0e:	77fb      	strb	r3, [r7, #31]
 800ee10:	e097      	b.n	800ef42 <UART_SetConfig+0x346>
 800ee12:	2310      	movs	r3, #16
 800ee14:	77fb      	strb	r3, [r7, #31]
 800ee16:	e094      	b.n	800ef42 <UART_SetConfig+0x346>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	4a30      	ldr	r2, [pc, #192]	; (800eee0 <UART_SetConfig+0x2e4>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d125      	bne.n	800ee6e <UART_SetConfig+0x272>
 800ee22:	4b2a      	ldr	r3, [pc, #168]	; (800eecc <UART_SetConfig+0x2d0>)
 800ee24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ee2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ee30:	d017      	beq.n	800ee62 <UART_SetConfig+0x266>
 800ee32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ee36:	d817      	bhi.n	800ee68 <UART_SetConfig+0x26c>
 800ee38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee3c:	d00b      	beq.n	800ee56 <UART_SetConfig+0x25a>
 800ee3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee42:	d811      	bhi.n	800ee68 <UART_SetConfig+0x26c>
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d003      	beq.n	800ee50 <UART_SetConfig+0x254>
 800ee48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee4c:	d006      	beq.n	800ee5c <UART_SetConfig+0x260>
 800ee4e:	e00b      	b.n	800ee68 <UART_SetConfig+0x26c>
 800ee50:	2301      	movs	r3, #1
 800ee52:	77fb      	strb	r3, [r7, #31]
 800ee54:	e075      	b.n	800ef42 <UART_SetConfig+0x346>
 800ee56:	2302      	movs	r3, #2
 800ee58:	77fb      	strb	r3, [r7, #31]
 800ee5a:	e072      	b.n	800ef42 <UART_SetConfig+0x346>
 800ee5c:	2304      	movs	r3, #4
 800ee5e:	77fb      	strb	r3, [r7, #31]
 800ee60:	e06f      	b.n	800ef42 <UART_SetConfig+0x346>
 800ee62:	2308      	movs	r3, #8
 800ee64:	77fb      	strb	r3, [r7, #31]
 800ee66:	e06c      	b.n	800ef42 <UART_SetConfig+0x346>
 800ee68:	2310      	movs	r3, #16
 800ee6a:	77fb      	strb	r3, [r7, #31]
 800ee6c:	e069      	b.n	800ef42 <UART_SetConfig+0x346>
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	4a1c      	ldr	r2, [pc, #112]	; (800eee4 <UART_SetConfig+0x2e8>)
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d137      	bne.n	800eee8 <UART_SetConfig+0x2ec>
 800ee78:	4b14      	ldr	r3, [pc, #80]	; (800eecc <UART_SetConfig+0x2d0>)
 800ee7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ee82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ee86:	d017      	beq.n	800eeb8 <UART_SetConfig+0x2bc>
 800ee88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ee8c:	d817      	bhi.n	800eebe <UART_SetConfig+0x2c2>
 800ee8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee92:	d00b      	beq.n	800eeac <UART_SetConfig+0x2b0>
 800ee94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee98:	d811      	bhi.n	800eebe <UART_SetConfig+0x2c2>
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d003      	beq.n	800eea6 <UART_SetConfig+0x2aa>
 800ee9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eea2:	d006      	beq.n	800eeb2 <UART_SetConfig+0x2b6>
 800eea4:	e00b      	b.n	800eebe <UART_SetConfig+0x2c2>
 800eea6:	2300      	movs	r3, #0
 800eea8:	77fb      	strb	r3, [r7, #31]
 800eeaa:	e04a      	b.n	800ef42 <UART_SetConfig+0x346>
 800eeac:	2302      	movs	r3, #2
 800eeae:	77fb      	strb	r3, [r7, #31]
 800eeb0:	e047      	b.n	800ef42 <UART_SetConfig+0x346>
 800eeb2:	2304      	movs	r3, #4
 800eeb4:	77fb      	strb	r3, [r7, #31]
 800eeb6:	e044      	b.n	800ef42 <UART_SetConfig+0x346>
 800eeb8:	2308      	movs	r3, #8
 800eeba:	77fb      	strb	r3, [r7, #31]
 800eebc:	e041      	b.n	800ef42 <UART_SetConfig+0x346>
 800eebe:	2310      	movs	r3, #16
 800eec0:	77fb      	strb	r3, [r7, #31]
 800eec2:	e03e      	b.n	800ef42 <UART_SetConfig+0x346>
 800eec4:	efff69f3 	.word	0xefff69f3
 800eec8:	40011000 	.word	0x40011000
 800eecc:	40023800 	.word	0x40023800
 800eed0:	40004400 	.word	0x40004400
 800eed4:	40004800 	.word	0x40004800
 800eed8:	40004c00 	.word	0x40004c00
 800eedc:	40005000 	.word	0x40005000
 800eee0:	40011400 	.word	0x40011400
 800eee4:	40007800 	.word	0x40007800
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4a71      	ldr	r2, [pc, #452]	; (800f0b4 <UART_SetConfig+0x4b8>)
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d125      	bne.n	800ef3e <UART_SetConfig+0x342>
 800eef2:	4b71      	ldr	r3, [pc, #452]	; (800f0b8 <UART_SetConfig+0x4bc>)
 800eef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eef8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800eefc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ef00:	d017      	beq.n	800ef32 <UART_SetConfig+0x336>
 800ef02:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ef06:	d817      	bhi.n	800ef38 <UART_SetConfig+0x33c>
 800ef08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef0c:	d00b      	beq.n	800ef26 <UART_SetConfig+0x32a>
 800ef0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef12:	d811      	bhi.n	800ef38 <UART_SetConfig+0x33c>
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d003      	beq.n	800ef20 <UART_SetConfig+0x324>
 800ef18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ef1c:	d006      	beq.n	800ef2c <UART_SetConfig+0x330>
 800ef1e:	e00b      	b.n	800ef38 <UART_SetConfig+0x33c>
 800ef20:	2300      	movs	r3, #0
 800ef22:	77fb      	strb	r3, [r7, #31]
 800ef24:	e00d      	b.n	800ef42 <UART_SetConfig+0x346>
 800ef26:	2302      	movs	r3, #2
 800ef28:	77fb      	strb	r3, [r7, #31]
 800ef2a:	e00a      	b.n	800ef42 <UART_SetConfig+0x346>
 800ef2c:	2304      	movs	r3, #4
 800ef2e:	77fb      	strb	r3, [r7, #31]
 800ef30:	e007      	b.n	800ef42 <UART_SetConfig+0x346>
 800ef32:	2308      	movs	r3, #8
 800ef34:	77fb      	strb	r3, [r7, #31]
 800ef36:	e004      	b.n	800ef42 <UART_SetConfig+0x346>
 800ef38:	2310      	movs	r3, #16
 800ef3a:	77fb      	strb	r3, [r7, #31]
 800ef3c:	e001      	b.n	800ef42 <UART_SetConfig+0x346>
 800ef3e:	2310      	movs	r3, #16
 800ef40:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	69db      	ldr	r3, [r3, #28]
 800ef46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef4a:	d15b      	bne.n	800f004 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800ef4c:	7ffb      	ldrb	r3, [r7, #31]
 800ef4e:	2b08      	cmp	r3, #8
 800ef50:	d827      	bhi.n	800efa2 <UART_SetConfig+0x3a6>
 800ef52:	a201      	add	r2, pc, #4	; (adr r2, 800ef58 <UART_SetConfig+0x35c>)
 800ef54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef58:	0800ef7d 	.word	0x0800ef7d
 800ef5c:	0800ef85 	.word	0x0800ef85
 800ef60:	0800ef8d 	.word	0x0800ef8d
 800ef64:	0800efa3 	.word	0x0800efa3
 800ef68:	0800ef93 	.word	0x0800ef93
 800ef6c:	0800efa3 	.word	0x0800efa3
 800ef70:	0800efa3 	.word	0x0800efa3
 800ef74:	0800efa3 	.word	0x0800efa3
 800ef78:	0800ef9b 	.word	0x0800ef9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef7c:	f7fc fe3c 	bl	800bbf8 <HAL_RCC_GetPCLK1Freq>
 800ef80:	61b8      	str	r0, [r7, #24]
        break;
 800ef82:	e013      	b.n	800efac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef84:	f7fc fe4c 	bl	800bc20 <HAL_RCC_GetPCLK2Freq>
 800ef88:	61b8      	str	r0, [r7, #24]
        break;
 800ef8a:	e00f      	b.n	800efac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ef8c:	4b4b      	ldr	r3, [pc, #300]	; (800f0bc <UART_SetConfig+0x4c0>)
 800ef8e:	61bb      	str	r3, [r7, #24]
        break;
 800ef90:	e00c      	b.n	800efac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ef92:	f7fc fd6f 	bl	800ba74 <HAL_RCC_GetSysClockFreq>
 800ef96:	61b8      	str	r0, [r7, #24]
        break;
 800ef98:	e008      	b.n	800efac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef9e:	61bb      	str	r3, [r7, #24]
        break;
 800efa0:	e004      	b.n	800efac <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800efa2:	2300      	movs	r3, #0
 800efa4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800efa6:	2301      	movs	r3, #1
 800efa8:	77bb      	strb	r3, [r7, #30]
        break;
 800efaa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800efac:	69bb      	ldr	r3, [r7, #24]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d074      	beq.n	800f09c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800efb2:	69bb      	ldr	r3, [r7, #24]
 800efb4:	005a      	lsls	r2, r3, #1
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	685b      	ldr	r3, [r3, #4]
 800efba:	085b      	lsrs	r3, r3, #1
 800efbc:	441a      	add	r2, r3
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800efc6:	b29b      	uxth	r3, r3
 800efc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	2b0f      	cmp	r3, #15
 800efce:	d916      	bls.n	800effe <UART_SetConfig+0x402>
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efd6:	d212      	bcs.n	800effe <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	b29b      	uxth	r3, r3
 800efdc:	f023 030f 	bic.w	r3, r3, #15
 800efe0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	085b      	lsrs	r3, r3, #1
 800efe6:	b29b      	uxth	r3, r3
 800efe8:	f003 0307 	and.w	r3, r3, #7
 800efec:	b29a      	uxth	r2, r3
 800efee:	89fb      	ldrh	r3, [r7, #14]
 800eff0:	4313      	orrs	r3, r2
 800eff2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	89fa      	ldrh	r2, [r7, #14]
 800effa:	60da      	str	r2, [r3, #12]
 800effc:	e04e      	b.n	800f09c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800effe:	2301      	movs	r3, #1
 800f000:	77bb      	strb	r3, [r7, #30]
 800f002:	e04b      	b.n	800f09c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f004:	7ffb      	ldrb	r3, [r7, #31]
 800f006:	2b08      	cmp	r3, #8
 800f008:	d827      	bhi.n	800f05a <UART_SetConfig+0x45e>
 800f00a:	a201      	add	r2, pc, #4	; (adr r2, 800f010 <UART_SetConfig+0x414>)
 800f00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f010:	0800f035 	.word	0x0800f035
 800f014:	0800f03d 	.word	0x0800f03d
 800f018:	0800f045 	.word	0x0800f045
 800f01c:	0800f05b 	.word	0x0800f05b
 800f020:	0800f04b 	.word	0x0800f04b
 800f024:	0800f05b 	.word	0x0800f05b
 800f028:	0800f05b 	.word	0x0800f05b
 800f02c:	0800f05b 	.word	0x0800f05b
 800f030:	0800f053 	.word	0x0800f053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f034:	f7fc fde0 	bl	800bbf8 <HAL_RCC_GetPCLK1Freq>
 800f038:	61b8      	str	r0, [r7, #24]
        break;
 800f03a:	e013      	b.n	800f064 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f03c:	f7fc fdf0 	bl	800bc20 <HAL_RCC_GetPCLK2Freq>
 800f040:	61b8      	str	r0, [r7, #24]
        break;
 800f042:	e00f      	b.n	800f064 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f044:	4b1d      	ldr	r3, [pc, #116]	; (800f0bc <UART_SetConfig+0x4c0>)
 800f046:	61bb      	str	r3, [r7, #24]
        break;
 800f048:	e00c      	b.n	800f064 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f04a:	f7fc fd13 	bl	800ba74 <HAL_RCC_GetSysClockFreq>
 800f04e:	61b8      	str	r0, [r7, #24]
        break;
 800f050:	e008      	b.n	800f064 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f056:	61bb      	str	r3, [r7, #24]
        break;
 800f058:	e004      	b.n	800f064 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800f05a:	2300      	movs	r3, #0
 800f05c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f05e:	2301      	movs	r3, #1
 800f060:	77bb      	strb	r3, [r7, #30]
        break;
 800f062:	bf00      	nop
    }

    if (pclk != 0U)
 800f064:	69bb      	ldr	r3, [r7, #24]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d018      	beq.n	800f09c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	685b      	ldr	r3, [r3, #4]
 800f06e:	085a      	lsrs	r2, r3, #1
 800f070:	69bb      	ldr	r3, [r7, #24]
 800f072:	441a      	add	r2, r3
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	fbb2 f3f3 	udiv	r3, r2, r3
 800f07c:	b29b      	uxth	r3, r3
 800f07e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	2b0f      	cmp	r3, #15
 800f084:	d908      	bls.n	800f098 <UART_SetConfig+0x49c>
 800f086:	693b      	ldr	r3, [r7, #16]
 800f088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f08c:	d204      	bcs.n	800f098 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	693a      	ldr	r2, [r7, #16]
 800f094:	60da      	str	r2, [r3, #12]
 800f096:	e001      	b.n	800f09c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800f098:	2301      	movs	r3, #1
 800f09a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800f0a8:	7fbb      	ldrb	r3, [r7, #30]
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3720      	adds	r7, #32
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	40007c00 	.word	0x40007c00
 800f0b8:	40023800 	.word	0x40023800
 800f0bc:	00f42400 	.word	0x00f42400

0800f0c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b083      	sub	sp, #12
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0cc:	f003 0301 	and.w	r3, r3, #1
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d00a      	beq.n	800f0ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	685b      	ldr	r3, [r3, #4]
 800f0da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	430a      	orrs	r2, r1
 800f0e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ee:	f003 0302 	and.w	r3, r3, #2
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d00a      	beq.n	800f10c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	685b      	ldr	r3, [r3, #4]
 800f0fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	430a      	orrs	r2, r1
 800f10a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f110:	f003 0304 	and.w	r3, r3, #4
 800f114:	2b00      	cmp	r3, #0
 800f116:	d00a      	beq.n	800f12e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	685b      	ldr	r3, [r3, #4]
 800f11e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	430a      	orrs	r2, r1
 800f12c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f132:	f003 0308 	and.w	r3, r3, #8
 800f136:	2b00      	cmp	r3, #0
 800f138:	d00a      	beq.n	800f150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	685b      	ldr	r3, [r3, #4]
 800f140:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	430a      	orrs	r2, r1
 800f14e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f154:	f003 0310 	and.w	r3, r3, #16
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d00a      	beq.n	800f172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	689b      	ldr	r3, [r3, #8]
 800f162:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	430a      	orrs	r2, r1
 800f170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f176:	f003 0320 	and.w	r3, r3, #32
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d00a      	beq.n	800f194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	689b      	ldr	r3, [r3, #8]
 800f184:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	430a      	orrs	r2, r1
 800f192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d01a      	beq.n	800f1d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	430a      	orrs	r2, r1
 800f1b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f1be:	d10a      	bne.n	800f1d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	430a      	orrs	r2, r1
 800f1d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d00a      	beq.n	800f1f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	685b      	ldr	r3, [r3, #4]
 800f1e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	430a      	orrs	r2, r1
 800f1f6:	605a      	str	r2, [r3, #4]
  }
}
 800f1f8:	bf00      	nop
 800f1fa:	370c      	adds	r7, #12
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr

0800f204 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b086      	sub	sp, #24
 800f208:	af02      	add	r7, sp, #8
 800f20a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2200      	movs	r2, #0
 800f210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f214:	f7f6 fcc0 	bl	8005b98 <HAL_GetTick>
 800f218:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f003 0308 	and.w	r3, r3, #8
 800f224:	2b08      	cmp	r3, #8
 800f226:	d10e      	bne.n	800f246 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f22c:	9300      	str	r3, [sp, #0]
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	2200      	movs	r2, #0
 800f232:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f000 f817 	bl	800f26a <UART_WaitOnFlagUntilTimeout>
 800f23c:	4603      	mov	r3, r0
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d001      	beq.n	800f246 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f242:	2303      	movs	r3, #3
 800f244:	e00d      	b.n	800f262 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2220      	movs	r2, #32
 800f24a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2220      	movs	r2, #32
 800f250:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2200      	movs	r2, #0
 800f256:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2200      	movs	r2, #0
 800f25c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800f260:	2300      	movs	r3, #0
}
 800f262:	4618      	mov	r0, r3
 800f264:	3710      	adds	r7, #16
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}

0800f26a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f26a:	b580      	push	{r7, lr}
 800f26c:	b084      	sub	sp, #16
 800f26e:	af00      	add	r7, sp, #0
 800f270:	60f8      	str	r0, [r7, #12]
 800f272:	60b9      	str	r1, [r7, #8]
 800f274:	603b      	str	r3, [r7, #0]
 800f276:	4613      	mov	r3, r2
 800f278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f27a:	e05e      	b.n	800f33a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f27c:	69bb      	ldr	r3, [r7, #24]
 800f27e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f282:	d05a      	beq.n	800f33a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f284:	f7f6 fc88 	bl	8005b98 <HAL_GetTick>
 800f288:	4602      	mov	r2, r0
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	1ad3      	subs	r3, r2, r3
 800f28e:	69ba      	ldr	r2, [r7, #24]
 800f290:	429a      	cmp	r2, r3
 800f292:	d302      	bcc.n	800f29a <UART_WaitOnFlagUntilTimeout+0x30>
 800f294:	69bb      	ldr	r3, [r7, #24]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d11b      	bne.n	800f2d2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	681a      	ldr	r2, [r3, #0]
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f2a8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	689a      	ldr	r2, [r3, #8]
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f022 0201 	bic.w	r2, r2, #1
 800f2b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	2220      	movs	r2, #32
 800f2be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	2220      	movs	r2, #32
 800f2c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800f2ce:	2303      	movs	r3, #3
 800f2d0:	e043      	b.n	800f35a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	f003 0304 	and.w	r3, r3, #4
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d02c      	beq.n	800f33a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	69db      	ldr	r3, [r3, #28]
 800f2e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f2ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f2ee:	d124      	bne.n	800f33a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f2f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	681a      	ldr	r2, [r3, #0]
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f308:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	689a      	ldr	r2, [r3, #8]
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	f022 0201 	bic.w	r2, r2, #1
 800f318:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2220      	movs	r2, #32
 800f31e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	2220      	movs	r2, #32
 800f324:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	2220      	movs	r2, #32
 800f32a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	2200      	movs	r2, #0
 800f332:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800f336:	2303      	movs	r3, #3
 800f338:	e00f      	b.n	800f35a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	69da      	ldr	r2, [r3, #28]
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	4013      	ands	r3, r2
 800f344:	68ba      	ldr	r2, [r7, #8]
 800f346:	429a      	cmp	r2, r3
 800f348:	bf0c      	ite	eq
 800f34a:	2301      	moveq	r3, #1
 800f34c:	2300      	movne	r3, #0
 800f34e:	b2db      	uxtb	r3, r3
 800f350:	461a      	mov	r2, r3
 800f352:	79fb      	ldrb	r3, [r7, #7]
 800f354:	429a      	cmp	r2, r3
 800f356:	d091      	beq.n	800f27c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f358:	2300      	movs	r3, #0
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	3710      	adds	r7, #16
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd80      	pop	{r7, pc}
	...

0800f364 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800f364:	b480      	push	{r7}
 800f366:	b085      	sub	sp, #20
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800f36e:	2300      	movs	r3, #0
 800f370:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800f372:	2300      	movs	r3, #0
 800f374:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	2b01      	cmp	r3, #1
 800f37c:	d027      	beq.n	800f3ce <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800f384:	68fa      	ldr	r2, [r7, #12]
 800f386:	4b2f      	ldr	r3, [pc, #188]	; (800f444 <FMC_SDRAM_Init+0xe0>)
 800f388:	4013      	ands	r3, r2
 800f38a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f394:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800f39a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800f3a0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800f3a6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800f3ac:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800f3b2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800f3b8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800f3be:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f3c0:	68fa      	ldr	r2, [r7, #12]
 800f3c2:	4313      	orrs	r3, r2
 800f3c4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	68fa      	ldr	r2, [r7, #12]
 800f3ca:	601a      	str	r2, [r3, #0]
 800f3cc:	e032      	b.n	800f434 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f3da:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800f3e4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800f3ea:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800f3ec:	68fa      	ldr	r2, [r7, #12]
 800f3ee:	4313      	orrs	r3, r2
 800f3f0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	685b      	ldr	r3, [r3, #4]
 800f3f6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800f3f8:	68ba      	ldr	r2, [r7, #8]
 800f3fa:	4b12      	ldr	r3, [pc, #72]	; (800f444 <FMC_SDRAM_Init+0xe0>)
 800f3fc:	4013      	ands	r3, r2
 800f3fe:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f408:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800f40e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800f414:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800f41a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800f420:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f422:	68ba      	ldr	r2, [r7, #8]
 800f424:	4313      	orrs	r3, r2
 800f426:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	68fa      	ldr	r2, [r7, #12]
 800f42c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	68ba      	ldr	r2, [r7, #8]
 800f432:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800f434:	2300      	movs	r3, #0
}
 800f436:	4618      	mov	r0, r3
 800f438:	3714      	adds	r7, #20
 800f43a:	46bd      	mov	sp, r7
 800f43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f440:	4770      	bx	lr
 800f442:	bf00      	nop
 800f444:	ffff8000 	.word	0xffff8000

0800f448 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f448:	b480      	push	{r7}
 800f44a:	b087      	sub	sp, #28
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	60f8      	str	r0, [r7, #12]
 800f450:	60b9      	str	r1, [r7, #8]
 800f452:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800f454:	2300      	movs	r3, #0
 800f456:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800f458:	2300      	movs	r3, #0
 800f45a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2b01      	cmp	r3, #1
 800f460:	d02e      	beq.n	800f4c0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	689b      	ldr	r3, [r3, #8]
 800f466:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f46e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	685b      	ldr	r3, [r3, #4]
 800f47a:	3b01      	subs	r3, #1
 800f47c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f47e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	689b      	ldr	r3, [r3, #8]
 800f484:	3b01      	subs	r3, #1
 800f486:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800f488:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	68db      	ldr	r3, [r3, #12]
 800f48e:	3b01      	subs	r3, #1
 800f490:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800f492:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	691b      	ldr	r3, [r3, #16]
 800f498:	3b01      	subs	r3, #1
 800f49a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800f49c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	695b      	ldr	r3, [r3, #20]
 800f4a2:	3b01      	subs	r3, #1
 800f4a4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800f4a6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	699b      	ldr	r3, [r3, #24]
 800f4ac:	3b01      	subs	r3, #1
 800f4ae:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f4b0:	4313      	orrs	r3, r2
 800f4b2:	697a      	ldr	r2, [r7, #20]
 800f4b4:	4313      	orrs	r3, r2
 800f4b6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	697a      	ldr	r2, [r7, #20]
 800f4bc:	609a      	str	r2, [r3, #8]
 800f4be:	e039      	b.n	800f534 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	689b      	ldr	r3, [r3, #8]
 800f4c4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800f4c6:	697a      	ldr	r2, [r7, #20]
 800f4c8:	4b1e      	ldr	r3, [pc, #120]	; (800f544 <FMC_SDRAM_Timing_Init+0xfc>)
 800f4ca:	4013      	ands	r3, r2
 800f4cc:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	68db      	ldr	r3, [r3, #12]
 800f4d2:	3b01      	subs	r3, #1
 800f4d4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	695b      	ldr	r3, [r3, #20]
 800f4da:	3b01      	subs	r3, #1
 800f4dc:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800f4de:	4313      	orrs	r3, r2
 800f4e0:	697a      	ldr	r2, [r7, #20]
 800f4e2:	4313      	orrs	r3, r2
 800f4e4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	68db      	ldr	r3, [r3, #12]
 800f4ea:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f4f2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	685b      	ldr	r3, [r3, #4]
 800f4fe:	3b01      	subs	r3, #1
 800f500:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f502:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	689b      	ldr	r3, [r3, #8]
 800f508:	3b01      	subs	r3, #1
 800f50a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800f50c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	691b      	ldr	r3, [r3, #16]
 800f512:	3b01      	subs	r3, #1
 800f514:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800f516:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	699b      	ldr	r3, [r3, #24]
 800f51c:	3b01      	subs	r3, #1
 800f51e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f520:	4313      	orrs	r3, r2
 800f522:	693a      	ldr	r2, [r7, #16]
 800f524:	4313      	orrs	r3, r2
 800f526:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	697a      	ldr	r2, [r7, #20]
 800f52c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	693a      	ldr	r2, [r7, #16]
 800f532:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800f534:	2300      	movs	r3, #0
}
 800f536:	4618      	mov	r0, r3
 800f538:	371c      	adds	r7, #28
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr
 800f542:	bf00      	nop
 800f544:	ff0f0fff 	.word	0xff0f0fff

0800f548 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800f548:	b480      	push	{r7}
 800f54a:	b085      	sub	sp, #20
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	60b9      	str	r1, [r7, #8]
 800f552:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	691a      	ldr	r2, [r3, #16]
 800f558:	4b0c      	ldr	r3, [pc, #48]	; (800f58c <FMC_SDRAM_SendCommand+0x44>)
 800f55a:	4013      	ands	r3, r2
 800f55c:	68ba      	ldr	r2, [r7, #8]
 800f55e:	6811      	ldr	r1, [r2, #0]
 800f560:	68ba      	ldr	r2, [r7, #8]
 800f562:	6852      	ldr	r2, [r2, #4]
 800f564:	4311      	orrs	r1, r2
 800f566:	68ba      	ldr	r2, [r7, #8]
 800f568:	6892      	ldr	r2, [r2, #8]
 800f56a:	3a01      	subs	r2, #1
 800f56c:	0152      	lsls	r2, r2, #5
 800f56e:	4311      	orrs	r1, r2
 800f570:	68ba      	ldr	r2, [r7, #8]
 800f572:	68d2      	ldr	r2, [r2, #12]
 800f574:	0252      	lsls	r2, r2, #9
 800f576:	430a      	orrs	r2, r1
 800f578:	431a      	orrs	r2, r3
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800f57e:	2300      	movs	r3, #0
}
 800f580:	4618      	mov	r0, r3
 800f582:	3714      	adds	r7, #20
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr
 800f58c:	ffc00000 	.word	0xffc00000

0800f590 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800f590:	b480      	push	{r7}
 800f592:	b083      	sub	sp, #12
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	695a      	ldr	r2, [r3, #20]
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	005b      	lsls	r3, r3, #1
 800f5a2:	431a      	orrs	r2, r3
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800f5a8:	2300      	movs	r3, #0
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	370c      	adds	r7, #12
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr

0800f5b6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f5b6:	b480      	push	{r7}
 800f5b8:	b083      	sub	sp, #12
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	689b      	ldr	r3, [r3, #8]
 800f5c2:	f043 0201 	orr.w	r2, r3, #1
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f5ca:	2300      	movs	r3, #0
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	370c      	adds	r7, #12
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d6:	4770      	bx	lr

0800f5d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f5d8:	b480      	push	{r7}
 800f5da:	b083      	sub	sp, #12
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	689b      	ldr	r3, [r3, #8]
 800f5e4:	f023 0201 	bic.w	r2, r3, #1
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f5ec:	2300      	movs	r3, #0
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	370c      	adds	r7, #12
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr
	...

0800f5fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b085      	sub	sp, #20
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f606:	2300      	movs	r3, #0
 800f608:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	019b      	lsls	r3, r3, #6
 800f60e:	f043 0220 	orr.w	r2, r3, #32
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	3301      	adds	r3, #1
 800f61a:	60fb      	str	r3, [r7, #12]
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	4a09      	ldr	r2, [pc, #36]	; (800f644 <USB_FlushTxFifo+0x48>)
 800f620:	4293      	cmp	r3, r2
 800f622:	d901      	bls.n	800f628 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f624:	2303      	movs	r3, #3
 800f626:	e006      	b.n	800f636 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	691b      	ldr	r3, [r3, #16]
 800f62c:	f003 0320 	and.w	r3, r3, #32
 800f630:	2b20      	cmp	r3, #32
 800f632:	d0f0      	beq.n	800f616 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f634:	2300      	movs	r3, #0
}
 800f636:	4618      	mov	r0, r3
 800f638:	3714      	adds	r7, #20
 800f63a:	46bd      	mov	sp, r7
 800f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f640:	4770      	bx	lr
 800f642:	bf00      	nop
 800f644:	00030d40 	.word	0x00030d40

0800f648 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f648:	b480      	push	{r7}
 800f64a:	b085      	sub	sp, #20
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f650:	2300      	movs	r3, #0
 800f652:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2210      	movs	r2, #16
 800f658:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	3301      	adds	r3, #1
 800f65e:	60fb      	str	r3, [r7, #12]
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	4a09      	ldr	r2, [pc, #36]	; (800f688 <USB_FlushRxFifo+0x40>)
 800f664:	4293      	cmp	r3, r2
 800f666:	d901      	bls.n	800f66c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f668:	2303      	movs	r3, #3
 800f66a:	e006      	b.n	800f67a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	691b      	ldr	r3, [r3, #16]
 800f670:	f003 0310 	and.w	r3, r3, #16
 800f674:	2b10      	cmp	r3, #16
 800f676:	d0f0      	beq.n	800f65a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f678:	2300      	movs	r3, #0
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	3714      	adds	r7, #20
 800f67e:	46bd      	mov	sp, r7
 800f680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f684:	4770      	bx	lr
 800f686:	bf00      	nop
 800f688:	00030d40 	.word	0x00030d40

0800f68c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f68c:	b480      	push	{r7}
 800f68e:	b089      	sub	sp, #36	; 0x24
 800f690:	af00      	add	r7, sp, #0
 800f692:	60f8      	str	r0, [r7, #12]
 800f694:	60b9      	str	r1, [r7, #8]
 800f696:	4613      	mov	r3, r2
 800f698:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f6a2:	88fb      	ldrh	r3, [r7, #6]
 800f6a4:	3303      	adds	r3, #3
 800f6a6:	089b      	lsrs	r3, r3, #2
 800f6a8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	61bb      	str	r3, [r7, #24]
 800f6ae:	e00b      	b.n	800f6c8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6b6:	681a      	ldr	r2, [r3, #0]
 800f6b8:	69fb      	ldr	r3, [r7, #28]
 800f6ba:	601a      	str	r2, [r3, #0]
    pDest++;
 800f6bc:	69fb      	ldr	r3, [r7, #28]
 800f6be:	3304      	adds	r3, #4
 800f6c0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f6c2:	69bb      	ldr	r3, [r7, #24]
 800f6c4:	3301      	adds	r3, #1
 800f6c6:	61bb      	str	r3, [r7, #24]
 800f6c8:	69ba      	ldr	r2, [r7, #24]
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	d3ef      	bcc.n	800f6b0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800f6d0:	69fb      	ldr	r3, [r7, #28]
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	3724      	adds	r7, #36	; 0x24
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr

0800f6de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f6de:	b480      	push	{r7}
 800f6e0:	b085      	sub	sp, #20
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	695b      	ldr	r3, [r3, #20]
 800f6ea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	699b      	ldr	r3, [r3, #24]
 800f6f0:	68fa      	ldr	r2, [r7, #12]
 800f6f2:	4013      	ands	r3, r2
 800f6f4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3714      	adds	r7, #20
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr

0800f704 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f704:	b480      	push	{r7}
 800f706:	b083      	sub	sp, #12
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	695b      	ldr	r3, [r3, #20]
 800f710:	f003 0301 	and.w	r3, r3, #1
}
 800f714:	4618      	mov	r0, r3
 800f716:	370c      	adds	r7, #12
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr

0800f720 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800f720:	b480      	push	{r7}
 800f722:	b085      	sub	sp, #20
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	460b      	mov	r3, r1
 800f72a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	68fa      	ldr	r2, [r7, #12]
 800f73a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f73e:	f023 0303 	bic.w	r3, r3, #3
 800f742:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f74a:	681a      	ldr	r2, [r3, #0]
 800f74c:	78fb      	ldrb	r3, [r7, #3]
 800f74e:	f003 0303 	and.w	r3, r3, #3
 800f752:	68f9      	ldr	r1, [r7, #12]
 800f754:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f758:	4313      	orrs	r3, r2
 800f75a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800f75c:	78fb      	ldrb	r3, [r7, #3]
 800f75e:	2b01      	cmp	r3, #1
 800f760:	d107      	bne.n	800f772 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f768:	461a      	mov	r2, r3
 800f76a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f76e:	6053      	str	r3, [r2, #4]
 800f770:	e009      	b.n	800f786 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800f772:	78fb      	ldrb	r3, [r7, #3]
 800f774:	2b02      	cmp	r3, #2
 800f776:	d106      	bne.n	800f786 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f77e:	461a      	mov	r2, r3
 800f780:	f241 7370 	movw	r3, #6000	; 0x1770
 800f784:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800f786:	2300      	movs	r3, #0
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3714      	adds	r7, #20
 800f78c:	46bd      	mov	sp, r7
 800f78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f792:	4770      	bx	lr

0800f794 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f794:	b480      	push	{r7}
 800f796:	b085      	sub	sp, #20
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f7a6:	695b      	ldr	r3, [r3, #20]
 800f7a8:	b29b      	uxth	r3, r3
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3714      	adds	r7, #20
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b4:	4770      	bx	lr

0800f7b6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800f7b6:	b480      	push	{r7}
 800f7b8:	b089      	sub	sp, #36	; 0x24
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	6078      	str	r0, [r7, #4]
 800f7be:	460b      	mov	r3, r1
 800f7c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800f7c6:	78fb      	ldrb	r3, [r7, #3]
 800f7c8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	015a      	lsls	r2, r3, #5
 800f7d2:	69bb      	ldr	r3, [r7, #24]
 800f7d4:	4413      	add	r3, r2
 800f7d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	0c9b      	lsrs	r3, r3, #18
 800f7de:	f003 0303 	and.w	r3, r3, #3
 800f7e2:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	015a      	lsls	r2, r3, #5
 800f7e8:	69bb      	ldr	r3, [r7, #24]
 800f7ea:	4413      	add	r3, r2
 800f7ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	0fdb      	lsrs	r3, r3, #31
 800f7f4:	f003 0301 	and.w	r3, r3, #1
 800f7f8:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	689b      	ldr	r3, [r3, #8]
 800f7fe:	f003 0320 	and.w	r3, r3, #32
 800f802:	2b20      	cmp	r3, #32
 800f804:	d104      	bne.n	800f810 <USB_HC_Halt+0x5a>
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d101      	bne.n	800f810 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800f80c:	2300      	movs	r3, #0
 800f80e:	e0e8      	b.n	800f9e2 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800f810:	693b      	ldr	r3, [r7, #16]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d002      	beq.n	800f81c <USB_HC_Halt+0x66>
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	2b02      	cmp	r3, #2
 800f81a:	d173      	bne.n	800f904 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	015a      	lsls	r2, r3, #5
 800f820:	69bb      	ldr	r3, [r7, #24]
 800f822:	4413      	add	r3, r2
 800f824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	697a      	ldr	r2, [r7, #20]
 800f82c:	0151      	lsls	r1, r2, #5
 800f82e:	69ba      	ldr	r2, [r7, #24]
 800f830:	440a      	add	r2, r1
 800f832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f836:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f83a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	689b      	ldr	r3, [r3, #8]
 800f840:	f003 0320 	and.w	r3, r3, #32
 800f844:	2b00      	cmp	r3, #0
 800f846:	f040 80cb 	bne.w	800f9e0 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f84e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f852:	2b00      	cmp	r3, #0
 800f854:	d143      	bne.n	800f8de <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	015a      	lsls	r2, r3, #5
 800f85a:	69bb      	ldr	r3, [r7, #24]
 800f85c:	4413      	add	r3, r2
 800f85e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	697a      	ldr	r2, [r7, #20]
 800f866:	0151      	lsls	r1, r2, #5
 800f868:	69ba      	ldr	r2, [r7, #24]
 800f86a:	440a      	add	r2, r1
 800f86c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f870:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f874:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f876:	697b      	ldr	r3, [r7, #20]
 800f878:	015a      	lsls	r2, r3, #5
 800f87a:	69bb      	ldr	r3, [r7, #24]
 800f87c:	4413      	add	r3, r2
 800f87e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	697a      	ldr	r2, [r7, #20]
 800f886:	0151      	lsls	r1, r2, #5
 800f888:	69ba      	ldr	r2, [r7, #24]
 800f88a:	440a      	add	r2, r1
 800f88c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f890:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f894:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	015a      	lsls	r2, r3, #5
 800f89a:	69bb      	ldr	r3, [r7, #24]
 800f89c:	4413      	add	r3, r2
 800f89e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	697a      	ldr	r2, [r7, #20]
 800f8a6:	0151      	lsls	r1, r2, #5
 800f8a8:	69ba      	ldr	r2, [r7, #24]
 800f8aa:	440a      	add	r2, r1
 800f8ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f8b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f8b4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800f8b6:	69fb      	ldr	r3, [r7, #28]
 800f8b8:	3301      	adds	r3, #1
 800f8ba:	61fb      	str	r3, [r7, #28]
 800f8bc:	69fb      	ldr	r3, [r7, #28]
 800f8be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f8c2:	d81d      	bhi.n	800f900 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	015a      	lsls	r2, r3, #5
 800f8c8:	69bb      	ldr	r3, [r7, #24]
 800f8ca:	4413      	add	r3, r2
 800f8cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f8d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f8da:	d0ec      	beq.n	800f8b6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f8dc:	e080      	b.n	800f9e0 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	015a      	lsls	r2, r3, #5
 800f8e2:	69bb      	ldr	r3, [r7, #24]
 800f8e4:	4413      	add	r3, r2
 800f8e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	697a      	ldr	r2, [r7, #20]
 800f8ee:	0151      	lsls	r1, r2, #5
 800f8f0:	69ba      	ldr	r2, [r7, #24]
 800f8f2:	440a      	add	r2, r1
 800f8f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f8f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f8fc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f8fe:	e06f      	b.n	800f9e0 <USB_HC_Halt+0x22a>
            break;
 800f900:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f902:	e06d      	b.n	800f9e0 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f904:	697b      	ldr	r3, [r7, #20]
 800f906:	015a      	lsls	r2, r3, #5
 800f908:	69bb      	ldr	r3, [r7, #24]
 800f90a:	4413      	add	r3, r2
 800f90c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	697a      	ldr	r2, [r7, #20]
 800f914:	0151      	lsls	r1, r2, #5
 800f916:	69ba      	ldr	r2, [r7, #24]
 800f918:	440a      	add	r2, r1
 800f91a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f91e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f922:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800f924:	69bb      	ldr	r3, [r7, #24]
 800f926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f92a:	691b      	ldr	r3, [r3, #16]
 800f92c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f930:	2b00      	cmp	r3, #0
 800f932:	d143      	bne.n	800f9bc <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f934:	697b      	ldr	r3, [r7, #20]
 800f936:	015a      	lsls	r2, r3, #5
 800f938:	69bb      	ldr	r3, [r7, #24]
 800f93a:	4413      	add	r3, r2
 800f93c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	697a      	ldr	r2, [r7, #20]
 800f944:	0151      	lsls	r1, r2, #5
 800f946:	69ba      	ldr	r2, [r7, #24]
 800f948:	440a      	add	r2, r1
 800f94a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f94e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f952:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	015a      	lsls	r2, r3, #5
 800f958:	69bb      	ldr	r3, [r7, #24]
 800f95a:	4413      	add	r3, r2
 800f95c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	697a      	ldr	r2, [r7, #20]
 800f964:	0151      	lsls	r1, r2, #5
 800f966:	69ba      	ldr	r2, [r7, #24]
 800f968:	440a      	add	r2, r1
 800f96a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f96e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f972:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	015a      	lsls	r2, r3, #5
 800f978:	69bb      	ldr	r3, [r7, #24]
 800f97a:	4413      	add	r3, r2
 800f97c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	697a      	ldr	r2, [r7, #20]
 800f984:	0151      	lsls	r1, r2, #5
 800f986:	69ba      	ldr	r2, [r7, #24]
 800f988:	440a      	add	r2, r1
 800f98a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f98e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f992:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800f994:	69fb      	ldr	r3, [r7, #28]
 800f996:	3301      	adds	r3, #1
 800f998:	61fb      	str	r3, [r7, #28]
 800f99a:	69fb      	ldr	r3, [r7, #28]
 800f99c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f9a0:	d81d      	bhi.n	800f9de <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	015a      	lsls	r2, r3, #5
 800f9a6:	69bb      	ldr	r3, [r7, #24]
 800f9a8:	4413      	add	r3, r2
 800f9aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f9b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f9b8:	d0ec      	beq.n	800f994 <USB_HC_Halt+0x1de>
 800f9ba:	e011      	b.n	800f9e0 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	015a      	lsls	r2, r3, #5
 800f9c0:	69bb      	ldr	r3, [r7, #24]
 800f9c2:	4413      	add	r3, r2
 800f9c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	697a      	ldr	r2, [r7, #20]
 800f9cc:	0151      	lsls	r1, r2, #5
 800f9ce:	69ba      	ldr	r2, [r7, #24]
 800f9d0:	440a      	add	r2, r1
 800f9d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f9d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f9da:	6013      	str	r3, [r2, #0]
 800f9dc:	e000      	b.n	800f9e0 <USB_HC_Halt+0x22a>
          break;
 800f9de:	bf00      	nop
    }
  }

  return HAL_OK;
 800f9e0:	2300      	movs	r3, #0
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3724      	adds	r7, #36	; 0x24
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ec:	4770      	bx	lr

0800f9ee <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800f9ee:	b580      	push	{r7, lr}
 800f9f0:	b086      	sub	sp, #24
 800f9f2:	af00      	add	r7, sp, #0
 800f9f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f7ff fdea 	bl	800f5d8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800fa04:	2110      	movs	r1, #16
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f7ff fdf8 	bl	800f5fc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f7ff fe1b 	bl	800f648 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800fa12:	2300      	movs	r3, #0
 800fa14:	613b      	str	r3, [r7, #16]
 800fa16:	e01f      	b.n	800fa58 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800fa18:	693b      	ldr	r3, [r7, #16]
 800fa1a:	015a      	lsls	r2, r3, #5
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	4413      	add	r3, r2
 800fa20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fa2e:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fa36:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800fa38:	68bb      	ldr	r3, [r7, #8]
 800fa3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fa3e:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	015a      	lsls	r2, r3, #5
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	4413      	add	r3, r2
 800fa48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	3301      	adds	r3, #1
 800fa56:	613b      	str	r3, [r7, #16]
 800fa58:	693b      	ldr	r3, [r7, #16]
 800fa5a:	2b0f      	cmp	r3, #15
 800fa5c:	d9dc      	bls.n	800fa18 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800fa5e:	2300      	movs	r3, #0
 800fa60:	613b      	str	r3, [r7, #16]
 800fa62:	e034      	b.n	800face <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800fa64:	693b      	ldr	r3, [r7, #16]
 800fa66:	015a      	lsls	r2, r3, #5
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	4413      	add	r3, r2
 800fa6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fa7a:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fa82:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fa8a:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	015a      	lsls	r2, r3, #5
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	4413      	add	r3, r2
 800fa94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa98:	461a      	mov	r2, r3
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	3301      	adds	r3, #1
 800faa2:	617b      	str	r3, [r7, #20]
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800faaa:	d80c      	bhi.n	800fac6 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	015a      	lsls	r2, r3, #5
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	4413      	add	r3, r2
 800fab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fabe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fac2:	d0ec      	beq.n	800fa9e <USB_StopHost+0xb0>
 800fac4:	e000      	b.n	800fac8 <USB_StopHost+0xda>
        break;
 800fac6:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800fac8:	693b      	ldr	r3, [r7, #16]
 800faca:	3301      	adds	r3, #1
 800facc:	613b      	str	r3, [r7, #16]
 800face:	693b      	ldr	r3, [r7, #16]
 800fad0:	2b0f      	cmp	r3, #15
 800fad2:	d9c7      	bls.n	800fa64 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fada:	461a      	mov	r2, r3
 800fadc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fae0:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fae8:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f7ff fd63 	bl	800f5b6 <USB_EnableGlobalInt>

  return HAL_OK;
 800faf0:	2300      	movs	r3, #0
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3718      	adds	r7, #24
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}

0800fafa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800fafa:	b580      	push	{r7, lr}
 800fafc:	b082      	sub	sp, #8
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fb08:	1c5a      	adds	r2, r3, #1
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f000 f804 	bl	800fb1e <USBH_HandleSof>
}
 800fb16:	bf00      	nop
 800fb18:	3708      	adds	r7, #8
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}

0800fb1e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800fb1e:	b580      	push	{r7, lr}
 800fb20:	b082      	sub	sp, #8
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	2b0b      	cmp	r3, #11
 800fb2e:	d10a      	bne.n	800fb46 <USBH_HandleSof+0x28>
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d005      	beq.n	800fb46 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fb40:	699b      	ldr	r3, [r3, #24]
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	4798      	blx	r3
  }
}
 800fb46:	bf00      	nop
 800fb48:	3708      	adds	r7, #8
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}

0800fb4e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800fb4e:	b480      	push	{r7}
 800fb50:	b083      	sub	sp, #12
 800fb52:	af00      	add	r7, sp, #0
 800fb54:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2201      	movs	r2, #1
 800fb5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800fb5e:	bf00      	nop
}
 800fb60:	370c      	adds	r7, #12
 800fb62:	46bd      	mov	sp, r7
 800fb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb68:	4770      	bx	lr

0800fb6a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800fb6a:	b480      	push	{r7}
 800fb6c:	b083      	sub	sp, #12
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2200      	movs	r2, #0
 800fb76:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800fb7a:	bf00      	nop
}
 800fb7c:	370c      	adds	r7, #12
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb84:	4770      	bx	lr

0800fb86 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800fb86:	b480      	push	{r7}
 800fb88:	b083      	sub	sp, #12
 800fb8a:	af00      	add	r7, sp, #0
 800fb8c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2201      	movs	r2, #1
 800fb92:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2200      	movs	r2, #0
 800fba2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800fba6:	2300      	movs	r3, #0
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	370c      	adds	r7, #12
 800fbac:	46bd      	mov	sp, r7
 800fbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb2:	4770      	bx	lr

0800fbb4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b082      	sub	sp, #8
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2201      	movs	r2, #1
 800fbc0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2200      	movs	r2, #0
 800fbd0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f000 fa9f 	bl	8010118 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	791b      	ldrb	r3, [r3, #4]
 800fbde:	4619      	mov	r1, r3
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f000 f80b 	bl	800fbfc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	795b      	ldrb	r3, [r3, #5]
 800fbea:	4619      	mov	r1, r3
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f000 f805 	bl	800fbfc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800fbf2:	2300      	movs	r3, #0
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3708      	adds	r7, #8
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b083      	sub	sp, #12
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	460b      	mov	r3, r1
 800fc06:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800fc08:	78fb      	ldrb	r3, [r7, #3]
 800fc0a:	2b0a      	cmp	r3, #10
 800fc0c:	d80d      	bhi.n	800fc2a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800fc0e:	78fb      	ldrb	r3, [r7, #3]
 800fc10:	687a      	ldr	r2, [r7, #4]
 800fc12:	33e0      	adds	r3, #224	; 0xe0
 800fc14:	009b      	lsls	r3, r3, #2
 800fc16:	4413      	add	r3, r2
 800fc18:	685a      	ldr	r2, [r3, #4]
 800fc1a:	78fb      	ldrb	r3, [r7, #3]
 800fc1c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800fc20:	6879      	ldr	r1, [r7, #4]
 800fc22:	33e0      	adds	r3, #224	; 0xe0
 800fc24:	009b      	lsls	r3, r3, #2
 800fc26:	440b      	add	r3, r1
 800fc28:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800fc2a:	2300      	movs	r3, #0
}
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	370c      	adds	r7, #12
 800fc30:	46bd      	mov	sp, r7
 800fc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc36:	4770      	bx	lr

0800fc38 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b085      	sub	sp, #20
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	685b      	ldr	r3, [r3, #4]
 800fc46:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	68fa      	ldr	r2, [r7, #12]
 800fc4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	689a      	ldr	r2, [r3, #8]
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	689b      	ldr	r3, [r3, #8]
 800fc5a:	683a      	ldr	r2, [r7, #0]
 800fc5c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	683a      	ldr	r2, [r7, #0]
 800fc62:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	687a      	ldr	r2, [r7, #4]
 800fc68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	1c5a      	adds	r2, r3, #1
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	601a      	str	r2, [r3, #0]
}
 800fc74:	bf00      	nop
 800fc76:	3714      	adds	r7, #20
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7e:	4770      	bx	lr

0800fc80 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fc80:	b480      	push	{r7}
 800fc82:	b085      	sub	sp, #20
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	691b      	ldr	r3, [r3, #16]
 800fc8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	685b      	ldr	r3, [r3, #4]
 800fc92:	687a      	ldr	r2, [r7, #4]
 800fc94:	6892      	ldr	r2, [r2, #8]
 800fc96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	689b      	ldr	r3, [r3, #8]
 800fc9c:	687a      	ldr	r2, [r7, #4]
 800fc9e:	6852      	ldr	r2, [r2, #4]
 800fca0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	685b      	ldr	r3, [r3, #4]
 800fca6:	687a      	ldr	r2, [r7, #4]
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d103      	bne.n	800fcb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	689a      	ldr	r2, [r3, #8]
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	1e5a      	subs	r2, r3, #1
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	681b      	ldr	r3, [r3, #0]
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3714      	adds	r7, #20
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr

0800fcd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b086      	sub	sp, #24
 800fcd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fcde:	4b4f      	ldr	r3, [pc, #316]	; (800fe1c <xTaskIncrementTick+0x148>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	f040 808a 	bne.w	800fdfc <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fce8:	4b4d      	ldr	r3, [pc, #308]	; (800fe20 <xTaskIncrementTick+0x14c>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	3301      	adds	r3, #1
 800fcee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fcf0:	4a4b      	ldr	r2, [pc, #300]	; (800fe20 <xTaskIncrementTick+0x14c>)
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d122      	bne.n	800fd42 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800fcfc:	4b49      	ldr	r3, [pc, #292]	; (800fe24 <xTaskIncrementTick+0x150>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d00c      	beq.n	800fd20 <xTaskIncrementTick+0x4c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd0a:	b672      	cpsid	i
 800fd0c:	f383 8811 	msr	BASEPRI, r3
 800fd10:	f3bf 8f6f 	isb	sy
 800fd14:	f3bf 8f4f 	dsb	sy
 800fd18:	b662      	cpsie	i
 800fd1a:	603b      	str	r3, [r7, #0]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fd1c:	bf00      	nop
 800fd1e:	e7fe      	b.n	800fd1e <xTaskIncrementTick+0x4a>
 800fd20:	4b40      	ldr	r3, [pc, #256]	; (800fe24 <xTaskIncrementTick+0x150>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	60fb      	str	r3, [r7, #12]
 800fd26:	4b40      	ldr	r3, [pc, #256]	; (800fe28 <xTaskIncrementTick+0x154>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	4a3e      	ldr	r2, [pc, #248]	; (800fe24 <xTaskIncrementTick+0x150>)
 800fd2c:	6013      	str	r3, [r2, #0]
 800fd2e:	4a3e      	ldr	r2, [pc, #248]	; (800fe28 <xTaskIncrementTick+0x154>)
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	6013      	str	r3, [r2, #0]
 800fd34:	4b3d      	ldr	r3, [pc, #244]	; (800fe2c <xTaskIncrementTick+0x158>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	3301      	adds	r3, #1
 800fd3a:	4a3c      	ldr	r2, [pc, #240]	; (800fe2c <xTaskIncrementTick+0x158>)
 800fd3c:	6013      	str	r3, [r2, #0]
 800fd3e:	f000 f905 	bl	800ff4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fd42:	4b3b      	ldr	r3, [pc, #236]	; (800fe30 <xTaskIncrementTick+0x15c>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	693a      	ldr	r2, [r7, #16]
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d348      	bcc.n	800fdde <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd4c:	4b35      	ldr	r3, [pc, #212]	; (800fe24 <xTaskIncrementTick+0x150>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d104      	bne.n	800fd60 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd56:	4b36      	ldr	r3, [pc, #216]	; (800fe30 <xTaskIncrementTick+0x15c>)
 800fd58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd5c:	601a      	str	r2, [r3, #0]
					break;
 800fd5e:	e03e      	b.n	800fdde <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd60:	4b30      	ldr	r3, [pc, #192]	; (800fe24 <xTaskIncrementTick+0x150>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	68db      	ldr	r3, [r3, #12]
 800fd66:	68db      	ldr	r3, [r3, #12]
 800fd68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	685b      	ldr	r3, [r3, #4]
 800fd6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fd70:	693a      	ldr	r2, [r7, #16]
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	429a      	cmp	r2, r3
 800fd76:	d203      	bcs.n	800fd80 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fd78:	4a2d      	ldr	r2, [pc, #180]	; (800fe30 <xTaskIncrementTick+0x15c>)
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fd7e:	e02e      	b.n	800fdde <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	3304      	adds	r3, #4
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7ff ff7b 	bl	800fc80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d004      	beq.n	800fd9c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	3318      	adds	r3, #24
 800fd96:	4618      	mov	r0, r3
 800fd98:	f7ff ff72 	bl	800fc80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fda0:	2201      	movs	r2, #1
 800fda2:	409a      	lsls	r2, r3
 800fda4:	4b23      	ldr	r3, [pc, #140]	; (800fe34 <xTaskIncrementTick+0x160>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	4313      	orrs	r3, r2
 800fdaa:	4a22      	ldr	r2, [pc, #136]	; (800fe34 <xTaskIncrementTick+0x160>)
 800fdac:	6013      	str	r3, [r2, #0]
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdb2:	4613      	mov	r3, r2
 800fdb4:	009b      	lsls	r3, r3, #2
 800fdb6:	4413      	add	r3, r2
 800fdb8:	009b      	lsls	r3, r3, #2
 800fdba:	4a1f      	ldr	r2, [pc, #124]	; (800fe38 <xTaskIncrementTick+0x164>)
 800fdbc:	441a      	add	r2, r3
 800fdbe:	68bb      	ldr	r3, [r7, #8]
 800fdc0:	3304      	adds	r3, #4
 800fdc2:	4619      	mov	r1, r3
 800fdc4:	4610      	mov	r0, r2
 800fdc6:	f7ff ff37 	bl	800fc38 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fdca:	68bb      	ldr	r3, [r7, #8]
 800fdcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdce:	4b1b      	ldr	r3, [pc, #108]	; (800fe3c <xTaskIncrementTick+0x168>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d3b9      	bcc.n	800fd4c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800fdd8:	2301      	movs	r3, #1
 800fdda:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fddc:	e7b6      	b.n	800fd4c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fdde:	4b17      	ldr	r3, [pc, #92]	; (800fe3c <xTaskIncrementTick+0x168>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fde4:	4914      	ldr	r1, [pc, #80]	; (800fe38 <xTaskIncrementTick+0x164>)
 800fde6:	4613      	mov	r3, r2
 800fde8:	009b      	lsls	r3, r3, #2
 800fdea:	4413      	add	r3, r2
 800fdec:	009b      	lsls	r3, r3, #2
 800fdee:	440b      	add	r3, r1
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d907      	bls.n	800fe06 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	617b      	str	r3, [r7, #20]
 800fdfa:	e004      	b.n	800fe06 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fdfc:	4b10      	ldr	r3, [pc, #64]	; (800fe40 <xTaskIncrementTick+0x16c>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	3301      	adds	r3, #1
 800fe02:	4a0f      	ldr	r2, [pc, #60]	; (800fe40 <xTaskIncrementTick+0x16c>)
 800fe04:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fe06:	4b0f      	ldr	r3, [pc, #60]	; (800fe44 <xTaskIncrementTick+0x170>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d001      	beq.n	800fe12 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800fe0e:	2301      	movs	r3, #1
 800fe10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fe12:	697b      	ldr	r3, [r7, #20]
}
 800fe14:	4618      	mov	r0, r3
 800fe16:	3718      	adds	r7, #24
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}
 800fe1c:	20000320 	.word	0x20000320
 800fe20:	20000308 	.word	0x20000308
 800fe24:	20000300 	.word	0x20000300
 800fe28:	20000304 	.word	0x20000304
 800fe2c:	20000318 	.word	0x20000318
 800fe30:	2000031c 	.word	0x2000031c
 800fe34:	2000030c 	.word	0x2000030c
 800fe38:	20000274 	.word	0x20000274
 800fe3c:	20000270 	.word	0x20000270
 800fe40:	20000310 	.word	0x20000310
 800fe44:	20000314 	.word	0x20000314

0800fe48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b088      	sub	sp, #32
 800fe4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fe4e:	4b3a      	ldr	r3, [pc, #232]	; (800ff38 <vTaskSwitchContext+0xf0>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d003      	beq.n	800fe5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fe56:	4b39      	ldr	r3, [pc, #228]	; (800ff3c <vTaskSwitchContext+0xf4>)
 800fe58:	2201      	movs	r2, #1
 800fe5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fe5c:	e068      	b.n	800ff30 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800fe5e:	4b37      	ldr	r3, [pc, #220]	; (800ff3c <vTaskSwitchContext+0xf4>)
 800fe60:	2200      	movs	r2, #0
 800fe62:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800fe64:	4b36      	ldr	r3, [pc, #216]	; (800ff40 <vTaskSwitchContext+0xf8>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe6a:	61fb      	str	r3, [r7, #28]
 800fe6c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800fe70:	61bb      	str	r3, [r7, #24]
 800fe72:	69fb      	ldr	r3, [r7, #28]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	69ba      	ldr	r2, [r7, #24]
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d111      	bne.n	800fea0 <vTaskSwitchContext+0x58>
 800fe7c:	69fb      	ldr	r3, [r7, #28]
 800fe7e:	3304      	adds	r3, #4
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	69ba      	ldr	r2, [r7, #24]
 800fe84:	429a      	cmp	r2, r3
 800fe86:	d10b      	bne.n	800fea0 <vTaskSwitchContext+0x58>
 800fe88:	69fb      	ldr	r3, [r7, #28]
 800fe8a:	3308      	adds	r3, #8
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	69ba      	ldr	r2, [r7, #24]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d105      	bne.n	800fea0 <vTaskSwitchContext+0x58>
 800fe94:	69fb      	ldr	r3, [r7, #28]
 800fe96:	330c      	adds	r3, #12
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	69ba      	ldr	r2, [r7, #24]
 800fe9c:	429a      	cmp	r2, r3
 800fe9e:	d008      	beq.n	800feb2 <vTaskSwitchContext+0x6a>
 800fea0:	4b27      	ldr	r3, [pc, #156]	; (800ff40 <vTaskSwitchContext+0xf8>)
 800fea2:	681a      	ldr	r2, [r3, #0]
 800fea4:	4b26      	ldr	r3, [pc, #152]	; (800ff40 <vTaskSwitchContext+0xf8>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	3334      	adds	r3, #52	; 0x34
 800feaa:	4619      	mov	r1, r3
 800feac:	4610      	mov	r0, r2
 800feae:	f7f1 f99c 	bl	80011ea <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800feb2:	4b24      	ldr	r3, [pc, #144]	; (800ff44 <vTaskSwitchContext+0xfc>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	fab3 f383 	clz	r3, r3
 800febe:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fec0:	7afb      	ldrb	r3, [r7, #11]
 800fec2:	f1c3 031f 	rsb	r3, r3, #31
 800fec6:	617b      	str	r3, [r7, #20]
 800fec8:	491f      	ldr	r1, [pc, #124]	; (800ff48 <vTaskSwitchContext+0x100>)
 800feca:	697a      	ldr	r2, [r7, #20]
 800fecc:	4613      	mov	r3, r2
 800fece:	009b      	lsls	r3, r3, #2
 800fed0:	4413      	add	r3, r2
 800fed2:	009b      	lsls	r3, r3, #2
 800fed4:	440b      	add	r3, r1
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d10c      	bne.n	800fef6 <vTaskSwitchContext+0xae>
	__asm volatile
 800fedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee0:	b672      	cpsid	i
 800fee2:	f383 8811 	msr	BASEPRI, r3
 800fee6:	f3bf 8f6f 	isb	sy
 800feea:	f3bf 8f4f 	dsb	sy
 800feee:	b662      	cpsie	i
 800fef0:	607b      	str	r3, [r7, #4]
}
 800fef2:	bf00      	nop
 800fef4:	e7fe      	b.n	800fef4 <vTaskSwitchContext+0xac>
 800fef6:	697a      	ldr	r2, [r7, #20]
 800fef8:	4613      	mov	r3, r2
 800fefa:	009b      	lsls	r3, r3, #2
 800fefc:	4413      	add	r3, r2
 800fefe:	009b      	lsls	r3, r3, #2
 800ff00:	4a11      	ldr	r2, [pc, #68]	; (800ff48 <vTaskSwitchContext+0x100>)
 800ff02:	4413      	add	r3, r2
 800ff04:	613b      	str	r3, [r7, #16]
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	685a      	ldr	r2, [r3, #4]
 800ff0c:	693b      	ldr	r3, [r7, #16]
 800ff0e:	605a      	str	r2, [r3, #4]
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	685a      	ldr	r2, [r3, #4]
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	3308      	adds	r3, #8
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	d104      	bne.n	800ff26 <vTaskSwitchContext+0xde>
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	685a      	ldr	r2, [r3, #4]
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	605a      	str	r2, [r3, #4]
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	68db      	ldr	r3, [r3, #12]
 800ff2c:	4a04      	ldr	r2, [pc, #16]	; (800ff40 <vTaskSwitchContext+0xf8>)
 800ff2e:	6013      	str	r3, [r2, #0]
}
 800ff30:	bf00      	nop
 800ff32:	3720      	adds	r7, #32
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}
 800ff38:	20000320 	.word	0x20000320
 800ff3c:	20000314 	.word	0x20000314
 800ff40:	20000270 	.word	0x20000270
 800ff44:	2000030c 	.word	0x2000030c
 800ff48:	20000274 	.word	0x20000274

0800ff4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b083      	sub	sp, #12
 800ff50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ff52:	4b0c      	ldr	r3, [pc, #48]	; (800ff84 <prvResetNextTaskUnblockTime+0x38>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d104      	bne.n	800ff66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ff5c:	4b0a      	ldr	r3, [pc, #40]	; (800ff88 <prvResetNextTaskUnblockTime+0x3c>)
 800ff5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ff64:	e008      	b.n	800ff78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff66:	4b07      	ldr	r3, [pc, #28]	; (800ff84 <prvResetNextTaskUnblockTime+0x38>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	68db      	ldr	r3, [r3, #12]
 800ff6c:	68db      	ldr	r3, [r3, #12]
 800ff6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	685b      	ldr	r3, [r3, #4]
 800ff74:	4a04      	ldr	r2, [pc, #16]	; (800ff88 <prvResetNextTaskUnblockTime+0x3c>)
 800ff76:	6013      	str	r3, [r2, #0]
}
 800ff78:	bf00      	nop
 800ff7a:	370c      	adds	r7, #12
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff82:	4770      	bx	lr
 800ff84:	20000300 	.word	0x20000300
 800ff88:	2000031c 	.word	0x2000031c
 800ff8c:	00000000 	.word	0x00000000

0800ff90 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ff90:	4b07      	ldr	r3, [pc, #28]	; (800ffb0 <pxCurrentTCBConst2>)
 800ff92:	6819      	ldr	r1, [r3, #0]
 800ff94:	6808      	ldr	r0, [r1, #0]
 800ff96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff9a:	f380 8809 	msr	PSP, r0
 800ff9e:	f3bf 8f6f 	isb	sy
 800ffa2:	f04f 0000 	mov.w	r0, #0
 800ffa6:	f380 8811 	msr	BASEPRI, r0
 800ffaa:	4770      	bx	lr
 800ffac:	f3af 8000 	nop.w

0800ffb0 <pxCurrentTCBConst2>:
 800ffb0:	20000270 	.word	0x20000270
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ffb4:	bf00      	nop
 800ffb6:	bf00      	nop
	...

0800ffc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ffc0:	f3ef 8009 	mrs	r0, PSP
 800ffc4:	f3bf 8f6f 	isb	sy
 800ffc8:	4b15      	ldr	r3, [pc, #84]	; (8010020 <pxCurrentTCBConst>)
 800ffca:	681a      	ldr	r2, [r3, #0]
 800ffcc:	f01e 0f10 	tst.w	lr, #16
 800ffd0:	bf08      	it	eq
 800ffd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ffd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffda:	6010      	str	r0, [r2, #0]
 800ffdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ffe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ffe4:	b672      	cpsid	i
 800ffe6:	f380 8811 	msr	BASEPRI, r0
 800ffea:	f3bf 8f4f 	dsb	sy
 800ffee:	f3bf 8f6f 	isb	sy
 800fff2:	b662      	cpsie	i
 800fff4:	f7ff ff28 	bl	800fe48 <vTaskSwitchContext>
 800fff8:	f04f 0000 	mov.w	r0, #0
 800fffc:	f380 8811 	msr	BASEPRI, r0
 8010000:	bc09      	pop	{r0, r3}
 8010002:	6819      	ldr	r1, [r3, #0]
 8010004:	6808      	ldr	r0, [r1, #0]
 8010006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801000a:	f01e 0f10 	tst.w	lr, #16
 801000e:	bf08      	it	eq
 8010010:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010014:	f380 8809 	msr	PSP, r0
 8010018:	f3bf 8f6f 	isb	sy
 801001c:	4770      	bx	lr
 801001e:	bf00      	nop

08010020 <pxCurrentTCBConst>:
 8010020:	20000270 	.word	0x20000270
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010024:	bf00      	nop
 8010026:	bf00      	nop

08010028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b082      	sub	sp, #8
 801002c:	af00      	add	r7, sp, #0
	__asm volatile
 801002e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010032:	b672      	cpsid	i
 8010034:	f383 8811 	msr	BASEPRI, r3
 8010038:	f3bf 8f6f 	isb	sy
 801003c:	f3bf 8f4f 	dsb	sy
 8010040:	b662      	cpsie	i
 8010042:	607b      	str	r3, [r7, #4]
}
 8010044:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010046:	f7ff fe45 	bl	800fcd4 <xTaskIncrementTick>
 801004a:	4603      	mov	r3, r0
 801004c:	2b00      	cmp	r3, #0
 801004e:	d003      	beq.n	8010058 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010050:	4b06      	ldr	r3, [pc, #24]	; (801006c <SysTick_Handler+0x44>)
 8010052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010056:	601a      	str	r2, [r3, #0]
 8010058:	2300      	movs	r3, #0
 801005a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010062:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010064:	bf00      	nop
 8010066:	3708      	adds	r7, #8
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}
 801006c:	e000ed04 	.word	0xe000ed04

08010070 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801007e:	4618      	mov	r0, r3
 8010080:	f7ff fd3b 	bl	800fafa <USBH_LL_IncTimer>
}
 8010084:	bf00      	nop
 8010086:	3708      	adds	r7, #8
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}

0801008c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b082      	sub	sp, #8
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801009a:	4618      	mov	r0, r3
 801009c:	f7ff fd73 	bl	800fb86 <USBH_LL_Connect>
}
 80100a0:	bf00      	nop
 80100a2:	3708      	adds	r7, #8
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b082      	sub	sp, #8
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80100b6:	4618      	mov	r0, r3
 80100b8:	f7ff fd7c 	bl	800fbb4 <USBH_LL_Disconnect>
}
 80100bc:	bf00      	nop
 80100be:	3708      	adds	r7, #8
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80100c4:	b480      	push	{r7}
 80100c6:	b083      	sub	sp, #12
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	460b      	mov	r3, r1
 80100ce:	70fb      	strb	r3, [r7, #3]
 80100d0:	4613      	mov	r3, r2
 80100d2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80100d4:	bf00      	nop
 80100d6:	370c      	adds	r7, #12
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr

080100e0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b082      	sub	sp, #8
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80100ee:	4618      	mov	r0, r3
 80100f0:	f7ff fd2d 	bl	800fb4e <USBH_LL_PortEnabled>
}
 80100f4:	bf00      	nop
 80100f6:	3708      	adds	r7, #8
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801010a:	4618      	mov	r0, r3
 801010c:	f7ff fd2d 	bl	800fb6a <USBH_LL_PortDisabled>
}
 8010110:	bf00      	nop
 8010112:	3708      	adds	r7, #8
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}

08010118 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b084      	sub	sp, #16
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010120:	2300      	movs	r3, #0
 8010122:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010124:	2300      	movs	r3, #0
 8010126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801012e:	4618      	mov	r0, r3
 8010130:	f7f7 feeb 	bl	8007f0a <HAL_HCD_Stop>
 8010134:	4603      	mov	r3, r0
 8010136:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010138:	7bfb      	ldrb	r3, [r7, #15]
 801013a:	4618      	mov	r0, r3
 801013c:	f000 f808 	bl	8010150 <USBH_Get_USB_Status>
 8010140:	4603      	mov	r3, r0
 8010142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010144:	7bbb      	ldrb	r3, [r7, #14]
}
 8010146:	4618      	mov	r0, r3
 8010148:	3710      	adds	r7, #16
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}
	...

08010150 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010150:	b480      	push	{r7}
 8010152:	b085      	sub	sp, #20
 8010154:	af00      	add	r7, sp, #0
 8010156:	4603      	mov	r3, r0
 8010158:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801015a:	2300      	movs	r3, #0
 801015c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801015e:	79fb      	ldrb	r3, [r7, #7]
 8010160:	2b03      	cmp	r3, #3
 8010162:	d817      	bhi.n	8010194 <USBH_Get_USB_Status+0x44>
 8010164:	a201      	add	r2, pc, #4	; (adr r2, 801016c <USBH_Get_USB_Status+0x1c>)
 8010166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801016a:	bf00      	nop
 801016c:	0801017d 	.word	0x0801017d
 8010170:	08010183 	.word	0x08010183
 8010174:	08010189 	.word	0x08010189
 8010178:	0801018f 	.word	0x0801018f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801017c:	2300      	movs	r3, #0
 801017e:	73fb      	strb	r3, [r7, #15]
    break;
 8010180:	e00b      	b.n	801019a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010182:	2302      	movs	r3, #2
 8010184:	73fb      	strb	r3, [r7, #15]
    break;
 8010186:	e008      	b.n	801019a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010188:	2301      	movs	r3, #1
 801018a:	73fb      	strb	r3, [r7, #15]
    break;
 801018c:	e005      	b.n	801019a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801018e:	2302      	movs	r3, #2
 8010190:	73fb      	strb	r3, [r7, #15]
    break;
 8010192:	e002      	b.n	801019a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010194:	2302      	movs	r3, #2
 8010196:	73fb      	strb	r3, [r7, #15]
    break;
 8010198:	bf00      	nop
  }
  return usb_status;
 801019a:	7bfb      	ldrb	r3, [r7, #15]
}
 801019c:	4618      	mov	r0, r3
 801019e:	3714      	adds	r7, #20
 80101a0:	46bd      	mov	sp, r7
 80101a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a6:	4770      	bx	lr

080101a8 <__errno>:
 80101a8:	4b01      	ldr	r3, [pc, #4]	; (80101b0 <__errno+0x8>)
 80101aa:	6818      	ldr	r0, [r3, #0]
 80101ac:	4770      	bx	lr
 80101ae:	bf00      	nop
 80101b0:	2000002c 	.word	0x2000002c

080101b4 <__libc_init_array>:
 80101b4:	b570      	push	{r4, r5, r6, lr}
 80101b6:	4d0d      	ldr	r5, [pc, #52]	; (80101ec <__libc_init_array+0x38>)
 80101b8:	4c0d      	ldr	r4, [pc, #52]	; (80101f0 <__libc_init_array+0x3c>)
 80101ba:	1b64      	subs	r4, r4, r5
 80101bc:	10a4      	asrs	r4, r4, #2
 80101be:	2600      	movs	r6, #0
 80101c0:	42a6      	cmp	r6, r4
 80101c2:	d109      	bne.n	80101d8 <__libc_init_array+0x24>
 80101c4:	4d0b      	ldr	r5, [pc, #44]	; (80101f4 <__libc_init_array+0x40>)
 80101c6:	4c0c      	ldr	r4, [pc, #48]	; (80101f8 <__libc_init_array+0x44>)
 80101c8:	f003 fa38 	bl	801363c <_init>
 80101cc:	1b64      	subs	r4, r4, r5
 80101ce:	10a4      	asrs	r4, r4, #2
 80101d0:	2600      	movs	r6, #0
 80101d2:	42a6      	cmp	r6, r4
 80101d4:	d105      	bne.n	80101e2 <__libc_init_array+0x2e>
 80101d6:	bd70      	pop	{r4, r5, r6, pc}
 80101d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80101dc:	4798      	blx	r3
 80101de:	3601      	adds	r6, #1
 80101e0:	e7ee      	b.n	80101c0 <__libc_init_array+0xc>
 80101e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80101e6:	4798      	blx	r3
 80101e8:	3601      	adds	r6, #1
 80101ea:	e7f2      	b.n	80101d2 <__libc_init_array+0x1e>
 80101ec:	08015a80 	.word	0x08015a80
 80101f0:	08015a80 	.word	0x08015a80
 80101f4:	08015a80 	.word	0x08015a80
 80101f8:	08015a84 	.word	0x08015a84

080101fc <malloc>:
 80101fc:	4b02      	ldr	r3, [pc, #8]	; (8010208 <malloc+0xc>)
 80101fe:	4601      	mov	r1, r0
 8010200:	6818      	ldr	r0, [r3, #0]
 8010202:	f000 b869 	b.w	80102d8 <_malloc_r>
 8010206:	bf00      	nop
 8010208:	2000002c 	.word	0x2000002c

0801020c <memcpy>:
 801020c:	440a      	add	r2, r1
 801020e:	4291      	cmp	r1, r2
 8010210:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010214:	d100      	bne.n	8010218 <memcpy+0xc>
 8010216:	4770      	bx	lr
 8010218:	b510      	push	{r4, lr}
 801021a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801021e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010222:	4291      	cmp	r1, r2
 8010224:	d1f9      	bne.n	801021a <memcpy+0xe>
 8010226:	bd10      	pop	{r4, pc}

08010228 <memset>:
 8010228:	4402      	add	r2, r0
 801022a:	4603      	mov	r3, r0
 801022c:	4293      	cmp	r3, r2
 801022e:	d100      	bne.n	8010232 <memset+0xa>
 8010230:	4770      	bx	lr
 8010232:	f803 1b01 	strb.w	r1, [r3], #1
 8010236:	e7f9      	b.n	801022c <memset+0x4>

08010238 <_free_r>:
 8010238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801023a:	2900      	cmp	r1, #0
 801023c:	d048      	beq.n	80102d0 <_free_r+0x98>
 801023e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010242:	9001      	str	r0, [sp, #4]
 8010244:	2b00      	cmp	r3, #0
 8010246:	f1a1 0404 	sub.w	r4, r1, #4
 801024a:	bfb8      	it	lt
 801024c:	18e4      	addlt	r4, r4, r3
 801024e:	f001 ff69 	bl	8012124 <__malloc_lock>
 8010252:	4a20      	ldr	r2, [pc, #128]	; (80102d4 <_free_r+0x9c>)
 8010254:	9801      	ldr	r0, [sp, #4]
 8010256:	6813      	ldr	r3, [r2, #0]
 8010258:	4615      	mov	r5, r2
 801025a:	b933      	cbnz	r3, 801026a <_free_r+0x32>
 801025c:	6063      	str	r3, [r4, #4]
 801025e:	6014      	str	r4, [r2, #0]
 8010260:	b003      	add	sp, #12
 8010262:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010266:	f001 bf63 	b.w	8012130 <__malloc_unlock>
 801026a:	42a3      	cmp	r3, r4
 801026c:	d90b      	bls.n	8010286 <_free_r+0x4e>
 801026e:	6821      	ldr	r1, [r4, #0]
 8010270:	1862      	adds	r2, r4, r1
 8010272:	4293      	cmp	r3, r2
 8010274:	bf04      	itt	eq
 8010276:	681a      	ldreq	r2, [r3, #0]
 8010278:	685b      	ldreq	r3, [r3, #4]
 801027a:	6063      	str	r3, [r4, #4]
 801027c:	bf04      	itt	eq
 801027e:	1852      	addeq	r2, r2, r1
 8010280:	6022      	streq	r2, [r4, #0]
 8010282:	602c      	str	r4, [r5, #0]
 8010284:	e7ec      	b.n	8010260 <_free_r+0x28>
 8010286:	461a      	mov	r2, r3
 8010288:	685b      	ldr	r3, [r3, #4]
 801028a:	b10b      	cbz	r3, 8010290 <_free_r+0x58>
 801028c:	42a3      	cmp	r3, r4
 801028e:	d9fa      	bls.n	8010286 <_free_r+0x4e>
 8010290:	6811      	ldr	r1, [r2, #0]
 8010292:	1855      	adds	r5, r2, r1
 8010294:	42a5      	cmp	r5, r4
 8010296:	d10b      	bne.n	80102b0 <_free_r+0x78>
 8010298:	6824      	ldr	r4, [r4, #0]
 801029a:	4421      	add	r1, r4
 801029c:	1854      	adds	r4, r2, r1
 801029e:	42a3      	cmp	r3, r4
 80102a0:	6011      	str	r1, [r2, #0]
 80102a2:	d1dd      	bne.n	8010260 <_free_r+0x28>
 80102a4:	681c      	ldr	r4, [r3, #0]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	6053      	str	r3, [r2, #4]
 80102aa:	4421      	add	r1, r4
 80102ac:	6011      	str	r1, [r2, #0]
 80102ae:	e7d7      	b.n	8010260 <_free_r+0x28>
 80102b0:	d902      	bls.n	80102b8 <_free_r+0x80>
 80102b2:	230c      	movs	r3, #12
 80102b4:	6003      	str	r3, [r0, #0]
 80102b6:	e7d3      	b.n	8010260 <_free_r+0x28>
 80102b8:	6825      	ldr	r5, [r4, #0]
 80102ba:	1961      	adds	r1, r4, r5
 80102bc:	428b      	cmp	r3, r1
 80102be:	bf04      	itt	eq
 80102c0:	6819      	ldreq	r1, [r3, #0]
 80102c2:	685b      	ldreq	r3, [r3, #4]
 80102c4:	6063      	str	r3, [r4, #4]
 80102c6:	bf04      	itt	eq
 80102c8:	1949      	addeq	r1, r1, r5
 80102ca:	6021      	streq	r1, [r4, #0]
 80102cc:	6054      	str	r4, [r2, #4]
 80102ce:	e7c7      	b.n	8010260 <_free_r+0x28>
 80102d0:	b003      	add	sp, #12
 80102d2:	bd30      	pop	{r4, r5, pc}
 80102d4:	20000324 	.word	0x20000324

080102d8 <_malloc_r>:
 80102d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102da:	1ccd      	adds	r5, r1, #3
 80102dc:	f025 0503 	bic.w	r5, r5, #3
 80102e0:	3508      	adds	r5, #8
 80102e2:	2d0c      	cmp	r5, #12
 80102e4:	bf38      	it	cc
 80102e6:	250c      	movcc	r5, #12
 80102e8:	2d00      	cmp	r5, #0
 80102ea:	4606      	mov	r6, r0
 80102ec:	db01      	blt.n	80102f2 <_malloc_r+0x1a>
 80102ee:	42a9      	cmp	r1, r5
 80102f0:	d903      	bls.n	80102fa <_malloc_r+0x22>
 80102f2:	230c      	movs	r3, #12
 80102f4:	6033      	str	r3, [r6, #0]
 80102f6:	2000      	movs	r0, #0
 80102f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102fa:	f001 ff13 	bl	8012124 <__malloc_lock>
 80102fe:	4921      	ldr	r1, [pc, #132]	; (8010384 <_malloc_r+0xac>)
 8010300:	680a      	ldr	r2, [r1, #0]
 8010302:	4614      	mov	r4, r2
 8010304:	b99c      	cbnz	r4, 801032e <_malloc_r+0x56>
 8010306:	4f20      	ldr	r7, [pc, #128]	; (8010388 <_malloc_r+0xb0>)
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	b923      	cbnz	r3, 8010316 <_malloc_r+0x3e>
 801030c:	4621      	mov	r1, r4
 801030e:	4630      	mov	r0, r6
 8010310:	f000 fd4a 	bl	8010da8 <_sbrk_r>
 8010314:	6038      	str	r0, [r7, #0]
 8010316:	4629      	mov	r1, r5
 8010318:	4630      	mov	r0, r6
 801031a:	f000 fd45 	bl	8010da8 <_sbrk_r>
 801031e:	1c43      	adds	r3, r0, #1
 8010320:	d123      	bne.n	801036a <_malloc_r+0x92>
 8010322:	230c      	movs	r3, #12
 8010324:	6033      	str	r3, [r6, #0]
 8010326:	4630      	mov	r0, r6
 8010328:	f001 ff02 	bl	8012130 <__malloc_unlock>
 801032c:	e7e3      	b.n	80102f6 <_malloc_r+0x1e>
 801032e:	6823      	ldr	r3, [r4, #0]
 8010330:	1b5b      	subs	r3, r3, r5
 8010332:	d417      	bmi.n	8010364 <_malloc_r+0x8c>
 8010334:	2b0b      	cmp	r3, #11
 8010336:	d903      	bls.n	8010340 <_malloc_r+0x68>
 8010338:	6023      	str	r3, [r4, #0]
 801033a:	441c      	add	r4, r3
 801033c:	6025      	str	r5, [r4, #0]
 801033e:	e004      	b.n	801034a <_malloc_r+0x72>
 8010340:	6863      	ldr	r3, [r4, #4]
 8010342:	42a2      	cmp	r2, r4
 8010344:	bf0c      	ite	eq
 8010346:	600b      	streq	r3, [r1, #0]
 8010348:	6053      	strne	r3, [r2, #4]
 801034a:	4630      	mov	r0, r6
 801034c:	f001 fef0 	bl	8012130 <__malloc_unlock>
 8010350:	f104 000b 	add.w	r0, r4, #11
 8010354:	1d23      	adds	r3, r4, #4
 8010356:	f020 0007 	bic.w	r0, r0, #7
 801035a:	1ac2      	subs	r2, r0, r3
 801035c:	d0cc      	beq.n	80102f8 <_malloc_r+0x20>
 801035e:	1a1b      	subs	r3, r3, r0
 8010360:	50a3      	str	r3, [r4, r2]
 8010362:	e7c9      	b.n	80102f8 <_malloc_r+0x20>
 8010364:	4622      	mov	r2, r4
 8010366:	6864      	ldr	r4, [r4, #4]
 8010368:	e7cc      	b.n	8010304 <_malloc_r+0x2c>
 801036a:	1cc4      	adds	r4, r0, #3
 801036c:	f024 0403 	bic.w	r4, r4, #3
 8010370:	42a0      	cmp	r0, r4
 8010372:	d0e3      	beq.n	801033c <_malloc_r+0x64>
 8010374:	1a21      	subs	r1, r4, r0
 8010376:	4630      	mov	r0, r6
 8010378:	f000 fd16 	bl	8010da8 <_sbrk_r>
 801037c:	3001      	adds	r0, #1
 801037e:	d1dd      	bne.n	801033c <_malloc_r+0x64>
 8010380:	e7cf      	b.n	8010322 <_malloc_r+0x4a>
 8010382:	bf00      	nop
 8010384:	20000324 	.word	0x20000324
 8010388:	20000328 	.word	0x20000328

0801038c <__cvt>:
 801038c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010390:	ec55 4b10 	vmov	r4, r5, d0
 8010394:	2d00      	cmp	r5, #0
 8010396:	460e      	mov	r6, r1
 8010398:	4619      	mov	r1, r3
 801039a:	462b      	mov	r3, r5
 801039c:	bfbb      	ittet	lt
 801039e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80103a2:	461d      	movlt	r5, r3
 80103a4:	2300      	movge	r3, #0
 80103a6:	232d      	movlt	r3, #45	; 0x2d
 80103a8:	700b      	strb	r3, [r1, #0]
 80103aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80103b0:	4691      	mov	r9, r2
 80103b2:	f023 0820 	bic.w	r8, r3, #32
 80103b6:	bfbc      	itt	lt
 80103b8:	4622      	movlt	r2, r4
 80103ba:	4614      	movlt	r4, r2
 80103bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80103c0:	d005      	beq.n	80103ce <__cvt+0x42>
 80103c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80103c6:	d100      	bne.n	80103ca <__cvt+0x3e>
 80103c8:	3601      	adds	r6, #1
 80103ca:	2102      	movs	r1, #2
 80103cc:	e000      	b.n	80103d0 <__cvt+0x44>
 80103ce:	2103      	movs	r1, #3
 80103d0:	ab03      	add	r3, sp, #12
 80103d2:	9301      	str	r3, [sp, #4]
 80103d4:	ab02      	add	r3, sp, #8
 80103d6:	9300      	str	r3, [sp, #0]
 80103d8:	ec45 4b10 	vmov	d0, r4, r5
 80103dc:	4653      	mov	r3, sl
 80103de:	4632      	mov	r2, r6
 80103e0:	f000 fe7e 	bl	80110e0 <_dtoa_r>
 80103e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80103e8:	4607      	mov	r7, r0
 80103ea:	d102      	bne.n	80103f2 <__cvt+0x66>
 80103ec:	f019 0f01 	tst.w	r9, #1
 80103f0:	d022      	beq.n	8010438 <__cvt+0xac>
 80103f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80103f6:	eb07 0906 	add.w	r9, r7, r6
 80103fa:	d110      	bne.n	801041e <__cvt+0x92>
 80103fc:	783b      	ldrb	r3, [r7, #0]
 80103fe:	2b30      	cmp	r3, #48	; 0x30
 8010400:	d10a      	bne.n	8010418 <__cvt+0x8c>
 8010402:	2200      	movs	r2, #0
 8010404:	2300      	movs	r3, #0
 8010406:	4620      	mov	r0, r4
 8010408:	4629      	mov	r1, r5
 801040a:	f7f0 fb7d 	bl	8000b08 <__aeabi_dcmpeq>
 801040e:	b918      	cbnz	r0, 8010418 <__cvt+0x8c>
 8010410:	f1c6 0601 	rsb	r6, r6, #1
 8010414:	f8ca 6000 	str.w	r6, [sl]
 8010418:	f8da 3000 	ldr.w	r3, [sl]
 801041c:	4499      	add	r9, r3
 801041e:	2200      	movs	r2, #0
 8010420:	2300      	movs	r3, #0
 8010422:	4620      	mov	r0, r4
 8010424:	4629      	mov	r1, r5
 8010426:	f7f0 fb6f 	bl	8000b08 <__aeabi_dcmpeq>
 801042a:	b108      	cbz	r0, 8010430 <__cvt+0xa4>
 801042c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010430:	2230      	movs	r2, #48	; 0x30
 8010432:	9b03      	ldr	r3, [sp, #12]
 8010434:	454b      	cmp	r3, r9
 8010436:	d307      	bcc.n	8010448 <__cvt+0xbc>
 8010438:	9b03      	ldr	r3, [sp, #12]
 801043a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801043c:	1bdb      	subs	r3, r3, r7
 801043e:	4638      	mov	r0, r7
 8010440:	6013      	str	r3, [r2, #0]
 8010442:	b004      	add	sp, #16
 8010444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010448:	1c59      	adds	r1, r3, #1
 801044a:	9103      	str	r1, [sp, #12]
 801044c:	701a      	strb	r2, [r3, #0]
 801044e:	e7f0      	b.n	8010432 <__cvt+0xa6>

08010450 <__exponent>:
 8010450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010452:	4603      	mov	r3, r0
 8010454:	2900      	cmp	r1, #0
 8010456:	bfb8      	it	lt
 8010458:	4249      	neglt	r1, r1
 801045a:	f803 2b02 	strb.w	r2, [r3], #2
 801045e:	bfb4      	ite	lt
 8010460:	222d      	movlt	r2, #45	; 0x2d
 8010462:	222b      	movge	r2, #43	; 0x2b
 8010464:	2909      	cmp	r1, #9
 8010466:	7042      	strb	r2, [r0, #1]
 8010468:	dd2a      	ble.n	80104c0 <__exponent+0x70>
 801046a:	f10d 0407 	add.w	r4, sp, #7
 801046e:	46a4      	mov	ip, r4
 8010470:	270a      	movs	r7, #10
 8010472:	46a6      	mov	lr, r4
 8010474:	460a      	mov	r2, r1
 8010476:	fb91 f6f7 	sdiv	r6, r1, r7
 801047a:	fb07 1516 	mls	r5, r7, r6, r1
 801047e:	3530      	adds	r5, #48	; 0x30
 8010480:	2a63      	cmp	r2, #99	; 0x63
 8010482:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8010486:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801048a:	4631      	mov	r1, r6
 801048c:	dcf1      	bgt.n	8010472 <__exponent+0x22>
 801048e:	3130      	adds	r1, #48	; 0x30
 8010490:	f1ae 0502 	sub.w	r5, lr, #2
 8010494:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010498:	1c44      	adds	r4, r0, #1
 801049a:	4629      	mov	r1, r5
 801049c:	4561      	cmp	r1, ip
 801049e:	d30a      	bcc.n	80104b6 <__exponent+0x66>
 80104a0:	f10d 0209 	add.w	r2, sp, #9
 80104a4:	eba2 020e 	sub.w	r2, r2, lr
 80104a8:	4565      	cmp	r5, ip
 80104aa:	bf88      	it	hi
 80104ac:	2200      	movhi	r2, #0
 80104ae:	4413      	add	r3, r2
 80104b0:	1a18      	subs	r0, r3, r0
 80104b2:	b003      	add	sp, #12
 80104b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80104ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80104be:	e7ed      	b.n	801049c <__exponent+0x4c>
 80104c0:	2330      	movs	r3, #48	; 0x30
 80104c2:	3130      	adds	r1, #48	; 0x30
 80104c4:	7083      	strb	r3, [r0, #2]
 80104c6:	70c1      	strb	r1, [r0, #3]
 80104c8:	1d03      	adds	r3, r0, #4
 80104ca:	e7f1      	b.n	80104b0 <__exponent+0x60>

080104cc <_printf_float>:
 80104cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104d0:	ed2d 8b02 	vpush	{d8}
 80104d4:	b08d      	sub	sp, #52	; 0x34
 80104d6:	460c      	mov	r4, r1
 80104d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80104dc:	4616      	mov	r6, r2
 80104de:	461f      	mov	r7, r3
 80104e0:	4605      	mov	r5, r0
 80104e2:	f001 fdb3 	bl	801204c <_localeconv_r>
 80104e6:	f8d0 a000 	ldr.w	sl, [r0]
 80104ea:	4650      	mov	r0, sl
 80104ec:	f7ef fe90 	bl	8000210 <strlen>
 80104f0:	2300      	movs	r3, #0
 80104f2:	930a      	str	r3, [sp, #40]	; 0x28
 80104f4:	6823      	ldr	r3, [r4, #0]
 80104f6:	9305      	str	r3, [sp, #20]
 80104f8:	f8d8 3000 	ldr.w	r3, [r8]
 80104fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010500:	3307      	adds	r3, #7
 8010502:	f023 0307 	bic.w	r3, r3, #7
 8010506:	f103 0208 	add.w	r2, r3, #8
 801050a:	f8c8 2000 	str.w	r2, [r8]
 801050e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010512:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010516:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801051a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801051e:	9307      	str	r3, [sp, #28]
 8010520:	f8cd 8018 	str.w	r8, [sp, #24]
 8010524:	ee08 0a10 	vmov	s16, r0
 8010528:	4b9f      	ldr	r3, [pc, #636]	; (80107a8 <_printf_float+0x2dc>)
 801052a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801052e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010532:	f7f0 fb1b 	bl	8000b6c <__aeabi_dcmpun>
 8010536:	bb88      	cbnz	r0, 801059c <_printf_float+0xd0>
 8010538:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801053c:	4b9a      	ldr	r3, [pc, #616]	; (80107a8 <_printf_float+0x2dc>)
 801053e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010542:	f7f0 faf5 	bl	8000b30 <__aeabi_dcmple>
 8010546:	bb48      	cbnz	r0, 801059c <_printf_float+0xd0>
 8010548:	2200      	movs	r2, #0
 801054a:	2300      	movs	r3, #0
 801054c:	4640      	mov	r0, r8
 801054e:	4649      	mov	r1, r9
 8010550:	f7f0 fae4 	bl	8000b1c <__aeabi_dcmplt>
 8010554:	b110      	cbz	r0, 801055c <_printf_float+0x90>
 8010556:	232d      	movs	r3, #45	; 0x2d
 8010558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801055c:	4b93      	ldr	r3, [pc, #588]	; (80107ac <_printf_float+0x2e0>)
 801055e:	4894      	ldr	r0, [pc, #592]	; (80107b0 <_printf_float+0x2e4>)
 8010560:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010564:	bf94      	ite	ls
 8010566:	4698      	movls	r8, r3
 8010568:	4680      	movhi	r8, r0
 801056a:	2303      	movs	r3, #3
 801056c:	6123      	str	r3, [r4, #16]
 801056e:	9b05      	ldr	r3, [sp, #20]
 8010570:	f023 0204 	bic.w	r2, r3, #4
 8010574:	6022      	str	r2, [r4, #0]
 8010576:	f04f 0900 	mov.w	r9, #0
 801057a:	9700      	str	r7, [sp, #0]
 801057c:	4633      	mov	r3, r6
 801057e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010580:	4621      	mov	r1, r4
 8010582:	4628      	mov	r0, r5
 8010584:	f000 f9d8 	bl	8010938 <_printf_common>
 8010588:	3001      	adds	r0, #1
 801058a:	f040 8090 	bne.w	80106ae <_printf_float+0x1e2>
 801058e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010592:	b00d      	add	sp, #52	; 0x34
 8010594:	ecbd 8b02 	vpop	{d8}
 8010598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801059c:	4642      	mov	r2, r8
 801059e:	464b      	mov	r3, r9
 80105a0:	4640      	mov	r0, r8
 80105a2:	4649      	mov	r1, r9
 80105a4:	f7f0 fae2 	bl	8000b6c <__aeabi_dcmpun>
 80105a8:	b140      	cbz	r0, 80105bc <_printf_float+0xf0>
 80105aa:	464b      	mov	r3, r9
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	bfbc      	itt	lt
 80105b0:	232d      	movlt	r3, #45	; 0x2d
 80105b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80105b6:	487f      	ldr	r0, [pc, #508]	; (80107b4 <_printf_float+0x2e8>)
 80105b8:	4b7f      	ldr	r3, [pc, #508]	; (80107b8 <_printf_float+0x2ec>)
 80105ba:	e7d1      	b.n	8010560 <_printf_float+0x94>
 80105bc:	6863      	ldr	r3, [r4, #4]
 80105be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80105c2:	9206      	str	r2, [sp, #24]
 80105c4:	1c5a      	adds	r2, r3, #1
 80105c6:	d13f      	bne.n	8010648 <_printf_float+0x17c>
 80105c8:	2306      	movs	r3, #6
 80105ca:	6063      	str	r3, [r4, #4]
 80105cc:	9b05      	ldr	r3, [sp, #20]
 80105ce:	6861      	ldr	r1, [r4, #4]
 80105d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80105d4:	2300      	movs	r3, #0
 80105d6:	9303      	str	r3, [sp, #12]
 80105d8:	ab0a      	add	r3, sp, #40	; 0x28
 80105da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80105de:	ab09      	add	r3, sp, #36	; 0x24
 80105e0:	ec49 8b10 	vmov	d0, r8, r9
 80105e4:	9300      	str	r3, [sp, #0]
 80105e6:	6022      	str	r2, [r4, #0]
 80105e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80105ec:	4628      	mov	r0, r5
 80105ee:	f7ff fecd 	bl	801038c <__cvt>
 80105f2:	9b06      	ldr	r3, [sp, #24]
 80105f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80105f6:	2b47      	cmp	r3, #71	; 0x47
 80105f8:	4680      	mov	r8, r0
 80105fa:	d108      	bne.n	801060e <_printf_float+0x142>
 80105fc:	1cc8      	adds	r0, r1, #3
 80105fe:	db02      	blt.n	8010606 <_printf_float+0x13a>
 8010600:	6863      	ldr	r3, [r4, #4]
 8010602:	4299      	cmp	r1, r3
 8010604:	dd41      	ble.n	801068a <_printf_float+0x1be>
 8010606:	f1ab 0b02 	sub.w	fp, fp, #2
 801060a:	fa5f fb8b 	uxtb.w	fp, fp
 801060e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010612:	d820      	bhi.n	8010656 <_printf_float+0x18a>
 8010614:	3901      	subs	r1, #1
 8010616:	465a      	mov	r2, fp
 8010618:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801061c:	9109      	str	r1, [sp, #36]	; 0x24
 801061e:	f7ff ff17 	bl	8010450 <__exponent>
 8010622:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010624:	1813      	adds	r3, r2, r0
 8010626:	2a01      	cmp	r2, #1
 8010628:	4681      	mov	r9, r0
 801062a:	6123      	str	r3, [r4, #16]
 801062c:	dc02      	bgt.n	8010634 <_printf_float+0x168>
 801062e:	6822      	ldr	r2, [r4, #0]
 8010630:	07d2      	lsls	r2, r2, #31
 8010632:	d501      	bpl.n	8010638 <_printf_float+0x16c>
 8010634:	3301      	adds	r3, #1
 8010636:	6123      	str	r3, [r4, #16]
 8010638:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801063c:	2b00      	cmp	r3, #0
 801063e:	d09c      	beq.n	801057a <_printf_float+0xae>
 8010640:	232d      	movs	r3, #45	; 0x2d
 8010642:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010646:	e798      	b.n	801057a <_printf_float+0xae>
 8010648:	9a06      	ldr	r2, [sp, #24]
 801064a:	2a47      	cmp	r2, #71	; 0x47
 801064c:	d1be      	bne.n	80105cc <_printf_float+0x100>
 801064e:	2b00      	cmp	r3, #0
 8010650:	d1bc      	bne.n	80105cc <_printf_float+0x100>
 8010652:	2301      	movs	r3, #1
 8010654:	e7b9      	b.n	80105ca <_printf_float+0xfe>
 8010656:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801065a:	d118      	bne.n	801068e <_printf_float+0x1c2>
 801065c:	2900      	cmp	r1, #0
 801065e:	6863      	ldr	r3, [r4, #4]
 8010660:	dd0b      	ble.n	801067a <_printf_float+0x1ae>
 8010662:	6121      	str	r1, [r4, #16]
 8010664:	b913      	cbnz	r3, 801066c <_printf_float+0x1a0>
 8010666:	6822      	ldr	r2, [r4, #0]
 8010668:	07d0      	lsls	r0, r2, #31
 801066a:	d502      	bpl.n	8010672 <_printf_float+0x1a6>
 801066c:	3301      	adds	r3, #1
 801066e:	440b      	add	r3, r1
 8010670:	6123      	str	r3, [r4, #16]
 8010672:	65a1      	str	r1, [r4, #88]	; 0x58
 8010674:	f04f 0900 	mov.w	r9, #0
 8010678:	e7de      	b.n	8010638 <_printf_float+0x16c>
 801067a:	b913      	cbnz	r3, 8010682 <_printf_float+0x1b6>
 801067c:	6822      	ldr	r2, [r4, #0]
 801067e:	07d2      	lsls	r2, r2, #31
 8010680:	d501      	bpl.n	8010686 <_printf_float+0x1ba>
 8010682:	3302      	adds	r3, #2
 8010684:	e7f4      	b.n	8010670 <_printf_float+0x1a4>
 8010686:	2301      	movs	r3, #1
 8010688:	e7f2      	b.n	8010670 <_printf_float+0x1a4>
 801068a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801068e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010690:	4299      	cmp	r1, r3
 8010692:	db05      	blt.n	80106a0 <_printf_float+0x1d4>
 8010694:	6823      	ldr	r3, [r4, #0]
 8010696:	6121      	str	r1, [r4, #16]
 8010698:	07d8      	lsls	r0, r3, #31
 801069a:	d5ea      	bpl.n	8010672 <_printf_float+0x1a6>
 801069c:	1c4b      	adds	r3, r1, #1
 801069e:	e7e7      	b.n	8010670 <_printf_float+0x1a4>
 80106a0:	2900      	cmp	r1, #0
 80106a2:	bfd4      	ite	le
 80106a4:	f1c1 0202 	rsble	r2, r1, #2
 80106a8:	2201      	movgt	r2, #1
 80106aa:	4413      	add	r3, r2
 80106ac:	e7e0      	b.n	8010670 <_printf_float+0x1a4>
 80106ae:	6823      	ldr	r3, [r4, #0]
 80106b0:	055a      	lsls	r2, r3, #21
 80106b2:	d407      	bmi.n	80106c4 <_printf_float+0x1f8>
 80106b4:	6923      	ldr	r3, [r4, #16]
 80106b6:	4642      	mov	r2, r8
 80106b8:	4631      	mov	r1, r6
 80106ba:	4628      	mov	r0, r5
 80106bc:	47b8      	blx	r7
 80106be:	3001      	adds	r0, #1
 80106c0:	d12c      	bne.n	801071c <_printf_float+0x250>
 80106c2:	e764      	b.n	801058e <_printf_float+0xc2>
 80106c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80106c8:	f240 80e0 	bls.w	801088c <_printf_float+0x3c0>
 80106cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80106d0:	2200      	movs	r2, #0
 80106d2:	2300      	movs	r3, #0
 80106d4:	f7f0 fa18 	bl	8000b08 <__aeabi_dcmpeq>
 80106d8:	2800      	cmp	r0, #0
 80106da:	d034      	beq.n	8010746 <_printf_float+0x27a>
 80106dc:	4a37      	ldr	r2, [pc, #220]	; (80107bc <_printf_float+0x2f0>)
 80106de:	2301      	movs	r3, #1
 80106e0:	4631      	mov	r1, r6
 80106e2:	4628      	mov	r0, r5
 80106e4:	47b8      	blx	r7
 80106e6:	3001      	adds	r0, #1
 80106e8:	f43f af51 	beq.w	801058e <_printf_float+0xc2>
 80106ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80106f0:	429a      	cmp	r2, r3
 80106f2:	db02      	blt.n	80106fa <_printf_float+0x22e>
 80106f4:	6823      	ldr	r3, [r4, #0]
 80106f6:	07d8      	lsls	r0, r3, #31
 80106f8:	d510      	bpl.n	801071c <_printf_float+0x250>
 80106fa:	ee18 3a10 	vmov	r3, s16
 80106fe:	4652      	mov	r2, sl
 8010700:	4631      	mov	r1, r6
 8010702:	4628      	mov	r0, r5
 8010704:	47b8      	blx	r7
 8010706:	3001      	adds	r0, #1
 8010708:	f43f af41 	beq.w	801058e <_printf_float+0xc2>
 801070c:	f04f 0800 	mov.w	r8, #0
 8010710:	f104 091a 	add.w	r9, r4, #26
 8010714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010716:	3b01      	subs	r3, #1
 8010718:	4543      	cmp	r3, r8
 801071a:	dc09      	bgt.n	8010730 <_printf_float+0x264>
 801071c:	6823      	ldr	r3, [r4, #0]
 801071e:	079b      	lsls	r3, r3, #30
 8010720:	f100 8105 	bmi.w	801092e <_printf_float+0x462>
 8010724:	68e0      	ldr	r0, [r4, #12]
 8010726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010728:	4298      	cmp	r0, r3
 801072a:	bfb8      	it	lt
 801072c:	4618      	movlt	r0, r3
 801072e:	e730      	b.n	8010592 <_printf_float+0xc6>
 8010730:	2301      	movs	r3, #1
 8010732:	464a      	mov	r2, r9
 8010734:	4631      	mov	r1, r6
 8010736:	4628      	mov	r0, r5
 8010738:	47b8      	blx	r7
 801073a:	3001      	adds	r0, #1
 801073c:	f43f af27 	beq.w	801058e <_printf_float+0xc2>
 8010740:	f108 0801 	add.w	r8, r8, #1
 8010744:	e7e6      	b.n	8010714 <_printf_float+0x248>
 8010746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010748:	2b00      	cmp	r3, #0
 801074a:	dc39      	bgt.n	80107c0 <_printf_float+0x2f4>
 801074c:	4a1b      	ldr	r2, [pc, #108]	; (80107bc <_printf_float+0x2f0>)
 801074e:	2301      	movs	r3, #1
 8010750:	4631      	mov	r1, r6
 8010752:	4628      	mov	r0, r5
 8010754:	47b8      	blx	r7
 8010756:	3001      	adds	r0, #1
 8010758:	f43f af19 	beq.w	801058e <_printf_float+0xc2>
 801075c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010760:	4313      	orrs	r3, r2
 8010762:	d102      	bne.n	801076a <_printf_float+0x29e>
 8010764:	6823      	ldr	r3, [r4, #0]
 8010766:	07d9      	lsls	r1, r3, #31
 8010768:	d5d8      	bpl.n	801071c <_printf_float+0x250>
 801076a:	ee18 3a10 	vmov	r3, s16
 801076e:	4652      	mov	r2, sl
 8010770:	4631      	mov	r1, r6
 8010772:	4628      	mov	r0, r5
 8010774:	47b8      	blx	r7
 8010776:	3001      	adds	r0, #1
 8010778:	f43f af09 	beq.w	801058e <_printf_float+0xc2>
 801077c:	f04f 0900 	mov.w	r9, #0
 8010780:	f104 0a1a 	add.w	sl, r4, #26
 8010784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010786:	425b      	negs	r3, r3
 8010788:	454b      	cmp	r3, r9
 801078a:	dc01      	bgt.n	8010790 <_printf_float+0x2c4>
 801078c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801078e:	e792      	b.n	80106b6 <_printf_float+0x1ea>
 8010790:	2301      	movs	r3, #1
 8010792:	4652      	mov	r2, sl
 8010794:	4631      	mov	r1, r6
 8010796:	4628      	mov	r0, r5
 8010798:	47b8      	blx	r7
 801079a:	3001      	adds	r0, #1
 801079c:	f43f aef7 	beq.w	801058e <_printf_float+0xc2>
 80107a0:	f109 0901 	add.w	r9, r9, #1
 80107a4:	e7ee      	b.n	8010784 <_printf_float+0x2b8>
 80107a6:	bf00      	nop
 80107a8:	7fefffff 	.word	0x7fefffff
 80107ac:	08015698 	.word	0x08015698
 80107b0:	0801569c 	.word	0x0801569c
 80107b4:	080156a4 	.word	0x080156a4
 80107b8:	080156a0 	.word	0x080156a0
 80107bc:	080156a8 	.word	0x080156a8
 80107c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80107c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80107c4:	429a      	cmp	r2, r3
 80107c6:	bfa8      	it	ge
 80107c8:	461a      	movge	r2, r3
 80107ca:	2a00      	cmp	r2, #0
 80107cc:	4691      	mov	r9, r2
 80107ce:	dc37      	bgt.n	8010840 <_printf_float+0x374>
 80107d0:	f04f 0b00 	mov.w	fp, #0
 80107d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80107d8:	f104 021a 	add.w	r2, r4, #26
 80107dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80107de:	9305      	str	r3, [sp, #20]
 80107e0:	eba3 0309 	sub.w	r3, r3, r9
 80107e4:	455b      	cmp	r3, fp
 80107e6:	dc33      	bgt.n	8010850 <_printf_float+0x384>
 80107e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80107ec:	429a      	cmp	r2, r3
 80107ee:	db3b      	blt.n	8010868 <_printf_float+0x39c>
 80107f0:	6823      	ldr	r3, [r4, #0]
 80107f2:	07da      	lsls	r2, r3, #31
 80107f4:	d438      	bmi.n	8010868 <_printf_float+0x39c>
 80107f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80107f8:	9b05      	ldr	r3, [sp, #20]
 80107fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80107fc:	1ad3      	subs	r3, r2, r3
 80107fe:	eba2 0901 	sub.w	r9, r2, r1
 8010802:	4599      	cmp	r9, r3
 8010804:	bfa8      	it	ge
 8010806:	4699      	movge	r9, r3
 8010808:	f1b9 0f00 	cmp.w	r9, #0
 801080c:	dc35      	bgt.n	801087a <_printf_float+0x3ae>
 801080e:	f04f 0800 	mov.w	r8, #0
 8010812:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010816:	f104 0a1a 	add.w	sl, r4, #26
 801081a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801081e:	1a9b      	subs	r3, r3, r2
 8010820:	eba3 0309 	sub.w	r3, r3, r9
 8010824:	4543      	cmp	r3, r8
 8010826:	f77f af79 	ble.w	801071c <_printf_float+0x250>
 801082a:	2301      	movs	r3, #1
 801082c:	4652      	mov	r2, sl
 801082e:	4631      	mov	r1, r6
 8010830:	4628      	mov	r0, r5
 8010832:	47b8      	blx	r7
 8010834:	3001      	adds	r0, #1
 8010836:	f43f aeaa 	beq.w	801058e <_printf_float+0xc2>
 801083a:	f108 0801 	add.w	r8, r8, #1
 801083e:	e7ec      	b.n	801081a <_printf_float+0x34e>
 8010840:	4613      	mov	r3, r2
 8010842:	4631      	mov	r1, r6
 8010844:	4642      	mov	r2, r8
 8010846:	4628      	mov	r0, r5
 8010848:	47b8      	blx	r7
 801084a:	3001      	adds	r0, #1
 801084c:	d1c0      	bne.n	80107d0 <_printf_float+0x304>
 801084e:	e69e      	b.n	801058e <_printf_float+0xc2>
 8010850:	2301      	movs	r3, #1
 8010852:	4631      	mov	r1, r6
 8010854:	4628      	mov	r0, r5
 8010856:	9205      	str	r2, [sp, #20]
 8010858:	47b8      	blx	r7
 801085a:	3001      	adds	r0, #1
 801085c:	f43f ae97 	beq.w	801058e <_printf_float+0xc2>
 8010860:	9a05      	ldr	r2, [sp, #20]
 8010862:	f10b 0b01 	add.w	fp, fp, #1
 8010866:	e7b9      	b.n	80107dc <_printf_float+0x310>
 8010868:	ee18 3a10 	vmov	r3, s16
 801086c:	4652      	mov	r2, sl
 801086e:	4631      	mov	r1, r6
 8010870:	4628      	mov	r0, r5
 8010872:	47b8      	blx	r7
 8010874:	3001      	adds	r0, #1
 8010876:	d1be      	bne.n	80107f6 <_printf_float+0x32a>
 8010878:	e689      	b.n	801058e <_printf_float+0xc2>
 801087a:	9a05      	ldr	r2, [sp, #20]
 801087c:	464b      	mov	r3, r9
 801087e:	4442      	add	r2, r8
 8010880:	4631      	mov	r1, r6
 8010882:	4628      	mov	r0, r5
 8010884:	47b8      	blx	r7
 8010886:	3001      	adds	r0, #1
 8010888:	d1c1      	bne.n	801080e <_printf_float+0x342>
 801088a:	e680      	b.n	801058e <_printf_float+0xc2>
 801088c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801088e:	2a01      	cmp	r2, #1
 8010890:	dc01      	bgt.n	8010896 <_printf_float+0x3ca>
 8010892:	07db      	lsls	r3, r3, #31
 8010894:	d538      	bpl.n	8010908 <_printf_float+0x43c>
 8010896:	2301      	movs	r3, #1
 8010898:	4642      	mov	r2, r8
 801089a:	4631      	mov	r1, r6
 801089c:	4628      	mov	r0, r5
 801089e:	47b8      	blx	r7
 80108a0:	3001      	adds	r0, #1
 80108a2:	f43f ae74 	beq.w	801058e <_printf_float+0xc2>
 80108a6:	ee18 3a10 	vmov	r3, s16
 80108aa:	4652      	mov	r2, sl
 80108ac:	4631      	mov	r1, r6
 80108ae:	4628      	mov	r0, r5
 80108b0:	47b8      	blx	r7
 80108b2:	3001      	adds	r0, #1
 80108b4:	f43f ae6b 	beq.w	801058e <_printf_float+0xc2>
 80108b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80108bc:	2200      	movs	r2, #0
 80108be:	2300      	movs	r3, #0
 80108c0:	f7f0 f922 	bl	8000b08 <__aeabi_dcmpeq>
 80108c4:	b9d8      	cbnz	r0, 80108fe <_printf_float+0x432>
 80108c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108c8:	f108 0201 	add.w	r2, r8, #1
 80108cc:	3b01      	subs	r3, #1
 80108ce:	4631      	mov	r1, r6
 80108d0:	4628      	mov	r0, r5
 80108d2:	47b8      	blx	r7
 80108d4:	3001      	adds	r0, #1
 80108d6:	d10e      	bne.n	80108f6 <_printf_float+0x42a>
 80108d8:	e659      	b.n	801058e <_printf_float+0xc2>
 80108da:	2301      	movs	r3, #1
 80108dc:	4652      	mov	r2, sl
 80108de:	4631      	mov	r1, r6
 80108e0:	4628      	mov	r0, r5
 80108e2:	47b8      	blx	r7
 80108e4:	3001      	adds	r0, #1
 80108e6:	f43f ae52 	beq.w	801058e <_printf_float+0xc2>
 80108ea:	f108 0801 	add.w	r8, r8, #1
 80108ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108f0:	3b01      	subs	r3, #1
 80108f2:	4543      	cmp	r3, r8
 80108f4:	dcf1      	bgt.n	80108da <_printf_float+0x40e>
 80108f6:	464b      	mov	r3, r9
 80108f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80108fc:	e6dc      	b.n	80106b8 <_printf_float+0x1ec>
 80108fe:	f04f 0800 	mov.w	r8, #0
 8010902:	f104 0a1a 	add.w	sl, r4, #26
 8010906:	e7f2      	b.n	80108ee <_printf_float+0x422>
 8010908:	2301      	movs	r3, #1
 801090a:	4642      	mov	r2, r8
 801090c:	e7df      	b.n	80108ce <_printf_float+0x402>
 801090e:	2301      	movs	r3, #1
 8010910:	464a      	mov	r2, r9
 8010912:	4631      	mov	r1, r6
 8010914:	4628      	mov	r0, r5
 8010916:	47b8      	blx	r7
 8010918:	3001      	adds	r0, #1
 801091a:	f43f ae38 	beq.w	801058e <_printf_float+0xc2>
 801091e:	f108 0801 	add.w	r8, r8, #1
 8010922:	68e3      	ldr	r3, [r4, #12]
 8010924:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010926:	1a5b      	subs	r3, r3, r1
 8010928:	4543      	cmp	r3, r8
 801092a:	dcf0      	bgt.n	801090e <_printf_float+0x442>
 801092c:	e6fa      	b.n	8010724 <_printf_float+0x258>
 801092e:	f04f 0800 	mov.w	r8, #0
 8010932:	f104 0919 	add.w	r9, r4, #25
 8010936:	e7f4      	b.n	8010922 <_printf_float+0x456>

08010938 <_printf_common>:
 8010938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801093c:	4616      	mov	r6, r2
 801093e:	4699      	mov	r9, r3
 8010940:	688a      	ldr	r2, [r1, #8]
 8010942:	690b      	ldr	r3, [r1, #16]
 8010944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010948:	4293      	cmp	r3, r2
 801094a:	bfb8      	it	lt
 801094c:	4613      	movlt	r3, r2
 801094e:	6033      	str	r3, [r6, #0]
 8010950:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010954:	4607      	mov	r7, r0
 8010956:	460c      	mov	r4, r1
 8010958:	b10a      	cbz	r2, 801095e <_printf_common+0x26>
 801095a:	3301      	adds	r3, #1
 801095c:	6033      	str	r3, [r6, #0]
 801095e:	6823      	ldr	r3, [r4, #0]
 8010960:	0699      	lsls	r1, r3, #26
 8010962:	bf42      	ittt	mi
 8010964:	6833      	ldrmi	r3, [r6, #0]
 8010966:	3302      	addmi	r3, #2
 8010968:	6033      	strmi	r3, [r6, #0]
 801096a:	6825      	ldr	r5, [r4, #0]
 801096c:	f015 0506 	ands.w	r5, r5, #6
 8010970:	d106      	bne.n	8010980 <_printf_common+0x48>
 8010972:	f104 0a19 	add.w	sl, r4, #25
 8010976:	68e3      	ldr	r3, [r4, #12]
 8010978:	6832      	ldr	r2, [r6, #0]
 801097a:	1a9b      	subs	r3, r3, r2
 801097c:	42ab      	cmp	r3, r5
 801097e:	dc26      	bgt.n	80109ce <_printf_common+0x96>
 8010980:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010984:	1e13      	subs	r3, r2, #0
 8010986:	6822      	ldr	r2, [r4, #0]
 8010988:	bf18      	it	ne
 801098a:	2301      	movne	r3, #1
 801098c:	0692      	lsls	r2, r2, #26
 801098e:	d42b      	bmi.n	80109e8 <_printf_common+0xb0>
 8010990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010994:	4649      	mov	r1, r9
 8010996:	4638      	mov	r0, r7
 8010998:	47c0      	blx	r8
 801099a:	3001      	adds	r0, #1
 801099c:	d01e      	beq.n	80109dc <_printf_common+0xa4>
 801099e:	6823      	ldr	r3, [r4, #0]
 80109a0:	68e5      	ldr	r5, [r4, #12]
 80109a2:	6832      	ldr	r2, [r6, #0]
 80109a4:	f003 0306 	and.w	r3, r3, #6
 80109a8:	2b04      	cmp	r3, #4
 80109aa:	bf08      	it	eq
 80109ac:	1aad      	subeq	r5, r5, r2
 80109ae:	68a3      	ldr	r3, [r4, #8]
 80109b0:	6922      	ldr	r2, [r4, #16]
 80109b2:	bf0c      	ite	eq
 80109b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80109b8:	2500      	movne	r5, #0
 80109ba:	4293      	cmp	r3, r2
 80109bc:	bfc4      	itt	gt
 80109be:	1a9b      	subgt	r3, r3, r2
 80109c0:	18ed      	addgt	r5, r5, r3
 80109c2:	2600      	movs	r6, #0
 80109c4:	341a      	adds	r4, #26
 80109c6:	42b5      	cmp	r5, r6
 80109c8:	d11a      	bne.n	8010a00 <_printf_common+0xc8>
 80109ca:	2000      	movs	r0, #0
 80109cc:	e008      	b.n	80109e0 <_printf_common+0xa8>
 80109ce:	2301      	movs	r3, #1
 80109d0:	4652      	mov	r2, sl
 80109d2:	4649      	mov	r1, r9
 80109d4:	4638      	mov	r0, r7
 80109d6:	47c0      	blx	r8
 80109d8:	3001      	adds	r0, #1
 80109da:	d103      	bne.n	80109e4 <_printf_common+0xac>
 80109dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80109e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109e4:	3501      	adds	r5, #1
 80109e6:	e7c6      	b.n	8010976 <_printf_common+0x3e>
 80109e8:	18e1      	adds	r1, r4, r3
 80109ea:	1c5a      	adds	r2, r3, #1
 80109ec:	2030      	movs	r0, #48	; 0x30
 80109ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80109f2:	4422      	add	r2, r4
 80109f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80109f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80109fc:	3302      	adds	r3, #2
 80109fe:	e7c7      	b.n	8010990 <_printf_common+0x58>
 8010a00:	2301      	movs	r3, #1
 8010a02:	4622      	mov	r2, r4
 8010a04:	4649      	mov	r1, r9
 8010a06:	4638      	mov	r0, r7
 8010a08:	47c0      	blx	r8
 8010a0a:	3001      	adds	r0, #1
 8010a0c:	d0e6      	beq.n	80109dc <_printf_common+0xa4>
 8010a0e:	3601      	adds	r6, #1
 8010a10:	e7d9      	b.n	80109c6 <_printf_common+0x8e>
	...

08010a14 <_printf_i>:
 8010a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a18:	460c      	mov	r4, r1
 8010a1a:	4691      	mov	r9, r2
 8010a1c:	7e27      	ldrb	r7, [r4, #24]
 8010a1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010a20:	2f78      	cmp	r7, #120	; 0x78
 8010a22:	4680      	mov	r8, r0
 8010a24:	469a      	mov	sl, r3
 8010a26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a2a:	d807      	bhi.n	8010a3c <_printf_i+0x28>
 8010a2c:	2f62      	cmp	r7, #98	; 0x62
 8010a2e:	d80a      	bhi.n	8010a46 <_printf_i+0x32>
 8010a30:	2f00      	cmp	r7, #0
 8010a32:	f000 80d8 	beq.w	8010be6 <_printf_i+0x1d2>
 8010a36:	2f58      	cmp	r7, #88	; 0x58
 8010a38:	f000 80a3 	beq.w	8010b82 <_printf_i+0x16e>
 8010a3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010a40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010a44:	e03a      	b.n	8010abc <_printf_i+0xa8>
 8010a46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010a4a:	2b15      	cmp	r3, #21
 8010a4c:	d8f6      	bhi.n	8010a3c <_printf_i+0x28>
 8010a4e:	a001      	add	r0, pc, #4	; (adr r0, 8010a54 <_printf_i+0x40>)
 8010a50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010a54:	08010aad 	.word	0x08010aad
 8010a58:	08010ac1 	.word	0x08010ac1
 8010a5c:	08010a3d 	.word	0x08010a3d
 8010a60:	08010a3d 	.word	0x08010a3d
 8010a64:	08010a3d 	.word	0x08010a3d
 8010a68:	08010a3d 	.word	0x08010a3d
 8010a6c:	08010ac1 	.word	0x08010ac1
 8010a70:	08010a3d 	.word	0x08010a3d
 8010a74:	08010a3d 	.word	0x08010a3d
 8010a78:	08010a3d 	.word	0x08010a3d
 8010a7c:	08010a3d 	.word	0x08010a3d
 8010a80:	08010bcd 	.word	0x08010bcd
 8010a84:	08010af1 	.word	0x08010af1
 8010a88:	08010baf 	.word	0x08010baf
 8010a8c:	08010a3d 	.word	0x08010a3d
 8010a90:	08010a3d 	.word	0x08010a3d
 8010a94:	08010bef 	.word	0x08010bef
 8010a98:	08010a3d 	.word	0x08010a3d
 8010a9c:	08010af1 	.word	0x08010af1
 8010aa0:	08010a3d 	.word	0x08010a3d
 8010aa4:	08010a3d 	.word	0x08010a3d
 8010aa8:	08010bb7 	.word	0x08010bb7
 8010aac:	680b      	ldr	r3, [r1, #0]
 8010aae:	1d1a      	adds	r2, r3, #4
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	600a      	str	r2, [r1, #0]
 8010ab4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010abc:	2301      	movs	r3, #1
 8010abe:	e0a3      	b.n	8010c08 <_printf_i+0x1f4>
 8010ac0:	6825      	ldr	r5, [r4, #0]
 8010ac2:	6808      	ldr	r0, [r1, #0]
 8010ac4:	062e      	lsls	r6, r5, #24
 8010ac6:	f100 0304 	add.w	r3, r0, #4
 8010aca:	d50a      	bpl.n	8010ae2 <_printf_i+0xce>
 8010acc:	6805      	ldr	r5, [r0, #0]
 8010ace:	600b      	str	r3, [r1, #0]
 8010ad0:	2d00      	cmp	r5, #0
 8010ad2:	da03      	bge.n	8010adc <_printf_i+0xc8>
 8010ad4:	232d      	movs	r3, #45	; 0x2d
 8010ad6:	426d      	negs	r5, r5
 8010ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010adc:	485e      	ldr	r0, [pc, #376]	; (8010c58 <_printf_i+0x244>)
 8010ade:	230a      	movs	r3, #10
 8010ae0:	e019      	b.n	8010b16 <_printf_i+0x102>
 8010ae2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010ae6:	6805      	ldr	r5, [r0, #0]
 8010ae8:	600b      	str	r3, [r1, #0]
 8010aea:	bf18      	it	ne
 8010aec:	b22d      	sxthne	r5, r5
 8010aee:	e7ef      	b.n	8010ad0 <_printf_i+0xbc>
 8010af0:	680b      	ldr	r3, [r1, #0]
 8010af2:	6825      	ldr	r5, [r4, #0]
 8010af4:	1d18      	adds	r0, r3, #4
 8010af6:	6008      	str	r0, [r1, #0]
 8010af8:	0628      	lsls	r0, r5, #24
 8010afa:	d501      	bpl.n	8010b00 <_printf_i+0xec>
 8010afc:	681d      	ldr	r5, [r3, #0]
 8010afe:	e002      	b.n	8010b06 <_printf_i+0xf2>
 8010b00:	0669      	lsls	r1, r5, #25
 8010b02:	d5fb      	bpl.n	8010afc <_printf_i+0xe8>
 8010b04:	881d      	ldrh	r5, [r3, #0]
 8010b06:	4854      	ldr	r0, [pc, #336]	; (8010c58 <_printf_i+0x244>)
 8010b08:	2f6f      	cmp	r7, #111	; 0x6f
 8010b0a:	bf0c      	ite	eq
 8010b0c:	2308      	moveq	r3, #8
 8010b0e:	230a      	movne	r3, #10
 8010b10:	2100      	movs	r1, #0
 8010b12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010b16:	6866      	ldr	r6, [r4, #4]
 8010b18:	60a6      	str	r6, [r4, #8]
 8010b1a:	2e00      	cmp	r6, #0
 8010b1c:	bfa2      	ittt	ge
 8010b1e:	6821      	ldrge	r1, [r4, #0]
 8010b20:	f021 0104 	bicge.w	r1, r1, #4
 8010b24:	6021      	strge	r1, [r4, #0]
 8010b26:	b90d      	cbnz	r5, 8010b2c <_printf_i+0x118>
 8010b28:	2e00      	cmp	r6, #0
 8010b2a:	d04d      	beq.n	8010bc8 <_printf_i+0x1b4>
 8010b2c:	4616      	mov	r6, r2
 8010b2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010b32:	fb03 5711 	mls	r7, r3, r1, r5
 8010b36:	5dc7      	ldrb	r7, [r0, r7]
 8010b38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010b3c:	462f      	mov	r7, r5
 8010b3e:	42bb      	cmp	r3, r7
 8010b40:	460d      	mov	r5, r1
 8010b42:	d9f4      	bls.n	8010b2e <_printf_i+0x11a>
 8010b44:	2b08      	cmp	r3, #8
 8010b46:	d10b      	bne.n	8010b60 <_printf_i+0x14c>
 8010b48:	6823      	ldr	r3, [r4, #0]
 8010b4a:	07df      	lsls	r7, r3, #31
 8010b4c:	d508      	bpl.n	8010b60 <_printf_i+0x14c>
 8010b4e:	6923      	ldr	r3, [r4, #16]
 8010b50:	6861      	ldr	r1, [r4, #4]
 8010b52:	4299      	cmp	r1, r3
 8010b54:	bfde      	ittt	le
 8010b56:	2330      	movle	r3, #48	; 0x30
 8010b58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010b5c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8010b60:	1b92      	subs	r2, r2, r6
 8010b62:	6122      	str	r2, [r4, #16]
 8010b64:	f8cd a000 	str.w	sl, [sp]
 8010b68:	464b      	mov	r3, r9
 8010b6a:	aa03      	add	r2, sp, #12
 8010b6c:	4621      	mov	r1, r4
 8010b6e:	4640      	mov	r0, r8
 8010b70:	f7ff fee2 	bl	8010938 <_printf_common>
 8010b74:	3001      	adds	r0, #1
 8010b76:	d14c      	bne.n	8010c12 <_printf_i+0x1fe>
 8010b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b7c:	b004      	add	sp, #16
 8010b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b82:	4835      	ldr	r0, [pc, #212]	; (8010c58 <_printf_i+0x244>)
 8010b84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010b88:	6823      	ldr	r3, [r4, #0]
 8010b8a:	680e      	ldr	r6, [r1, #0]
 8010b8c:	061f      	lsls	r7, r3, #24
 8010b8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8010b92:	600e      	str	r6, [r1, #0]
 8010b94:	d514      	bpl.n	8010bc0 <_printf_i+0x1ac>
 8010b96:	07d9      	lsls	r1, r3, #31
 8010b98:	bf44      	itt	mi
 8010b9a:	f043 0320 	orrmi.w	r3, r3, #32
 8010b9e:	6023      	strmi	r3, [r4, #0]
 8010ba0:	b91d      	cbnz	r5, 8010baa <_printf_i+0x196>
 8010ba2:	6823      	ldr	r3, [r4, #0]
 8010ba4:	f023 0320 	bic.w	r3, r3, #32
 8010ba8:	6023      	str	r3, [r4, #0]
 8010baa:	2310      	movs	r3, #16
 8010bac:	e7b0      	b.n	8010b10 <_printf_i+0xfc>
 8010bae:	6823      	ldr	r3, [r4, #0]
 8010bb0:	f043 0320 	orr.w	r3, r3, #32
 8010bb4:	6023      	str	r3, [r4, #0]
 8010bb6:	2378      	movs	r3, #120	; 0x78
 8010bb8:	4828      	ldr	r0, [pc, #160]	; (8010c5c <_printf_i+0x248>)
 8010bba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010bbe:	e7e3      	b.n	8010b88 <_printf_i+0x174>
 8010bc0:	065e      	lsls	r6, r3, #25
 8010bc2:	bf48      	it	mi
 8010bc4:	b2ad      	uxthmi	r5, r5
 8010bc6:	e7e6      	b.n	8010b96 <_printf_i+0x182>
 8010bc8:	4616      	mov	r6, r2
 8010bca:	e7bb      	b.n	8010b44 <_printf_i+0x130>
 8010bcc:	680b      	ldr	r3, [r1, #0]
 8010bce:	6826      	ldr	r6, [r4, #0]
 8010bd0:	6960      	ldr	r0, [r4, #20]
 8010bd2:	1d1d      	adds	r5, r3, #4
 8010bd4:	600d      	str	r5, [r1, #0]
 8010bd6:	0635      	lsls	r5, r6, #24
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	d501      	bpl.n	8010be0 <_printf_i+0x1cc>
 8010bdc:	6018      	str	r0, [r3, #0]
 8010bde:	e002      	b.n	8010be6 <_printf_i+0x1d2>
 8010be0:	0671      	lsls	r1, r6, #25
 8010be2:	d5fb      	bpl.n	8010bdc <_printf_i+0x1c8>
 8010be4:	8018      	strh	r0, [r3, #0]
 8010be6:	2300      	movs	r3, #0
 8010be8:	6123      	str	r3, [r4, #16]
 8010bea:	4616      	mov	r6, r2
 8010bec:	e7ba      	b.n	8010b64 <_printf_i+0x150>
 8010bee:	680b      	ldr	r3, [r1, #0]
 8010bf0:	1d1a      	adds	r2, r3, #4
 8010bf2:	600a      	str	r2, [r1, #0]
 8010bf4:	681e      	ldr	r6, [r3, #0]
 8010bf6:	6862      	ldr	r2, [r4, #4]
 8010bf8:	2100      	movs	r1, #0
 8010bfa:	4630      	mov	r0, r6
 8010bfc:	f7ef fb10 	bl	8000220 <memchr>
 8010c00:	b108      	cbz	r0, 8010c06 <_printf_i+0x1f2>
 8010c02:	1b80      	subs	r0, r0, r6
 8010c04:	6060      	str	r0, [r4, #4]
 8010c06:	6863      	ldr	r3, [r4, #4]
 8010c08:	6123      	str	r3, [r4, #16]
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c10:	e7a8      	b.n	8010b64 <_printf_i+0x150>
 8010c12:	6923      	ldr	r3, [r4, #16]
 8010c14:	4632      	mov	r2, r6
 8010c16:	4649      	mov	r1, r9
 8010c18:	4640      	mov	r0, r8
 8010c1a:	47d0      	blx	sl
 8010c1c:	3001      	adds	r0, #1
 8010c1e:	d0ab      	beq.n	8010b78 <_printf_i+0x164>
 8010c20:	6823      	ldr	r3, [r4, #0]
 8010c22:	079b      	lsls	r3, r3, #30
 8010c24:	d413      	bmi.n	8010c4e <_printf_i+0x23a>
 8010c26:	68e0      	ldr	r0, [r4, #12]
 8010c28:	9b03      	ldr	r3, [sp, #12]
 8010c2a:	4298      	cmp	r0, r3
 8010c2c:	bfb8      	it	lt
 8010c2e:	4618      	movlt	r0, r3
 8010c30:	e7a4      	b.n	8010b7c <_printf_i+0x168>
 8010c32:	2301      	movs	r3, #1
 8010c34:	4632      	mov	r2, r6
 8010c36:	4649      	mov	r1, r9
 8010c38:	4640      	mov	r0, r8
 8010c3a:	47d0      	blx	sl
 8010c3c:	3001      	adds	r0, #1
 8010c3e:	d09b      	beq.n	8010b78 <_printf_i+0x164>
 8010c40:	3501      	adds	r5, #1
 8010c42:	68e3      	ldr	r3, [r4, #12]
 8010c44:	9903      	ldr	r1, [sp, #12]
 8010c46:	1a5b      	subs	r3, r3, r1
 8010c48:	42ab      	cmp	r3, r5
 8010c4a:	dcf2      	bgt.n	8010c32 <_printf_i+0x21e>
 8010c4c:	e7eb      	b.n	8010c26 <_printf_i+0x212>
 8010c4e:	2500      	movs	r5, #0
 8010c50:	f104 0619 	add.w	r6, r4, #25
 8010c54:	e7f5      	b.n	8010c42 <_printf_i+0x22e>
 8010c56:	bf00      	nop
 8010c58:	080156aa 	.word	0x080156aa
 8010c5c:	080156bb 	.word	0x080156bb

08010c60 <iprintf>:
 8010c60:	b40f      	push	{r0, r1, r2, r3}
 8010c62:	4b0a      	ldr	r3, [pc, #40]	; (8010c8c <iprintf+0x2c>)
 8010c64:	b513      	push	{r0, r1, r4, lr}
 8010c66:	681c      	ldr	r4, [r3, #0]
 8010c68:	b124      	cbz	r4, 8010c74 <iprintf+0x14>
 8010c6a:	69a3      	ldr	r3, [r4, #24]
 8010c6c:	b913      	cbnz	r3, 8010c74 <iprintf+0x14>
 8010c6e:	4620      	mov	r0, r4
 8010c70:	f001 f93c 	bl	8011eec <__sinit>
 8010c74:	ab05      	add	r3, sp, #20
 8010c76:	9a04      	ldr	r2, [sp, #16]
 8010c78:	68a1      	ldr	r1, [r4, #8]
 8010c7a:	9301      	str	r3, [sp, #4]
 8010c7c:	4620      	mov	r0, r4
 8010c7e:	f001 ff95 	bl	8012bac <_vfiprintf_r>
 8010c82:	b002      	add	sp, #8
 8010c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c88:	b004      	add	sp, #16
 8010c8a:	4770      	bx	lr
 8010c8c:	2000002c 	.word	0x2000002c

08010c90 <putchar>:
 8010c90:	4b09      	ldr	r3, [pc, #36]	; (8010cb8 <putchar+0x28>)
 8010c92:	b513      	push	{r0, r1, r4, lr}
 8010c94:	681c      	ldr	r4, [r3, #0]
 8010c96:	4601      	mov	r1, r0
 8010c98:	b134      	cbz	r4, 8010ca8 <putchar+0x18>
 8010c9a:	69a3      	ldr	r3, [r4, #24]
 8010c9c:	b923      	cbnz	r3, 8010ca8 <putchar+0x18>
 8010c9e:	9001      	str	r0, [sp, #4]
 8010ca0:	4620      	mov	r0, r4
 8010ca2:	f001 f923 	bl	8011eec <__sinit>
 8010ca6:	9901      	ldr	r1, [sp, #4]
 8010ca8:	68a2      	ldr	r2, [r4, #8]
 8010caa:	4620      	mov	r0, r4
 8010cac:	b002      	add	sp, #8
 8010cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cb2:	f002 b8ab 	b.w	8012e0c <_putc_r>
 8010cb6:	bf00      	nop
 8010cb8:	2000002c 	.word	0x2000002c

08010cbc <_puts_r>:
 8010cbc:	b570      	push	{r4, r5, r6, lr}
 8010cbe:	460e      	mov	r6, r1
 8010cc0:	4605      	mov	r5, r0
 8010cc2:	b118      	cbz	r0, 8010ccc <_puts_r+0x10>
 8010cc4:	6983      	ldr	r3, [r0, #24]
 8010cc6:	b90b      	cbnz	r3, 8010ccc <_puts_r+0x10>
 8010cc8:	f001 f910 	bl	8011eec <__sinit>
 8010ccc:	69ab      	ldr	r3, [r5, #24]
 8010cce:	68ac      	ldr	r4, [r5, #8]
 8010cd0:	b913      	cbnz	r3, 8010cd8 <_puts_r+0x1c>
 8010cd2:	4628      	mov	r0, r5
 8010cd4:	f001 f90a 	bl	8011eec <__sinit>
 8010cd8:	4b2c      	ldr	r3, [pc, #176]	; (8010d8c <_puts_r+0xd0>)
 8010cda:	429c      	cmp	r4, r3
 8010cdc:	d120      	bne.n	8010d20 <_puts_r+0x64>
 8010cde:	686c      	ldr	r4, [r5, #4]
 8010ce0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ce2:	07db      	lsls	r3, r3, #31
 8010ce4:	d405      	bmi.n	8010cf2 <_puts_r+0x36>
 8010ce6:	89a3      	ldrh	r3, [r4, #12]
 8010ce8:	0598      	lsls	r0, r3, #22
 8010cea:	d402      	bmi.n	8010cf2 <_puts_r+0x36>
 8010cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010cee:	f001 f9b2 	bl	8012056 <__retarget_lock_acquire_recursive>
 8010cf2:	89a3      	ldrh	r3, [r4, #12]
 8010cf4:	0719      	lsls	r1, r3, #28
 8010cf6:	d51d      	bpl.n	8010d34 <_puts_r+0x78>
 8010cf8:	6923      	ldr	r3, [r4, #16]
 8010cfa:	b1db      	cbz	r3, 8010d34 <_puts_r+0x78>
 8010cfc:	3e01      	subs	r6, #1
 8010cfe:	68a3      	ldr	r3, [r4, #8]
 8010d00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010d04:	3b01      	subs	r3, #1
 8010d06:	60a3      	str	r3, [r4, #8]
 8010d08:	bb39      	cbnz	r1, 8010d5a <_puts_r+0x9e>
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	da38      	bge.n	8010d80 <_puts_r+0xc4>
 8010d0e:	4622      	mov	r2, r4
 8010d10:	210a      	movs	r1, #10
 8010d12:	4628      	mov	r0, r5
 8010d14:	f000 f878 	bl	8010e08 <__swbuf_r>
 8010d18:	3001      	adds	r0, #1
 8010d1a:	d011      	beq.n	8010d40 <_puts_r+0x84>
 8010d1c:	250a      	movs	r5, #10
 8010d1e:	e011      	b.n	8010d44 <_puts_r+0x88>
 8010d20:	4b1b      	ldr	r3, [pc, #108]	; (8010d90 <_puts_r+0xd4>)
 8010d22:	429c      	cmp	r4, r3
 8010d24:	d101      	bne.n	8010d2a <_puts_r+0x6e>
 8010d26:	68ac      	ldr	r4, [r5, #8]
 8010d28:	e7da      	b.n	8010ce0 <_puts_r+0x24>
 8010d2a:	4b1a      	ldr	r3, [pc, #104]	; (8010d94 <_puts_r+0xd8>)
 8010d2c:	429c      	cmp	r4, r3
 8010d2e:	bf08      	it	eq
 8010d30:	68ec      	ldreq	r4, [r5, #12]
 8010d32:	e7d5      	b.n	8010ce0 <_puts_r+0x24>
 8010d34:	4621      	mov	r1, r4
 8010d36:	4628      	mov	r0, r5
 8010d38:	f000 f8b8 	bl	8010eac <__swsetup_r>
 8010d3c:	2800      	cmp	r0, #0
 8010d3e:	d0dd      	beq.n	8010cfc <_puts_r+0x40>
 8010d40:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010d44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d46:	07da      	lsls	r2, r3, #31
 8010d48:	d405      	bmi.n	8010d56 <_puts_r+0x9a>
 8010d4a:	89a3      	ldrh	r3, [r4, #12]
 8010d4c:	059b      	lsls	r3, r3, #22
 8010d4e:	d402      	bmi.n	8010d56 <_puts_r+0x9a>
 8010d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d52:	f001 f981 	bl	8012058 <__retarget_lock_release_recursive>
 8010d56:	4628      	mov	r0, r5
 8010d58:	bd70      	pop	{r4, r5, r6, pc}
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	da04      	bge.n	8010d68 <_puts_r+0xac>
 8010d5e:	69a2      	ldr	r2, [r4, #24]
 8010d60:	429a      	cmp	r2, r3
 8010d62:	dc06      	bgt.n	8010d72 <_puts_r+0xb6>
 8010d64:	290a      	cmp	r1, #10
 8010d66:	d004      	beq.n	8010d72 <_puts_r+0xb6>
 8010d68:	6823      	ldr	r3, [r4, #0]
 8010d6a:	1c5a      	adds	r2, r3, #1
 8010d6c:	6022      	str	r2, [r4, #0]
 8010d6e:	7019      	strb	r1, [r3, #0]
 8010d70:	e7c5      	b.n	8010cfe <_puts_r+0x42>
 8010d72:	4622      	mov	r2, r4
 8010d74:	4628      	mov	r0, r5
 8010d76:	f000 f847 	bl	8010e08 <__swbuf_r>
 8010d7a:	3001      	adds	r0, #1
 8010d7c:	d1bf      	bne.n	8010cfe <_puts_r+0x42>
 8010d7e:	e7df      	b.n	8010d40 <_puts_r+0x84>
 8010d80:	6823      	ldr	r3, [r4, #0]
 8010d82:	250a      	movs	r5, #10
 8010d84:	1c5a      	adds	r2, r3, #1
 8010d86:	6022      	str	r2, [r4, #0]
 8010d88:	701d      	strb	r5, [r3, #0]
 8010d8a:	e7db      	b.n	8010d44 <_puts_r+0x88>
 8010d8c:	080157bc 	.word	0x080157bc
 8010d90:	080157dc 	.word	0x080157dc
 8010d94:	0801579c 	.word	0x0801579c

08010d98 <puts>:
 8010d98:	4b02      	ldr	r3, [pc, #8]	; (8010da4 <puts+0xc>)
 8010d9a:	4601      	mov	r1, r0
 8010d9c:	6818      	ldr	r0, [r3, #0]
 8010d9e:	f7ff bf8d 	b.w	8010cbc <_puts_r>
 8010da2:	bf00      	nop
 8010da4:	2000002c 	.word	0x2000002c

08010da8 <_sbrk_r>:
 8010da8:	b538      	push	{r3, r4, r5, lr}
 8010daa:	4d06      	ldr	r5, [pc, #24]	; (8010dc4 <_sbrk_r+0x1c>)
 8010dac:	2300      	movs	r3, #0
 8010dae:	4604      	mov	r4, r0
 8010db0:	4608      	mov	r0, r1
 8010db2:	602b      	str	r3, [r5, #0]
 8010db4:	f7f2 feee 	bl	8003b94 <_sbrk>
 8010db8:	1c43      	adds	r3, r0, #1
 8010dba:	d102      	bne.n	8010dc2 <_sbrk_r+0x1a>
 8010dbc:	682b      	ldr	r3, [r5, #0]
 8010dbe:	b103      	cbz	r3, 8010dc2 <_sbrk_r+0x1a>
 8010dc0:	6023      	str	r3, [r4, #0]
 8010dc2:	bd38      	pop	{r3, r4, r5, pc}
 8010dc4:	20040f54 	.word	0x20040f54

08010dc8 <siprintf>:
 8010dc8:	b40e      	push	{r1, r2, r3}
 8010dca:	b500      	push	{lr}
 8010dcc:	b09c      	sub	sp, #112	; 0x70
 8010dce:	ab1d      	add	r3, sp, #116	; 0x74
 8010dd0:	9002      	str	r0, [sp, #8]
 8010dd2:	9006      	str	r0, [sp, #24]
 8010dd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010dd8:	4809      	ldr	r0, [pc, #36]	; (8010e00 <siprintf+0x38>)
 8010dda:	9107      	str	r1, [sp, #28]
 8010ddc:	9104      	str	r1, [sp, #16]
 8010dde:	4909      	ldr	r1, [pc, #36]	; (8010e04 <siprintf+0x3c>)
 8010de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010de4:	9105      	str	r1, [sp, #20]
 8010de6:	6800      	ldr	r0, [r0, #0]
 8010de8:	9301      	str	r3, [sp, #4]
 8010dea:	a902      	add	r1, sp, #8
 8010dec:	f001 fdb4 	bl	8012958 <_svfiprintf_r>
 8010df0:	9b02      	ldr	r3, [sp, #8]
 8010df2:	2200      	movs	r2, #0
 8010df4:	701a      	strb	r2, [r3, #0]
 8010df6:	b01c      	add	sp, #112	; 0x70
 8010df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010dfc:	b003      	add	sp, #12
 8010dfe:	4770      	bx	lr
 8010e00:	2000002c 	.word	0x2000002c
 8010e04:	ffff0208 	.word	0xffff0208

08010e08 <__swbuf_r>:
 8010e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e0a:	460e      	mov	r6, r1
 8010e0c:	4614      	mov	r4, r2
 8010e0e:	4605      	mov	r5, r0
 8010e10:	b118      	cbz	r0, 8010e1a <__swbuf_r+0x12>
 8010e12:	6983      	ldr	r3, [r0, #24]
 8010e14:	b90b      	cbnz	r3, 8010e1a <__swbuf_r+0x12>
 8010e16:	f001 f869 	bl	8011eec <__sinit>
 8010e1a:	4b21      	ldr	r3, [pc, #132]	; (8010ea0 <__swbuf_r+0x98>)
 8010e1c:	429c      	cmp	r4, r3
 8010e1e:	d12b      	bne.n	8010e78 <__swbuf_r+0x70>
 8010e20:	686c      	ldr	r4, [r5, #4]
 8010e22:	69a3      	ldr	r3, [r4, #24]
 8010e24:	60a3      	str	r3, [r4, #8]
 8010e26:	89a3      	ldrh	r3, [r4, #12]
 8010e28:	071a      	lsls	r2, r3, #28
 8010e2a:	d52f      	bpl.n	8010e8c <__swbuf_r+0x84>
 8010e2c:	6923      	ldr	r3, [r4, #16]
 8010e2e:	b36b      	cbz	r3, 8010e8c <__swbuf_r+0x84>
 8010e30:	6923      	ldr	r3, [r4, #16]
 8010e32:	6820      	ldr	r0, [r4, #0]
 8010e34:	1ac0      	subs	r0, r0, r3
 8010e36:	6963      	ldr	r3, [r4, #20]
 8010e38:	b2f6      	uxtb	r6, r6
 8010e3a:	4283      	cmp	r3, r0
 8010e3c:	4637      	mov	r7, r6
 8010e3e:	dc04      	bgt.n	8010e4a <__swbuf_r+0x42>
 8010e40:	4621      	mov	r1, r4
 8010e42:	4628      	mov	r0, r5
 8010e44:	f000 ffbe 	bl	8011dc4 <_fflush_r>
 8010e48:	bb30      	cbnz	r0, 8010e98 <__swbuf_r+0x90>
 8010e4a:	68a3      	ldr	r3, [r4, #8]
 8010e4c:	3b01      	subs	r3, #1
 8010e4e:	60a3      	str	r3, [r4, #8]
 8010e50:	6823      	ldr	r3, [r4, #0]
 8010e52:	1c5a      	adds	r2, r3, #1
 8010e54:	6022      	str	r2, [r4, #0]
 8010e56:	701e      	strb	r6, [r3, #0]
 8010e58:	6963      	ldr	r3, [r4, #20]
 8010e5a:	3001      	adds	r0, #1
 8010e5c:	4283      	cmp	r3, r0
 8010e5e:	d004      	beq.n	8010e6a <__swbuf_r+0x62>
 8010e60:	89a3      	ldrh	r3, [r4, #12]
 8010e62:	07db      	lsls	r3, r3, #31
 8010e64:	d506      	bpl.n	8010e74 <__swbuf_r+0x6c>
 8010e66:	2e0a      	cmp	r6, #10
 8010e68:	d104      	bne.n	8010e74 <__swbuf_r+0x6c>
 8010e6a:	4621      	mov	r1, r4
 8010e6c:	4628      	mov	r0, r5
 8010e6e:	f000 ffa9 	bl	8011dc4 <_fflush_r>
 8010e72:	b988      	cbnz	r0, 8010e98 <__swbuf_r+0x90>
 8010e74:	4638      	mov	r0, r7
 8010e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e78:	4b0a      	ldr	r3, [pc, #40]	; (8010ea4 <__swbuf_r+0x9c>)
 8010e7a:	429c      	cmp	r4, r3
 8010e7c:	d101      	bne.n	8010e82 <__swbuf_r+0x7a>
 8010e7e:	68ac      	ldr	r4, [r5, #8]
 8010e80:	e7cf      	b.n	8010e22 <__swbuf_r+0x1a>
 8010e82:	4b09      	ldr	r3, [pc, #36]	; (8010ea8 <__swbuf_r+0xa0>)
 8010e84:	429c      	cmp	r4, r3
 8010e86:	bf08      	it	eq
 8010e88:	68ec      	ldreq	r4, [r5, #12]
 8010e8a:	e7ca      	b.n	8010e22 <__swbuf_r+0x1a>
 8010e8c:	4621      	mov	r1, r4
 8010e8e:	4628      	mov	r0, r5
 8010e90:	f000 f80c 	bl	8010eac <__swsetup_r>
 8010e94:	2800      	cmp	r0, #0
 8010e96:	d0cb      	beq.n	8010e30 <__swbuf_r+0x28>
 8010e98:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010e9c:	e7ea      	b.n	8010e74 <__swbuf_r+0x6c>
 8010e9e:	bf00      	nop
 8010ea0:	080157bc 	.word	0x080157bc
 8010ea4:	080157dc 	.word	0x080157dc
 8010ea8:	0801579c 	.word	0x0801579c

08010eac <__swsetup_r>:
 8010eac:	4b32      	ldr	r3, [pc, #200]	; (8010f78 <__swsetup_r+0xcc>)
 8010eae:	b570      	push	{r4, r5, r6, lr}
 8010eb0:	681d      	ldr	r5, [r3, #0]
 8010eb2:	4606      	mov	r6, r0
 8010eb4:	460c      	mov	r4, r1
 8010eb6:	b125      	cbz	r5, 8010ec2 <__swsetup_r+0x16>
 8010eb8:	69ab      	ldr	r3, [r5, #24]
 8010eba:	b913      	cbnz	r3, 8010ec2 <__swsetup_r+0x16>
 8010ebc:	4628      	mov	r0, r5
 8010ebe:	f001 f815 	bl	8011eec <__sinit>
 8010ec2:	4b2e      	ldr	r3, [pc, #184]	; (8010f7c <__swsetup_r+0xd0>)
 8010ec4:	429c      	cmp	r4, r3
 8010ec6:	d10f      	bne.n	8010ee8 <__swsetup_r+0x3c>
 8010ec8:	686c      	ldr	r4, [r5, #4]
 8010eca:	89a3      	ldrh	r3, [r4, #12]
 8010ecc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010ed0:	0719      	lsls	r1, r3, #28
 8010ed2:	d42c      	bmi.n	8010f2e <__swsetup_r+0x82>
 8010ed4:	06dd      	lsls	r5, r3, #27
 8010ed6:	d411      	bmi.n	8010efc <__swsetup_r+0x50>
 8010ed8:	2309      	movs	r3, #9
 8010eda:	6033      	str	r3, [r6, #0]
 8010edc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010ee0:	81a3      	strh	r3, [r4, #12]
 8010ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ee6:	e03e      	b.n	8010f66 <__swsetup_r+0xba>
 8010ee8:	4b25      	ldr	r3, [pc, #148]	; (8010f80 <__swsetup_r+0xd4>)
 8010eea:	429c      	cmp	r4, r3
 8010eec:	d101      	bne.n	8010ef2 <__swsetup_r+0x46>
 8010eee:	68ac      	ldr	r4, [r5, #8]
 8010ef0:	e7eb      	b.n	8010eca <__swsetup_r+0x1e>
 8010ef2:	4b24      	ldr	r3, [pc, #144]	; (8010f84 <__swsetup_r+0xd8>)
 8010ef4:	429c      	cmp	r4, r3
 8010ef6:	bf08      	it	eq
 8010ef8:	68ec      	ldreq	r4, [r5, #12]
 8010efa:	e7e6      	b.n	8010eca <__swsetup_r+0x1e>
 8010efc:	0758      	lsls	r0, r3, #29
 8010efe:	d512      	bpl.n	8010f26 <__swsetup_r+0x7a>
 8010f00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f02:	b141      	cbz	r1, 8010f16 <__swsetup_r+0x6a>
 8010f04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f08:	4299      	cmp	r1, r3
 8010f0a:	d002      	beq.n	8010f12 <__swsetup_r+0x66>
 8010f0c:	4630      	mov	r0, r6
 8010f0e:	f7ff f993 	bl	8010238 <_free_r>
 8010f12:	2300      	movs	r3, #0
 8010f14:	6363      	str	r3, [r4, #52]	; 0x34
 8010f16:	89a3      	ldrh	r3, [r4, #12]
 8010f18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010f1c:	81a3      	strh	r3, [r4, #12]
 8010f1e:	2300      	movs	r3, #0
 8010f20:	6063      	str	r3, [r4, #4]
 8010f22:	6923      	ldr	r3, [r4, #16]
 8010f24:	6023      	str	r3, [r4, #0]
 8010f26:	89a3      	ldrh	r3, [r4, #12]
 8010f28:	f043 0308 	orr.w	r3, r3, #8
 8010f2c:	81a3      	strh	r3, [r4, #12]
 8010f2e:	6923      	ldr	r3, [r4, #16]
 8010f30:	b94b      	cbnz	r3, 8010f46 <__swsetup_r+0x9a>
 8010f32:	89a3      	ldrh	r3, [r4, #12]
 8010f34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f3c:	d003      	beq.n	8010f46 <__swsetup_r+0x9a>
 8010f3e:	4621      	mov	r1, r4
 8010f40:	4630      	mov	r0, r6
 8010f42:	f001 f8af 	bl	80120a4 <__smakebuf_r>
 8010f46:	89a0      	ldrh	r0, [r4, #12]
 8010f48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f4c:	f010 0301 	ands.w	r3, r0, #1
 8010f50:	d00a      	beq.n	8010f68 <__swsetup_r+0xbc>
 8010f52:	2300      	movs	r3, #0
 8010f54:	60a3      	str	r3, [r4, #8]
 8010f56:	6963      	ldr	r3, [r4, #20]
 8010f58:	425b      	negs	r3, r3
 8010f5a:	61a3      	str	r3, [r4, #24]
 8010f5c:	6923      	ldr	r3, [r4, #16]
 8010f5e:	b943      	cbnz	r3, 8010f72 <__swsetup_r+0xc6>
 8010f60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010f64:	d1ba      	bne.n	8010edc <__swsetup_r+0x30>
 8010f66:	bd70      	pop	{r4, r5, r6, pc}
 8010f68:	0781      	lsls	r1, r0, #30
 8010f6a:	bf58      	it	pl
 8010f6c:	6963      	ldrpl	r3, [r4, #20]
 8010f6e:	60a3      	str	r3, [r4, #8]
 8010f70:	e7f4      	b.n	8010f5c <__swsetup_r+0xb0>
 8010f72:	2000      	movs	r0, #0
 8010f74:	e7f7      	b.n	8010f66 <__swsetup_r+0xba>
 8010f76:	bf00      	nop
 8010f78:	2000002c 	.word	0x2000002c
 8010f7c:	080157bc 	.word	0x080157bc
 8010f80:	080157dc 	.word	0x080157dc
 8010f84:	0801579c 	.word	0x0801579c

08010f88 <__assert_func>:
 8010f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f8a:	4614      	mov	r4, r2
 8010f8c:	461a      	mov	r2, r3
 8010f8e:	4b09      	ldr	r3, [pc, #36]	; (8010fb4 <__assert_func+0x2c>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	4605      	mov	r5, r0
 8010f94:	68d8      	ldr	r0, [r3, #12]
 8010f96:	b14c      	cbz	r4, 8010fac <__assert_func+0x24>
 8010f98:	4b07      	ldr	r3, [pc, #28]	; (8010fb8 <__assert_func+0x30>)
 8010f9a:	9100      	str	r1, [sp, #0]
 8010f9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010fa0:	4906      	ldr	r1, [pc, #24]	; (8010fbc <__assert_func+0x34>)
 8010fa2:	462b      	mov	r3, r5
 8010fa4:	f001 f820 	bl	8011fe8 <fiprintf>
 8010fa8:	f001 ffce 	bl	8012f48 <abort>
 8010fac:	4b04      	ldr	r3, [pc, #16]	; (8010fc0 <__assert_func+0x38>)
 8010fae:	461c      	mov	r4, r3
 8010fb0:	e7f3      	b.n	8010f9a <__assert_func+0x12>
 8010fb2:	bf00      	nop
 8010fb4:	2000002c 	.word	0x2000002c
 8010fb8:	080156cc 	.word	0x080156cc
 8010fbc:	080156d9 	.word	0x080156d9
 8010fc0:	08015707 	.word	0x08015707

08010fc4 <quorem>:
 8010fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc8:	6903      	ldr	r3, [r0, #16]
 8010fca:	690c      	ldr	r4, [r1, #16]
 8010fcc:	42a3      	cmp	r3, r4
 8010fce:	4607      	mov	r7, r0
 8010fd0:	f2c0 8081 	blt.w	80110d6 <quorem+0x112>
 8010fd4:	3c01      	subs	r4, #1
 8010fd6:	f101 0814 	add.w	r8, r1, #20
 8010fda:	f100 0514 	add.w	r5, r0, #20
 8010fde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010fe2:	9301      	str	r3, [sp, #4]
 8010fe4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010fe8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010fec:	3301      	adds	r3, #1
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010ff4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010ff8:	fbb2 f6f3 	udiv	r6, r2, r3
 8010ffc:	d331      	bcc.n	8011062 <quorem+0x9e>
 8010ffe:	f04f 0e00 	mov.w	lr, #0
 8011002:	4640      	mov	r0, r8
 8011004:	46ac      	mov	ip, r5
 8011006:	46f2      	mov	sl, lr
 8011008:	f850 2b04 	ldr.w	r2, [r0], #4
 801100c:	b293      	uxth	r3, r2
 801100e:	fb06 e303 	mla	r3, r6, r3, lr
 8011012:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011016:	b29b      	uxth	r3, r3
 8011018:	ebaa 0303 	sub.w	r3, sl, r3
 801101c:	0c12      	lsrs	r2, r2, #16
 801101e:	f8dc a000 	ldr.w	sl, [ip]
 8011022:	fb06 e202 	mla	r2, r6, r2, lr
 8011026:	fa13 f38a 	uxtah	r3, r3, sl
 801102a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801102e:	fa1f fa82 	uxth.w	sl, r2
 8011032:	f8dc 2000 	ldr.w	r2, [ip]
 8011036:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801103a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801103e:	b29b      	uxth	r3, r3
 8011040:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011044:	4581      	cmp	r9, r0
 8011046:	f84c 3b04 	str.w	r3, [ip], #4
 801104a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801104e:	d2db      	bcs.n	8011008 <quorem+0x44>
 8011050:	f855 300b 	ldr.w	r3, [r5, fp]
 8011054:	b92b      	cbnz	r3, 8011062 <quorem+0x9e>
 8011056:	9b01      	ldr	r3, [sp, #4]
 8011058:	3b04      	subs	r3, #4
 801105a:	429d      	cmp	r5, r3
 801105c:	461a      	mov	r2, r3
 801105e:	d32e      	bcc.n	80110be <quorem+0xfa>
 8011060:	613c      	str	r4, [r7, #16]
 8011062:	4638      	mov	r0, r7
 8011064:	f001 fae8 	bl	8012638 <__mcmp>
 8011068:	2800      	cmp	r0, #0
 801106a:	db24      	blt.n	80110b6 <quorem+0xf2>
 801106c:	3601      	adds	r6, #1
 801106e:	4628      	mov	r0, r5
 8011070:	f04f 0c00 	mov.w	ip, #0
 8011074:	f858 2b04 	ldr.w	r2, [r8], #4
 8011078:	f8d0 e000 	ldr.w	lr, [r0]
 801107c:	b293      	uxth	r3, r2
 801107e:	ebac 0303 	sub.w	r3, ip, r3
 8011082:	0c12      	lsrs	r2, r2, #16
 8011084:	fa13 f38e 	uxtah	r3, r3, lr
 8011088:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801108c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011090:	b29b      	uxth	r3, r3
 8011092:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011096:	45c1      	cmp	r9, r8
 8011098:	f840 3b04 	str.w	r3, [r0], #4
 801109c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80110a0:	d2e8      	bcs.n	8011074 <quorem+0xb0>
 80110a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80110a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80110aa:	b922      	cbnz	r2, 80110b6 <quorem+0xf2>
 80110ac:	3b04      	subs	r3, #4
 80110ae:	429d      	cmp	r5, r3
 80110b0:	461a      	mov	r2, r3
 80110b2:	d30a      	bcc.n	80110ca <quorem+0x106>
 80110b4:	613c      	str	r4, [r7, #16]
 80110b6:	4630      	mov	r0, r6
 80110b8:	b003      	add	sp, #12
 80110ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110be:	6812      	ldr	r2, [r2, #0]
 80110c0:	3b04      	subs	r3, #4
 80110c2:	2a00      	cmp	r2, #0
 80110c4:	d1cc      	bne.n	8011060 <quorem+0x9c>
 80110c6:	3c01      	subs	r4, #1
 80110c8:	e7c7      	b.n	801105a <quorem+0x96>
 80110ca:	6812      	ldr	r2, [r2, #0]
 80110cc:	3b04      	subs	r3, #4
 80110ce:	2a00      	cmp	r2, #0
 80110d0:	d1f0      	bne.n	80110b4 <quorem+0xf0>
 80110d2:	3c01      	subs	r4, #1
 80110d4:	e7eb      	b.n	80110ae <quorem+0xea>
 80110d6:	2000      	movs	r0, #0
 80110d8:	e7ee      	b.n	80110b8 <quorem+0xf4>
 80110da:	0000      	movs	r0, r0
 80110dc:	0000      	movs	r0, r0
	...

080110e0 <_dtoa_r>:
 80110e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110e4:	ed2d 8b02 	vpush	{d8}
 80110e8:	ec57 6b10 	vmov	r6, r7, d0
 80110ec:	b095      	sub	sp, #84	; 0x54
 80110ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80110f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80110f4:	9105      	str	r1, [sp, #20]
 80110f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80110fa:	4604      	mov	r4, r0
 80110fc:	9209      	str	r2, [sp, #36]	; 0x24
 80110fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8011100:	b975      	cbnz	r5, 8011120 <_dtoa_r+0x40>
 8011102:	2010      	movs	r0, #16
 8011104:	f7ff f87a 	bl	80101fc <malloc>
 8011108:	4602      	mov	r2, r0
 801110a:	6260      	str	r0, [r4, #36]	; 0x24
 801110c:	b920      	cbnz	r0, 8011118 <_dtoa_r+0x38>
 801110e:	4bb2      	ldr	r3, [pc, #712]	; (80113d8 <_dtoa_r+0x2f8>)
 8011110:	21ea      	movs	r1, #234	; 0xea
 8011112:	48b2      	ldr	r0, [pc, #712]	; (80113dc <_dtoa_r+0x2fc>)
 8011114:	f7ff ff38 	bl	8010f88 <__assert_func>
 8011118:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801111c:	6005      	str	r5, [r0, #0]
 801111e:	60c5      	str	r5, [r0, #12]
 8011120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011122:	6819      	ldr	r1, [r3, #0]
 8011124:	b151      	cbz	r1, 801113c <_dtoa_r+0x5c>
 8011126:	685a      	ldr	r2, [r3, #4]
 8011128:	604a      	str	r2, [r1, #4]
 801112a:	2301      	movs	r3, #1
 801112c:	4093      	lsls	r3, r2
 801112e:	608b      	str	r3, [r1, #8]
 8011130:	4620      	mov	r0, r4
 8011132:	f001 f843 	bl	80121bc <_Bfree>
 8011136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011138:	2200      	movs	r2, #0
 801113a:	601a      	str	r2, [r3, #0]
 801113c:	1e3b      	subs	r3, r7, #0
 801113e:	bfb9      	ittee	lt
 8011140:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011144:	9303      	strlt	r3, [sp, #12]
 8011146:	2300      	movge	r3, #0
 8011148:	f8c8 3000 	strge.w	r3, [r8]
 801114c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011150:	4ba3      	ldr	r3, [pc, #652]	; (80113e0 <_dtoa_r+0x300>)
 8011152:	bfbc      	itt	lt
 8011154:	2201      	movlt	r2, #1
 8011156:	f8c8 2000 	strlt.w	r2, [r8]
 801115a:	ea33 0309 	bics.w	r3, r3, r9
 801115e:	d11b      	bne.n	8011198 <_dtoa_r+0xb8>
 8011160:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011162:	f242 730f 	movw	r3, #9999	; 0x270f
 8011166:	6013      	str	r3, [r2, #0]
 8011168:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801116c:	4333      	orrs	r3, r6
 801116e:	f000 857a 	beq.w	8011c66 <_dtoa_r+0xb86>
 8011172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011174:	b963      	cbnz	r3, 8011190 <_dtoa_r+0xb0>
 8011176:	4b9b      	ldr	r3, [pc, #620]	; (80113e4 <_dtoa_r+0x304>)
 8011178:	e024      	b.n	80111c4 <_dtoa_r+0xe4>
 801117a:	4b9b      	ldr	r3, [pc, #620]	; (80113e8 <_dtoa_r+0x308>)
 801117c:	9300      	str	r3, [sp, #0]
 801117e:	3308      	adds	r3, #8
 8011180:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011182:	6013      	str	r3, [r2, #0]
 8011184:	9800      	ldr	r0, [sp, #0]
 8011186:	b015      	add	sp, #84	; 0x54
 8011188:	ecbd 8b02 	vpop	{d8}
 801118c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011190:	4b94      	ldr	r3, [pc, #592]	; (80113e4 <_dtoa_r+0x304>)
 8011192:	9300      	str	r3, [sp, #0]
 8011194:	3303      	adds	r3, #3
 8011196:	e7f3      	b.n	8011180 <_dtoa_r+0xa0>
 8011198:	ed9d 7b02 	vldr	d7, [sp, #8]
 801119c:	2200      	movs	r2, #0
 801119e:	ec51 0b17 	vmov	r0, r1, d7
 80111a2:	2300      	movs	r3, #0
 80111a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80111a8:	f7ef fcae 	bl	8000b08 <__aeabi_dcmpeq>
 80111ac:	4680      	mov	r8, r0
 80111ae:	b158      	cbz	r0, 80111c8 <_dtoa_r+0xe8>
 80111b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80111b2:	2301      	movs	r3, #1
 80111b4:	6013      	str	r3, [r2, #0]
 80111b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	f000 8551 	beq.w	8011c60 <_dtoa_r+0xb80>
 80111be:	488b      	ldr	r0, [pc, #556]	; (80113ec <_dtoa_r+0x30c>)
 80111c0:	6018      	str	r0, [r3, #0]
 80111c2:	1e43      	subs	r3, r0, #1
 80111c4:	9300      	str	r3, [sp, #0]
 80111c6:	e7dd      	b.n	8011184 <_dtoa_r+0xa4>
 80111c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80111cc:	aa12      	add	r2, sp, #72	; 0x48
 80111ce:	a913      	add	r1, sp, #76	; 0x4c
 80111d0:	4620      	mov	r0, r4
 80111d2:	f001 fad5 	bl	8012780 <__d2b>
 80111d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80111da:	4683      	mov	fp, r0
 80111dc:	2d00      	cmp	r5, #0
 80111de:	d07c      	beq.n	80112da <_dtoa_r+0x1fa>
 80111e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80111e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80111ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80111ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80111f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80111f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80111fa:	4b7d      	ldr	r3, [pc, #500]	; (80113f0 <_dtoa_r+0x310>)
 80111fc:	2200      	movs	r2, #0
 80111fe:	4630      	mov	r0, r6
 8011200:	4639      	mov	r1, r7
 8011202:	f7ef f861 	bl	80002c8 <__aeabi_dsub>
 8011206:	a36e      	add	r3, pc, #440	; (adr r3, 80113c0 <_dtoa_r+0x2e0>)
 8011208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801120c:	f7ef fa14 	bl	8000638 <__aeabi_dmul>
 8011210:	a36d      	add	r3, pc, #436	; (adr r3, 80113c8 <_dtoa_r+0x2e8>)
 8011212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011216:	f7ef f859 	bl	80002cc <__adddf3>
 801121a:	4606      	mov	r6, r0
 801121c:	4628      	mov	r0, r5
 801121e:	460f      	mov	r7, r1
 8011220:	f7ef f9a0 	bl	8000564 <__aeabi_i2d>
 8011224:	a36a      	add	r3, pc, #424	; (adr r3, 80113d0 <_dtoa_r+0x2f0>)
 8011226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122a:	f7ef fa05 	bl	8000638 <__aeabi_dmul>
 801122e:	4602      	mov	r2, r0
 8011230:	460b      	mov	r3, r1
 8011232:	4630      	mov	r0, r6
 8011234:	4639      	mov	r1, r7
 8011236:	f7ef f849 	bl	80002cc <__adddf3>
 801123a:	4606      	mov	r6, r0
 801123c:	460f      	mov	r7, r1
 801123e:	f7ef fcab 	bl	8000b98 <__aeabi_d2iz>
 8011242:	2200      	movs	r2, #0
 8011244:	4682      	mov	sl, r0
 8011246:	2300      	movs	r3, #0
 8011248:	4630      	mov	r0, r6
 801124a:	4639      	mov	r1, r7
 801124c:	f7ef fc66 	bl	8000b1c <__aeabi_dcmplt>
 8011250:	b148      	cbz	r0, 8011266 <_dtoa_r+0x186>
 8011252:	4650      	mov	r0, sl
 8011254:	f7ef f986 	bl	8000564 <__aeabi_i2d>
 8011258:	4632      	mov	r2, r6
 801125a:	463b      	mov	r3, r7
 801125c:	f7ef fc54 	bl	8000b08 <__aeabi_dcmpeq>
 8011260:	b908      	cbnz	r0, 8011266 <_dtoa_r+0x186>
 8011262:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011266:	f1ba 0f16 	cmp.w	sl, #22
 801126a:	d854      	bhi.n	8011316 <_dtoa_r+0x236>
 801126c:	4b61      	ldr	r3, [pc, #388]	; (80113f4 <_dtoa_r+0x314>)
 801126e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011276:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801127a:	f7ef fc4f 	bl	8000b1c <__aeabi_dcmplt>
 801127e:	2800      	cmp	r0, #0
 8011280:	d04b      	beq.n	801131a <_dtoa_r+0x23a>
 8011282:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011286:	2300      	movs	r3, #0
 8011288:	930e      	str	r3, [sp, #56]	; 0x38
 801128a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801128c:	1b5d      	subs	r5, r3, r5
 801128e:	1e6b      	subs	r3, r5, #1
 8011290:	9304      	str	r3, [sp, #16]
 8011292:	bf43      	ittte	mi
 8011294:	2300      	movmi	r3, #0
 8011296:	f1c5 0801 	rsbmi	r8, r5, #1
 801129a:	9304      	strmi	r3, [sp, #16]
 801129c:	f04f 0800 	movpl.w	r8, #0
 80112a0:	f1ba 0f00 	cmp.w	sl, #0
 80112a4:	db3b      	blt.n	801131e <_dtoa_r+0x23e>
 80112a6:	9b04      	ldr	r3, [sp, #16]
 80112a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80112ac:	4453      	add	r3, sl
 80112ae:	9304      	str	r3, [sp, #16]
 80112b0:	2300      	movs	r3, #0
 80112b2:	9306      	str	r3, [sp, #24]
 80112b4:	9b05      	ldr	r3, [sp, #20]
 80112b6:	2b09      	cmp	r3, #9
 80112b8:	d869      	bhi.n	801138e <_dtoa_r+0x2ae>
 80112ba:	2b05      	cmp	r3, #5
 80112bc:	bfc4      	itt	gt
 80112be:	3b04      	subgt	r3, #4
 80112c0:	9305      	strgt	r3, [sp, #20]
 80112c2:	9b05      	ldr	r3, [sp, #20]
 80112c4:	f1a3 0302 	sub.w	r3, r3, #2
 80112c8:	bfcc      	ite	gt
 80112ca:	2500      	movgt	r5, #0
 80112cc:	2501      	movle	r5, #1
 80112ce:	2b03      	cmp	r3, #3
 80112d0:	d869      	bhi.n	80113a6 <_dtoa_r+0x2c6>
 80112d2:	e8df f003 	tbb	[pc, r3]
 80112d6:	4e2c      	.short	0x4e2c
 80112d8:	5a4c      	.short	0x5a4c
 80112da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80112de:	441d      	add	r5, r3
 80112e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80112e4:	2b20      	cmp	r3, #32
 80112e6:	bfc1      	itttt	gt
 80112e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80112ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80112f0:	fa09 f303 	lslgt.w	r3, r9, r3
 80112f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80112f8:	bfda      	itte	le
 80112fa:	f1c3 0320 	rsble	r3, r3, #32
 80112fe:	fa06 f003 	lslle.w	r0, r6, r3
 8011302:	4318      	orrgt	r0, r3
 8011304:	f7ef f91e 	bl	8000544 <__aeabi_ui2d>
 8011308:	2301      	movs	r3, #1
 801130a:	4606      	mov	r6, r0
 801130c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011310:	3d01      	subs	r5, #1
 8011312:	9310      	str	r3, [sp, #64]	; 0x40
 8011314:	e771      	b.n	80111fa <_dtoa_r+0x11a>
 8011316:	2301      	movs	r3, #1
 8011318:	e7b6      	b.n	8011288 <_dtoa_r+0x1a8>
 801131a:	900e      	str	r0, [sp, #56]	; 0x38
 801131c:	e7b5      	b.n	801128a <_dtoa_r+0x1aa>
 801131e:	f1ca 0300 	rsb	r3, sl, #0
 8011322:	9306      	str	r3, [sp, #24]
 8011324:	2300      	movs	r3, #0
 8011326:	eba8 080a 	sub.w	r8, r8, sl
 801132a:	930d      	str	r3, [sp, #52]	; 0x34
 801132c:	e7c2      	b.n	80112b4 <_dtoa_r+0x1d4>
 801132e:	2300      	movs	r3, #0
 8011330:	9308      	str	r3, [sp, #32]
 8011332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011334:	2b00      	cmp	r3, #0
 8011336:	dc39      	bgt.n	80113ac <_dtoa_r+0x2cc>
 8011338:	f04f 0901 	mov.w	r9, #1
 801133c:	f8cd 9004 	str.w	r9, [sp, #4]
 8011340:	464b      	mov	r3, r9
 8011342:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011346:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011348:	2200      	movs	r2, #0
 801134a:	6042      	str	r2, [r0, #4]
 801134c:	2204      	movs	r2, #4
 801134e:	f102 0614 	add.w	r6, r2, #20
 8011352:	429e      	cmp	r6, r3
 8011354:	6841      	ldr	r1, [r0, #4]
 8011356:	d92f      	bls.n	80113b8 <_dtoa_r+0x2d8>
 8011358:	4620      	mov	r0, r4
 801135a:	f000 feef 	bl	801213c <_Balloc>
 801135e:	9000      	str	r0, [sp, #0]
 8011360:	2800      	cmp	r0, #0
 8011362:	d14b      	bne.n	80113fc <_dtoa_r+0x31c>
 8011364:	4b24      	ldr	r3, [pc, #144]	; (80113f8 <_dtoa_r+0x318>)
 8011366:	4602      	mov	r2, r0
 8011368:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801136c:	e6d1      	b.n	8011112 <_dtoa_r+0x32>
 801136e:	2301      	movs	r3, #1
 8011370:	e7de      	b.n	8011330 <_dtoa_r+0x250>
 8011372:	2300      	movs	r3, #0
 8011374:	9308      	str	r3, [sp, #32]
 8011376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011378:	eb0a 0903 	add.w	r9, sl, r3
 801137c:	f109 0301 	add.w	r3, r9, #1
 8011380:	2b01      	cmp	r3, #1
 8011382:	9301      	str	r3, [sp, #4]
 8011384:	bfb8      	it	lt
 8011386:	2301      	movlt	r3, #1
 8011388:	e7dd      	b.n	8011346 <_dtoa_r+0x266>
 801138a:	2301      	movs	r3, #1
 801138c:	e7f2      	b.n	8011374 <_dtoa_r+0x294>
 801138e:	2501      	movs	r5, #1
 8011390:	2300      	movs	r3, #0
 8011392:	9305      	str	r3, [sp, #20]
 8011394:	9508      	str	r5, [sp, #32]
 8011396:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801139a:	2200      	movs	r2, #0
 801139c:	f8cd 9004 	str.w	r9, [sp, #4]
 80113a0:	2312      	movs	r3, #18
 80113a2:	9209      	str	r2, [sp, #36]	; 0x24
 80113a4:	e7cf      	b.n	8011346 <_dtoa_r+0x266>
 80113a6:	2301      	movs	r3, #1
 80113a8:	9308      	str	r3, [sp, #32]
 80113aa:	e7f4      	b.n	8011396 <_dtoa_r+0x2b6>
 80113ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80113b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80113b4:	464b      	mov	r3, r9
 80113b6:	e7c6      	b.n	8011346 <_dtoa_r+0x266>
 80113b8:	3101      	adds	r1, #1
 80113ba:	6041      	str	r1, [r0, #4]
 80113bc:	0052      	lsls	r2, r2, #1
 80113be:	e7c6      	b.n	801134e <_dtoa_r+0x26e>
 80113c0:	636f4361 	.word	0x636f4361
 80113c4:	3fd287a7 	.word	0x3fd287a7
 80113c8:	8b60c8b3 	.word	0x8b60c8b3
 80113cc:	3fc68a28 	.word	0x3fc68a28
 80113d0:	509f79fb 	.word	0x509f79fb
 80113d4:	3fd34413 	.word	0x3fd34413
 80113d8:	08015715 	.word	0x08015715
 80113dc:	0801572c 	.word	0x0801572c
 80113e0:	7ff00000 	.word	0x7ff00000
 80113e4:	08015711 	.word	0x08015711
 80113e8:	08015708 	.word	0x08015708
 80113ec:	080156a9 	.word	0x080156a9
 80113f0:	3ff80000 	.word	0x3ff80000
 80113f4:	08015888 	.word	0x08015888
 80113f8:	0801578b 	.word	0x0801578b
 80113fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113fe:	9a00      	ldr	r2, [sp, #0]
 8011400:	601a      	str	r2, [r3, #0]
 8011402:	9b01      	ldr	r3, [sp, #4]
 8011404:	2b0e      	cmp	r3, #14
 8011406:	f200 80ad 	bhi.w	8011564 <_dtoa_r+0x484>
 801140a:	2d00      	cmp	r5, #0
 801140c:	f000 80aa 	beq.w	8011564 <_dtoa_r+0x484>
 8011410:	f1ba 0f00 	cmp.w	sl, #0
 8011414:	dd36      	ble.n	8011484 <_dtoa_r+0x3a4>
 8011416:	4ac3      	ldr	r2, [pc, #780]	; (8011724 <_dtoa_r+0x644>)
 8011418:	f00a 030f 	and.w	r3, sl, #15
 801141c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011420:	ed93 7b00 	vldr	d7, [r3]
 8011424:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011428:	ea4f 172a 	mov.w	r7, sl, asr #4
 801142c:	eeb0 8a47 	vmov.f32	s16, s14
 8011430:	eef0 8a67 	vmov.f32	s17, s15
 8011434:	d016      	beq.n	8011464 <_dtoa_r+0x384>
 8011436:	4bbc      	ldr	r3, [pc, #752]	; (8011728 <_dtoa_r+0x648>)
 8011438:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801143c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011440:	f7ef fa24 	bl	800088c <__aeabi_ddiv>
 8011444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011448:	f007 070f 	and.w	r7, r7, #15
 801144c:	2503      	movs	r5, #3
 801144e:	4eb6      	ldr	r6, [pc, #728]	; (8011728 <_dtoa_r+0x648>)
 8011450:	b957      	cbnz	r7, 8011468 <_dtoa_r+0x388>
 8011452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011456:	ec53 2b18 	vmov	r2, r3, d8
 801145a:	f7ef fa17 	bl	800088c <__aeabi_ddiv>
 801145e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011462:	e029      	b.n	80114b8 <_dtoa_r+0x3d8>
 8011464:	2502      	movs	r5, #2
 8011466:	e7f2      	b.n	801144e <_dtoa_r+0x36e>
 8011468:	07f9      	lsls	r1, r7, #31
 801146a:	d508      	bpl.n	801147e <_dtoa_r+0x39e>
 801146c:	ec51 0b18 	vmov	r0, r1, d8
 8011470:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011474:	f7ef f8e0 	bl	8000638 <__aeabi_dmul>
 8011478:	ec41 0b18 	vmov	d8, r0, r1
 801147c:	3501      	adds	r5, #1
 801147e:	107f      	asrs	r7, r7, #1
 8011480:	3608      	adds	r6, #8
 8011482:	e7e5      	b.n	8011450 <_dtoa_r+0x370>
 8011484:	f000 80a6 	beq.w	80115d4 <_dtoa_r+0x4f4>
 8011488:	f1ca 0600 	rsb	r6, sl, #0
 801148c:	4ba5      	ldr	r3, [pc, #660]	; (8011724 <_dtoa_r+0x644>)
 801148e:	4fa6      	ldr	r7, [pc, #664]	; (8011728 <_dtoa_r+0x648>)
 8011490:	f006 020f 	and.w	r2, r6, #15
 8011494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801149c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80114a0:	f7ef f8ca 	bl	8000638 <__aeabi_dmul>
 80114a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114a8:	1136      	asrs	r6, r6, #4
 80114aa:	2300      	movs	r3, #0
 80114ac:	2502      	movs	r5, #2
 80114ae:	2e00      	cmp	r6, #0
 80114b0:	f040 8085 	bne.w	80115be <_dtoa_r+0x4de>
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d1d2      	bne.n	801145e <_dtoa_r+0x37e>
 80114b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	f000 808c 	beq.w	80115d8 <_dtoa_r+0x4f8>
 80114c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80114c4:	4b99      	ldr	r3, [pc, #612]	; (801172c <_dtoa_r+0x64c>)
 80114c6:	2200      	movs	r2, #0
 80114c8:	4630      	mov	r0, r6
 80114ca:	4639      	mov	r1, r7
 80114cc:	f7ef fb26 	bl	8000b1c <__aeabi_dcmplt>
 80114d0:	2800      	cmp	r0, #0
 80114d2:	f000 8081 	beq.w	80115d8 <_dtoa_r+0x4f8>
 80114d6:	9b01      	ldr	r3, [sp, #4]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d07d      	beq.n	80115d8 <_dtoa_r+0x4f8>
 80114dc:	f1b9 0f00 	cmp.w	r9, #0
 80114e0:	dd3c      	ble.n	801155c <_dtoa_r+0x47c>
 80114e2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80114e6:	9307      	str	r3, [sp, #28]
 80114e8:	2200      	movs	r2, #0
 80114ea:	4b91      	ldr	r3, [pc, #580]	; (8011730 <_dtoa_r+0x650>)
 80114ec:	4630      	mov	r0, r6
 80114ee:	4639      	mov	r1, r7
 80114f0:	f7ef f8a2 	bl	8000638 <__aeabi_dmul>
 80114f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114f8:	3501      	adds	r5, #1
 80114fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80114fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011502:	4628      	mov	r0, r5
 8011504:	f7ef f82e 	bl	8000564 <__aeabi_i2d>
 8011508:	4632      	mov	r2, r6
 801150a:	463b      	mov	r3, r7
 801150c:	f7ef f894 	bl	8000638 <__aeabi_dmul>
 8011510:	4b88      	ldr	r3, [pc, #544]	; (8011734 <_dtoa_r+0x654>)
 8011512:	2200      	movs	r2, #0
 8011514:	f7ee feda 	bl	80002cc <__adddf3>
 8011518:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801151c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011520:	9303      	str	r3, [sp, #12]
 8011522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011524:	2b00      	cmp	r3, #0
 8011526:	d15c      	bne.n	80115e2 <_dtoa_r+0x502>
 8011528:	4b83      	ldr	r3, [pc, #524]	; (8011738 <_dtoa_r+0x658>)
 801152a:	2200      	movs	r2, #0
 801152c:	4630      	mov	r0, r6
 801152e:	4639      	mov	r1, r7
 8011530:	f7ee feca 	bl	80002c8 <__aeabi_dsub>
 8011534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011538:	4606      	mov	r6, r0
 801153a:	460f      	mov	r7, r1
 801153c:	f7ef fb0c 	bl	8000b58 <__aeabi_dcmpgt>
 8011540:	2800      	cmp	r0, #0
 8011542:	f040 8296 	bne.w	8011a72 <_dtoa_r+0x992>
 8011546:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801154a:	4630      	mov	r0, r6
 801154c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011550:	4639      	mov	r1, r7
 8011552:	f7ef fae3 	bl	8000b1c <__aeabi_dcmplt>
 8011556:	2800      	cmp	r0, #0
 8011558:	f040 8288 	bne.w	8011a6c <_dtoa_r+0x98c>
 801155c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011560:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011564:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011566:	2b00      	cmp	r3, #0
 8011568:	f2c0 8158 	blt.w	801181c <_dtoa_r+0x73c>
 801156c:	f1ba 0f0e 	cmp.w	sl, #14
 8011570:	f300 8154 	bgt.w	801181c <_dtoa_r+0x73c>
 8011574:	4b6b      	ldr	r3, [pc, #428]	; (8011724 <_dtoa_r+0x644>)
 8011576:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801157a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801157e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011580:	2b00      	cmp	r3, #0
 8011582:	f280 80e3 	bge.w	801174c <_dtoa_r+0x66c>
 8011586:	9b01      	ldr	r3, [sp, #4]
 8011588:	2b00      	cmp	r3, #0
 801158a:	f300 80df 	bgt.w	801174c <_dtoa_r+0x66c>
 801158e:	f040 826d 	bne.w	8011a6c <_dtoa_r+0x98c>
 8011592:	4b69      	ldr	r3, [pc, #420]	; (8011738 <_dtoa_r+0x658>)
 8011594:	2200      	movs	r2, #0
 8011596:	4640      	mov	r0, r8
 8011598:	4649      	mov	r1, r9
 801159a:	f7ef f84d 	bl	8000638 <__aeabi_dmul>
 801159e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80115a2:	f7ef facf 	bl	8000b44 <__aeabi_dcmpge>
 80115a6:	9e01      	ldr	r6, [sp, #4]
 80115a8:	4637      	mov	r7, r6
 80115aa:	2800      	cmp	r0, #0
 80115ac:	f040 8243 	bne.w	8011a36 <_dtoa_r+0x956>
 80115b0:	9d00      	ldr	r5, [sp, #0]
 80115b2:	2331      	movs	r3, #49	; 0x31
 80115b4:	f805 3b01 	strb.w	r3, [r5], #1
 80115b8:	f10a 0a01 	add.w	sl, sl, #1
 80115bc:	e23f      	b.n	8011a3e <_dtoa_r+0x95e>
 80115be:	07f2      	lsls	r2, r6, #31
 80115c0:	d505      	bpl.n	80115ce <_dtoa_r+0x4ee>
 80115c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80115c6:	f7ef f837 	bl	8000638 <__aeabi_dmul>
 80115ca:	3501      	adds	r5, #1
 80115cc:	2301      	movs	r3, #1
 80115ce:	1076      	asrs	r6, r6, #1
 80115d0:	3708      	adds	r7, #8
 80115d2:	e76c      	b.n	80114ae <_dtoa_r+0x3ce>
 80115d4:	2502      	movs	r5, #2
 80115d6:	e76f      	b.n	80114b8 <_dtoa_r+0x3d8>
 80115d8:	9b01      	ldr	r3, [sp, #4]
 80115da:	f8cd a01c 	str.w	sl, [sp, #28]
 80115de:	930c      	str	r3, [sp, #48]	; 0x30
 80115e0:	e78d      	b.n	80114fe <_dtoa_r+0x41e>
 80115e2:	9900      	ldr	r1, [sp, #0]
 80115e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80115e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80115e8:	4b4e      	ldr	r3, [pc, #312]	; (8011724 <_dtoa_r+0x644>)
 80115ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80115ee:	4401      	add	r1, r0
 80115f0:	9102      	str	r1, [sp, #8]
 80115f2:	9908      	ldr	r1, [sp, #32]
 80115f4:	eeb0 8a47 	vmov.f32	s16, s14
 80115f8:	eef0 8a67 	vmov.f32	s17, s15
 80115fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011600:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011604:	2900      	cmp	r1, #0
 8011606:	d045      	beq.n	8011694 <_dtoa_r+0x5b4>
 8011608:	494c      	ldr	r1, [pc, #304]	; (801173c <_dtoa_r+0x65c>)
 801160a:	2000      	movs	r0, #0
 801160c:	f7ef f93e 	bl	800088c <__aeabi_ddiv>
 8011610:	ec53 2b18 	vmov	r2, r3, d8
 8011614:	f7ee fe58 	bl	80002c8 <__aeabi_dsub>
 8011618:	9d00      	ldr	r5, [sp, #0]
 801161a:	ec41 0b18 	vmov	d8, r0, r1
 801161e:	4639      	mov	r1, r7
 8011620:	4630      	mov	r0, r6
 8011622:	f7ef fab9 	bl	8000b98 <__aeabi_d2iz>
 8011626:	900c      	str	r0, [sp, #48]	; 0x30
 8011628:	f7ee ff9c 	bl	8000564 <__aeabi_i2d>
 801162c:	4602      	mov	r2, r0
 801162e:	460b      	mov	r3, r1
 8011630:	4630      	mov	r0, r6
 8011632:	4639      	mov	r1, r7
 8011634:	f7ee fe48 	bl	80002c8 <__aeabi_dsub>
 8011638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801163a:	3330      	adds	r3, #48	; 0x30
 801163c:	f805 3b01 	strb.w	r3, [r5], #1
 8011640:	ec53 2b18 	vmov	r2, r3, d8
 8011644:	4606      	mov	r6, r0
 8011646:	460f      	mov	r7, r1
 8011648:	f7ef fa68 	bl	8000b1c <__aeabi_dcmplt>
 801164c:	2800      	cmp	r0, #0
 801164e:	d165      	bne.n	801171c <_dtoa_r+0x63c>
 8011650:	4632      	mov	r2, r6
 8011652:	463b      	mov	r3, r7
 8011654:	4935      	ldr	r1, [pc, #212]	; (801172c <_dtoa_r+0x64c>)
 8011656:	2000      	movs	r0, #0
 8011658:	f7ee fe36 	bl	80002c8 <__aeabi_dsub>
 801165c:	ec53 2b18 	vmov	r2, r3, d8
 8011660:	f7ef fa5c 	bl	8000b1c <__aeabi_dcmplt>
 8011664:	2800      	cmp	r0, #0
 8011666:	f040 80b9 	bne.w	80117dc <_dtoa_r+0x6fc>
 801166a:	9b02      	ldr	r3, [sp, #8]
 801166c:	429d      	cmp	r5, r3
 801166e:	f43f af75 	beq.w	801155c <_dtoa_r+0x47c>
 8011672:	4b2f      	ldr	r3, [pc, #188]	; (8011730 <_dtoa_r+0x650>)
 8011674:	ec51 0b18 	vmov	r0, r1, d8
 8011678:	2200      	movs	r2, #0
 801167a:	f7ee ffdd 	bl	8000638 <__aeabi_dmul>
 801167e:	4b2c      	ldr	r3, [pc, #176]	; (8011730 <_dtoa_r+0x650>)
 8011680:	ec41 0b18 	vmov	d8, r0, r1
 8011684:	2200      	movs	r2, #0
 8011686:	4630      	mov	r0, r6
 8011688:	4639      	mov	r1, r7
 801168a:	f7ee ffd5 	bl	8000638 <__aeabi_dmul>
 801168e:	4606      	mov	r6, r0
 8011690:	460f      	mov	r7, r1
 8011692:	e7c4      	b.n	801161e <_dtoa_r+0x53e>
 8011694:	ec51 0b17 	vmov	r0, r1, d7
 8011698:	f7ee ffce 	bl	8000638 <__aeabi_dmul>
 801169c:	9b02      	ldr	r3, [sp, #8]
 801169e:	9d00      	ldr	r5, [sp, #0]
 80116a0:	930c      	str	r3, [sp, #48]	; 0x30
 80116a2:	ec41 0b18 	vmov	d8, r0, r1
 80116a6:	4639      	mov	r1, r7
 80116a8:	4630      	mov	r0, r6
 80116aa:	f7ef fa75 	bl	8000b98 <__aeabi_d2iz>
 80116ae:	9011      	str	r0, [sp, #68]	; 0x44
 80116b0:	f7ee ff58 	bl	8000564 <__aeabi_i2d>
 80116b4:	4602      	mov	r2, r0
 80116b6:	460b      	mov	r3, r1
 80116b8:	4630      	mov	r0, r6
 80116ba:	4639      	mov	r1, r7
 80116bc:	f7ee fe04 	bl	80002c8 <__aeabi_dsub>
 80116c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80116c2:	3330      	adds	r3, #48	; 0x30
 80116c4:	f805 3b01 	strb.w	r3, [r5], #1
 80116c8:	9b02      	ldr	r3, [sp, #8]
 80116ca:	429d      	cmp	r5, r3
 80116cc:	4606      	mov	r6, r0
 80116ce:	460f      	mov	r7, r1
 80116d0:	f04f 0200 	mov.w	r2, #0
 80116d4:	d134      	bne.n	8011740 <_dtoa_r+0x660>
 80116d6:	4b19      	ldr	r3, [pc, #100]	; (801173c <_dtoa_r+0x65c>)
 80116d8:	ec51 0b18 	vmov	r0, r1, d8
 80116dc:	f7ee fdf6 	bl	80002cc <__adddf3>
 80116e0:	4602      	mov	r2, r0
 80116e2:	460b      	mov	r3, r1
 80116e4:	4630      	mov	r0, r6
 80116e6:	4639      	mov	r1, r7
 80116e8:	f7ef fa36 	bl	8000b58 <__aeabi_dcmpgt>
 80116ec:	2800      	cmp	r0, #0
 80116ee:	d175      	bne.n	80117dc <_dtoa_r+0x6fc>
 80116f0:	ec53 2b18 	vmov	r2, r3, d8
 80116f4:	4911      	ldr	r1, [pc, #68]	; (801173c <_dtoa_r+0x65c>)
 80116f6:	2000      	movs	r0, #0
 80116f8:	f7ee fde6 	bl	80002c8 <__aeabi_dsub>
 80116fc:	4602      	mov	r2, r0
 80116fe:	460b      	mov	r3, r1
 8011700:	4630      	mov	r0, r6
 8011702:	4639      	mov	r1, r7
 8011704:	f7ef fa0a 	bl	8000b1c <__aeabi_dcmplt>
 8011708:	2800      	cmp	r0, #0
 801170a:	f43f af27 	beq.w	801155c <_dtoa_r+0x47c>
 801170e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011710:	1e6b      	subs	r3, r5, #1
 8011712:	930c      	str	r3, [sp, #48]	; 0x30
 8011714:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011718:	2b30      	cmp	r3, #48	; 0x30
 801171a:	d0f8      	beq.n	801170e <_dtoa_r+0x62e>
 801171c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011720:	e04a      	b.n	80117b8 <_dtoa_r+0x6d8>
 8011722:	bf00      	nop
 8011724:	08015888 	.word	0x08015888
 8011728:	08015860 	.word	0x08015860
 801172c:	3ff00000 	.word	0x3ff00000
 8011730:	40240000 	.word	0x40240000
 8011734:	401c0000 	.word	0x401c0000
 8011738:	40140000 	.word	0x40140000
 801173c:	3fe00000 	.word	0x3fe00000
 8011740:	4baf      	ldr	r3, [pc, #700]	; (8011a00 <_dtoa_r+0x920>)
 8011742:	f7ee ff79 	bl	8000638 <__aeabi_dmul>
 8011746:	4606      	mov	r6, r0
 8011748:	460f      	mov	r7, r1
 801174a:	e7ac      	b.n	80116a6 <_dtoa_r+0x5c6>
 801174c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011750:	9d00      	ldr	r5, [sp, #0]
 8011752:	4642      	mov	r2, r8
 8011754:	464b      	mov	r3, r9
 8011756:	4630      	mov	r0, r6
 8011758:	4639      	mov	r1, r7
 801175a:	f7ef f897 	bl	800088c <__aeabi_ddiv>
 801175e:	f7ef fa1b 	bl	8000b98 <__aeabi_d2iz>
 8011762:	9002      	str	r0, [sp, #8]
 8011764:	f7ee fefe 	bl	8000564 <__aeabi_i2d>
 8011768:	4642      	mov	r2, r8
 801176a:	464b      	mov	r3, r9
 801176c:	f7ee ff64 	bl	8000638 <__aeabi_dmul>
 8011770:	4602      	mov	r2, r0
 8011772:	460b      	mov	r3, r1
 8011774:	4630      	mov	r0, r6
 8011776:	4639      	mov	r1, r7
 8011778:	f7ee fda6 	bl	80002c8 <__aeabi_dsub>
 801177c:	9e02      	ldr	r6, [sp, #8]
 801177e:	9f01      	ldr	r7, [sp, #4]
 8011780:	3630      	adds	r6, #48	; 0x30
 8011782:	f805 6b01 	strb.w	r6, [r5], #1
 8011786:	9e00      	ldr	r6, [sp, #0]
 8011788:	1bae      	subs	r6, r5, r6
 801178a:	42b7      	cmp	r7, r6
 801178c:	4602      	mov	r2, r0
 801178e:	460b      	mov	r3, r1
 8011790:	d137      	bne.n	8011802 <_dtoa_r+0x722>
 8011792:	f7ee fd9b 	bl	80002cc <__adddf3>
 8011796:	4642      	mov	r2, r8
 8011798:	464b      	mov	r3, r9
 801179a:	4606      	mov	r6, r0
 801179c:	460f      	mov	r7, r1
 801179e:	f7ef f9db 	bl	8000b58 <__aeabi_dcmpgt>
 80117a2:	b9c8      	cbnz	r0, 80117d8 <_dtoa_r+0x6f8>
 80117a4:	4642      	mov	r2, r8
 80117a6:	464b      	mov	r3, r9
 80117a8:	4630      	mov	r0, r6
 80117aa:	4639      	mov	r1, r7
 80117ac:	f7ef f9ac 	bl	8000b08 <__aeabi_dcmpeq>
 80117b0:	b110      	cbz	r0, 80117b8 <_dtoa_r+0x6d8>
 80117b2:	9b02      	ldr	r3, [sp, #8]
 80117b4:	07d9      	lsls	r1, r3, #31
 80117b6:	d40f      	bmi.n	80117d8 <_dtoa_r+0x6f8>
 80117b8:	4620      	mov	r0, r4
 80117ba:	4659      	mov	r1, fp
 80117bc:	f000 fcfe 	bl	80121bc <_Bfree>
 80117c0:	2300      	movs	r3, #0
 80117c2:	702b      	strb	r3, [r5, #0]
 80117c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80117c6:	f10a 0001 	add.w	r0, sl, #1
 80117ca:	6018      	str	r0, [r3, #0]
 80117cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	f43f acd8 	beq.w	8011184 <_dtoa_r+0xa4>
 80117d4:	601d      	str	r5, [r3, #0]
 80117d6:	e4d5      	b.n	8011184 <_dtoa_r+0xa4>
 80117d8:	f8cd a01c 	str.w	sl, [sp, #28]
 80117dc:	462b      	mov	r3, r5
 80117de:	461d      	mov	r5, r3
 80117e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80117e4:	2a39      	cmp	r2, #57	; 0x39
 80117e6:	d108      	bne.n	80117fa <_dtoa_r+0x71a>
 80117e8:	9a00      	ldr	r2, [sp, #0]
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d1f7      	bne.n	80117de <_dtoa_r+0x6fe>
 80117ee:	9a07      	ldr	r2, [sp, #28]
 80117f0:	9900      	ldr	r1, [sp, #0]
 80117f2:	3201      	adds	r2, #1
 80117f4:	9207      	str	r2, [sp, #28]
 80117f6:	2230      	movs	r2, #48	; 0x30
 80117f8:	700a      	strb	r2, [r1, #0]
 80117fa:	781a      	ldrb	r2, [r3, #0]
 80117fc:	3201      	adds	r2, #1
 80117fe:	701a      	strb	r2, [r3, #0]
 8011800:	e78c      	b.n	801171c <_dtoa_r+0x63c>
 8011802:	4b7f      	ldr	r3, [pc, #508]	; (8011a00 <_dtoa_r+0x920>)
 8011804:	2200      	movs	r2, #0
 8011806:	f7ee ff17 	bl	8000638 <__aeabi_dmul>
 801180a:	2200      	movs	r2, #0
 801180c:	2300      	movs	r3, #0
 801180e:	4606      	mov	r6, r0
 8011810:	460f      	mov	r7, r1
 8011812:	f7ef f979 	bl	8000b08 <__aeabi_dcmpeq>
 8011816:	2800      	cmp	r0, #0
 8011818:	d09b      	beq.n	8011752 <_dtoa_r+0x672>
 801181a:	e7cd      	b.n	80117b8 <_dtoa_r+0x6d8>
 801181c:	9a08      	ldr	r2, [sp, #32]
 801181e:	2a00      	cmp	r2, #0
 8011820:	f000 80c4 	beq.w	80119ac <_dtoa_r+0x8cc>
 8011824:	9a05      	ldr	r2, [sp, #20]
 8011826:	2a01      	cmp	r2, #1
 8011828:	f300 80a8 	bgt.w	801197c <_dtoa_r+0x89c>
 801182c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801182e:	2a00      	cmp	r2, #0
 8011830:	f000 80a0 	beq.w	8011974 <_dtoa_r+0x894>
 8011834:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011838:	9e06      	ldr	r6, [sp, #24]
 801183a:	4645      	mov	r5, r8
 801183c:	9a04      	ldr	r2, [sp, #16]
 801183e:	2101      	movs	r1, #1
 8011840:	441a      	add	r2, r3
 8011842:	4620      	mov	r0, r4
 8011844:	4498      	add	r8, r3
 8011846:	9204      	str	r2, [sp, #16]
 8011848:	f000 fd74 	bl	8012334 <__i2b>
 801184c:	4607      	mov	r7, r0
 801184e:	2d00      	cmp	r5, #0
 8011850:	dd0b      	ble.n	801186a <_dtoa_r+0x78a>
 8011852:	9b04      	ldr	r3, [sp, #16]
 8011854:	2b00      	cmp	r3, #0
 8011856:	dd08      	ble.n	801186a <_dtoa_r+0x78a>
 8011858:	42ab      	cmp	r3, r5
 801185a:	9a04      	ldr	r2, [sp, #16]
 801185c:	bfa8      	it	ge
 801185e:	462b      	movge	r3, r5
 8011860:	eba8 0803 	sub.w	r8, r8, r3
 8011864:	1aed      	subs	r5, r5, r3
 8011866:	1ad3      	subs	r3, r2, r3
 8011868:	9304      	str	r3, [sp, #16]
 801186a:	9b06      	ldr	r3, [sp, #24]
 801186c:	b1fb      	cbz	r3, 80118ae <_dtoa_r+0x7ce>
 801186e:	9b08      	ldr	r3, [sp, #32]
 8011870:	2b00      	cmp	r3, #0
 8011872:	f000 809f 	beq.w	80119b4 <_dtoa_r+0x8d4>
 8011876:	2e00      	cmp	r6, #0
 8011878:	dd11      	ble.n	801189e <_dtoa_r+0x7be>
 801187a:	4639      	mov	r1, r7
 801187c:	4632      	mov	r2, r6
 801187e:	4620      	mov	r0, r4
 8011880:	f000 fe14 	bl	80124ac <__pow5mult>
 8011884:	465a      	mov	r2, fp
 8011886:	4601      	mov	r1, r0
 8011888:	4607      	mov	r7, r0
 801188a:	4620      	mov	r0, r4
 801188c:	f000 fd68 	bl	8012360 <__multiply>
 8011890:	4659      	mov	r1, fp
 8011892:	9007      	str	r0, [sp, #28]
 8011894:	4620      	mov	r0, r4
 8011896:	f000 fc91 	bl	80121bc <_Bfree>
 801189a:	9b07      	ldr	r3, [sp, #28]
 801189c:	469b      	mov	fp, r3
 801189e:	9b06      	ldr	r3, [sp, #24]
 80118a0:	1b9a      	subs	r2, r3, r6
 80118a2:	d004      	beq.n	80118ae <_dtoa_r+0x7ce>
 80118a4:	4659      	mov	r1, fp
 80118a6:	4620      	mov	r0, r4
 80118a8:	f000 fe00 	bl	80124ac <__pow5mult>
 80118ac:	4683      	mov	fp, r0
 80118ae:	2101      	movs	r1, #1
 80118b0:	4620      	mov	r0, r4
 80118b2:	f000 fd3f 	bl	8012334 <__i2b>
 80118b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	4606      	mov	r6, r0
 80118bc:	dd7c      	ble.n	80119b8 <_dtoa_r+0x8d8>
 80118be:	461a      	mov	r2, r3
 80118c0:	4601      	mov	r1, r0
 80118c2:	4620      	mov	r0, r4
 80118c4:	f000 fdf2 	bl	80124ac <__pow5mult>
 80118c8:	9b05      	ldr	r3, [sp, #20]
 80118ca:	2b01      	cmp	r3, #1
 80118cc:	4606      	mov	r6, r0
 80118ce:	dd76      	ble.n	80119be <_dtoa_r+0x8de>
 80118d0:	2300      	movs	r3, #0
 80118d2:	9306      	str	r3, [sp, #24]
 80118d4:	6933      	ldr	r3, [r6, #16]
 80118d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80118da:	6918      	ldr	r0, [r3, #16]
 80118dc:	f000 fcda 	bl	8012294 <__hi0bits>
 80118e0:	f1c0 0020 	rsb	r0, r0, #32
 80118e4:	9b04      	ldr	r3, [sp, #16]
 80118e6:	4418      	add	r0, r3
 80118e8:	f010 001f 	ands.w	r0, r0, #31
 80118ec:	f000 8086 	beq.w	80119fc <_dtoa_r+0x91c>
 80118f0:	f1c0 0320 	rsb	r3, r0, #32
 80118f4:	2b04      	cmp	r3, #4
 80118f6:	dd7f      	ble.n	80119f8 <_dtoa_r+0x918>
 80118f8:	f1c0 001c 	rsb	r0, r0, #28
 80118fc:	9b04      	ldr	r3, [sp, #16]
 80118fe:	4403      	add	r3, r0
 8011900:	4480      	add	r8, r0
 8011902:	4405      	add	r5, r0
 8011904:	9304      	str	r3, [sp, #16]
 8011906:	f1b8 0f00 	cmp.w	r8, #0
 801190a:	dd05      	ble.n	8011918 <_dtoa_r+0x838>
 801190c:	4659      	mov	r1, fp
 801190e:	4642      	mov	r2, r8
 8011910:	4620      	mov	r0, r4
 8011912:	f000 fe25 	bl	8012560 <__lshift>
 8011916:	4683      	mov	fp, r0
 8011918:	9b04      	ldr	r3, [sp, #16]
 801191a:	2b00      	cmp	r3, #0
 801191c:	dd05      	ble.n	801192a <_dtoa_r+0x84a>
 801191e:	4631      	mov	r1, r6
 8011920:	461a      	mov	r2, r3
 8011922:	4620      	mov	r0, r4
 8011924:	f000 fe1c 	bl	8012560 <__lshift>
 8011928:	4606      	mov	r6, r0
 801192a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801192c:	2b00      	cmp	r3, #0
 801192e:	d069      	beq.n	8011a04 <_dtoa_r+0x924>
 8011930:	4631      	mov	r1, r6
 8011932:	4658      	mov	r0, fp
 8011934:	f000 fe80 	bl	8012638 <__mcmp>
 8011938:	2800      	cmp	r0, #0
 801193a:	da63      	bge.n	8011a04 <_dtoa_r+0x924>
 801193c:	2300      	movs	r3, #0
 801193e:	4659      	mov	r1, fp
 8011940:	220a      	movs	r2, #10
 8011942:	4620      	mov	r0, r4
 8011944:	f000 fc5c 	bl	8012200 <__multadd>
 8011948:	9b08      	ldr	r3, [sp, #32]
 801194a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801194e:	4683      	mov	fp, r0
 8011950:	2b00      	cmp	r3, #0
 8011952:	f000 818f 	beq.w	8011c74 <_dtoa_r+0xb94>
 8011956:	4639      	mov	r1, r7
 8011958:	2300      	movs	r3, #0
 801195a:	220a      	movs	r2, #10
 801195c:	4620      	mov	r0, r4
 801195e:	f000 fc4f 	bl	8012200 <__multadd>
 8011962:	f1b9 0f00 	cmp.w	r9, #0
 8011966:	4607      	mov	r7, r0
 8011968:	f300 808e 	bgt.w	8011a88 <_dtoa_r+0x9a8>
 801196c:	9b05      	ldr	r3, [sp, #20]
 801196e:	2b02      	cmp	r3, #2
 8011970:	dc50      	bgt.n	8011a14 <_dtoa_r+0x934>
 8011972:	e089      	b.n	8011a88 <_dtoa_r+0x9a8>
 8011974:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011976:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801197a:	e75d      	b.n	8011838 <_dtoa_r+0x758>
 801197c:	9b01      	ldr	r3, [sp, #4]
 801197e:	1e5e      	subs	r6, r3, #1
 8011980:	9b06      	ldr	r3, [sp, #24]
 8011982:	42b3      	cmp	r3, r6
 8011984:	bfbf      	itttt	lt
 8011986:	9b06      	ldrlt	r3, [sp, #24]
 8011988:	9606      	strlt	r6, [sp, #24]
 801198a:	1af2      	sublt	r2, r6, r3
 801198c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801198e:	bfb6      	itet	lt
 8011990:	189b      	addlt	r3, r3, r2
 8011992:	1b9e      	subge	r6, r3, r6
 8011994:	930d      	strlt	r3, [sp, #52]	; 0x34
 8011996:	9b01      	ldr	r3, [sp, #4]
 8011998:	bfb8      	it	lt
 801199a:	2600      	movlt	r6, #0
 801199c:	2b00      	cmp	r3, #0
 801199e:	bfb5      	itete	lt
 80119a0:	eba8 0503 	sublt.w	r5, r8, r3
 80119a4:	9b01      	ldrge	r3, [sp, #4]
 80119a6:	2300      	movlt	r3, #0
 80119a8:	4645      	movge	r5, r8
 80119aa:	e747      	b.n	801183c <_dtoa_r+0x75c>
 80119ac:	9e06      	ldr	r6, [sp, #24]
 80119ae:	9f08      	ldr	r7, [sp, #32]
 80119b0:	4645      	mov	r5, r8
 80119b2:	e74c      	b.n	801184e <_dtoa_r+0x76e>
 80119b4:	9a06      	ldr	r2, [sp, #24]
 80119b6:	e775      	b.n	80118a4 <_dtoa_r+0x7c4>
 80119b8:	9b05      	ldr	r3, [sp, #20]
 80119ba:	2b01      	cmp	r3, #1
 80119bc:	dc18      	bgt.n	80119f0 <_dtoa_r+0x910>
 80119be:	9b02      	ldr	r3, [sp, #8]
 80119c0:	b9b3      	cbnz	r3, 80119f0 <_dtoa_r+0x910>
 80119c2:	9b03      	ldr	r3, [sp, #12]
 80119c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80119c8:	b9a3      	cbnz	r3, 80119f4 <_dtoa_r+0x914>
 80119ca:	9b03      	ldr	r3, [sp, #12]
 80119cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80119d0:	0d1b      	lsrs	r3, r3, #20
 80119d2:	051b      	lsls	r3, r3, #20
 80119d4:	b12b      	cbz	r3, 80119e2 <_dtoa_r+0x902>
 80119d6:	9b04      	ldr	r3, [sp, #16]
 80119d8:	3301      	adds	r3, #1
 80119da:	9304      	str	r3, [sp, #16]
 80119dc:	f108 0801 	add.w	r8, r8, #1
 80119e0:	2301      	movs	r3, #1
 80119e2:	9306      	str	r3, [sp, #24]
 80119e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	f47f af74 	bne.w	80118d4 <_dtoa_r+0x7f4>
 80119ec:	2001      	movs	r0, #1
 80119ee:	e779      	b.n	80118e4 <_dtoa_r+0x804>
 80119f0:	2300      	movs	r3, #0
 80119f2:	e7f6      	b.n	80119e2 <_dtoa_r+0x902>
 80119f4:	9b02      	ldr	r3, [sp, #8]
 80119f6:	e7f4      	b.n	80119e2 <_dtoa_r+0x902>
 80119f8:	d085      	beq.n	8011906 <_dtoa_r+0x826>
 80119fa:	4618      	mov	r0, r3
 80119fc:	301c      	adds	r0, #28
 80119fe:	e77d      	b.n	80118fc <_dtoa_r+0x81c>
 8011a00:	40240000 	.word	0x40240000
 8011a04:	9b01      	ldr	r3, [sp, #4]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	dc38      	bgt.n	8011a7c <_dtoa_r+0x99c>
 8011a0a:	9b05      	ldr	r3, [sp, #20]
 8011a0c:	2b02      	cmp	r3, #2
 8011a0e:	dd35      	ble.n	8011a7c <_dtoa_r+0x99c>
 8011a10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011a14:	f1b9 0f00 	cmp.w	r9, #0
 8011a18:	d10d      	bne.n	8011a36 <_dtoa_r+0x956>
 8011a1a:	4631      	mov	r1, r6
 8011a1c:	464b      	mov	r3, r9
 8011a1e:	2205      	movs	r2, #5
 8011a20:	4620      	mov	r0, r4
 8011a22:	f000 fbed 	bl	8012200 <__multadd>
 8011a26:	4601      	mov	r1, r0
 8011a28:	4606      	mov	r6, r0
 8011a2a:	4658      	mov	r0, fp
 8011a2c:	f000 fe04 	bl	8012638 <__mcmp>
 8011a30:	2800      	cmp	r0, #0
 8011a32:	f73f adbd 	bgt.w	80115b0 <_dtoa_r+0x4d0>
 8011a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a38:	9d00      	ldr	r5, [sp, #0]
 8011a3a:	ea6f 0a03 	mvn.w	sl, r3
 8011a3e:	f04f 0800 	mov.w	r8, #0
 8011a42:	4631      	mov	r1, r6
 8011a44:	4620      	mov	r0, r4
 8011a46:	f000 fbb9 	bl	80121bc <_Bfree>
 8011a4a:	2f00      	cmp	r7, #0
 8011a4c:	f43f aeb4 	beq.w	80117b8 <_dtoa_r+0x6d8>
 8011a50:	f1b8 0f00 	cmp.w	r8, #0
 8011a54:	d005      	beq.n	8011a62 <_dtoa_r+0x982>
 8011a56:	45b8      	cmp	r8, r7
 8011a58:	d003      	beq.n	8011a62 <_dtoa_r+0x982>
 8011a5a:	4641      	mov	r1, r8
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	f000 fbad 	bl	80121bc <_Bfree>
 8011a62:	4639      	mov	r1, r7
 8011a64:	4620      	mov	r0, r4
 8011a66:	f000 fba9 	bl	80121bc <_Bfree>
 8011a6a:	e6a5      	b.n	80117b8 <_dtoa_r+0x6d8>
 8011a6c:	2600      	movs	r6, #0
 8011a6e:	4637      	mov	r7, r6
 8011a70:	e7e1      	b.n	8011a36 <_dtoa_r+0x956>
 8011a72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011a74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011a78:	4637      	mov	r7, r6
 8011a7a:	e599      	b.n	80115b0 <_dtoa_r+0x4d0>
 8011a7c:	9b08      	ldr	r3, [sp, #32]
 8011a7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	f000 80fd 	beq.w	8011c82 <_dtoa_r+0xba2>
 8011a88:	2d00      	cmp	r5, #0
 8011a8a:	dd05      	ble.n	8011a98 <_dtoa_r+0x9b8>
 8011a8c:	4639      	mov	r1, r7
 8011a8e:	462a      	mov	r2, r5
 8011a90:	4620      	mov	r0, r4
 8011a92:	f000 fd65 	bl	8012560 <__lshift>
 8011a96:	4607      	mov	r7, r0
 8011a98:	9b06      	ldr	r3, [sp, #24]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d05c      	beq.n	8011b58 <_dtoa_r+0xa78>
 8011a9e:	6879      	ldr	r1, [r7, #4]
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	f000 fb4b 	bl	801213c <_Balloc>
 8011aa6:	4605      	mov	r5, r0
 8011aa8:	b928      	cbnz	r0, 8011ab6 <_dtoa_r+0x9d6>
 8011aaa:	4b80      	ldr	r3, [pc, #512]	; (8011cac <_dtoa_r+0xbcc>)
 8011aac:	4602      	mov	r2, r0
 8011aae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011ab2:	f7ff bb2e 	b.w	8011112 <_dtoa_r+0x32>
 8011ab6:	693a      	ldr	r2, [r7, #16]
 8011ab8:	3202      	adds	r2, #2
 8011aba:	0092      	lsls	r2, r2, #2
 8011abc:	f107 010c 	add.w	r1, r7, #12
 8011ac0:	300c      	adds	r0, #12
 8011ac2:	f7fe fba3 	bl	801020c <memcpy>
 8011ac6:	2201      	movs	r2, #1
 8011ac8:	4629      	mov	r1, r5
 8011aca:	4620      	mov	r0, r4
 8011acc:	f000 fd48 	bl	8012560 <__lshift>
 8011ad0:	9b00      	ldr	r3, [sp, #0]
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	9301      	str	r3, [sp, #4]
 8011ad6:	9b00      	ldr	r3, [sp, #0]
 8011ad8:	444b      	add	r3, r9
 8011ada:	9307      	str	r3, [sp, #28]
 8011adc:	9b02      	ldr	r3, [sp, #8]
 8011ade:	f003 0301 	and.w	r3, r3, #1
 8011ae2:	46b8      	mov	r8, r7
 8011ae4:	9306      	str	r3, [sp, #24]
 8011ae6:	4607      	mov	r7, r0
 8011ae8:	9b01      	ldr	r3, [sp, #4]
 8011aea:	4631      	mov	r1, r6
 8011aec:	3b01      	subs	r3, #1
 8011aee:	4658      	mov	r0, fp
 8011af0:	9302      	str	r3, [sp, #8]
 8011af2:	f7ff fa67 	bl	8010fc4 <quorem>
 8011af6:	4603      	mov	r3, r0
 8011af8:	3330      	adds	r3, #48	; 0x30
 8011afa:	9004      	str	r0, [sp, #16]
 8011afc:	4641      	mov	r1, r8
 8011afe:	4658      	mov	r0, fp
 8011b00:	9308      	str	r3, [sp, #32]
 8011b02:	f000 fd99 	bl	8012638 <__mcmp>
 8011b06:	463a      	mov	r2, r7
 8011b08:	4681      	mov	r9, r0
 8011b0a:	4631      	mov	r1, r6
 8011b0c:	4620      	mov	r0, r4
 8011b0e:	f000 fdaf 	bl	8012670 <__mdiff>
 8011b12:	68c2      	ldr	r2, [r0, #12]
 8011b14:	9b08      	ldr	r3, [sp, #32]
 8011b16:	4605      	mov	r5, r0
 8011b18:	bb02      	cbnz	r2, 8011b5c <_dtoa_r+0xa7c>
 8011b1a:	4601      	mov	r1, r0
 8011b1c:	4658      	mov	r0, fp
 8011b1e:	f000 fd8b 	bl	8012638 <__mcmp>
 8011b22:	9b08      	ldr	r3, [sp, #32]
 8011b24:	4602      	mov	r2, r0
 8011b26:	4629      	mov	r1, r5
 8011b28:	4620      	mov	r0, r4
 8011b2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8011b2e:	f000 fb45 	bl	80121bc <_Bfree>
 8011b32:	9b05      	ldr	r3, [sp, #20]
 8011b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b36:	9d01      	ldr	r5, [sp, #4]
 8011b38:	ea43 0102 	orr.w	r1, r3, r2
 8011b3c:	9b06      	ldr	r3, [sp, #24]
 8011b3e:	430b      	orrs	r3, r1
 8011b40:	9b08      	ldr	r3, [sp, #32]
 8011b42:	d10d      	bne.n	8011b60 <_dtoa_r+0xa80>
 8011b44:	2b39      	cmp	r3, #57	; 0x39
 8011b46:	d029      	beq.n	8011b9c <_dtoa_r+0xabc>
 8011b48:	f1b9 0f00 	cmp.w	r9, #0
 8011b4c:	dd01      	ble.n	8011b52 <_dtoa_r+0xa72>
 8011b4e:	9b04      	ldr	r3, [sp, #16]
 8011b50:	3331      	adds	r3, #49	; 0x31
 8011b52:	9a02      	ldr	r2, [sp, #8]
 8011b54:	7013      	strb	r3, [r2, #0]
 8011b56:	e774      	b.n	8011a42 <_dtoa_r+0x962>
 8011b58:	4638      	mov	r0, r7
 8011b5a:	e7b9      	b.n	8011ad0 <_dtoa_r+0x9f0>
 8011b5c:	2201      	movs	r2, #1
 8011b5e:	e7e2      	b.n	8011b26 <_dtoa_r+0xa46>
 8011b60:	f1b9 0f00 	cmp.w	r9, #0
 8011b64:	db06      	blt.n	8011b74 <_dtoa_r+0xa94>
 8011b66:	9905      	ldr	r1, [sp, #20]
 8011b68:	ea41 0909 	orr.w	r9, r1, r9
 8011b6c:	9906      	ldr	r1, [sp, #24]
 8011b6e:	ea59 0101 	orrs.w	r1, r9, r1
 8011b72:	d120      	bne.n	8011bb6 <_dtoa_r+0xad6>
 8011b74:	2a00      	cmp	r2, #0
 8011b76:	ddec      	ble.n	8011b52 <_dtoa_r+0xa72>
 8011b78:	4659      	mov	r1, fp
 8011b7a:	2201      	movs	r2, #1
 8011b7c:	4620      	mov	r0, r4
 8011b7e:	9301      	str	r3, [sp, #4]
 8011b80:	f000 fcee 	bl	8012560 <__lshift>
 8011b84:	4631      	mov	r1, r6
 8011b86:	4683      	mov	fp, r0
 8011b88:	f000 fd56 	bl	8012638 <__mcmp>
 8011b8c:	2800      	cmp	r0, #0
 8011b8e:	9b01      	ldr	r3, [sp, #4]
 8011b90:	dc02      	bgt.n	8011b98 <_dtoa_r+0xab8>
 8011b92:	d1de      	bne.n	8011b52 <_dtoa_r+0xa72>
 8011b94:	07da      	lsls	r2, r3, #31
 8011b96:	d5dc      	bpl.n	8011b52 <_dtoa_r+0xa72>
 8011b98:	2b39      	cmp	r3, #57	; 0x39
 8011b9a:	d1d8      	bne.n	8011b4e <_dtoa_r+0xa6e>
 8011b9c:	9a02      	ldr	r2, [sp, #8]
 8011b9e:	2339      	movs	r3, #57	; 0x39
 8011ba0:	7013      	strb	r3, [r2, #0]
 8011ba2:	462b      	mov	r3, r5
 8011ba4:	461d      	mov	r5, r3
 8011ba6:	3b01      	subs	r3, #1
 8011ba8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011bac:	2a39      	cmp	r2, #57	; 0x39
 8011bae:	d050      	beq.n	8011c52 <_dtoa_r+0xb72>
 8011bb0:	3201      	adds	r2, #1
 8011bb2:	701a      	strb	r2, [r3, #0]
 8011bb4:	e745      	b.n	8011a42 <_dtoa_r+0x962>
 8011bb6:	2a00      	cmp	r2, #0
 8011bb8:	dd03      	ble.n	8011bc2 <_dtoa_r+0xae2>
 8011bba:	2b39      	cmp	r3, #57	; 0x39
 8011bbc:	d0ee      	beq.n	8011b9c <_dtoa_r+0xabc>
 8011bbe:	3301      	adds	r3, #1
 8011bc0:	e7c7      	b.n	8011b52 <_dtoa_r+0xa72>
 8011bc2:	9a01      	ldr	r2, [sp, #4]
 8011bc4:	9907      	ldr	r1, [sp, #28]
 8011bc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011bca:	428a      	cmp	r2, r1
 8011bcc:	d02a      	beq.n	8011c24 <_dtoa_r+0xb44>
 8011bce:	4659      	mov	r1, fp
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	220a      	movs	r2, #10
 8011bd4:	4620      	mov	r0, r4
 8011bd6:	f000 fb13 	bl	8012200 <__multadd>
 8011bda:	45b8      	cmp	r8, r7
 8011bdc:	4683      	mov	fp, r0
 8011bde:	f04f 0300 	mov.w	r3, #0
 8011be2:	f04f 020a 	mov.w	r2, #10
 8011be6:	4641      	mov	r1, r8
 8011be8:	4620      	mov	r0, r4
 8011bea:	d107      	bne.n	8011bfc <_dtoa_r+0xb1c>
 8011bec:	f000 fb08 	bl	8012200 <__multadd>
 8011bf0:	4680      	mov	r8, r0
 8011bf2:	4607      	mov	r7, r0
 8011bf4:	9b01      	ldr	r3, [sp, #4]
 8011bf6:	3301      	adds	r3, #1
 8011bf8:	9301      	str	r3, [sp, #4]
 8011bfa:	e775      	b.n	8011ae8 <_dtoa_r+0xa08>
 8011bfc:	f000 fb00 	bl	8012200 <__multadd>
 8011c00:	4639      	mov	r1, r7
 8011c02:	4680      	mov	r8, r0
 8011c04:	2300      	movs	r3, #0
 8011c06:	220a      	movs	r2, #10
 8011c08:	4620      	mov	r0, r4
 8011c0a:	f000 faf9 	bl	8012200 <__multadd>
 8011c0e:	4607      	mov	r7, r0
 8011c10:	e7f0      	b.n	8011bf4 <_dtoa_r+0xb14>
 8011c12:	f1b9 0f00 	cmp.w	r9, #0
 8011c16:	9a00      	ldr	r2, [sp, #0]
 8011c18:	bfcc      	ite	gt
 8011c1a:	464d      	movgt	r5, r9
 8011c1c:	2501      	movle	r5, #1
 8011c1e:	4415      	add	r5, r2
 8011c20:	f04f 0800 	mov.w	r8, #0
 8011c24:	4659      	mov	r1, fp
 8011c26:	2201      	movs	r2, #1
 8011c28:	4620      	mov	r0, r4
 8011c2a:	9301      	str	r3, [sp, #4]
 8011c2c:	f000 fc98 	bl	8012560 <__lshift>
 8011c30:	4631      	mov	r1, r6
 8011c32:	4683      	mov	fp, r0
 8011c34:	f000 fd00 	bl	8012638 <__mcmp>
 8011c38:	2800      	cmp	r0, #0
 8011c3a:	dcb2      	bgt.n	8011ba2 <_dtoa_r+0xac2>
 8011c3c:	d102      	bne.n	8011c44 <_dtoa_r+0xb64>
 8011c3e:	9b01      	ldr	r3, [sp, #4]
 8011c40:	07db      	lsls	r3, r3, #31
 8011c42:	d4ae      	bmi.n	8011ba2 <_dtoa_r+0xac2>
 8011c44:	462b      	mov	r3, r5
 8011c46:	461d      	mov	r5, r3
 8011c48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011c4c:	2a30      	cmp	r2, #48	; 0x30
 8011c4e:	d0fa      	beq.n	8011c46 <_dtoa_r+0xb66>
 8011c50:	e6f7      	b.n	8011a42 <_dtoa_r+0x962>
 8011c52:	9a00      	ldr	r2, [sp, #0]
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d1a5      	bne.n	8011ba4 <_dtoa_r+0xac4>
 8011c58:	f10a 0a01 	add.w	sl, sl, #1
 8011c5c:	2331      	movs	r3, #49	; 0x31
 8011c5e:	e779      	b.n	8011b54 <_dtoa_r+0xa74>
 8011c60:	4b13      	ldr	r3, [pc, #76]	; (8011cb0 <_dtoa_r+0xbd0>)
 8011c62:	f7ff baaf 	b.w	80111c4 <_dtoa_r+0xe4>
 8011c66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	f47f aa86 	bne.w	801117a <_dtoa_r+0x9a>
 8011c6e:	4b11      	ldr	r3, [pc, #68]	; (8011cb4 <_dtoa_r+0xbd4>)
 8011c70:	f7ff baa8 	b.w	80111c4 <_dtoa_r+0xe4>
 8011c74:	f1b9 0f00 	cmp.w	r9, #0
 8011c78:	dc03      	bgt.n	8011c82 <_dtoa_r+0xba2>
 8011c7a:	9b05      	ldr	r3, [sp, #20]
 8011c7c:	2b02      	cmp	r3, #2
 8011c7e:	f73f aec9 	bgt.w	8011a14 <_dtoa_r+0x934>
 8011c82:	9d00      	ldr	r5, [sp, #0]
 8011c84:	4631      	mov	r1, r6
 8011c86:	4658      	mov	r0, fp
 8011c88:	f7ff f99c 	bl	8010fc4 <quorem>
 8011c8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011c90:	f805 3b01 	strb.w	r3, [r5], #1
 8011c94:	9a00      	ldr	r2, [sp, #0]
 8011c96:	1aaa      	subs	r2, r5, r2
 8011c98:	4591      	cmp	r9, r2
 8011c9a:	ddba      	ble.n	8011c12 <_dtoa_r+0xb32>
 8011c9c:	4659      	mov	r1, fp
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	220a      	movs	r2, #10
 8011ca2:	4620      	mov	r0, r4
 8011ca4:	f000 faac 	bl	8012200 <__multadd>
 8011ca8:	4683      	mov	fp, r0
 8011caa:	e7eb      	b.n	8011c84 <_dtoa_r+0xba4>
 8011cac:	0801578b 	.word	0x0801578b
 8011cb0:	080156a8 	.word	0x080156a8
 8011cb4:	08015708 	.word	0x08015708

08011cb8 <__sflush_r>:
 8011cb8:	898a      	ldrh	r2, [r1, #12]
 8011cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cbe:	4605      	mov	r5, r0
 8011cc0:	0710      	lsls	r0, r2, #28
 8011cc2:	460c      	mov	r4, r1
 8011cc4:	d458      	bmi.n	8011d78 <__sflush_r+0xc0>
 8011cc6:	684b      	ldr	r3, [r1, #4]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	dc05      	bgt.n	8011cd8 <__sflush_r+0x20>
 8011ccc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	dc02      	bgt.n	8011cd8 <__sflush_r+0x20>
 8011cd2:	2000      	movs	r0, #0
 8011cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011cda:	2e00      	cmp	r6, #0
 8011cdc:	d0f9      	beq.n	8011cd2 <__sflush_r+0x1a>
 8011cde:	2300      	movs	r3, #0
 8011ce0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011ce4:	682f      	ldr	r7, [r5, #0]
 8011ce6:	602b      	str	r3, [r5, #0]
 8011ce8:	d032      	beq.n	8011d50 <__sflush_r+0x98>
 8011cea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011cec:	89a3      	ldrh	r3, [r4, #12]
 8011cee:	075a      	lsls	r2, r3, #29
 8011cf0:	d505      	bpl.n	8011cfe <__sflush_r+0x46>
 8011cf2:	6863      	ldr	r3, [r4, #4]
 8011cf4:	1ac0      	subs	r0, r0, r3
 8011cf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011cf8:	b10b      	cbz	r3, 8011cfe <__sflush_r+0x46>
 8011cfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011cfc:	1ac0      	subs	r0, r0, r3
 8011cfe:	2300      	movs	r3, #0
 8011d00:	4602      	mov	r2, r0
 8011d02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d04:	6a21      	ldr	r1, [r4, #32]
 8011d06:	4628      	mov	r0, r5
 8011d08:	47b0      	blx	r6
 8011d0a:	1c43      	adds	r3, r0, #1
 8011d0c:	89a3      	ldrh	r3, [r4, #12]
 8011d0e:	d106      	bne.n	8011d1e <__sflush_r+0x66>
 8011d10:	6829      	ldr	r1, [r5, #0]
 8011d12:	291d      	cmp	r1, #29
 8011d14:	d82c      	bhi.n	8011d70 <__sflush_r+0xb8>
 8011d16:	4a2a      	ldr	r2, [pc, #168]	; (8011dc0 <__sflush_r+0x108>)
 8011d18:	40ca      	lsrs	r2, r1
 8011d1a:	07d6      	lsls	r6, r2, #31
 8011d1c:	d528      	bpl.n	8011d70 <__sflush_r+0xb8>
 8011d1e:	2200      	movs	r2, #0
 8011d20:	6062      	str	r2, [r4, #4]
 8011d22:	04d9      	lsls	r1, r3, #19
 8011d24:	6922      	ldr	r2, [r4, #16]
 8011d26:	6022      	str	r2, [r4, #0]
 8011d28:	d504      	bpl.n	8011d34 <__sflush_r+0x7c>
 8011d2a:	1c42      	adds	r2, r0, #1
 8011d2c:	d101      	bne.n	8011d32 <__sflush_r+0x7a>
 8011d2e:	682b      	ldr	r3, [r5, #0]
 8011d30:	b903      	cbnz	r3, 8011d34 <__sflush_r+0x7c>
 8011d32:	6560      	str	r0, [r4, #84]	; 0x54
 8011d34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d36:	602f      	str	r7, [r5, #0]
 8011d38:	2900      	cmp	r1, #0
 8011d3a:	d0ca      	beq.n	8011cd2 <__sflush_r+0x1a>
 8011d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d40:	4299      	cmp	r1, r3
 8011d42:	d002      	beq.n	8011d4a <__sflush_r+0x92>
 8011d44:	4628      	mov	r0, r5
 8011d46:	f7fe fa77 	bl	8010238 <_free_r>
 8011d4a:	2000      	movs	r0, #0
 8011d4c:	6360      	str	r0, [r4, #52]	; 0x34
 8011d4e:	e7c1      	b.n	8011cd4 <__sflush_r+0x1c>
 8011d50:	6a21      	ldr	r1, [r4, #32]
 8011d52:	2301      	movs	r3, #1
 8011d54:	4628      	mov	r0, r5
 8011d56:	47b0      	blx	r6
 8011d58:	1c41      	adds	r1, r0, #1
 8011d5a:	d1c7      	bne.n	8011cec <__sflush_r+0x34>
 8011d5c:	682b      	ldr	r3, [r5, #0]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d0c4      	beq.n	8011cec <__sflush_r+0x34>
 8011d62:	2b1d      	cmp	r3, #29
 8011d64:	d001      	beq.n	8011d6a <__sflush_r+0xb2>
 8011d66:	2b16      	cmp	r3, #22
 8011d68:	d101      	bne.n	8011d6e <__sflush_r+0xb6>
 8011d6a:	602f      	str	r7, [r5, #0]
 8011d6c:	e7b1      	b.n	8011cd2 <__sflush_r+0x1a>
 8011d6e:	89a3      	ldrh	r3, [r4, #12]
 8011d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d74:	81a3      	strh	r3, [r4, #12]
 8011d76:	e7ad      	b.n	8011cd4 <__sflush_r+0x1c>
 8011d78:	690f      	ldr	r7, [r1, #16]
 8011d7a:	2f00      	cmp	r7, #0
 8011d7c:	d0a9      	beq.n	8011cd2 <__sflush_r+0x1a>
 8011d7e:	0793      	lsls	r3, r2, #30
 8011d80:	680e      	ldr	r6, [r1, #0]
 8011d82:	bf08      	it	eq
 8011d84:	694b      	ldreq	r3, [r1, #20]
 8011d86:	600f      	str	r7, [r1, #0]
 8011d88:	bf18      	it	ne
 8011d8a:	2300      	movne	r3, #0
 8011d8c:	eba6 0807 	sub.w	r8, r6, r7
 8011d90:	608b      	str	r3, [r1, #8]
 8011d92:	f1b8 0f00 	cmp.w	r8, #0
 8011d96:	dd9c      	ble.n	8011cd2 <__sflush_r+0x1a>
 8011d98:	6a21      	ldr	r1, [r4, #32]
 8011d9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011d9c:	4643      	mov	r3, r8
 8011d9e:	463a      	mov	r2, r7
 8011da0:	4628      	mov	r0, r5
 8011da2:	47b0      	blx	r6
 8011da4:	2800      	cmp	r0, #0
 8011da6:	dc06      	bgt.n	8011db6 <__sflush_r+0xfe>
 8011da8:	89a3      	ldrh	r3, [r4, #12]
 8011daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011dae:	81a3      	strh	r3, [r4, #12]
 8011db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011db4:	e78e      	b.n	8011cd4 <__sflush_r+0x1c>
 8011db6:	4407      	add	r7, r0
 8011db8:	eba8 0800 	sub.w	r8, r8, r0
 8011dbc:	e7e9      	b.n	8011d92 <__sflush_r+0xda>
 8011dbe:	bf00      	nop
 8011dc0:	20400001 	.word	0x20400001

08011dc4 <_fflush_r>:
 8011dc4:	b538      	push	{r3, r4, r5, lr}
 8011dc6:	690b      	ldr	r3, [r1, #16]
 8011dc8:	4605      	mov	r5, r0
 8011dca:	460c      	mov	r4, r1
 8011dcc:	b913      	cbnz	r3, 8011dd4 <_fflush_r+0x10>
 8011dce:	2500      	movs	r5, #0
 8011dd0:	4628      	mov	r0, r5
 8011dd2:	bd38      	pop	{r3, r4, r5, pc}
 8011dd4:	b118      	cbz	r0, 8011dde <_fflush_r+0x1a>
 8011dd6:	6983      	ldr	r3, [r0, #24]
 8011dd8:	b90b      	cbnz	r3, 8011dde <_fflush_r+0x1a>
 8011dda:	f000 f887 	bl	8011eec <__sinit>
 8011dde:	4b14      	ldr	r3, [pc, #80]	; (8011e30 <_fflush_r+0x6c>)
 8011de0:	429c      	cmp	r4, r3
 8011de2:	d11b      	bne.n	8011e1c <_fflush_r+0x58>
 8011de4:	686c      	ldr	r4, [r5, #4]
 8011de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d0ef      	beq.n	8011dce <_fflush_r+0xa>
 8011dee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011df0:	07d0      	lsls	r0, r2, #31
 8011df2:	d404      	bmi.n	8011dfe <_fflush_r+0x3a>
 8011df4:	0599      	lsls	r1, r3, #22
 8011df6:	d402      	bmi.n	8011dfe <_fflush_r+0x3a>
 8011df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011dfa:	f000 f92c 	bl	8012056 <__retarget_lock_acquire_recursive>
 8011dfe:	4628      	mov	r0, r5
 8011e00:	4621      	mov	r1, r4
 8011e02:	f7ff ff59 	bl	8011cb8 <__sflush_r>
 8011e06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011e08:	07da      	lsls	r2, r3, #31
 8011e0a:	4605      	mov	r5, r0
 8011e0c:	d4e0      	bmi.n	8011dd0 <_fflush_r+0xc>
 8011e0e:	89a3      	ldrh	r3, [r4, #12]
 8011e10:	059b      	lsls	r3, r3, #22
 8011e12:	d4dd      	bmi.n	8011dd0 <_fflush_r+0xc>
 8011e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e16:	f000 f91f 	bl	8012058 <__retarget_lock_release_recursive>
 8011e1a:	e7d9      	b.n	8011dd0 <_fflush_r+0xc>
 8011e1c:	4b05      	ldr	r3, [pc, #20]	; (8011e34 <_fflush_r+0x70>)
 8011e1e:	429c      	cmp	r4, r3
 8011e20:	d101      	bne.n	8011e26 <_fflush_r+0x62>
 8011e22:	68ac      	ldr	r4, [r5, #8]
 8011e24:	e7df      	b.n	8011de6 <_fflush_r+0x22>
 8011e26:	4b04      	ldr	r3, [pc, #16]	; (8011e38 <_fflush_r+0x74>)
 8011e28:	429c      	cmp	r4, r3
 8011e2a:	bf08      	it	eq
 8011e2c:	68ec      	ldreq	r4, [r5, #12]
 8011e2e:	e7da      	b.n	8011de6 <_fflush_r+0x22>
 8011e30:	080157bc 	.word	0x080157bc
 8011e34:	080157dc 	.word	0x080157dc
 8011e38:	0801579c 	.word	0x0801579c

08011e3c <std>:
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	b510      	push	{r4, lr}
 8011e40:	4604      	mov	r4, r0
 8011e42:	e9c0 3300 	strd	r3, r3, [r0]
 8011e46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011e4a:	6083      	str	r3, [r0, #8]
 8011e4c:	8181      	strh	r1, [r0, #12]
 8011e4e:	6643      	str	r3, [r0, #100]	; 0x64
 8011e50:	81c2      	strh	r2, [r0, #14]
 8011e52:	6183      	str	r3, [r0, #24]
 8011e54:	4619      	mov	r1, r3
 8011e56:	2208      	movs	r2, #8
 8011e58:	305c      	adds	r0, #92	; 0x5c
 8011e5a:	f7fe f9e5 	bl	8010228 <memset>
 8011e5e:	4b05      	ldr	r3, [pc, #20]	; (8011e74 <std+0x38>)
 8011e60:	6263      	str	r3, [r4, #36]	; 0x24
 8011e62:	4b05      	ldr	r3, [pc, #20]	; (8011e78 <std+0x3c>)
 8011e64:	62a3      	str	r3, [r4, #40]	; 0x28
 8011e66:	4b05      	ldr	r3, [pc, #20]	; (8011e7c <std+0x40>)
 8011e68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011e6a:	4b05      	ldr	r3, [pc, #20]	; (8011e80 <std+0x44>)
 8011e6c:	6224      	str	r4, [r4, #32]
 8011e6e:	6323      	str	r3, [r4, #48]	; 0x30
 8011e70:	bd10      	pop	{r4, pc}
 8011e72:	bf00      	nop
 8011e74:	08012e9d 	.word	0x08012e9d
 8011e78:	08012ebf 	.word	0x08012ebf
 8011e7c:	08012ef7 	.word	0x08012ef7
 8011e80:	08012f1b 	.word	0x08012f1b

08011e84 <_cleanup_r>:
 8011e84:	4901      	ldr	r1, [pc, #4]	; (8011e8c <_cleanup_r+0x8>)
 8011e86:	f000 b8c1 	b.w	801200c <_fwalk_reent>
 8011e8a:	bf00      	nop
 8011e8c:	08011dc5 	.word	0x08011dc5

08011e90 <__sfmoreglue>:
 8011e90:	b570      	push	{r4, r5, r6, lr}
 8011e92:	1e4a      	subs	r2, r1, #1
 8011e94:	2568      	movs	r5, #104	; 0x68
 8011e96:	4355      	muls	r5, r2
 8011e98:	460e      	mov	r6, r1
 8011e9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011e9e:	f7fe fa1b 	bl	80102d8 <_malloc_r>
 8011ea2:	4604      	mov	r4, r0
 8011ea4:	b140      	cbz	r0, 8011eb8 <__sfmoreglue+0x28>
 8011ea6:	2100      	movs	r1, #0
 8011ea8:	e9c0 1600 	strd	r1, r6, [r0]
 8011eac:	300c      	adds	r0, #12
 8011eae:	60a0      	str	r0, [r4, #8]
 8011eb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011eb4:	f7fe f9b8 	bl	8010228 <memset>
 8011eb8:	4620      	mov	r0, r4
 8011eba:	bd70      	pop	{r4, r5, r6, pc}

08011ebc <__sfp_lock_acquire>:
 8011ebc:	4801      	ldr	r0, [pc, #4]	; (8011ec4 <__sfp_lock_acquire+0x8>)
 8011ebe:	f000 b8ca 	b.w	8012056 <__retarget_lock_acquire_recursive>
 8011ec2:	bf00      	nop
 8011ec4:	20040f50 	.word	0x20040f50

08011ec8 <__sfp_lock_release>:
 8011ec8:	4801      	ldr	r0, [pc, #4]	; (8011ed0 <__sfp_lock_release+0x8>)
 8011eca:	f000 b8c5 	b.w	8012058 <__retarget_lock_release_recursive>
 8011ece:	bf00      	nop
 8011ed0:	20040f50 	.word	0x20040f50

08011ed4 <__sinit_lock_acquire>:
 8011ed4:	4801      	ldr	r0, [pc, #4]	; (8011edc <__sinit_lock_acquire+0x8>)
 8011ed6:	f000 b8be 	b.w	8012056 <__retarget_lock_acquire_recursive>
 8011eda:	bf00      	nop
 8011edc:	20040f4b 	.word	0x20040f4b

08011ee0 <__sinit_lock_release>:
 8011ee0:	4801      	ldr	r0, [pc, #4]	; (8011ee8 <__sinit_lock_release+0x8>)
 8011ee2:	f000 b8b9 	b.w	8012058 <__retarget_lock_release_recursive>
 8011ee6:	bf00      	nop
 8011ee8:	20040f4b 	.word	0x20040f4b

08011eec <__sinit>:
 8011eec:	b510      	push	{r4, lr}
 8011eee:	4604      	mov	r4, r0
 8011ef0:	f7ff fff0 	bl	8011ed4 <__sinit_lock_acquire>
 8011ef4:	69a3      	ldr	r3, [r4, #24]
 8011ef6:	b11b      	cbz	r3, 8011f00 <__sinit+0x14>
 8011ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011efc:	f7ff bff0 	b.w	8011ee0 <__sinit_lock_release>
 8011f00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011f04:	6523      	str	r3, [r4, #80]	; 0x50
 8011f06:	4b13      	ldr	r3, [pc, #76]	; (8011f54 <__sinit+0x68>)
 8011f08:	4a13      	ldr	r2, [pc, #76]	; (8011f58 <__sinit+0x6c>)
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8011f0e:	42a3      	cmp	r3, r4
 8011f10:	bf04      	itt	eq
 8011f12:	2301      	moveq	r3, #1
 8011f14:	61a3      	streq	r3, [r4, #24]
 8011f16:	4620      	mov	r0, r4
 8011f18:	f000 f820 	bl	8011f5c <__sfp>
 8011f1c:	6060      	str	r0, [r4, #4]
 8011f1e:	4620      	mov	r0, r4
 8011f20:	f000 f81c 	bl	8011f5c <__sfp>
 8011f24:	60a0      	str	r0, [r4, #8]
 8011f26:	4620      	mov	r0, r4
 8011f28:	f000 f818 	bl	8011f5c <__sfp>
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	60e0      	str	r0, [r4, #12]
 8011f30:	2104      	movs	r1, #4
 8011f32:	6860      	ldr	r0, [r4, #4]
 8011f34:	f7ff ff82 	bl	8011e3c <std>
 8011f38:	68a0      	ldr	r0, [r4, #8]
 8011f3a:	2201      	movs	r2, #1
 8011f3c:	2109      	movs	r1, #9
 8011f3e:	f7ff ff7d 	bl	8011e3c <std>
 8011f42:	68e0      	ldr	r0, [r4, #12]
 8011f44:	2202      	movs	r2, #2
 8011f46:	2112      	movs	r1, #18
 8011f48:	f7ff ff78 	bl	8011e3c <std>
 8011f4c:	2301      	movs	r3, #1
 8011f4e:	61a3      	str	r3, [r4, #24]
 8011f50:	e7d2      	b.n	8011ef8 <__sinit+0xc>
 8011f52:	bf00      	nop
 8011f54:	08015694 	.word	0x08015694
 8011f58:	08011e85 	.word	0x08011e85

08011f5c <__sfp>:
 8011f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f5e:	4607      	mov	r7, r0
 8011f60:	f7ff ffac 	bl	8011ebc <__sfp_lock_acquire>
 8011f64:	4b1e      	ldr	r3, [pc, #120]	; (8011fe0 <__sfp+0x84>)
 8011f66:	681e      	ldr	r6, [r3, #0]
 8011f68:	69b3      	ldr	r3, [r6, #24]
 8011f6a:	b913      	cbnz	r3, 8011f72 <__sfp+0x16>
 8011f6c:	4630      	mov	r0, r6
 8011f6e:	f7ff ffbd 	bl	8011eec <__sinit>
 8011f72:	3648      	adds	r6, #72	; 0x48
 8011f74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011f78:	3b01      	subs	r3, #1
 8011f7a:	d503      	bpl.n	8011f84 <__sfp+0x28>
 8011f7c:	6833      	ldr	r3, [r6, #0]
 8011f7e:	b30b      	cbz	r3, 8011fc4 <__sfp+0x68>
 8011f80:	6836      	ldr	r6, [r6, #0]
 8011f82:	e7f7      	b.n	8011f74 <__sfp+0x18>
 8011f84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011f88:	b9d5      	cbnz	r5, 8011fc0 <__sfp+0x64>
 8011f8a:	4b16      	ldr	r3, [pc, #88]	; (8011fe4 <__sfp+0x88>)
 8011f8c:	60e3      	str	r3, [r4, #12]
 8011f8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011f92:	6665      	str	r5, [r4, #100]	; 0x64
 8011f94:	f000 f85e 	bl	8012054 <__retarget_lock_init_recursive>
 8011f98:	f7ff ff96 	bl	8011ec8 <__sfp_lock_release>
 8011f9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011fa0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011fa4:	6025      	str	r5, [r4, #0]
 8011fa6:	61a5      	str	r5, [r4, #24]
 8011fa8:	2208      	movs	r2, #8
 8011faa:	4629      	mov	r1, r5
 8011fac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011fb0:	f7fe f93a 	bl	8010228 <memset>
 8011fb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011fb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011fbc:	4620      	mov	r0, r4
 8011fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fc0:	3468      	adds	r4, #104	; 0x68
 8011fc2:	e7d9      	b.n	8011f78 <__sfp+0x1c>
 8011fc4:	2104      	movs	r1, #4
 8011fc6:	4638      	mov	r0, r7
 8011fc8:	f7ff ff62 	bl	8011e90 <__sfmoreglue>
 8011fcc:	4604      	mov	r4, r0
 8011fce:	6030      	str	r0, [r6, #0]
 8011fd0:	2800      	cmp	r0, #0
 8011fd2:	d1d5      	bne.n	8011f80 <__sfp+0x24>
 8011fd4:	f7ff ff78 	bl	8011ec8 <__sfp_lock_release>
 8011fd8:	230c      	movs	r3, #12
 8011fda:	603b      	str	r3, [r7, #0]
 8011fdc:	e7ee      	b.n	8011fbc <__sfp+0x60>
 8011fde:	bf00      	nop
 8011fe0:	08015694 	.word	0x08015694
 8011fe4:	ffff0001 	.word	0xffff0001

08011fe8 <fiprintf>:
 8011fe8:	b40e      	push	{r1, r2, r3}
 8011fea:	b503      	push	{r0, r1, lr}
 8011fec:	4601      	mov	r1, r0
 8011fee:	ab03      	add	r3, sp, #12
 8011ff0:	4805      	ldr	r0, [pc, #20]	; (8012008 <fiprintf+0x20>)
 8011ff2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ff6:	6800      	ldr	r0, [r0, #0]
 8011ff8:	9301      	str	r3, [sp, #4]
 8011ffa:	f000 fdd7 	bl	8012bac <_vfiprintf_r>
 8011ffe:	b002      	add	sp, #8
 8012000:	f85d eb04 	ldr.w	lr, [sp], #4
 8012004:	b003      	add	sp, #12
 8012006:	4770      	bx	lr
 8012008:	2000002c 	.word	0x2000002c

0801200c <_fwalk_reent>:
 801200c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012010:	4606      	mov	r6, r0
 8012012:	4688      	mov	r8, r1
 8012014:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012018:	2700      	movs	r7, #0
 801201a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801201e:	f1b9 0901 	subs.w	r9, r9, #1
 8012022:	d505      	bpl.n	8012030 <_fwalk_reent+0x24>
 8012024:	6824      	ldr	r4, [r4, #0]
 8012026:	2c00      	cmp	r4, #0
 8012028:	d1f7      	bne.n	801201a <_fwalk_reent+0xe>
 801202a:	4638      	mov	r0, r7
 801202c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012030:	89ab      	ldrh	r3, [r5, #12]
 8012032:	2b01      	cmp	r3, #1
 8012034:	d907      	bls.n	8012046 <_fwalk_reent+0x3a>
 8012036:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801203a:	3301      	adds	r3, #1
 801203c:	d003      	beq.n	8012046 <_fwalk_reent+0x3a>
 801203e:	4629      	mov	r1, r5
 8012040:	4630      	mov	r0, r6
 8012042:	47c0      	blx	r8
 8012044:	4307      	orrs	r7, r0
 8012046:	3568      	adds	r5, #104	; 0x68
 8012048:	e7e9      	b.n	801201e <_fwalk_reent+0x12>
	...

0801204c <_localeconv_r>:
 801204c:	4800      	ldr	r0, [pc, #0]	; (8012050 <_localeconv_r+0x4>)
 801204e:	4770      	bx	lr
 8012050:	20000180 	.word	0x20000180

08012054 <__retarget_lock_init_recursive>:
 8012054:	4770      	bx	lr

08012056 <__retarget_lock_acquire_recursive>:
 8012056:	4770      	bx	lr

08012058 <__retarget_lock_release_recursive>:
 8012058:	4770      	bx	lr

0801205a <__swhatbuf_r>:
 801205a:	b570      	push	{r4, r5, r6, lr}
 801205c:	460e      	mov	r6, r1
 801205e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012062:	2900      	cmp	r1, #0
 8012064:	b096      	sub	sp, #88	; 0x58
 8012066:	4614      	mov	r4, r2
 8012068:	461d      	mov	r5, r3
 801206a:	da07      	bge.n	801207c <__swhatbuf_r+0x22>
 801206c:	2300      	movs	r3, #0
 801206e:	602b      	str	r3, [r5, #0]
 8012070:	89b3      	ldrh	r3, [r6, #12]
 8012072:	061a      	lsls	r2, r3, #24
 8012074:	d410      	bmi.n	8012098 <__swhatbuf_r+0x3e>
 8012076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801207a:	e00e      	b.n	801209a <__swhatbuf_r+0x40>
 801207c:	466a      	mov	r2, sp
 801207e:	f000 ff7b 	bl	8012f78 <_fstat_r>
 8012082:	2800      	cmp	r0, #0
 8012084:	dbf2      	blt.n	801206c <__swhatbuf_r+0x12>
 8012086:	9a01      	ldr	r2, [sp, #4]
 8012088:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801208c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012090:	425a      	negs	r2, r3
 8012092:	415a      	adcs	r2, r3
 8012094:	602a      	str	r2, [r5, #0]
 8012096:	e7ee      	b.n	8012076 <__swhatbuf_r+0x1c>
 8012098:	2340      	movs	r3, #64	; 0x40
 801209a:	2000      	movs	r0, #0
 801209c:	6023      	str	r3, [r4, #0]
 801209e:	b016      	add	sp, #88	; 0x58
 80120a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080120a4 <__smakebuf_r>:
 80120a4:	898b      	ldrh	r3, [r1, #12]
 80120a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80120a8:	079d      	lsls	r5, r3, #30
 80120aa:	4606      	mov	r6, r0
 80120ac:	460c      	mov	r4, r1
 80120ae:	d507      	bpl.n	80120c0 <__smakebuf_r+0x1c>
 80120b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80120b4:	6023      	str	r3, [r4, #0]
 80120b6:	6123      	str	r3, [r4, #16]
 80120b8:	2301      	movs	r3, #1
 80120ba:	6163      	str	r3, [r4, #20]
 80120bc:	b002      	add	sp, #8
 80120be:	bd70      	pop	{r4, r5, r6, pc}
 80120c0:	ab01      	add	r3, sp, #4
 80120c2:	466a      	mov	r2, sp
 80120c4:	f7ff ffc9 	bl	801205a <__swhatbuf_r>
 80120c8:	9900      	ldr	r1, [sp, #0]
 80120ca:	4605      	mov	r5, r0
 80120cc:	4630      	mov	r0, r6
 80120ce:	f7fe f903 	bl	80102d8 <_malloc_r>
 80120d2:	b948      	cbnz	r0, 80120e8 <__smakebuf_r+0x44>
 80120d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120d8:	059a      	lsls	r2, r3, #22
 80120da:	d4ef      	bmi.n	80120bc <__smakebuf_r+0x18>
 80120dc:	f023 0303 	bic.w	r3, r3, #3
 80120e0:	f043 0302 	orr.w	r3, r3, #2
 80120e4:	81a3      	strh	r3, [r4, #12]
 80120e6:	e7e3      	b.n	80120b0 <__smakebuf_r+0xc>
 80120e8:	4b0d      	ldr	r3, [pc, #52]	; (8012120 <__smakebuf_r+0x7c>)
 80120ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80120ec:	89a3      	ldrh	r3, [r4, #12]
 80120ee:	6020      	str	r0, [r4, #0]
 80120f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120f4:	81a3      	strh	r3, [r4, #12]
 80120f6:	9b00      	ldr	r3, [sp, #0]
 80120f8:	6163      	str	r3, [r4, #20]
 80120fa:	9b01      	ldr	r3, [sp, #4]
 80120fc:	6120      	str	r0, [r4, #16]
 80120fe:	b15b      	cbz	r3, 8012118 <__smakebuf_r+0x74>
 8012100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012104:	4630      	mov	r0, r6
 8012106:	f000 ff49 	bl	8012f9c <_isatty_r>
 801210a:	b128      	cbz	r0, 8012118 <__smakebuf_r+0x74>
 801210c:	89a3      	ldrh	r3, [r4, #12]
 801210e:	f023 0303 	bic.w	r3, r3, #3
 8012112:	f043 0301 	orr.w	r3, r3, #1
 8012116:	81a3      	strh	r3, [r4, #12]
 8012118:	89a0      	ldrh	r0, [r4, #12]
 801211a:	4305      	orrs	r5, r0
 801211c:	81a5      	strh	r5, [r4, #12]
 801211e:	e7cd      	b.n	80120bc <__smakebuf_r+0x18>
 8012120:	08011e85 	.word	0x08011e85

08012124 <__malloc_lock>:
 8012124:	4801      	ldr	r0, [pc, #4]	; (801212c <__malloc_lock+0x8>)
 8012126:	f7ff bf96 	b.w	8012056 <__retarget_lock_acquire_recursive>
 801212a:	bf00      	nop
 801212c:	20040f4c 	.word	0x20040f4c

08012130 <__malloc_unlock>:
 8012130:	4801      	ldr	r0, [pc, #4]	; (8012138 <__malloc_unlock+0x8>)
 8012132:	f7ff bf91 	b.w	8012058 <__retarget_lock_release_recursive>
 8012136:	bf00      	nop
 8012138:	20040f4c 	.word	0x20040f4c

0801213c <_Balloc>:
 801213c:	b570      	push	{r4, r5, r6, lr}
 801213e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012140:	4604      	mov	r4, r0
 8012142:	460d      	mov	r5, r1
 8012144:	b976      	cbnz	r6, 8012164 <_Balloc+0x28>
 8012146:	2010      	movs	r0, #16
 8012148:	f7fe f858 	bl	80101fc <malloc>
 801214c:	4602      	mov	r2, r0
 801214e:	6260      	str	r0, [r4, #36]	; 0x24
 8012150:	b920      	cbnz	r0, 801215c <_Balloc+0x20>
 8012152:	4b18      	ldr	r3, [pc, #96]	; (80121b4 <_Balloc+0x78>)
 8012154:	4818      	ldr	r0, [pc, #96]	; (80121b8 <_Balloc+0x7c>)
 8012156:	2166      	movs	r1, #102	; 0x66
 8012158:	f7fe ff16 	bl	8010f88 <__assert_func>
 801215c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012160:	6006      	str	r6, [r0, #0]
 8012162:	60c6      	str	r6, [r0, #12]
 8012164:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012166:	68f3      	ldr	r3, [r6, #12]
 8012168:	b183      	cbz	r3, 801218c <_Balloc+0x50>
 801216a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801216c:	68db      	ldr	r3, [r3, #12]
 801216e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012172:	b9b8      	cbnz	r0, 80121a4 <_Balloc+0x68>
 8012174:	2101      	movs	r1, #1
 8012176:	fa01 f605 	lsl.w	r6, r1, r5
 801217a:	1d72      	adds	r2, r6, #5
 801217c:	0092      	lsls	r2, r2, #2
 801217e:	4620      	mov	r0, r4
 8012180:	f000 fb5a 	bl	8012838 <_calloc_r>
 8012184:	b160      	cbz	r0, 80121a0 <_Balloc+0x64>
 8012186:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801218a:	e00e      	b.n	80121aa <_Balloc+0x6e>
 801218c:	2221      	movs	r2, #33	; 0x21
 801218e:	2104      	movs	r1, #4
 8012190:	4620      	mov	r0, r4
 8012192:	f000 fb51 	bl	8012838 <_calloc_r>
 8012196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012198:	60f0      	str	r0, [r6, #12]
 801219a:	68db      	ldr	r3, [r3, #12]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d1e4      	bne.n	801216a <_Balloc+0x2e>
 80121a0:	2000      	movs	r0, #0
 80121a2:	bd70      	pop	{r4, r5, r6, pc}
 80121a4:	6802      	ldr	r2, [r0, #0]
 80121a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80121aa:	2300      	movs	r3, #0
 80121ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80121b0:	e7f7      	b.n	80121a2 <_Balloc+0x66>
 80121b2:	bf00      	nop
 80121b4:	08015715 	.word	0x08015715
 80121b8:	080157fc 	.word	0x080157fc

080121bc <_Bfree>:
 80121bc:	b570      	push	{r4, r5, r6, lr}
 80121be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80121c0:	4605      	mov	r5, r0
 80121c2:	460c      	mov	r4, r1
 80121c4:	b976      	cbnz	r6, 80121e4 <_Bfree+0x28>
 80121c6:	2010      	movs	r0, #16
 80121c8:	f7fe f818 	bl	80101fc <malloc>
 80121cc:	4602      	mov	r2, r0
 80121ce:	6268      	str	r0, [r5, #36]	; 0x24
 80121d0:	b920      	cbnz	r0, 80121dc <_Bfree+0x20>
 80121d2:	4b09      	ldr	r3, [pc, #36]	; (80121f8 <_Bfree+0x3c>)
 80121d4:	4809      	ldr	r0, [pc, #36]	; (80121fc <_Bfree+0x40>)
 80121d6:	218a      	movs	r1, #138	; 0x8a
 80121d8:	f7fe fed6 	bl	8010f88 <__assert_func>
 80121dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80121e0:	6006      	str	r6, [r0, #0]
 80121e2:	60c6      	str	r6, [r0, #12]
 80121e4:	b13c      	cbz	r4, 80121f6 <_Bfree+0x3a>
 80121e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80121e8:	6862      	ldr	r2, [r4, #4]
 80121ea:	68db      	ldr	r3, [r3, #12]
 80121ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80121f0:	6021      	str	r1, [r4, #0]
 80121f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80121f6:	bd70      	pop	{r4, r5, r6, pc}
 80121f8:	08015715 	.word	0x08015715
 80121fc:	080157fc 	.word	0x080157fc

08012200 <__multadd>:
 8012200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012204:	690e      	ldr	r6, [r1, #16]
 8012206:	4607      	mov	r7, r0
 8012208:	4698      	mov	r8, r3
 801220a:	460c      	mov	r4, r1
 801220c:	f101 0014 	add.w	r0, r1, #20
 8012210:	2300      	movs	r3, #0
 8012212:	6805      	ldr	r5, [r0, #0]
 8012214:	b2a9      	uxth	r1, r5
 8012216:	fb02 8101 	mla	r1, r2, r1, r8
 801221a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801221e:	0c2d      	lsrs	r5, r5, #16
 8012220:	fb02 c505 	mla	r5, r2, r5, ip
 8012224:	b289      	uxth	r1, r1
 8012226:	3301      	adds	r3, #1
 8012228:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801222c:	429e      	cmp	r6, r3
 801222e:	f840 1b04 	str.w	r1, [r0], #4
 8012232:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012236:	dcec      	bgt.n	8012212 <__multadd+0x12>
 8012238:	f1b8 0f00 	cmp.w	r8, #0
 801223c:	d022      	beq.n	8012284 <__multadd+0x84>
 801223e:	68a3      	ldr	r3, [r4, #8]
 8012240:	42b3      	cmp	r3, r6
 8012242:	dc19      	bgt.n	8012278 <__multadd+0x78>
 8012244:	6861      	ldr	r1, [r4, #4]
 8012246:	4638      	mov	r0, r7
 8012248:	3101      	adds	r1, #1
 801224a:	f7ff ff77 	bl	801213c <_Balloc>
 801224e:	4605      	mov	r5, r0
 8012250:	b928      	cbnz	r0, 801225e <__multadd+0x5e>
 8012252:	4602      	mov	r2, r0
 8012254:	4b0d      	ldr	r3, [pc, #52]	; (801228c <__multadd+0x8c>)
 8012256:	480e      	ldr	r0, [pc, #56]	; (8012290 <__multadd+0x90>)
 8012258:	21b5      	movs	r1, #181	; 0xb5
 801225a:	f7fe fe95 	bl	8010f88 <__assert_func>
 801225e:	6922      	ldr	r2, [r4, #16]
 8012260:	3202      	adds	r2, #2
 8012262:	f104 010c 	add.w	r1, r4, #12
 8012266:	0092      	lsls	r2, r2, #2
 8012268:	300c      	adds	r0, #12
 801226a:	f7fd ffcf 	bl	801020c <memcpy>
 801226e:	4621      	mov	r1, r4
 8012270:	4638      	mov	r0, r7
 8012272:	f7ff ffa3 	bl	80121bc <_Bfree>
 8012276:	462c      	mov	r4, r5
 8012278:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801227c:	3601      	adds	r6, #1
 801227e:	f8c3 8014 	str.w	r8, [r3, #20]
 8012282:	6126      	str	r6, [r4, #16]
 8012284:	4620      	mov	r0, r4
 8012286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801228a:	bf00      	nop
 801228c:	0801578b 	.word	0x0801578b
 8012290:	080157fc 	.word	0x080157fc

08012294 <__hi0bits>:
 8012294:	0c03      	lsrs	r3, r0, #16
 8012296:	041b      	lsls	r3, r3, #16
 8012298:	b9d3      	cbnz	r3, 80122d0 <__hi0bits+0x3c>
 801229a:	0400      	lsls	r0, r0, #16
 801229c:	2310      	movs	r3, #16
 801229e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80122a2:	bf04      	itt	eq
 80122a4:	0200      	lsleq	r0, r0, #8
 80122a6:	3308      	addeq	r3, #8
 80122a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80122ac:	bf04      	itt	eq
 80122ae:	0100      	lsleq	r0, r0, #4
 80122b0:	3304      	addeq	r3, #4
 80122b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80122b6:	bf04      	itt	eq
 80122b8:	0080      	lsleq	r0, r0, #2
 80122ba:	3302      	addeq	r3, #2
 80122bc:	2800      	cmp	r0, #0
 80122be:	db05      	blt.n	80122cc <__hi0bits+0x38>
 80122c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80122c4:	f103 0301 	add.w	r3, r3, #1
 80122c8:	bf08      	it	eq
 80122ca:	2320      	moveq	r3, #32
 80122cc:	4618      	mov	r0, r3
 80122ce:	4770      	bx	lr
 80122d0:	2300      	movs	r3, #0
 80122d2:	e7e4      	b.n	801229e <__hi0bits+0xa>

080122d4 <__lo0bits>:
 80122d4:	6803      	ldr	r3, [r0, #0]
 80122d6:	f013 0207 	ands.w	r2, r3, #7
 80122da:	4601      	mov	r1, r0
 80122dc:	d00b      	beq.n	80122f6 <__lo0bits+0x22>
 80122de:	07da      	lsls	r2, r3, #31
 80122e0:	d424      	bmi.n	801232c <__lo0bits+0x58>
 80122e2:	0798      	lsls	r0, r3, #30
 80122e4:	bf49      	itett	mi
 80122e6:	085b      	lsrmi	r3, r3, #1
 80122e8:	089b      	lsrpl	r3, r3, #2
 80122ea:	2001      	movmi	r0, #1
 80122ec:	600b      	strmi	r3, [r1, #0]
 80122ee:	bf5c      	itt	pl
 80122f0:	600b      	strpl	r3, [r1, #0]
 80122f2:	2002      	movpl	r0, #2
 80122f4:	4770      	bx	lr
 80122f6:	b298      	uxth	r0, r3
 80122f8:	b9b0      	cbnz	r0, 8012328 <__lo0bits+0x54>
 80122fa:	0c1b      	lsrs	r3, r3, #16
 80122fc:	2010      	movs	r0, #16
 80122fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012302:	bf04      	itt	eq
 8012304:	0a1b      	lsreq	r3, r3, #8
 8012306:	3008      	addeq	r0, #8
 8012308:	071a      	lsls	r2, r3, #28
 801230a:	bf04      	itt	eq
 801230c:	091b      	lsreq	r3, r3, #4
 801230e:	3004      	addeq	r0, #4
 8012310:	079a      	lsls	r2, r3, #30
 8012312:	bf04      	itt	eq
 8012314:	089b      	lsreq	r3, r3, #2
 8012316:	3002      	addeq	r0, #2
 8012318:	07da      	lsls	r2, r3, #31
 801231a:	d403      	bmi.n	8012324 <__lo0bits+0x50>
 801231c:	085b      	lsrs	r3, r3, #1
 801231e:	f100 0001 	add.w	r0, r0, #1
 8012322:	d005      	beq.n	8012330 <__lo0bits+0x5c>
 8012324:	600b      	str	r3, [r1, #0]
 8012326:	4770      	bx	lr
 8012328:	4610      	mov	r0, r2
 801232a:	e7e8      	b.n	80122fe <__lo0bits+0x2a>
 801232c:	2000      	movs	r0, #0
 801232e:	4770      	bx	lr
 8012330:	2020      	movs	r0, #32
 8012332:	4770      	bx	lr

08012334 <__i2b>:
 8012334:	b510      	push	{r4, lr}
 8012336:	460c      	mov	r4, r1
 8012338:	2101      	movs	r1, #1
 801233a:	f7ff feff 	bl	801213c <_Balloc>
 801233e:	4602      	mov	r2, r0
 8012340:	b928      	cbnz	r0, 801234e <__i2b+0x1a>
 8012342:	4b05      	ldr	r3, [pc, #20]	; (8012358 <__i2b+0x24>)
 8012344:	4805      	ldr	r0, [pc, #20]	; (801235c <__i2b+0x28>)
 8012346:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801234a:	f7fe fe1d 	bl	8010f88 <__assert_func>
 801234e:	2301      	movs	r3, #1
 8012350:	6144      	str	r4, [r0, #20]
 8012352:	6103      	str	r3, [r0, #16]
 8012354:	bd10      	pop	{r4, pc}
 8012356:	bf00      	nop
 8012358:	0801578b 	.word	0x0801578b
 801235c:	080157fc 	.word	0x080157fc

08012360 <__multiply>:
 8012360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012364:	4614      	mov	r4, r2
 8012366:	690a      	ldr	r2, [r1, #16]
 8012368:	6923      	ldr	r3, [r4, #16]
 801236a:	429a      	cmp	r2, r3
 801236c:	bfb8      	it	lt
 801236e:	460b      	movlt	r3, r1
 8012370:	460d      	mov	r5, r1
 8012372:	bfbc      	itt	lt
 8012374:	4625      	movlt	r5, r4
 8012376:	461c      	movlt	r4, r3
 8012378:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801237c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012380:	68ab      	ldr	r3, [r5, #8]
 8012382:	6869      	ldr	r1, [r5, #4]
 8012384:	eb0a 0709 	add.w	r7, sl, r9
 8012388:	42bb      	cmp	r3, r7
 801238a:	b085      	sub	sp, #20
 801238c:	bfb8      	it	lt
 801238e:	3101      	addlt	r1, #1
 8012390:	f7ff fed4 	bl	801213c <_Balloc>
 8012394:	b930      	cbnz	r0, 80123a4 <__multiply+0x44>
 8012396:	4602      	mov	r2, r0
 8012398:	4b42      	ldr	r3, [pc, #264]	; (80124a4 <__multiply+0x144>)
 801239a:	4843      	ldr	r0, [pc, #268]	; (80124a8 <__multiply+0x148>)
 801239c:	f240 115d 	movw	r1, #349	; 0x15d
 80123a0:	f7fe fdf2 	bl	8010f88 <__assert_func>
 80123a4:	f100 0614 	add.w	r6, r0, #20
 80123a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80123ac:	4633      	mov	r3, r6
 80123ae:	2200      	movs	r2, #0
 80123b0:	4543      	cmp	r3, r8
 80123b2:	d31e      	bcc.n	80123f2 <__multiply+0x92>
 80123b4:	f105 0c14 	add.w	ip, r5, #20
 80123b8:	f104 0314 	add.w	r3, r4, #20
 80123bc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80123c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80123c4:	9202      	str	r2, [sp, #8]
 80123c6:	ebac 0205 	sub.w	r2, ip, r5
 80123ca:	3a15      	subs	r2, #21
 80123cc:	f022 0203 	bic.w	r2, r2, #3
 80123d0:	3204      	adds	r2, #4
 80123d2:	f105 0115 	add.w	r1, r5, #21
 80123d6:	458c      	cmp	ip, r1
 80123d8:	bf38      	it	cc
 80123da:	2204      	movcc	r2, #4
 80123dc:	9201      	str	r2, [sp, #4]
 80123de:	9a02      	ldr	r2, [sp, #8]
 80123e0:	9303      	str	r3, [sp, #12]
 80123e2:	429a      	cmp	r2, r3
 80123e4:	d808      	bhi.n	80123f8 <__multiply+0x98>
 80123e6:	2f00      	cmp	r7, #0
 80123e8:	dc55      	bgt.n	8012496 <__multiply+0x136>
 80123ea:	6107      	str	r7, [r0, #16]
 80123ec:	b005      	add	sp, #20
 80123ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123f2:	f843 2b04 	str.w	r2, [r3], #4
 80123f6:	e7db      	b.n	80123b0 <__multiply+0x50>
 80123f8:	f8b3 a000 	ldrh.w	sl, [r3]
 80123fc:	f1ba 0f00 	cmp.w	sl, #0
 8012400:	d020      	beq.n	8012444 <__multiply+0xe4>
 8012402:	f105 0e14 	add.w	lr, r5, #20
 8012406:	46b1      	mov	r9, r6
 8012408:	2200      	movs	r2, #0
 801240a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801240e:	f8d9 b000 	ldr.w	fp, [r9]
 8012412:	b2a1      	uxth	r1, r4
 8012414:	fa1f fb8b 	uxth.w	fp, fp
 8012418:	fb0a b101 	mla	r1, sl, r1, fp
 801241c:	4411      	add	r1, r2
 801241e:	f8d9 2000 	ldr.w	r2, [r9]
 8012422:	0c24      	lsrs	r4, r4, #16
 8012424:	0c12      	lsrs	r2, r2, #16
 8012426:	fb0a 2404 	mla	r4, sl, r4, r2
 801242a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801242e:	b289      	uxth	r1, r1
 8012430:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012434:	45f4      	cmp	ip, lr
 8012436:	f849 1b04 	str.w	r1, [r9], #4
 801243a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801243e:	d8e4      	bhi.n	801240a <__multiply+0xaa>
 8012440:	9901      	ldr	r1, [sp, #4]
 8012442:	5072      	str	r2, [r6, r1]
 8012444:	9a03      	ldr	r2, [sp, #12]
 8012446:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801244a:	3304      	adds	r3, #4
 801244c:	f1b9 0f00 	cmp.w	r9, #0
 8012450:	d01f      	beq.n	8012492 <__multiply+0x132>
 8012452:	6834      	ldr	r4, [r6, #0]
 8012454:	f105 0114 	add.w	r1, r5, #20
 8012458:	46b6      	mov	lr, r6
 801245a:	f04f 0a00 	mov.w	sl, #0
 801245e:	880a      	ldrh	r2, [r1, #0]
 8012460:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012464:	fb09 b202 	mla	r2, r9, r2, fp
 8012468:	4492      	add	sl, r2
 801246a:	b2a4      	uxth	r4, r4
 801246c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012470:	f84e 4b04 	str.w	r4, [lr], #4
 8012474:	f851 4b04 	ldr.w	r4, [r1], #4
 8012478:	f8be 2000 	ldrh.w	r2, [lr]
 801247c:	0c24      	lsrs	r4, r4, #16
 801247e:	fb09 2404 	mla	r4, r9, r4, r2
 8012482:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012486:	458c      	cmp	ip, r1
 8012488:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801248c:	d8e7      	bhi.n	801245e <__multiply+0xfe>
 801248e:	9a01      	ldr	r2, [sp, #4]
 8012490:	50b4      	str	r4, [r6, r2]
 8012492:	3604      	adds	r6, #4
 8012494:	e7a3      	b.n	80123de <__multiply+0x7e>
 8012496:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801249a:	2b00      	cmp	r3, #0
 801249c:	d1a5      	bne.n	80123ea <__multiply+0x8a>
 801249e:	3f01      	subs	r7, #1
 80124a0:	e7a1      	b.n	80123e6 <__multiply+0x86>
 80124a2:	bf00      	nop
 80124a4:	0801578b 	.word	0x0801578b
 80124a8:	080157fc 	.word	0x080157fc

080124ac <__pow5mult>:
 80124ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124b0:	4615      	mov	r5, r2
 80124b2:	f012 0203 	ands.w	r2, r2, #3
 80124b6:	4606      	mov	r6, r0
 80124b8:	460f      	mov	r7, r1
 80124ba:	d007      	beq.n	80124cc <__pow5mult+0x20>
 80124bc:	4c25      	ldr	r4, [pc, #148]	; (8012554 <__pow5mult+0xa8>)
 80124be:	3a01      	subs	r2, #1
 80124c0:	2300      	movs	r3, #0
 80124c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80124c6:	f7ff fe9b 	bl	8012200 <__multadd>
 80124ca:	4607      	mov	r7, r0
 80124cc:	10ad      	asrs	r5, r5, #2
 80124ce:	d03d      	beq.n	801254c <__pow5mult+0xa0>
 80124d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80124d2:	b97c      	cbnz	r4, 80124f4 <__pow5mult+0x48>
 80124d4:	2010      	movs	r0, #16
 80124d6:	f7fd fe91 	bl	80101fc <malloc>
 80124da:	4602      	mov	r2, r0
 80124dc:	6270      	str	r0, [r6, #36]	; 0x24
 80124de:	b928      	cbnz	r0, 80124ec <__pow5mult+0x40>
 80124e0:	4b1d      	ldr	r3, [pc, #116]	; (8012558 <__pow5mult+0xac>)
 80124e2:	481e      	ldr	r0, [pc, #120]	; (801255c <__pow5mult+0xb0>)
 80124e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80124e8:	f7fe fd4e 	bl	8010f88 <__assert_func>
 80124ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80124f0:	6004      	str	r4, [r0, #0]
 80124f2:	60c4      	str	r4, [r0, #12]
 80124f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80124f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80124fc:	b94c      	cbnz	r4, 8012512 <__pow5mult+0x66>
 80124fe:	f240 2171 	movw	r1, #625	; 0x271
 8012502:	4630      	mov	r0, r6
 8012504:	f7ff ff16 	bl	8012334 <__i2b>
 8012508:	2300      	movs	r3, #0
 801250a:	f8c8 0008 	str.w	r0, [r8, #8]
 801250e:	4604      	mov	r4, r0
 8012510:	6003      	str	r3, [r0, #0]
 8012512:	f04f 0900 	mov.w	r9, #0
 8012516:	07eb      	lsls	r3, r5, #31
 8012518:	d50a      	bpl.n	8012530 <__pow5mult+0x84>
 801251a:	4639      	mov	r1, r7
 801251c:	4622      	mov	r2, r4
 801251e:	4630      	mov	r0, r6
 8012520:	f7ff ff1e 	bl	8012360 <__multiply>
 8012524:	4639      	mov	r1, r7
 8012526:	4680      	mov	r8, r0
 8012528:	4630      	mov	r0, r6
 801252a:	f7ff fe47 	bl	80121bc <_Bfree>
 801252e:	4647      	mov	r7, r8
 8012530:	106d      	asrs	r5, r5, #1
 8012532:	d00b      	beq.n	801254c <__pow5mult+0xa0>
 8012534:	6820      	ldr	r0, [r4, #0]
 8012536:	b938      	cbnz	r0, 8012548 <__pow5mult+0x9c>
 8012538:	4622      	mov	r2, r4
 801253a:	4621      	mov	r1, r4
 801253c:	4630      	mov	r0, r6
 801253e:	f7ff ff0f 	bl	8012360 <__multiply>
 8012542:	6020      	str	r0, [r4, #0]
 8012544:	f8c0 9000 	str.w	r9, [r0]
 8012548:	4604      	mov	r4, r0
 801254a:	e7e4      	b.n	8012516 <__pow5mult+0x6a>
 801254c:	4638      	mov	r0, r7
 801254e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012552:	bf00      	nop
 8012554:	08015950 	.word	0x08015950
 8012558:	08015715 	.word	0x08015715
 801255c:	080157fc 	.word	0x080157fc

08012560 <__lshift>:
 8012560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012564:	460c      	mov	r4, r1
 8012566:	6849      	ldr	r1, [r1, #4]
 8012568:	6923      	ldr	r3, [r4, #16]
 801256a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801256e:	68a3      	ldr	r3, [r4, #8]
 8012570:	4607      	mov	r7, r0
 8012572:	4691      	mov	r9, r2
 8012574:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012578:	f108 0601 	add.w	r6, r8, #1
 801257c:	42b3      	cmp	r3, r6
 801257e:	db0b      	blt.n	8012598 <__lshift+0x38>
 8012580:	4638      	mov	r0, r7
 8012582:	f7ff fddb 	bl	801213c <_Balloc>
 8012586:	4605      	mov	r5, r0
 8012588:	b948      	cbnz	r0, 801259e <__lshift+0x3e>
 801258a:	4602      	mov	r2, r0
 801258c:	4b28      	ldr	r3, [pc, #160]	; (8012630 <__lshift+0xd0>)
 801258e:	4829      	ldr	r0, [pc, #164]	; (8012634 <__lshift+0xd4>)
 8012590:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012594:	f7fe fcf8 	bl	8010f88 <__assert_func>
 8012598:	3101      	adds	r1, #1
 801259a:	005b      	lsls	r3, r3, #1
 801259c:	e7ee      	b.n	801257c <__lshift+0x1c>
 801259e:	2300      	movs	r3, #0
 80125a0:	f100 0114 	add.w	r1, r0, #20
 80125a4:	f100 0210 	add.w	r2, r0, #16
 80125a8:	4618      	mov	r0, r3
 80125aa:	4553      	cmp	r3, sl
 80125ac:	db33      	blt.n	8012616 <__lshift+0xb6>
 80125ae:	6920      	ldr	r0, [r4, #16]
 80125b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80125b4:	f104 0314 	add.w	r3, r4, #20
 80125b8:	f019 091f 	ands.w	r9, r9, #31
 80125bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80125c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80125c4:	d02b      	beq.n	801261e <__lshift+0xbe>
 80125c6:	f1c9 0e20 	rsb	lr, r9, #32
 80125ca:	468a      	mov	sl, r1
 80125cc:	2200      	movs	r2, #0
 80125ce:	6818      	ldr	r0, [r3, #0]
 80125d0:	fa00 f009 	lsl.w	r0, r0, r9
 80125d4:	4302      	orrs	r2, r0
 80125d6:	f84a 2b04 	str.w	r2, [sl], #4
 80125da:	f853 2b04 	ldr.w	r2, [r3], #4
 80125de:	459c      	cmp	ip, r3
 80125e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80125e4:	d8f3      	bhi.n	80125ce <__lshift+0x6e>
 80125e6:	ebac 0304 	sub.w	r3, ip, r4
 80125ea:	3b15      	subs	r3, #21
 80125ec:	f023 0303 	bic.w	r3, r3, #3
 80125f0:	3304      	adds	r3, #4
 80125f2:	f104 0015 	add.w	r0, r4, #21
 80125f6:	4584      	cmp	ip, r0
 80125f8:	bf38      	it	cc
 80125fa:	2304      	movcc	r3, #4
 80125fc:	50ca      	str	r2, [r1, r3]
 80125fe:	b10a      	cbz	r2, 8012604 <__lshift+0xa4>
 8012600:	f108 0602 	add.w	r6, r8, #2
 8012604:	3e01      	subs	r6, #1
 8012606:	4638      	mov	r0, r7
 8012608:	612e      	str	r6, [r5, #16]
 801260a:	4621      	mov	r1, r4
 801260c:	f7ff fdd6 	bl	80121bc <_Bfree>
 8012610:	4628      	mov	r0, r5
 8012612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012616:	f842 0f04 	str.w	r0, [r2, #4]!
 801261a:	3301      	adds	r3, #1
 801261c:	e7c5      	b.n	80125aa <__lshift+0x4a>
 801261e:	3904      	subs	r1, #4
 8012620:	f853 2b04 	ldr.w	r2, [r3], #4
 8012624:	f841 2f04 	str.w	r2, [r1, #4]!
 8012628:	459c      	cmp	ip, r3
 801262a:	d8f9      	bhi.n	8012620 <__lshift+0xc0>
 801262c:	e7ea      	b.n	8012604 <__lshift+0xa4>
 801262e:	bf00      	nop
 8012630:	0801578b 	.word	0x0801578b
 8012634:	080157fc 	.word	0x080157fc

08012638 <__mcmp>:
 8012638:	b530      	push	{r4, r5, lr}
 801263a:	6902      	ldr	r2, [r0, #16]
 801263c:	690c      	ldr	r4, [r1, #16]
 801263e:	1b12      	subs	r2, r2, r4
 8012640:	d10e      	bne.n	8012660 <__mcmp+0x28>
 8012642:	f100 0314 	add.w	r3, r0, #20
 8012646:	3114      	adds	r1, #20
 8012648:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801264c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012650:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012654:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012658:	42a5      	cmp	r5, r4
 801265a:	d003      	beq.n	8012664 <__mcmp+0x2c>
 801265c:	d305      	bcc.n	801266a <__mcmp+0x32>
 801265e:	2201      	movs	r2, #1
 8012660:	4610      	mov	r0, r2
 8012662:	bd30      	pop	{r4, r5, pc}
 8012664:	4283      	cmp	r3, r0
 8012666:	d3f3      	bcc.n	8012650 <__mcmp+0x18>
 8012668:	e7fa      	b.n	8012660 <__mcmp+0x28>
 801266a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801266e:	e7f7      	b.n	8012660 <__mcmp+0x28>

08012670 <__mdiff>:
 8012670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012674:	460c      	mov	r4, r1
 8012676:	4606      	mov	r6, r0
 8012678:	4611      	mov	r1, r2
 801267a:	4620      	mov	r0, r4
 801267c:	4617      	mov	r7, r2
 801267e:	f7ff ffdb 	bl	8012638 <__mcmp>
 8012682:	1e05      	subs	r5, r0, #0
 8012684:	d110      	bne.n	80126a8 <__mdiff+0x38>
 8012686:	4629      	mov	r1, r5
 8012688:	4630      	mov	r0, r6
 801268a:	f7ff fd57 	bl	801213c <_Balloc>
 801268e:	b930      	cbnz	r0, 801269e <__mdiff+0x2e>
 8012690:	4b39      	ldr	r3, [pc, #228]	; (8012778 <__mdiff+0x108>)
 8012692:	4602      	mov	r2, r0
 8012694:	f240 2132 	movw	r1, #562	; 0x232
 8012698:	4838      	ldr	r0, [pc, #224]	; (801277c <__mdiff+0x10c>)
 801269a:	f7fe fc75 	bl	8010f88 <__assert_func>
 801269e:	2301      	movs	r3, #1
 80126a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80126a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126a8:	bfa4      	itt	ge
 80126aa:	463b      	movge	r3, r7
 80126ac:	4627      	movge	r7, r4
 80126ae:	4630      	mov	r0, r6
 80126b0:	6879      	ldr	r1, [r7, #4]
 80126b2:	bfa6      	itte	ge
 80126b4:	461c      	movge	r4, r3
 80126b6:	2500      	movge	r5, #0
 80126b8:	2501      	movlt	r5, #1
 80126ba:	f7ff fd3f 	bl	801213c <_Balloc>
 80126be:	b920      	cbnz	r0, 80126ca <__mdiff+0x5a>
 80126c0:	4b2d      	ldr	r3, [pc, #180]	; (8012778 <__mdiff+0x108>)
 80126c2:	4602      	mov	r2, r0
 80126c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80126c8:	e7e6      	b.n	8012698 <__mdiff+0x28>
 80126ca:	693e      	ldr	r6, [r7, #16]
 80126cc:	60c5      	str	r5, [r0, #12]
 80126ce:	6925      	ldr	r5, [r4, #16]
 80126d0:	f107 0114 	add.w	r1, r7, #20
 80126d4:	f104 0914 	add.w	r9, r4, #20
 80126d8:	f100 0e14 	add.w	lr, r0, #20
 80126dc:	f107 0210 	add.w	r2, r7, #16
 80126e0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80126e4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80126e8:	46f2      	mov	sl, lr
 80126ea:	2700      	movs	r7, #0
 80126ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80126f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80126f4:	fa1f f883 	uxth.w	r8, r3
 80126f8:	fa17 f78b 	uxtah	r7, r7, fp
 80126fc:	0c1b      	lsrs	r3, r3, #16
 80126fe:	eba7 0808 	sub.w	r8, r7, r8
 8012702:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012706:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801270a:	fa1f f888 	uxth.w	r8, r8
 801270e:	141f      	asrs	r7, r3, #16
 8012710:	454d      	cmp	r5, r9
 8012712:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012716:	f84a 3b04 	str.w	r3, [sl], #4
 801271a:	d8e7      	bhi.n	80126ec <__mdiff+0x7c>
 801271c:	1b2b      	subs	r3, r5, r4
 801271e:	3b15      	subs	r3, #21
 8012720:	f023 0303 	bic.w	r3, r3, #3
 8012724:	3304      	adds	r3, #4
 8012726:	3415      	adds	r4, #21
 8012728:	42a5      	cmp	r5, r4
 801272a:	bf38      	it	cc
 801272c:	2304      	movcc	r3, #4
 801272e:	4419      	add	r1, r3
 8012730:	4473      	add	r3, lr
 8012732:	469e      	mov	lr, r3
 8012734:	460d      	mov	r5, r1
 8012736:	4565      	cmp	r5, ip
 8012738:	d30e      	bcc.n	8012758 <__mdiff+0xe8>
 801273a:	f10c 0203 	add.w	r2, ip, #3
 801273e:	1a52      	subs	r2, r2, r1
 8012740:	f022 0203 	bic.w	r2, r2, #3
 8012744:	3903      	subs	r1, #3
 8012746:	458c      	cmp	ip, r1
 8012748:	bf38      	it	cc
 801274a:	2200      	movcc	r2, #0
 801274c:	441a      	add	r2, r3
 801274e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012752:	b17b      	cbz	r3, 8012774 <__mdiff+0x104>
 8012754:	6106      	str	r6, [r0, #16]
 8012756:	e7a5      	b.n	80126a4 <__mdiff+0x34>
 8012758:	f855 8b04 	ldr.w	r8, [r5], #4
 801275c:	fa17 f488 	uxtah	r4, r7, r8
 8012760:	1422      	asrs	r2, r4, #16
 8012762:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012766:	b2a4      	uxth	r4, r4
 8012768:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801276c:	f84e 4b04 	str.w	r4, [lr], #4
 8012770:	1417      	asrs	r7, r2, #16
 8012772:	e7e0      	b.n	8012736 <__mdiff+0xc6>
 8012774:	3e01      	subs	r6, #1
 8012776:	e7ea      	b.n	801274e <__mdiff+0xde>
 8012778:	0801578b 	.word	0x0801578b
 801277c:	080157fc 	.word	0x080157fc

08012780 <__d2b>:
 8012780:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012784:	4689      	mov	r9, r1
 8012786:	2101      	movs	r1, #1
 8012788:	ec57 6b10 	vmov	r6, r7, d0
 801278c:	4690      	mov	r8, r2
 801278e:	f7ff fcd5 	bl	801213c <_Balloc>
 8012792:	4604      	mov	r4, r0
 8012794:	b930      	cbnz	r0, 80127a4 <__d2b+0x24>
 8012796:	4602      	mov	r2, r0
 8012798:	4b25      	ldr	r3, [pc, #148]	; (8012830 <__d2b+0xb0>)
 801279a:	4826      	ldr	r0, [pc, #152]	; (8012834 <__d2b+0xb4>)
 801279c:	f240 310a 	movw	r1, #778	; 0x30a
 80127a0:	f7fe fbf2 	bl	8010f88 <__assert_func>
 80127a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80127a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80127ac:	bb35      	cbnz	r5, 80127fc <__d2b+0x7c>
 80127ae:	2e00      	cmp	r6, #0
 80127b0:	9301      	str	r3, [sp, #4]
 80127b2:	d028      	beq.n	8012806 <__d2b+0x86>
 80127b4:	4668      	mov	r0, sp
 80127b6:	9600      	str	r6, [sp, #0]
 80127b8:	f7ff fd8c 	bl	80122d4 <__lo0bits>
 80127bc:	9900      	ldr	r1, [sp, #0]
 80127be:	b300      	cbz	r0, 8012802 <__d2b+0x82>
 80127c0:	9a01      	ldr	r2, [sp, #4]
 80127c2:	f1c0 0320 	rsb	r3, r0, #32
 80127c6:	fa02 f303 	lsl.w	r3, r2, r3
 80127ca:	430b      	orrs	r3, r1
 80127cc:	40c2      	lsrs	r2, r0
 80127ce:	6163      	str	r3, [r4, #20]
 80127d0:	9201      	str	r2, [sp, #4]
 80127d2:	9b01      	ldr	r3, [sp, #4]
 80127d4:	61a3      	str	r3, [r4, #24]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	bf14      	ite	ne
 80127da:	2202      	movne	r2, #2
 80127dc:	2201      	moveq	r2, #1
 80127de:	6122      	str	r2, [r4, #16]
 80127e0:	b1d5      	cbz	r5, 8012818 <__d2b+0x98>
 80127e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80127e6:	4405      	add	r5, r0
 80127e8:	f8c9 5000 	str.w	r5, [r9]
 80127ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80127f0:	f8c8 0000 	str.w	r0, [r8]
 80127f4:	4620      	mov	r0, r4
 80127f6:	b003      	add	sp, #12
 80127f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012800:	e7d5      	b.n	80127ae <__d2b+0x2e>
 8012802:	6161      	str	r1, [r4, #20]
 8012804:	e7e5      	b.n	80127d2 <__d2b+0x52>
 8012806:	a801      	add	r0, sp, #4
 8012808:	f7ff fd64 	bl	80122d4 <__lo0bits>
 801280c:	9b01      	ldr	r3, [sp, #4]
 801280e:	6163      	str	r3, [r4, #20]
 8012810:	2201      	movs	r2, #1
 8012812:	6122      	str	r2, [r4, #16]
 8012814:	3020      	adds	r0, #32
 8012816:	e7e3      	b.n	80127e0 <__d2b+0x60>
 8012818:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801281c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012820:	f8c9 0000 	str.w	r0, [r9]
 8012824:	6918      	ldr	r0, [r3, #16]
 8012826:	f7ff fd35 	bl	8012294 <__hi0bits>
 801282a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801282e:	e7df      	b.n	80127f0 <__d2b+0x70>
 8012830:	0801578b 	.word	0x0801578b
 8012834:	080157fc 	.word	0x080157fc

08012838 <_calloc_r>:
 8012838:	b513      	push	{r0, r1, r4, lr}
 801283a:	434a      	muls	r2, r1
 801283c:	4611      	mov	r1, r2
 801283e:	9201      	str	r2, [sp, #4]
 8012840:	f7fd fd4a 	bl	80102d8 <_malloc_r>
 8012844:	4604      	mov	r4, r0
 8012846:	b118      	cbz	r0, 8012850 <_calloc_r+0x18>
 8012848:	9a01      	ldr	r2, [sp, #4]
 801284a:	2100      	movs	r1, #0
 801284c:	f7fd fcec 	bl	8010228 <memset>
 8012850:	4620      	mov	r0, r4
 8012852:	b002      	add	sp, #8
 8012854:	bd10      	pop	{r4, pc}

08012856 <_realloc_r>:
 8012856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012858:	4607      	mov	r7, r0
 801285a:	4614      	mov	r4, r2
 801285c:	460e      	mov	r6, r1
 801285e:	b921      	cbnz	r1, 801286a <_realloc_r+0x14>
 8012860:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012864:	4611      	mov	r1, r2
 8012866:	f7fd bd37 	b.w	80102d8 <_malloc_r>
 801286a:	b922      	cbnz	r2, 8012876 <_realloc_r+0x20>
 801286c:	f7fd fce4 	bl	8010238 <_free_r>
 8012870:	4625      	mov	r5, r4
 8012872:	4628      	mov	r0, r5
 8012874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012876:	f000 fbdf 	bl	8013038 <_malloc_usable_size_r>
 801287a:	42a0      	cmp	r0, r4
 801287c:	d20f      	bcs.n	801289e <_realloc_r+0x48>
 801287e:	4621      	mov	r1, r4
 8012880:	4638      	mov	r0, r7
 8012882:	f7fd fd29 	bl	80102d8 <_malloc_r>
 8012886:	4605      	mov	r5, r0
 8012888:	2800      	cmp	r0, #0
 801288a:	d0f2      	beq.n	8012872 <_realloc_r+0x1c>
 801288c:	4631      	mov	r1, r6
 801288e:	4622      	mov	r2, r4
 8012890:	f7fd fcbc 	bl	801020c <memcpy>
 8012894:	4631      	mov	r1, r6
 8012896:	4638      	mov	r0, r7
 8012898:	f7fd fcce 	bl	8010238 <_free_r>
 801289c:	e7e9      	b.n	8012872 <_realloc_r+0x1c>
 801289e:	4635      	mov	r5, r6
 80128a0:	e7e7      	b.n	8012872 <_realloc_r+0x1c>

080128a2 <__ssputs_r>:
 80128a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128a6:	688e      	ldr	r6, [r1, #8]
 80128a8:	429e      	cmp	r6, r3
 80128aa:	4682      	mov	sl, r0
 80128ac:	460c      	mov	r4, r1
 80128ae:	4690      	mov	r8, r2
 80128b0:	461f      	mov	r7, r3
 80128b2:	d838      	bhi.n	8012926 <__ssputs_r+0x84>
 80128b4:	898a      	ldrh	r2, [r1, #12]
 80128b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80128ba:	d032      	beq.n	8012922 <__ssputs_r+0x80>
 80128bc:	6825      	ldr	r5, [r4, #0]
 80128be:	6909      	ldr	r1, [r1, #16]
 80128c0:	eba5 0901 	sub.w	r9, r5, r1
 80128c4:	6965      	ldr	r5, [r4, #20]
 80128c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80128ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80128ce:	3301      	adds	r3, #1
 80128d0:	444b      	add	r3, r9
 80128d2:	106d      	asrs	r5, r5, #1
 80128d4:	429d      	cmp	r5, r3
 80128d6:	bf38      	it	cc
 80128d8:	461d      	movcc	r5, r3
 80128da:	0553      	lsls	r3, r2, #21
 80128dc:	d531      	bpl.n	8012942 <__ssputs_r+0xa0>
 80128de:	4629      	mov	r1, r5
 80128e0:	f7fd fcfa 	bl	80102d8 <_malloc_r>
 80128e4:	4606      	mov	r6, r0
 80128e6:	b950      	cbnz	r0, 80128fe <__ssputs_r+0x5c>
 80128e8:	230c      	movs	r3, #12
 80128ea:	f8ca 3000 	str.w	r3, [sl]
 80128ee:	89a3      	ldrh	r3, [r4, #12]
 80128f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128f4:	81a3      	strh	r3, [r4, #12]
 80128f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128fe:	6921      	ldr	r1, [r4, #16]
 8012900:	464a      	mov	r2, r9
 8012902:	f7fd fc83 	bl	801020c <memcpy>
 8012906:	89a3      	ldrh	r3, [r4, #12]
 8012908:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801290c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012910:	81a3      	strh	r3, [r4, #12]
 8012912:	6126      	str	r6, [r4, #16]
 8012914:	6165      	str	r5, [r4, #20]
 8012916:	444e      	add	r6, r9
 8012918:	eba5 0509 	sub.w	r5, r5, r9
 801291c:	6026      	str	r6, [r4, #0]
 801291e:	60a5      	str	r5, [r4, #8]
 8012920:	463e      	mov	r6, r7
 8012922:	42be      	cmp	r6, r7
 8012924:	d900      	bls.n	8012928 <__ssputs_r+0x86>
 8012926:	463e      	mov	r6, r7
 8012928:	4632      	mov	r2, r6
 801292a:	6820      	ldr	r0, [r4, #0]
 801292c:	4641      	mov	r1, r8
 801292e:	f000 fb69 	bl	8013004 <memmove>
 8012932:	68a3      	ldr	r3, [r4, #8]
 8012934:	6822      	ldr	r2, [r4, #0]
 8012936:	1b9b      	subs	r3, r3, r6
 8012938:	4432      	add	r2, r6
 801293a:	60a3      	str	r3, [r4, #8]
 801293c:	6022      	str	r2, [r4, #0]
 801293e:	2000      	movs	r0, #0
 8012940:	e7db      	b.n	80128fa <__ssputs_r+0x58>
 8012942:	462a      	mov	r2, r5
 8012944:	f7ff ff87 	bl	8012856 <_realloc_r>
 8012948:	4606      	mov	r6, r0
 801294a:	2800      	cmp	r0, #0
 801294c:	d1e1      	bne.n	8012912 <__ssputs_r+0x70>
 801294e:	6921      	ldr	r1, [r4, #16]
 8012950:	4650      	mov	r0, sl
 8012952:	f7fd fc71 	bl	8010238 <_free_r>
 8012956:	e7c7      	b.n	80128e8 <__ssputs_r+0x46>

08012958 <_svfiprintf_r>:
 8012958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801295c:	4698      	mov	r8, r3
 801295e:	898b      	ldrh	r3, [r1, #12]
 8012960:	061b      	lsls	r3, r3, #24
 8012962:	b09d      	sub	sp, #116	; 0x74
 8012964:	4607      	mov	r7, r0
 8012966:	460d      	mov	r5, r1
 8012968:	4614      	mov	r4, r2
 801296a:	d50e      	bpl.n	801298a <_svfiprintf_r+0x32>
 801296c:	690b      	ldr	r3, [r1, #16]
 801296e:	b963      	cbnz	r3, 801298a <_svfiprintf_r+0x32>
 8012970:	2140      	movs	r1, #64	; 0x40
 8012972:	f7fd fcb1 	bl	80102d8 <_malloc_r>
 8012976:	6028      	str	r0, [r5, #0]
 8012978:	6128      	str	r0, [r5, #16]
 801297a:	b920      	cbnz	r0, 8012986 <_svfiprintf_r+0x2e>
 801297c:	230c      	movs	r3, #12
 801297e:	603b      	str	r3, [r7, #0]
 8012980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012984:	e0d1      	b.n	8012b2a <_svfiprintf_r+0x1d2>
 8012986:	2340      	movs	r3, #64	; 0x40
 8012988:	616b      	str	r3, [r5, #20]
 801298a:	2300      	movs	r3, #0
 801298c:	9309      	str	r3, [sp, #36]	; 0x24
 801298e:	2320      	movs	r3, #32
 8012990:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012994:	f8cd 800c 	str.w	r8, [sp, #12]
 8012998:	2330      	movs	r3, #48	; 0x30
 801299a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012b44 <_svfiprintf_r+0x1ec>
 801299e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80129a2:	f04f 0901 	mov.w	r9, #1
 80129a6:	4623      	mov	r3, r4
 80129a8:	469a      	mov	sl, r3
 80129aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129ae:	b10a      	cbz	r2, 80129b4 <_svfiprintf_r+0x5c>
 80129b0:	2a25      	cmp	r2, #37	; 0x25
 80129b2:	d1f9      	bne.n	80129a8 <_svfiprintf_r+0x50>
 80129b4:	ebba 0b04 	subs.w	fp, sl, r4
 80129b8:	d00b      	beq.n	80129d2 <_svfiprintf_r+0x7a>
 80129ba:	465b      	mov	r3, fp
 80129bc:	4622      	mov	r2, r4
 80129be:	4629      	mov	r1, r5
 80129c0:	4638      	mov	r0, r7
 80129c2:	f7ff ff6e 	bl	80128a2 <__ssputs_r>
 80129c6:	3001      	adds	r0, #1
 80129c8:	f000 80aa 	beq.w	8012b20 <_svfiprintf_r+0x1c8>
 80129cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129ce:	445a      	add	r2, fp
 80129d0:	9209      	str	r2, [sp, #36]	; 0x24
 80129d2:	f89a 3000 	ldrb.w	r3, [sl]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	f000 80a2 	beq.w	8012b20 <_svfiprintf_r+0x1c8>
 80129dc:	2300      	movs	r3, #0
 80129de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80129e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80129e6:	f10a 0a01 	add.w	sl, sl, #1
 80129ea:	9304      	str	r3, [sp, #16]
 80129ec:	9307      	str	r3, [sp, #28]
 80129ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80129f2:	931a      	str	r3, [sp, #104]	; 0x68
 80129f4:	4654      	mov	r4, sl
 80129f6:	2205      	movs	r2, #5
 80129f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129fc:	4851      	ldr	r0, [pc, #324]	; (8012b44 <_svfiprintf_r+0x1ec>)
 80129fe:	f7ed fc0f 	bl	8000220 <memchr>
 8012a02:	9a04      	ldr	r2, [sp, #16]
 8012a04:	b9d8      	cbnz	r0, 8012a3e <_svfiprintf_r+0xe6>
 8012a06:	06d0      	lsls	r0, r2, #27
 8012a08:	bf44      	itt	mi
 8012a0a:	2320      	movmi	r3, #32
 8012a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a10:	0711      	lsls	r1, r2, #28
 8012a12:	bf44      	itt	mi
 8012a14:	232b      	movmi	r3, #43	; 0x2b
 8012a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8012a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8012a20:	d015      	beq.n	8012a4e <_svfiprintf_r+0xf6>
 8012a22:	9a07      	ldr	r2, [sp, #28]
 8012a24:	4654      	mov	r4, sl
 8012a26:	2000      	movs	r0, #0
 8012a28:	f04f 0c0a 	mov.w	ip, #10
 8012a2c:	4621      	mov	r1, r4
 8012a2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a32:	3b30      	subs	r3, #48	; 0x30
 8012a34:	2b09      	cmp	r3, #9
 8012a36:	d94e      	bls.n	8012ad6 <_svfiprintf_r+0x17e>
 8012a38:	b1b0      	cbz	r0, 8012a68 <_svfiprintf_r+0x110>
 8012a3a:	9207      	str	r2, [sp, #28]
 8012a3c:	e014      	b.n	8012a68 <_svfiprintf_r+0x110>
 8012a3e:	eba0 0308 	sub.w	r3, r0, r8
 8012a42:	fa09 f303 	lsl.w	r3, r9, r3
 8012a46:	4313      	orrs	r3, r2
 8012a48:	9304      	str	r3, [sp, #16]
 8012a4a:	46a2      	mov	sl, r4
 8012a4c:	e7d2      	b.n	80129f4 <_svfiprintf_r+0x9c>
 8012a4e:	9b03      	ldr	r3, [sp, #12]
 8012a50:	1d19      	adds	r1, r3, #4
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	9103      	str	r1, [sp, #12]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	bfbb      	ittet	lt
 8012a5a:	425b      	neglt	r3, r3
 8012a5c:	f042 0202 	orrlt.w	r2, r2, #2
 8012a60:	9307      	strge	r3, [sp, #28]
 8012a62:	9307      	strlt	r3, [sp, #28]
 8012a64:	bfb8      	it	lt
 8012a66:	9204      	strlt	r2, [sp, #16]
 8012a68:	7823      	ldrb	r3, [r4, #0]
 8012a6a:	2b2e      	cmp	r3, #46	; 0x2e
 8012a6c:	d10c      	bne.n	8012a88 <_svfiprintf_r+0x130>
 8012a6e:	7863      	ldrb	r3, [r4, #1]
 8012a70:	2b2a      	cmp	r3, #42	; 0x2a
 8012a72:	d135      	bne.n	8012ae0 <_svfiprintf_r+0x188>
 8012a74:	9b03      	ldr	r3, [sp, #12]
 8012a76:	1d1a      	adds	r2, r3, #4
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	9203      	str	r2, [sp, #12]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	bfb8      	it	lt
 8012a80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012a84:	3402      	adds	r4, #2
 8012a86:	9305      	str	r3, [sp, #20]
 8012a88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012b54 <_svfiprintf_r+0x1fc>
 8012a8c:	7821      	ldrb	r1, [r4, #0]
 8012a8e:	2203      	movs	r2, #3
 8012a90:	4650      	mov	r0, sl
 8012a92:	f7ed fbc5 	bl	8000220 <memchr>
 8012a96:	b140      	cbz	r0, 8012aaa <_svfiprintf_r+0x152>
 8012a98:	2340      	movs	r3, #64	; 0x40
 8012a9a:	eba0 000a 	sub.w	r0, r0, sl
 8012a9e:	fa03 f000 	lsl.w	r0, r3, r0
 8012aa2:	9b04      	ldr	r3, [sp, #16]
 8012aa4:	4303      	orrs	r3, r0
 8012aa6:	3401      	adds	r4, #1
 8012aa8:	9304      	str	r3, [sp, #16]
 8012aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012aae:	4826      	ldr	r0, [pc, #152]	; (8012b48 <_svfiprintf_r+0x1f0>)
 8012ab0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ab4:	2206      	movs	r2, #6
 8012ab6:	f7ed fbb3 	bl	8000220 <memchr>
 8012aba:	2800      	cmp	r0, #0
 8012abc:	d038      	beq.n	8012b30 <_svfiprintf_r+0x1d8>
 8012abe:	4b23      	ldr	r3, [pc, #140]	; (8012b4c <_svfiprintf_r+0x1f4>)
 8012ac0:	bb1b      	cbnz	r3, 8012b0a <_svfiprintf_r+0x1b2>
 8012ac2:	9b03      	ldr	r3, [sp, #12]
 8012ac4:	3307      	adds	r3, #7
 8012ac6:	f023 0307 	bic.w	r3, r3, #7
 8012aca:	3308      	adds	r3, #8
 8012acc:	9303      	str	r3, [sp, #12]
 8012ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ad0:	4433      	add	r3, r6
 8012ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8012ad4:	e767      	b.n	80129a6 <_svfiprintf_r+0x4e>
 8012ad6:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ada:	460c      	mov	r4, r1
 8012adc:	2001      	movs	r0, #1
 8012ade:	e7a5      	b.n	8012a2c <_svfiprintf_r+0xd4>
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	3401      	adds	r4, #1
 8012ae4:	9305      	str	r3, [sp, #20]
 8012ae6:	4619      	mov	r1, r3
 8012ae8:	f04f 0c0a 	mov.w	ip, #10
 8012aec:	4620      	mov	r0, r4
 8012aee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012af2:	3a30      	subs	r2, #48	; 0x30
 8012af4:	2a09      	cmp	r2, #9
 8012af6:	d903      	bls.n	8012b00 <_svfiprintf_r+0x1a8>
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d0c5      	beq.n	8012a88 <_svfiprintf_r+0x130>
 8012afc:	9105      	str	r1, [sp, #20]
 8012afe:	e7c3      	b.n	8012a88 <_svfiprintf_r+0x130>
 8012b00:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b04:	4604      	mov	r4, r0
 8012b06:	2301      	movs	r3, #1
 8012b08:	e7f0      	b.n	8012aec <_svfiprintf_r+0x194>
 8012b0a:	ab03      	add	r3, sp, #12
 8012b0c:	9300      	str	r3, [sp, #0]
 8012b0e:	462a      	mov	r2, r5
 8012b10:	4b0f      	ldr	r3, [pc, #60]	; (8012b50 <_svfiprintf_r+0x1f8>)
 8012b12:	a904      	add	r1, sp, #16
 8012b14:	4638      	mov	r0, r7
 8012b16:	f7fd fcd9 	bl	80104cc <_printf_float>
 8012b1a:	1c42      	adds	r2, r0, #1
 8012b1c:	4606      	mov	r6, r0
 8012b1e:	d1d6      	bne.n	8012ace <_svfiprintf_r+0x176>
 8012b20:	89ab      	ldrh	r3, [r5, #12]
 8012b22:	065b      	lsls	r3, r3, #25
 8012b24:	f53f af2c 	bmi.w	8012980 <_svfiprintf_r+0x28>
 8012b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b2a:	b01d      	add	sp, #116	; 0x74
 8012b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b30:	ab03      	add	r3, sp, #12
 8012b32:	9300      	str	r3, [sp, #0]
 8012b34:	462a      	mov	r2, r5
 8012b36:	4b06      	ldr	r3, [pc, #24]	; (8012b50 <_svfiprintf_r+0x1f8>)
 8012b38:	a904      	add	r1, sp, #16
 8012b3a:	4638      	mov	r0, r7
 8012b3c:	f7fd ff6a 	bl	8010a14 <_printf_i>
 8012b40:	e7eb      	b.n	8012b1a <_svfiprintf_r+0x1c2>
 8012b42:	bf00      	nop
 8012b44:	0801595c 	.word	0x0801595c
 8012b48:	08015966 	.word	0x08015966
 8012b4c:	080104cd 	.word	0x080104cd
 8012b50:	080128a3 	.word	0x080128a3
 8012b54:	08015962 	.word	0x08015962

08012b58 <__sfputc_r>:
 8012b58:	6893      	ldr	r3, [r2, #8]
 8012b5a:	3b01      	subs	r3, #1
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	b410      	push	{r4}
 8012b60:	6093      	str	r3, [r2, #8]
 8012b62:	da08      	bge.n	8012b76 <__sfputc_r+0x1e>
 8012b64:	6994      	ldr	r4, [r2, #24]
 8012b66:	42a3      	cmp	r3, r4
 8012b68:	db01      	blt.n	8012b6e <__sfputc_r+0x16>
 8012b6a:	290a      	cmp	r1, #10
 8012b6c:	d103      	bne.n	8012b76 <__sfputc_r+0x1e>
 8012b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b72:	f7fe b949 	b.w	8010e08 <__swbuf_r>
 8012b76:	6813      	ldr	r3, [r2, #0]
 8012b78:	1c58      	adds	r0, r3, #1
 8012b7a:	6010      	str	r0, [r2, #0]
 8012b7c:	7019      	strb	r1, [r3, #0]
 8012b7e:	4608      	mov	r0, r1
 8012b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b84:	4770      	bx	lr

08012b86 <__sfputs_r>:
 8012b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b88:	4606      	mov	r6, r0
 8012b8a:	460f      	mov	r7, r1
 8012b8c:	4614      	mov	r4, r2
 8012b8e:	18d5      	adds	r5, r2, r3
 8012b90:	42ac      	cmp	r4, r5
 8012b92:	d101      	bne.n	8012b98 <__sfputs_r+0x12>
 8012b94:	2000      	movs	r0, #0
 8012b96:	e007      	b.n	8012ba8 <__sfputs_r+0x22>
 8012b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b9c:	463a      	mov	r2, r7
 8012b9e:	4630      	mov	r0, r6
 8012ba0:	f7ff ffda 	bl	8012b58 <__sfputc_r>
 8012ba4:	1c43      	adds	r3, r0, #1
 8012ba6:	d1f3      	bne.n	8012b90 <__sfputs_r+0xa>
 8012ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012bac <_vfiprintf_r>:
 8012bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bb0:	460d      	mov	r5, r1
 8012bb2:	b09d      	sub	sp, #116	; 0x74
 8012bb4:	4614      	mov	r4, r2
 8012bb6:	4698      	mov	r8, r3
 8012bb8:	4606      	mov	r6, r0
 8012bba:	b118      	cbz	r0, 8012bc4 <_vfiprintf_r+0x18>
 8012bbc:	6983      	ldr	r3, [r0, #24]
 8012bbe:	b90b      	cbnz	r3, 8012bc4 <_vfiprintf_r+0x18>
 8012bc0:	f7ff f994 	bl	8011eec <__sinit>
 8012bc4:	4b89      	ldr	r3, [pc, #548]	; (8012dec <_vfiprintf_r+0x240>)
 8012bc6:	429d      	cmp	r5, r3
 8012bc8:	d11b      	bne.n	8012c02 <_vfiprintf_r+0x56>
 8012bca:	6875      	ldr	r5, [r6, #4]
 8012bcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012bce:	07d9      	lsls	r1, r3, #31
 8012bd0:	d405      	bmi.n	8012bde <_vfiprintf_r+0x32>
 8012bd2:	89ab      	ldrh	r3, [r5, #12]
 8012bd4:	059a      	lsls	r2, r3, #22
 8012bd6:	d402      	bmi.n	8012bde <_vfiprintf_r+0x32>
 8012bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012bda:	f7ff fa3c 	bl	8012056 <__retarget_lock_acquire_recursive>
 8012bde:	89ab      	ldrh	r3, [r5, #12]
 8012be0:	071b      	lsls	r3, r3, #28
 8012be2:	d501      	bpl.n	8012be8 <_vfiprintf_r+0x3c>
 8012be4:	692b      	ldr	r3, [r5, #16]
 8012be6:	b9eb      	cbnz	r3, 8012c24 <_vfiprintf_r+0x78>
 8012be8:	4629      	mov	r1, r5
 8012bea:	4630      	mov	r0, r6
 8012bec:	f7fe f95e 	bl	8010eac <__swsetup_r>
 8012bf0:	b1c0      	cbz	r0, 8012c24 <_vfiprintf_r+0x78>
 8012bf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012bf4:	07dc      	lsls	r4, r3, #31
 8012bf6:	d50e      	bpl.n	8012c16 <_vfiprintf_r+0x6a>
 8012bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012bfc:	b01d      	add	sp, #116	; 0x74
 8012bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c02:	4b7b      	ldr	r3, [pc, #492]	; (8012df0 <_vfiprintf_r+0x244>)
 8012c04:	429d      	cmp	r5, r3
 8012c06:	d101      	bne.n	8012c0c <_vfiprintf_r+0x60>
 8012c08:	68b5      	ldr	r5, [r6, #8]
 8012c0a:	e7df      	b.n	8012bcc <_vfiprintf_r+0x20>
 8012c0c:	4b79      	ldr	r3, [pc, #484]	; (8012df4 <_vfiprintf_r+0x248>)
 8012c0e:	429d      	cmp	r5, r3
 8012c10:	bf08      	it	eq
 8012c12:	68f5      	ldreq	r5, [r6, #12]
 8012c14:	e7da      	b.n	8012bcc <_vfiprintf_r+0x20>
 8012c16:	89ab      	ldrh	r3, [r5, #12]
 8012c18:	0598      	lsls	r0, r3, #22
 8012c1a:	d4ed      	bmi.n	8012bf8 <_vfiprintf_r+0x4c>
 8012c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c1e:	f7ff fa1b 	bl	8012058 <__retarget_lock_release_recursive>
 8012c22:	e7e9      	b.n	8012bf8 <_vfiprintf_r+0x4c>
 8012c24:	2300      	movs	r3, #0
 8012c26:	9309      	str	r3, [sp, #36]	; 0x24
 8012c28:	2320      	movs	r3, #32
 8012c2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c32:	2330      	movs	r3, #48	; 0x30
 8012c34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012df8 <_vfiprintf_r+0x24c>
 8012c38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c3c:	f04f 0901 	mov.w	r9, #1
 8012c40:	4623      	mov	r3, r4
 8012c42:	469a      	mov	sl, r3
 8012c44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c48:	b10a      	cbz	r2, 8012c4e <_vfiprintf_r+0xa2>
 8012c4a:	2a25      	cmp	r2, #37	; 0x25
 8012c4c:	d1f9      	bne.n	8012c42 <_vfiprintf_r+0x96>
 8012c4e:	ebba 0b04 	subs.w	fp, sl, r4
 8012c52:	d00b      	beq.n	8012c6c <_vfiprintf_r+0xc0>
 8012c54:	465b      	mov	r3, fp
 8012c56:	4622      	mov	r2, r4
 8012c58:	4629      	mov	r1, r5
 8012c5a:	4630      	mov	r0, r6
 8012c5c:	f7ff ff93 	bl	8012b86 <__sfputs_r>
 8012c60:	3001      	adds	r0, #1
 8012c62:	f000 80aa 	beq.w	8012dba <_vfiprintf_r+0x20e>
 8012c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c68:	445a      	add	r2, fp
 8012c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8012c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	f000 80a2 	beq.w	8012dba <_vfiprintf_r+0x20e>
 8012c76:	2300      	movs	r3, #0
 8012c78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012c7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c80:	f10a 0a01 	add.w	sl, sl, #1
 8012c84:	9304      	str	r3, [sp, #16]
 8012c86:	9307      	str	r3, [sp, #28]
 8012c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c8c:	931a      	str	r3, [sp, #104]	; 0x68
 8012c8e:	4654      	mov	r4, sl
 8012c90:	2205      	movs	r2, #5
 8012c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c96:	4858      	ldr	r0, [pc, #352]	; (8012df8 <_vfiprintf_r+0x24c>)
 8012c98:	f7ed fac2 	bl	8000220 <memchr>
 8012c9c:	9a04      	ldr	r2, [sp, #16]
 8012c9e:	b9d8      	cbnz	r0, 8012cd8 <_vfiprintf_r+0x12c>
 8012ca0:	06d1      	lsls	r1, r2, #27
 8012ca2:	bf44      	itt	mi
 8012ca4:	2320      	movmi	r3, #32
 8012ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012caa:	0713      	lsls	r3, r2, #28
 8012cac:	bf44      	itt	mi
 8012cae:	232b      	movmi	r3, #43	; 0x2b
 8012cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8012cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8012cba:	d015      	beq.n	8012ce8 <_vfiprintf_r+0x13c>
 8012cbc:	9a07      	ldr	r2, [sp, #28]
 8012cbe:	4654      	mov	r4, sl
 8012cc0:	2000      	movs	r0, #0
 8012cc2:	f04f 0c0a 	mov.w	ip, #10
 8012cc6:	4621      	mov	r1, r4
 8012cc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ccc:	3b30      	subs	r3, #48	; 0x30
 8012cce:	2b09      	cmp	r3, #9
 8012cd0:	d94e      	bls.n	8012d70 <_vfiprintf_r+0x1c4>
 8012cd2:	b1b0      	cbz	r0, 8012d02 <_vfiprintf_r+0x156>
 8012cd4:	9207      	str	r2, [sp, #28]
 8012cd6:	e014      	b.n	8012d02 <_vfiprintf_r+0x156>
 8012cd8:	eba0 0308 	sub.w	r3, r0, r8
 8012cdc:	fa09 f303 	lsl.w	r3, r9, r3
 8012ce0:	4313      	orrs	r3, r2
 8012ce2:	9304      	str	r3, [sp, #16]
 8012ce4:	46a2      	mov	sl, r4
 8012ce6:	e7d2      	b.n	8012c8e <_vfiprintf_r+0xe2>
 8012ce8:	9b03      	ldr	r3, [sp, #12]
 8012cea:	1d19      	adds	r1, r3, #4
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	9103      	str	r1, [sp, #12]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	bfbb      	ittet	lt
 8012cf4:	425b      	neglt	r3, r3
 8012cf6:	f042 0202 	orrlt.w	r2, r2, #2
 8012cfa:	9307      	strge	r3, [sp, #28]
 8012cfc:	9307      	strlt	r3, [sp, #28]
 8012cfe:	bfb8      	it	lt
 8012d00:	9204      	strlt	r2, [sp, #16]
 8012d02:	7823      	ldrb	r3, [r4, #0]
 8012d04:	2b2e      	cmp	r3, #46	; 0x2e
 8012d06:	d10c      	bne.n	8012d22 <_vfiprintf_r+0x176>
 8012d08:	7863      	ldrb	r3, [r4, #1]
 8012d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8012d0c:	d135      	bne.n	8012d7a <_vfiprintf_r+0x1ce>
 8012d0e:	9b03      	ldr	r3, [sp, #12]
 8012d10:	1d1a      	adds	r2, r3, #4
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	9203      	str	r2, [sp, #12]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	bfb8      	it	lt
 8012d1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012d1e:	3402      	adds	r4, #2
 8012d20:	9305      	str	r3, [sp, #20]
 8012d22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012e08 <_vfiprintf_r+0x25c>
 8012d26:	7821      	ldrb	r1, [r4, #0]
 8012d28:	2203      	movs	r2, #3
 8012d2a:	4650      	mov	r0, sl
 8012d2c:	f7ed fa78 	bl	8000220 <memchr>
 8012d30:	b140      	cbz	r0, 8012d44 <_vfiprintf_r+0x198>
 8012d32:	2340      	movs	r3, #64	; 0x40
 8012d34:	eba0 000a 	sub.w	r0, r0, sl
 8012d38:	fa03 f000 	lsl.w	r0, r3, r0
 8012d3c:	9b04      	ldr	r3, [sp, #16]
 8012d3e:	4303      	orrs	r3, r0
 8012d40:	3401      	adds	r4, #1
 8012d42:	9304      	str	r3, [sp, #16]
 8012d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d48:	482c      	ldr	r0, [pc, #176]	; (8012dfc <_vfiprintf_r+0x250>)
 8012d4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d4e:	2206      	movs	r2, #6
 8012d50:	f7ed fa66 	bl	8000220 <memchr>
 8012d54:	2800      	cmp	r0, #0
 8012d56:	d03f      	beq.n	8012dd8 <_vfiprintf_r+0x22c>
 8012d58:	4b29      	ldr	r3, [pc, #164]	; (8012e00 <_vfiprintf_r+0x254>)
 8012d5a:	bb1b      	cbnz	r3, 8012da4 <_vfiprintf_r+0x1f8>
 8012d5c:	9b03      	ldr	r3, [sp, #12]
 8012d5e:	3307      	adds	r3, #7
 8012d60:	f023 0307 	bic.w	r3, r3, #7
 8012d64:	3308      	adds	r3, #8
 8012d66:	9303      	str	r3, [sp, #12]
 8012d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d6a:	443b      	add	r3, r7
 8012d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8012d6e:	e767      	b.n	8012c40 <_vfiprintf_r+0x94>
 8012d70:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d74:	460c      	mov	r4, r1
 8012d76:	2001      	movs	r0, #1
 8012d78:	e7a5      	b.n	8012cc6 <_vfiprintf_r+0x11a>
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	3401      	adds	r4, #1
 8012d7e:	9305      	str	r3, [sp, #20]
 8012d80:	4619      	mov	r1, r3
 8012d82:	f04f 0c0a 	mov.w	ip, #10
 8012d86:	4620      	mov	r0, r4
 8012d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d8c:	3a30      	subs	r2, #48	; 0x30
 8012d8e:	2a09      	cmp	r2, #9
 8012d90:	d903      	bls.n	8012d9a <_vfiprintf_r+0x1ee>
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d0c5      	beq.n	8012d22 <_vfiprintf_r+0x176>
 8012d96:	9105      	str	r1, [sp, #20]
 8012d98:	e7c3      	b.n	8012d22 <_vfiprintf_r+0x176>
 8012d9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d9e:	4604      	mov	r4, r0
 8012da0:	2301      	movs	r3, #1
 8012da2:	e7f0      	b.n	8012d86 <_vfiprintf_r+0x1da>
 8012da4:	ab03      	add	r3, sp, #12
 8012da6:	9300      	str	r3, [sp, #0]
 8012da8:	462a      	mov	r2, r5
 8012daa:	4b16      	ldr	r3, [pc, #88]	; (8012e04 <_vfiprintf_r+0x258>)
 8012dac:	a904      	add	r1, sp, #16
 8012dae:	4630      	mov	r0, r6
 8012db0:	f7fd fb8c 	bl	80104cc <_printf_float>
 8012db4:	4607      	mov	r7, r0
 8012db6:	1c78      	adds	r0, r7, #1
 8012db8:	d1d6      	bne.n	8012d68 <_vfiprintf_r+0x1bc>
 8012dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012dbc:	07d9      	lsls	r1, r3, #31
 8012dbe:	d405      	bmi.n	8012dcc <_vfiprintf_r+0x220>
 8012dc0:	89ab      	ldrh	r3, [r5, #12]
 8012dc2:	059a      	lsls	r2, r3, #22
 8012dc4:	d402      	bmi.n	8012dcc <_vfiprintf_r+0x220>
 8012dc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012dc8:	f7ff f946 	bl	8012058 <__retarget_lock_release_recursive>
 8012dcc:	89ab      	ldrh	r3, [r5, #12]
 8012dce:	065b      	lsls	r3, r3, #25
 8012dd0:	f53f af12 	bmi.w	8012bf8 <_vfiprintf_r+0x4c>
 8012dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012dd6:	e711      	b.n	8012bfc <_vfiprintf_r+0x50>
 8012dd8:	ab03      	add	r3, sp, #12
 8012dda:	9300      	str	r3, [sp, #0]
 8012ddc:	462a      	mov	r2, r5
 8012dde:	4b09      	ldr	r3, [pc, #36]	; (8012e04 <_vfiprintf_r+0x258>)
 8012de0:	a904      	add	r1, sp, #16
 8012de2:	4630      	mov	r0, r6
 8012de4:	f7fd fe16 	bl	8010a14 <_printf_i>
 8012de8:	e7e4      	b.n	8012db4 <_vfiprintf_r+0x208>
 8012dea:	bf00      	nop
 8012dec:	080157bc 	.word	0x080157bc
 8012df0:	080157dc 	.word	0x080157dc
 8012df4:	0801579c 	.word	0x0801579c
 8012df8:	0801595c 	.word	0x0801595c
 8012dfc:	08015966 	.word	0x08015966
 8012e00:	080104cd 	.word	0x080104cd
 8012e04:	08012b87 	.word	0x08012b87
 8012e08:	08015962 	.word	0x08015962

08012e0c <_putc_r>:
 8012e0c:	b570      	push	{r4, r5, r6, lr}
 8012e0e:	460d      	mov	r5, r1
 8012e10:	4614      	mov	r4, r2
 8012e12:	4606      	mov	r6, r0
 8012e14:	b118      	cbz	r0, 8012e1e <_putc_r+0x12>
 8012e16:	6983      	ldr	r3, [r0, #24]
 8012e18:	b90b      	cbnz	r3, 8012e1e <_putc_r+0x12>
 8012e1a:	f7ff f867 	bl	8011eec <__sinit>
 8012e1e:	4b1c      	ldr	r3, [pc, #112]	; (8012e90 <_putc_r+0x84>)
 8012e20:	429c      	cmp	r4, r3
 8012e22:	d124      	bne.n	8012e6e <_putc_r+0x62>
 8012e24:	6874      	ldr	r4, [r6, #4]
 8012e26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e28:	07d8      	lsls	r0, r3, #31
 8012e2a:	d405      	bmi.n	8012e38 <_putc_r+0x2c>
 8012e2c:	89a3      	ldrh	r3, [r4, #12]
 8012e2e:	0599      	lsls	r1, r3, #22
 8012e30:	d402      	bmi.n	8012e38 <_putc_r+0x2c>
 8012e32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e34:	f7ff f90f 	bl	8012056 <__retarget_lock_acquire_recursive>
 8012e38:	68a3      	ldr	r3, [r4, #8]
 8012e3a:	3b01      	subs	r3, #1
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	60a3      	str	r3, [r4, #8]
 8012e40:	da05      	bge.n	8012e4e <_putc_r+0x42>
 8012e42:	69a2      	ldr	r2, [r4, #24]
 8012e44:	4293      	cmp	r3, r2
 8012e46:	db1c      	blt.n	8012e82 <_putc_r+0x76>
 8012e48:	b2eb      	uxtb	r3, r5
 8012e4a:	2b0a      	cmp	r3, #10
 8012e4c:	d019      	beq.n	8012e82 <_putc_r+0x76>
 8012e4e:	6823      	ldr	r3, [r4, #0]
 8012e50:	1c5a      	adds	r2, r3, #1
 8012e52:	6022      	str	r2, [r4, #0]
 8012e54:	701d      	strb	r5, [r3, #0]
 8012e56:	b2ed      	uxtb	r5, r5
 8012e58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e5a:	07da      	lsls	r2, r3, #31
 8012e5c:	d405      	bmi.n	8012e6a <_putc_r+0x5e>
 8012e5e:	89a3      	ldrh	r3, [r4, #12]
 8012e60:	059b      	lsls	r3, r3, #22
 8012e62:	d402      	bmi.n	8012e6a <_putc_r+0x5e>
 8012e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e66:	f7ff f8f7 	bl	8012058 <__retarget_lock_release_recursive>
 8012e6a:	4628      	mov	r0, r5
 8012e6c:	bd70      	pop	{r4, r5, r6, pc}
 8012e6e:	4b09      	ldr	r3, [pc, #36]	; (8012e94 <_putc_r+0x88>)
 8012e70:	429c      	cmp	r4, r3
 8012e72:	d101      	bne.n	8012e78 <_putc_r+0x6c>
 8012e74:	68b4      	ldr	r4, [r6, #8]
 8012e76:	e7d6      	b.n	8012e26 <_putc_r+0x1a>
 8012e78:	4b07      	ldr	r3, [pc, #28]	; (8012e98 <_putc_r+0x8c>)
 8012e7a:	429c      	cmp	r4, r3
 8012e7c:	bf08      	it	eq
 8012e7e:	68f4      	ldreq	r4, [r6, #12]
 8012e80:	e7d1      	b.n	8012e26 <_putc_r+0x1a>
 8012e82:	4629      	mov	r1, r5
 8012e84:	4622      	mov	r2, r4
 8012e86:	4630      	mov	r0, r6
 8012e88:	f7fd ffbe 	bl	8010e08 <__swbuf_r>
 8012e8c:	4605      	mov	r5, r0
 8012e8e:	e7e3      	b.n	8012e58 <_putc_r+0x4c>
 8012e90:	080157bc 	.word	0x080157bc
 8012e94:	080157dc 	.word	0x080157dc
 8012e98:	0801579c 	.word	0x0801579c

08012e9c <__sread>:
 8012e9c:	b510      	push	{r4, lr}
 8012e9e:	460c      	mov	r4, r1
 8012ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ea4:	f000 f8d0 	bl	8013048 <_read_r>
 8012ea8:	2800      	cmp	r0, #0
 8012eaa:	bfab      	itete	ge
 8012eac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012eae:	89a3      	ldrhlt	r3, [r4, #12]
 8012eb0:	181b      	addge	r3, r3, r0
 8012eb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012eb6:	bfac      	ite	ge
 8012eb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8012eba:	81a3      	strhlt	r3, [r4, #12]
 8012ebc:	bd10      	pop	{r4, pc}

08012ebe <__swrite>:
 8012ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ec2:	461f      	mov	r7, r3
 8012ec4:	898b      	ldrh	r3, [r1, #12]
 8012ec6:	05db      	lsls	r3, r3, #23
 8012ec8:	4605      	mov	r5, r0
 8012eca:	460c      	mov	r4, r1
 8012ecc:	4616      	mov	r6, r2
 8012ece:	d505      	bpl.n	8012edc <__swrite+0x1e>
 8012ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ed4:	2302      	movs	r3, #2
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	f000 f870 	bl	8012fbc <_lseek_r>
 8012edc:	89a3      	ldrh	r3, [r4, #12]
 8012ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012ee6:	81a3      	strh	r3, [r4, #12]
 8012ee8:	4632      	mov	r2, r6
 8012eea:	463b      	mov	r3, r7
 8012eec:	4628      	mov	r0, r5
 8012eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ef2:	f000 b817 	b.w	8012f24 <_write_r>

08012ef6 <__sseek>:
 8012ef6:	b510      	push	{r4, lr}
 8012ef8:	460c      	mov	r4, r1
 8012efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012efe:	f000 f85d 	bl	8012fbc <_lseek_r>
 8012f02:	1c43      	adds	r3, r0, #1
 8012f04:	89a3      	ldrh	r3, [r4, #12]
 8012f06:	bf15      	itete	ne
 8012f08:	6560      	strne	r0, [r4, #84]	; 0x54
 8012f0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012f0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012f12:	81a3      	strheq	r3, [r4, #12]
 8012f14:	bf18      	it	ne
 8012f16:	81a3      	strhne	r3, [r4, #12]
 8012f18:	bd10      	pop	{r4, pc}

08012f1a <__sclose>:
 8012f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f1e:	f000 b81b 	b.w	8012f58 <_close_r>
	...

08012f24 <_write_r>:
 8012f24:	b538      	push	{r3, r4, r5, lr}
 8012f26:	4d07      	ldr	r5, [pc, #28]	; (8012f44 <_write_r+0x20>)
 8012f28:	4604      	mov	r4, r0
 8012f2a:	4608      	mov	r0, r1
 8012f2c:	4611      	mov	r1, r2
 8012f2e:	2200      	movs	r2, #0
 8012f30:	602a      	str	r2, [r5, #0]
 8012f32:	461a      	mov	r2, r3
 8012f34:	f7f0 fddd 	bl	8003af2 <_write>
 8012f38:	1c43      	adds	r3, r0, #1
 8012f3a:	d102      	bne.n	8012f42 <_write_r+0x1e>
 8012f3c:	682b      	ldr	r3, [r5, #0]
 8012f3e:	b103      	cbz	r3, 8012f42 <_write_r+0x1e>
 8012f40:	6023      	str	r3, [r4, #0]
 8012f42:	bd38      	pop	{r3, r4, r5, pc}
 8012f44:	20040f54 	.word	0x20040f54

08012f48 <abort>:
 8012f48:	b508      	push	{r3, lr}
 8012f4a:	2006      	movs	r0, #6
 8012f4c:	f000 f8b6 	bl	80130bc <raise>
 8012f50:	2001      	movs	r0, #1
 8012f52:	f7f0 fda7 	bl	8003aa4 <_exit>
	...

08012f58 <_close_r>:
 8012f58:	b538      	push	{r3, r4, r5, lr}
 8012f5a:	4d06      	ldr	r5, [pc, #24]	; (8012f74 <_close_r+0x1c>)
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	4604      	mov	r4, r0
 8012f60:	4608      	mov	r0, r1
 8012f62:	602b      	str	r3, [r5, #0]
 8012f64:	f7f0 fde1 	bl	8003b2a <_close>
 8012f68:	1c43      	adds	r3, r0, #1
 8012f6a:	d102      	bne.n	8012f72 <_close_r+0x1a>
 8012f6c:	682b      	ldr	r3, [r5, #0]
 8012f6e:	b103      	cbz	r3, 8012f72 <_close_r+0x1a>
 8012f70:	6023      	str	r3, [r4, #0]
 8012f72:	bd38      	pop	{r3, r4, r5, pc}
 8012f74:	20040f54 	.word	0x20040f54

08012f78 <_fstat_r>:
 8012f78:	b538      	push	{r3, r4, r5, lr}
 8012f7a:	4d07      	ldr	r5, [pc, #28]	; (8012f98 <_fstat_r+0x20>)
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	4604      	mov	r4, r0
 8012f80:	4608      	mov	r0, r1
 8012f82:	4611      	mov	r1, r2
 8012f84:	602b      	str	r3, [r5, #0]
 8012f86:	f7f0 fddc 	bl	8003b42 <_fstat>
 8012f8a:	1c43      	adds	r3, r0, #1
 8012f8c:	d102      	bne.n	8012f94 <_fstat_r+0x1c>
 8012f8e:	682b      	ldr	r3, [r5, #0]
 8012f90:	b103      	cbz	r3, 8012f94 <_fstat_r+0x1c>
 8012f92:	6023      	str	r3, [r4, #0]
 8012f94:	bd38      	pop	{r3, r4, r5, pc}
 8012f96:	bf00      	nop
 8012f98:	20040f54 	.word	0x20040f54

08012f9c <_isatty_r>:
 8012f9c:	b538      	push	{r3, r4, r5, lr}
 8012f9e:	4d06      	ldr	r5, [pc, #24]	; (8012fb8 <_isatty_r+0x1c>)
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	4604      	mov	r4, r0
 8012fa4:	4608      	mov	r0, r1
 8012fa6:	602b      	str	r3, [r5, #0]
 8012fa8:	f7f0 fddb 	bl	8003b62 <_isatty>
 8012fac:	1c43      	adds	r3, r0, #1
 8012fae:	d102      	bne.n	8012fb6 <_isatty_r+0x1a>
 8012fb0:	682b      	ldr	r3, [r5, #0]
 8012fb2:	b103      	cbz	r3, 8012fb6 <_isatty_r+0x1a>
 8012fb4:	6023      	str	r3, [r4, #0]
 8012fb6:	bd38      	pop	{r3, r4, r5, pc}
 8012fb8:	20040f54 	.word	0x20040f54

08012fbc <_lseek_r>:
 8012fbc:	b538      	push	{r3, r4, r5, lr}
 8012fbe:	4d07      	ldr	r5, [pc, #28]	; (8012fdc <_lseek_r+0x20>)
 8012fc0:	4604      	mov	r4, r0
 8012fc2:	4608      	mov	r0, r1
 8012fc4:	4611      	mov	r1, r2
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	602a      	str	r2, [r5, #0]
 8012fca:	461a      	mov	r2, r3
 8012fcc:	f7f0 fdd4 	bl	8003b78 <_lseek>
 8012fd0:	1c43      	adds	r3, r0, #1
 8012fd2:	d102      	bne.n	8012fda <_lseek_r+0x1e>
 8012fd4:	682b      	ldr	r3, [r5, #0]
 8012fd6:	b103      	cbz	r3, 8012fda <_lseek_r+0x1e>
 8012fd8:	6023      	str	r3, [r4, #0]
 8012fda:	bd38      	pop	{r3, r4, r5, pc}
 8012fdc:	20040f54 	.word	0x20040f54

08012fe0 <__ascii_mbtowc>:
 8012fe0:	b082      	sub	sp, #8
 8012fe2:	b901      	cbnz	r1, 8012fe6 <__ascii_mbtowc+0x6>
 8012fe4:	a901      	add	r1, sp, #4
 8012fe6:	b142      	cbz	r2, 8012ffa <__ascii_mbtowc+0x1a>
 8012fe8:	b14b      	cbz	r3, 8012ffe <__ascii_mbtowc+0x1e>
 8012fea:	7813      	ldrb	r3, [r2, #0]
 8012fec:	600b      	str	r3, [r1, #0]
 8012fee:	7812      	ldrb	r2, [r2, #0]
 8012ff0:	1e10      	subs	r0, r2, #0
 8012ff2:	bf18      	it	ne
 8012ff4:	2001      	movne	r0, #1
 8012ff6:	b002      	add	sp, #8
 8012ff8:	4770      	bx	lr
 8012ffa:	4610      	mov	r0, r2
 8012ffc:	e7fb      	b.n	8012ff6 <__ascii_mbtowc+0x16>
 8012ffe:	f06f 0001 	mvn.w	r0, #1
 8013002:	e7f8      	b.n	8012ff6 <__ascii_mbtowc+0x16>

08013004 <memmove>:
 8013004:	4288      	cmp	r0, r1
 8013006:	b510      	push	{r4, lr}
 8013008:	eb01 0402 	add.w	r4, r1, r2
 801300c:	d902      	bls.n	8013014 <memmove+0x10>
 801300e:	4284      	cmp	r4, r0
 8013010:	4623      	mov	r3, r4
 8013012:	d807      	bhi.n	8013024 <memmove+0x20>
 8013014:	1e43      	subs	r3, r0, #1
 8013016:	42a1      	cmp	r1, r4
 8013018:	d008      	beq.n	801302c <memmove+0x28>
 801301a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801301e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013022:	e7f8      	b.n	8013016 <memmove+0x12>
 8013024:	4402      	add	r2, r0
 8013026:	4601      	mov	r1, r0
 8013028:	428a      	cmp	r2, r1
 801302a:	d100      	bne.n	801302e <memmove+0x2a>
 801302c:	bd10      	pop	{r4, pc}
 801302e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013036:	e7f7      	b.n	8013028 <memmove+0x24>

08013038 <_malloc_usable_size_r>:
 8013038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801303c:	1f18      	subs	r0, r3, #4
 801303e:	2b00      	cmp	r3, #0
 8013040:	bfbc      	itt	lt
 8013042:	580b      	ldrlt	r3, [r1, r0]
 8013044:	18c0      	addlt	r0, r0, r3
 8013046:	4770      	bx	lr

08013048 <_read_r>:
 8013048:	b538      	push	{r3, r4, r5, lr}
 801304a:	4d07      	ldr	r5, [pc, #28]	; (8013068 <_read_r+0x20>)
 801304c:	4604      	mov	r4, r0
 801304e:	4608      	mov	r0, r1
 8013050:	4611      	mov	r1, r2
 8013052:	2200      	movs	r2, #0
 8013054:	602a      	str	r2, [r5, #0]
 8013056:	461a      	mov	r2, r3
 8013058:	f7f0 fd2e 	bl	8003ab8 <_read>
 801305c:	1c43      	adds	r3, r0, #1
 801305e:	d102      	bne.n	8013066 <_read_r+0x1e>
 8013060:	682b      	ldr	r3, [r5, #0]
 8013062:	b103      	cbz	r3, 8013066 <_read_r+0x1e>
 8013064:	6023      	str	r3, [r4, #0]
 8013066:	bd38      	pop	{r3, r4, r5, pc}
 8013068:	20040f54 	.word	0x20040f54

0801306c <_raise_r>:
 801306c:	291f      	cmp	r1, #31
 801306e:	b538      	push	{r3, r4, r5, lr}
 8013070:	4604      	mov	r4, r0
 8013072:	460d      	mov	r5, r1
 8013074:	d904      	bls.n	8013080 <_raise_r+0x14>
 8013076:	2316      	movs	r3, #22
 8013078:	6003      	str	r3, [r0, #0]
 801307a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801307e:	bd38      	pop	{r3, r4, r5, pc}
 8013080:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013082:	b112      	cbz	r2, 801308a <_raise_r+0x1e>
 8013084:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013088:	b94b      	cbnz	r3, 801309e <_raise_r+0x32>
 801308a:	4620      	mov	r0, r4
 801308c:	f000 f830 	bl	80130f0 <_getpid_r>
 8013090:	462a      	mov	r2, r5
 8013092:	4601      	mov	r1, r0
 8013094:	4620      	mov	r0, r4
 8013096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801309a:	f000 b817 	b.w	80130cc <_kill_r>
 801309e:	2b01      	cmp	r3, #1
 80130a0:	d00a      	beq.n	80130b8 <_raise_r+0x4c>
 80130a2:	1c59      	adds	r1, r3, #1
 80130a4:	d103      	bne.n	80130ae <_raise_r+0x42>
 80130a6:	2316      	movs	r3, #22
 80130a8:	6003      	str	r3, [r0, #0]
 80130aa:	2001      	movs	r0, #1
 80130ac:	e7e7      	b.n	801307e <_raise_r+0x12>
 80130ae:	2400      	movs	r4, #0
 80130b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80130b4:	4628      	mov	r0, r5
 80130b6:	4798      	blx	r3
 80130b8:	2000      	movs	r0, #0
 80130ba:	e7e0      	b.n	801307e <_raise_r+0x12>

080130bc <raise>:
 80130bc:	4b02      	ldr	r3, [pc, #8]	; (80130c8 <raise+0xc>)
 80130be:	4601      	mov	r1, r0
 80130c0:	6818      	ldr	r0, [r3, #0]
 80130c2:	f7ff bfd3 	b.w	801306c <_raise_r>
 80130c6:	bf00      	nop
 80130c8:	2000002c 	.word	0x2000002c

080130cc <_kill_r>:
 80130cc:	b538      	push	{r3, r4, r5, lr}
 80130ce:	4d07      	ldr	r5, [pc, #28]	; (80130ec <_kill_r+0x20>)
 80130d0:	2300      	movs	r3, #0
 80130d2:	4604      	mov	r4, r0
 80130d4:	4608      	mov	r0, r1
 80130d6:	4611      	mov	r1, r2
 80130d8:	602b      	str	r3, [r5, #0]
 80130da:	f7f0 fcd3 	bl	8003a84 <_kill>
 80130de:	1c43      	adds	r3, r0, #1
 80130e0:	d102      	bne.n	80130e8 <_kill_r+0x1c>
 80130e2:	682b      	ldr	r3, [r5, #0]
 80130e4:	b103      	cbz	r3, 80130e8 <_kill_r+0x1c>
 80130e6:	6023      	str	r3, [r4, #0]
 80130e8:	bd38      	pop	{r3, r4, r5, pc}
 80130ea:	bf00      	nop
 80130ec:	20040f54 	.word	0x20040f54

080130f0 <_getpid_r>:
 80130f0:	f7f0 bcc0 	b.w	8003a74 <_getpid>

080130f4 <__ascii_wctomb>:
 80130f4:	b149      	cbz	r1, 801310a <__ascii_wctomb+0x16>
 80130f6:	2aff      	cmp	r2, #255	; 0xff
 80130f8:	bf85      	ittet	hi
 80130fa:	238a      	movhi	r3, #138	; 0x8a
 80130fc:	6003      	strhi	r3, [r0, #0]
 80130fe:	700a      	strbls	r2, [r1, #0]
 8013100:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013104:	bf98      	it	ls
 8013106:	2001      	movls	r0, #1
 8013108:	4770      	bx	lr
 801310a:	4608      	mov	r0, r1
 801310c:	4770      	bx	lr
	...

08013110 <log10>:
 8013110:	b538      	push	{r3, r4, r5, lr}
 8013112:	ed2d 8b02 	vpush	{d8}
 8013116:	ec55 4b10 	vmov	r4, r5, d0
 801311a:	f000 f841 	bl	80131a0 <__ieee754_log10>
 801311e:	4b1e      	ldr	r3, [pc, #120]	; (8013198 <log10+0x88>)
 8013120:	eeb0 8a40 	vmov.f32	s16, s0
 8013124:	eef0 8a60 	vmov.f32	s17, s1
 8013128:	f993 3000 	ldrsb.w	r3, [r3]
 801312c:	3301      	adds	r3, #1
 801312e:	d01a      	beq.n	8013166 <log10+0x56>
 8013130:	4622      	mov	r2, r4
 8013132:	462b      	mov	r3, r5
 8013134:	4620      	mov	r0, r4
 8013136:	4629      	mov	r1, r5
 8013138:	f7ed fd18 	bl	8000b6c <__aeabi_dcmpun>
 801313c:	b998      	cbnz	r0, 8013166 <log10+0x56>
 801313e:	2200      	movs	r2, #0
 8013140:	2300      	movs	r3, #0
 8013142:	4620      	mov	r0, r4
 8013144:	4629      	mov	r1, r5
 8013146:	f7ed fcf3 	bl	8000b30 <__aeabi_dcmple>
 801314a:	b160      	cbz	r0, 8013166 <log10+0x56>
 801314c:	2200      	movs	r2, #0
 801314e:	2300      	movs	r3, #0
 8013150:	4620      	mov	r0, r4
 8013152:	4629      	mov	r1, r5
 8013154:	f7ed fcd8 	bl	8000b08 <__aeabi_dcmpeq>
 8013158:	b160      	cbz	r0, 8013174 <log10+0x64>
 801315a:	f7fd f825 	bl	80101a8 <__errno>
 801315e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8013190 <log10+0x80>
 8013162:	2322      	movs	r3, #34	; 0x22
 8013164:	6003      	str	r3, [r0, #0]
 8013166:	eeb0 0a48 	vmov.f32	s0, s16
 801316a:	eef0 0a68 	vmov.f32	s1, s17
 801316e:	ecbd 8b02 	vpop	{d8}
 8013172:	bd38      	pop	{r3, r4, r5, pc}
 8013174:	f7fd f818 	bl	80101a8 <__errno>
 8013178:	ecbd 8b02 	vpop	{d8}
 801317c:	2321      	movs	r3, #33	; 0x21
 801317e:	6003      	str	r3, [r0, #0]
 8013180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013184:	4805      	ldr	r0, [pc, #20]	; (801319c <log10+0x8c>)
 8013186:	f000 b897 	b.w	80132b8 <nan>
 801318a:	bf00      	nop
 801318c:	f3af 8000 	nop.w
 8013190:	00000000 	.word	0x00000000
 8013194:	fff00000 	.word	0xfff00000
 8013198:	200001fc 	.word	0x200001fc
 801319c:	08015707 	.word	0x08015707

080131a0 <__ieee754_log10>:
 80131a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131a4:	ec55 4b10 	vmov	r4, r5, d0
 80131a8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80131ac:	462b      	mov	r3, r5
 80131ae:	da2f      	bge.n	8013210 <__ieee754_log10+0x70>
 80131b0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80131b4:	4322      	orrs	r2, r4
 80131b6:	d109      	bne.n	80131cc <__ieee754_log10+0x2c>
 80131b8:	493b      	ldr	r1, [pc, #236]	; (80132a8 <__ieee754_log10+0x108>)
 80131ba:	2200      	movs	r2, #0
 80131bc:	2300      	movs	r3, #0
 80131be:	2000      	movs	r0, #0
 80131c0:	f7ed fb64 	bl	800088c <__aeabi_ddiv>
 80131c4:	ec41 0b10 	vmov	d0, r0, r1
 80131c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131cc:	2d00      	cmp	r5, #0
 80131ce:	da09      	bge.n	80131e4 <__ieee754_log10+0x44>
 80131d0:	ee10 2a10 	vmov	r2, s0
 80131d4:	ee10 0a10 	vmov	r0, s0
 80131d8:	4629      	mov	r1, r5
 80131da:	f7ed f875 	bl	80002c8 <__aeabi_dsub>
 80131de:	2200      	movs	r2, #0
 80131e0:	2300      	movs	r3, #0
 80131e2:	e7ed      	b.n	80131c0 <__ieee754_log10+0x20>
 80131e4:	4b31      	ldr	r3, [pc, #196]	; (80132ac <__ieee754_log10+0x10c>)
 80131e6:	2200      	movs	r2, #0
 80131e8:	4629      	mov	r1, r5
 80131ea:	ee10 0a10 	vmov	r0, s0
 80131ee:	f7ed fa23 	bl	8000638 <__aeabi_dmul>
 80131f2:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80131f6:	4604      	mov	r4, r0
 80131f8:	460d      	mov	r5, r1
 80131fa:	460b      	mov	r3, r1
 80131fc:	492c      	ldr	r1, [pc, #176]	; (80132b0 <__ieee754_log10+0x110>)
 80131fe:	428b      	cmp	r3, r1
 8013200:	dd08      	ble.n	8013214 <__ieee754_log10+0x74>
 8013202:	4622      	mov	r2, r4
 8013204:	462b      	mov	r3, r5
 8013206:	4620      	mov	r0, r4
 8013208:	4629      	mov	r1, r5
 801320a:	f7ed f85f 	bl	80002cc <__adddf3>
 801320e:	e7d9      	b.n	80131c4 <__ieee754_log10+0x24>
 8013210:	2200      	movs	r2, #0
 8013212:	e7f3      	b.n	80131fc <__ieee754_log10+0x5c>
 8013214:	1518      	asrs	r0, r3, #20
 8013216:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801321a:	4410      	add	r0, r2
 801321c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8013220:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8013224:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8013228:	f7ed f99c 	bl	8000564 <__aeabi_i2d>
 801322c:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8013230:	3303      	adds	r3, #3
 8013232:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8013236:	ec45 4b10 	vmov	d0, r4, r5
 801323a:	4606      	mov	r6, r0
 801323c:	460f      	mov	r7, r1
 801323e:	f000 f843 	bl	80132c8 <__ieee754_log>
 8013242:	a313      	add	r3, pc, #76	; (adr r3, 8013290 <__ieee754_log10+0xf0>)
 8013244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013248:	4630      	mov	r0, r6
 801324a:	4639      	mov	r1, r7
 801324c:	ec59 8b10 	vmov	r8, r9, d0
 8013250:	f7ed f9f2 	bl	8000638 <__aeabi_dmul>
 8013254:	a310      	add	r3, pc, #64	; (adr r3, 8013298 <__ieee754_log10+0xf8>)
 8013256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801325a:	4604      	mov	r4, r0
 801325c:	460d      	mov	r5, r1
 801325e:	4640      	mov	r0, r8
 8013260:	4649      	mov	r1, r9
 8013262:	f7ed f9e9 	bl	8000638 <__aeabi_dmul>
 8013266:	4602      	mov	r2, r0
 8013268:	460b      	mov	r3, r1
 801326a:	4620      	mov	r0, r4
 801326c:	4629      	mov	r1, r5
 801326e:	f7ed f82d 	bl	80002cc <__adddf3>
 8013272:	a30b      	add	r3, pc, #44	; (adr r3, 80132a0 <__ieee754_log10+0x100>)
 8013274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013278:	4604      	mov	r4, r0
 801327a:	460d      	mov	r5, r1
 801327c:	4630      	mov	r0, r6
 801327e:	4639      	mov	r1, r7
 8013280:	f7ed f9da 	bl	8000638 <__aeabi_dmul>
 8013284:	4602      	mov	r2, r0
 8013286:	460b      	mov	r3, r1
 8013288:	4620      	mov	r0, r4
 801328a:	4629      	mov	r1, r5
 801328c:	e7bd      	b.n	801320a <__ieee754_log10+0x6a>
 801328e:	bf00      	nop
 8013290:	11f12b36 	.word	0x11f12b36
 8013294:	3d59fef3 	.word	0x3d59fef3
 8013298:	1526e50e 	.word	0x1526e50e
 801329c:	3fdbcb7b 	.word	0x3fdbcb7b
 80132a0:	509f6000 	.word	0x509f6000
 80132a4:	3fd34413 	.word	0x3fd34413
 80132a8:	c3500000 	.word	0xc3500000
 80132ac:	43500000 	.word	0x43500000
 80132b0:	7fefffff 	.word	0x7fefffff
 80132b4:	00000000 	.word	0x00000000

080132b8 <nan>:
 80132b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80132c0 <nan+0x8>
 80132bc:	4770      	bx	lr
 80132be:	bf00      	nop
 80132c0:	00000000 	.word	0x00000000
 80132c4:	7ff80000 	.word	0x7ff80000

080132c8 <__ieee754_log>:
 80132c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132cc:	ec51 0b10 	vmov	r0, r1, d0
 80132d0:	ed2d 8b04 	vpush	{d8-d9}
 80132d4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80132d8:	b083      	sub	sp, #12
 80132da:	460d      	mov	r5, r1
 80132dc:	da29      	bge.n	8013332 <__ieee754_log+0x6a>
 80132de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80132e2:	4303      	orrs	r3, r0
 80132e4:	ee10 2a10 	vmov	r2, s0
 80132e8:	d10c      	bne.n	8013304 <__ieee754_log+0x3c>
 80132ea:	49cf      	ldr	r1, [pc, #828]	; (8013628 <__ieee754_log+0x360>)
 80132ec:	2200      	movs	r2, #0
 80132ee:	2300      	movs	r3, #0
 80132f0:	2000      	movs	r0, #0
 80132f2:	f7ed facb 	bl	800088c <__aeabi_ddiv>
 80132f6:	ec41 0b10 	vmov	d0, r0, r1
 80132fa:	b003      	add	sp, #12
 80132fc:	ecbd 8b04 	vpop	{d8-d9}
 8013300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013304:	2900      	cmp	r1, #0
 8013306:	da05      	bge.n	8013314 <__ieee754_log+0x4c>
 8013308:	460b      	mov	r3, r1
 801330a:	f7ec ffdd 	bl	80002c8 <__aeabi_dsub>
 801330e:	2200      	movs	r2, #0
 8013310:	2300      	movs	r3, #0
 8013312:	e7ee      	b.n	80132f2 <__ieee754_log+0x2a>
 8013314:	4bc5      	ldr	r3, [pc, #788]	; (801362c <__ieee754_log+0x364>)
 8013316:	2200      	movs	r2, #0
 8013318:	f7ed f98e 	bl	8000638 <__aeabi_dmul>
 801331c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8013320:	460d      	mov	r5, r1
 8013322:	4ac3      	ldr	r2, [pc, #780]	; (8013630 <__ieee754_log+0x368>)
 8013324:	4295      	cmp	r5, r2
 8013326:	dd06      	ble.n	8013336 <__ieee754_log+0x6e>
 8013328:	4602      	mov	r2, r0
 801332a:	460b      	mov	r3, r1
 801332c:	f7ec ffce 	bl	80002cc <__adddf3>
 8013330:	e7e1      	b.n	80132f6 <__ieee754_log+0x2e>
 8013332:	2300      	movs	r3, #0
 8013334:	e7f5      	b.n	8013322 <__ieee754_log+0x5a>
 8013336:	152c      	asrs	r4, r5, #20
 8013338:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801333c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8013340:	441c      	add	r4, r3
 8013342:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8013346:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801334a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801334e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8013352:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8013356:	ea42 0105 	orr.w	r1, r2, r5
 801335a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801335e:	2200      	movs	r2, #0
 8013360:	4bb4      	ldr	r3, [pc, #720]	; (8013634 <__ieee754_log+0x36c>)
 8013362:	f7ec ffb1 	bl	80002c8 <__aeabi_dsub>
 8013366:	1cab      	adds	r3, r5, #2
 8013368:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801336c:	2b02      	cmp	r3, #2
 801336e:	4682      	mov	sl, r0
 8013370:	468b      	mov	fp, r1
 8013372:	f04f 0200 	mov.w	r2, #0
 8013376:	dc53      	bgt.n	8013420 <__ieee754_log+0x158>
 8013378:	2300      	movs	r3, #0
 801337a:	f7ed fbc5 	bl	8000b08 <__aeabi_dcmpeq>
 801337e:	b1d0      	cbz	r0, 80133b6 <__ieee754_log+0xee>
 8013380:	2c00      	cmp	r4, #0
 8013382:	f000 8122 	beq.w	80135ca <__ieee754_log+0x302>
 8013386:	4620      	mov	r0, r4
 8013388:	f7ed f8ec 	bl	8000564 <__aeabi_i2d>
 801338c:	a390      	add	r3, pc, #576	; (adr r3, 80135d0 <__ieee754_log+0x308>)
 801338e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013392:	4606      	mov	r6, r0
 8013394:	460f      	mov	r7, r1
 8013396:	f7ed f94f 	bl	8000638 <__aeabi_dmul>
 801339a:	a38f      	add	r3, pc, #572	; (adr r3, 80135d8 <__ieee754_log+0x310>)
 801339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133a0:	4604      	mov	r4, r0
 80133a2:	460d      	mov	r5, r1
 80133a4:	4630      	mov	r0, r6
 80133a6:	4639      	mov	r1, r7
 80133a8:	f7ed f946 	bl	8000638 <__aeabi_dmul>
 80133ac:	4602      	mov	r2, r0
 80133ae:	460b      	mov	r3, r1
 80133b0:	4620      	mov	r0, r4
 80133b2:	4629      	mov	r1, r5
 80133b4:	e7ba      	b.n	801332c <__ieee754_log+0x64>
 80133b6:	a38a      	add	r3, pc, #552	; (adr r3, 80135e0 <__ieee754_log+0x318>)
 80133b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133bc:	4650      	mov	r0, sl
 80133be:	4659      	mov	r1, fp
 80133c0:	f7ed f93a 	bl	8000638 <__aeabi_dmul>
 80133c4:	4602      	mov	r2, r0
 80133c6:	460b      	mov	r3, r1
 80133c8:	2000      	movs	r0, #0
 80133ca:	499b      	ldr	r1, [pc, #620]	; (8013638 <__ieee754_log+0x370>)
 80133cc:	f7ec ff7c 	bl	80002c8 <__aeabi_dsub>
 80133d0:	4652      	mov	r2, sl
 80133d2:	4606      	mov	r6, r0
 80133d4:	460f      	mov	r7, r1
 80133d6:	465b      	mov	r3, fp
 80133d8:	4650      	mov	r0, sl
 80133da:	4659      	mov	r1, fp
 80133dc:	f7ed f92c 	bl	8000638 <__aeabi_dmul>
 80133e0:	4602      	mov	r2, r0
 80133e2:	460b      	mov	r3, r1
 80133e4:	4630      	mov	r0, r6
 80133e6:	4639      	mov	r1, r7
 80133e8:	f7ed f926 	bl	8000638 <__aeabi_dmul>
 80133ec:	4606      	mov	r6, r0
 80133ee:	460f      	mov	r7, r1
 80133f0:	b914      	cbnz	r4, 80133f8 <__ieee754_log+0x130>
 80133f2:	4632      	mov	r2, r6
 80133f4:	463b      	mov	r3, r7
 80133f6:	e0a2      	b.n	801353e <__ieee754_log+0x276>
 80133f8:	4620      	mov	r0, r4
 80133fa:	f7ed f8b3 	bl	8000564 <__aeabi_i2d>
 80133fe:	a374      	add	r3, pc, #464	; (adr r3, 80135d0 <__ieee754_log+0x308>)
 8013400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013404:	4680      	mov	r8, r0
 8013406:	4689      	mov	r9, r1
 8013408:	f7ed f916 	bl	8000638 <__aeabi_dmul>
 801340c:	a372      	add	r3, pc, #456	; (adr r3, 80135d8 <__ieee754_log+0x310>)
 801340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013412:	4604      	mov	r4, r0
 8013414:	460d      	mov	r5, r1
 8013416:	4640      	mov	r0, r8
 8013418:	4649      	mov	r1, r9
 801341a:	f7ed f90d 	bl	8000638 <__aeabi_dmul>
 801341e:	e0a7      	b.n	8013570 <__ieee754_log+0x2a8>
 8013420:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013424:	f7ec ff52 	bl	80002cc <__adddf3>
 8013428:	4602      	mov	r2, r0
 801342a:	460b      	mov	r3, r1
 801342c:	4650      	mov	r0, sl
 801342e:	4659      	mov	r1, fp
 8013430:	f7ed fa2c 	bl	800088c <__aeabi_ddiv>
 8013434:	ec41 0b18 	vmov	d8, r0, r1
 8013438:	4620      	mov	r0, r4
 801343a:	f7ed f893 	bl	8000564 <__aeabi_i2d>
 801343e:	ec53 2b18 	vmov	r2, r3, d8
 8013442:	ec41 0b19 	vmov	d9, r0, r1
 8013446:	ec51 0b18 	vmov	r0, r1, d8
 801344a:	f7ed f8f5 	bl	8000638 <__aeabi_dmul>
 801344e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8013452:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8013456:	9301      	str	r3, [sp, #4]
 8013458:	4602      	mov	r2, r0
 801345a:	460b      	mov	r3, r1
 801345c:	4680      	mov	r8, r0
 801345e:	4689      	mov	r9, r1
 8013460:	f7ed f8ea 	bl	8000638 <__aeabi_dmul>
 8013464:	a360      	add	r3, pc, #384	; (adr r3, 80135e8 <__ieee754_log+0x320>)
 8013466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801346a:	4606      	mov	r6, r0
 801346c:	460f      	mov	r7, r1
 801346e:	f7ed f8e3 	bl	8000638 <__aeabi_dmul>
 8013472:	a35f      	add	r3, pc, #380	; (adr r3, 80135f0 <__ieee754_log+0x328>)
 8013474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013478:	f7ec ff28 	bl	80002cc <__adddf3>
 801347c:	4632      	mov	r2, r6
 801347e:	463b      	mov	r3, r7
 8013480:	f7ed f8da 	bl	8000638 <__aeabi_dmul>
 8013484:	a35c      	add	r3, pc, #368	; (adr r3, 80135f8 <__ieee754_log+0x330>)
 8013486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801348a:	f7ec ff1f 	bl	80002cc <__adddf3>
 801348e:	4632      	mov	r2, r6
 8013490:	463b      	mov	r3, r7
 8013492:	f7ed f8d1 	bl	8000638 <__aeabi_dmul>
 8013496:	a35a      	add	r3, pc, #360	; (adr r3, 8013600 <__ieee754_log+0x338>)
 8013498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801349c:	f7ec ff16 	bl	80002cc <__adddf3>
 80134a0:	4642      	mov	r2, r8
 80134a2:	464b      	mov	r3, r9
 80134a4:	f7ed f8c8 	bl	8000638 <__aeabi_dmul>
 80134a8:	a357      	add	r3, pc, #348	; (adr r3, 8013608 <__ieee754_log+0x340>)
 80134aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ae:	4680      	mov	r8, r0
 80134b0:	4689      	mov	r9, r1
 80134b2:	4630      	mov	r0, r6
 80134b4:	4639      	mov	r1, r7
 80134b6:	f7ed f8bf 	bl	8000638 <__aeabi_dmul>
 80134ba:	a355      	add	r3, pc, #340	; (adr r3, 8013610 <__ieee754_log+0x348>)
 80134bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134c0:	f7ec ff04 	bl	80002cc <__adddf3>
 80134c4:	4632      	mov	r2, r6
 80134c6:	463b      	mov	r3, r7
 80134c8:	f7ed f8b6 	bl	8000638 <__aeabi_dmul>
 80134cc:	a352      	add	r3, pc, #328	; (adr r3, 8013618 <__ieee754_log+0x350>)
 80134ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134d2:	f7ec fefb 	bl	80002cc <__adddf3>
 80134d6:	4632      	mov	r2, r6
 80134d8:	463b      	mov	r3, r7
 80134da:	f7ed f8ad 	bl	8000638 <__aeabi_dmul>
 80134de:	460b      	mov	r3, r1
 80134e0:	4602      	mov	r2, r0
 80134e2:	4649      	mov	r1, r9
 80134e4:	4640      	mov	r0, r8
 80134e6:	f7ec fef1 	bl	80002cc <__adddf3>
 80134ea:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80134ee:	9b01      	ldr	r3, [sp, #4]
 80134f0:	3551      	adds	r5, #81	; 0x51
 80134f2:	431d      	orrs	r5, r3
 80134f4:	2d00      	cmp	r5, #0
 80134f6:	4680      	mov	r8, r0
 80134f8:	4689      	mov	r9, r1
 80134fa:	dd48      	ble.n	801358e <__ieee754_log+0x2c6>
 80134fc:	4b4e      	ldr	r3, [pc, #312]	; (8013638 <__ieee754_log+0x370>)
 80134fe:	2200      	movs	r2, #0
 8013500:	4650      	mov	r0, sl
 8013502:	4659      	mov	r1, fp
 8013504:	f7ed f898 	bl	8000638 <__aeabi_dmul>
 8013508:	4652      	mov	r2, sl
 801350a:	465b      	mov	r3, fp
 801350c:	f7ed f894 	bl	8000638 <__aeabi_dmul>
 8013510:	4602      	mov	r2, r0
 8013512:	460b      	mov	r3, r1
 8013514:	4606      	mov	r6, r0
 8013516:	460f      	mov	r7, r1
 8013518:	4640      	mov	r0, r8
 801351a:	4649      	mov	r1, r9
 801351c:	f7ec fed6 	bl	80002cc <__adddf3>
 8013520:	ec53 2b18 	vmov	r2, r3, d8
 8013524:	f7ed f888 	bl	8000638 <__aeabi_dmul>
 8013528:	4680      	mov	r8, r0
 801352a:	4689      	mov	r9, r1
 801352c:	b964      	cbnz	r4, 8013548 <__ieee754_log+0x280>
 801352e:	4602      	mov	r2, r0
 8013530:	460b      	mov	r3, r1
 8013532:	4630      	mov	r0, r6
 8013534:	4639      	mov	r1, r7
 8013536:	f7ec fec7 	bl	80002c8 <__aeabi_dsub>
 801353a:	4602      	mov	r2, r0
 801353c:	460b      	mov	r3, r1
 801353e:	4650      	mov	r0, sl
 8013540:	4659      	mov	r1, fp
 8013542:	f7ec fec1 	bl	80002c8 <__aeabi_dsub>
 8013546:	e6d6      	b.n	80132f6 <__ieee754_log+0x2e>
 8013548:	a321      	add	r3, pc, #132	; (adr r3, 80135d0 <__ieee754_log+0x308>)
 801354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801354e:	ec51 0b19 	vmov	r0, r1, d9
 8013552:	f7ed f871 	bl	8000638 <__aeabi_dmul>
 8013556:	a320      	add	r3, pc, #128	; (adr r3, 80135d8 <__ieee754_log+0x310>)
 8013558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801355c:	4604      	mov	r4, r0
 801355e:	460d      	mov	r5, r1
 8013560:	ec51 0b19 	vmov	r0, r1, d9
 8013564:	f7ed f868 	bl	8000638 <__aeabi_dmul>
 8013568:	4642      	mov	r2, r8
 801356a:	464b      	mov	r3, r9
 801356c:	f7ec feae 	bl	80002cc <__adddf3>
 8013570:	4602      	mov	r2, r0
 8013572:	460b      	mov	r3, r1
 8013574:	4630      	mov	r0, r6
 8013576:	4639      	mov	r1, r7
 8013578:	f7ec fea6 	bl	80002c8 <__aeabi_dsub>
 801357c:	4652      	mov	r2, sl
 801357e:	465b      	mov	r3, fp
 8013580:	f7ec fea2 	bl	80002c8 <__aeabi_dsub>
 8013584:	4602      	mov	r2, r0
 8013586:	460b      	mov	r3, r1
 8013588:	4620      	mov	r0, r4
 801358a:	4629      	mov	r1, r5
 801358c:	e7d9      	b.n	8013542 <__ieee754_log+0x27a>
 801358e:	4602      	mov	r2, r0
 8013590:	460b      	mov	r3, r1
 8013592:	4650      	mov	r0, sl
 8013594:	4659      	mov	r1, fp
 8013596:	f7ec fe97 	bl	80002c8 <__aeabi_dsub>
 801359a:	ec53 2b18 	vmov	r2, r3, d8
 801359e:	f7ed f84b 	bl	8000638 <__aeabi_dmul>
 80135a2:	4606      	mov	r6, r0
 80135a4:	460f      	mov	r7, r1
 80135a6:	2c00      	cmp	r4, #0
 80135a8:	f43f af23 	beq.w	80133f2 <__ieee754_log+0x12a>
 80135ac:	a308      	add	r3, pc, #32	; (adr r3, 80135d0 <__ieee754_log+0x308>)
 80135ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135b2:	ec51 0b19 	vmov	r0, r1, d9
 80135b6:	f7ed f83f 	bl	8000638 <__aeabi_dmul>
 80135ba:	a307      	add	r3, pc, #28	; (adr r3, 80135d8 <__ieee754_log+0x310>)
 80135bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135c0:	4604      	mov	r4, r0
 80135c2:	460d      	mov	r5, r1
 80135c4:	ec51 0b19 	vmov	r0, r1, d9
 80135c8:	e727      	b.n	801341a <__ieee754_log+0x152>
 80135ca:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8013620 <__ieee754_log+0x358>
 80135ce:	e694      	b.n	80132fa <__ieee754_log+0x32>
 80135d0:	fee00000 	.word	0xfee00000
 80135d4:	3fe62e42 	.word	0x3fe62e42
 80135d8:	35793c76 	.word	0x35793c76
 80135dc:	3dea39ef 	.word	0x3dea39ef
 80135e0:	55555555 	.word	0x55555555
 80135e4:	3fd55555 	.word	0x3fd55555
 80135e8:	df3e5244 	.word	0xdf3e5244
 80135ec:	3fc2f112 	.word	0x3fc2f112
 80135f0:	96cb03de 	.word	0x96cb03de
 80135f4:	3fc74664 	.word	0x3fc74664
 80135f8:	94229359 	.word	0x94229359
 80135fc:	3fd24924 	.word	0x3fd24924
 8013600:	55555593 	.word	0x55555593
 8013604:	3fe55555 	.word	0x3fe55555
 8013608:	d078c69f 	.word	0xd078c69f
 801360c:	3fc39a09 	.word	0x3fc39a09
 8013610:	1d8e78af 	.word	0x1d8e78af
 8013614:	3fcc71c5 	.word	0x3fcc71c5
 8013618:	9997fa04 	.word	0x9997fa04
 801361c:	3fd99999 	.word	0x3fd99999
	...
 8013628:	c3500000 	.word	0xc3500000
 801362c:	43500000 	.word	0x43500000
 8013630:	7fefffff 	.word	0x7fefffff
 8013634:	3ff00000 	.word	0x3ff00000
 8013638:	3fe00000 	.word	0x3fe00000

0801363c <_init>:
 801363c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801363e:	bf00      	nop
 8013640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013642:	bc08      	pop	{r3}
 8013644:	469e      	mov	lr, r3
 8013646:	4770      	bx	lr

08013648 <_fini>:
 8013648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801364a:	bf00      	nop
 801364c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801364e:	bc08      	pop	{r3}
 8013650:	469e      	mov	lr, r3
 8013652:	4770      	bx	lr
