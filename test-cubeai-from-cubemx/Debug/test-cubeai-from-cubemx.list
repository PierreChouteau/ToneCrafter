
test-cubeai-from-cubemx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db70  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800dd40  0800dd40  0001dd40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de28  0800de28  00020674  2**0
                  CONTENTS
  4 .ARM          00000008  0800de28  0800de28  0001de28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de30  0800de30  00020674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de30  0800de30  0001de30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de34  0800de34  0001de34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000674  20000000  0800de38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001050  20000674  0800e4ac  00020674  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200016c4  0800e4ac  000216c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020674  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003512d  00000000  00000000  000206a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006302  00000000  00000000  000557d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002758  00000000  00000000  0005bad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000024d8  00000000  00000000  0005e230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032b7c  00000000  00000000  00060708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031c9f  00000000  00000000  00093284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012b920  00000000  00000000  000c4f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  001f0843  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000abdc  00000000  00000000  001f0914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000674 	.word	0x20000674
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800dd28 	.word	0x0800dd28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000678 	.word	0x20000678
 800020c:	0800dd28 	.word	0x0800dd28

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b5b0      	push	{r4, r5, r7, lr}
 80005aa:	b0be      	sub	sp, #248	; 0xf8
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  char buf[50];
  int buf_len = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_SINE_MODEL_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];

  // Pointer to our model
  ai_handle sine_model = AI_HANDLE_NULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	633b      	str	r3, [r7, #48]	; 0x30

  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 80005b8:	4b44      	ldr	r3, [pc, #272]	; (80006cc <main+0x124>)
 80005ba:	f107 0418 	add.w	r4, r7, #24
 80005be:	461d      	mov	r5, r3
 80005c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005c8:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 80005cc:	4b3f      	ldr	r3, [pc, #252]	; (80006cc <main+0x124>)
 80005ce:	463c      	mov	r4, r7
 80005d0:	461d      	mov	r5, r3
 80005d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005da:	e884 0003 	stmia.w	r4, {r0, r1}
//    AI_SINE_MODEL_DATA_ACTIVATIONS(activations)
//  }


  // Set pointers wrapper structs to our data buffers
  ai_input[0].n_batches = 1;
 80005de:	2301      	movs	r3, #1
 80005e0:	83bb      	strh	r3, [r7, #28]
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 80005e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28
  ai_output[0].n_batches = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	80bb      	strh	r3, [r7, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 80005ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005f0:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f002 fa32 	bl	8002a5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f873 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f001 f827 	bl	800164c <MX_GPIO_Init>
  MX_ADC3_Init();
 80005fe:	f000 f92f 	bl	8000860 <MX_ADC3_Init>
  MX_CRC_Init();
 8000602:	f000 f97f 	bl	8000904 <MX_CRC_Init>
  MX_DCMI_Init();
 8000606:	f000 f99f 	bl	8000948 <MX_DCMI_Init>
  MX_DMA2D_Init();
 800060a:	f000 f9d1 	bl	80009b0 <MX_DMA2D_Init>
  // MX_ETH_Init();
  MX_FMC_Init();
 800060e:	f000 ffcd 	bl	80015ac <MX_FMC_Init>
  MX_I2C1_Init();
 8000612:	f000 f9ff 	bl	8000a14 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000616:	f000 fa3d 	bl	8000a94 <MX_I2C3_Init>
  MX_LTDC_Init();
 800061a:	f000 fa7b 	bl	8000b14 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800061e:	f000 fafb 	bl	8000c18 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000622:	f000 fb25 	bl	8000c70 <MX_RTC_Init>
  MX_SAI2_Init();
 8000626:	f000 fbc9 	bl	8000dbc <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 800062a:	f000 fc6f 	bl	8000f0c <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800062e:	f000 fc8d 	bl	8000f4c <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 8000632:	f000 fcbb 	bl	8000fac <MX_TIM1_Init>
  MX_TIM2_Init();
 8000636:	f000 fd65 	bl	8001104 <MX_TIM2_Init>
  MX_TIM3_Init();
 800063a:	f000 fdd9 	bl	80011f0 <MX_TIM3_Init>
  MX_TIM5_Init();
 800063e:	f000 fe4f 	bl	80012e0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000642:	f000 fec5 	bl	80013d0 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000646:	f000 ff17 	bl	8001478 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800064a:	f000 ff4f 	bl	80014ec <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800064e:	f000 ff7d 	bl	800154c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000652:	f00b fbed 	bl	800be30 <MX_FATFS_Init>
  // MX_USB_HOST_Init();
  /* USER CODE BEGIN 2 */

  // Start timer/counter
  HAL_TIM_Base_Start(&htim12);
 8000656:	481e      	ldr	r0, [pc, #120]	; (80006d0 <main+0x128>)
 8000658:	f008 fd20 	bl	800909c <HAL_TIM_Base_Start>

  // Greetings!
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 800065c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000660:	491c      	ldr	r1, [pc, #112]	; (80006d4 <main+0x12c>)
 8000662:	4618      	mov	r0, r3
 8000664:	f00c fffa 	bl	800d65c <siprintf>
 8000668:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 800066c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000670:	b29a      	uxth	r2, r3
 8000672:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8000676:	2364      	movs	r3, #100	; 0x64
 8000678:	4817      	ldr	r0, [pc, #92]	; (80006d8 <main+0x130>)
 800067a:	f009 fe85 	bl	800a388 <HAL_UART_Transmit>

  // Create instance of neural network
  ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 800067e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f00b ff07 	bl	800c498 <ai_sine_model_create>
 800068a:	4603      	mov	r3, r0
 800068c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (ai_err.type != AI_ERROR_NONE)
 8000690:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8000694:	2b00      	cmp	r3, #0
 8000696:	d011      	beq.n	80006bc <main+0x114>
  {
    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000698:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800069c:	490f      	ldr	r1, [pc, #60]	; (80006dc <main+0x134>)
 800069e:	4618      	mov	r0, r3
 80006a0:	f00c ffdc 	bl	800d65c <siprintf>
 80006a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 80006a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	4808      	ldr	r0, [pc, #32]	; (80006d8 <main+0x130>)
 80006b6:	f009 fe67 	bl	800a388 <HAL_UART_Transmit>
    while(1);
 80006ba:	e7fe      	b.n	80006ba <main+0x112>
  {
    /* USER CODE END WHILE */
    // MX_USB_HOST_Process();

    /* USER CODE BEGIN 3 */
    LED_Toggle();
 80006bc:	f001 f998 	bl	80019f0 <LED_Toggle>
    HAL_Delay(400);
 80006c0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80006c4:	f002 f9f6 	bl	8002ab4 <HAL_Delay>
    LED_Toggle();
 80006c8:	e7f8      	b.n	80006bc <main+0x114>
 80006ca:	bf00      	nop
 80006cc:	0800dd84 	.word	0x0800dd84
 80006d0:	20000de4 	.word	0x20000de4
 80006d4:	0800dd40 	.word	0x0800dd40
 80006d8:	20000cd4 	.word	0x20000cd4
 80006dc:	0800dd5c 	.word	0x0800dd5c

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b0b4      	sub	sp, #208	; 0xd0
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006ea:	2230      	movs	r2, #48	; 0x30
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f00c fef2 	bl	800d4d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2284      	movs	r2, #132	; 0x84
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f00c fee3 	bl	800d4d8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000712:	f005 f9bb 	bl	8005a8c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b4f      	ldr	r3, [pc, #316]	; (8000854 <SystemClock_Config+0x174>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	4a4e      	ldr	r2, [pc, #312]	; (8000854 <SystemClock_Config+0x174>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000720:	6413      	str	r3, [r2, #64]	; 0x40
 8000722:	4b4c      	ldr	r3, [pc, #304]	; (8000854 <SystemClock_Config+0x174>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072e:	4b4a      	ldr	r3, [pc, #296]	; (8000858 <SystemClock_Config+0x178>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a49      	ldr	r2, [pc, #292]	; (8000858 <SystemClock_Config+0x178>)
 8000734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000738:	6013      	str	r3, [r2, #0]
 800073a:	4b47      	ldr	r3, [pc, #284]	; (8000858 <SystemClock_Config+0x178>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000746:	2309      	movs	r3, #9
 8000748:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800074c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000750:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075a:	2302      	movs	r3, #2
 800075c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000760:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000764:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000768:	2319      	movs	r3, #25
 800076a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800076e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000772:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000776:	2302      	movs	r3, #2
 8000778:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800077c:	2309      	movs	r3, #9
 800077e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000786:	4618      	mov	r0, r3
 8000788:	f005 faa2 	bl	8005cd0 <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000792:	f001 f949 	bl	8001a28 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000796:	f005 f989 	bl	8005aac <HAL_PWREx_EnableOverDrive>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007a0:	f001 f942 	bl	8001a28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007aa:	2302      	movs	r3, #2
 80007ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80007c6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007ca:	2106      	movs	r1, #6
 80007cc:	4618      	mov	r0, r3
 80007ce:	f005 fd23 	bl	8006218 <HAL_RCC_ClockConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80007d8:	f001 f926 	bl	8001a28 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <SystemClock_Config+0x17c>)
 80007de:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80007e0:	2364      	movs	r3, #100	; 0x64
 80007e2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80007f0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007f4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80007f6:	2305      	movs	r3, #5
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80007fe:	2303      	movs	r3, #3
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000802:	2301      	movs	r3, #1
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800080a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800080e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000814:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000816:	2300      	movs	r3, #0
 8000818:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800081a:	2300      	movs	r3, #0
 800081c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800081e:	2300      	movs	r3, #0
 8000820:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000822:	2300      	movs	r3, #0
 8000824:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000826:	2300      	movs	r3, #0
 8000828:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800082a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800082e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000832:	2300      	movs	r3, #0
 8000834:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	4618      	mov	r0, r3
 800083e:	f005 fef3 	bl	8006628 <HAL_RCCEx_PeriphCLKConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8000848:	f001 f8ee 	bl	8001a28 <Error_Handler>
  }
}
 800084c:	bf00      	nop
 800084e:	37d0      	adds	r7, #208	; 0xd0
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40007000 	.word	0x40007000
 800085c:	01b14868 	.word	0x01b14868

08000860 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000866:	463b      	mov	r3, r7
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_ADC3_Init+0x98>)
 8000874:	4a21      	ldr	r2, [pc, #132]	; (80008fc <MX_ADC3_Init+0x9c>)
 8000876:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MX_ADC3_Init+0x98>)
 800087a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800087e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_ADC3_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <MX_ADC3_Init+0x98>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_ADC3_Init+0x98>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_ADC3_Init+0x98>)
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_ADC3_Init+0x98>)
 800089c:	2200      	movs	r2, #0
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_ADC3_Init+0x98>)
 80008a2:	4a17      	ldr	r2, [pc, #92]	; (8000900 <MX_ADC3_Init+0xa0>)
 80008a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_ADC3_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_ADC3_Init+0x98>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_ADC3_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_ADC3_Init+0x98>)
 80008bc:	2201      	movs	r2, #1
 80008be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008c0:	480d      	ldr	r0, [pc, #52]	; (80008f8 <MX_ADC3_Init+0x98>)
 80008c2:	f002 f91b 	bl	8002afc <HAL_ADC_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80008cc:	f001 f8ac 	bl	8001a28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008d0:	2304      	movs	r3, #4
 80008d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008d4:	2301      	movs	r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_ADC3_Init+0x98>)
 80008e2:	f002 f94f 	bl	8002b84 <HAL_ADC_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80008ec:	f001 f89c 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000b4c 	.word	0x20000b4c
 80008fc:	40012200 	.word	0x40012200
 8000900:	0f000001 	.word	0x0f000001

08000904 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <MX_CRC_Init+0x3c>)
 800090a:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <MX_CRC_Init+0x40>)
 800090c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_CRC_Init+0x3c>)
 8000910:	2200      	movs	r2, #0
 8000912:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <MX_CRC_Init+0x3c>)
 8000916:	2200      	movs	r2, #0
 8000918:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_CRC_Init+0x3c>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <MX_CRC_Init+0x3c>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_CRC_Init+0x3c>)
 8000928:	2201      	movs	r2, #1
 800092a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_CRC_Init+0x3c>)
 800092e:	f002 fc4f 	bl	80031d0 <HAL_CRC_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000938:	f001 f876 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000964 	.word	0x20000964
 8000944:	40023000 	.word	0x40023000

08000948 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_DCMI_Init+0x60>)
 800094e:	4a17      	ldr	r2, [pc, #92]	; (80009ac <MX_DCMI_Init+0x64>)
 8000950:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_DCMI_Init+0x60>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_DCMI_Init+0x60>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_DCMI_Init+0x60>)
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000964:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_DCMI_Init+0x60>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_DCMI_Init+0x60>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <MX_DCMI_Init+0x60>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_DCMI_Init+0x60>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <MX_DCMI_Init+0x60>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_DCMI_Init+0x60>)
 8000984:	2200      	movs	r2, #0
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <MX_DCMI_Init+0x60>)
 800098a:	2200      	movs	r2, #0
 800098c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_DCMI_Init+0x60>)
 8000990:	2200      	movs	r2, #0
 8000992:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_DCMI_Init+0x60>)
 8000996:	f002 fd05 	bl	80033a4 <HAL_DCMI_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80009a0:	f001 f842 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000b94 	.word	0x20000b94
 80009ac:	50050000 	.word	0x50050000

080009b0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <MX_DMA2D_Init+0x5c>)
 80009b6:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <MX_DMA2D_Init+0x60>)
 80009b8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_DMA2D_Init+0x5c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <MX_DMA2D_Init+0x5c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_DMA2D_Init+0x5c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <MX_DMA2D_Init+0x5c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <MX_DMA2D_Init+0x5c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_DMA2D_Init+0x5c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <MX_DMA2D_Init+0x5c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009e4:	4809      	ldr	r0, [pc, #36]	; (8000a0c <MX_DMA2D_Init+0x5c>)
 80009e6:	f002 fd57 	bl	8003498 <HAL_DMA2D_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80009f0:	f001 f81a 	bl	8001a28 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009f4:	2101      	movs	r1, #1
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_DMA2D_Init+0x5c>)
 80009f8:	f002 fea8 	bl	800374c <HAL_DMA2D_ConfigLayer>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a02:	f001 f811 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000d58 	.word	0x20000d58
 8000a10:	4002b000 	.word	0x4002b000

08000a14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	; (8000a8c <MX_I2C1_Init+0x78>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a20:	4a1b      	ldr	r2, [pc, #108]	; (8000a90 <MX_I2C1_Init+0x7c>)
 8000a22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a4e:	480e      	ldr	r0, [pc, #56]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a50:	f004 fb8a 	bl	8005168 <HAL_I2C_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a5a:	f000 ffe5 	bl	8001a28 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4809      	ldr	r0, [pc, #36]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a62:	f004 fc11 	bl	8005288 <HAL_I2CEx_ConfigAnalogFilter>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a6c:	f000 ffdc 	bl	8001a28 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a70:	2100      	movs	r1, #0
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a74:	f004 fc53 	bl	800531e <HAL_I2CEx_ConfigDigitalFilter>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a7e:	f000 ffd3 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000918 	.word	0x20000918
 8000a8c:	40005400 	.word	0x40005400
 8000a90:	00c0eaff 	.word	0x00c0eaff

08000a94 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_I2C3_Init+0x74>)
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <MX_I2C3_Init+0x78>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_I2C3_Init+0x74>)
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <MX_I2C3_Init+0x7c>)
 8000aa2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_I2C3_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_I2C3_Init+0x74>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_I2C3_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_I2C3_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_I2C3_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_I2C3_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_I2C3_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ace:	480e      	ldr	r0, [pc, #56]	; (8000b08 <MX_I2C3_Init+0x74>)
 8000ad0:	f004 fb4a 	bl	8005168 <HAL_I2C_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000ada:	f000 ffa5 	bl	8001a28 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4809      	ldr	r0, [pc, #36]	; (8000b08 <MX_I2C3_Init+0x74>)
 8000ae2:	f004 fbd1 	bl	8005288 <HAL_I2CEx_ConfigAnalogFilter>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000aec:	f000 ff9c 	bl	8001a28 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000af0:	2100      	movs	r1, #0
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_I2C3_Init+0x74>)
 8000af4:	f004 fc13 	bl	800531e <HAL_I2CEx_ConfigDigitalFilter>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000afe:	f000 ff93 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200007b0 	.word	0x200007b0
 8000b0c:	40005c00 	.word	0x40005c00
 8000b10:	00c0eaff 	.word	0x00c0eaff

08000b14 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08e      	sub	sp, #56	; 0x38
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2234      	movs	r2, #52	; 0x34
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f00c fcd9 	bl	800d4d8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b26:	4b3a      	ldr	r3, [pc, #232]	; (8000c10 <MX_LTDC_Init+0xfc>)
 8000b28:	4a3a      	ldr	r2, [pc, #232]	; (8000c14 <MX_LTDC_Init+0x100>)
 8000b2a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b2c:	4b38      	ldr	r3, [pc, #224]	; (8000c10 <MX_LTDC_Init+0xfc>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b32:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <MX_LTDC_Init+0xfc>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b38:	4b35      	ldr	r3, [pc, #212]	; (8000c10 <MX_LTDC_Init+0xfc>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b3e:	4b34      	ldr	r3, [pc, #208]	; (8000c10 <MX_LTDC_Init+0xfc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000b44:	4b32      	ldr	r3, [pc, #200]	; (8000c10 <MX_LTDC_Init+0xfc>)
 8000b46:	2228      	movs	r2, #40	; 0x28
 8000b48:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000b4a:	4b31      	ldr	r3, [pc, #196]	; (8000c10 <MX_LTDC_Init+0xfc>)
 8000b4c:	2209      	movs	r2, #9
 8000b4e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000b50:	4b2f      	ldr	r3, [pc, #188]	; (8000c10 <MX_LTDC_Init+0xfc>)
 8000b52:	2235      	movs	r2, #53	; 0x35
 8000b54:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000b56:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <MX_LTDC_Init+0xfc>)
 8000b58:	220b      	movs	r2, #11
 8000b5a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000b5c:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <MX_LTDC_Init+0xfc>)
 8000b5e:	f240 2215 	movw	r2, #533	; 0x215
 8000b62:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000b64:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <MX_LTDC_Init+0xfc>)
 8000b66:	f240 121b 	movw	r2, #283	; 0x11b
 8000b6a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000b6c:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <MX_LTDC_Init+0xfc>)
 8000b6e:	f240 2235 	movw	r2, #565	; 0x235
 8000b72:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000b74:	4b26      	ldr	r3, [pc, #152]	; (8000c10 <MX_LTDC_Init+0xfc>)
 8000b76:	f240 121d 	movw	r2, #285	; 0x11d
 8000b7a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b7c:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <MX_LTDC_Init+0xfc>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <MX_LTDC_Init+0xfc>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b8c:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <MX_LTDC_Init+0xfc>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b94:	481e      	ldr	r0, [pc, #120]	; (8000c10 <MX_LTDC_Init+0xfc>)
 8000b96:	f004 fc0f 	bl	80053b8 <HAL_LTDC_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ba0:	f000 ff42 	bl	8001a28 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000ba8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bac:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000bb2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000bb6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000bbc:	23ff      	movs	r3, #255	; 0xff
 8000bbe:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000bc4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bc8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bca:	2307      	movs	r3, #7
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000bce:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000bd4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000bda:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_LTDC_Init+0xfc>)
 8000bfa:	f004 fd6f 	bl	80056dc <HAL_LTDC_ConfigLayer>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000c04:	f000 ff10 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	3738      	adds	r7, #56	; 0x38
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000aa4 	.word	0x20000aa4
 8000c14:	40016800 	.word	0x40016800

08000c18 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <MX_QUADSPI_Init+0x50>)
 8000c1e:	4a13      	ldr	r2, [pc, #76]	; (8000c6c <MX_QUADSPI_Init+0x54>)
 8000c20:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_QUADSPI_Init+0x50>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_QUADSPI_Init+0x50>)
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_QUADSPI_Init+0x50>)
 8000c30:	2210      	movs	r2, #16
 8000c32:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_QUADSPI_Init+0x50>)
 8000c36:	2218      	movs	r2, #24
 8000c38:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_QUADSPI_Init+0x50>)
 8000c3c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000c40:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_QUADSPI_Init+0x50>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <MX_QUADSPI_Init+0x50>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_QUADSPI_Init+0x50>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <MX_QUADSPI_Init+0x50>)
 8000c56:	f004 ff79 	bl	8005b4c <HAL_QSPI_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000c60:	f000 fee2 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000eac 	.word	0x20000eac
 8000c6c:	a0001000 	.word	0xa0001000

08000c70 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b092      	sub	sp, #72	; 0x48
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]
 8000c86:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	222c      	movs	r2, #44	; 0x2c
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f00c fc20 	bl	800d4d8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c98:	4b46      	ldr	r3, [pc, #280]	; (8000db4 <MX_RTC_Init+0x144>)
 8000c9a:	4a47      	ldr	r2, [pc, #284]	; (8000db8 <MX_RTC_Init+0x148>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c9e:	4b45      	ldr	r3, [pc, #276]	; (8000db4 <MX_RTC_Init+0x144>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ca4:	4b43      	ldr	r3, [pc, #268]	; (8000db4 <MX_RTC_Init+0x144>)
 8000ca6:	227f      	movs	r2, #127	; 0x7f
 8000ca8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000caa:	4b42      	ldr	r3, [pc, #264]	; (8000db4 <MX_RTC_Init+0x144>)
 8000cac:	22ff      	movs	r2, #255	; 0xff
 8000cae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cb0:	4b40      	ldr	r3, [pc, #256]	; (8000db4 <MX_RTC_Init+0x144>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cb6:	4b3f      	ldr	r3, [pc, #252]	; (8000db4 <MX_RTC_Init+0x144>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cbc:	4b3d      	ldr	r3, [pc, #244]	; (8000db4 <MX_RTC_Init+0x144>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cc2:	483c      	ldr	r0, [pc, #240]	; (8000db4 <MX_RTC_Init+0x144>)
 8000cc4:	f006 f9e4 	bl	8007090 <HAL_RTC_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000cce:	f000 feab 	bl	8001a28 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	482f      	ldr	r0, [pc, #188]	; (8000db4 <MX_RTC_Init+0x144>)
 8000cf6:	f006 fa5d 	bl	80071b4 <HAL_RTC_SetTime>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000d00:	f000 fe92 	bl	8001a28 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d04:	2301      	movs	r3, #1
 8000d06:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000d10:	2301      	movs	r3, #1
 8000d12:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d20:	2201      	movs	r2, #1
 8000d22:	4619      	mov	r1, r3
 8000d24:	4823      	ldr	r0, [pc, #140]	; (8000db4 <MX_RTC_Init+0x144>)
 8000d26:	f006 fb03 	bl	8007330 <HAL_RTC_SetDate>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000d30:	f000 fe7a 	bl	8001a28 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d64:	463b      	mov	r3, r7
 8000d66:	2201      	movs	r2, #1
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4812      	ldr	r0, [pc, #72]	; (8000db4 <MX_RTC_Init+0x144>)
 8000d6c:	f006 fb88 	bl	8007480 <HAL_RTC_SetAlarm>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000d76:	f000 fe57 	bl	8001a28 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d80:	463b      	mov	r3, r7
 8000d82:	2201      	movs	r2, #1
 8000d84:	4619      	mov	r1, r3
 8000d86:	480b      	ldr	r0, [pc, #44]	; (8000db4 <MX_RTC_Init+0x144>)
 8000d88:	f006 fb7a 	bl	8007480 <HAL_RTC_SetAlarm>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000d92:	f000 fe49 	bl	8001a28 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000d96:	2202      	movs	r2, #2
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4806      	ldr	r0, [pc, #24]	; (8000db4 <MX_RTC_Init+0x144>)
 8000d9c:	f006 fcfa 	bl	8007794 <HAL_RTCEx_SetTimeStamp>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000da6:	f000 fe3f 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	3748      	adds	r7, #72	; 0x48
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000c68 	.word	0x20000c68
 8000db8:	40002800 	.word	0x40002800

08000dbc <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000dc0:	4b4d      	ldr	r3, [pc, #308]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000dc2:	4a4e      	ldr	r2, [pc, #312]	; (8000efc <MX_SAI2_Init+0x140>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000dc6:	4b4c      	ldr	r3, [pc, #304]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000dcc:	4b4a      	ldr	r3, [pc, #296]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000dd2:	4b49      	ldr	r3, [pc, #292]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000dd4:	2240      	movs	r2, #64	; 0x40
 8000dd6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000dd8:	4b47      	ldr	r3, [pc, #284]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000dde:	4b46      	ldr	r3, [pc, #280]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000de4:	4b44      	ldr	r3, [pc, #272]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000dea:	4b43      	ldr	r3, [pc, #268]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000df0:	4b41      	ldr	r3, [pc, #260]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000df6:	4b40      	ldr	r3, [pc, #256]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000dfc:	4b3e      	ldr	r3, [pc, #248]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000dfe:	4a40      	ldr	r2, [pc, #256]	; (8000f00 <MX_SAI2_Init+0x144>)
 8000e00:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e02:	4b3d      	ldr	r3, [pc, #244]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e08:	4b3b      	ldr	r3, [pc, #236]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e0e:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e14:	4b38      	ldr	r3, [pc, #224]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000e1a:	4b37      	ldr	r3, [pc, #220]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000e1c:	2208      	movs	r2, #8
 8000e1e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000e20:	4b35      	ldr	r3, [pc, #212]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e26:	4b34      	ldr	r3, [pc, #208]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e2c:	4b32      	ldr	r3, [pc, #200]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e32:	4b31      	ldr	r3, [pc, #196]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000e38:	4b2f      	ldr	r3, [pc, #188]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e3e:	4b2e      	ldr	r3, [pc, #184]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000e44:	4b2c      	ldr	r3, [pc, #176]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000e4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000e50:	4829      	ldr	r0, [pc, #164]	; (8000ef8 <MX_SAI2_Init+0x13c>)
 8000e52:	f006 fcf5 	bl	8007840 <HAL_SAI_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000e5c:	f000 fde4 	bl	8001a28 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000e60:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000e62:	4a29      	ldr	r2, [pc, #164]	; (8000f08 <MX_SAI2_Init+0x14c>)
 8000e64:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e66:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000e6c:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000e6e:	2203      	movs	r2, #3
 8000e70:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000e72:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000e74:	2240      	movs	r2, #64	; 0x40
 8000e76:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e78:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e90:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000eb0:	2208      	movs	r2, #8
 8000eb2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ec0:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000ee4:	4807      	ldr	r0, [pc, #28]	; (8000f04 <MX_SAI2_Init+0x148>)
 8000ee6:	f006 fcab 	bl	8007840 <HAL_SAI_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000ef0:	f000 fd9a 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000894 	.word	0x20000894
 8000efc:	40015c04 	.word	0x40015c04
 8000f00:	0002ee00 	.word	0x0002ee00
 8000f04:	2000072c 	.word	0x2000072c
 8000f08:	40015c24 	.word	0x40015c24

08000f0c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_SDMMC1_SD_Init+0x38>)
 8000f12:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <MX_SDMMC1_SD_Init+0x3c>)
 8000f14:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <MX_SDMMC1_SD_Init+0x38>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_SDMMC1_SD_Init+0x38>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <MX_SDMMC1_SD_Init+0x38>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_SDMMC1_SD_Init+0x38>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <MX_SDMMC1_SD_Init+0x38>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <MX_SDMMC1_SD_Init+0x38>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	20000988 	.word	0x20000988
 8000f48:	40012c00 	.word	0x40012c00

08000f4c <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_SPDIFRX_Init+0x5c>)
 8000f52:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000f56:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <MX_SPDIFRX_Init+0x5c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_SPDIFRX_Init+0x5c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <MX_SPDIFRX_Init+0x5c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_SPDIFRX_Init+0x5c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000f70:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <MX_SPDIFRX_Init+0x5c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_SPDIFRX_Init+0x5c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <MX_SPDIFRX_Init+0x5c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_SPDIFRX_Init+0x5c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <MX_SPDIFRX_Init+0x5c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_SPDIFRX_Init+0x5c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <MX_SPDIFRX_Init+0x5c>)
 8000f96:	f007 ffcd 	bl	8008f34 <HAL_SPDIFRX_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000fa0:	f000 fd42 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000848 	.word	0x20000848

08000fac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b09a      	sub	sp, #104	; 0x68
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
 8000fdc:	615a      	str	r2, [r3, #20]
 8000fde:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	222c      	movs	r2, #44	; 0x2c
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f00c fa76 	bl	800d4d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fec:	4b43      	ldr	r3, [pc, #268]	; (80010fc <MX_TIM1_Init+0x150>)
 8000fee:	4a44      	ldr	r2, [pc, #272]	; (8001100 <MX_TIM1_Init+0x154>)
 8000ff0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ff2:	4b42      	ldr	r3, [pc, #264]	; (80010fc <MX_TIM1_Init+0x150>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff8:	4b40      	ldr	r3, [pc, #256]	; (80010fc <MX_TIM1_Init+0x150>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ffe:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <MX_TIM1_Init+0x150>)
 8001000:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001004:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001006:	4b3d      	ldr	r3, [pc, #244]	; (80010fc <MX_TIM1_Init+0x150>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800100c:	4b3b      	ldr	r3, [pc, #236]	; (80010fc <MX_TIM1_Init+0x150>)
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001012:	4b3a      	ldr	r3, [pc, #232]	; (80010fc <MX_TIM1_Init+0x150>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001018:	4838      	ldr	r0, [pc, #224]	; (80010fc <MX_TIM1_Init+0x150>)
 800101a:	f007 ffe7 	bl	8008fec <HAL_TIM_Base_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001024:	f000 fd00 	bl	8001a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800102e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001032:	4619      	mov	r1, r3
 8001034:	4831      	ldr	r0, [pc, #196]	; (80010fc <MX_TIM1_Init+0x150>)
 8001036:	f008 fba9 	bl	800978c <HAL_TIM_ConfigClockSource>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001040:	f000 fcf2 	bl	8001a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001044:	482d      	ldr	r0, [pc, #180]	; (80010fc <MX_TIM1_Init+0x150>)
 8001046:	f008 f911 	bl	800926c <HAL_TIM_PWM_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001050:	f000 fcea 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001060:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001064:	4619      	mov	r1, r3
 8001066:	4825      	ldr	r0, [pc, #148]	; (80010fc <MX_TIM1_Init+0x150>)
 8001068:	f009 f816 	bl	800a098 <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001072:	f000 fcd9 	bl	8001a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001076:	2360      	movs	r3, #96	; 0x60
 8001078:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800107e:	2300      	movs	r3, #0
 8001080:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001082:	2300      	movs	r3, #0
 8001084:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800108a:	2300      	movs	r3, #0
 800108c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800108e:	2300      	movs	r3, #0
 8001090:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001092:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001096:	2200      	movs	r2, #0
 8001098:	4619      	mov	r1, r3
 800109a:	4818      	ldr	r0, [pc, #96]	; (80010fc <MX_TIM1_Init+0x150>)
 800109c:	f008 fa66 	bl	800956c <HAL_TIM_PWM_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010a6:	f000 fcbf 	bl	8001a28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4619      	mov	r1, r3
 80010de:	4807      	ldr	r0, [pc, #28]	; (80010fc <MX_TIM1_Init+0x150>)
 80010e0:	f009 f868 	bl	800a1b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80010ea:	f000 fc9d 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010ee:	4803      	ldr	r0, [pc, #12]	; (80010fc <MX_TIM1_Init+0x150>)
 80010f0:	f001 f956 	bl	80023a0 <HAL_TIM_MspPostInit>

}
 80010f4:	bf00      	nop
 80010f6:	3768      	adds	r7, #104	; 0x68
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000c88 	.word	0x20000c88
 8001100:	40010000 	.word	0x40010000

08001104 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08e      	sub	sp, #56	; 0x38
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001124:	463b      	mov	r3, r7
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]
 8001132:	615a      	str	r2, [r3, #20]
 8001134:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001136:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <MX_TIM2_Init+0xe8>)
 8001138:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800113c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <MX_TIM2_Init+0xe8>)
 8001140:	2200      	movs	r2, #0
 8001142:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001144:	4b29      	ldr	r3, [pc, #164]	; (80011ec <MX_TIM2_Init+0xe8>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800114a:	4b28      	ldr	r3, [pc, #160]	; (80011ec <MX_TIM2_Init+0xe8>)
 800114c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001150:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <MX_TIM2_Init+0xe8>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001158:	4b24      	ldr	r3, [pc, #144]	; (80011ec <MX_TIM2_Init+0xe8>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800115e:	4823      	ldr	r0, [pc, #140]	; (80011ec <MX_TIM2_Init+0xe8>)
 8001160:	f007 ff44 	bl	8008fec <HAL_TIM_Base_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800116a:	f000 fc5d 	bl	8001a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001174:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001178:	4619      	mov	r1, r3
 800117a:	481c      	ldr	r0, [pc, #112]	; (80011ec <MX_TIM2_Init+0xe8>)
 800117c:	f008 fb06 	bl	800978c <HAL_TIM_ConfigClockSource>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001186:	f000 fc4f 	bl	8001a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800118a:	4818      	ldr	r0, [pc, #96]	; (80011ec <MX_TIM2_Init+0xe8>)
 800118c:	f008 f86e 	bl	800926c <HAL_TIM_PWM_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001196:	f000 fc47 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	4619      	mov	r1, r3
 80011a8:	4810      	ldr	r0, [pc, #64]	; (80011ec <MX_TIM2_Init+0xe8>)
 80011aa:	f008 ff75 	bl	800a098 <HAL_TIMEx_MasterConfigSynchronization>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80011b4:	f000 fc38 	bl	8001a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b8:	2360      	movs	r3, #96	; 0x60
 80011ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c8:	463b      	mov	r3, r7
 80011ca:	2200      	movs	r2, #0
 80011cc:	4619      	mov	r1, r3
 80011ce:	4807      	ldr	r0, [pc, #28]	; (80011ec <MX_TIM2_Init+0xe8>)
 80011d0:	f008 f9cc 	bl	800956c <HAL_TIM_PWM_ConfigChannel>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80011da:	f000 fc25 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011de:	4803      	ldr	r0, [pc, #12]	; (80011ec <MX_TIM2_Init+0xe8>)
 80011e0:	f001 f8de 	bl	80023a0 <HAL_TIM_MspPostInit>

}
 80011e4:	bf00      	nop
 80011e6:	3738      	adds	r7, #56	; 0x38
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000d98 	.word	0x20000d98

080011f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08e      	sub	sp, #56	; 0x38
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001210:	463b      	mov	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
 800121e:	615a      	str	r2, [r3, #20]
 8001220:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001222:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <MX_TIM3_Init+0xe8>)
 8001224:	4a2d      	ldr	r2, [pc, #180]	; (80012dc <MX_TIM3_Init+0xec>)
 8001226:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001228:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <MX_TIM3_Init+0xe8>)
 800122a:	2200      	movs	r2, #0
 800122c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122e:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <MX_TIM3_Init+0xe8>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001234:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <MX_TIM3_Init+0xe8>)
 8001236:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800123a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <MX_TIM3_Init+0xe8>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <MX_TIM3_Init+0xe8>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001248:	4823      	ldr	r0, [pc, #140]	; (80012d8 <MX_TIM3_Init+0xe8>)
 800124a:	f007 fecf 	bl	8008fec <HAL_TIM_Base_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001254:	f000 fbe8 	bl	8001a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800125e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001262:	4619      	mov	r1, r3
 8001264:	481c      	ldr	r0, [pc, #112]	; (80012d8 <MX_TIM3_Init+0xe8>)
 8001266:	f008 fa91 	bl	800978c <HAL_TIM_ConfigClockSource>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001270:	f000 fbda 	bl	8001a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001274:	4818      	ldr	r0, [pc, #96]	; (80012d8 <MX_TIM3_Init+0xe8>)
 8001276:	f007 fff9 	bl	800926c <HAL_TIM_PWM_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001280:	f000 fbd2 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4619      	mov	r1, r3
 8001292:	4811      	ldr	r0, [pc, #68]	; (80012d8 <MX_TIM3_Init+0xe8>)
 8001294:	f008 ff00 	bl	800a098 <HAL_TIMEx_MasterConfigSynchronization>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800129e:	f000 fbc3 	bl	8001a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a2:	2360      	movs	r3, #96	; 0x60
 80012a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b2:	463b      	mov	r3, r7
 80012b4:	2200      	movs	r2, #0
 80012b6:	4619      	mov	r1, r3
 80012b8:	4807      	ldr	r0, [pc, #28]	; (80012d8 <MX_TIM3_Init+0xe8>)
 80012ba:	f008 f957 	bl	800956c <HAL_TIM_PWM_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80012c4:	f000 fbb0 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012c8:	4803      	ldr	r0, [pc, #12]	; (80012d8 <MX_TIM3_Init+0xe8>)
 80012ca:	f001 f869 	bl	80023a0 <HAL_TIM_MspPostInit>

}
 80012ce:	bf00      	nop
 80012d0:	3738      	adds	r7, #56	; 0x38
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000a58 	.word	0x20000a58
 80012dc:	40000400 	.word	0x40000400

080012e0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08e      	sub	sp, #56	; 0x38
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001300:	463b      	mov	r3, r7
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
 800130e:	615a      	str	r2, [r3, #20]
 8001310:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001312:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <MX_TIM5_Init+0xe8>)
 8001314:	4a2d      	ldr	r2, [pc, #180]	; (80013cc <MX_TIM5_Init+0xec>)
 8001316:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001318:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <MX_TIM5_Init+0xe8>)
 800131a:	2200      	movs	r2, #0
 800131c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131e:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <MX_TIM5_Init+0xe8>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001324:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <MX_TIM5_Init+0xe8>)
 8001326:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800132a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132c:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <MX_TIM5_Init+0xe8>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <MX_TIM5_Init+0xe8>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001338:	4823      	ldr	r0, [pc, #140]	; (80013c8 <MX_TIM5_Init+0xe8>)
 800133a:	f007 fe57 	bl	8008fec <HAL_TIM_Base_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001344:	f000 fb70 	bl	8001a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800134e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001352:	4619      	mov	r1, r3
 8001354:	481c      	ldr	r0, [pc, #112]	; (80013c8 <MX_TIM5_Init+0xe8>)
 8001356:	f008 fa19 	bl	800978c <HAL_TIM_ConfigClockSource>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001360:	f000 fb62 	bl	8001a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001364:	4818      	ldr	r0, [pc, #96]	; (80013c8 <MX_TIM5_Init+0xe8>)
 8001366:	f007 ff81 	bl	800926c <HAL_TIM_PWM_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001370:	f000 fb5a 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	4811      	ldr	r0, [pc, #68]	; (80013c8 <MX_TIM5_Init+0xe8>)
 8001384:	f008 fe88 	bl	800a098 <HAL_TIMEx_MasterConfigSynchronization>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800138e:	f000 fb4b 	bl	8001a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001392:	2360      	movs	r3, #96	; 0x60
 8001394:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013a2:	463b      	mov	r3, r7
 80013a4:	220c      	movs	r2, #12
 80013a6:	4619      	mov	r1, r3
 80013a8:	4807      	ldr	r0, [pc, #28]	; (80013c8 <MX_TIM5_Init+0xe8>)
 80013aa:	f008 f8df 	bl	800956c <HAL_TIM_PWM_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80013b4:	f000 fb38 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80013b8:	4803      	ldr	r0, [pc, #12]	; (80013c8 <MX_TIM5_Init+0xe8>)
 80013ba:	f000 fff1 	bl	80023a0 <HAL_TIM_MspPostInit>

}
 80013be:	bf00      	nop
 80013c0:	3738      	adds	r7, #56	; 0x38
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000a0c 	.word	0x20000a0c
 80013cc:	40000c00 	.word	0x40000c00

080013d0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80013ee:	4b20      	ldr	r3, [pc, #128]	; (8001470 <MX_TIM8_Init+0xa0>)
 80013f0:	4a20      	ldr	r2, [pc, #128]	; (8001474 <MX_TIM8_Init+0xa4>)
 80013f2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <MX_TIM8_Init+0xa0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fa:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <MX_TIM8_Init+0xa0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <MX_TIM8_Init+0xa0>)
 8001402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001406:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <MX_TIM8_Init+0xa0>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800140e:	4b18      	ldr	r3, [pc, #96]	; (8001470 <MX_TIM8_Init+0xa0>)
 8001410:	2200      	movs	r2, #0
 8001412:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001414:	4b16      	ldr	r3, [pc, #88]	; (8001470 <MX_TIM8_Init+0xa0>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800141a:	4815      	ldr	r0, [pc, #84]	; (8001470 <MX_TIM8_Init+0xa0>)
 800141c:	f007 fde6 	bl	8008fec <HAL_TIM_Base_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001426:	f000 faff 	bl	8001a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4619      	mov	r1, r3
 8001436:	480e      	ldr	r0, [pc, #56]	; (8001470 <MX_TIM8_Init+0xa0>)
 8001438:	f008 f9a8 	bl	800978c <HAL_TIM_ConfigClockSource>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001442:	f000 faf1 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	4619      	mov	r1, r3
 8001456:	4806      	ldr	r0, [pc, #24]	; (8001470 <MX_TIM8_Init+0xa0>)
 8001458:	f008 fe1e 	bl	800a098 <HAL_TIMEx_MasterConfigSynchronization>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001462:	f000 fae1 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	3720      	adds	r7, #32
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200007fc 	.word	0x200007fc
 8001474:	40010400 	.word	0x40010400

08001478 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147e:	463b      	mov	r3, r7
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <MX_TIM12_Init+0x6c>)
 800148c:	4a16      	ldr	r2, [pc, #88]	; (80014e8 <MX_TIM12_Init+0x70>)
 800148e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 80 - 1;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_TIM12_Init+0x6c>)
 8001492:	224f      	movs	r2, #79	; 0x4f
 8001494:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MX_TIM12_Init+0x6c>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_TIM12_Init+0x6c>)
 800149e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <MX_TIM12_Init+0x6c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_TIM12_Init+0x6c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <MX_TIM12_Init+0x6c>)
 80014b2:	f007 fd9b 	bl	8008fec <HAL_TIM_Base_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 80014bc:	f000 fab4 	bl	8001a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80014c6:	463b      	mov	r3, r7
 80014c8:	4619      	mov	r1, r3
 80014ca:	4806      	ldr	r0, [pc, #24]	; (80014e4 <MX_TIM12_Init+0x6c>)
 80014cc:	f008 f95e 	bl	800978c <HAL_TIM_ConfigClockSource>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80014d6:	f000 faa7 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000de4 	.word	0x20000de4
 80014e8:	40001800 	.word	0x40001800

080014ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_USART1_UART_Init+0x58>)
 80014f2:	4a15      	ldr	r2, [pc, #84]	; (8001548 <MX_USART1_UART_Init+0x5c>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <MX_USART1_UART_Init+0x58>)
 80014f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_USART1_UART_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_USART1_UART_Init+0x58>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_USART1_UART_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001530:	f008 fedc 	bl	800a2ec <HAL_UART_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800153a:	f000 fa75 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000be4 	.word	0x20000be4
 8001548:	40011000 	.word	0x40011000

0800154c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <MX_USART6_UART_Init+0x58>)
 8001552:	4a15      	ldr	r2, [pc, #84]	; (80015a8 <MX_USART6_UART_Init+0x5c>)
 8001554:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_USART6_UART_Init+0x58>)
 8001558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800155c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_USART6_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_USART6_UART_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MX_USART6_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <MX_USART6_UART_Init+0x58>)
 8001572:	220c      	movs	r2, #12
 8001574:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <MX_USART6_UART_Init+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <MX_USART6_UART_Init+0x58>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <MX_USART6_UART_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <MX_USART6_UART_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_USART6_UART_Init+0x58>)
 8001590:	f008 feac 	bl	800a2ec <HAL_UART_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800159a:	f000 fa45 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000cd4 	.word	0x20000cd4
 80015a8:	40011400 	.word	0x40011400

080015ac <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
 80015c0:	615a      	str	r2, [r3, #20]
 80015c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80015c4:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <MX_FMC_Init+0x98>)
 80015c6:	4a20      	ldr	r2, [pc, #128]	; (8001648 <MX_FMC_Init+0x9c>)
 80015c8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80015ca:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <MX_FMC_Init+0x98>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80015d0:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <MX_FMC_Init+0x98>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <MX_FMC_Init+0x98>)
 80015d8:	2204      	movs	r2, #4
 80015da:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <MX_FMC_Init+0x98>)
 80015de:	2210      	movs	r2, #16
 80015e0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <MX_FMC_Init+0x98>)
 80015e4:	2240      	movs	r2, #64	; 0x40
 80015e6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MX_FMC_Init+0x98>)
 80015ea:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80015ee:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_FMC_Init+0x98>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <MX_FMC_Init+0x98>)
 80015f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015fc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_FMC_Init+0x98>)
 8001600:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_FMC_Init+0x98>)
 8001608:	2200      	movs	r2, #0
 800160a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800160c:	2302      	movs	r3, #2
 800160e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001610:	2307      	movs	r3, #7
 8001612:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001614:	2304      	movs	r3, #4
 8001616:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001618:	2307      	movs	r3, #7
 800161a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800161c:	2303      	movs	r3, #3
 800161e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001620:	2302      	movs	r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001624:	2302      	movs	r3, #2
 8001626:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_FMC_Init+0x98>)
 800162e:	f007 fc4c 	bl	8008eca <HAL_SDRAM_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001638:	f000 f9f6 	bl	8001a28 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000e30 	.word	0x20000e30
 8001648:	a0000140 	.word	0xa0000140

0800164c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b090      	sub	sp, #64	; 0x40
 8001650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001662:	4baf      	ldr	r3, [pc, #700]	; (8001920 <MX_GPIO_Init+0x2d4>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4aae      	ldr	r2, [pc, #696]	; (8001920 <MX_GPIO_Init+0x2d4>)
 8001668:	f043 0310 	orr.w	r3, r3, #16
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4bac      	ldr	r3, [pc, #688]	; (8001920 <MX_GPIO_Init+0x2d4>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
 8001678:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800167a:	4ba9      	ldr	r3, [pc, #676]	; (8001920 <MX_GPIO_Init+0x2d4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4aa8      	ldr	r2, [pc, #672]	; (8001920 <MX_GPIO_Init+0x2d4>)
 8001680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4ba6      	ldr	r3, [pc, #664]	; (8001920 <MX_GPIO_Init+0x2d4>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	4ba3      	ldr	r3, [pc, #652]	; (8001920 <MX_GPIO_Init+0x2d4>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4aa2      	ldr	r2, [pc, #648]	; (8001920 <MX_GPIO_Init+0x2d4>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4ba0      	ldr	r3, [pc, #640]	; (8001920 <MX_GPIO_Init+0x2d4>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	623b      	str	r3, [r7, #32]
 80016a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016aa:	4b9d      	ldr	r3, [pc, #628]	; (8001920 <MX_GPIO_Init+0x2d4>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a9c      	ldr	r2, [pc, #624]	; (8001920 <MX_GPIO_Init+0x2d4>)
 80016b0:	f043 0308 	orr.w	r3, r3, #8
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b9a      	ldr	r3, [pc, #616]	; (8001920 <MX_GPIO_Init+0x2d4>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	61fb      	str	r3, [r7, #28]
 80016c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c2:	4b97      	ldr	r3, [pc, #604]	; (8001920 <MX_GPIO_Init+0x2d4>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a96      	ldr	r2, [pc, #600]	; (8001920 <MX_GPIO_Init+0x2d4>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b94      	ldr	r3, [pc, #592]	; (8001920 <MX_GPIO_Init+0x2d4>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	61bb      	str	r3, [r7, #24]
 80016d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b91      	ldr	r3, [pc, #580]	; (8001920 <MX_GPIO_Init+0x2d4>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a90      	ldr	r2, [pc, #576]	; (8001920 <MX_GPIO_Init+0x2d4>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b8e      	ldr	r3, [pc, #568]	; (8001920 <MX_GPIO_Init+0x2d4>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016f2:	4b8b      	ldr	r3, [pc, #556]	; (8001920 <MX_GPIO_Init+0x2d4>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a8a      	ldr	r2, [pc, #552]	; (8001920 <MX_GPIO_Init+0x2d4>)
 80016f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b88      	ldr	r3, [pc, #544]	; (8001920 <MX_GPIO_Init+0x2d4>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800170a:	4b85      	ldr	r3, [pc, #532]	; (8001920 <MX_GPIO_Init+0x2d4>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a84      	ldr	r2, [pc, #528]	; (8001920 <MX_GPIO_Init+0x2d4>)
 8001710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b82      	ldr	r3, [pc, #520]	; (8001920 <MX_GPIO_Init+0x2d4>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001722:	4b7f      	ldr	r3, [pc, #508]	; (8001920 <MX_GPIO_Init+0x2d4>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a7e      	ldr	r2, [pc, #504]	; (8001920 <MX_GPIO_Init+0x2d4>)
 8001728:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b7c      	ldr	r3, [pc, #496]	; (8001920 <MX_GPIO_Init+0x2d4>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800173a:	4b79      	ldr	r3, [pc, #484]	; (8001920 <MX_GPIO_Init+0x2d4>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a78      	ldr	r2, [pc, #480]	; (8001920 <MX_GPIO_Init+0x2d4>)
 8001740:	f043 0320 	orr.w	r3, r3, #32
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b76      	ldr	r3, [pc, #472]	; (8001920 <MX_GPIO_Init+0x2d4>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0320 	and.w	r3, r3, #32
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001752:	4b73      	ldr	r3, [pc, #460]	; (8001920 <MX_GPIO_Init+0x2d4>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a72      	ldr	r2, [pc, #456]	; (8001920 <MX_GPIO_Init+0x2d4>)
 8001758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b70      	ldr	r3, [pc, #448]	; (8001920 <MX_GPIO_Init+0x2d4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800176a:	2201      	movs	r2, #1
 800176c:	2120      	movs	r1, #32
 800176e:	486d      	ldr	r0, [pc, #436]	; (8001924 <MX_GPIO_Init+0x2d8>)
 8001770:	f002 fa42 	bl	8003bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 8001774:	2200      	movs	r2, #0
 8001776:	210e      	movs	r1, #14
 8001778:	486b      	ldr	r0, [pc, #428]	; (8001928 <MX_GPIO_Init+0x2dc>)
 800177a:	f002 fa3d 	bl	8003bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800177e:	2201      	movs	r2, #1
 8001780:	2108      	movs	r1, #8
 8001782:	486a      	ldr	r0, [pc, #424]	; (800192c <MX_GPIO_Init+0x2e0>)
 8001784:	f002 fa38 	bl	8003bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001788:	2201      	movs	r2, #1
 800178a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800178e:	4866      	ldr	r0, [pc, #408]	; (8001928 <MX_GPIO_Init+0x2dc>)
 8001790:	f002 fa32 	bl	8003bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800179a:	4865      	ldr	r0, [pc, #404]	; (8001930 <MX_GPIO_Init+0x2e4>)
 800179c:	f002 fa2c 	bl	8003bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	21c8      	movs	r1, #200	; 0xc8
 80017a4:	4863      	ldr	r0, [pc, #396]	; (8001934 <MX_GPIO_Init+0x2e8>)
 80017a6:	f002 fa27 	bl	8003bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80017aa:	2308      	movs	r3, #8
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ae:	2300      	movs	r3, #0
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ba:	4619      	mov	r1, r3
 80017bc:	485e      	ldr	r0, [pc, #376]	; (8001938 <MX_GPIO_Init+0x2ec>)
 80017be:	f002 f857 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80017c2:	f643 4323 	movw	r3, #15395	; 0x3c23
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017d4:	230a      	movs	r3, #10
 80017d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017dc:	4619      	mov	r1, r3
 80017de:	4857      	ldr	r0, [pc, #348]	; (800193c <MX_GPIO_Init+0x2f0>)
 80017e0:	f002 f846 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80017e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ea:	2300      	movs	r3, #0
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f6:	4619      	mov	r1, r3
 80017f8:	4851      	ldr	r0, [pc, #324]	; (8001940 <MX_GPIO_Init+0x2f4>)
 80017fa:	f002 f839 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80017fe:	2340      	movs	r3, #64	; 0x40
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001802:	4b50      	ldr	r3, [pc, #320]	; (8001944 <MX_GPIO_Init+0x2f8>)
 8001804:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800180a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800180e:	4619      	mov	r1, r3
 8001810:	4844      	ldr	r0, [pc, #272]	; (8001924 <MX_GPIO_Init+0x2d8>)
 8001812:	f002 f82d 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001816:	2320      	movs	r3, #32
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181a:	2301      	movs	r3, #1
 800181c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182a:	4619      	mov	r1, r3
 800182c:	483d      	ldr	r0, [pc, #244]	; (8001924 <MX_GPIO_Init+0x2d8>)
 800182e:	f002 f81f 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 8001832:	f241 030e 	movw	r3, #4110	; 0x100e
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001844:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001848:	4619      	mov	r1, r3
 800184a:	4837      	ldr	r0, [pc, #220]	; (8001928 <MX_GPIO_Init+0x2dc>)
 800184c:	f002 f810 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001856:	2300      	movs	r3, #0
 8001858:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800185e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001862:	4619      	mov	r1, r3
 8001864:	4838      	ldr	r0, [pc, #224]	; (8001948 <MX_GPIO_Init+0x2fc>)
 8001866:	f002 f803 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800186a:	2308      	movs	r3, #8
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186e:	2301      	movs	r3, #1
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187e:	4619      	mov	r1, r3
 8001880:	482a      	ldr	r0, [pc, #168]	; (800192c <MX_GPIO_Init+0x2e0>)
 8001882:	f001 fff5 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001886:	2310      	movs	r3, #16
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188a:	2300      	movs	r3, #0
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001896:	4619      	mov	r1, r3
 8001898:	4822      	ldr	r0, [pc, #136]	; (8001924 <MX_GPIO_Init+0x2d8>)
 800189a:	f001 ffe9 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800189e:	f248 0304 	movw	r3, #32772	; 0x8004
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a4:	2300      	movs	r3, #0
 80018a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b0:	4619      	mov	r1, r3
 80018b2:	481f      	ldr	r0, [pc, #124]	; (8001930 <MX_GPIO_Init+0x2e4>)
 80018b4:	f001 ffdc 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80018b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80018ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ce:	4619      	mov	r1, r3
 80018d0:	4817      	ldr	r0, [pc, #92]	; (8001930 <MX_GPIO_Init+0x2e4>)
 80018d2:	f001 ffcd 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80018d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <MX_GPIO_Init+0x2f8>)
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e8:	4619      	mov	r1, r3
 80018ea:	480f      	ldr	r0, [pc, #60]	; (8001928 <MX_GPIO_Init+0x2dc>)
 80018ec:	f001 ffc0 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80018f0:	2310      	movs	r3, #16
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001900:	230a      	movs	r3, #10
 8001902:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001908:	4619      	mov	r1, r3
 800190a:	4809      	ldr	r0, [pc, #36]	; (8001930 <MX_GPIO_Init+0x2e4>)
 800190c:	f001 ffb0 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001910:	23c8      	movs	r3, #200	; 0xc8
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001914:	2301      	movs	r3, #1
 8001916:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	637b      	str	r3, [r7, #52]	; 0x34
 800191c:	e016      	b.n	800194c <MX_GPIO_Init+0x300>
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40020c00 	.word	0x40020c00
 8001928:	40022000 	.word	0x40022000
 800192c:	40022800 	.word	0x40022800
 8001930:	40021c00 	.word	0x40021c00
 8001934:	40021800 	.word	0x40021800
 8001938:	40021000 	.word	0x40021000
 800193c:	40020400 	.word	0x40020400
 8001940:	40022400 	.word	0x40022400
 8001944:	10120000 	.word	0x10120000
 8001948:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001950:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001954:	4619      	mov	r1, r3
 8001956:	4822      	ldr	r0, [pc, #136]	; (80019e0 <MX_GPIO_Init+0x394>)
 8001958:	f001 ff8a 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800195c:	2305      	movs	r3, #5
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800196c:	230a      	movs	r3, #10
 800196e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001974:	4619      	mov	r1, r3
 8001976:	481b      	ldr	r0, [pc, #108]	; (80019e4 <MX_GPIO_Init+0x398>)
 8001978:	f001 ff7a 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800197c:	2304      	movs	r3, #4
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001980:	2300      	movs	r3, #0
 8001982:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198c:	4619      	mov	r1, r3
 800198e:	4814      	ldr	r0, [pc, #80]	; (80019e0 <MX_GPIO_Init+0x394>)
 8001990:	f001 ff6e 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001994:	2328      	movs	r3, #40	; 0x28
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a0:	2303      	movs	r3, #3
 80019a2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019a4:	230a      	movs	r3, #10
 80019a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ac:	4619      	mov	r1, r3
 80019ae:	480e      	ldr	r0, [pc, #56]	; (80019e8 <MX_GPIO_Init+0x39c>)
 80019b0:	f001 ff5e 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80019b4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019c6:	2305      	movs	r3, #5
 80019c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ce:	4619      	mov	r1, r3
 80019d0:	4806      	ldr	r0, [pc, #24]	; (80019ec <MX_GPIO_Init+0x3a0>)
 80019d2:	f001 ff4d 	bl	8003870 <HAL_GPIO_Init>

}
 80019d6:	bf00      	nop
 80019d8:	3740      	adds	r7, #64	; 0x40
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40021800 	.word	0x40021800
 80019e4:	40020800 	.word	0x40020800
 80019e8:	40020000 	.word	0x40020000
 80019ec:	40020400 	.word	0x40020400

080019f0 <LED_Toggle>:
void LED_Off(){

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
}

void LED_Toggle(){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 80019f4:	2102      	movs	r1, #2
 80019f6:	4802      	ldr	r0, [pc, #8]	; (8001a00 <LED_Toggle+0x10>)
 80019f8:	f002 f917 	bl	8003c2a <HAL_GPIO_TogglePin>
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40022000 	.word	0x40022000

08001a04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d101      	bne.n	8001a1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a16:	f001 f82d 	bl	8002a74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40001000 	.word	0x40001000

08001a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a2c:	b672      	cpsid	i
}
 8001a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <Error_Handler+0x8>
	...

08001a34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <HAL_MspInit+0x44>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a0e      	ldr	r2, [pc, #56]	; (8001a78 <HAL_MspInit+0x44>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <HAL_MspInit+0x44>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HAL_MspInit+0x44>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	4a08      	ldr	r2, [pc, #32]	; (8001a78 <HAL_MspInit+0x44>)
 8001a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_MspInit+0x44>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800

08001a7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	; 0x28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a21      	ldr	r2, [pc, #132]	; (8001b20 <HAL_ADC_MspInit+0xa4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d13c      	bne.n	8001b18 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a9e:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <HAL_ADC_MspInit+0xa8>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	4a20      	ldr	r2, [pc, #128]	; (8001b24 <HAL_ADC_MspInit+0xa8>)
 8001aa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <HAL_ADC_MspInit+0xa8>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <HAL_ADC_MspInit+0xa8>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a1a      	ldr	r2, [pc, #104]	; (8001b24 <HAL_ADC_MspInit+0xa8>)
 8001abc:	f043 0320 	orr.w	r3, r3, #32
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <HAL_ADC_MspInit+0xa8>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0320 	and.w	r3, r3, #32
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <HAL_ADC_MspInit+0xa8>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <HAL_ADC_MspInit+0xa8>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_ADC_MspInit+0xa8>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001ae6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001aea:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aec:	2303      	movs	r3, #3
 8001aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	4619      	mov	r1, r3
 8001afa:	480b      	ldr	r0, [pc, #44]	; (8001b28 <HAL_ADC_MspInit+0xac>)
 8001afc:	f001 feb8 	bl	8003870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001b00:	2301      	movs	r3, #1
 8001b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b04:	2303      	movs	r3, #3
 8001b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4619      	mov	r1, r3
 8001b12:	4806      	ldr	r0, [pc, #24]	; (8001b2c <HAL_ADC_MspInit+0xb0>)
 8001b14:	f001 feac 	bl	8003870 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001b18:	bf00      	nop
 8001b1a:	3728      	adds	r7, #40	; 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40012200 	.word	0x40012200
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40021400 	.word	0x40021400
 8001b2c:	40020000 	.word	0x40020000

08001b30 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <HAL_CRC_MspInit+0x38>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d10b      	bne.n	8001b5a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_CRC_MspInit+0x3c>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <HAL_CRC_MspInit+0x3c>)
 8001b48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <HAL_CRC_MspInit+0x3c>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b5a:	bf00      	nop
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023000 	.word	0x40023000
 8001b6c:	40023800 	.word	0x40023800

08001b70 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08e      	sub	sp, #56	; 0x38
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a50      	ldr	r2, [pc, #320]	; (8001cd0 <HAL_DCMI_MspInit+0x160>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	f040 809a 	bne.w	8001cc8 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001b94:	4b4f      	ldr	r3, [pc, #316]	; (8001cd4 <HAL_DCMI_MspInit+0x164>)
 8001b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b98:	4a4e      	ldr	r2, [pc, #312]	; (8001cd4 <HAL_DCMI_MspInit+0x164>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6353      	str	r3, [r2, #52]	; 0x34
 8001ba0:	4b4c      	ldr	r3, [pc, #304]	; (8001cd4 <HAL_DCMI_MspInit+0x164>)
 8001ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	623b      	str	r3, [r7, #32]
 8001baa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bac:	4b49      	ldr	r3, [pc, #292]	; (8001cd4 <HAL_DCMI_MspInit+0x164>)
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	4a48      	ldr	r2, [pc, #288]	; (8001cd4 <HAL_DCMI_MspInit+0x164>)
 8001bb2:	f043 0310 	orr.w	r3, r3, #16
 8001bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb8:	4b46      	ldr	r3, [pc, #280]	; (8001cd4 <HAL_DCMI_MspInit+0x164>)
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc4:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <HAL_DCMI_MspInit+0x164>)
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	4a42      	ldr	r2, [pc, #264]	; (8001cd4 <HAL_DCMI_MspInit+0x164>)
 8001bca:	f043 0308 	orr.w	r3, r3, #8
 8001bce:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd0:	4b40      	ldr	r3, [pc, #256]	; (8001cd4 <HAL_DCMI_MspInit+0x164>)
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bdc:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <HAL_DCMI_MspInit+0x164>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	4a3c      	ldr	r2, [pc, #240]	; (8001cd4 <HAL_DCMI_MspInit+0x164>)
 8001be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001be6:	6313      	str	r3, [r2, #48]	; 0x30
 8001be8:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <HAL_DCMI_MspInit+0x164>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bf4:	4b37      	ldr	r3, [pc, #220]	; (8001cd4 <HAL_DCMI_MspInit+0x164>)
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	4a36      	ldr	r2, [pc, #216]	; (8001cd4 <HAL_DCMI_MspInit+0x164>)
 8001bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001c00:	4b34      	ldr	r3, [pc, #208]	; (8001cd4 <HAL_DCMI_MspInit+0x164>)
 8001c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0c:	4b31      	ldr	r3, [pc, #196]	; (8001cd4 <HAL_DCMI_MspInit+0x164>)
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	4a30      	ldr	r2, [pc, #192]	; (8001cd4 <HAL_DCMI_MspInit+0x164>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6313      	str	r3, [r2, #48]	; 0x30
 8001c18:	4b2e      	ldr	r3, [pc, #184]	; (8001cd4 <HAL_DCMI_MspInit+0x164>)
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001c24:	2360      	movs	r3, #96	; 0x60
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c34:	230d      	movs	r3, #13
 8001c36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4826      	ldr	r0, [pc, #152]	; (8001cd8 <HAL_DCMI_MspInit+0x168>)
 8001c40:	f001 fe16 	bl	8003870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001c44:	2308      	movs	r3, #8
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c54:	230d      	movs	r3, #13
 8001c56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	481f      	ldr	r0, [pc, #124]	; (8001cdc <HAL_DCMI_MspInit+0x16c>)
 8001c60:	f001 fe06 	bl	8003870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c76:	230d      	movs	r3, #13
 8001c78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4817      	ldr	r0, [pc, #92]	; (8001ce0 <HAL_DCMI_MspInit+0x170>)
 8001c82:	f001 fdf5 	bl	8003870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001c86:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c98:	230d      	movs	r3, #13
 8001c9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4810      	ldr	r0, [pc, #64]	; (8001ce4 <HAL_DCMI_MspInit+0x174>)
 8001ca4:	f001 fde4 	bl	8003870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001ca8:	2350      	movs	r3, #80	; 0x50
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cb8:	230d      	movs	r3, #13
 8001cba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4809      	ldr	r0, [pc, #36]	; (8001ce8 <HAL_DCMI_MspInit+0x178>)
 8001cc4:	f001 fdd4 	bl	8003870 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001cc8:	bf00      	nop
 8001cca:	3738      	adds	r7, #56	; 0x38
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	50050000 	.word	0x50050000
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40020c00 	.word	0x40020c00
 8001ce0:	40021800 	.word	0x40021800
 8001ce4:	40021c00 	.word	0x40021c00
 8001ce8:	40020000 	.word	0x40020000

08001cec <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0d      	ldr	r2, [pc, #52]	; (8001d30 <HAL_DMA2D_MspInit+0x44>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d113      	bne.n	8001d26 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <HAL_DMA2D_MspInit+0x48>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <HAL_DMA2D_MspInit+0x48>)
 8001d04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_DMA2D_MspInit+0x48>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	205a      	movs	r0, #90	; 0x5a
 8001d1c:	f001 fa2e 	bl	800317c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001d20:	205a      	movs	r0, #90	; 0x5a
 8001d22:	f001 fa47 	bl	80031b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	4002b000 	.word	0x4002b000
 8001d34:	40023800 	.word	0x40023800

08001d38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08c      	sub	sp, #48	; 0x30
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a2f      	ldr	r2, [pc, #188]	; (8001e14 <HAL_I2C_MspInit+0xdc>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d129      	bne.n	8001dae <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	4b2f      	ldr	r3, [pc, #188]	; (8001e18 <HAL_I2C_MspInit+0xe0>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a2e      	ldr	r2, [pc, #184]	; (8001e18 <HAL_I2C_MspInit+0xe0>)
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b2c      	ldr	r3, [pc, #176]	; (8001e18 <HAL_I2C_MspInit+0xe0>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	61bb      	str	r3, [r7, #24]
 8001d70:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001d72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d78:	2312      	movs	r3, #18
 8001d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2300      	movs	r3, #0
 8001d82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d84:	2304      	movs	r3, #4
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d88:	f107 031c 	add.w	r3, r7, #28
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4823      	ldr	r0, [pc, #140]	; (8001e1c <HAL_I2C_MspInit+0xe4>)
 8001d90:	f001 fd6e 	bl	8003870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d94:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <HAL_I2C_MspInit+0xe0>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	4a1f      	ldr	r2, [pc, #124]	; (8001e18 <HAL_I2C_MspInit+0xe0>)
 8001d9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001da0:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <HAL_I2C_MspInit+0xe0>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001dac:	e02d      	b.n	8001e0a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a1b      	ldr	r2, [pc, #108]	; (8001e20 <HAL_I2C_MspInit+0xe8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d128      	bne.n	8001e0a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001db8:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <HAL_I2C_MspInit+0xe0>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	4a16      	ldr	r2, [pc, #88]	; (8001e18 <HAL_I2C_MspInit+0xe0>)
 8001dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <HAL_I2C_MspInit+0xe0>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001dd0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd6:	2312      	movs	r3, #18
 8001dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dde:	2303      	movs	r3, #3
 8001de0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001de2:	2304      	movs	r3, #4
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001de6:	f107 031c 	add.w	r3, r7, #28
 8001dea:	4619      	mov	r1, r3
 8001dec:	480d      	ldr	r0, [pc, #52]	; (8001e24 <HAL_I2C_MspInit+0xec>)
 8001dee:	f001 fd3f 	bl	8003870 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_I2C_MspInit+0xe0>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	4a08      	ldr	r2, [pc, #32]	; (8001e18 <HAL_I2C_MspInit+0xe0>)
 8001df8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_I2C_MspInit+0xe0>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
}
 8001e0a:	bf00      	nop
 8001e0c:	3730      	adds	r7, #48	; 0x30
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40005400 	.word	0x40005400
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020400 	.word	0x40020400
 8001e20:	40005c00 	.word	0x40005c00
 8001e24:	40021c00 	.word	0x40021c00

08001e28 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08e      	sub	sp, #56	; 0x38
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a55      	ldr	r2, [pc, #340]	; (8001f9c <HAL_LTDC_MspInit+0x174>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	f040 80a3 	bne.w	8001f92 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001e4c:	4b54      	ldr	r3, [pc, #336]	; (8001fa0 <HAL_LTDC_MspInit+0x178>)
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e50:	4a53      	ldr	r2, [pc, #332]	; (8001fa0 <HAL_LTDC_MspInit+0x178>)
 8001e52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e56:	6453      	str	r3, [r2, #68]	; 0x44
 8001e58:	4b51      	ldr	r3, [pc, #324]	; (8001fa0 <HAL_LTDC_MspInit+0x178>)
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e60:	623b      	str	r3, [r7, #32]
 8001e62:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e64:	4b4e      	ldr	r3, [pc, #312]	; (8001fa0 <HAL_LTDC_MspInit+0x178>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	4a4d      	ldr	r2, [pc, #308]	; (8001fa0 <HAL_LTDC_MspInit+0x178>)
 8001e6a:	f043 0310 	orr.w	r3, r3, #16
 8001e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e70:	4b4b      	ldr	r3, [pc, #300]	; (8001fa0 <HAL_LTDC_MspInit+0x178>)
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	61fb      	str	r3, [r7, #28]
 8001e7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001e7c:	4b48      	ldr	r3, [pc, #288]	; (8001fa0 <HAL_LTDC_MspInit+0x178>)
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	4a47      	ldr	r2, [pc, #284]	; (8001fa0 <HAL_LTDC_MspInit+0x178>)
 8001e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e86:	6313      	str	r3, [r2, #48]	; 0x30
 8001e88:	4b45      	ldr	r3, [pc, #276]	; (8001fa0 <HAL_LTDC_MspInit+0x178>)
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001e94:	4b42      	ldr	r3, [pc, #264]	; (8001fa0 <HAL_LTDC_MspInit+0x178>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	4a41      	ldr	r2, [pc, #260]	; (8001fa0 <HAL_LTDC_MspInit+0x178>)
 8001e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea0:	4b3f      	ldr	r3, [pc, #252]	; (8001fa0 <HAL_LTDC_MspInit+0x178>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001eac:	4b3c      	ldr	r3, [pc, #240]	; (8001fa0 <HAL_LTDC_MspInit+0x178>)
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	4a3b      	ldr	r2, [pc, #236]	; (8001fa0 <HAL_LTDC_MspInit+0x178>)
 8001eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb8:	4b39      	ldr	r3, [pc, #228]	; (8001fa0 <HAL_LTDC_MspInit+0x178>)
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ec4:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <HAL_LTDC_MspInit+0x178>)
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	4a35      	ldr	r2, [pc, #212]	; (8001fa0 <HAL_LTDC_MspInit+0x178>)
 8001eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ece:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed0:	4b33      	ldr	r3, [pc, #204]	; (8001fa0 <HAL_LTDC_MspInit+0x178>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001edc:	2310      	movs	r3, #16
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eec:	230e      	movs	r3, #14
 8001eee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	482b      	ldr	r0, [pc, #172]	; (8001fa4 <HAL_LTDC_MspInit+0x17c>)
 8001ef8:	f001 fcba 	bl	8003870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001efc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f0e:	230e      	movs	r3, #14
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f16:	4619      	mov	r1, r3
 8001f18:	4823      	ldr	r0, [pc, #140]	; (8001fa8 <HAL_LTDC_MspInit+0x180>)
 8001f1a:	f001 fca9 	bl	8003870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001f1e:	23f7      	movs	r3, #247	; 0xf7
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f2e:	230e      	movs	r3, #14
 8001f30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f36:	4619      	mov	r1, r3
 8001f38:	481c      	ldr	r0, [pc, #112]	; (8001fac <HAL_LTDC_MspInit+0x184>)
 8001f3a:	f001 fc99 	bl	8003870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f50:	2309      	movs	r3, #9
 8001f52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4815      	ldr	r0, [pc, #84]	; (8001fb0 <HAL_LTDC_MspInit+0x188>)
 8001f5c:	f001 fc88 	bl	8003870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001f60:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f72:	230e      	movs	r3, #14
 8001f74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <HAL_LTDC_MspInit+0x18c>)
 8001f7e:	f001 fc77 	bl	8003870 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2100      	movs	r1, #0
 8001f86:	2058      	movs	r0, #88	; 0x58
 8001f88:	f001 f8f8 	bl	800317c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001f8c:	2058      	movs	r0, #88	; 0x58
 8001f8e:	f001 f911 	bl	80031b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001f92:	bf00      	nop
 8001f94:	3738      	adds	r7, #56	; 0x38
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40016800 	.word	0x40016800
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40022400 	.word	0x40022400
 8001fac:	40022800 	.word	0x40022800
 8001fb0:	40021800 	.word	0x40021800
 8001fb4:	40022000 	.word	0x40022000

08001fb8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08c      	sub	sp, #48	; 0x30
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 031c 	add.w	r3, r7, #28
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a3b      	ldr	r2, [pc, #236]	; (80020c4 <HAL_QSPI_MspInit+0x10c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d170      	bne.n	80020bc <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001fda:	4b3b      	ldr	r3, [pc, #236]	; (80020c8 <HAL_QSPI_MspInit+0x110>)
 8001fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fde:	4a3a      	ldr	r2, [pc, #232]	; (80020c8 <HAL_QSPI_MspInit+0x110>)
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	6393      	str	r3, [r2, #56]	; 0x38
 8001fe6:	4b38      	ldr	r3, [pc, #224]	; (80020c8 <HAL_QSPI_MspInit+0x110>)
 8001fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	61bb      	str	r3, [r7, #24]
 8001ff0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ff2:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <HAL_QSPI_MspInit+0x110>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a34      	ldr	r2, [pc, #208]	; (80020c8 <HAL_QSPI_MspInit+0x110>)
 8001ff8:	f043 0310 	orr.w	r3, r3, #16
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffe:	4b32      	ldr	r3, [pc, #200]	; (80020c8 <HAL_QSPI_MspInit+0x110>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <HAL_QSPI_MspInit+0x110>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a2e      	ldr	r2, [pc, #184]	; (80020c8 <HAL_QSPI_MspInit+0x110>)
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <HAL_QSPI_MspInit+0x110>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002022:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <HAL_QSPI_MspInit+0x110>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a28      	ldr	r2, [pc, #160]	; (80020c8 <HAL_QSPI_MspInit+0x110>)
 8002028:	f043 0308 	orr.w	r3, r3, #8
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <HAL_QSPI_MspInit+0x110>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800203a:	2304      	movs	r3, #4
 800203c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002046:	2303      	movs	r3, #3
 8002048:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800204a:	2309      	movs	r3, #9
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800204e:	f107 031c 	add.w	r3, r7, #28
 8002052:	4619      	mov	r1, r3
 8002054:	481d      	ldr	r0, [pc, #116]	; (80020cc <HAL_QSPI_MspInit+0x114>)
 8002056:	f001 fc0b 	bl	8003870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800205a:	2340      	movs	r3, #64	; 0x40
 800205c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002066:	2303      	movs	r3, #3
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800206a:	230a      	movs	r3, #10
 800206c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800206e:	f107 031c 	add.w	r3, r7, #28
 8002072:	4619      	mov	r1, r3
 8002074:	4816      	ldr	r0, [pc, #88]	; (80020d0 <HAL_QSPI_MspInit+0x118>)
 8002076:	f001 fbfb 	bl	8003870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800207a:	2304      	movs	r3, #4
 800207c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002086:	2303      	movs	r3, #3
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800208a:	2309      	movs	r3, #9
 800208c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208e:	f107 031c 	add.w	r3, r7, #28
 8002092:	4619      	mov	r1, r3
 8002094:	480e      	ldr	r0, [pc, #56]	; (80020d0 <HAL_QSPI_MspInit+0x118>)
 8002096:	f001 fbeb 	bl	8003870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800209a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800209e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a8:	2303      	movs	r3, #3
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80020ac:	2309      	movs	r3, #9
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020b0:	f107 031c 	add.w	r3, r7, #28
 80020b4:	4619      	mov	r1, r3
 80020b6:	4807      	ldr	r0, [pc, #28]	; (80020d4 <HAL_QSPI_MspInit+0x11c>)
 80020b8:	f001 fbda 	bl	8003870 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80020bc:	bf00      	nop
 80020be:	3730      	adds	r7, #48	; 0x30
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	a0001000 	.word	0xa0001000
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40020400 	.word	0x40020400
 80020d4:	40020c00 	.word	0x40020c00

080020d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a07      	ldr	r2, [pc, #28]	; (8002104 <HAL_RTC_MspInit+0x2c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d105      	bne.n	80020f6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <HAL_RTC_MspInit+0x30>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	4a06      	ldr	r2, [pc, #24]	; (8002108 <HAL_RTC_MspInit+0x30>)
 80020f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40002800 	.word	0x40002800
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a25      	ldr	r2, [pc, #148]	; (80021c0 <HAL_SD_MspInit+0xb4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d144      	bne.n	80021b8 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800212e:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <HAL_SD_MspInit+0xb8>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	4a24      	ldr	r2, [pc, #144]	; (80021c4 <HAL_SD_MspInit+0xb8>)
 8002134:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002138:	6453      	str	r3, [r2, #68]	; 0x44
 800213a:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <HAL_SD_MspInit+0xb8>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002146:	4b1f      	ldr	r3, [pc, #124]	; (80021c4 <HAL_SD_MspInit+0xb8>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <HAL_SD_MspInit+0xb8>)
 800214c:	f043 0304 	orr.w	r3, r3, #4
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <HAL_SD_MspInit+0xb8>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800215e:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_SD_MspInit+0xb8>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a18      	ldr	r2, [pc, #96]	; (80021c4 <HAL_SD_MspInit+0xb8>)
 8002164:	f043 0308 	orr.w	r3, r3, #8
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <HAL_SD_MspInit+0xb8>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002176:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800217a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002184:	2303      	movs	r3, #3
 8002186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002188:	230c      	movs	r3, #12
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	4619      	mov	r1, r3
 8002192:	480d      	ldr	r0, [pc, #52]	; (80021c8 <HAL_SD_MspInit+0xbc>)
 8002194:	f001 fb6c 	bl	8003870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002198:	2304      	movs	r3, #4
 800219a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a4:	2303      	movs	r3, #3
 80021a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80021a8:	230c      	movs	r3, #12
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	4619      	mov	r1, r3
 80021b2:	4806      	ldr	r0, [pc, #24]	; (80021cc <HAL_SD_MspInit+0xc0>)
 80021b4:	f001 fb5c 	bl	8003870 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80021b8:	bf00      	nop
 80021ba:	3728      	adds	r7, #40	; 0x28
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40012c00 	.word	0x40012c00
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40020800 	.word	0x40020800
 80021cc:	40020c00 	.word	0x40020c00

080021d0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80021f0:	d127      	bne.n	8002242 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80021f2:	4b16      	ldr	r3, [pc, #88]	; (800224c <HAL_SPDIFRX_MspInit+0x7c>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a15      	ldr	r2, [pc, #84]	; (800224c <HAL_SPDIFRX_MspInit+0x7c>)
 80021f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
 80021fe:	4b13      	ldr	r3, [pc, #76]	; (800224c <HAL_SPDIFRX_MspInit+0x7c>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <HAL_SPDIFRX_MspInit+0x7c>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a0f      	ldr	r2, [pc, #60]	; (800224c <HAL_SPDIFRX_MspInit+0x7c>)
 8002210:	f043 0308 	orr.w	r3, r3, #8
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <HAL_SPDIFRX_MspInit+0x7c>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	2300      	movs	r3, #0
 8002230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002232:	2308      	movs	r3, #8
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	4804      	ldr	r0, [pc, #16]	; (8002250 <HAL_SPDIFRX_MspInit+0x80>)
 800223e:	f001 fb17 	bl	8003870 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002242:	bf00      	nop
 8002244:	3728      	adds	r7, #40	; 0x28
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	40020c00 	.word	0x40020c00

08002254 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08e      	sub	sp, #56	; 0x38
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a44      	ldr	r2, [pc, #272]	; (8002384 <HAL_TIM_Base_MspInit+0x130>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d10c      	bne.n	8002290 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002276:	4b44      	ldr	r3, [pc, #272]	; (8002388 <HAL_TIM_Base_MspInit+0x134>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	4a43      	ldr	r2, [pc, #268]	; (8002388 <HAL_TIM_Base_MspInit+0x134>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6453      	str	r3, [r2, #68]	; 0x44
 8002282:	4b41      	ldr	r3, [pc, #260]	; (8002388 <HAL_TIM_Base_MspInit+0x134>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	623b      	str	r3, [r7, #32]
 800228c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800228e:	e074      	b.n	800237a <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002298:	d10c      	bne.n	80022b4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800229a:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <HAL_TIM_Base_MspInit+0x134>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	4a3a      	ldr	r2, [pc, #232]	; (8002388 <HAL_TIM_Base_MspInit+0x134>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6413      	str	r3, [r2, #64]	; 0x40
 80022a6:	4b38      	ldr	r3, [pc, #224]	; (8002388 <HAL_TIM_Base_MspInit+0x134>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	61fb      	str	r3, [r7, #28]
 80022b0:	69fb      	ldr	r3, [r7, #28]
}
 80022b2:	e062      	b.n	800237a <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM3)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a34      	ldr	r2, [pc, #208]	; (800238c <HAL_TIM_Base_MspInit+0x138>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d10c      	bne.n	80022d8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022be:	4b32      	ldr	r3, [pc, #200]	; (8002388 <HAL_TIM_Base_MspInit+0x134>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a31      	ldr	r2, [pc, #196]	; (8002388 <HAL_TIM_Base_MspInit+0x134>)
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ca:	4b2f      	ldr	r3, [pc, #188]	; (8002388 <HAL_TIM_Base_MspInit+0x134>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	69bb      	ldr	r3, [r7, #24]
}
 80022d6:	e050      	b.n	800237a <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM5)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a2c      	ldr	r2, [pc, #176]	; (8002390 <HAL_TIM_Base_MspInit+0x13c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d10c      	bne.n	80022fc <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022e2:	4b29      	ldr	r3, [pc, #164]	; (8002388 <HAL_TIM_Base_MspInit+0x134>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	4a28      	ldr	r2, [pc, #160]	; (8002388 <HAL_TIM_Base_MspInit+0x134>)
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	6413      	str	r3, [r2, #64]	; 0x40
 80022ee:	4b26      	ldr	r3, [pc, #152]	; (8002388 <HAL_TIM_Base_MspInit+0x134>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	697b      	ldr	r3, [r7, #20]
}
 80022fa:	e03e      	b.n	800237a <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM8)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a24      	ldr	r2, [pc, #144]	; (8002394 <HAL_TIM_Base_MspInit+0x140>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d10c      	bne.n	8002320 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002306:	4b20      	ldr	r3, [pc, #128]	; (8002388 <HAL_TIM_Base_MspInit+0x134>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	4a1f      	ldr	r2, [pc, #124]	; (8002388 <HAL_TIM_Base_MspInit+0x134>)
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	6453      	str	r3, [r2, #68]	; 0x44
 8002312:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <HAL_TIM_Base_MspInit+0x134>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
}
 800231e:	e02c      	b.n	800237a <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM12)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a1c      	ldr	r2, [pc, #112]	; (8002398 <HAL_TIM_Base_MspInit+0x144>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d127      	bne.n	800237a <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800232a:	4b17      	ldr	r3, [pc, #92]	; (8002388 <HAL_TIM_Base_MspInit+0x134>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	4a16      	ldr	r2, [pc, #88]	; (8002388 <HAL_TIM_Base_MspInit+0x134>)
 8002330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002334:	6413      	str	r3, [r2, #64]	; 0x40
 8002336:	4b14      	ldr	r3, [pc, #80]	; (8002388 <HAL_TIM_Base_MspInit+0x134>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002342:	4b11      	ldr	r3, [pc, #68]	; (8002388 <HAL_TIM_Base_MspInit+0x134>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a10      	ldr	r2, [pc, #64]	; (8002388 <HAL_TIM_Base_MspInit+0x134>)
 8002348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <HAL_TIM_Base_MspInit+0x134>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800235a:	2340      	movs	r3, #64	; 0x40
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2300      	movs	r3, #0
 8002368:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800236a:	2309      	movs	r3, #9
 800236c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800236e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002372:	4619      	mov	r1, r3
 8002374:	4809      	ldr	r0, [pc, #36]	; (800239c <HAL_TIM_Base_MspInit+0x148>)
 8002376:	f001 fa7b 	bl	8003870 <HAL_GPIO_Init>
}
 800237a:	bf00      	nop
 800237c:	3738      	adds	r7, #56	; 0x38
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40010000 	.word	0x40010000
 8002388:	40023800 	.word	0x40023800
 800238c:	40000400 	.word	0x40000400
 8002390:	40000c00 	.word	0x40000c00
 8002394:	40010400 	.word	0x40010400
 8002398:	40001800 	.word	0x40001800
 800239c:	40021c00 	.word	0x40021c00

080023a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08c      	sub	sp, #48	; 0x30
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 031c 	add.w	r3, r7, #28
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a45      	ldr	r2, [pc, #276]	; (80024d4 <HAL_TIM_MspPostInit+0x134>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d11d      	bne.n	80023fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	4b45      	ldr	r3, [pc, #276]	; (80024d8 <HAL_TIM_MspPostInit+0x138>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a44      	ldr	r2, [pc, #272]	; (80024d8 <HAL_TIM_MspPostInit+0x138>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b42      	ldr	r3, [pc, #264]	; (80024d8 <HAL_TIM_MspPostInit+0x138>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80023da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e8:	2300      	movs	r3, #0
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023ec:	2301      	movs	r3, #1
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80023f0:	f107 031c 	add.w	r3, r7, #28
 80023f4:	4619      	mov	r1, r3
 80023f6:	4839      	ldr	r0, [pc, #228]	; (80024dc <HAL_TIM_MspPostInit+0x13c>)
 80023f8:	f001 fa3a 	bl	8003870 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80023fc:	e065      	b.n	80024ca <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM2)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002406:	d11d      	bne.n	8002444 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002408:	4b33      	ldr	r3, [pc, #204]	; (80024d8 <HAL_TIM_MspPostInit+0x138>)
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	4a32      	ldr	r2, [pc, #200]	; (80024d8 <HAL_TIM_MspPostInit+0x138>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6313      	str	r3, [r2, #48]	; 0x30
 8002414:	4b30      	ldr	r3, [pc, #192]	; (80024d8 <HAL_TIM_MspPostInit+0x138>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002426:	2302      	movs	r3, #2
 8002428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242e:	2300      	movs	r3, #0
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002432:	2301      	movs	r3, #1
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002436:	f107 031c 	add.w	r3, r7, #28
 800243a:	4619      	mov	r1, r3
 800243c:	4827      	ldr	r0, [pc, #156]	; (80024dc <HAL_TIM_MspPostInit+0x13c>)
 800243e:	f001 fa17 	bl	8003870 <HAL_GPIO_Init>
}
 8002442:	e042      	b.n	80024ca <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a25      	ldr	r2, [pc, #148]	; (80024e0 <HAL_TIM_MspPostInit+0x140>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d11c      	bne.n	8002488 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244e:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <HAL_TIM_MspPostInit+0x138>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a21      	ldr	r2, [pc, #132]	; (80024d8 <HAL_TIM_MspPostInit+0x138>)
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <HAL_TIM_MspPostInit+0x138>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002466:	2310      	movs	r3, #16
 8002468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002472:	2300      	movs	r3, #0
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002476:	2302      	movs	r3, #2
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800247a:	f107 031c 	add.w	r3, r7, #28
 800247e:	4619      	mov	r1, r3
 8002480:	4818      	ldr	r0, [pc, #96]	; (80024e4 <HAL_TIM_MspPostInit+0x144>)
 8002482:	f001 f9f5 	bl	8003870 <HAL_GPIO_Init>
}
 8002486:	e020      	b.n	80024ca <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a16      	ldr	r2, [pc, #88]	; (80024e8 <HAL_TIM_MspPostInit+0x148>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d11b      	bne.n	80024ca <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HAL_TIM_MspPostInit+0x138>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a10      	ldr	r2, [pc, #64]	; (80024d8 <HAL_TIM_MspPostInit+0x138>)
 8002498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_TIM_MspPostInit+0x138>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80024aa:	2301      	movs	r3, #1
 80024ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ae:	2302      	movs	r3, #2
 80024b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b6:	2300      	movs	r3, #0
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80024ba:	2302      	movs	r3, #2
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80024be:	f107 031c 	add.w	r3, r7, #28
 80024c2:	4619      	mov	r1, r3
 80024c4:	4809      	ldr	r0, [pc, #36]	; (80024ec <HAL_TIM_MspPostInit+0x14c>)
 80024c6:	f001 f9d3 	bl	8003870 <HAL_GPIO_Init>
}
 80024ca:	bf00      	nop
 80024cc:	3730      	adds	r7, #48	; 0x30
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40010000 	.word	0x40010000
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020000 	.word	0x40020000
 80024e0:	40000400 	.word	0x40000400
 80024e4:	40020400 	.word	0x40020400
 80024e8:	40000c00 	.word	0x40000c00
 80024ec:	40022000 	.word	0x40022000

080024f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08c      	sub	sp, #48	; 0x30
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 031c 	add.w	r3, r7, #28
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a3c      	ldr	r2, [pc, #240]	; (8002600 <HAL_UART_MspInit+0x110>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d145      	bne.n	800259e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002512:	4b3c      	ldr	r3, [pc, #240]	; (8002604 <HAL_UART_MspInit+0x114>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	4a3b      	ldr	r2, [pc, #236]	; (8002604 <HAL_UART_MspInit+0x114>)
 8002518:	f043 0310 	orr.w	r3, r3, #16
 800251c:	6453      	str	r3, [r2, #68]	; 0x44
 800251e:	4b39      	ldr	r3, [pc, #228]	; (8002604 <HAL_UART_MspInit+0x114>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	61bb      	str	r3, [r7, #24]
 8002528:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252a:	4b36      	ldr	r3, [pc, #216]	; (8002604 <HAL_UART_MspInit+0x114>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4a35      	ldr	r2, [pc, #212]	; (8002604 <HAL_UART_MspInit+0x114>)
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	4b33      	ldr	r3, [pc, #204]	; (8002604 <HAL_UART_MspInit+0x114>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002542:	4b30      	ldr	r3, [pc, #192]	; (8002604 <HAL_UART_MspInit+0x114>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4a2f      	ldr	r2, [pc, #188]	; (8002604 <HAL_UART_MspInit+0x114>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6313      	str	r3, [r2, #48]	; 0x30
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <HAL_UART_MspInit+0x114>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002566:	2300      	movs	r3, #0
 8002568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800256a:	2307      	movs	r3, #7
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800256e:	f107 031c 	add.w	r3, r7, #28
 8002572:	4619      	mov	r1, r3
 8002574:	4824      	ldr	r0, [pc, #144]	; (8002608 <HAL_UART_MspInit+0x118>)
 8002576:	f001 f97b 	bl	8003870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800257a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800257e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002588:	2300      	movs	r3, #0
 800258a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800258c:	2307      	movs	r3, #7
 800258e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002590:	f107 031c 	add.w	r3, r7, #28
 8002594:	4619      	mov	r1, r3
 8002596:	481d      	ldr	r0, [pc, #116]	; (800260c <HAL_UART_MspInit+0x11c>)
 8002598:	f001 f96a 	bl	8003870 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800259c:	e02c      	b.n	80025f8 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1b      	ldr	r2, [pc, #108]	; (8002610 <HAL_UART_MspInit+0x120>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d127      	bne.n	80025f8 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80025a8:	4b16      	ldr	r3, [pc, #88]	; (8002604 <HAL_UART_MspInit+0x114>)
 80025aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ac:	4a15      	ldr	r2, [pc, #84]	; (8002604 <HAL_UART_MspInit+0x114>)
 80025ae:	f043 0320 	orr.w	r3, r3, #32
 80025b2:	6453      	str	r3, [r2, #68]	; 0x44
 80025b4:	4b13      	ldr	r3, [pc, #76]	; (8002604 <HAL_UART_MspInit+0x114>)
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c0:	4b10      	ldr	r3, [pc, #64]	; (8002604 <HAL_UART_MspInit+0x114>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	4a0f      	ldr	r2, [pc, #60]	; (8002604 <HAL_UART_MspInit+0x114>)
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	6313      	str	r3, [r2, #48]	; 0x30
 80025cc:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <HAL_UART_MspInit+0x114>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80025d8:	23c0      	movs	r3, #192	; 0xc0
 80025da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025dc:	2302      	movs	r3, #2
 80025de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e4:	2303      	movs	r3, #3
 80025e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80025e8:	2308      	movs	r3, #8
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ec:	f107 031c 	add.w	r3, r7, #28
 80025f0:	4619      	mov	r1, r3
 80025f2:	4808      	ldr	r0, [pc, #32]	; (8002614 <HAL_UART_MspInit+0x124>)
 80025f4:	f001 f93c 	bl	8003870 <HAL_GPIO_Init>
}
 80025f8:	bf00      	nop
 80025fa:	3730      	adds	r7, #48	; 0x30
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40011000 	.word	0x40011000
 8002604:	40023800 	.word	0x40023800
 8002608:	40020400 	.word	0x40020400
 800260c:	40020000 	.word	0x40020000
 8002610:	40011400 	.word	0x40011400
 8002614:	40020800 	.word	0x40020800

08002618 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800262c:	4b3a      	ldr	r3, [pc, #232]	; (8002718 <HAL_FMC_MspInit+0x100>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d16d      	bne.n	8002710 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002634:	4b38      	ldr	r3, [pc, #224]	; (8002718 <HAL_FMC_MspInit+0x100>)
 8002636:	2201      	movs	r2, #1
 8002638:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800263a:	4b38      	ldr	r3, [pc, #224]	; (800271c <HAL_FMC_MspInit+0x104>)
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	4a37      	ldr	r2, [pc, #220]	; (800271c <HAL_FMC_MspInit+0x104>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6393      	str	r3, [r2, #56]	; 0x38
 8002646:	4b35      	ldr	r3, [pc, #212]	; (800271c <HAL_FMC_MspInit+0x104>)
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002652:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002656:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002658:	2302      	movs	r3, #2
 800265a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002660:	2303      	movs	r3, #3
 8002662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002664:	230c      	movs	r3, #12
 8002666:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002668:	1d3b      	adds	r3, r7, #4
 800266a:	4619      	mov	r1, r3
 800266c:	482c      	ldr	r0, [pc, #176]	; (8002720 <HAL_FMC_MspInit+0x108>)
 800266e:	f001 f8ff 	bl	8003870 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002672:	f248 1333 	movw	r3, #33075	; 0x8133
 8002676:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	2302      	movs	r3, #2
 800267a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002680:	2303      	movs	r3, #3
 8002682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002684:	230c      	movs	r3, #12
 8002686:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002688:	1d3b      	adds	r3, r7, #4
 800268a:	4619      	mov	r1, r3
 800268c:	4825      	ldr	r0, [pc, #148]	; (8002724 <HAL_FMC_MspInit+0x10c>)
 800268e:	f001 f8ef 	bl	8003870 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002692:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002696:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a0:	2303      	movs	r3, #3
 80026a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026a4:	230c      	movs	r3, #12
 80026a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	4619      	mov	r1, r3
 80026ac:	481e      	ldr	r0, [pc, #120]	; (8002728 <HAL_FMC_MspInit+0x110>)
 80026ae:	f001 f8df 	bl	8003870 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80026b2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80026b6:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c0:	2303      	movs	r3, #3
 80026c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026c4:	230c      	movs	r3, #12
 80026c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026c8:	1d3b      	adds	r3, r7, #4
 80026ca:	4619      	mov	r1, r3
 80026cc:	4817      	ldr	r0, [pc, #92]	; (800272c <HAL_FMC_MspInit+0x114>)
 80026ce:	f001 f8cf 	bl	8003870 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80026d2:	2328      	movs	r3, #40	; 0x28
 80026d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026de:	2303      	movs	r3, #3
 80026e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026e2:	230c      	movs	r3, #12
 80026e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80026e6:	1d3b      	adds	r3, r7, #4
 80026e8:	4619      	mov	r1, r3
 80026ea:	4811      	ldr	r0, [pc, #68]	; (8002730 <HAL_FMC_MspInit+0x118>)
 80026ec:	f001 f8c0 	bl	8003870 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80026f0:	2308      	movs	r3, #8
 80026f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fc:	2303      	movs	r3, #3
 80026fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002700:	230c      	movs	r3, #12
 8002702:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002704:	1d3b      	adds	r3, r7, #4
 8002706:	4619      	mov	r1, r3
 8002708:	480a      	ldr	r0, [pc, #40]	; (8002734 <HAL_FMC_MspInit+0x11c>)
 800270a:	f001 f8b1 	bl	8003870 <HAL_GPIO_Init>
 800270e:	e000      	b.n	8002712 <HAL_FMC_MspInit+0xfa>
    return;
 8002710:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20000690 	.word	0x20000690
 800271c:	40023800 	.word	0x40023800
 8002720:	40021000 	.word	0x40021000
 8002724:	40021800 	.word	0x40021800
 8002728:	40020c00 	.word	0x40020c00
 800272c:	40021400 	.word	0x40021400
 8002730:	40021c00 	.word	0x40021c00
 8002734:	40020800 	.word	0x40020800

08002738 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002740:	f7ff ff6a 	bl	8002618 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08a      	sub	sp, #40	; 0x28
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a2b      	ldr	r2, [pc, #172]	; (8002808 <HAL_SAI_MspInit+0xbc>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d124      	bne.n	80027a8 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800275e:	4b2b      	ldr	r3, [pc, #172]	; (800280c <HAL_SAI_MspInit+0xc0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10b      	bne.n	800277e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002766:	4b2a      	ldr	r3, [pc, #168]	; (8002810 <HAL_SAI_MspInit+0xc4>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	4a29      	ldr	r2, [pc, #164]	; (8002810 <HAL_SAI_MspInit+0xc4>)
 800276c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002770:	6453      	str	r3, [r2, #68]	; 0x44
 8002772:	4b27      	ldr	r3, [pc, #156]	; (8002810 <HAL_SAI_MspInit+0xc4>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800277e:	4b23      	ldr	r3, [pc, #140]	; (800280c <HAL_SAI_MspInit+0xc0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	3301      	adds	r3, #1
 8002784:	4a21      	ldr	r2, [pc, #132]	; (800280c <HAL_SAI_MspInit+0xc0>)
 8002786:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002788:	23f0      	movs	r3, #240	; 0xf0
 800278a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278c:	2302      	movs	r3, #2
 800278e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002794:	2300      	movs	r3, #0
 8002796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002798:	230a      	movs	r3, #10
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	4619      	mov	r1, r3
 80027a2:	481c      	ldr	r0, [pc, #112]	; (8002814 <HAL_SAI_MspInit+0xc8>)
 80027a4:	f001 f864 	bl	8003870 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a1a      	ldr	r2, [pc, #104]	; (8002818 <HAL_SAI_MspInit+0xcc>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d125      	bne.n	80027fe <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80027b2:	4b16      	ldr	r3, [pc, #88]	; (800280c <HAL_SAI_MspInit+0xc0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10b      	bne.n	80027d2 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80027ba:	4b15      	ldr	r3, [pc, #84]	; (8002810 <HAL_SAI_MspInit+0xc4>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	4a14      	ldr	r2, [pc, #80]	; (8002810 <HAL_SAI_MspInit+0xc4>)
 80027c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027c4:	6453      	str	r3, [r2, #68]	; 0x44
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_SAI_MspInit+0xc4>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <HAL_SAI_MspInit+0xc0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3301      	adds	r3, #1
 80027d8:	4a0c      	ldr	r2, [pc, #48]	; (800280c <HAL_SAI_MspInit+0xc0>)
 80027da:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80027dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e2:	2302      	movs	r3, #2
 80027e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ea:	2300      	movs	r3, #0
 80027ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80027ee:	230a      	movs	r3, #10
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80027f2:	f107 0314 	add.w	r3, r7, #20
 80027f6:	4619      	mov	r1, r3
 80027f8:	4808      	ldr	r0, [pc, #32]	; (800281c <HAL_SAI_MspInit+0xd0>)
 80027fa:	f001 f839 	bl	8003870 <HAL_GPIO_Init>

    }
}
 80027fe:	bf00      	nop
 8002800:	3728      	adds	r7, #40	; 0x28
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40015c04 	.word	0x40015c04
 800280c:	20000694 	.word	0x20000694
 8002810:	40023800 	.word	0x40023800
 8002814:	40022000 	.word	0x40022000
 8002818:	40015c24 	.word	0x40015c24
 800281c:	40021800 	.word	0x40021800

08002820 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08c      	sub	sp, #48	; 0x30
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002830:	2200      	movs	r2, #0
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	2036      	movs	r0, #54	; 0x36
 8002836:	f000 fca1 	bl	800317c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800283a:	2036      	movs	r0, #54	; 0x36
 800283c:	f000 fcba 	bl	80031b4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002840:	4b1f      	ldr	r3, [pc, #124]	; (80028c0 <HAL_InitTick+0xa0>)
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	4a1e      	ldr	r2, [pc, #120]	; (80028c0 <HAL_InitTick+0xa0>)
 8002846:	f043 0310 	orr.w	r3, r3, #16
 800284a:	6413      	str	r3, [r2, #64]	; 0x40
 800284c:	4b1c      	ldr	r3, [pc, #112]	; (80028c0 <HAL_InitTick+0xa0>)
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002858:	f107 0210 	add.w	r2, r7, #16
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	4611      	mov	r1, r2
 8002862:	4618      	mov	r0, r3
 8002864:	f003 feae 	bl	80065c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002868:	f003 fe84 	bl	8006574 <HAL_RCC_GetPCLK1Freq>
 800286c:	4603      	mov	r3, r0
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002874:	4a13      	ldr	r2, [pc, #76]	; (80028c4 <HAL_InitTick+0xa4>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	0c9b      	lsrs	r3, r3, #18
 800287c:	3b01      	subs	r3, #1
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_InitTick+0xa8>)
 8002882:	4a12      	ldr	r2, [pc, #72]	; (80028cc <HAL_InitTick+0xac>)
 8002884:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002886:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <HAL_InitTick+0xa8>)
 8002888:	f240 32e7 	movw	r2, #999	; 0x3e7
 800288c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800288e:	4a0e      	ldr	r2, [pc, #56]	; (80028c8 <HAL_InitTick+0xa8>)
 8002890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002892:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <HAL_InitTick+0xa8>)
 8002896:	2200      	movs	r2, #0
 8002898:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800289a:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_InitTick+0xa8>)
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80028a0:	4809      	ldr	r0, [pc, #36]	; (80028c8 <HAL_InitTick+0xa8>)
 80028a2:	f006 fba3 	bl	8008fec <HAL_TIM_Base_Init>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d104      	bne.n	80028b6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80028ac:	4806      	ldr	r0, [pc, #24]	; (80028c8 <HAL_InitTick+0xa8>)
 80028ae:	f006 fc65 	bl	800917c <HAL_TIM_Base_Start_IT>
 80028b2:	4603      	mov	r3, r0
 80028b4:	e000      	b.n	80028b8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3730      	adds	r7, #48	; 0x30
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40023800 	.word	0x40023800
 80028c4:	431bde83 	.word	0x431bde83
 80028c8:	20000ef8 	.word	0x20000ef8
 80028cc:	40001000 	.word	0x40001000

080028d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028d4:	e7fe      	b.n	80028d4 <NMI_Handler+0x4>

080028d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028da:	e7fe      	b.n	80028da <HardFault_Handler+0x4>

080028dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e0:	e7fe      	b.n	80028e0 <MemManage_Handler+0x4>

080028e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028e6:	e7fe      	b.n	80028e6 <BusFault_Handler+0x4>

080028e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028ec:	e7fe      	b.n	80028ec <UsageFault_Handler+0x4>

080028ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800292c:	4802      	ldr	r0, [pc, #8]	; (8002938 <TIM6_DAC_IRQHandler+0x10>)
 800292e:	f006 fcfe 	bl	800932e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000ef8 	.word	0x20000ef8

0800293c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002940:	4802      	ldr	r0, [pc, #8]	; (800294c <OTG_FS_IRQHandler+0x10>)
 8002942:	f001 f98c 	bl	8003c5e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	200013b0 	.word	0x200013b0

08002950 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002954:	4802      	ldr	r0, [pc, #8]	; (8002960 <LTDC_IRQHandler+0x10>)
 8002956:	f002 fdff 	bl	8005558 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000aa4 	.word	0x20000aa4

08002964 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002968:	4802      	ldr	r0, [pc, #8]	; (8002974 <DMA2D_IRQHandler+0x10>)
 800296a:	f000 fddf 	bl	800352c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000d58 	.word	0x20000d58

08002978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002980:	4a14      	ldr	r2, [pc, #80]	; (80029d4 <_sbrk+0x5c>)
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <_sbrk+0x60>)
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800298c:	4b13      	ldr	r3, [pc, #76]	; (80029dc <_sbrk+0x64>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d102      	bne.n	800299a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002994:	4b11      	ldr	r3, [pc, #68]	; (80029dc <_sbrk+0x64>)
 8002996:	4a12      	ldr	r2, [pc, #72]	; (80029e0 <_sbrk+0x68>)
 8002998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <_sbrk+0x64>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d207      	bcs.n	80029b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029a8:	f00a fd5e 	bl	800d468 <__errno>
 80029ac:	4603      	mov	r3, r0
 80029ae:	220c      	movs	r2, #12
 80029b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029b6:	e009      	b.n	80029cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029b8:	4b08      	ldr	r3, [pc, #32]	; (80029dc <_sbrk+0x64>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029be:	4b07      	ldr	r3, [pc, #28]	; (80029dc <_sbrk+0x64>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	4a05      	ldr	r2, [pc, #20]	; (80029dc <_sbrk+0x64>)
 80029c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ca:	68fb      	ldr	r3, [r7, #12]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20050000 	.word	0x20050000
 80029d8:	00000800 	.word	0x00000800
 80029dc:	20000698 	.word	0x20000698
 80029e0:	200016c8 	.word	0x200016c8

080029e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <SystemInit+0x20>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ee:	4a05      	ldr	r2, [pc, #20]	; (8002a04 <SystemInit+0x20>)
 80029f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a0c:	480d      	ldr	r0, [pc, #52]	; (8002a44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a0e:	490e      	ldr	r1, [pc, #56]	; (8002a48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a10:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a14:	e002      	b.n	8002a1c <LoopCopyDataInit>

08002a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a1a:	3304      	adds	r3, #4

08002a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a20:	d3f9      	bcc.n	8002a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a22:	4a0b      	ldr	r2, [pc, #44]	; (8002a50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a24:	4c0b      	ldr	r4, [pc, #44]	; (8002a54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a28:	e001      	b.n	8002a2e <LoopFillZerobss>

08002a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a2c:	3204      	adds	r2, #4

08002a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a30:	d3fb      	bcc.n	8002a2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a32:	f7ff ffd7 	bl	80029e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a36:	f00a fd1d 	bl	800d474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a3a:	f7fd fdb5 	bl	80005a8 <main>
  bx  lr    
 8002a3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a40:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a48:	20000674 	.word	0x20000674
  ldr r2, =_sidata
 8002a4c:	0800de38 	.word	0x0800de38
  ldr r2, =_sbss
 8002a50:	20000674 	.word	0x20000674
  ldr r4, =_ebss
 8002a54:	200016c4 	.word	0x200016c4

08002a58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a58:	e7fe      	b.n	8002a58 <ADC_IRQHandler>

08002a5a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a5e:	2003      	movs	r0, #3
 8002a60:	f000 fb81 	bl	8003166 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a64:	200f      	movs	r0, #15
 8002a66:	f7ff fedb 	bl	8002820 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002a6a:	f7fe ffe3 	bl	8001a34 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_IncTick+0x20>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_IncTick+0x24>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <HAL_IncTick+0x24>)
 8002a86:	6013      	str	r3, [r2, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20000008 	.word	0x20000008
 8002a98:	20000f44 	.word	0x20000f44

08002a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <HAL_GetTick+0x14>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000f44 	.word	0x20000f44

08002ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002abc:	f7ff ffee 	bl	8002a9c <HAL_GetTick>
 8002ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002acc:	d005      	beq.n	8002ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_Delay+0x44>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ada:	bf00      	nop
 8002adc:	f7ff ffde 	bl	8002a9c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d8f7      	bhi.n	8002adc <HAL_Delay+0x28>
  {
  }
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000008 	.word	0x20000008

08002afc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e031      	b.n	8002b76 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fe ffae 	bl	8001a7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d116      	bne.n	8002b68 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b3e:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <HAL_ADC_Init+0x84>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	f043 0202 	orr.w	r2, r3, #2
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f964 	bl	8002e18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f023 0303 	bic.w	r3, r3, #3
 8002b5e:	f043 0201 	orr.w	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
 8002b66:	e001      	b.n	8002b6c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	ffffeefd 	.word	0xffffeefd

08002b84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x1c>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e12a      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x272>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b09      	cmp	r3, #9
 8002bae:	d93a      	bls.n	8002c26 <HAL_ADC_ConfigChannel+0xa2>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bb8:	d035      	beq.n	8002c26 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68d9      	ldr	r1, [r3, #12]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	3b1e      	subs	r3, #30
 8002bd0:	2207      	movs	r2, #7
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	400a      	ands	r2, r1
 8002bde:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a87      	ldr	r2, [pc, #540]	; (8002e04 <HAL_ADC_ConfigChannel+0x280>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10a      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68d9      	ldr	r1, [r3, #12]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	061a      	lsls	r2, r3, #24
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bfe:	e035      	b.n	8002c6c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68d9      	ldr	r1, [r3, #12]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	4618      	mov	r0, r3
 8002c12:	4603      	mov	r3, r0
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4403      	add	r3, r0
 8002c18:	3b1e      	subs	r3, #30
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c24:	e022      	b.n	8002c6c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6919      	ldr	r1, [r3, #16]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	461a      	mov	r2, r3
 8002c34:	4613      	mov	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4413      	add	r3, r2
 8002c3a:	2207      	movs	r2, #7
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43da      	mvns	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	400a      	ands	r2, r1
 8002c48:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6919      	ldr	r1, [r3, #16]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4403      	add	r3, r0
 8002c62:	409a      	lsls	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b06      	cmp	r3, #6
 8002c72:	d824      	bhi.n	8002cbe <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	3b05      	subs	r3, #5
 8002c86:	221f      	movs	r2, #31
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43da      	mvns	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	400a      	ands	r2, r1
 8002c94:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	3b05      	subs	r3, #5
 8002cb0:	fa00 f203 	lsl.w	r2, r0, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	635a      	str	r2, [r3, #52]	; 0x34
 8002cbc:	e04c      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b0c      	cmp	r3, #12
 8002cc4:	d824      	bhi.n	8002d10 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3b23      	subs	r3, #35	; 0x23
 8002cd8:	221f      	movs	r2, #31
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43da      	mvns	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	400a      	ands	r2, r1
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	3b23      	subs	r3, #35	; 0x23
 8002d02:	fa00 f203 	lsl.w	r2, r0, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d0e:	e023      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	3b41      	subs	r3, #65	; 0x41
 8002d22:	221f      	movs	r2, #31
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43da      	mvns	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	400a      	ands	r2, r1
 8002d30:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	4618      	mov	r0, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	3b41      	subs	r3, #65	; 0x41
 8002d4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a2a      	ldr	r2, [pc, #168]	; (8002e08 <HAL_ADC_ConfigChannel+0x284>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d10a      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x1f4>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d6a:	d105      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002d6c:	4b27      	ldr	r3, [pc, #156]	; (8002e0c <HAL_ADC_ConfigChannel+0x288>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	4a26      	ldr	r2, [pc, #152]	; (8002e0c <HAL_ADC_ConfigChannel+0x288>)
 8002d72:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002d76:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a22      	ldr	r2, [pc, #136]	; (8002e08 <HAL_ADC_ConfigChannel+0x284>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d109      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x212>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b12      	cmp	r3, #18
 8002d88:	d105      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002d8a:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <HAL_ADC_ConfigChannel+0x288>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4a1f      	ldr	r2, [pc, #124]	; (8002e0c <HAL_ADC_ConfigChannel+0x288>)
 8002d90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d94:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <HAL_ADC_ConfigChannel+0x284>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d125      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x268>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a17      	ldr	r2, [pc, #92]	; (8002e04 <HAL_ADC_ConfigChannel+0x280>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d003      	beq.n	8002db2 <HAL_ADC_ConfigChannel+0x22e>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b11      	cmp	r3, #17
 8002db0:	d11c      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002db2:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <HAL_ADC_ConfigChannel+0x288>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	4a15      	ldr	r2, [pc, #84]	; (8002e0c <HAL_ADC_ConfigChannel+0x288>)
 8002db8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dbc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a10      	ldr	r2, [pc, #64]	; (8002e04 <HAL_ADC_ConfigChannel+0x280>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d111      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002dc8:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <HAL_ADC_ConfigChannel+0x28c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a11      	ldr	r2, [pc, #68]	; (8002e14 <HAL_ADC_ConfigChannel+0x290>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	0c9a      	lsrs	r2, r3, #18
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002dde:	e002      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1f9      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	10000012 	.word	0x10000012
 8002e08:	40012000 	.word	0x40012000
 8002e0c:	40012300 	.word	0x40012300
 8002e10:	20000000 	.word	0x20000000
 8002e14:	431bde83 	.word	0x431bde83

08002e18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002e20:	4b78      	ldr	r3, [pc, #480]	; (8003004 <ADC_Init+0x1ec>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	4a77      	ldr	r2, [pc, #476]	; (8003004 <ADC_Init+0x1ec>)
 8002e26:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002e2a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002e2c:	4b75      	ldr	r3, [pc, #468]	; (8003004 <ADC_Init+0x1ec>)
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	4973      	ldr	r1, [pc, #460]	; (8003004 <ADC_Init+0x1ec>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	021a      	lsls	r2, r3, #8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6859      	ldr	r1, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6899      	ldr	r1, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	4a58      	ldr	r2, [pc, #352]	; (8003008 <ADC_Init+0x1f0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d022      	beq.n	8002ef2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002eba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6899      	ldr	r1, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002edc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6899      	ldr	r1, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	e00f      	b.n	8002f12 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0202 	bic.w	r2, r2, #2
 8002f20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6899      	ldr	r1, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	005a      	lsls	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01b      	beq.n	8002f78 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6859      	ldr	r1, [r3, #4]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	035a      	lsls	r2, r3, #13
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	e007      	b.n	8002f88 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	051a      	lsls	r2, r3, #20
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6899      	ldr	r1, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fca:	025a      	lsls	r2, r3, #9
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6899      	ldr	r1, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	029a      	lsls	r2, r3, #10
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	609a      	str	r2, [r3, #8]
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	40012300 	.word	0x40012300
 8003008:	0f000001 	.word	0x0f000001

0800300c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <__NVIC_SetPriorityGrouping+0x40>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003028:	4013      	ands	r3, r2
 800302a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <__NVIC_SetPriorityGrouping+0x44>)
 8003036:	4313      	orrs	r3, r2
 8003038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800303a:	4a04      	ldr	r2, [pc, #16]	; (800304c <__NVIC_SetPriorityGrouping+0x40>)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	60d3      	str	r3, [r2, #12]
}
 8003040:	bf00      	nop
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	e000ed00 	.word	0xe000ed00
 8003050:	05fa0000 	.word	0x05fa0000

08003054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <__NVIC_GetPriorityGrouping+0x18>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	0a1b      	lsrs	r3, r3, #8
 800305e:	f003 0307 	and.w	r3, r3, #7
}
 8003062:	4618      	mov	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	2b00      	cmp	r3, #0
 8003080:	db0b      	blt.n	800309a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	f003 021f 	and.w	r2, r3, #31
 8003088:	4907      	ldr	r1, [pc, #28]	; (80030a8 <__NVIC_EnableIRQ+0x38>)
 800308a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	2001      	movs	r0, #1
 8003092:	fa00 f202 	lsl.w	r2, r0, r2
 8003096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000e100 	.word	0xe000e100

080030ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	6039      	str	r1, [r7, #0]
 80030b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	db0a      	blt.n	80030d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	490c      	ldr	r1, [pc, #48]	; (80030f8 <__NVIC_SetPriority+0x4c>)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	0112      	lsls	r2, r2, #4
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	440b      	add	r3, r1
 80030d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030d4:	e00a      	b.n	80030ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	4908      	ldr	r1, [pc, #32]	; (80030fc <__NVIC_SetPriority+0x50>)
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	3b04      	subs	r3, #4
 80030e4:	0112      	lsls	r2, r2, #4
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	440b      	add	r3, r1
 80030ea:	761a      	strb	r2, [r3, #24]
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000e100 	.word	0xe000e100
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003100:	b480      	push	{r7}
 8003102:	b089      	sub	sp, #36	; 0x24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f1c3 0307 	rsb	r3, r3, #7
 800311a:	2b04      	cmp	r3, #4
 800311c:	bf28      	it	cs
 800311e:	2304      	movcs	r3, #4
 8003120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3304      	adds	r3, #4
 8003126:	2b06      	cmp	r3, #6
 8003128:	d902      	bls.n	8003130 <NVIC_EncodePriority+0x30>
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3b03      	subs	r3, #3
 800312e:	e000      	b.n	8003132 <NVIC_EncodePriority+0x32>
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43da      	mvns	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	401a      	ands	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003148:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	fa01 f303 	lsl.w	r3, r1, r3
 8003152:	43d9      	mvns	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003158:	4313      	orrs	r3, r2
         );
}
 800315a:	4618      	mov	r0, r3
 800315c:	3724      	adds	r7, #36	; 0x24
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff ff4c 	bl	800300c <__NVIC_SetPriorityGrouping>
}
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
 8003188:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800318e:	f7ff ff61 	bl	8003054 <__NVIC_GetPriorityGrouping>
 8003192:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	6978      	ldr	r0, [r7, #20]
 800319a:	f7ff ffb1 	bl	8003100 <NVIC_EncodePriority>
 800319e:	4602      	mov	r2, r0
 80031a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ff80 	bl	80030ac <__NVIC_SetPriority>
}
 80031ac:	bf00      	nop
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff ff54 	bl	8003070 <__NVIC_EnableIRQ>
}
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e054      	b.n	800328c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	7f5b      	ldrb	r3, [r3, #29]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d105      	bne.n	80031f8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7fe fc9c 	bl	8001b30 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	791b      	ldrb	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10c      	bne.n	8003220 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a22      	ldr	r2, [pc, #136]	; (8003294 <HAL_CRC_Init+0xc4>)
 800320c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0218 	bic.w	r2, r2, #24
 800321c:	609a      	str	r2, [r3, #8]
 800321e:	e00c      	b.n	800323a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6899      	ldr	r1, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	461a      	mov	r2, r3
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f834 	bl	8003298 <HAL_CRCEx_Polynomial_Set>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e028      	b.n	800328c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	795b      	ldrb	r3, [r3, #5]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d105      	bne.n	800324e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800324a:	611a      	str	r2, [r3, #16]
 800324c:	e004      	b.n	8003258 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6912      	ldr	r2, [r2, #16]
 8003256:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695a      	ldr	r2, [r3, #20]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699a      	ldr	r2, [r3, #24]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	04c11db7 	.word	0x04c11db7

08003298 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80032a8:	231f      	movs	r3, #31
 80032aa:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80032ac:	bf00      	nop
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1e5a      	subs	r2, r3, #1
 80032b2:	613a      	str	r2, [r7, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d009      	beq.n	80032cc <HAL_CRCEx_Polynomial_Set+0x34>
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f003 031f 	and.w	r3, r3, #31
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	fa22 f303 	lsr.w	r3, r2, r3
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_CRCEx_Polynomial_Set+0x16>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b18      	cmp	r3, #24
 80032d0:	d846      	bhi.n	8003360 <HAL_CRCEx_Polynomial_Set+0xc8>
 80032d2:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80032d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d8:	08003367 	.word	0x08003367
 80032dc:	08003361 	.word	0x08003361
 80032e0:	08003361 	.word	0x08003361
 80032e4:	08003361 	.word	0x08003361
 80032e8:	08003361 	.word	0x08003361
 80032ec:	08003361 	.word	0x08003361
 80032f0:	08003361 	.word	0x08003361
 80032f4:	08003361 	.word	0x08003361
 80032f8:	08003355 	.word	0x08003355
 80032fc:	08003361 	.word	0x08003361
 8003300:	08003361 	.word	0x08003361
 8003304:	08003361 	.word	0x08003361
 8003308:	08003361 	.word	0x08003361
 800330c:	08003361 	.word	0x08003361
 8003310:	08003361 	.word	0x08003361
 8003314:	08003361 	.word	0x08003361
 8003318:	08003349 	.word	0x08003349
 800331c:	08003361 	.word	0x08003361
 8003320:	08003361 	.word	0x08003361
 8003324:	08003361 	.word	0x08003361
 8003328:	08003361 	.word	0x08003361
 800332c:	08003361 	.word	0x08003361
 8003330:	08003361 	.word	0x08003361
 8003334:	08003361 	.word	0x08003361
 8003338:	0800333d 	.word	0x0800333d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b06      	cmp	r3, #6
 8003340:	d913      	bls.n	800336a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003346:	e010      	b.n	800336a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	2b07      	cmp	r3, #7
 800334c:	d90f      	bls.n	800336e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003352:	e00c      	b.n	800336e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	2b0f      	cmp	r3, #15
 8003358:	d90b      	bls.n	8003372 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800335e:	e008      	b.n	8003372 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	75fb      	strb	r3, [r7, #23]
      break;
 8003364:	e006      	b.n	8003374 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003366:	bf00      	nop
 8003368:	e004      	b.n	8003374 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800336a:	bf00      	nop
 800336c:	e002      	b.n	8003374 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800336e:	bf00      	nop
 8003370:	e000      	b.n	8003374 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003372:	bf00      	nop
  }
  if (status == HAL_OK)
 8003374:	7dfb      	ldrb	r3, [r7, #23]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10d      	bne.n	8003396 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f023 0118 	bic.w	r1, r3, #24
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	430a      	orrs	r2, r1
 8003394:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003396:	7dfb      	ldrb	r3, [r7, #23]
}
 8003398:	4618      	mov	r0, r3
 800339a:	371c      	adds	r7, #28
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e069      	b.n	800348a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d102      	bne.n	80033c8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fe fbd4 	bl	8001b70 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6819      	ldr	r1, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <HAL_DCMI_Init+0xf0>)
 80033ea:	400b      	ands	r3, r1
 80033ec:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6819      	ldr	r1, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003402:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800340e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800341a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003426:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003432:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b10      	cmp	r3, #16
 8003442:	d112      	bne.n	800346a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	7f1b      	ldrb	r3, [r3, #28]
 8003448:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	7f5b      	ldrb	r3, [r3, #29]
 800344e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003450:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	7f9b      	ldrb	r3, [r3, #30]
 8003456:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003458:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	7fdb      	ldrb	r3, [r3, #31]
 8003460:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003466:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003468:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f042 021e 	orr.w	r2, r2, #30
 8003478:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	ffe0f007 	.word	0xffe0f007

08003498 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e039      	b.n	800351e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d106      	bne.n	80034c4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fe fc14 	bl	8001cec <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e8:	f023 0107 	bic.w	r1, r3, #7
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034fe:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <HAL_DMA2D_Init+0x90>)
 8003500:	4013      	ands	r3, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68d1      	ldr	r1, [r2, #12]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	430b      	orrs	r3, r1
 800350c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	ffffc000 	.word	0xffffc000

0800352c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d026      	beq.n	800359c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003554:	2b00      	cmp	r3, #0
 8003556:	d021      	beq.n	800359c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003566:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356c:	f043 0201 	orr.w	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2201      	movs	r2, #1
 800357a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2204      	movs	r2, #4
 8003580:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d026      	beq.n	80035f4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d021      	beq.n	80035f4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035be:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2220      	movs	r2, #32
 80035c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035cc:	f043 0202 	orr.w	r2, r3, #2
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2204      	movs	r2, #4
 80035d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d026      	beq.n	800364c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003604:	2b00      	cmp	r3, #0
 8003606:	d021      	beq.n	800364c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003616:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2208      	movs	r2, #8
 800361e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003624:	f043 0204 	orr.w	r2, r3, #4
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2204      	movs	r2, #4
 8003630:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b00      	cmp	r3, #0
 8003654:	d013      	beq.n	800367e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00e      	beq.n	800367e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2204      	movs	r2, #4
 8003676:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f853 	bl	8003724 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d024      	beq.n	80036d2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01f      	beq.n	80036d2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036a0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2202      	movs	r2, #2
 80036a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d01f      	beq.n	800371c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d01a      	beq.n	800371c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036f4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2210      	movs	r2, #16
 80036fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f80e 	bl	8003738 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800371c:	bf00      	nop
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_DMA2D_ConfigLayer+0x20>
 8003768:	2302      	movs	r3, #2
 800376a:	e079      	b.n	8003860 <HAL_DMA2D_ConfigLayer+0x114>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	3318      	adds	r3, #24
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	4413      	add	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	041b      	lsls	r3, r3, #16
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003796:	4b35      	ldr	r3, [pc, #212]	; (800386c <HAL_DMA2D_ConfigLayer+0x120>)
 8003798:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b0a      	cmp	r3, #10
 80037a0:	d003      	beq.n	80037aa <HAL_DMA2D_ConfigLayer+0x5e>
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b09      	cmp	r3, #9
 80037a8:	d107      	bne.n	80037ba <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	e005      	b.n	80037c6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	061b      	lsls	r3, r3, #24
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d120      	bne.n	800380e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	43db      	mvns	r3, r3
 80037d6:	ea02 0103 	and.w	r1, r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	6812      	ldr	r2, [r2, #0]
 80037ec:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b0a      	cmp	r3, #10
 80037f4:	d003      	beq.n	80037fe <HAL_DMA2D_ConfigLayer+0xb2>
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b09      	cmp	r3, #9
 80037fc:	d127      	bne.n	800384e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800380a:	629a      	str	r2, [r3, #40]	; 0x28
 800380c:	e01f      	b.n	800384e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69da      	ldr	r2, [r3, #28]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	43db      	mvns	r3, r3
 8003818:	ea02 0103 	and.w	r1, r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	430a      	orrs	r2, r1
 8003824:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	6812      	ldr	r2, [r2, #0]
 800382e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b0a      	cmp	r3, #10
 8003836:	d003      	beq.n	8003840 <HAL_DMA2D_ConfigLayer+0xf4>
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b09      	cmp	r3, #9
 800383e:	d106      	bne.n	800384e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800384c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	371c      	adds	r7, #28
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	ff03000f 	.word	0xff03000f

08003870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003870:	b480      	push	{r7}
 8003872:	b089      	sub	sp, #36	; 0x24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003882:	2300      	movs	r3, #0
 8003884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003886:	2300      	movs	r3, #0
 8003888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	e175      	b.n	8003b7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003890:	2201      	movs	r2, #1
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4013      	ands	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	f040 8164 	bne.w	8003b76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d00b      	beq.n	80038ce <HAL_GPIO_Init+0x5e>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d007      	beq.n	80038ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038c2:	2b11      	cmp	r3, #17
 80038c4:	d003      	beq.n	80038ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b12      	cmp	r3, #18
 80038cc:	d130      	bne.n	8003930 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	2203      	movs	r2, #3
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43db      	mvns	r3, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003904:	2201      	movs	r2, #1
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	f003 0201 	and.w	r2, r3, #1
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	2203      	movs	r2, #3
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b02      	cmp	r3, #2
 8003966:	d003      	beq.n	8003970 <HAL_GPIO_Init+0x100>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b12      	cmp	r3, #18
 800396e:	d123      	bne.n	80039b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	08da      	lsrs	r2, r3, #3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3208      	adds	r2, #8
 8003978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800397c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	220f      	movs	r2, #15
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	08da      	lsrs	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3208      	adds	r2, #8
 80039b2:	69b9      	ldr	r1, [r7, #24]
 80039b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	2203      	movs	r2, #3
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4013      	ands	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 0203 	and.w	r2, r3, #3
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80be 	beq.w	8003b76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039fa:	4b66      	ldr	r3, [pc, #408]	; (8003b94 <HAL_GPIO_Init+0x324>)
 80039fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fe:	4a65      	ldr	r2, [pc, #404]	; (8003b94 <HAL_GPIO_Init+0x324>)
 8003a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a04:	6453      	str	r3, [r2, #68]	; 0x44
 8003a06:	4b63      	ldr	r3, [pc, #396]	; (8003b94 <HAL_GPIO_Init+0x324>)
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003a12:	4a61      	ldr	r2, [pc, #388]	; (8003b98 <HAL_GPIO_Init+0x328>)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	089b      	lsrs	r3, r3, #2
 8003a18:	3302      	adds	r3, #2
 8003a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	220f      	movs	r2, #15
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4013      	ands	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a58      	ldr	r2, [pc, #352]	; (8003b9c <HAL_GPIO_Init+0x32c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d037      	beq.n	8003aae <HAL_GPIO_Init+0x23e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a57      	ldr	r2, [pc, #348]	; (8003ba0 <HAL_GPIO_Init+0x330>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d031      	beq.n	8003aaa <HAL_GPIO_Init+0x23a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a56      	ldr	r2, [pc, #344]	; (8003ba4 <HAL_GPIO_Init+0x334>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d02b      	beq.n	8003aa6 <HAL_GPIO_Init+0x236>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a55      	ldr	r2, [pc, #340]	; (8003ba8 <HAL_GPIO_Init+0x338>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d025      	beq.n	8003aa2 <HAL_GPIO_Init+0x232>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a54      	ldr	r2, [pc, #336]	; (8003bac <HAL_GPIO_Init+0x33c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d01f      	beq.n	8003a9e <HAL_GPIO_Init+0x22e>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a53      	ldr	r2, [pc, #332]	; (8003bb0 <HAL_GPIO_Init+0x340>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d019      	beq.n	8003a9a <HAL_GPIO_Init+0x22a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a52      	ldr	r2, [pc, #328]	; (8003bb4 <HAL_GPIO_Init+0x344>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d013      	beq.n	8003a96 <HAL_GPIO_Init+0x226>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a51      	ldr	r2, [pc, #324]	; (8003bb8 <HAL_GPIO_Init+0x348>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00d      	beq.n	8003a92 <HAL_GPIO_Init+0x222>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a50      	ldr	r2, [pc, #320]	; (8003bbc <HAL_GPIO_Init+0x34c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <HAL_GPIO_Init+0x21e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a4f      	ldr	r2, [pc, #316]	; (8003bc0 <HAL_GPIO_Init+0x350>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d101      	bne.n	8003a8a <HAL_GPIO_Init+0x21a>
 8003a86:	2309      	movs	r3, #9
 8003a88:	e012      	b.n	8003ab0 <HAL_GPIO_Init+0x240>
 8003a8a:	230a      	movs	r3, #10
 8003a8c:	e010      	b.n	8003ab0 <HAL_GPIO_Init+0x240>
 8003a8e:	2308      	movs	r3, #8
 8003a90:	e00e      	b.n	8003ab0 <HAL_GPIO_Init+0x240>
 8003a92:	2307      	movs	r3, #7
 8003a94:	e00c      	b.n	8003ab0 <HAL_GPIO_Init+0x240>
 8003a96:	2306      	movs	r3, #6
 8003a98:	e00a      	b.n	8003ab0 <HAL_GPIO_Init+0x240>
 8003a9a:	2305      	movs	r3, #5
 8003a9c:	e008      	b.n	8003ab0 <HAL_GPIO_Init+0x240>
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	e006      	b.n	8003ab0 <HAL_GPIO_Init+0x240>
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e004      	b.n	8003ab0 <HAL_GPIO_Init+0x240>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e002      	b.n	8003ab0 <HAL_GPIO_Init+0x240>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <HAL_GPIO_Init+0x240>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	69fa      	ldr	r2, [r7, #28]
 8003ab2:	f002 0203 	and.w	r2, r2, #3
 8003ab6:	0092      	lsls	r2, r2, #2
 8003ab8:	4093      	lsls	r3, r2
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ac0:	4935      	ldr	r1, [pc, #212]	; (8003b98 <HAL_GPIO_Init+0x328>)
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	089b      	lsrs	r3, r3, #2
 8003ac6:	3302      	adds	r3, #2
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ace:	4b3d      	ldr	r3, [pc, #244]	; (8003bc4 <HAL_GPIO_Init+0x354>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003af2:	4a34      	ldr	r2, [pc, #208]	; (8003bc4 <HAL_GPIO_Init+0x354>)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003af8:	4b32      	ldr	r3, [pc, #200]	; (8003bc4 <HAL_GPIO_Init+0x354>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b1c:	4a29      	ldr	r2, [pc, #164]	; (8003bc4 <HAL_GPIO_Init+0x354>)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b22:	4b28      	ldr	r3, [pc, #160]	; (8003bc4 <HAL_GPIO_Init+0x354>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b46:	4a1f      	ldr	r2, [pc, #124]	; (8003bc4 <HAL_GPIO_Init+0x354>)
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b4c:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <HAL_GPIO_Init+0x354>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b70:	4a14      	ldr	r2, [pc, #80]	; (8003bc4 <HAL_GPIO_Init+0x354>)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	61fb      	str	r3, [r7, #28]
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	2b0f      	cmp	r3, #15
 8003b80:	f67f ae86 	bls.w	8003890 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop
 8003b88:	3724      	adds	r7, #36	; 0x24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40023800 	.word	0x40023800
 8003b98:	40013800 	.word	0x40013800
 8003b9c:	40020000 	.word	0x40020000
 8003ba0:	40020400 	.word	0x40020400
 8003ba4:	40020800 	.word	0x40020800
 8003ba8:	40020c00 	.word	0x40020c00
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	40021400 	.word	0x40021400
 8003bb4:	40021800 	.word	0x40021800
 8003bb8:	40021c00 	.word	0x40021c00
 8003bbc:	40022000 	.word	0x40022000
 8003bc0:	40022400 	.word	0x40022400
 8003bc4:	40013c00 	.word	0x40013c00

08003bc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	887b      	ldrh	r3, [r7, #2]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
 8003be4:	e001      	b.n	8003bea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003be6:	2300      	movs	r3, #0
 8003be8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	807b      	strh	r3, [r7, #2]
 8003c04:	4613      	mov	r3, r2
 8003c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c08:	787b      	ldrb	r3, [r7, #1]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c0e:	887a      	ldrh	r2, [r7, #2]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003c14:	e003      	b.n	8003c1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003c16:	887b      	ldrh	r3, [r7, #2]
 8003c18:	041a      	lsls	r2, r3, #16
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	619a      	str	r2, [r3, #24]
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b085      	sub	sp, #20
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	460b      	mov	r3, r1
 8003c34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c3c:	887a      	ldrh	r2, [r7, #2]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4013      	ands	r3, r2
 8003c42:	041a      	lsls	r2, r3, #16
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	43d9      	mvns	r1, r3
 8003c48:	887b      	ldrh	r3, [r7, #2]
 8003c4a:	400b      	ands	r3, r1
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	619a      	str	r2, [r3, #24]
}
 8003c52:	bf00      	nop
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b086      	sub	sp, #24
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f007 fedf 	bl	800ba38 <USB_GetMode>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	f040 80ef 	bne.w	8003e60 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f007 fec3 	bl	800ba12 <USB_ReadInterrupts>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 80e5 	beq.w	8003e5e <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f007 feba 	bl	800ba12 <USB_ReadInterrupts>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ca8:	d104      	bne.n	8003cb4 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003cb2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f007 feaa 	bl	800ba12 <USB_ReadInterrupts>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cc8:	d104      	bne.n	8003cd4 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003cd2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f007 fe9a 	bl	800ba12 <USB_ReadInterrupts>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ce4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ce8:	d104      	bne.n	8003cf4 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003cf2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f007 fe8a 	bl	800ba12 <USB_ReadInterrupts>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d103      	bne.n	8003d10 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f007 fe7c 	bl	800ba12 <USB_ReadInterrupts>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d24:	d115      	bne.n	8003d52 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003d2e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d108      	bne.n	8003d52 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f008 fb2a 	bl	800c39a <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f007 fe81 	bl	800ba54 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f007 fe5b 	bl	800ba12 <USB_ReadInterrupts>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d66:	d102      	bne.n	8003d6e <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f001 f98a 	bl	8005082 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f007 fe4d 	bl	800ba12 <USB_ReadInterrupts>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d106      	bne.n	8003d90 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f008 faed 	bl	800c362 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f007 fe3c 	bl	800ba12 <USB_ReadInterrupts>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	f003 0310 	and.w	r3, r3, #16
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	d101      	bne.n	8003da8 <HAL_HCD_IRQHandler+0x14a>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <HAL_HCD_IRQHandler+0x14c>
 8003da8:	2300      	movs	r3, #0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d012      	beq.n	8003dd4 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	699a      	ldr	r2, [r3, #24]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0210 	bic.w	r2, r2, #16
 8003dbc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f001 f88d 	bl	8004ede <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699a      	ldr	r2, [r3, #24]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0210 	orr.w	r2, r2, #16
 8003dd2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f007 fe1a 	bl	800ba12 <USB_ReadInterrupts>
 8003dde:	4603      	mov	r3, r0
 8003de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003de8:	d13a      	bne.n	8003e60 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f007 fe6a 	bl	800bac8 <USB_HC_ReadInterrupt>
 8003df4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	e025      	b.n	8003e48 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d018      	beq.n	8003e42 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e26:	d106      	bne.n	8003e36 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f836 	bl	8003ea0 <HCD_HC_IN_IRQHandler>
 8003e34:	e005      	b.n	8003e42 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fc51 	bl	80046e4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	3301      	adds	r3, #1
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d3d4      	bcc.n	8003dfc <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e5a:	615a      	str	r2, [r3, #20]
 8003e5c:	e000      	b.n	8003e60 <HAL_HCD_IRQHandler+0x202>
      return;
 8003e5e:	bf00      	nop
    }
  }
}
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_HCD_Stop+0x16>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e00d      	b.n	8003e98 <HAL_HCD_Stop+0x32>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f007 ff4a 	bl	800bd22 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003eb6:	78fb      	ldrb	r3, [r7, #3]
 8003eb8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d119      	bne.n	8003f04 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003edc:	461a      	mov	r2, r3
 8003ede:	2304      	movs	r3, #4
 8003ee0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	0151      	lsls	r1, r2, #5
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	440a      	add	r2, r1
 8003ef8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003efc:	f043 0302 	orr.w	r3, r3, #2
 8003f00:	60d3      	str	r3, [r2, #12]
 8003f02:	e101      	b.n	8004108 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f1a:	d12b      	bne.n	8003f74 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f28:	461a      	mov	r2, r3
 8003f2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	212c      	movs	r1, #44	; 0x2c
 8003f36:	fb01 f303 	mul.w	r3, r1, r3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3361      	adds	r3, #97	; 0x61
 8003f3e:	2207      	movs	r2, #7
 8003f40:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	0151      	lsls	r1, r2, #5
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	440a      	add	r2, r1
 8003f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f5c:	f043 0302 	orr.w	r3, r3, #2
 8003f60:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f007 fdbc 	bl	800baea <USB_HC_Halt>
 8003f72:	e0c9      	b.n	8004108 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b20      	cmp	r3, #32
 8003f88:	d109      	bne.n	8003f9e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f96:	461a      	mov	r2, r3
 8003f98:	2320      	movs	r3, #32
 8003f9a:	6093      	str	r3, [r2, #8]
 8003f9c:	e0b4      	b.n	8004108 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d133      	bne.n	800401c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	0151      	lsls	r1, r2, #5
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	440a      	add	r2, r1
 8003fca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fce:	f043 0302 	orr.w	r3, r3, #2
 8003fd2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	212c      	movs	r1, #44	; 0x2c
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	4413      	add	r3, r2
 8003fe0:	3361      	adds	r3, #97	; 0x61
 8003fe2:	2205      	movs	r2, #5
 8003fe4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004004:	461a      	mov	r2, r3
 8004006:	2308      	movs	r3, #8
 8004008:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	4611      	mov	r1, r2
 8004014:	4618      	mov	r0, r3
 8004016:	f007 fd68 	bl	800baea <USB_HC_Halt>
 800401a:	e075      	b.n	8004108 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4413      	add	r3, r2
 8004024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800402e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004032:	d134      	bne.n	800409e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4413      	add	r3, r2
 800403c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	0151      	lsls	r1, r2, #5
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	440a      	add	r2, r1
 800404a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800404e:	f043 0302 	orr.w	r3, r3, #2
 8004052:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	212c      	movs	r1, #44	; 0x2c
 800405a:	fb01 f303 	mul.w	r3, r1, r3
 800405e:	4413      	add	r3, r2
 8004060:	3361      	adds	r3, #97	; 0x61
 8004062:	2208      	movs	r2, #8
 8004064:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4413      	add	r3, r2
 800406e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004072:	461a      	mov	r2, r3
 8004074:	2310      	movs	r3, #16
 8004076:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	4413      	add	r3, r2
 8004080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004084:	461a      	mov	r2, r3
 8004086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800408a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	4611      	mov	r1, r2
 8004096:	4618      	mov	r0, r3
 8004098:	f007 fd27 	bl	800baea <USB_HC_Halt>
 800409c:	e034      	b.n	8004108 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b0:	2b80      	cmp	r3, #128	; 0x80
 80040b2:	d129      	bne.n	8004108 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	0151      	lsls	r1, r2, #5
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	440a      	add	r2, r1
 80040ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040ce:	f043 0302 	orr.w	r3, r3, #2
 80040d2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	212c      	movs	r1, #44	; 0x2c
 80040da:	fb01 f303 	mul.w	r3, r1, r3
 80040de:	4413      	add	r3, r2
 80040e0:	3361      	adds	r3, #97	; 0x61
 80040e2:	2206      	movs	r2, #6
 80040e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	4611      	mov	r1, r2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f007 fcfa 	bl	800baea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004102:	461a      	mov	r2, r3
 8004104:	2380      	movs	r3, #128	; 0x80
 8004106:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4413      	add	r3, r2
 8004110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800411a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800411e:	d122      	bne.n	8004166 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4413      	add	r3, r2
 8004128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	0151      	lsls	r1, r2, #5
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	440a      	add	r2, r1
 8004136:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800413a:	f043 0302 	orr.w	r3, r3, #2
 800413e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	4611      	mov	r1, r2
 800414a:	4618      	mov	r0, r3
 800414c:	f007 fccd 	bl	800baea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4413      	add	r3, r2
 8004158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415c:	461a      	mov	r2, r3
 800415e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004162:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004164:	e2ba      	b.n	80046dc <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4413      	add	r3, r2
 800416e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b01      	cmp	r3, #1
 800417a:	f040 811b 	bne.w	80043b4 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d019      	beq.n	80041ba <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	212c      	movs	r1, #44	; 0x2c
 800418c:	fb01 f303 	mul.w	r3, r1, r3
 8004190:	4413      	add	r3, r2
 8004192:	3348      	adds	r3, #72	; 0x48
 8004194:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	0159      	lsls	r1, r3, #5
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	440b      	add	r3, r1
 800419e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80041a8:	1ad2      	subs	r2, r2, r3
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	202c      	movs	r0, #44	; 0x2c
 80041b0:	fb00 f303 	mul.w	r3, r0, r3
 80041b4:	440b      	add	r3, r1
 80041b6:	3350      	adds	r3, #80	; 0x50
 80041b8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	212c      	movs	r1, #44	; 0x2c
 80041c0:	fb01 f303 	mul.w	r3, r1, r3
 80041c4:	4413      	add	r3, r2
 80041c6:	3361      	adds	r3, #97	; 0x61
 80041c8:	2201      	movs	r2, #1
 80041ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	212c      	movs	r1, #44	; 0x2c
 80041d2:	fb01 f303 	mul.w	r3, r1, r3
 80041d6:	4413      	add	r3, r2
 80041d8:	335c      	adds	r3, #92	; 0x5c
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ea:	461a      	mov	r2, r3
 80041ec:	2301      	movs	r3, #1
 80041ee:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	212c      	movs	r1, #44	; 0x2c
 80041f6:	fb01 f303 	mul.w	r3, r1, r3
 80041fa:	4413      	add	r3, r2
 80041fc:	333f      	adds	r3, #63	; 0x3f
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d009      	beq.n	8004218 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	212c      	movs	r1, #44	; 0x2c
 800420a:	fb01 f303 	mul.w	r3, r1, r3
 800420e:	4413      	add	r3, r2
 8004210:	333f      	adds	r3, #63	; 0x3f
 8004212:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004214:	2b02      	cmp	r3, #2
 8004216:	d121      	bne.n	800425c <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4413      	add	r3, r2
 8004220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	0151      	lsls	r1, r2, #5
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	440a      	add	r2, r1
 800422e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004232:	f043 0302 	orr.w	r3, r3, #2
 8004236:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	4611      	mov	r1, r2
 8004242:	4618      	mov	r0, r3
 8004244:	f007 fc51 	bl	800baea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	4413      	add	r3, r2
 8004250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004254:	461a      	mov	r2, r3
 8004256:	2310      	movs	r3, #16
 8004258:	6093      	str	r3, [r2, #8]
 800425a:	e066      	b.n	800432a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	212c      	movs	r1, #44	; 0x2c
 8004262:	fb01 f303 	mul.w	r3, r1, r3
 8004266:	4413      	add	r3, r2
 8004268:	333f      	adds	r3, #63	; 0x3f
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b03      	cmp	r3, #3
 800426e:	d127      	bne.n	80042c0 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4413      	add	r3, r2
 8004278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	0151      	lsls	r1, r2, #5
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	440a      	add	r2, r1
 8004286:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800428a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800428e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	212c      	movs	r1, #44	; 0x2c
 8004296:	fb01 f303 	mul.w	r3, r1, r3
 800429a:	4413      	add	r3, r2
 800429c:	3360      	adds	r3, #96	; 0x60
 800429e:	2201      	movs	r2, #1
 80042a0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	b2d9      	uxtb	r1, r3
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	202c      	movs	r0, #44	; 0x2c
 80042ac:	fb00 f303 	mul.w	r3, r0, r3
 80042b0:	4413      	add	r3, r2
 80042b2:	3360      	adds	r3, #96	; 0x60
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	461a      	mov	r2, r3
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f008 f87c 	bl	800c3b6 <HAL_HCD_HC_NotifyURBChange_Callback>
 80042be:	e034      	b.n	800432a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	212c      	movs	r1, #44	; 0x2c
 80042c6:	fb01 f303 	mul.w	r3, r1, r3
 80042ca:	4413      	add	r3, r2
 80042cc:	333f      	adds	r3, #63	; 0x3f
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d12a      	bne.n	800432a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	212c      	movs	r1, #44	; 0x2c
 80042da:	fb01 f303 	mul.w	r3, r1, r3
 80042de:	4413      	add	r3, r2
 80042e0:	3360      	adds	r3, #96	; 0x60
 80042e2:	2201      	movs	r2, #1
 80042e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	212c      	movs	r1, #44	; 0x2c
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	4413      	add	r3, r2
 80042f2:	3354      	adds	r3, #84	; 0x54
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	f083 0301 	eor.w	r3, r3, #1
 80042fa:	b2d8      	uxtb	r0, r3
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	212c      	movs	r1, #44	; 0x2c
 8004302:	fb01 f303 	mul.w	r3, r1, r3
 8004306:	4413      	add	r3, r2
 8004308:	3354      	adds	r3, #84	; 0x54
 800430a:	4602      	mov	r2, r0
 800430c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	b2d9      	uxtb	r1, r3
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	202c      	movs	r0, #44	; 0x2c
 8004318:	fb00 f303 	mul.w	r3, r0, r3
 800431c:	4413      	add	r3, r2
 800431e:	3360      	adds	r3, #96	; 0x60
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f008 f846 	bl	800c3b6 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d12b      	bne.n	800438a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	212c      	movs	r1, #44	; 0x2c
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	4413      	add	r3, r2
 800433e:	3348      	adds	r3, #72	; 0x48
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6879      	ldr	r1, [r7, #4]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	202c      	movs	r0, #44	; 0x2c
 8004348:	fb00 f202 	mul.w	r2, r0, r2
 800434c:	440a      	add	r2, r1
 800434e:	3240      	adds	r2, #64	; 0x40
 8004350:	8812      	ldrh	r2, [r2, #0]
 8004352:	fbb3 f3f2 	udiv	r3, r3, r2
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 81be 	beq.w	80046dc <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	212c      	movs	r1, #44	; 0x2c
 8004366:	fb01 f303 	mul.w	r3, r1, r3
 800436a:	4413      	add	r3, r2
 800436c:	3354      	adds	r3, #84	; 0x54
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	f083 0301 	eor.w	r3, r3, #1
 8004374:	b2d8      	uxtb	r0, r3
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	212c      	movs	r1, #44	; 0x2c
 800437c:	fb01 f303 	mul.w	r3, r1, r3
 8004380:	4413      	add	r3, r2
 8004382:	3354      	adds	r3, #84	; 0x54
 8004384:	4602      	mov	r2, r0
 8004386:	701a      	strb	r2, [r3, #0]
}
 8004388:	e1a8      	b.n	80046dc <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	212c      	movs	r1, #44	; 0x2c
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	4413      	add	r3, r2
 8004396:	3354      	adds	r3, #84	; 0x54
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	f083 0301 	eor.w	r3, r3, #1
 800439e:	b2d8      	uxtb	r0, r3
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	212c      	movs	r1, #44	; 0x2c
 80043a6:	fb01 f303 	mul.w	r3, r1, r3
 80043aa:	4413      	add	r3, r2
 80043ac:	3354      	adds	r3, #84	; 0x54
 80043ae:	4602      	mov	r2, r0
 80043b0:	701a      	strb	r2, [r3, #0]
}
 80043b2:	e193      	b.n	80046dc <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	f040 8106 	bne.w	80045d8 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	0151      	lsls	r1, r2, #5
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	440a      	add	r2, r1
 80043e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043e6:	f023 0302 	bic.w	r3, r3, #2
 80043ea:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	212c      	movs	r1, #44	; 0x2c
 80043f2:	fb01 f303 	mul.w	r3, r1, r3
 80043f6:	4413      	add	r3, r2
 80043f8:	3361      	adds	r3, #97	; 0x61
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d109      	bne.n	8004414 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	212c      	movs	r1, #44	; 0x2c
 8004406:	fb01 f303 	mul.w	r3, r1, r3
 800440a:	4413      	add	r3, r2
 800440c:	3360      	adds	r3, #96	; 0x60
 800440e:	2201      	movs	r2, #1
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	e0c9      	b.n	80045a8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	212c      	movs	r1, #44	; 0x2c
 800441a:	fb01 f303 	mul.w	r3, r1, r3
 800441e:	4413      	add	r3, r2
 8004420:	3361      	adds	r3, #97	; 0x61
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b05      	cmp	r3, #5
 8004426:	d109      	bne.n	800443c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	212c      	movs	r1, #44	; 0x2c
 800442e:	fb01 f303 	mul.w	r3, r1, r3
 8004432:	4413      	add	r3, r2
 8004434:	3360      	adds	r3, #96	; 0x60
 8004436:	2205      	movs	r2, #5
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	e0b5      	b.n	80045a8 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	212c      	movs	r1, #44	; 0x2c
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	4413      	add	r3, r2
 8004448:	3361      	adds	r3, #97	; 0x61
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b06      	cmp	r3, #6
 800444e:	d009      	beq.n	8004464 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	212c      	movs	r1, #44	; 0x2c
 8004456:	fb01 f303 	mul.w	r3, r1, r3
 800445a:	4413      	add	r3, r2
 800445c:	3361      	adds	r3, #97	; 0x61
 800445e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004460:	2b08      	cmp	r3, #8
 8004462:	d150      	bne.n	8004506 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	212c      	movs	r1, #44	; 0x2c
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	4413      	add	r3, r2
 8004470:	335c      	adds	r3, #92	; 0x5c
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	202c      	movs	r0, #44	; 0x2c
 800447c:	fb00 f303 	mul.w	r3, r0, r3
 8004480:	440b      	add	r3, r1
 8004482:	335c      	adds	r3, #92	; 0x5c
 8004484:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	212c      	movs	r1, #44	; 0x2c
 800448c:	fb01 f303 	mul.w	r3, r1, r3
 8004490:	4413      	add	r3, r2
 8004492:	335c      	adds	r3, #92	; 0x5c
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d912      	bls.n	80044c0 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	212c      	movs	r1, #44	; 0x2c
 80044a0:	fb01 f303 	mul.w	r3, r1, r3
 80044a4:	4413      	add	r3, r2
 80044a6:	335c      	adds	r3, #92	; 0x5c
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	212c      	movs	r1, #44	; 0x2c
 80044b2:	fb01 f303 	mul.w	r3, r1, r3
 80044b6:	4413      	add	r3, r2
 80044b8:	3360      	adds	r3, #96	; 0x60
 80044ba:	2204      	movs	r2, #4
 80044bc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80044be:	e073      	b.n	80045a8 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	212c      	movs	r1, #44	; 0x2c
 80044c6:	fb01 f303 	mul.w	r3, r1, r3
 80044ca:	4413      	add	r3, r2
 80044cc:	3360      	adds	r3, #96	; 0x60
 80044ce:	2202      	movs	r2, #2
 80044d0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044e8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044f0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044fe:	461a      	mov	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004504:	e050      	b.n	80045a8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	212c      	movs	r1, #44	; 0x2c
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	4413      	add	r3, r2
 8004512:	3361      	adds	r3, #97	; 0x61
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b03      	cmp	r3, #3
 8004518:	d122      	bne.n	8004560 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	212c      	movs	r1, #44	; 0x2c
 8004520:	fb01 f303 	mul.w	r3, r1, r3
 8004524:	4413      	add	r3, r2
 8004526:	3360      	adds	r3, #96	; 0x60
 8004528:	2202      	movs	r2, #2
 800452a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	4413      	add	r3, r2
 8004534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004542:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800454a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	4413      	add	r3, r2
 8004554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004558:	461a      	mov	r2, r3
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	e023      	b.n	80045a8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	212c      	movs	r1, #44	; 0x2c
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	4413      	add	r3, r2
 800456c:	3361      	adds	r3, #97	; 0x61
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b07      	cmp	r3, #7
 8004572:	d119      	bne.n	80045a8 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	212c      	movs	r1, #44	; 0x2c
 800457a:	fb01 f303 	mul.w	r3, r1, r3
 800457e:	4413      	add	r3, r2
 8004580:	335c      	adds	r3, #92	; 0x5c
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	202c      	movs	r0, #44	; 0x2c
 800458c:	fb00 f303 	mul.w	r3, r0, r3
 8004590:	440b      	add	r3, r1
 8004592:	335c      	adds	r3, #92	; 0x5c
 8004594:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	212c      	movs	r1, #44	; 0x2c
 800459c:	fb01 f303 	mul.w	r3, r1, r3
 80045a0:	4413      	add	r3, r2
 80045a2:	3360      	adds	r3, #96	; 0x60
 80045a4:	2204      	movs	r2, #4
 80045a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b4:	461a      	mov	r2, r3
 80045b6:	2302      	movs	r3, #2
 80045b8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	b2d9      	uxtb	r1, r3
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	202c      	movs	r0, #44	; 0x2c
 80045c4:	fb00 f303 	mul.w	r3, r0, r3
 80045c8:	4413      	add	r3, r2
 80045ca:	3360      	adds	r3, #96	; 0x60
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	461a      	mov	r2, r3
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f007 fef0 	bl	800c3b6 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80045d6:	e081      	b.n	80046dc <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	2b10      	cmp	r3, #16
 80045ec:	d176      	bne.n	80046dc <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	212c      	movs	r1, #44	; 0x2c
 80045f4:	fb01 f303 	mul.w	r3, r1, r3
 80045f8:	4413      	add	r3, r2
 80045fa:	333f      	adds	r3, #63	; 0x3f
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d121      	bne.n	8004646 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	212c      	movs	r1, #44	; 0x2c
 8004608:	fb01 f303 	mul.w	r3, r1, r3
 800460c:	4413      	add	r3, r2
 800460e:	335c      	adds	r3, #92	; 0x5c
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4413      	add	r3, r2
 800461c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	0151      	lsls	r1, r2, #5
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	440a      	add	r2, r1
 800462a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800462e:	f043 0302 	orr.w	r3, r3, #2
 8004632:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	4611      	mov	r1, r2
 800463e:	4618      	mov	r0, r3
 8004640:	f007 fa53 	bl	800baea <USB_HC_Halt>
 8004644:	e041      	b.n	80046ca <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	212c      	movs	r1, #44	; 0x2c
 800464c:	fb01 f303 	mul.w	r3, r1, r3
 8004650:	4413      	add	r3, r2
 8004652:	333f      	adds	r3, #63	; 0x3f
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	212c      	movs	r1, #44	; 0x2c
 8004660:	fb01 f303 	mul.w	r3, r1, r3
 8004664:	4413      	add	r3, r2
 8004666:	333f      	adds	r3, #63	; 0x3f
 8004668:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800466a:	2b02      	cmp	r3, #2
 800466c:	d12d      	bne.n	80046ca <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	212c      	movs	r1, #44	; 0x2c
 8004674:	fb01 f303 	mul.w	r3, r1, r3
 8004678:	4413      	add	r3, r2
 800467a:	335c      	adds	r3, #92	; 0x5c
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d120      	bne.n	80046ca <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	212c      	movs	r1, #44	; 0x2c
 800468e:	fb01 f303 	mul.w	r3, r1, r3
 8004692:	4413      	add	r3, r2
 8004694:	3361      	adds	r3, #97	; 0x61
 8004696:	2203      	movs	r2, #3
 8004698:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	0151      	lsls	r1, r2, #5
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	440a      	add	r2, r1
 80046b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046b4:	f043 0302 	orr.w	r3, r3, #2
 80046b8:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	4611      	mov	r1, r2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f007 fa10 	bl	800baea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d6:	461a      	mov	r2, r3
 80046d8:	2310      	movs	r3, #16
 80046da:	6093      	str	r3, [r2, #8]
}
 80046dc:	bf00      	nop
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80046fa:	78fb      	ldrb	r3, [r7, #3]
 80046fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	4413      	add	r3, r2
 8004706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b04      	cmp	r3, #4
 8004712:	d119      	bne.n	8004748 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	4413      	add	r3, r2
 800471c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004720:	461a      	mov	r2, r3
 8004722:	2304      	movs	r3, #4
 8004724:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	4413      	add	r3, r2
 800472e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	0151      	lsls	r1, r2, #5
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	440a      	add	r2, r1
 800473c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004740:	f043 0302 	orr.w	r3, r3, #2
 8004744:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004746:	e3c6      	b.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	4413      	add	r3, r2
 8004750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 0320 	and.w	r3, r3, #32
 800475a:	2b20      	cmp	r3, #32
 800475c:	d13e      	bne.n	80047dc <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	4413      	add	r3, r2
 8004766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476a:	461a      	mov	r2, r3
 800476c:	2320      	movs	r3, #32
 800476e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	212c      	movs	r1, #44	; 0x2c
 8004776:	fb01 f303 	mul.w	r3, r1, r3
 800477a:	4413      	add	r3, r2
 800477c:	333d      	adds	r3, #61	; 0x3d
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	2b01      	cmp	r3, #1
 8004782:	f040 83a8 	bne.w	8004ed6 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	212c      	movs	r1, #44	; 0x2c
 800478c:	fb01 f303 	mul.w	r3, r1, r3
 8004790:	4413      	add	r3, r2
 8004792:	333d      	adds	r3, #61	; 0x3d
 8004794:	2200      	movs	r2, #0
 8004796:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	212c      	movs	r1, #44	; 0x2c
 800479e:	fb01 f303 	mul.w	r3, r1, r3
 80047a2:	4413      	add	r3, r2
 80047a4:	3360      	adds	r3, #96	; 0x60
 80047a6:	2202      	movs	r2, #2
 80047a8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	0151      	lsls	r1, r2, #5
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	440a      	add	r2, r1
 80047c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047c4:	f043 0302 	orr.w	r3, r3, #2
 80047c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	4611      	mov	r1, r2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f007 f988 	bl	800baea <USB_HC_Halt>
}
 80047da:	e37c      	b.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f2:	d122      	bne.n	800483a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	0151      	lsls	r1, r2, #5
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	440a      	add	r2, r1
 800480a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800480e:	f043 0302 	orr.w	r3, r3, #2
 8004812:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	4611      	mov	r1, r2
 800481e:	4618      	mov	r0, r3
 8004820:	f007 f963 	bl	800baea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	4413      	add	r3, r2
 800482c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004830:	461a      	mov	r2, r3
 8004832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004836:	6093      	str	r3, [r2, #8]
}
 8004838:	e34d      	b.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	4413      	add	r3, r2
 8004842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b01      	cmp	r3, #1
 800484e:	d150      	bne.n	80048f2 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	212c      	movs	r1, #44	; 0x2c
 8004856:	fb01 f303 	mul.w	r3, r1, r3
 800485a:	4413      	add	r3, r2
 800485c:	335c      	adds	r3, #92	; 0x5c
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	4413      	add	r3, r2
 800486a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004874:	2b40      	cmp	r3, #64	; 0x40
 8004876:	d111      	bne.n	800489c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	212c      	movs	r1, #44	; 0x2c
 800487e:	fb01 f303 	mul.w	r3, r1, r3
 8004882:	4413      	add	r3, r2
 8004884:	333d      	adds	r3, #61	; 0x3d
 8004886:	2201      	movs	r2, #1
 8004888:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	4413      	add	r3, r2
 8004892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004896:	461a      	mov	r2, r3
 8004898:	2340      	movs	r3, #64	; 0x40
 800489a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	0151      	lsls	r1, r2, #5
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	440a      	add	r2, r1
 80048b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048b6:	f043 0302 	orr.w	r3, r3, #2
 80048ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	4611      	mov	r1, r2
 80048c6:	4618      	mov	r0, r3
 80048c8:	f007 f90f 	bl	800baea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d8:	461a      	mov	r2, r3
 80048da:	2301      	movs	r3, #1
 80048dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	212c      	movs	r1, #44	; 0x2c
 80048e4:	fb01 f303 	mul.w	r3, r1, r3
 80048e8:	4413      	add	r3, r2
 80048ea:	3361      	adds	r3, #97	; 0x61
 80048ec:	2201      	movs	r2, #1
 80048ee:	701a      	strb	r2, [r3, #0]
}
 80048f0:	e2f1      	b.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004904:	2b40      	cmp	r3, #64	; 0x40
 8004906:	d13c      	bne.n	8004982 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	212c      	movs	r1, #44	; 0x2c
 800490e:	fb01 f303 	mul.w	r3, r1, r3
 8004912:	4413      	add	r3, r2
 8004914:	3361      	adds	r3, #97	; 0x61
 8004916:	2204      	movs	r2, #4
 8004918:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	212c      	movs	r1, #44	; 0x2c
 8004920:	fb01 f303 	mul.w	r3, r1, r3
 8004924:	4413      	add	r3, r2
 8004926:	333d      	adds	r3, #61	; 0x3d
 8004928:	2201      	movs	r2, #1
 800492a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	212c      	movs	r1, #44	; 0x2c
 8004932:	fb01 f303 	mul.w	r3, r1, r3
 8004936:	4413      	add	r3, r2
 8004938:	335c      	adds	r3, #92	; 0x5c
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	4413      	add	r3, r2
 8004946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	0151      	lsls	r1, r2, #5
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	440a      	add	r2, r1
 8004954:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004958:	f043 0302 	orr.w	r3, r3, #2
 800495c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	b2d2      	uxtb	r2, r2
 8004966:	4611      	mov	r1, r2
 8004968:	4618      	mov	r0, r3
 800496a:	f007 f8be 	bl	800baea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	4413      	add	r3, r2
 8004976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497a:	461a      	mov	r2, r3
 800497c:	2340      	movs	r3, #64	; 0x40
 800497e:	6093      	str	r3, [r2, #8]
}
 8004980:	e2a9      	b.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	4413      	add	r3, r2
 800498a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b08      	cmp	r3, #8
 8004996:	d12a      	bne.n	80049ee <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a4:	461a      	mov	r2, r3
 80049a6:	2308      	movs	r3, #8
 80049a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	0151      	lsls	r1, r2, #5
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	440a      	add	r2, r1
 80049c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049c4:	f043 0302 	orr.w	r3, r3, #2
 80049c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	4611      	mov	r1, r2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f007 f888 	bl	800baea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	212c      	movs	r1, #44	; 0x2c
 80049e0:	fb01 f303 	mul.w	r3, r1, r3
 80049e4:	4413      	add	r3, r2
 80049e6:	3361      	adds	r3, #97	; 0x61
 80049e8:	2205      	movs	r2, #5
 80049ea:	701a      	strb	r2, [r3, #0]
}
 80049ec:	e273      	b.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d150      	bne.n	8004aa6 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	212c      	movs	r1, #44	; 0x2c
 8004a0a:	fb01 f303 	mul.w	r3, r1, r3
 8004a0e:	4413      	add	r3, r2
 8004a10:	335c      	adds	r3, #92	; 0x5c
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	212c      	movs	r1, #44	; 0x2c
 8004a1c:	fb01 f303 	mul.w	r3, r1, r3
 8004a20:	4413      	add	r3, r2
 8004a22:	3361      	adds	r3, #97	; 0x61
 8004a24:	2203      	movs	r2, #3
 8004a26:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	212c      	movs	r1, #44	; 0x2c
 8004a2e:	fb01 f303 	mul.w	r3, r1, r3
 8004a32:	4413      	add	r3, r2
 8004a34:	333d      	adds	r3, #61	; 0x3d
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d112      	bne.n	8004a62 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	212c      	movs	r1, #44	; 0x2c
 8004a42:	fb01 f303 	mul.w	r3, r1, r3
 8004a46:	4413      	add	r3, r2
 8004a48:	333c      	adds	r3, #60	; 0x3c
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d108      	bne.n	8004a62 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	212c      	movs	r1, #44	; 0x2c
 8004a56:	fb01 f303 	mul.w	r3, r1, r3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	333d      	adds	r3, #61	; 0x3d
 8004a5e:	2201      	movs	r2, #1
 8004a60:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	0151      	lsls	r1, r2, #5
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	440a      	add	r2, r1
 8004a78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a7c:	f043 0302 	orr.w	r3, r3, #2
 8004a80:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f007 f82c 	bl	800baea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	2310      	movs	r3, #16
 8004aa2:	6093      	str	r3, [r2, #8]
}
 8004aa4:	e217      	b.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab8:	2b80      	cmp	r3, #128	; 0x80
 8004aba:	d174      	bne.n	8004ba6 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d121      	bne.n	8004b08 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	212c      	movs	r1, #44	; 0x2c
 8004aca:	fb01 f303 	mul.w	r3, r1, r3
 8004ace:	4413      	add	r3, r2
 8004ad0:	3361      	adds	r3, #97	; 0x61
 8004ad2:	2206      	movs	r2, #6
 8004ad4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	0151      	lsls	r1, r2, #5
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	440a      	add	r2, r1
 8004aec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004af0:	f043 0302 	orr.w	r3, r3, #2
 8004af4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	b2d2      	uxtb	r2, r2
 8004afe:	4611      	mov	r1, r2
 8004b00:	4618      	mov	r0, r3
 8004b02:	f006 fff2 	bl	800baea <USB_HC_Halt>
 8004b06:	e044      	b.n	8004b92 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	212c      	movs	r1, #44	; 0x2c
 8004b0e:	fb01 f303 	mul.w	r3, r1, r3
 8004b12:	4413      	add	r3, r2
 8004b14:	335c      	adds	r3, #92	; 0x5c
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	202c      	movs	r0, #44	; 0x2c
 8004b20:	fb00 f303 	mul.w	r3, r0, r3
 8004b24:	440b      	add	r3, r1
 8004b26:	335c      	adds	r3, #92	; 0x5c
 8004b28:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	212c      	movs	r1, #44	; 0x2c
 8004b30:	fb01 f303 	mul.w	r3, r1, r3
 8004b34:	4413      	add	r3, r2
 8004b36:	335c      	adds	r3, #92	; 0x5c
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d920      	bls.n	8004b80 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	212c      	movs	r1, #44	; 0x2c
 8004b44:	fb01 f303 	mul.w	r3, r1, r3
 8004b48:	4413      	add	r3, r2
 8004b4a:	335c      	adds	r3, #92	; 0x5c
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	212c      	movs	r1, #44	; 0x2c
 8004b56:	fb01 f303 	mul.w	r3, r1, r3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	3360      	adds	r3, #96	; 0x60
 8004b5e:	2204      	movs	r2, #4
 8004b60:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	b2d9      	uxtb	r1, r3
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	202c      	movs	r0, #44	; 0x2c
 8004b6c:	fb00 f303 	mul.w	r3, r0, r3
 8004b70:	4413      	add	r3, r2
 8004b72:	3360      	adds	r3, #96	; 0x60
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f007 fc1c 	bl	800c3b6 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b7e:	e008      	b.n	8004b92 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	212c      	movs	r1, #44	; 0x2c
 8004b86:	fb01 f303 	mul.w	r3, r1, r3
 8004b8a:	4413      	add	r3, r2
 8004b8c:	3360      	adds	r3, #96	; 0x60
 8004b8e:	2202      	movs	r2, #2
 8004b90:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	2380      	movs	r3, #128	; 0x80
 8004ba2:	6093      	str	r3, [r2, #8]
}
 8004ba4:	e197      	b.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bbc:	d134      	bne.n	8004c28 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	0151      	lsls	r1, r2, #5
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	440a      	add	r2, r1
 8004bd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bd8:	f043 0302 	orr.w	r3, r3, #2
 8004bdc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	b2d2      	uxtb	r2, r2
 8004be6:	4611      	mov	r1, r2
 8004be8:	4618      	mov	r0, r3
 8004bea:	f006 ff7e 	bl	800baea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c12:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	212c      	movs	r1, #44	; 0x2c
 8004c1a:	fb01 f303 	mul.w	r3, r1, r3
 8004c1e:	4413      	add	r3, r2
 8004c20:	3361      	adds	r3, #97	; 0x61
 8004c22:	2208      	movs	r2, #8
 8004c24:	701a      	strb	r2, [r3, #0]
}
 8004c26:	e156      	b.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	f040 814b 	bne.w	8004ed6 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	0151      	lsls	r1, r2, #5
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	440a      	add	r2, r1
 8004c56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c5a:	f023 0302 	bic.w	r3, r3, #2
 8004c5e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	212c      	movs	r1, #44	; 0x2c
 8004c66:	fb01 f303 	mul.w	r3, r1, r3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	3361      	adds	r3, #97	; 0x61
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d179      	bne.n	8004d68 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	212c      	movs	r1, #44	; 0x2c
 8004c7a:	fb01 f303 	mul.w	r3, r1, r3
 8004c7e:	4413      	add	r3, r2
 8004c80:	3360      	adds	r3, #96	; 0x60
 8004c82:	2201      	movs	r2, #1
 8004c84:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	212c      	movs	r1, #44	; 0x2c
 8004c8c:	fb01 f303 	mul.w	r3, r1, r3
 8004c90:	4413      	add	r3, r2
 8004c92:	333f      	adds	r3, #63	; 0x3f
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d00a      	beq.n	8004cb0 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	212c      	movs	r1, #44	; 0x2c
 8004ca0:	fb01 f303 	mul.w	r3, r1, r3
 8004ca4:	4413      	add	r3, r2
 8004ca6:	333f      	adds	r3, #63	; 0x3f
 8004ca8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	f040 80fc 	bne.w	8004ea8 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d142      	bne.n	8004d3e <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	212c      	movs	r1, #44	; 0x2c
 8004cbe:	fb01 f303 	mul.w	r3, r1, r3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	334c      	adds	r3, #76	; 0x4c
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 80ed 	beq.w	8004ea8 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	212c      	movs	r1, #44	; 0x2c
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	4413      	add	r3, r2
 8004cda:	334c      	adds	r3, #76	; 0x4c
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6879      	ldr	r1, [r7, #4]
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	202c      	movs	r0, #44	; 0x2c
 8004ce4:	fb00 f202 	mul.w	r2, r0, r2
 8004ce8:	440a      	add	r2, r1
 8004cea:	3240      	adds	r2, #64	; 0x40
 8004cec:	8812      	ldrh	r2, [r2, #0]
 8004cee:	4413      	add	r3, r2
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	202c      	movs	r0, #44	; 0x2c
 8004cf8:	fb00 f202 	mul.w	r2, r0, r2
 8004cfc:	440a      	add	r2, r1
 8004cfe:	3240      	adds	r2, #64	; 0x40
 8004d00:	8812      	ldrh	r2, [r2, #0]
 8004d02:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 80ca 	beq.w	8004ea8 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	212c      	movs	r1, #44	; 0x2c
 8004d1a:	fb01 f303 	mul.w	r3, r1, r3
 8004d1e:	4413      	add	r3, r2
 8004d20:	3355      	adds	r3, #85	; 0x55
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	f083 0301 	eor.w	r3, r3, #1
 8004d28:	b2d8      	uxtb	r0, r3
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	212c      	movs	r1, #44	; 0x2c
 8004d30:	fb01 f303 	mul.w	r3, r1, r3
 8004d34:	4413      	add	r3, r2
 8004d36:	3355      	adds	r3, #85	; 0x55
 8004d38:	4602      	mov	r2, r0
 8004d3a:	701a      	strb	r2, [r3, #0]
 8004d3c:	e0b4      	b.n	8004ea8 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	212c      	movs	r1, #44	; 0x2c
 8004d44:	fb01 f303 	mul.w	r3, r1, r3
 8004d48:	4413      	add	r3, r2
 8004d4a:	3355      	adds	r3, #85	; 0x55
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	f083 0301 	eor.w	r3, r3, #1
 8004d52:	b2d8      	uxtb	r0, r3
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	212c      	movs	r1, #44	; 0x2c
 8004d5a:	fb01 f303 	mul.w	r3, r1, r3
 8004d5e:	4413      	add	r3, r2
 8004d60:	3355      	adds	r3, #85	; 0x55
 8004d62:	4602      	mov	r2, r0
 8004d64:	701a      	strb	r2, [r3, #0]
 8004d66:	e09f      	b.n	8004ea8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	212c      	movs	r1, #44	; 0x2c
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	4413      	add	r3, r2
 8004d74:	3361      	adds	r3, #97	; 0x61
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d109      	bne.n	8004d90 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	212c      	movs	r1, #44	; 0x2c
 8004d82:	fb01 f303 	mul.w	r3, r1, r3
 8004d86:	4413      	add	r3, r2
 8004d88:	3360      	adds	r3, #96	; 0x60
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	e08b      	b.n	8004ea8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	212c      	movs	r1, #44	; 0x2c
 8004d96:	fb01 f303 	mul.w	r3, r1, r3
 8004d9a:	4413      	add	r3, r2
 8004d9c:	3361      	adds	r3, #97	; 0x61
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d109      	bne.n	8004db8 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	212c      	movs	r1, #44	; 0x2c
 8004daa:	fb01 f303 	mul.w	r3, r1, r3
 8004dae:	4413      	add	r3, r2
 8004db0:	3360      	adds	r3, #96	; 0x60
 8004db2:	2202      	movs	r2, #2
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	e077      	b.n	8004ea8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	212c      	movs	r1, #44	; 0x2c
 8004dbe:	fb01 f303 	mul.w	r3, r1, r3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	3361      	adds	r3, #97	; 0x61
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b05      	cmp	r3, #5
 8004dca:	d109      	bne.n	8004de0 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	212c      	movs	r1, #44	; 0x2c
 8004dd2:	fb01 f303 	mul.w	r3, r1, r3
 8004dd6:	4413      	add	r3, r2
 8004dd8:	3360      	adds	r3, #96	; 0x60
 8004dda:	2205      	movs	r2, #5
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	e063      	b.n	8004ea8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	212c      	movs	r1, #44	; 0x2c
 8004de6:	fb01 f303 	mul.w	r3, r1, r3
 8004dea:	4413      	add	r3, r2
 8004dec:	3361      	adds	r3, #97	; 0x61
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b06      	cmp	r3, #6
 8004df2:	d009      	beq.n	8004e08 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	212c      	movs	r1, #44	; 0x2c
 8004dfa:	fb01 f303 	mul.w	r3, r1, r3
 8004dfe:	4413      	add	r3, r2
 8004e00:	3361      	adds	r3, #97	; 0x61
 8004e02:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d14f      	bne.n	8004ea8 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	212c      	movs	r1, #44	; 0x2c
 8004e0e:	fb01 f303 	mul.w	r3, r1, r3
 8004e12:	4413      	add	r3, r2
 8004e14:	335c      	adds	r3, #92	; 0x5c
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	202c      	movs	r0, #44	; 0x2c
 8004e20:	fb00 f303 	mul.w	r3, r0, r3
 8004e24:	440b      	add	r3, r1
 8004e26:	335c      	adds	r3, #92	; 0x5c
 8004e28:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	212c      	movs	r1, #44	; 0x2c
 8004e30:	fb01 f303 	mul.w	r3, r1, r3
 8004e34:	4413      	add	r3, r2
 8004e36:	335c      	adds	r3, #92	; 0x5c
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d912      	bls.n	8004e64 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	212c      	movs	r1, #44	; 0x2c
 8004e44:	fb01 f303 	mul.w	r3, r1, r3
 8004e48:	4413      	add	r3, r2
 8004e4a:	335c      	adds	r3, #92	; 0x5c
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	212c      	movs	r1, #44	; 0x2c
 8004e56:	fb01 f303 	mul.w	r3, r1, r3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	3360      	adds	r3, #96	; 0x60
 8004e5e:	2204      	movs	r2, #4
 8004e60:	701a      	strb	r2, [r3, #0]
 8004e62:	e021      	b.n	8004ea8 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	212c      	movs	r1, #44	; 0x2c
 8004e6a:	fb01 f303 	mul.w	r3, r1, r3
 8004e6e:	4413      	add	r3, r2
 8004e70:	3360      	adds	r3, #96	; 0x60
 8004e72:	2202      	movs	r2, #2
 8004e74:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e8c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e94:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	b2d9      	uxtb	r1, r3
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	202c      	movs	r0, #44	; 0x2c
 8004ec4:	fb00 f303 	mul.w	r3, r0, r3
 8004ec8:	4413      	add	r3, r2
 8004eca:	3360      	adds	r3, #96	; 0x60
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f007 fa70 	bl	800c3b6 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004ed6:	bf00      	nop
 8004ed8:	3720      	adds	r7, #32
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b08a      	sub	sp, #40	; 0x28
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	0c5b      	lsrs	r3, r3, #17
 8004f04:	f003 030f 	and.w	r3, r3, #15
 8004f08:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	091b      	lsrs	r3, r3, #4
 8004f0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f12:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d004      	beq.n	8004f24 <HCD_RXQLVL_IRQHandler+0x46>
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2b05      	cmp	r3, #5
 8004f1e:	f000 80a9 	beq.w	8005074 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004f22:	e0aa      	b.n	800507a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 80a6 	beq.w	8005078 <HCD_RXQLVL_IRQHandler+0x19a>
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	212c      	movs	r1, #44	; 0x2c
 8004f32:	fb01 f303 	mul.w	r3, r1, r3
 8004f36:	4413      	add	r3, r2
 8004f38:	3344      	adds	r3, #68	; 0x44
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 809b 	beq.w	8005078 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	212c      	movs	r1, #44	; 0x2c
 8004f48:	fb01 f303 	mul.w	r3, r1, r3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	3350      	adds	r3, #80	; 0x50
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	441a      	add	r2, r3
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	202c      	movs	r0, #44	; 0x2c
 8004f5c:	fb00 f303 	mul.w	r3, r0, r3
 8004f60:	440b      	add	r3, r1
 8004f62:	334c      	adds	r3, #76	; 0x4c
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d87a      	bhi.n	8005060 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	212c      	movs	r1, #44	; 0x2c
 8004f74:	fb01 f303 	mul.w	r3, r1, r3
 8004f78:	4413      	add	r3, r2
 8004f7a:	3344      	adds	r3, #68	; 0x44
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	b292      	uxth	r2, r2
 8004f82:	4619      	mov	r1, r3
 8004f84:	f006 fd1c 	bl	800b9c0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	212c      	movs	r1, #44	; 0x2c
 8004f8e:	fb01 f303 	mul.w	r3, r1, r3
 8004f92:	4413      	add	r3, r2
 8004f94:	3344      	adds	r3, #68	; 0x44
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	441a      	add	r2, r3
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	202c      	movs	r0, #44	; 0x2c
 8004fa2:	fb00 f303 	mul.w	r3, r0, r3
 8004fa6:	440b      	add	r3, r1
 8004fa8:	3344      	adds	r3, #68	; 0x44
 8004faa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	212c      	movs	r1, #44	; 0x2c
 8004fb2:	fb01 f303 	mul.w	r3, r1, r3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3350      	adds	r3, #80	; 0x50
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	441a      	add	r2, r3
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	202c      	movs	r0, #44	; 0x2c
 8004fc6:	fb00 f303 	mul.w	r3, r0, r3
 8004fca:	440b      	add	r3, r1
 8004fcc:	3350      	adds	r3, #80	; 0x50
 8004fce:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	0cdb      	lsrs	r3, r3, #19
 8004fe0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fe4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	212c      	movs	r1, #44	; 0x2c
 8004fec:	fb01 f303 	mul.w	r3, r1, r3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	3340      	adds	r3, #64	; 0x40
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d13c      	bne.n	8005078 <HCD_RXQLVL_IRQHandler+0x19a>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d039      	beq.n	8005078 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	4413      	add	r3, r2
 800500c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800501a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005022:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	4413      	add	r3, r2
 800502c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005030:	461a      	mov	r2, r3
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	212c      	movs	r1, #44	; 0x2c
 800503c:	fb01 f303 	mul.w	r3, r1, r3
 8005040:	4413      	add	r3, r2
 8005042:	3354      	adds	r3, #84	; 0x54
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	f083 0301 	eor.w	r3, r3, #1
 800504a:	b2d8      	uxtb	r0, r3
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	212c      	movs	r1, #44	; 0x2c
 8005052:	fb01 f303 	mul.w	r3, r1, r3
 8005056:	4413      	add	r3, r2
 8005058:	3354      	adds	r3, #84	; 0x54
 800505a:	4602      	mov	r2, r0
 800505c:	701a      	strb	r2, [r3, #0]
      break;
 800505e:	e00b      	b.n	8005078 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	212c      	movs	r1, #44	; 0x2c
 8005066:	fb01 f303 	mul.w	r3, r1, r3
 800506a:	4413      	add	r3, r2
 800506c:	3360      	adds	r3, #96	; 0x60
 800506e:	2204      	movs	r2, #4
 8005070:	701a      	strb	r2, [r3, #0]
      break;
 8005072:	e001      	b.n	8005078 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005074:	bf00      	nop
 8005076:	e000      	b.n	800507a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005078:	bf00      	nop
  }
}
 800507a:	bf00      	nop
 800507c:	3728      	adds	r7, #40	; 0x28
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b086      	sub	sp, #24
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80050ae:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d10b      	bne.n	80050d2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d102      	bne.n	80050ca <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f007 f95a 	bl	800c37e <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	f043 0302 	orr.w	r3, r3, #2
 80050d0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f003 0308 	and.w	r3, r3, #8
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d132      	bne.n	8005142 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f043 0308 	orr.w	r3, r3, #8
 80050e2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d126      	bne.n	800513c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d113      	bne.n	800511e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80050fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005100:	d106      	bne.n	8005110 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2102      	movs	r1, #2
 8005108:	4618      	mov	r0, r3
 800510a:	f006 fca3 	bl	800ba54 <USB_InitFSLSPClkSel>
 800510e:	e011      	b.n	8005134 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2101      	movs	r1, #1
 8005116:	4618      	mov	r0, r3
 8005118:	f006 fc9c 	bl	800ba54 <USB_InitFSLSPClkSel>
 800511c:	e00a      	b.n	8005134 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d106      	bne.n	8005134 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800512c:	461a      	mov	r2, r3
 800512e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005132:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f007 f94c 	bl	800c3d2 <HAL_HCD_PortEnabled_Callback>
 800513a:	e002      	b.n	8005142 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f007 f956 	bl	800c3ee <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b20      	cmp	r3, #32
 800514a:	d103      	bne.n	8005154 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f043 0320 	orr.w	r3, r3, #32
 8005152:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800515a:	461a      	mov	r2, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	6013      	str	r3, [r2, #0]
}
 8005160:	bf00      	nop
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e07f      	b.n	800527a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d106      	bne.n	8005194 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7fc fdd2 	bl	8001d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2224      	movs	r2, #36	; 0x24
 8005198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0201 	bic.w	r2, r2, #1
 80051aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80051b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d107      	bne.n	80051e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051de:	609a      	str	r2, [r3, #8]
 80051e0:	e006      	b.n	80051f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80051ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d104      	bne.n	8005202 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005200:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6859      	ldr	r1, [r3, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	4b1d      	ldr	r3, [pc, #116]	; (8005284 <HAL_I2C_Init+0x11c>)
 800520e:	430b      	orrs	r3, r1
 8005210:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005220:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691a      	ldr	r2, [r3, #16]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	ea42 0103 	orr.w	r1, r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	021a      	lsls	r2, r3, #8
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	69d9      	ldr	r1, [r3, #28]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a1a      	ldr	r2, [r3, #32]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	02008000 	.word	0x02008000

08005288 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b20      	cmp	r3, #32
 800529c:	d138      	bne.n	8005310 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e032      	b.n	8005312 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2224      	movs	r2, #36	; 0x24
 80052b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0201 	bic.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6819      	ldr	r1, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0201 	orr.w	r2, r2, #1
 80052fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2220      	movs	r2, #32
 8005300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	e000      	b.n	8005312 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005310:	2302      	movs	r3, #2
  }
}
 8005312:	4618      	mov	r0, r3
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800531e:	b480      	push	{r7}
 8005320:	b085      	sub	sp, #20
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b20      	cmp	r3, #32
 8005332:	d139      	bne.n	80053a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800533e:	2302      	movs	r3, #2
 8005340:	e033      	b.n	80053aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2224      	movs	r2, #36	; 0x24
 800534e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 0201 	bic.w	r2, r2, #1
 8005360:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005370:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0201 	orr.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	e000      	b.n	80053aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053a8:	2302      	movs	r3, #2
  }
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
	...

080053b8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e0bf      	b.n	800554a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d106      	bne.n	80053e4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fc fd22 	bl	8001e28 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80053fa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6999      	ldr	r1, [r3, #24]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005410:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6899      	ldr	r1, [r3, #8]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4b4a      	ldr	r3, [pc, #296]	; (8005554 <HAL_LTDC_Init+0x19c>)
 800542c:	400b      	ands	r3, r1
 800542e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	041b      	lsls	r3, r3, #16
 8005436:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6899      	ldr	r1, [r3, #8]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699a      	ldr	r2, [r3, #24]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68d9      	ldr	r1, [r3, #12]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	4b3e      	ldr	r3, [pc, #248]	; (8005554 <HAL_LTDC_Init+0x19c>)
 800545a:	400b      	ands	r3, r1
 800545c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	041b      	lsls	r3, r3, #16
 8005464:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68d9      	ldr	r1, [r3, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1a      	ldr	r2, [r3, #32]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6919      	ldr	r1, [r3, #16]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	4b33      	ldr	r3, [pc, #204]	; (8005554 <HAL_LTDC_Init+0x19c>)
 8005488:	400b      	ands	r3, r1
 800548a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	041b      	lsls	r3, r3, #16
 8005492:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6919      	ldr	r1, [r3, #16]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6959      	ldr	r1, [r3, #20]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	4b27      	ldr	r3, [pc, #156]	; (8005554 <HAL_LTDC_Init+0x19c>)
 80054b6:	400b      	ands	r3, r1
 80054b8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	041b      	lsls	r3, r3, #16
 80054c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6959      	ldr	r1, [r3, #20]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054de:	021b      	lsls	r3, r3, #8
 80054e0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80054e8:	041b      	lsls	r3, r3, #16
 80054ea:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80054fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4313      	orrs	r3, r2
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0206 	orr.w	r2, r2, #6
 8005526:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	f000f800 	.word	0xf000f800

08005558 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005566:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	2b00      	cmp	r3, #0
 8005578:	d023      	beq.n	80055c2 <HAL_LTDC_IRQHandler+0x6a>
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	d01e      	beq.n	80055c2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0204 	bic.w	r2, r2, #4
 8005592:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2204      	movs	r2, #4
 800559a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80055a2:	f043 0201 	orr.w	r2, r3, #1
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2204      	movs	r2, #4
 80055b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f86f 	bl	80056a0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d023      	beq.n	8005614 <HAL_LTDC_IRQHandler+0xbc>
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d01e      	beq.n	8005614 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0202 	bic.w	r2, r2, #2
 80055e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2202      	movs	r2, #2
 80055ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80055f4:	f043 0202 	orr.w	r2, r3, #2
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2204      	movs	r2, #4
 8005602:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f846 	bl	80056a0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d01b      	beq.n	8005656 <HAL_LTDC_IRQHandler+0xfe>
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d016      	beq.n	8005656 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0201 	bic.w	r2, r2, #1
 8005636:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2201      	movs	r2, #1
 800563e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f82f 	bl	80056b4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f003 0308 	and.w	r3, r3, #8
 800565c:	2b00      	cmp	r3, #0
 800565e:	d01b      	beq.n	8005698 <HAL_LTDC_IRQHandler+0x140>
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b00      	cmp	r3, #0
 8005668:	d016      	beq.n	8005698 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0208 	bic.w	r2, r2, #8
 8005678:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2208      	movs	r2, #8
 8005680:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f818 	bl	80056c8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005698:	bf00      	nop
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80056dc:	b5b0      	push	{r4, r5, r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <HAL_LTDC_ConfigLayer+0x1a>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e02c      	b.n	8005750 <HAL_LTDC_ConfigLayer+0x74>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2202      	movs	r2, #2
 8005702:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2134      	movs	r1, #52	; 0x34
 800570c:	fb01 f303 	mul.w	r3, r1, r3
 8005710:	4413      	add	r3, r2
 8005712:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4614      	mov	r4, r2
 800571a:	461d      	mov	r5, r3
 800571c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800571e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005728:	682b      	ldr	r3, [r5, #0]
 800572a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	68b9      	ldr	r1, [r7, #8]
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 f811 	bl	8005758 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2201      	movs	r2, #1
 800573c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bdb0      	pop	{r4, r5, r7, pc}

08005758 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005758:	b480      	push	{r7}
 800575a:	b089      	sub	sp, #36	; 0x24
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	0c1b      	lsrs	r3, r3, #16
 8005770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005774:	4413      	add	r3, r2
 8005776:	041b      	lsls	r3, r3, #16
 8005778:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	01db      	lsls	r3, r3, #7
 8005784:	4413      	add	r3, r2
 8005786:	3384      	adds	r3, #132	; 0x84
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	6812      	ldr	r2, [r2, #0]
 800578e:	4611      	mov	r1, r2
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	01d2      	lsls	r2, r2, #7
 8005794:	440a      	add	r2, r1
 8005796:	3284      	adds	r2, #132	; 0x84
 8005798:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800579c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	0c1b      	lsrs	r3, r3, #16
 80057aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ae:	4413      	add	r3, r2
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4619      	mov	r1, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	01db      	lsls	r3, r3, #7
 80057bc:	440b      	add	r3, r1
 80057be:	3384      	adds	r3, #132	; 0x84
 80057c0:	4619      	mov	r1, r3
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057d6:	4413      	add	r3, r2
 80057d8:	041b      	lsls	r3, r3, #16
 80057da:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	01db      	lsls	r3, r3, #7
 80057e6:	4413      	add	r3, r2
 80057e8:	3384      	adds	r3, #132	; 0x84
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	6812      	ldr	r2, [r2, #0]
 80057f0:	4611      	mov	r1, r2
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	01d2      	lsls	r2, r2, #7
 80057f6:	440a      	add	r2, r1
 80057f8:	3284      	adds	r2, #132	; 0x84
 80057fa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80057fe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800580e:	4413      	add	r3, r2
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4619      	mov	r1, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	01db      	lsls	r3, r3, #7
 800581c:	440b      	add	r3, r1
 800581e:	3384      	adds	r3, #132	; 0x84
 8005820:	4619      	mov	r1, r3
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	4313      	orrs	r3, r2
 8005826:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	461a      	mov	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	01db      	lsls	r3, r3, #7
 8005832:	4413      	add	r3, r2
 8005834:	3384      	adds	r3, #132	; 0x84
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	6812      	ldr	r2, [r2, #0]
 800583c:	4611      	mov	r1, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	01d2      	lsls	r2, r2, #7
 8005842:	440a      	add	r2, r1
 8005844:	3284      	adds	r2, #132	; 0x84
 8005846:	f023 0307 	bic.w	r3, r3, #7
 800584a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	01db      	lsls	r3, r3, #7
 8005856:	4413      	add	r3, r2
 8005858:	3384      	adds	r3, #132	; 0x84
 800585a:	461a      	mov	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005868:	021b      	lsls	r3, r3, #8
 800586a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005872:	041b      	lsls	r3, r3, #16
 8005874:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	061b      	lsls	r3, r3, #24
 800587c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	01db      	lsls	r3, r3, #7
 8005888:	4413      	add	r3, r2
 800588a:	3384      	adds	r3, #132	; 0x84
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	01db      	lsls	r3, r3, #7
 8005898:	4413      	add	r3, r2
 800589a:	3384      	adds	r3, #132	; 0x84
 800589c:	461a      	mov	r2, r3
 800589e:	2300      	movs	r3, #0
 80058a0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058a8:	461a      	mov	r2, r3
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	431a      	orrs	r2, r3
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	431a      	orrs	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4619      	mov	r1, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	01db      	lsls	r3, r3, #7
 80058bc:	440b      	add	r3, r1
 80058be:	3384      	adds	r3, #132	; 0x84
 80058c0:	4619      	mov	r1, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	01db      	lsls	r3, r3, #7
 80058d2:	4413      	add	r3, r2
 80058d4:	3384      	adds	r3, #132	; 0x84
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	6812      	ldr	r2, [r2, #0]
 80058dc:	4611      	mov	r1, r2
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	01d2      	lsls	r2, r2, #7
 80058e2:	440a      	add	r2, r1
 80058e4:	3284      	adds	r2, #132	; 0x84
 80058e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058ea:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	461a      	mov	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	01db      	lsls	r3, r3, #7
 80058f6:	4413      	add	r3, r2
 80058f8:	3384      	adds	r3, #132	; 0x84
 80058fa:	461a      	mov	r2, r3
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	01db      	lsls	r3, r3, #7
 800590c:	4413      	add	r3, r2
 800590e:	3384      	adds	r3, #132	; 0x84
 8005910:	69da      	ldr	r2, [r3, #28]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4619      	mov	r1, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	01db      	lsls	r3, r3, #7
 800591c:	440b      	add	r3, r1
 800591e:	3384      	adds	r3, #132	; 0x84
 8005920:	4619      	mov	r1, r3
 8005922:	4b58      	ldr	r3, [pc, #352]	; (8005a84 <LTDC_SetConfig+0x32c>)
 8005924:	4013      	ands	r3, r2
 8005926:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	69da      	ldr	r2, [r3, #28]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	68f9      	ldr	r1, [r7, #12]
 8005932:	6809      	ldr	r1, [r1, #0]
 8005934:	4608      	mov	r0, r1
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	01c9      	lsls	r1, r1, #7
 800593a:	4401      	add	r1, r0
 800593c:	3184      	adds	r1, #132	; 0x84
 800593e:	4313      	orrs	r3, r2
 8005940:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	01db      	lsls	r3, r3, #7
 800594c:	4413      	add	r3, r2
 800594e:	3384      	adds	r3, #132	; 0x84
 8005950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	461a      	mov	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	01db      	lsls	r3, r3, #7
 800595c:	4413      	add	r3, r2
 800595e:	3384      	adds	r3, #132	; 0x84
 8005960:	461a      	mov	r2, r3
 8005962:	2300      	movs	r3, #0
 8005964:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	01db      	lsls	r3, r3, #7
 8005970:	4413      	add	r3, r2
 8005972:	3384      	adds	r3, #132	; 0x84
 8005974:	461a      	mov	r2, r3
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d102      	bne.n	800598a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005984:	2304      	movs	r3, #4
 8005986:	61fb      	str	r3, [r7, #28]
 8005988:	e01b      	b.n	80059c2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d102      	bne.n	8005998 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005992:	2303      	movs	r3, #3
 8005994:	61fb      	str	r3, [r7, #28]
 8005996:	e014      	b.n	80059c2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	2b04      	cmp	r3, #4
 800599e:	d00b      	beq.n	80059b8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d007      	beq.n	80059b8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d003      	beq.n	80059b8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80059b4:	2b07      	cmp	r3, #7
 80059b6:	d102      	bne.n	80059be <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80059b8:	2302      	movs	r3, #2
 80059ba:	61fb      	str	r3, [r7, #28]
 80059bc:	e001      	b.n	80059c2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80059be:	2301      	movs	r3, #1
 80059c0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	01db      	lsls	r3, r3, #7
 80059cc:	4413      	add	r3, r2
 80059ce:	3384      	adds	r3, #132	; 0x84
 80059d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	6812      	ldr	r2, [r2, #0]
 80059d6:	4611      	mov	r1, r2
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	01d2      	lsls	r2, r2, #7
 80059dc:	440a      	add	r2, r1
 80059de:	3284      	adds	r2, #132	; 0x84
 80059e0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80059e4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ea:	69fa      	ldr	r2, [r7, #28]
 80059ec:	fb02 f303 	mul.w	r3, r2, r3
 80059f0:	041a      	lsls	r2, r3, #16
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	6859      	ldr	r1, [r3, #4]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	1acb      	subs	r3, r1, r3
 80059fc:	69f9      	ldr	r1, [r7, #28]
 80059fe:	fb01 f303 	mul.w	r3, r1, r3
 8005a02:	3303      	adds	r3, #3
 8005a04:	68f9      	ldr	r1, [r7, #12]
 8005a06:	6809      	ldr	r1, [r1, #0]
 8005a08:	4608      	mov	r0, r1
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	01c9      	lsls	r1, r1, #7
 8005a0e:	4401      	add	r1, r0
 8005a10:	3184      	adds	r1, #132	; 0x84
 8005a12:	4313      	orrs	r3, r2
 8005a14:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	01db      	lsls	r3, r3, #7
 8005a20:	4413      	add	r3, r2
 8005a22:	3384      	adds	r3, #132	; 0x84
 8005a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	01db      	lsls	r3, r3, #7
 8005a30:	440b      	add	r3, r1
 8005a32:	3384      	adds	r3, #132	; 0x84
 8005a34:	4619      	mov	r1, r3
 8005a36:	4b14      	ldr	r3, [pc, #80]	; (8005a88 <LTDC_SetConfig+0x330>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	461a      	mov	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	01db      	lsls	r3, r3, #7
 8005a46:	4413      	add	r3, r2
 8005a48:	3384      	adds	r3, #132	; 0x84
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	461a      	mov	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	01db      	lsls	r3, r3, #7
 8005a5c:	4413      	add	r3, r2
 8005a5e:	3384      	adds	r3, #132	; 0x84
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	6812      	ldr	r2, [r2, #0]
 8005a66:	4611      	mov	r1, r2
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	01d2      	lsls	r2, r2, #7
 8005a6c:	440a      	add	r2, r1
 8005a6e:	3284      	adds	r2, #132	; 0x84
 8005a70:	f043 0301 	orr.w	r3, r3, #1
 8005a74:	6013      	str	r3, [r2, #0]
}
 8005a76:	bf00      	nop
 8005a78:	3724      	adds	r7, #36	; 0x24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	fffff8f8 	.word	0xfffff8f8
 8005a88:	fffff800 	.word	0xfffff800

08005a8c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a04      	ldr	r2, [pc, #16]	; (8005aa8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a9a:	6013      	str	r3, [r2, #0]
}
 8005a9c:	bf00      	nop
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	40007000 	.word	0x40007000

08005aac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005ab6:	4b23      	ldr	r3, [pc, #140]	; (8005b44 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	4a22      	ldr	r2, [pc, #136]	; (8005b44 <HAL_PWREx_EnableOverDrive+0x98>)
 8005abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ac2:	4b20      	ldr	r3, [pc, #128]	; (8005b44 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005ace:	4b1e      	ldr	r3, [pc, #120]	; (8005b48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a1d      	ldr	r2, [pc, #116]	; (8005b48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ada:	f7fc ffdf 	bl	8002a9c <HAL_GetTick>
 8005ade:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ae0:	e009      	b.n	8005af6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ae2:	f7fc ffdb 	bl	8002a9c <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005af0:	d901      	bls.n	8005af6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e022      	b.n	8005b3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005af6:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b02:	d1ee      	bne.n	8005ae2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005b04:	4b10      	ldr	r3, [pc, #64]	; (8005b48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a0f      	ldr	r2, [pc, #60]	; (8005b48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b10:	f7fc ffc4 	bl	8002a9c <HAL_GetTick>
 8005b14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b16:	e009      	b.n	8005b2c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b18:	f7fc ffc0 	bl	8002a9c <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b26:	d901      	bls.n	8005b2c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e007      	b.n	8005b3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b2c:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b38:	d1ee      	bne.n	8005b18 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40023800 	.word	0x40023800
 8005b48:	40007000 	.word	0x40007000

08005b4c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af02      	add	r7, sp, #8
 8005b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005b54:	f7fc ffa2 	bl	8002a9c <HAL_GetTick>
 8005b58:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e067      	b.n	8005c34 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10b      	bne.n	8005b88 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7fc fa1d 	bl	8001fb8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005b7e:	f241 3188 	movw	r1, #5000	; 0x1388
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f85e 	bl	8005c44 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	021a      	lsls	r2, r3, #8
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	2120      	movs	r1, #32
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f856 	bl	8005c60 <QSPI_WaitFlagStateUntilTimeout>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005bb8:	7afb      	ldrb	r3, [r7, #11]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d135      	bne.n	8005c2a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	4b1d      	ldr	r3, [pc, #116]	; (8005c3c <HAL_QSPI_Init+0xf0>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6852      	ldr	r2, [r2, #4]
 8005bcc:	0611      	lsls	r1, r2, #24
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	68d2      	ldr	r2, [r2, #12]
 8005bd2:	4311      	orrs	r1, r2
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	69d2      	ldr	r2, [r2, #28]
 8005bd8:	4311      	orrs	r1, r2
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	6a12      	ldr	r2, [r2, #32]
 8005bde:	4311      	orrs	r1, r2
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6812      	ldr	r2, [r2, #0]
 8005be4:	430b      	orrs	r3, r1
 8005be6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	4b14      	ldr	r3, [pc, #80]	; (8005c40 <HAL_QSPI_Init+0xf4>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6912      	ldr	r2, [r2, #16]
 8005bf6:	0411      	lsls	r1, r2, #16
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6952      	ldr	r2, [r2, #20]
 8005bfc:	4311      	orrs	r1, r2
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	6992      	ldr	r2, [r2, #24]
 8005c02:	4311      	orrs	r1, r2
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	6812      	ldr	r2, [r2, #0]
 8005c08:	430b      	orrs	r3, r1
 8005c0a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005c32:	7afb      	ldrb	r3, [r7, #11]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	00ffff2f 	.word	0x00ffff2f
 8005c40:	ffe0f8fe 	.word	0xffe0f8fe

08005c44 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	603b      	str	r3, [r7, #0]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005c70:	e01a      	b.n	8005ca8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c78:	d016      	beq.n	8005ca8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c7a:	f7fc ff0f 	bl	8002a9c <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d302      	bcc.n	8005c90 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10b      	bne.n	8005ca8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2204      	movs	r2, #4
 8005c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9c:	f043 0201 	orr.w	r2, r3, #1
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e00e      	b.n	8005cc6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	bf14      	ite	ne
 8005cb6:	2301      	movne	r3, #1
 8005cb8:	2300      	moveq	r3, #0
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	79fb      	ldrb	r3, [r7, #7]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d1d6      	bne.n	8005c72 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e291      	b.n	800620a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 8087 	beq.w	8005e02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cf4:	4b96      	ldr	r3, [pc, #600]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 030c 	and.w	r3, r3, #12
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	d00c      	beq.n	8005d1a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d00:	4b93      	ldr	r3, [pc, #588]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 030c 	and.w	r3, r3, #12
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d112      	bne.n	8005d32 <HAL_RCC_OscConfig+0x62>
 8005d0c:	4b90      	ldr	r3, [pc, #576]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d18:	d10b      	bne.n	8005d32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d1a:	4b8d      	ldr	r3, [pc, #564]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d06c      	beq.n	8005e00 <HAL_RCC_OscConfig+0x130>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d168      	bne.n	8005e00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e26b      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d3a:	d106      	bne.n	8005d4a <HAL_RCC_OscConfig+0x7a>
 8005d3c:	4b84      	ldr	r3, [pc, #528]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a83      	ldr	r2, [pc, #524]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	e02e      	b.n	8005da8 <HAL_RCC_OscConfig+0xd8>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10c      	bne.n	8005d6c <HAL_RCC_OscConfig+0x9c>
 8005d52:	4b7f      	ldr	r3, [pc, #508]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a7e      	ldr	r2, [pc, #504]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	4b7c      	ldr	r3, [pc, #496]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a7b      	ldr	r2, [pc, #492]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	e01d      	b.n	8005da8 <HAL_RCC_OscConfig+0xd8>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d74:	d10c      	bne.n	8005d90 <HAL_RCC_OscConfig+0xc0>
 8005d76:	4b76      	ldr	r3, [pc, #472]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a75      	ldr	r2, [pc, #468]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	4b73      	ldr	r3, [pc, #460]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a72      	ldr	r2, [pc, #456]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	e00b      	b.n	8005da8 <HAL_RCC_OscConfig+0xd8>
 8005d90:	4b6f      	ldr	r3, [pc, #444]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a6e      	ldr	r2, [pc, #440]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	4b6c      	ldr	r3, [pc, #432]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a6b      	ldr	r2, [pc, #428]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d013      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db0:	f7fc fe74 	bl	8002a9c <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005db8:	f7fc fe70 	bl	8002a9c <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b64      	cmp	r3, #100	; 0x64
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e21f      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dca:	4b61      	ldr	r3, [pc, #388]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0f0      	beq.n	8005db8 <HAL_RCC_OscConfig+0xe8>
 8005dd6:	e014      	b.n	8005e02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd8:	f7fc fe60 	bl	8002a9c <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005de0:	f7fc fe5c 	bl	8002a9c <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b64      	cmp	r3, #100	; 0x64
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e20b      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005df2:	4b57      	ldr	r3, [pc, #348]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f0      	bne.n	8005de0 <HAL_RCC_OscConfig+0x110>
 8005dfe:	e000      	b.n	8005e02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d069      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e0e:	4b50      	ldr	r3, [pc, #320]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 030c 	and.w	r3, r3, #12
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00b      	beq.n	8005e32 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e1a:	4b4d      	ldr	r3, [pc, #308]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f003 030c 	and.w	r3, r3, #12
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d11c      	bne.n	8005e60 <HAL_RCC_OscConfig+0x190>
 8005e26:	4b4a      	ldr	r3, [pc, #296]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d116      	bne.n	8005e60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e32:	4b47      	ldr	r3, [pc, #284]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d005      	beq.n	8005e4a <HAL_RCC_OscConfig+0x17a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d001      	beq.n	8005e4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e1df      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e4a:	4b41      	ldr	r3, [pc, #260]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	493d      	ldr	r1, [pc, #244]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e5e:	e040      	b.n	8005ee2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d023      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e68:	4b39      	ldr	r3, [pc, #228]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a38      	ldr	r2, [pc, #224]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005e6e:	f043 0301 	orr.w	r3, r3, #1
 8005e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e74:	f7fc fe12 	bl	8002a9c <HAL_GetTick>
 8005e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e7c:	f7fc fe0e 	bl	8002a9c <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e1bd      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e8e:	4b30      	ldr	r3, [pc, #192]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0f0      	beq.n	8005e7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e9a:	4b2d      	ldr	r3, [pc, #180]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	4929      	ldr	r1, [pc, #164]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	600b      	str	r3, [r1, #0]
 8005eae:	e018      	b.n	8005ee2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eb0:	4b27      	ldr	r3, [pc, #156]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a26      	ldr	r2, [pc, #152]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005eb6:	f023 0301 	bic.w	r3, r3, #1
 8005eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ebc:	f7fc fdee 	bl	8002a9c <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ec4:	f7fc fdea 	bl	8002a9c <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e199      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ed6:	4b1e      	ldr	r3, [pc, #120]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1f0      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0308 	and.w	r3, r3, #8
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d038      	beq.n	8005f60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d019      	beq.n	8005f2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ef6:	4b16      	ldr	r3, [pc, #88]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005efa:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005efc:	f043 0301 	orr.w	r3, r3, #1
 8005f00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f02:	f7fc fdcb 	bl	8002a9c <HAL_GetTick>
 8005f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f08:	e008      	b.n	8005f1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f0a:	f7fc fdc7 	bl	8002a9c <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d901      	bls.n	8005f1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e176      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f1c:	4b0c      	ldr	r3, [pc, #48]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d0f0      	beq.n	8005f0a <HAL_RCC_OscConfig+0x23a>
 8005f28:	e01a      	b.n	8005f60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f2a:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f2e:	4a08      	ldr	r2, [pc, #32]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005f30:	f023 0301 	bic.w	r3, r3, #1
 8005f34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f36:	f7fc fdb1 	bl	8002a9c <HAL_GetTick>
 8005f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f3c:	e00a      	b.n	8005f54 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f3e:	f7fc fdad 	bl	8002a9c <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d903      	bls.n	8005f54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e15c      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
 8005f50:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f54:	4b91      	ldr	r3, [pc, #580]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8005f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1ee      	bne.n	8005f3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 80a4 	beq.w	80060b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f6e:	4b8b      	ldr	r3, [pc, #556]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10d      	bne.n	8005f96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f7a:	4b88      	ldr	r3, [pc, #544]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	4a87      	ldr	r2, [pc, #540]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8005f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f84:	6413      	str	r3, [r2, #64]	; 0x40
 8005f86:	4b85      	ldr	r3, [pc, #532]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8e:	60bb      	str	r3, [r7, #8]
 8005f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f92:	2301      	movs	r3, #1
 8005f94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f96:	4b82      	ldr	r3, [pc, #520]	; (80061a0 <HAL_RCC_OscConfig+0x4d0>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d118      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005fa2:	4b7f      	ldr	r3, [pc, #508]	; (80061a0 <HAL_RCC_OscConfig+0x4d0>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a7e      	ldr	r2, [pc, #504]	; (80061a0 <HAL_RCC_OscConfig+0x4d0>)
 8005fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fae:	f7fc fd75 	bl	8002a9c <HAL_GetTick>
 8005fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fb4:	e008      	b.n	8005fc8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fb6:	f7fc fd71 	bl	8002a9c <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b64      	cmp	r3, #100	; 0x64
 8005fc2:	d901      	bls.n	8005fc8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e120      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fc8:	4b75      	ldr	r3, [pc, #468]	; (80061a0 <HAL_RCC_OscConfig+0x4d0>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d0f0      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d106      	bne.n	8005fea <HAL_RCC_OscConfig+0x31a>
 8005fdc:	4b6f      	ldr	r3, [pc, #444]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8005fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe0:	4a6e      	ldr	r2, [pc, #440]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8005fe2:	f043 0301 	orr.w	r3, r3, #1
 8005fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fe8:	e02d      	b.n	8006046 <HAL_RCC_OscConfig+0x376>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10c      	bne.n	800600c <HAL_RCC_OscConfig+0x33c>
 8005ff2:	4b6a      	ldr	r3, [pc, #424]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8005ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff6:	4a69      	ldr	r2, [pc, #420]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8005ff8:	f023 0301 	bic.w	r3, r3, #1
 8005ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8005ffe:	4b67      	ldr	r3, [pc, #412]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8006000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006002:	4a66      	ldr	r2, [pc, #408]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8006004:	f023 0304 	bic.w	r3, r3, #4
 8006008:	6713      	str	r3, [r2, #112]	; 0x70
 800600a:	e01c      	b.n	8006046 <HAL_RCC_OscConfig+0x376>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	2b05      	cmp	r3, #5
 8006012:	d10c      	bne.n	800602e <HAL_RCC_OscConfig+0x35e>
 8006014:	4b61      	ldr	r3, [pc, #388]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8006016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006018:	4a60      	ldr	r2, [pc, #384]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 800601a:	f043 0304 	orr.w	r3, r3, #4
 800601e:	6713      	str	r3, [r2, #112]	; 0x70
 8006020:	4b5e      	ldr	r3, [pc, #376]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8006022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006024:	4a5d      	ldr	r2, [pc, #372]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8006026:	f043 0301 	orr.w	r3, r3, #1
 800602a:	6713      	str	r3, [r2, #112]	; 0x70
 800602c:	e00b      	b.n	8006046 <HAL_RCC_OscConfig+0x376>
 800602e:	4b5b      	ldr	r3, [pc, #364]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8006030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006032:	4a5a      	ldr	r2, [pc, #360]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8006034:	f023 0301 	bic.w	r3, r3, #1
 8006038:	6713      	str	r3, [r2, #112]	; 0x70
 800603a:	4b58      	ldr	r3, [pc, #352]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 800603c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603e:	4a57      	ldr	r2, [pc, #348]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8006040:	f023 0304 	bic.w	r3, r3, #4
 8006044:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d015      	beq.n	800607a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800604e:	f7fc fd25 	bl	8002a9c <HAL_GetTick>
 8006052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006054:	e00a      	b.n	800606c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006056:	f7fc fd21 	bl	8002a9c <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	f241 3288 	movw	r2, #5000	; 0x1388
 8006064:	4293      	cmp	r3, r2
 8006066:	d901      	bls.n	800606c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e0ce      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800606c:	4b4b      	ldr	r3, [pc, #300]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 800606e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0ee      	beq.n	8006056 <HAL_RCC_OscConfig+0x386>
 8006078:	e014      	b.n	80060a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800607a:	f7fc fd0f 	bl	8002a9c <HAL_GetTick>
 800607e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006080:	e00a      	b.n	8006098 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006082:	f7fc fd0b 	bl	8002a9c <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006090:	4293      	cmp	r3, r2
 8006092:	d901      	bls.n	8006098 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e0b8      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006098:	4b40      	ldr	r3, [pc, #256]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 800609a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1ee      	bne.n	8006082 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d105      	bne.n	80060b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060aa:	4b3c      	ldr	r3, [pc, #240]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	4a3b      	ldr	r2, [pc, #236]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 80060b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 80a4 	beq.w	8006208 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060c0:	4b36      	ldr	r3, [pc, #216]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f003 030c 	and.w	r3, r3, #12
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	d06b      	beq.n	80061a4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d149      	bne.n	8006168 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060d4:	4b31      	ldr	r3, [pc, #196]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a30      	ldr	r2, [pc, #192]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 80060da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e0:	f7fc fcdc 	bl	8002a9c <HAL_GetTick>
 80060e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060e8:	f7fc fcd8 	bl	8002a9c <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e087      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060fa:	4b28      	ldr	r3, [pc, #160]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1f0      	bne.n	80060e8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69da      	ldr	r2, [r3, #28]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	019b      	lsls	r3, r3, #6
 8006116:	431a      	orrs	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	085b      	lsrs	r3, r3, #1
 800611e:	3b01      	subs	r3, #1
 8006120:	041b      	lsls	r3, r3, #16
 8006122:	431a      	orrs	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006128:	061b      	lsls	r3, r3, #24
 800612a:	4313      	orrs	r3, r2
 800612c:	4a1b      	ldr	r2, [pc, #108]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 800612e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006132:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006134:	4b19      	ldr	r3, [pc, #100]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a18      	ldr	r2, [pc, #96]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 800613a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800613e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006140:	f7fc fcac 	bl	8002a9c <HAL_GetTick>
 8006144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006146:	e008      	b.n	800615a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006148:	f7fc fca8 	bl	8002a9c <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d901      	bls.n	800615a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e057      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800615a:	4b10      	ldr	r3, [pc, #64]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0f0      	beq.n	8006148 <HAL_RCC_OscConfig+0x478>
 8006166:	e04f      	b.n	8006208 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006168:	4b0c      	ldr	r3, [pc, #48]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a0b      	ldr	r2, [pc, #44]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 800616e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006174:	f7fc fc92 	bl	8002a9c <HAL_GetTick>
 8006178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800617a:	e008      	b.n	800618e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800617c:	f7fc fc8e 	bl	8002a9c <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d901      	bls.n	800618e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e03d      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800618e:	4b03      	ldr	r3, [pc, #12]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1f0      	bne.n	800617c <HAL_RCC_OscConfig+0x4ac>
 800619a:	e035      	b.n	8006208 <HAL_RCC_OscConfig+0x538>
 800619c:	40023800 	.word	0x40023800
 80061a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80061a4:	4b1b      	ldr	r3, [pc, #108]	; (8006214 <HAL_RCC_OscConfig+0x544>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d028      	beq.n	8006204 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061bc:	429a      	cmp	r2, r3
 80061be:	d121      	bne.n	8006204 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d11a      	bne.n	8006204 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061d4:	4013      	ands	r3, r2
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061dc:	4293      	cmp	r3, r2
 80061de:	d111      	bne.n	8006204 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ea:	085b      	lsrs	r3, r3, #1
 80061ec:	3b01      	subs	r3, #1
 80061ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d107      	bne.n	8006204 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006200:	429a      	cmp	r2, r3
 8006202:	d001      	beq.n	8006208 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e000      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	40023800 	.word	0x40023800

08006218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e0d0      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006230:	4b6a      	ldr	r3, [pc, #424]	; (80063dc <HAL_RCC_ClockConfig+0x1c4>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 030f 	and.w	r3, r3, #15
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d910      	bls.n	8006260 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800623e:	4b67      	ldr	r3, [pc, #412]	; (80063dc <HAL_RCC_ClockConfig+0x1c4>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f023 020f 	bic.w	r2, r3, #15
 8006246:	4965      	ldr	r1, [pc, #404]	; (80063dc <HAL_RCC_ClockConfig+0x1c4>)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	4313      	orrs	r3, r2
 800624c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800624e:	4b63      	ldr	r3, [pc, #396]	; (80063dc <HAL_RCC_ClockConfig+0x1c4>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 030f 	and.w	r3, r3, #15
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d001      	beq.n	8006260 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e0b8      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d020      	beq.n	80062ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	d005      	beq.n	8006284 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006278:	4b59      	ldr	r3, [pc, #356]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	4a58      	ldr	r2, [pc, #352]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 800627e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006282:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006290:	4b53      	ldr	r3, [pc, #332]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	4a52      	ldr	r2, [pc, #328]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006296:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800629a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800629c:	4b50      	ldr	r3, [pc, #320]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	494d      	ldr	r1, [pc, #308]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d040      	beq.n	800633c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d107      	bne.n	80062d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c2:	4b47      	ldr	r3, [pc, #284]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d115      	bne.n	80062fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e07f      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d107      	bne.n	80062ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062da:	4b41      	ldr	r3, [pc, #260]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d109      	bne.n	80062fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e073      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ea:	4b3d      	ldr	r3, [pc, #244]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e06b      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062fa:	4b39      	ldr	r3, [pc, #228]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f023 0203 	bic.w	r2, r3, #3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	4936      	ldr	r1, [pc, #216]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006308:	4313      	orrs	r3, r2
 800630a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800630c:	f7fc fbc6 	bl	8002a9c <HAL_GetTick>
 8006310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006312:	e00a      	b.n	800632a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006314:	f7fc fbc2 	bl	8002a9c <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006322:	4293      	cmp	r3, r2
 8006324:	d901      	bls.n	800632a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e053      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800632a:	4b2d      	ldr	r3, [pc, #180]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f003 020c 	and.w	r2, r3, #12
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	429a      	cmp	r2, r3
 800633a:	d1eb      	bne.n	8006314 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800633c:	4b27      	ldr	r3, [pc, #156]	; (80063dc <HAL_RCC_ClockConfig+0x1c4>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d210      	bcs.n	800636c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800634a:	4b24      	ldr	r3, [pc, #144]	; (80063dc <HAL_RCC_ClockConfig+0x1c4>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f023 020f 	bic.w	r2, r3, #15
 8006352:	4922      	ldr	r1, [pc, #136]	; (80063dc <HAL_RCC_ClockConfig+0x1c4>)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	4313      	orrs	r3, r2
 8006358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800635a:	4b20      	ldr	r3, [pc, #128]	; (80063dc <HAL_RCC_ClockConfig+0x1c4>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 030f 	and.w	r3, r3, #15
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	429a      	cmp	r2, r3
 8006366:	d001      	beq.n	800636c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e032      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b00      	cmp	r3, #0
 8006376:	d008      	beq.n	800638a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006378:	4b19      	ldr	r3, [pc, #100]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	4916      	ldr	r1, [pc, #88]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006386:	4313      	orrs	r3, r2
 8006388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d009      	beq.n	80063aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006396:	4b12      	ldr	r3, [pc, #72]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	490e      	ldr	r1, [pc, #56]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063aa:	f000 f821 	bl	80063f0 <HAL_RCC_GetSysClockFreq>
 80063ae:	4602      	mov	r2, r0
 80063b0:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	091b      	lsrs	r3, r3, #4
 80063b6:	f003 030f 	and.w	r3, r3, #15
 80063ba:	490a      	ldr	r1, [pc, #40]	; (80063e4 <HAL_RCC_ClockConfig+0x1cc>)
 80063bc:	5ccb      	ldrb	r3, [r1, r3]
 80063be:	fa22 f303 	lsr.w	r3, r2, r3
 80063c2:	4a09      	ldr	r2, [pc, #36]	; (80063e8 <HAL_RCC_ClockConfig+0x1d0>)
 80063c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80063c6:	4b09      	ldr	r3, [pc, #36]	; (80063ec <HAL_RCC_ClockConfig+0x1d4>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fc fa28 	bl	8002820 <HAL_InitTick>

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	40023c00 	.word	0x40023c00
 80063e0:	40023800 	.word	0x40023800
 80063e4:	0800dda0 	.word	0x0800dda0
 80063e8:	20000000 	.word	0x20000000
 80063ec:	20000004 	.word	0x20000004

080063f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063f0:	b5b0      	push	{r4, r5, r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80063f6:	2100      	movs	r1, #0
 80063f8:	6079      	str	r1, [r7, #4]
 80063fa:	2100      	movs	r1, #0
 80063fc:	60f9      	str	r1, [r7, #12]
 80063fe:	2100      	movs	r1, #0
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006402:	2100      	movs	r1, #0
 8006404:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006406:	4952      	ldr	r1, [pc, #328]	; (8006550 <HAL_RCC_GetSysClockFreq+0x160>)
 8006408:	6889      	ldr	r1, [r1, #8]
 800640a:	f001 010c 	and.w	r1, r1, #12
 800640e:	2908      	cmp	r1, #8
 8006410:	d00d      	beq.n	800642e <HAL_RCC_GetSysClockFreq+0x3e>
 8006412:	2908      	cmp	r1, #8
 8006414:	f200 8094 	bhi.w	8006540 <HAL_RCC_GetSysClockFreq+0x150>
 8006418:	2900      	cmp	r1, #0
 800641a:	d002      	beq.n	8006422 <HAL_RCC_GetSysClockFreq+0x32>
 800641c:	2904      	cmp	r1, #4
 800641e:	d003      	beq.n	8006428 <HAL_RCC_GetSysClockFreq+0x38>
 8006420:	e08e      	b.n	8006540 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006422:	4b4c      	ldr	r3, [pc, #304]	; (8006554 <HAL_RCC_GetSysClockFreq+0x164>)
 8006424:	60bb      	str	r3, [r7, #8]
      break;
 8006426:	e08e      	b.n	8006546 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006428:	4b4b      	ldr	r3, [pc, #300]	; (8006558 <HAL_RCC_GetSysClockFreq+0x168>)
 800642a:	60bb      	str	r3, [r7, #8]
      break;
 800642c:	e08b      	b.n	8006546 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800642e:	4948      	ldr	r1, [pc, #288]	; (8006550 <HAL_RCC_GetSysClockFreq+0x160>)
 8006430:	6849      	ldr	r1, [r1, #4]
 8006432:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006436:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006438:	4945      	ldr	r1, [pc, #276]	; (8006550 <HAL_RCC_GetSysClockFreq+0x160>)
 800643a:	6849      	ldr	r1, [r1, #4]
 800643c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006440:	2900      	cmp	r1, #0
 8006442:	d024      	beq.n	800648e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006444:	4942      	ldr	r1, [pc, #264]	; (8006550 <HAL_RCC_GetSysClockFreq+0x160>)
 8006446:	6849      	ldr	r1, [r1, #4]
 8006448:	0989      	lsrs	r1, r1, #6
 800644a:	4608      	mov	r0, r1
 800644c:	f04f 0100 	mov.w	r1, #0
 8006450:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006454:	f04f 0500 	mov.w	r5, #0
 8006458:	ea00 0204 	and.w	r2, r0, r4
 800645c:	ea01 0305 	and.w	r3, r1, r5
 8006460:	493d      	ldr	r1, [pc, #244]	; (8006558 <HAL_RCC_GetSysClockFreq+0x168>)
 8006462:	fb01 f003 	mul.w	r0, r1, r3
 8006466:	2100      	movs	r1, #0
 8006468:	fb01 f102 	mul.w	r1, r1, r2
 800646c:	1844      	adds	r4, r0, r1
 800646e:	493a      	ldr	r1, [pc, #232]	; (8006558 <HAL_RCC_GetSysClockFreq+0x168>)
 8006470:	fba2 0101 	umull	r0, r1, r2, r1
 8006474:	1863      	adds	r3, r4, r1
 8006476:	4619      	mov	r1, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	461a      	mov	r2, r3
 800647c:	f04f 0300 	mov.w	r3, #0
 8006480:	f7f9 ff16 	bl	80002b0 <__aeabi_uldivmod>
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	4613      	mov	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	e04a      	b.n	8006524 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800648e:	4b30      	ldr	r3, [pc, #192]	; (8006550 <HAL_RCC_GetSysClockFreq+0x160>)
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	099b      	lsrs	r3, r3, #6
 8006494:	461a      	mov	r2, r3
 8006496:	f04f 0300 	mov.w	r3, #0
 800649a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800649e:	f04f 0100 	mov.w	r1, #0
 80064a2:	ea02 0400 	and.w	r4, r2, r0
 80064a6:	ea03 0501 	and.w	r5, r3, r1
 80064aa:	4620      	mov	r0, r4
 80064ac:	4629      	mov	r1, r5
 80064ae:	f04f 0200 	mov.w	r2, #0
 80064b2:	f04f 0300 	mov.w	r3, #0
 80064b6:	014b      	lsls	r3, r1, #5
 80064b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80064bc:	0142      	lsls	r2, r0, #5
 80064be:	4610      	mov	r0, r2
 80064c0:	4619      	mov	r1, r3
 80064c2:	1b00      	subs	r0, r0, r4
 80064c4:	eb61 0105 	sbc.w	r1, r1, r5
 80064c8:	f04f 0200 	mov.w	r2, #0
 80064cc:	f04f 0300 	mov.w	r3, #0
 80064d0:	018b      	lsls	r3, r1, #6
 80064d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80064d6:	0182      	lsls	r2, r0, #6
 80064d8:	1a12      	subs	r2, r2, r0
 80064da:	eb63 0301 	sbc.w	r3, r3, r1
 80064de:	f04f 0000 	mov.w	r0, #0
 80064e2:	f04f 0100 	mov.w	r1, #0
 80064e6:	00d9      	lsls	r1, r3, #3
 80064e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064ec:	00d0      	lsls	r0, r2, #3
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	1912      	adds	r2, r2, r4
 80064f4:	eb45 0303 	adc.w	r3, r5, r3
 80064f8:	f04f 0000 	mov.w	r0, #0
 80064fc:	f04f 0100 	mov.w	r1, #0
 8006500:	0299      	lsls	r1, r3, #10
 8006502:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006506:	0290      	lsls	r0, r2, #10
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4610      	mov	r0, r2
 800650e:	4619      	mov	r1, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	461a      	mov	r2, r3
 8006514:	f04f 0300 	mov.w	r3, #0
 8006518:	f7f9 feca 	bl	80002b0 <__aeabi_uldivmod>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4613      	mov	r3, r2
 8006522:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006524:	4b0a      	ldr	r3, [pc, #40]	; (8006550 <HAL_RCC_GetSysClockFreq+0x160>)
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	0c1b      	lsrs	r3, r3, #16
 800652a:	f003 0303 	and.w	r3, r3, #3
 800652e:	3301      	adds	r3, #1
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	fbb2 f3f3 	udiv	r3, r2, r3
 800653c:	60bb      	str	r3, [r7, #8]
      break;
 800653e:	e002      	b.n	8006546 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006540:	4b04      	ldr	r3, [pc, #16]	; (8006554 <HAL_RCC_GetSysClockFreq+0x164>)
 8006542:	60bb      	str	r3, [r7, #8]
      break;
 8006544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006546:	68bb      	ldr	r3, [r7, #8]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bdb0      	pop	{r4, r5, r7, pc}
 8006550:	40023800 	.word	0x40023800
 8006554:	00f42400 	.word	0x00f42400
 8006558:	017d7840 	.word	0x017d7840

0800655c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800655c:	b480      	push	{r7}
 800655e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006560:	4b03      	ldr	r3, [pc, #12]	; (8006570 <HAL_RCC_GetHCLKFreq+0x14>)
 8006562:	681b      	ldr	r3, [r3, #0]
}
 8006564:	4618      	mov	r0, r3
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	20000000 	.word	0x20000000

08006574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006578:	f7ff fff0 	bl	800655c <HAL_RCC_GetHCLKFreq>
 800657c:	4602      	mov	r2, r0
 800657e:	4b05      	ldr	r3, [pc, #20]	; (8006594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	0a9b      	lsrs	r3, r3, #10
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	4903      	ldr	r1, [pc, #12]	; (8006598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800658a:	5ccb      	ldrb	r3, [r1, r3]
 800658c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006590:	4618      	mov	r0, r3
 8006592:	bd80      	pop	{r7, pc}
 8006594:	40023800 	.word	0x40023800
 8006598:	0800ddb0 	.word	0x0800ddb0

0800659c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80065a0:	f7ff ffdc 	bl	800655c <HAL_RCC_GetHCLKFreq>
 80065a4:	4602      	mov	r2, r0
 80065a6:	4b05      	ldr	r3, [pc, #20]	; (80065bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	0b5b      	lsrs	r3, r3, #13
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	4903      	ldr	r1, [pc, #12]	; (80065c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065b2:	5ccb      	ldrb	r3, [r1, r3]
 80065b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	40023800 	.word	0x40023800
 80065c0:	0800ddb0 	.word	0x0800ddb0

080065c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	220f      	movs	r2, #15
 80065d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065d4:	4b12      	ldr	r3, [pc, #72]	; (8006620 <HAL_RCC_GetClockConfig+0x5c>)
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f003 0203 	and.w	r2, r3, #3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80065e0:	4b0f      	ldr	r3, [pc, #60]	; (8006620 <HAL_RCC_GetClockConfig+0x5c>)
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80065ec:	4b0c      	ldr	r3, [pc, #48]	; (8006620 <HAL_RCC_GetClockConfig+0x5c>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80065f8:	4b09      	ldr	r3, [pc, #36]	; (8006620 <HAL_RCC_GetClockConfig+0x5c>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	08db      	lsrs	r3, r3, #3
 80065fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006606:	4b07      	ldr	r3, [pc, #28]	; (8006624 <HAL_RCC_GetClockConfig+0x60>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 020f 	and.w	r2, r3, #15
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	601a      	str	r2, [r3, #0]
}
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	40023800 	.word	0x40023800
 8006624:	40023c00 	.word	0x40023c00

08006628 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b088      	sub	sp, #32
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006630:	2300      	movs	r3, #0
 8006632:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006634:	2300      	movs	r3, #0
 8006636:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006638:	2300      	movs	r3, #0
 800663a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800663c:	2300      	movs	r3, #0
 800663e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006640:	2300      	movs	r3, #0
 8006642:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b00      	cmp	r3, #0
 800664e:	d012      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006650:	4b69      	ldr	r3, [pc, #420]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	4a68      	ldr	r2, [pc, #416]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006656:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800665a:	6093      	str	r3, [r2, #8]
 800665c:	4b66      	ldr	r3, [pc, #408]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006664:	4964      	ldr	r1, [pc, #400]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006666:	4313      	orrs	r3, r2
 8006668:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006672:	2301      	movs	r3, #1
 8006674:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d017      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006682:	4b5d      	ldr	r3, [pc, #372]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006688:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006690:	4959      	ldr	r1, [pc, #356]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006692:	4313      	orrs	r3, r2
 8006694:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800669c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066a0:	d101      	bne.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80066a2:	2301      	movs	r3, #1
 80066a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80066ae:	2301      	movs	r3, #1
 80066b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d017      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80066be:	4b4e      	ldr	r3, [pc, #312]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066cc:	494a      	ldr	r1, [pc, #296]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066dc:	d101      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80066de:	2301      	movs	r3, #1
 80066e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80066ea:	2301      	movs	r3, #1
 80066ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80066fa:	2301      	movs	r3, #1
 80066fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0320 	and.w	r3, r3, #32
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 808b 	beq.w	8006822 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800670c:	4b3a      	ldr	r3, [pc, #232]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800670e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006710:	4a39      	ldr	r2, [pc, #228]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006716:	6413      	str	r3, [r2, #64]	; 0x40
 8006718:	4b37      	ldr	r3, [pc, #220]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006720:	60bb      	str	r3, [r7, #8]
 8006722:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006724:	4b35      	ldr	r3, [pc, #212]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a34      	ldr	r2, [pc, #208]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800672a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800672e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006730:	f7fc f9b4 	bl	8002a9c <HAL_GetTick>
 8006734:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006736:	e008      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006738:	f7fc f9b0 	bl	8002a9c <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b64      	cmp	r3, #100	; 0x64
 8006744:	d901      	bls.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e357      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800674a:	4b2c      	ldr	r3, [pc, #176]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0f0      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006756:	4b28      	ldr	r3, [pc, #160]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800675e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d035      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	429a      	cmp	r2, r3
 8006772:	d02e      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006774:	4b20      	ldr	r3, [pc, #128]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800677c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800677e:	4b1e      	ldr	r3, [pc, #120]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006782:	4a1d      	ldr	r2, [pc, #116]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006788:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800678a:	4b1b      	ldr	r3, [pc, #108]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800678c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678e:	4a1a      	ldr	r2, [pc, #104]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006794:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006796:	4a18      	ldr	r2, [pc, #96]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800679c:	4b16      	ldr	r3, [pc, #88]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800679e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d114      	bne.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a8:	f7fc f978 	bl	8002a9c <HAL_GetTick>
 80067ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ae:	e00a      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067b0:	f7fc f974 	bl	8002a9c <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80067be:	4293      	cmp	r3, r2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e319      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067c6:	4b0c      	ldr	r3, [pc, #48]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d0ee      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067de:	d111      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80067e0:	4b05      	ldr	r3, [pc, #20]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80067ec:	4b04      	ldr	r3, [pc, #16]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80067ee:	400b      	ands	r3, r1
 80067f0:	4901      	ldr	r1, [pc, #4]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	608b      	str	r3, [r1, #8]
 80067f6:	e00b      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80067f8:	40023800 	.word	0x40023800
 80067fc:	40007000 	.word	0x40007000
 8006800:	0ffffcff 	.word	0x0ffffcff
 8006804:	4bb1      	ldr	r3, [pc, #708]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	4ab0      	ldr	r2, [pc, #704]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800680a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800680e:	6093      	str	r3, [r2, #8]
 8006810:	4bae      	ldr	r3, [pc, #696]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006812:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800681c:	49ab      	ldr	r1, [pc, #684]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800681e:	4313      	orrs	r3, r2
 8006820:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0310 	and.w	r3, r3, #16
 800682a:	2b00      	cmp	r3, #0
 800682c:	d010      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800682e:	4ba7      	ldr	r3, [pc, #668]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006834:	4aa5      	ldr	r2, [pc, #660]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800683a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800683e:	4ba3      	ldr	r3, [pc, #652]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006840:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006848:	49a0      	ldr	r1, [pc, #640]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800684a:	4313      	orrs	r3, r2
 800684c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800685c:	4b9b      	ldr	r3, [pc, #620]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800685e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006862:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800686a:	4998      	ldr	r1, [pc, #608]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800686c:	4313      	orrs	r3, r2
 800686e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800687e:	4b93      	ldr	r3, [pc, #588]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006884:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800688c:	498f      	ldr	r1, [pc, #572]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800688e:	4313      	orrs	r3, r2
 8006890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00a      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068a0:	4b8a      	ldr	r3, [pc, #552]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80068a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ae:	4987      	ldr	r1, [pc, #540]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00a      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068c2:	4b82      	ldr	r3, [pc, #520]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80068c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d0:	497e      	ldr	r1, [pc, #504]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00a      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068e4:	4b79      	ldr	r3, [pc, #484]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80068e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ea:	f023 0203 	bic.w	r2, r3, #3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f2:	4976      	ldr	r1, [pc, #472]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00a      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006906:	4b71      	ldr	r3, [pc, #452]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800690c:	f023 020c 	bic.w	r2, r3, #12
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006914:	496d      	ldr	r1, [pc, #436]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006916:	4313      	orrs	r3, r2
 8006918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00a      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006928:	4b68      	ldr	r3, [pc, #416]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800692a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006936:	4965      	ldr	r1, [pc, #404]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006938:	4313      	orrs	r3, r2
 800693a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800694a:	4b60      	ldr	r3, [pc, #384]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800694c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006950:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006958:	495c      	ldr	r1, [pc, #368]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800695a:	4313      	orrs	r3, r2
 800695c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00a      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800696c:	4b57      	ldr	r3, [pc, #348]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800696e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006972:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697a:	4954      	ldr	r1, [pc, #336]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800697c:	4313      	orrs	r3, r2
 800697e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00a      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800698e:	4b4f      	ldr	r3, [pc, #316]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006994:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800699c:	494b      	ldr	r1, [pc, #300]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00a      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80069b0:	4b46      	ldr	r3, [pc, #280]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80069b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069be:	4943      	ldr	r1, [pc, #268]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00a      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80069d2:	4b3e      	ldr	r3, [pc, #248]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80069d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069e0:	493a      	ldr	r1, [pc, #232]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00a      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069f4:	4b35      	ldr	r3, [pc, #212]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80069f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a02:	4932      	ldr	r1, [pc, #200]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d011      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006a16:	4b2d      	ldr	r3, [pc, #180]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a1c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a24:	4929      	ldr	r1, [pc, #164]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a34:	d101      	bne.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006a36:	2301      	movs	r3, #1
 8006a38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0308 	and.w	r3, r3, #8
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006a46:	2301      	movs	r3, #1
 8006a48:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a56:	4b1d      	ldr	r3, [pc, #116]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a5c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a64:	4919      	ldr	r1, [pc, #100]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00b      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006a78:	4b14      	ldr	r3, [pc, #80]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a88:	4910      	ldr	r1, [pc, #64]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d006      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 80d9 	beq.w	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006aa4:	4b09      	ldr	r3, [pc, #36]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a08      	ldr	r2, [pc, #32]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006aaa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ab0:	f7fb fff4 	bl	8002a9c <HAL_GetTick>
 8006ab4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ab6:	e00b      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ab8:	f7fb fff0 	bl	8002a9c <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	2b64      	cmp	r3, #100	; 0x64
 8006ac4:	d904      	bls.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e197      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006aca:	bf00      	nop
 8006acc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ad0:	4b6c      	ldr	r3, [pc, #432]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1ed      	bne.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d021      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d11d      	bne.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006af0:	4b64      	ldr	r3, [pc, #400]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006af6:	0c1b      	lsrs	r3, r3, #16
 8006af8:	f003 0303 	and.w	r3, r3, #3
 8006afc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006afe:	4b61      	ldr	r3, [pc, #388]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b04:	0e1b      	lsrs	r3, r3, #24
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	019a      	lsls	r2, r3, #6
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	041b      	lsls	r3, r3, #16
 8006b16:	431a      	orrs	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	061b      	lsls	r3, r3, #24
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	071b      	lsls	r3, r3, #28
 8006b24:	4957      	ldr	r1, [pc, #348]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d004      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b40:	d00a      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d02e      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b56:	d129      	bne.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006b58:	4b4a      	ldr	r3, [pc, #296]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b5e:	0c1b      	lsrs	r3, r3, #16
 8006b60:	f003 0303 	and.w	r3, r3, #3
 8006b64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b66:	4b47      	ldr	r3, [pc, #284]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b6c:	0f1b      	lsrs	r3, r3, #28
 8006b6e:	f003 0307 	and.w	r3, r3, #7
 8006b72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	019a      	lsls	r2, r3, #6
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	041b      	lsls	r3, r3, #16
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	061b      	lsls	r3, r3, #24
 8006b86:	431a      	orrs	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	071b      	lsls	r3, r3, #28
 8006b8c:	493d      	ldr	r1, [pc, #244]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b94:	4b3b      	ldr	r3, [pc, #236]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b9a:	f023 021f 	bic.w	r2, r3, #31
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	4937      	ldr	r1, [pc, #220]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d01d      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006bb8:	4b32      	ldr	r3, [pc, #200]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bbe:	0e1b      	lsrs	r3, r3, #24
 8006bc0:	f003 030f 	and.w	r3, r3, #15
 8006bc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006bc6:	4b2f      	ldr	r3, [pc, #188]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bcc:	0f1b      	lsrs	r3, r3, #28
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	019a      	lsls	r2, r3, #6
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	041b      	lsls	r3, r3, #16
 8006be0:	431a      	orrs	r2, r3
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	061b      	lsls	r3, r3, #24
 8006be6:	431a      	orrs	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	071b      	lsls	r3, r3, #28
 8006bec:	4925      	ldr	r1, [pc, #148]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d011      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	019a      	lsls	r2, r3, #6
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	041b      	lsls	r3, r3, #16
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	061b      	lsls	r3, r3, #24
 8006c14:	431a      	orrs	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	071b      	lsls	r3, r3, #28
 8006c1c:	4919      	ldr	r1, [pc, #100]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c24:	4b17      	ldr	r3, [pc, #92]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a16      	ldr	r2, [pc, #88]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c30:	f7fb ff34 	bl	8002a9c <HAL_GetTick>
 8006c34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c36:	e008      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c38:	f7fb ff30 	bl	8002a9c <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	2b64      	cmp	r3, #100	; 0x64
 8006c44:	d901      	bls.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e0d7      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c4a:	4b0e      	ldr	r3, [pc, #56]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0f0      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	f040 80cd 	bne.w	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006c5e:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a08      	ldr	r2, [pc, #32]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c6a:	f7fb ff17 	bl	8002a9c <HAL_GetTick>
 8006c6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c70:	e00a      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c72:	f7fb ff13 	bl	8002a9c <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	2b64      	cmp	r3, #100	; 0x64
 8006c7e:	d903      	bls.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e0ba      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006c84:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c88:	4b5e      	ldr	r3, [pc, #376]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c94:	d0ed      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d009      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d02e      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d12a      	bne.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006cbe:	4b51      	ldr	r3, [pc, #324]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc4:	0c1b      	lsrs	r3, r3, #16
 8006cc6:	f003 0303 	and.w	r3, r3, #3
 8006cca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ccc:	4b4d      	ldr	r3, [pc, #308]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd2:	0f1b      	lsrs	r3, r3, #28
 8006cd4:	f003 0307 	and.w	r3, r3, #7
 8006cd8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	019a      	lsls	r2, r3, #6
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	041b      	lsls	r3, r3, #16
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	061b      	lsls	r3, r3, #24
 8006cec:	431a      	orrs	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	071b      	lsls	r3, r3, #28
 8006cf2:	4944      	ldr	r1, [pc, #272]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006cfa:	4b42      	ldr	r3, [pc, #264]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	021b      	lsls	r3, r3, #8
 8006d0c:	493d      	ldr	r1, [pc, #244]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d022      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d28:	d11d      	bne.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d2a:	4b36      	ldr	r3, [pc, #216]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d30:	0e1b      	lsrs	r3, r3, #24
 8006d32:	f003 030f 	and.w	r3, r3, #15
 8006d36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006d38:	4b32      	ldr	r3, [pc, #200]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d3e:	0f1b      	lsrs	r3, r3, #28
 8006d40:	f003 0307 	and.w	r3, r3, #7
 8006d44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	019a      	lsls	r2, r3, #6
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a1b      	ldr	r3, [r3, #32]
 8006d50:	041b      	lsls	r3, r3, #16
 8006d52:	431a      	orrs	r2, r3
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	061b      	lsls	r3, r3, #24
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	071b      	lsls	r3, r3, #28
 8006d5e:	4929      	ldr	r1, [pc, #164]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0308 	and.w	r3, r3, #8
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d028      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d72:	4b24      	ldr	r3, [pc, #144]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d78:	0e1b      	lsrs	r3, r3, #24
 8006d7a:	f003 030f 	and.w	r3, r3, #15
 8006d7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006d80:	4b20      	ldr	r3, [pc, #128]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d86:	0c1b      	lsrs	r3, r3, #16
 8006d88:	f003 0303 	and.w	r3, r3, #3
 8006d8c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	019a      	lsls	r2, r3, #6
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	041b      	lsls	r3, r3, #16
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	061b      	lsls	r3, r3, #24
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	69db      	ldr	r3, [r3, #28]
 8006da4:	071b      	lsls	r3, r3, #28
 8006da6:	4917      	ldr	r1, [pc, #92]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006dae:	4b15      	ldr	r3, [pc, #84]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006db4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbc:	4911      	ldr	r1, [pc, #68]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006dc4:	4b0f      	ldr	r3, [pc, #60]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a0e      	ldr	r2, [pc, #56]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dd0:	f7fb fe64 	bl	8002a9c <HAL_GetTick>
 8006dd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006dd6:	e008      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006dd8:	f7fb fe60 	bl	8002a9c <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b64      	cmp	r3, #100	; 0x64
 8006de4:	d901      	bls.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e007      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006dea:	4b06      	ldr	r3, [pc, #24]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006df6:	d1ef      	bne.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3720      	adds	r7, #32
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	40023800 	.word	0x40023800

08006e08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006e14:	2300      	movs	r3, #0
 8006e16:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e26:	f040 808c 	bne.w	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006e2a:	4b95      	ldr	r3, [pc, #596]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e30:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006e38:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e40:	d07c      	beq.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e48:	d87d      	bhi.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d004      	beq.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e56:	d039      	beq.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006e58:	e075      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006e5a:	4b89      	ldr	r3, [pc, #548]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d108      	bne.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e66:	4b86      	ldr	r3, [pc, #536]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e6e:	4a85      	ldr	r2, [pc, #532]	; (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e74:	613b      	str	r3, [r7, #16]
 8006e76:	e007      	b.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006e78:	4b81      	ldr	r3, [pc, #516]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e80:	4a81      	ldr	r2, [pc, #516]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e86:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006e88:	4b7d      	ldr	r3, [pc, #500]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e8e:	0e1b      	lsrs	r3, r3, #24
 8006e90:	f003 030f 	and.w	r3, r3, #15
 8006e94:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006e96:	4b7a      	ldr	r3, [pc, #488]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e9c:	099b      	lsrs	r3, r3, #6
 8006e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	fb02 f203 	mul.w	r2, r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eae:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006eb0:	4b73      	ldr	r3, [pc, #460]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eb6:	0a1b      	lsrs	r3, r3, #8
 8006eb8:	f003 031f 	and.w	r3, r3, #31
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec8:	617b      	str	r3, [r7, #20]
        break;
 8006eca:	e03d      	b.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006ecc:	4b6c      	ldr	r3, [pc, #432]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d108      	bne.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ed8:	4b69      	ldr	r3, [pc, #420]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ee0:	4a68      	ldr	r2, [pc, #416]	; (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee6:	613b      	str	r3, [r7, #16]
 8006ee8:	e007      	b.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006eea:	4b65      	ldr	r3, [pc, #404]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ef2:	4a65      	ldr	r2, [pc, #404]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006efa:	4b61      	ldr	r3, [pc, #388]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f00:	0e1b      	lsrs	r3, r3, #24
 8006f02:	f003 030f 	and.w	r3, r3, #15
 8006f06:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006f08:	4b5d      	ldr	r3, [pc, #372]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f0e:	099b      	lsrs	r3, r3, #6
 8006f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	fb02 f203 	mul.w	r2, r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f20:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006f22:	4b57      	ldr	r3, [pc, #348]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f28:	f003 031f 	and.w	r3, r3, #31
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f38:	617b      	str	r3, [r7, #20]
        break;
 8006f3a:	e005      	b.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f3c:	4b53      	ldr	r3, [pc, #332]	; (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006f3e:	617b      	str	r3, [r7, #20]
        break;
 8006f40:	e002      	b.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8006f42:	bf00      	nop
 8006f44:	e000      	b.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8006f46:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f4e:	f040 808c 	bne.w	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006f52:	4b4b      	ldr	r3, [pc, #300]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f58:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006f60:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f68:	d07c      	beq.n	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f70:	d87d      	bhi.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d004      	beq.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f7e:	d039      	beq.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006f80:	e075      	b.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006f82:	4b3f      	ldr	r3, [pc, #252]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d108      	bne.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006f8e:	4b3c      	ldr	r3, [pc, #240]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f96:	4a3b      	ldr	r2, [pc, #236]	; (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f9c:	613b      	str	r3, [r7, #16]
 8006f9e:	e007      	b.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006fa0:	4b37      	ldr	r3, [pc, #220]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fa8:	4a37      	ldr	r2, [pc, #220]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fae:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006fb0:	4b33      	ldr	r3, [pc, #204]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb6:	0e1b      	lsrs	r3, r3, #24
 8006fb8:	f003 030f 	and.w	r3, r3, #15
 8006fbc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006fbe:	4b30      	ldr	r3, [pc, #192]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc4:	099b      	lsrs	r3, r3, #6
 8006fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	fb02 f203 	mul.w	r2, r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006fd8:	4b29      	ldr	r3, [pc, #164]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fde:	0a1b      	lsrs	r3, r3, #8
 8006fe0:	f003 031f 	and.w	r3, r3, #31
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff0:	617b      	str	r3, [r7, #20]
        break;
 8006ff2:	e03d      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006ff4:	4b22      	ldr	r3, [pc, #136]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d108      	bne.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007000:	4b1f      	ldr	r3, [pc, #124]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007008:	4a1e      	ldr	r2, [pc, #120]	; (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800700a:	fbb2 f3f3 	udiv	r3, r2, r3
 800700e:	613b      	str	r3, [r7, #16]
 8007010:	e007      	b.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007012:	4b1b      	ldr	r3, [pc, #108]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800701a:	4a1b      	ldr	r2, [pc, #108]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800701c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007020:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007022:	4b17      	ldr	r3, [pc, #92]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007028:	0e1b      	lsrs	r3, r3, #24
 800702a:	f003 030f 	and.w	r3, r3, #15
 800702e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007030:	4b13      	ldr	r3, [pc, #76]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007036:	099b      	lsrs	r3, r3, #6
 8007038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	fb02 f203 	mul.w	r2, r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	fbb2 f3f3 	udiv	r3, r2, r3
 8007048:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800704a:	4b0d      	ldr	r3, [pc, #52]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800704c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007050:	f003 031f 	and.w	r3, r3, #31
 8007054:	3301      	adds	r3, #1
 8007056:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007060:	617b      	str	r3, [r7, #20]
        break;
 8007062:	e005      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007064:	4b09      	ldr	r3, [pc, #36]	; (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007066:	617b      	str	r3, [r7, #20]
        break;
 8007068:	e002      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800706a:	bf00      	nop
 800706c:	e000      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800706e:	bf00      	nop

  return frequency;
 8007070:	697b      	ldr	r3, [r7, #20]
}
 8007072:	4618      	mov	r0, r3
 8007074:	371c      	adds	r7, #28
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	40023800 	.word	0x40023800
 8007084:	00f42400 	.word	0x00f42400
 8007088:	017d7840 	.word	0x017d7840
 800708c:	00bb8000 	.word	0x00bb8000

08007090 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e081      	b.n	80071a6 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	7f5b      	ldrb	r3, [r3, #29]
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d105      	bne.n	80070b8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7fb f810 	bl	80020d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2202      	movs	r2, #2
 80070bc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	22ca      	movs	r2, #202	; 0xca
 80070c4:	625a      	str	r2, [r3, #36]	; 0x24
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2253      	movs	r2, #83	; 0x53
 80070cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fb16 	bl	8007700 <RTC_EnterInitMode>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d008      	beq.n	80070ec <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	22ff      	movs	r2, #255	; 0xff
 80070e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2204      	movs	r2, #4
 80070e6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e05c      	b.n	80071a6 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6899      	ldr	r1, [r3, #8]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	4b2e      	ldr	r3, [pc, #184]	; (80071b0 <HAL_RTC_Init+0x120>)
 80070f8:	400b      	ands	r3, r1
 80070fa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6899      	ldr	r1, [r3, #8]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	431a      	orrs	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	431a      	orrs	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	68d2      	ldr	r2, [r2, #12]
 8007122:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6919      	ldr	r1, [r3, #16]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	041a      	lsls	r2, r3, #16
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	430a      	orrs	r2, r1
 8007136:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007146:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10e      	bne.n	8007174 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 faaa 	bl	80076b0 <HAL_RTC_WaitForSynchro>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d008      	beq.n	8007174 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	22ff      	movs	r2, #255	; 0xff
 8007168:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2204      	movs	r2, #4
 800716e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e018      	b.n	80071a6 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f022 0208 	bic.w	r2, r2, #8
 8007182:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	699a      	ldr	r2, [r3, #24]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	22ff      	movs	r2, #255	; 0xff
 800719c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80071a4:	2300      	movs	r3, #0
  }
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	ff8fffbf 	.word	0xff8fffbf

080071b4 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80071b4:	b590      	push	{r4, r7, lr}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80071c0:	2300      	movs	r3, #0
 80071c2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	7f1b      	ldrb	r3, [r3, #28]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d101      	bne.n	80071d0 <HAL_RTC_SetTime+0x1c>
 80071cc:	2302      	movs	r3, #2
 80071ce:	e0a8      	b.n	8007322 <HAL_RTC_SetTime+0x16e>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2201      	movs	r2, #1
 80071d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2202      	movs	r2, #2
 80071da:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d126      	bne.n	8007230 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d102      	bne.n	80071f6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2200      	movs	r2, #0
 80071f4:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 faac 	bl	8007758 <RTC_ByteToBcd2>
 8007200:	4603      	mov	r3, r0
 8007202:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	785b      	ldrb	r3, [r3, #1]
 8007208:	4618      	mov	r0, r3
 800720a:	f000 faa5 	bl	8007758 <RTC_ByteToBcd2>
 800720e:	4603      	mov	r3, r0
 8007210:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007212:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	789b      	ldrb	r3, [r3, #2]
 8007218:	4618      	mov	r0, r3
 800721a:	f000 fa9d 	bl	8007758 <RTC_ByteToBcd2>
 800721e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007220:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	7b1b      	ldrb	r3, [r3, #12]
 8007228:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800722a:	4313      	orrs	r3, r2
 800722c:	617b      	str	r3, [r7, #20]
 800722e:	e018      	b.n	8007262 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723a:	2b00      	cmp	r3, #0
 800723c:	d102      	bne.n	8007244 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2200      	movs	r2, #0
 8007242:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	785b      	ldrb	r3, [r3, #1]
 800724e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007250:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007256:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	7b1b      	ldrb	r3, [r3, #12]
 800725c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800725e:	4313      	orrs	r3, r2
 8007260:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	22ca      	movs	r2, #202	; 0xca
 8007268:	625a      	str	r2, [r3, #36]	; 0x24
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2253      	movs	r2, #83	; 0x53
 8007270:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f000 fa44 	bl	8007700 <RTC_EnterInitMode>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00b      	beq.n	8007296 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	22ff      	movs	r2, #255	; 0xff
 8007284:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2204      	movs	r2, #4
 800728a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e045      	b.n	8007322 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	6979      	ldr	r1, [r7, #20]
 800729c:	4b23      	ldr	r3, [pc, #140]	; (800732c <HAL_RTC_SetTime+0x178>)
 800729e:	400b      	ands	r3, r1
 80072a0:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80072b0:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6899      	ldr	r1, [r3, #8]
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	691a      	ldr	r2, [r3, #16]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	431a      	orrs	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68da      	ldr	r2, [r3, #12]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072d8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f003 0320 	and.w	r3, r3, #32
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d111      	bne.n	800730c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f000 f9e1 	bl	80076b0 <HAL_RTC_WaitForSynchro>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00b      	beq.n	800730c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	22ff      	movs	r2, #255	; 0xff
 80072fa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2204      	movs	r2, #4
 8007300:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e00a      	b.n	8007322 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	22ff      	movs	r2, #255	; 0xff
 8007312:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2201      	movs	r2, #1
 8007318:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007320:	2300      	movs	r3, #0
  }
}
 8007322:	4618      	mov	r0, r3
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	bd90      	pop	{r4, r7, pc}
 800732a:	bf00      	nop
 800732c:	007f7f7f 	.word	0x007f7f7f

08007330 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007330:	b590      	push	{r4, r7, lr}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800733c:	2300      	movs	r3, #0
 800733e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	7f1b      	ldrb	r3, [r3, #28]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d101      	bne.n	800734c <HAL_RTC_SetDate+0x1c>
 8007348:	2302      	movs	r3, #2
 800734a:	e092      	b.n	8007472 <HAL_RTC_SetDate+0x142>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2201      	movs	r2, #1
 8007350:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2202      	movs	r2, #2
 8007356:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10e      	bne.n	800737c <HAL_RTC_SetDate+0x4c>
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	785b      	ldrb	r3, [r3, #1]
 8007362:	f003 0310 	and.w	r3, r3, #16
 8007366:	2b00      	cmp	r3, #0
 8007368:	d008      	beq.n	800737c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	785b      	ldrb	r3, [r3, #1]
 800736e:	f023 0310 	bic.w	r3, r3, #16
 8007372:	b2db      	uxtb	r3, r3
 8007374:	330a      	adds	r3, #10
 8007376:	b2da      	uxtb	r2, r3
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d11c      	bne.n	80073bc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	78db      	ldrb	r3, [r3, #3]
 8007386:	4618      	mov	r0, r3
 8007388:	f000 f9e6 	bl	8007758 <RTC_ByteToBcd2>
 800738c:	4603      	mov	r3, r0
 800738e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	785b      	ldrb	r3, [r3, #1]
 8007394:	4618      	mov	r0, r3
 8007396:	f000 f9df 	bl	8007758 <RTC_ByteToBcd2>
 800739a:	4603      	mov	r3, r0
 800739c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800739e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	789b      	ldrb	r3, [r3, #2]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 f9d7 	bl	8007758 <RTC_ByteToBcd2>
 80073aa:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80073ac:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80073b6:	4313      	orrs	r3, r2
 80073b8:	617b      	str	r3, [r7, #20]
 80073ba:	e00e      	b.n	80073da <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	78db      	ldrb	r3, [r3, #3]
 80073c0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	785b      	ldrb	r3, [r3, #1]
 80073c6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80073c8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80073ce:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80073d6:	4313      	orrs	r3, r2
 80073d8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	22ca      	movs	r2, #202	; 0xca
 80073e0:	625a      	str	r2, [r3, #36]	; 0x24
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2253      	movs	r2, #83	; 0x53
 80073e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 f988 	bl	8007700 <RTC_EnterInitMode>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00b      	beq.n	800740e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	22ff      	movs	r2, #255	; 0xff
 80073fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2204      	movs	r2, #4
 8007402:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e031      	b.n	8007472 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	6979      	ldr	r1, [r7, #20]
 8007414:	4b19      	ldr	r3, [pc, #100]	; (800747c <HAL_RTC_SetDate+0x14c>)
 8007416:	400b      	ands	r3, r1
 8007418:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68da      	ldr	r2, [r3, #12]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007428:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f003 0320 	and.w	r3, r3, #32
 8007434:	2b00      	cmp	r3, #0
 8007436:	d111      	bne.n	800745c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 f939 	bl	80076b0 <HAL_RTC_WaitForSynchro>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00b      	beq.n	800745c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	22ff      	movs	r2, #255	; 0xff
 800744a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2204      	movs	r2, #4
 8007450:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e00a      	b.n	8007472 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	22ff      	movs	r2, #255	; 0xff
 8007462:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2201      	movs	r2, #1
 8007468:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007470:	2300      	movs	r3, #0
  }
}
 8007472:	4618      	mov	r0, r3
 8007474:	371c      	adds	r7, #28
 8007476:	46bd      	mov	sp, r7
 8007478:	bd90      	pop	{r4, r7, pc}
 800747a:	bf00      	nop
 800747c:	00ffff3f 	.word	0x00ffff3f

08007480 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007480:	b590      	push	{r4, r7, lr}
 8007482:	b089      	sub	sp, #36	; 0x24
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800748c:	2300      	movs	r3, #0
 800748e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007490:	2300      	movs	r3, #0
 8007492:	61fb      	str	r3, [r7, #28]
 8007494:	2300      	movs	r3, #0
 8007496:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	7f1b      	ldrb	r3, [r3, #28]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d101      	bne.n	80074a4 <HAL_RTC_SetAlarm+0x24>
 80074a0:	2302      	movs	r3, #2
 80074a2:	e101      	b.n	80076a8 <HAL_RTC_SetAlarm+0x228>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2201      	movs	r2, #1
 80074a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2202      	movs	r2, #2
 80074ae:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d137      	bne.n	8007526 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d102      	bne.n	80074ca <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2200      	movs	r2, #0
 80074c8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 f942 	bl	8007758 <RTC_ByteToBcd2>
 80074d4:	4603      	mov	r3, r0
 80074d6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	785b      	ldrb	r3, [r3, #1]
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 f93b 	bl	8007758 <RTC_ByteToBcd2>
 80074e2:	4603      	mov	r3, r0
 80074e4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80074e6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	789b      	ldrb	r3, [r3, #2]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 f933 	bl	8007758 <RTC_ByteToBcd2>
 80074f2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80074f4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	7b1b      	ldrb	r3, [r3, #12]
 80074fc:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80074fe:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007508:	4618      	mov	r0, r3
 800750a:	f000 f925 	bl	8007758 <RTC_ByteToBcd2>
 800750e:	4603      	mov	r3, r0
 8007510:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007512:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800751a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007520:	4313      	orrs	r3, r2
 8007522:	61fb      	str	r3, [r7, #28]
 8007524:	e023      	b.n	800756e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007530:	2b00      	cmp	r3, #0
 8007532:	d102      	bne.n	800753a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2200      	movs	r2, #0
 8007538:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	785b      	ldrb	r3, [r3, #1]
 8007544:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007546:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800754c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	7b1b      	ldrb	r3, [r3, #12]
 8007552:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007554:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800755c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800755e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007564:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800756a:	4313      	orrs	r3, r2
 800756c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	4313      	orrs	r3, r2
 8007578:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	22ca      	movs	r2, #202	; 0xca
 8007580:	625a      	str	r2, [r3, #36]	; 0x24
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2253      	movs	r2, #83	; 0x53
 8007588:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007592:	d13f      	bne.n	8007614 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689a      	ldr	r2, [r3, #8]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075a2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	689a      	ldr	r2, [r3, #8]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075b2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80075b4:	f7fb fa72 	bl	8002a9c <HAL_GetTick>
 80075b8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80075ba:	e013      	b.n	80075e4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80075bc:	f7fb fa6e 	bl	8002a9c <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075ca:	d90b      	bls.n	80075e4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	22ff      	movs	r2, #255	; 0xff
 80075d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2203      	movs	r2, #3
 80075d8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e061      	b.n	80076a8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d0e4      	beq.n	80075bc <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	69fa      	ldr	r2, [r7, #28]
 80075f8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007610:	609a      	str	r2, [r3, #8]
 8007612:	e03e      	b.n	8007692 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689a      	ldr	r2, [r3, #8]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007622:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689a      	ldr	r2, [r3, #8]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007632:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007634:	f7fb fa32 	bl	8002a9c <HAL_GetTick>
 8007638:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800763a:	e013      	b.n	8007664 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800763c:	f7fb fa2e 	bl	8002a9c <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800764a:	d90b      	bls.n	8007664 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	22ff      	movs	r2, #255	; 0xff
 8007652:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2203      	movs	r2, #3
 8007658:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e021      	b.n	80076a8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b00      	cmp	r3, #0
 8007670:	d0e4      	beq.n	800763c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	69fa      	ldr	r2, [r7, #28]
 8007678:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689a      	ldr	r2, [r3, #8]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007690:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	22ff      	movs	r2, #255	; 0xff
 8007698:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2201      	movs	r2, #1
 800769e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3724      	adds	r7, #36	; 0x24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd90      	pop	{r4, r7, pc}

080076b0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80076b8:	2300      	movs	r3, #0
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68da      	ldr	r2, [r3, #12]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80076ca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80076cc:	f7fb f9e6 	bl	8002a9c <HAL_GetTick>
 80076d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80076d2:	e009      	b.n	80076e8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80076d4:	f7fb f9e2 	bl	8002a9c <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076e2:	d901      	bls.n	80076e8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e007      	b.n	80076f8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	f003 0320 	and.w	r3, r3, #32
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0ee      	beq.n	80076d4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007708:	2300      	movs	r3, #0
 800770a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007716:	2b00      	cmp	r3, #0
 8007718:	d119      	bne.n	800774e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007722:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007724:	f7fb f9ba 	bl	8002a9c <HAL_GetTick>
 8007728:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800772a:	e009      	b.n	8007740 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800772c:	f7fb f9b6 	bl	8002a9c <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800773a:	d901      	bls.n	8007740 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	e007      	b.n	8007750 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0ee      	beq.n	800772c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	4603      	mov	r3, r0
 8007760:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007762:	2300      	movs	r3, #0
 8007764:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8007766:	e005      	b.n	8007774 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3301      	adds	r3, #1
 800776c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800776e:	79fb      	ldrb	r3, [r7, #7]
 8007770:	3b0a      	subs	r3, #10
 8007772:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007774:	79fb      	ldrb	r3, [r7, #7]
 8007776:	2b09      	cmp	r3, #9
 8007778:	d8f6      	bhi.n	8007768 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	b2db      	uxtb	r3, r3
 800777e:	011b      	lsls	r3, r3, #4
 8007780:	b2da      	uxtb	r2, r3
 8007782:	79fb      	ldrb	r3, [r7, #7]
 8007784:	4313      	orrs	r3, r2
 8007786:	b2db      	uxtb	r3, r3
}
 8007788:	4618      	mov	r0, r3
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007794:	b480      	push	{r7}
 8007796:	b087      	sub	sp, #28
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80077a0:	2300      	movs	r3, #0
 80077a2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	7f1b      	ldrb	r3, [r3, #28]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d101      	bne.n	80077b0 <HAL_RTCEx_SetTimeStamp+0x1c>
 80077ac:	2302      	movs	r3, #2
 80077ae:	e03e      	b.n	800782e <HAL_RTCEx_SetTimeStamp+0x9a>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2201      	movs	r2, #1
 80077b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2202      	movs	r2, #2
 80077ba:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689a      	ldr	r2, [r3, #8]
 80077c2:	4b1e      	ldr	r3, [pc, #120]	; (800783c <HAL_RTCEx_SetTimeStamp+0xa8>)
 80077c4:	4013      	ands	r3, r2
 80077c6:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	22ca      	movs	r2, #202	; 0xca
 80077d6:	625a      	str	r2, [r3, #36]	; 0x24
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2253      	movs	r2, #83	; 0x53
 80077de:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 0206 	bic.w	r2, r2, #6
 80077ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689a      	ldr	r2, [r3, #8]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007816:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	22ff      	movs	r2, #255	; 0xff
 800781e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2201      	movs	r2, #1
 8007824:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	371c      	adds	r7, #28
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	fffff7f7 	.word	0xfffff7f7

08007840 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b088      	sub	sp, #32
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007848:	2300      	movs	r3, #0
 800784a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800784c:	2300      	movs	r3, #0
 800784e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007850:	2300      	movs	r3, #0
 8007852:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d101      	bne.n	800785e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e156      	b.n	8007b0c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d106      	bne.n	8007878 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7fa ff6a 	bl	800274c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f95b 	bl	8007b3c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	2b02      	cmp	r3, #2
 800788c:	d00c      	beq.n	80078a8 <HAL_SAI_Init+0x68>
 800788e:	2b02      	cmp	r3, #2
 8007890:	d80d      	bhi.n	80078ae <HAL_SAI_Init+0x6e>
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <HAL_SAI_Init+0x5c>
 8007896:	2b01      	cmp	r3, #1
 8007898:	d003      	beq.n	80078a2 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800789a:	e008      	b.n	80078ae <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800789c:	2300      	movs	r3, #0
 800789e:	61fb      	str	r3, [r7, #28]
      break;
 80078a0:	e006      	b.n	80078b0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80078a2:	2310      	movs	r3, #16
 80078a4:	61fb      	str	r3, [r7, #28]
      break;
 80078a6:	e003      	b.n	80078b0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80078a8:	2320      	movs	r3, #32
 80078aa:	61fb      	str	r3, [r7, #28]
      break;
 80078ac:	e000      	b.n	80078b0 <HAL_SAI_Init+0x70>
      break;
 80078ae:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	d81e      	bhi.n	80078f6 <HAL_SAI_Init+0xb6>
 80078b8:	a201      	add	r2, pc, #4	; (adr r2, 80078c0 <HAL_SAI_Init+0x80>)
 80078ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078be:	bf00      	nop
 80078c0:	080078d1 	.word	0x080078d1
 80078c4:	080078d7 	.word	0x080078d7
 80078c8:	080078df 	.word	0x080078df
 80078cc:	080078e7 	.word	0x080078e7
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80078d0:	2300      	movs	r3, #0
 80078d2:	617b      	str	r3, [r7, #20]
    }
    break;
 80078d4:	e010      	b.n	80078f8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80078d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078da:	617b      	str	r3, [r7, #20]
    }
    break;
 80078dc:	e00c      	b.n	80078f8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80078de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078e2:	617b      	str	r3, [r7, #20]
    }
    break;
 80078e4:	e008      	b.n	80078f8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80078e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078ea:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	f043 0301 	orr.w	r3, r3, #1
 80078f2:	61fb      	str	r3, [r7, #28]
    }
    break;
 80078f4:	e000      	b.n	80078f8 <HAL_SAI_Init+0xb8>
    default:
      break;
 80078f6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a85      	ldr	r2, [pc, #532]	; (8007b14 <HAL_SAI_Init+0x2d4>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d004      	beq.n	800790c <HAL_SAI_Init+0xcc>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a84      	ldr	r2, [pc, #528]	; (8007b18 <HAL_SAI_Init+0x2d8>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d103      	bne.n	8007914 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800790c:	4a83      	ldr	r2, [pc, #524]	; (8007b1c <HAL_SAI_Init+0x2dc>)
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	6013      	str	r3, [r2, #0]
 8007912:	e002      	b.n	800791a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007914:	4a82      	ldr	r2, [pc, #520]	; (8007b20 <HAL_SAI_Init+0x2e0>)
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d04c      	beq.n	80079bc <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8007922:	2300      	movs	r3, #0
 8007924:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a7a      	ldr	r2, [pc, #488]	; (8007b14 <HAL_SAI_Init+0x2d4>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d004      	beq.n	800793a <HAL_SAI_Init+0xfa>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a78      	ldr	r2, [pc, #480]	; (8007b18 <HAL_SAI_Init+0x2d8>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d104      	bne.n	8007944 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800793a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800793e:	f7ff fa63 	bl	8006e08 <HAL_RCCEx_GetPeriphCLKFreq>
 8007942:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a76      	ldr	r2, [pc, #472]	; (8007b24 <HAL_SAI_Init+0x2e4>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d004      	beq.n	8007958 <HAL_SAI_Init+0x118>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a75      	ldr	r2, [pc, #468]	; (8007b28 <HAL_SAI_Init+0x2e8>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d104      	bne.n	8007962 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007958:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800795c:	f7ff fa54 	bl	8006e08 <HAL_RCCEx_GetPeriphCLKFreq>
 8007960:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	4613      	mov	r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	4413      	add	r3, r2
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	461a      	mov	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	025b      	lsls	r3, r3, #9
 8007974:	fbb2 f3f3 	udiv	r3, r2, r3
 8007978:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4a6b      	ldr	r2, [pc, #428]	; (8007b2c <HAL_SAI_Init+0x2ec>)
 800797e:	fba2 2303 	umull	r2, r3, r2, r3
 8007982:	08da      	lsrs	r2, r3, #3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8007988:	68f9      	ldr	r1, [r7, #12]
 800798a:	4b68      	ldr	r3, [pc, #416]	; (8007b2c <HAL_SAI_Init+0x2ec>)
 800798c:	fba3 2301 	umull	r2, r3, r3, r1
 8007990:	08da      	lsrs	r2, r3, #3
 8007992:	4613      	mov	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	005b      	lsls	r3, r3, #1
 800799a:	1aca      	subs	r2, r1, r3
 800799c:	2a08      	cmp	r2, #8
 800799e:	d904      	bls.n	80079aa <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	1c5a      	adds	r2, r3, #1
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ae:	2b04      	cmp	r3, #4
 80079b0:	d104      	bne.n	80079bc <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	085a      	lsrs	r2, r3, #1
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d003      	beq.n	80079cc <HAL_SAI_Init+0x18c>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d109      	bne.n	80079e0 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d101      	bne.n	80079d8 <HAL_SAI_Init+0x198>
 80079d4:	2300      	movs	r3, #0
 80079d6:	e001      	b.n	80079dc <HAL_SAI_Init+0x19c>
 80079d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079dc:	61bb      	str	r3, [r7, #24]
 80079de:	e008      	b.n	80079f2 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d102      	bne.n	80079ee <HAL_SAI_Init+0x1ae>
 80079e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079ec:	e000      	b.n	80079f0 <HAL_SAI_Init+0x1b0>
 80079ee:	2300      	movs	r3, #0
 80079f0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	6819      	ldr	r1, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	4b4c      	ldr	r3, [pc, #304]	; (8007b30 <HAL_SAI_Init+0x2f0>)
 80079fe:	400b      	ands	r3, r1
 8007a00:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6819      	ldr	r1, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a10:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a16:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8007a2a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a36:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a1b      	ldr	r3, [r3, #32]
 8007a3c:	051b      	lsls	r3, r3, #20
 8007a3e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6859      	ldr	r1, [r3, #4]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	4b38      	ldr	r3, [pc, #224]	; (8007b34 <HAL_SAI_Init+0x2f4>)
 8007a54:	400b      	ands	r3, r1
 8007a56:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6859      	ldr	r1, [r3, #4]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	699a      	ldr	r2, [r3, #24]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a66:	431a      	orrs	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6c:	431a      	orrs	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	430a      	orrs	r2, r1
 8007a74:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6899      	ldr	r1, [r3, #8]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	4b2d      	ldr	r3, [pc, #180]	; (8007b38 <HAL_SAI_Init+0x2f8>)
 8007a82:	400b      	ands	r3, r1
 8007a84:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	6899      	ldr	r1, [r3, #8]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a90:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007a96:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8007a9c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8007aa2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007aac:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68d9      	ldr	r1, [r3, #12]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007ac4:	400b      	ands	r3, r1
 8007ac6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68d9      	ldr	r1, [r3, #12]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad6:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007adc:	041b      	lsls	r3, r3, #16
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	021b      	lsls	r3, r3, #8
 8007ae8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3720      	adds	r7, #32
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	40015804 	.word	0x40015804
 8007b18:	40015824 	.word	0x40015824
 8007b1c:	40015800 	.word	0x40015800
 8007b20:	40015c00 	.word	0x40015c00
 8007b24:	40015c04 	.word	0x40015c04
 8007b28:	40015c24 	.word	0x40015c24
 8007b2c:	cccccccd 	.word	0xcccccccd
 8007b30:	ff05c010 	.word	0xff05c010
 8007b34:	ffff1ff0 	.word	0xffff1ff0
 8007b38:	fff88000 	.word	0xfff88000

08007b3c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8007b44:	4b17      	ldr	r3, [pc, #92]	; (8007ba4 <SAI_Disable+0x68>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a17      	ldr	r2, [pc, #92]	; (8007ba8 <SAI_Disable+0x6c>)
 8007b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4e:	0b1b      	lsrs	r3, r3, #12
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007b66:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	1e5a      	subs	r2, r3, #1
 8007b6c:	60fa      	str	r2, [r7, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10a      	bne.n	8007b88 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	72fb      	strb	r3, [r7, #11]
      break;
 8007b86:	e006      	b.n	8007b96 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1e8      	bne.n	8007b68 <SAI_Disable+0x2c>

  return status;
 8007b96:	7afb      	ldrb	r3, [r7, #11]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr
 8007ba4:	20000000 	.word	0x20000000
 8007ba8:	95cbec1b 	.word	0x95cbec1b

08007bac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e022      	b.n	8007c04 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d105      	bne.n	8007bd6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f7fa fa9b 	bl	800210c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2203      	movs	r2, #3
 8007bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f814 	bl	8007c0c <HAL_SD_InitCard>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e00a      	b.n	8007c04 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007c0c:	b5b0      	push	{r4, r5, r7, lr}
 8007c0e:	b08e      	sub	sp, #56	; 0x38
 8007c10:	af04      	add	r7, sp, #16
 8007c12:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007c14:	2300      	movs	r3, #0
 8007c16:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007c20:	2300      	movs	r3, #0
 8007c22:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007c24:	2300      	movs	r3, #0
 8007c26:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007c28:	2376      	movs	r3, #118	; 0x76
 8007c2a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681d      	ldr	r5, [r3, #0]
 8007c30:	466c      	mov	r4, sp
 8007c32:	f107 0314 	add.w	r3, r7, #20
 8007c36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007c3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007c3e:	f107 0308 	add.w	r3, r7, #8
 8007c42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c44:	4628      	mov	r0, r5
 8007c46:	f003 f8d9 	bl	800adfc <SDMMC_Init>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e056      	b.n	8007d0a <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c6a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f003 f90d 	bl	800ae90 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c84:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 ff00 	bl	8008a8c <SD_PowerON>
 8007c8c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00b      	beq.n	8007cac <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e02e      	b.n	8007d0a <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fe21 	bl	80088f4 <SD_InitCard>
 8007cb2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00b      	beq.n	8007cd2 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e01b      	b.n	8007d0a <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f003 f96c 	bl	800afb8 <SDMMC_CmdBlockLength>
 8007ce0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00f      	beq.n	8007d08 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a09      	ldr	r2, [pc, #36]	; (8007d14 <HAL_SD_InitCard+0x108>)
 8007cee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e000      	b.n	8007d0a <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3728      	adds	r7, #40	; 0x28
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bdb0      	pop	{r4, r5, r7, pc}
 8007d12:	bf00      	nop
 8007d14:	004005ff 	.word	0x004005ff

08007d18 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b092      	sub	sp, #72	; 0x48
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
 8007d24:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007d26:	f7fa feb9 	bl	8002a9c <HAL_GetTick>
 8007d2a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d107      	bne.n	8007d4a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e1bd      	b.n	80080c6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	f040 81b0 	bne.w	80080b8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007d5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	441a      	add	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d907      	bls.n	8007d7c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d70:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e1a4      	b.n	80080c6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2203      	movs	r2, #3
 8007d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d002      	beq.n	8007d9a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d96:	025b      	lsls	r3, r3, #9
 8007d98:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d9e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	025b      	lsls	r3, r3, #9
 8007da4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007da6:	2390      	movs	r3, #144	; 0x90
 8007da8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007daa:	2302      	movs	r3, #2
 8007dac:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007db2:	2301      	movs	r3, #1
 8007db4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f107 0214 	add.w	r2, r7, #20
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f003 f8cd 	bl	800af60 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d90a      	bls.n	8007de2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f003 f931 	bl	800b040 <SDMMC_CmdReadMultiBlock>
 8007dde:	6478      	str	r0, [r7, #68]	; 0x44
 8007de0:	e009      	b.n	8007df6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2201      	movs	r2, #1
 8007de6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dee:	4618      	mov	r0, r3
 8007df0:	f003 f904 	bl	800affc <SDMMC_CmdReadSingleBlock>
 8007df4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d012      	beq.n	8007e22 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a7a      	ldr	r2, [pc, #488]	; (8007fec <HAL_SD_ReadBlocks+0x2d4>)
 8007e02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e151      	b.n	80080c6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007e26:	e061      	b.n	8007eec <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d03c      	beq.n	8007eb0 <HAL_SD_ReadBlocks+0x198>
 8007e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d039      	beq.n	8007eb0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	643b      	str	r3, [r7, #64]	; 0x40
 8007e40:	e033      	b.n	8007eaa <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f003 f804 	bl	800ae54 <SDMMC_ReadFIFO>
 8007e4c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e54:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e58:	3301      	adds	r3, #1
 8007e5a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e64:	0a1b      	lsrs	r3, r3, #8
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e6a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e6e:	3301      	adds	r3, #1
 8007e70:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e74:	3b01      	subs	r3, #1
 8007e76:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7a:	0c1b      	lsrs	r3, r3, #16
 8007e7c:	b2da      	uxtb	r2, r3
 8007e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e80:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e84:	3301      	adds	r3, #1
 8007e86:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e90:	0e1b      	lsrs	r3, r3, #24
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e96:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8007ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	643b      	str	r3, [r7, #64]	; 0x40
 8007eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eac:	2b07      	cmp	r3, #7
 8007eae:	d9c8      	bls.n	8007e42 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007eb0:	f7fa fdf4 	bl	8002a9c <HAL_GetTick>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d902      	bls.n	8007ec6 <HAL_SD_ReadBlocks+0x1ae>
 8007ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d112      	bne.n	8007eec <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a48      	ldr	r2, [pc, #288]	; (8007fec <HAL_SD_ReadBlocks+0x2d4>)
 8007ecc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e0ec      	b.n	80080c6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d096      	beq.n	8007e28 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d022      	beq.n	8007f4e <HAL_SD_ReadBlocks+0x236>
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d91f      	bls.n	8007f4e <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d01b      	beq.n	8007f4e <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f003 f8f6 	bl	800b10c <SDMMC_CmdStopTransfer>
 8007f20:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d012      	beq.n	8007f4e <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a2f      	ldr	r2, [pc, #188]	; (8007fec <HAL_SD_ReadBlocks+0x2d4>)
 8007f2e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f36:	431a      	orrs	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e0bb      	b.n	80080c6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f54:	f003 0308 	and.w	r3, r3, #8
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d012      	beq.n	8007f82 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a22      	ldr	r2, [pc, #136]	; (8007fec <HAL_SD_ReadBlocks+0x2d4>)
 8007f62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f68:	f043 0208 	orr.w	r2, r3, #8
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e0a1      	b.n	80080c6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f88:	f003 0302 	and.w	r3, r3, #2
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d012      	beq.n	8007fb6 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a15      	ldr	r2, [pc, #84]	; (8007fec <HAL_SD_ReadBlocks+0x2d4>)
 8007f96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9c:	f043 0202 	orr.w	r2, r3, #2
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e087      	b.n	80080c6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fbc:	f003 0320 	and.w	r3, r3, #32
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d064      	beq.n	800808e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a08      	ldr	r2, [pc, #32]	; (8007fec <HAL_SD_ReadBlocks+0x2d4>)
 8007fca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd0:	f043 0220 	orr.w	r2, r3, #32
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e06d      	b.n	80080c6 <HAL_SD_ReadBlocks+0x3ae>
 8007fea:	bf00      	nop
 8007fec:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f002 ff2d 	bl	800ae54 <SDMMC_ReadFIFO>
 8007ffa:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8007ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008002:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008006:	3301      	adds	r3, #1
 8008008:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800800a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800800c:	3b01      	subs	r3, #1
 800800e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008012:	0a1b      	lsrs	r3, r3, #8
 8008014:	b2da      	uxtb	r2, r3
 8008016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008018:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800801a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800801c:	3301      	adds	r3, #1
 800801e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008022:	3b01      	subs	r3, #1
 8008024:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008028:	0c1b      	lsrs	r3, r3, #16
 800802a:	b2da      	uxtb	r2, r3
 800802c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008032:	3301      	adds	r3, #1
 8008034:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008038:	3b01      	subs	r3, #1
 800803a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800803c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803e:	0e1b      	lsrs	r3, r3, #24
 8008040:	b2da      	uxtb	r2, r3
 8008042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008044:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008048:	3301      	adds	r3, #1
 800804a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800804c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800804e:	3b01      	subs	r3, #1
 8008050:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008052:	f7fa fd23 	bl	8002a9c <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800805e:	429a      	cmp	r2, r3
 8008060:	d902      	bls.n	8008068 <HAL_SD_ReadBlocks+0x350>
 8008062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008064:	2b00      	cmp	r3, #0
 8008066:	d112      	bne.n	800808e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a18      	ldr	r2, [pc, #96]	; (80080d0 <HAL_SD_ReadBlocks+0x3b8>)
 800806e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008074:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e01b      	b.n	80080c6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008098:	2b00      	cmp	r3, #0
 800809a:	d002      	beq.n	80080a2 <HAL_SD_ReadBlocks+0x38a>
 800809c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1a6      	bne.n	8007ff0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f240 523a 	movw	r2, #1338	; 0x53a
 80080aa:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	e006      	b.n	80080c6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
  }
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3748      	adds	r7, #72	; 0x48
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	004005ff 	.word	0x004005ff

080080d4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b092      	sub	sp, #72	; 0x48
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
 80080e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80080e2:	f7fa fcdb 	bl	8002a9c <HAL_GetTick>
 80080e6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d107      	bne.n	8008106 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e165      	b.n	80083d2 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b01      	cmp	r3, #1
 8008110:	f040 8158 	bne.w	80083c4 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800811a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	441a      	add	r2, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008124:	429a      	cmp	r2, r3
 8008126:	d907      	bls.n	8008138 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e14c      	b.n	80083d2 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2203      	movs	r2, #3
 800813c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2200      	movs	r2, #0
 8008146:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800814c:	2b01      	cmp	r3, #1
 800814e:	d002      	beq.n	8008156 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008152:	025b      	lsls	r3, r3, #9
 8008154:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800815a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	025b      	lsls	r3, r3, #9
 8008160:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008162:	2390      	movs	r3, #144	; 0x90
 8008164:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008166:	2300      	movs	r3, #0
 8008168:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800816a:	2300      	movs	r3, #0
 800816c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800816e:	2301      	movs	r3, #1
 8008170:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f107 0218 	add.w	r2, r7, #24
 800817a:	4611      	mov	r1, r2
 800817c:	4618      	mov	r0, r3
 800817e:	f002 feef 	bl	800af60 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d90a      	bls.n	800819e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2220      	movs	r2, #32
 800818c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008194:	4618      	mov	r0, r3
 8008196:	f002 ff97 	bl	800b0c8 <SDMMC_CmdWriteMultiBlock>
 800819a:	6478      	str	r0, [r7, #68]	; 0x44
 800819c:	e009      	b.n	80081b2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2210      	movs	r2, #16
 80081a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081aa:	4618      	mov	r0, r3
 80081ac:	f002 ff6a 	bl	800b084 <SDMMC_CmdWriteSingleBlock>
 80081b0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80081b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d012      	beq.n	80081de <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a87      	ldr	r2, [pc, #540]	; (80083dc <HAL_SD_WriteBlocks+0x308>)
 80081be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081c6:	431a      	orrs	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e0f9      	b.n	80083d2 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80081e2:	e065      	b.n	80082b0 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d040      	beq.n	8008274 <HAL_SD_WriteBlocks+0x1a0>
 80081f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d03d      	beq.n	8008274 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80081f8:	2300      	movs	r3, #0
 80081fa:	643b      	str	r3, [r7, #64]	; 0x40
 80081fc:	e037      	b.n	800826e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80081fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008206:	3301      	adds	r3, #1
 8008208:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800820a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800820c:	3b01      	subs	r3, #1
 800820e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	021a      	lsls	r2, r3, #8
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	4313      	orrs	r3, r2
 800821a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800821c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800821e:	3301      	adds	r3, #1
 8008220:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008224:	3b01      	subs	r3, #1
 8008226:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	041a      	lsls	r2, r3, #16
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	4313      	orrs	r3, r2
 8008232:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008236:	3301      	adds	r3, #1
 8008238:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800823a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800823c:	3b01      	subs	r3, #1
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	061a      	lsls	r2, r3, #24
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	4313      	orrs	r3, r2
 800824a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800824c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800824e:	3301      	adds	r3, #1
 8008250:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008254:	3b01      	subs	r3, #1
 8008256:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f107 0214 	add.w	r2, r7, #20
 8008260:	4611      	mov	r1, r2
 8008262:	4618      	mov	r0, r3
 8008264:	f002 fe03 	bl	800ae6e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800826a:	3301      	adds	r3, #1
 800826c:	643b      	str	r3, [r7, #64]	; 0x40
 800826e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008270:	2b07      	cmp	r3, #7
 8008272:	d9c4      	bls.n	80081fe <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008274:	f7fa fc12 	bl	8002a9c <HAL_GetTick>
 8008278:	4602      	mov	r2, r0
 800827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008280:	429a      	cmp	r2, r3
 8008282:	d902      	bls.n	800828a <HAL_SD_WriteBlocks+0x1b6>
 8008284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008286:	2b00      	cmp	r3, #0
 8008288:	d112      	bne.n	80082b0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a53      	ldr	r2, [pc, #332]	; (80083dc <HAL_SD_WriteBlocks+0x308>)
 8008290:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008298:	431a      	orrs	r2, r3
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e090      	b.n	80083d2 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082b6:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d092      	beq.n	80081e4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d022      	beq.n	8008312 <HAL_SD_WriteBlocks+0x23e>
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d91f      	bls.n	8008312 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d01b      	beq.n	8008312 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4618      	mov	r0, r3
 80082e0:	f002 ff14 	bl	800b10c <SDMMC_CmdStopTransfer>
 80082e4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80082e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d012      	beq.n	8008312 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a3a      	ldr	r2, [pc, #232]	; (80083dc <HAL_SD_WriteBlocks+0x308>)
 80082f2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082fa:	431a      	orrs	r2, r3
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e05f      	b.n	80083d2 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008318:	f003 0308 	and.w	r3, r3, #8
 800831c:	2b00      	cmp	r3, #0
 800831e:	d012      	beq.n	8008346 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a2d      	ldr	r2, [pc, #180]	; (80083dc <HAL_SD_WriteBlocks+0x308>)
 8008326:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832c:	f043 0208 	orr.w	r2, r3, #8
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e045      	b.n	80083d2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800834c:	f003 0302 	and.w	r3, r3, #2
 8008350:	2b00      	cmp	r3, #0
 8008352:	d012      	beq.n	800837a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a20      	ldr	r2, [pc, #128]	; (80083dc <HAL_SD_WriteBlocks+0x308>)
 800835a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008360:	f043 0202 	orr.w	r2, r3, #2
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e02b      	b.n	80083d2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008380:	f003 0310 	and.w	r3, r3, #16
 8008384:	2b00      	cmp	r3, #0
 8008386:	d012      	beq.n	80083ae <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a13      	ldr	r2, [pc, #76]	; (80083dc <HAL_SD_WriteBlocks+0x308>)
 800838e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008394:	f043 0210 	orr.w	r2, r3, #16
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e011      	b.n	80083d2 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f240 523a 	movw	r2, #1338	; 0x53a
 80083b6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	e006      	b.n	80083d2 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
  }
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3748      	adds	r7, #72	; 0x48
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	004005ff 	.word	0x004005ff

080083e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083ee:	0f9b      	lsrs	r3, r3, #30
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083fa:	0e9b      	lsrs	r3, r3, #26
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	f003 030f 	and.w	r3, r3, #15
 8008402:	b2da      	uxtb	r2, r3
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800840c:	0e1b      	lsrs	r3, r3, #24
 800840e:	b2db      	uxtb	r3, r3
 8008410:	f003 0303 	and.w	r3, r3, #3
 8008414:	b2da      	uxtb	r2, r3
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800841e:	0c1b      	lsrs	r3, r3, #16
 8008420:	b2da      	uxtb	r2, r3
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800842a:	0a1b      	lsrs	r3, r3, #8
 800842c:	b2da      	uxtb	r2, r3
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008436:	b2da      	uxtb	r2, r3
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008440:	0d1b      	lsrs	r3, r3, #20
 8008442:	b29a      	uxth	r2, r3
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800844c:	0c1b      	lsrs	r3, r3, #16
 800844e:	b2db      	uxtb	r3, r3
 8008450:	f003 030f 	and.w	r3, r3, #15
 8008454:	b2da      	uxtb	r2, r3
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800845e:	0bdb      	lsrs	r3, r3, #15
 8008460:	b2db      	uxtb	r3, r3
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	b2da      	uxtb	r2, r3
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008470:	0b9b      	lsrs	r3, r3, #14
 8008472:	b2db      	uxtb	r3, r3
 8008474:	f003 0301 	and.w	r3, r3, #1
 8008478:	b2da      	uxtb	r2, r3
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008482:	0b5b      	lsrs	r3, r3, #13
 8008484:	b2db      	uxtb	r3, r3
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	b2da      	uxtb	r2, r3
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008494:	0b1b      	lsrs	r3, r3, #12
 8008496:	b2db      	uxtb	r3, r3
 8008498:	f003 0301 	and.w	r3, r3, #1
 800849c:	b2da      	uxtb	r2, r3
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2200      	movs	r2, #0
 80084a6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d163      	bne.n	8008578 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084b4:	009a      	lsls	r2, r3, #2
 80084b6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80084ba:	4013      	ands	r3, r2
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80084c0:	0f92      	lsrs	r2, r2, #30
 80084c2:	431a      	orrs	r2, r3
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084cc:	0edb      	lsrs	r3, r3, #27
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	f003 0307 	and.w	r3, r3, #7
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084de:	0e1b      	lsrs	r3, r3, #24
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	f003 0307 	and.w	r3, r3, #7
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084f0:	0d5b      	lsrs	r3, r3, #21
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	f003 0307 	and.w	r3, r3, #7
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008502:	0c9b      	lsrs	r3, r3, #18
 8008504:	b2db      	uxtb	r3, r3
 8008506:	f003 0307 	and.w	r3, r3, #7
 800850a:	b2da      	uxtb	r2, r3
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008514:	0bdb      	lsrs	r3, r3, #15
 8008516:	b2db      	uxtb	r3, r3
 8008518:	f003 0307 	and.w	r3, r3, #7
 800851c:	b2da      	uxtb	r2, r3
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	1c5a      	adds	r2, r3, #1
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	7e1b      	ldrb	r3, [r3, #24]
 8008530:	b2db      	uxtb	r3, r3
 8008532:	f003 0307 	and.w	r3, r3, #7
 8008536:	3302      	adds	r3, #2
 8008538:	2201      	movs	r2, #1
 800853a:	fa02 f303 	lsl.w	r3, r2, r3
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008542:	fb02 f203 	mul.w	r2, r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	7a1b      	ldrb	r3, [r3, #8]
 800854e:	b2db      	uxtb	r3, r3
 8008550:	f003 030f 	and.w	r3, r3, #15
 8008554:	2201      	movs	r2, #1
 8008556:	409a      	lsls	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008564:	0a52      	lsrs	r2, r2, #9
 8008566:	fb02 f203 	mul.w	r2, r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008574:	661a      	str	r2, [r3, #96]	; 0x60
 8008576:	e031      	b.n	80085dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800857c:	2b01      	cmp	r3, #1
 800857e:	d11d      	bne.n	80085bc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008584:	041b      	lsls	r3, r3, #16
 8008586:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800858e:	0c1b      	lsrs	r3, r3, #16
 8008590:	431a      	orrs	r2, r3
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	3301      	adds	r3, #1
 800859c:	029a      	lsls	r2, r3, #10
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085b0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	661a      	str	r2, [r3, #96]	; 0x60
 80085ba:	e00f      	b.n	80085dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a58      	ldr	r2, [pc, #352]	; (8008724 <HAL_SD_GetCardCSD+0x344>)
 80085c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	e09d      	b.n	8008718 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085e0:	0b9b      	lsrs	r3, r3, #14
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	b2da      	uxtb	r2, r3
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085f2:	09db      	lsrs	r3, r3, #7
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085fa:	b2da      	uxtb	r2, r3
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008604:	b2db      	uxtb	r3, r3
 8008606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800860a:	b2da      	uxtb	r2, r3
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008614:	0fdb      	lsrs	r3, r3, #31
 8008616:	b2da      	uxtb	r2, r3
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008620:	0f5b      	lsrs	r3, r3, #29
 8008622:	b2db      	uxtb	r3, r3
 8008624:	f003 0303 	and.w	r3, r3, #3
 8008628:	b2da      	uxtb	r2, r3
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008632:	0e9b      	lsrs	r3, r3, #26
 8008634:	b2db      	uxtb	r3, r3
 8008636:	f003 0307 	and.w	r3, r3, #7
 800863a:	b2da      	uxtb	r2, r3
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008644:	0d9b      	lsrs	r3, r3, #22
 8008646:	b2db      	uxtb	r3, r3
 8008648:	f003 030f 	and.w	r3, r3, #15
 800864c:	b2da      	uxtb	r2, r3
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008656:	0d5b      	lsrs	r3, r3, #21
 8008658:	b2db      	uxtb	r3, r3
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	b2da      	uxtb	r2, r3
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008672:	0c1b      	lsrs	r3, r3, #16
 8008674:	b2db      	uxtb	r3, r3
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	b2da      	uxtb	r2, r3
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008686:	0bdb      	lsrs	r3, r3, #15
 8008688:	b2db      	uxtb	r3, r3
 800868a:	f003 0301 	and.w	r3, r3, #1
 800868e:	b2da      	uxtb	r2, r3
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869a:	0b9b      	lsrs	r3, r3, #14
 800869c:	b2db      	uxtb	r3, r3
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	b2da      	uxtb	r2, r3
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ae:	0b5b      	lsrs	r3, r3, #13
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c2:	0b1b      	lsrs	r3, r3, #12
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	f003 0301 	and.w	r3, r3, #1
 80086ca:	b2da      	uxtb	r2, r3
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d6:	0a9b      	lsrs	r3, r3, #10
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	f003 0303 	and.w	r3, r3, #3
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ea:	0a1b      	lsrs	r3, r3, #8
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	f003 0303 	and.w	r3, r3, #3
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086fe:	085b      	lsrs	r3, r3, #1
 8008700:	b2db      	uxtb	r3, r3
 8008702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008706:	b2da      	uxtb	r2, r3
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr
 8008724:	004005ff 	.word	0x004005ff

08008728 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008780:	b5b0      	push	{r4, r5, r7, lr}
 8008782:	b08e      	sub	sp, #56	; 0x38
 8008784:	af04      	add	r7, sp, #16
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2203      	movs	r2, #3
 8008794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800879c:	2b03      	cmp	r3, #3
 800879e:	d02e      	beq.n	80087fe <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087a6:	d106      	bne.n	80087b6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	639a      	str	r2, [r3, #56]	; 0x38
 80087b4:	e029      	b.n	800880a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087bc:	d10a      	bne.n	80087d4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fa1a 	bl	8008bf8 <SD_WideBus_Enable>
 80087c4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087ca:	6a3b      	ldr	r3, [r7, #32]
 80087cc:	431a      	orrs	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	639a      	str	r2, [r3, #56]	; 0x38
 80087d2:	e01a      	b.n	800880a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10a      	bne.n	80087f0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fa57 	bl	8008c8e <SD_WideBus_Disable>
 80087e0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	431a      	orrs	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	639a      	str	r2, [r3, #56]	; 0x38
 80087ee:	e00c      	b.n	800880a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	639a      	str	r2, [r3, #56]	; 0x38
 80087fc:	e005      	b.n	800880a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008802:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00b      	beq.n	800882a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a26      	ldr	r2, [pc, #152]	; (80088b0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008818:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008828:	e01f      	b.n	800886a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681d      	ldr	r5, [r3, #0]
 8008850:	466c      	mov	r4, sp
 8008852:	f107 0314 	add.w	r3, r7, #20
 8008856:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800885a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800885e:	f107 0308 	add.w	r3, r7, #8
 8008862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008864:	4628      	mov	r0, r5
 8008866:	f002 fac9 	bl	800adfc <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008872:	4618      	mov	r0, r3
 8008874:	f002 fba0 	bl	800afb8 <SDMMC_CmdBlockLength>
 8008878:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800887a:	6a3b      	ldr	r3, [r7, #32]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00c      	beq.n	800889a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a0a      	ldr	r2, [pc, #40]	; (80088b0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008886:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	431a      	orrs	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80088a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3728      	adds	r7, #40	; 0x28
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bdb0      	pop	{r4, r5, r7, pc}
 80088ae:	bf00      	nop
 80088b0:	004005ff 	.word	0x004005ff

080088b4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80088bc:	2300      	movs	r3, #0
 80088be:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80088c0:	f107 030c 	add.w	r3, r7, #12
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f96e 	bl	8008ba8 <SD_SendStatus>
 80088cc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d005      	beq.n	80088e0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	431a      	orrs	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	0a5b      	lsrs	r3, r3, #9
 80088e4:	f003 030f 	and.w	r3, r3, #15
 80088e8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80088ea:	693b      	ldr	r3, [r7, #16]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80088f4:	b5b0      	push	{r4, r5, r7, lr}
 80088f6:	b094      	sub	sp, #80	; 0x50
 80088f8:	af04      	add	r7, sp, #16
 80088fa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80088fc:	2301      	movs	r3, #1
 80088fe:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4618      	mov	r0, r3
 8008906:	f002 fad2 	bl	800aeae <SDMMC_GetPowerState>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d102      	bne.n	8008916 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008910:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008914:	e0b6      	b.n	8008a84 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800891a:	2b03      	cmp	r3, #3
 800891c:	d02f      	beq.n	800897e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4618      	mov	r0, r3
 8008924:	f002 fcfd 	bl	800b322 <SDMMC_CmdSendCID>
 8008928:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800892a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <SD_InitCard+0x40>
    {
      return errorstate;
 8008930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008932:	e0a7      	b.n	8008a84 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2100      	movs	r1, #0
 800893a:	4618      	mov	r0, r3
 800893c:	f002 fafd 	bl	800af3a <SDMMC_GetResponse>
 8008940:	4602      	mov	r2, r0
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2104      	movs	r1, #4
 800894c:	4618      	mov	r0, r3
 800894e:	f002 faf4 	bl	800af3a <SDMMC_GetResponse>
 8008952:	4602      	mov	r2, r0
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2108      	movs	r1, #8
 800895e:	4618      	mov	r0, r3
 8008960:	f002 faeb 	bl	800af3a <SDMMC_GetResponse>
 8008964:	4602      	mov	r2, r0
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	210c      	movs	r1, #12
 8008970:	4618      	mov	r0, r3
 8008972:	f002 fae2 	bl	800af3a <SDMMC_GetResponse>
 8008976:	4602      	mov	r2, r0
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008982:	2b03      	cmp	r3, #3
 8008984:	d00d      	beq.n	80089a2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f107 020e 	add.w	r2, r7, #14
 800898e:	4611      	mov	r1, r2
 8008990:	4618      	mov	r0, r3
 8008992:	f002 fd03 	bl	800b39c <SDMMC_CmdSetRelAdd>
 8008996:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <SD_InitCard+0xae>
    {
      return errorstate;
 800899e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089a0:	e070      	b.n	8008a84 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d036      	beq.n	8008a18 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80089aa:	89fb      	ldrh	r3, [r7, #14]
 80089ac:	461a      	mov	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ba:	041b      	lsls	r3, r3, #16
 80089bc:	4619      	mov	r1, r3
 80089be:	4610      	mov	r0, r2
 80089c0:	f002 fccd 	bl	800b35e <SDMMC_CmdSendCSD>
 80089c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80089c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d001      	beq.n	80089d0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80089cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ce:	e059      	b.n	8008a84 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2100      	movs	r1, #0
 80089d6:	4618      	mov	r0, r3
 80089d8:	f002 faaf 	bl	800af3a <SDMMC_GetResponse>
 80089dc:	4602      	mov	r2, r0
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2104      	movs	r1, #4
 80089e8:	4618      	mov	r0, r3
 80089ea:	f002 faa6 	bl	800af3a <SDMMC_GetResponse>
 80089ee:	4602      	mov	r2, r0
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2108      	movs	r1, #8
 80089fa:	4618      	mov	r0, r3
 80089fc:	f002 fa9d 	bl	800af3a <SDMMC_GetResponse>
 8008a00:	4602      	mov	r2, r0
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	210c      	movs	r1, #12
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f002 fa94 	bl	800af3a <SDMMC_GetResponse>
 8008a12:	4602      	mov	r2, r0
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2104      	movs	r1, #4
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f002 fa8b 	bl	800af3a <SDMMC_GetResponse>
 8008a24:	4603      	mov	r3, r0
 8008a26:	0d1a      	lsrs	r2, r3, #20
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008a2c:	f107 0310 	add.w	r3, r7, #16
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7ff fcd4 	bl	80083e0 <HAL_SD_GetCardCSD>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d002      	beq.n	8008a44 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008a42:	e01f      	b.n	8008a84 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6819      	ldr	r1, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a4c:	041b      	lsls	r3, r3, #16
 8008a4e:	461a      	mov	r2, r3
 8008a50:	f04f 0300 	mov.w	r3, #0
 8008a54:	4608      	mov	r0, r1
 8008a56:	f002 fb7b 	bl	800b150 <SDMMC_CmdSelDesel>
 8008a5a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <SD_InitCard+0x172>
  {
    return errorstate;
 8008a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a64:	e00e      	b.n	8008a84 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681d      	ldr	r5, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	466c      	mov	r4, sp
 8008a6e:	f103 0210 	add.w	r2, r3, #16
 8008a72:	ca07      	ldmia	r2, {r0, r1, r2}
 8008a74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008a78:	3304      	adds	r3, #4
 8008a7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	f002 f9bd 	bl	800adfc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3740      	adds	r7, #64	; 0x40
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bdb0      	pop	{r4, r5, r7, pc}

08008a8c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b086      	sub	sp, #24
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a94:	2300      	movs	r3, #0
 8008a96:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	617b      	str	r3, [r7, #20]
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f002 fb76 	bl	800b196 <SDMMC_CmdGoIdleState>
 8008aaa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	e072      	b.n	8008b9c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f002 fb89 	bl	800b1d2 <SDMMC_CmdOperCond>
 8008ac0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00d      	beq.n	8008ae4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f002 fb5f 	bl	800b196 <SDMMC_CmdGoIdleState>
 8008ad8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d004      	beq.n	8008aea <SD_PowerON+0x5e>
    {
      return errorstate;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	e05b      	b.n	8008b9c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d137      	bne.n	8008b62 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2100      	movs	r1, #0
 8008af8:	4618      	mov	r0, r3
 8008afa:	f002 fb89 	bl	800b210 <SDMMC_CmdAppCommand>
 8008afe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d02d      	beq.n	8008b62 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008b0a:	e047      	b.n	8008b9c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2100      	movs	r1, #0
 8008b12:	4618      	mov	r0, r3
 8008b14:	f002 fb7c 	bl	800b210 <SDMMC_CmdAppCommand>
 8008b18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d001      	beq.n	8008b24 <SD_PowerON+0x98>
    {
      return errorstate;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	e03b      	b.n	8008b9c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	491e      	ldr	r1, [pc, #120]	; (8008ba4 <SD_PowerON+0x118>)
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f002 fb92 	bl	800b254 <SDMMC_CmdAppOperCommand>
 8008b30:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008b3c:	e02e      	b.n	8008b9c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2100      	movs	r1, #0
 8008b44:	4618      	mov	r0, r3
 8008b46:	f002 f9f8 	bl	800af3a <SDMMC_GetResponse>
 8008b4a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	0fdb      	lsrs	r3, r3, #31
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d101      	bne.n	8008b58 <SD_PowerON+0xcc>
 8008b54:	2301      	movs	r3, #1
 8008b56:	e000      	b.n	8008b5a <SD_PowerON+0xce>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	613b      	str	r3, [r7, #16]

    count++;
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d802      	bhi.n	8008b72 <SD_PowerON+0xe6>
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d0cc      	beq.n	8008b0c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d902      	bls.n	8008b82 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b80:	e00c      	b.n	8008b9c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d003      	beq.n	8008b94 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	645a      	str	r2, [r3, #68]	; 0x44
 8008b92:	e002      	b.n	8008b9a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3718      	adds	r7, #24
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	c1100000 	.word	0xc1100000

08008ba8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d102      	bne.n	8008bbe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008bb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008bbc:	e018      	b.n	8008bf0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bc6:	041b      	lsls	r3, r3, #16
 8008bc8:	4619      	mov	r1, r3
 8008bca:	4610      	mov	r0, r2
 8008bcc:	f002 fc07 	bl	800b3de <SDMMC_CmdSendStatus>
 8008bd0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <SD_SendStatus+0x34>
  {
    return errorstate;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	e009      	b.n	8008bf0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2100      	movs	r1, #0
 8008be2:	4618      	mov	r0, r3
 8008be4:	f002 f9a9 	bl	800af3a <SDMMC_GetResponse>
 8008be8:	4602      	mov	r2, r0
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b086      	sub	sp, #24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008c00:	2300      	movs	r3, #0
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	2300      	movs	r3, #0
 8008c06:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f002 f993 	bl	800af3a <SDMMC_GetResponse>
 8008c14:	4603      	mov	r3, r0
 8008c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c1e:	d102      	bne.n	8008c26 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008c20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c24:	e02f      	b.n	8008c86 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008c26:	f107 030c 	add.w	r3, r7, #12
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f879 	bl	8008d24 <SD_FindSCR>
 8008c32:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d001      	beq.n	8008c3e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	e023      	b.n	8008c86 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d01c      	beq.n	8008c82 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c50:	041b      	lsls	r3, r3, #16
 8008c52:	4619      	mov	r1, r3
 8008c54:	4610      	mov	r0, r2
 8008c56:	f002 fadb 	bl	800b210 <SDMMC_CmdAppCommand>
 8008c5a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	e00f      	b.n	8008c86 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2102      	movs	r1, #2
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f002 fb15 	bl	800b29c <SDMMC_CmdBusWidth>
 8008c72:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	e003      	b.n	8008c86 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	e001      	b.n	8008c86 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3718      	adds	r7, #24
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b086      	sub	sp, #24
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008c96:	2300      	movs	r3, #0
 8008c98:	60fb      	str	r3, [r7, #12]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f002 f948 	bl	800af3a <SDMMC_GetResponse>
 8008caa:	4603      	mov	r3, r0
 8008cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cb4:	d102      	bne.n	8008cbc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008cb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cba:	e02f      	b.n	8008d1c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008cbc:	f107 030c 	add.w	r3, r7, #12
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f82e 	bl	8008d24 <SD_FindSCR>
 8008cc8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	e023      	b.n	8008d1c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d01c      	beq.n	8008d18 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce6:	041b      	lsls	r3, r3, #16
 8008ce8:	4619      	mov	r1, r3
 8008cea:	4610      	mov	r0, r2
 8008cec:	f002 fa90 	bl	800b210 <SDMMC_CmdAppCommand>
 8008cf0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d001      	beq.n	8008cfc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	e00f      	b.n	8008d1c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2100      	movs	r1, #0
 8008d02:	4618      	mov	r0, r3
 8008d04:	f002 faca 	bl	800b29c <SDMMC_CmdBusWidth>
 8008d08:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d001      	beq.n	8008d14 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	e003      	b.n	8008d1c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008d14:	2300      	movs	r3, #0
 8008d16:	e001      	b.n	8008d1c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3718      	adds	r7, #24
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008d24:	b590      	push	{r4, r7, lr}
 8008d26:	b08f      	sub	sp, #60	; 0x3c
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008d2e:	f7f9 feb5 	bl	8002a9c <HAL_GetTick>
 8008d32:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008d34:	2300      	movs	r3, #0
 8008d36:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008d38:	2300      	movs	r3, #0
 8008d3a:	60bb      	str	r3, [r7, #8]
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2108      	movs	r1, #8
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f002 f934 	bl	800afb8 <SDMMC_CmdBlockLength>
 8008d50:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5a:	e0b2      	b.n	8008ec2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d64:	041b      	lsls	r3, r3, #16
 8008d66:	4619      	mov	r1, r3
 8008d68:	4610      	mov	r0, r2
 8008d6a:	f002 fa51 	bl	800b210 <SDMMC_CmdAppCommand>
 8008d6e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d001      	beq.n	8008d7a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d78:	e0a3      	b.n	8008ec2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d7e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008d80:	2308      	movs	r3, #8
 8008d82:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008d84:	2330      	movs	r3, #48	; 0x30
 8008d86:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008d88:	2302      	movs	r3, #2
 8008d8a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008d90:	2301      	movs	r3, #1
 8008d92:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f107 0210 	add.w	r2, r7, #16
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f002 f8de 	bl	800af60 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4618      	mov	r0, r3
 8008daa:	f002 fa99 	bl	800b2e0 <SDMMC_CmdSendSCR>
 8008dae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d02a      	beq.n	8008e0c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db8:	e083      	b.n	8008ec2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00f      	beq.n	8008de8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6819      	ldr	r1, [r3, #0]
 8008dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	f107 0208 	add.w	r2, r7, #8
 8008dd4:	18d4      	adds	r4, r2, r3
 8008dd6:	4608      	mov	r0, r1
 8008dd8:	f002 f83c 	bl	800ae54 <SDMMC_ReadFIFO>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	6023      	str	r3, [r4, #0]
      index++;
 8008de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de2:	3301      	adds	r3, #1
 8008de4:	637b      	str	r3, [r7, #52]	; 0x34
 8008de6:	e006      	b.n	8008df6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d012      	beq.n	8008e1c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008df6:	f7f9 fe51 	bl	8002a9c <HAL_GetTick>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e04:	d102      	bne.n	8008e0c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008e06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e0a:	e05a      	b.n	8008ec2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e12:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d0cf      	beq.n	8008dba <SD_FindSCR+0x96>
 8008e1a:	e000      	b.n	8008e1e <SD_FindSCR+0xfa>
      break;
 8008e1c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e24:	f003 0308 	and.w	r3, r3, #8
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d005      	beq.n	8008e38 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2208      	movs	r2, #8
 8008e32:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008e34:	2308      	movs	r3, #8
 8008e36:	e044      	b.n	8008ec2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e3e:	f003 0302 	and.w	r3, r3, #2
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d005      	beq.n	8008e52 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2202      	movs	r2, #2
 8008e4c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008e4e:	2302      	movs	r3, #2
 8008e50:	e037      	b.n	8008ec2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e58:	f003 0320 	and.w	r3, r3, #32
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d005      	beq.n	8008e6c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2220      	movs	r2, #32
 8008e66:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008e68:	2320      	movs	r3, #32
 8008e6a:	e02a      	b.n	8008ec2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f240 523a 	movw	r2, #1338	; 0x53a
 8008e74:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	061a      	lsls	r2, r3, #24
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008e82:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	0a1b      	lsrs	r3, r3, #8
 8008e88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008e8c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	0e1b      	lsrs	r3, r3, #24
 8008e92:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e96:	601a      	str	r2, [r3, #0]
    scr++;
 8008e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	061a      	lsls	r2, r3, #24
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	021b      	lsls	r3, r3, #8
 8008ea6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008eaa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	0a1b      	lsrs	r3, r3, #8
 8008eb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008eb4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	0e1b      	lsrs	r3, r3, #24
 8008eba:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ebe:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	373c      	adds	r7, #60	; 0x3c
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd90      	pop	{r4, r7, pc}

08008eca <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b082      	sub	sp, #8
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
 8008ed2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d101      	bne.n	8008ede <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e025      	b.n	8008f2a <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d106      	bne.n	8008ef8 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7f9 fc20 	bl	8002738 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2202      	movs	r2, #2
 8008efc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	3304      	adds	r3, #4
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	f001 fe84 	bl	800ac18 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6818      	ldr	r0, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	461a      	mov	r2, r3
 8008f1a:	6839      	ldr	r1, [r7, #0]
 8008f1c:	f001 feee 	bl	800acfc <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
	...

08008f34 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d101      	bne.n	8008f46 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	e04c      	b.n	8008fe0 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d106      	bne.n	8008f60 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7f9 f938 	bl	80021d0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2202      	movs	r2, #2
 8008f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f022 0203 	bic.w	r2, r2, #3
 8008f76:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	4b19      	ldr	r3, [pc, #100]	; (8008fe8 <HAL_SPDIFRX_Init+0xb4>)
 8008f84:	4013      	ands	r3, r2
 8008f86:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8008f90:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8008f96:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8008f9c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8008fa2:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8008fa8:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8008fae:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8008fb4:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8008fba:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8008fc0:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	fff88407 	.word	0xfff88407

08008fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d101      	bne.n	8008ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e049      	b.n	8009092 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b00      	cmp	r3, #0
 8009008:	d106      	bne.n	8009018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7f9 f91e 	bl	8002254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2202      	movs	r2, #2
 800901c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	3304      	adds	r3, #4
 8009028:	4619      	mov	r1, r3
 800902a:	4610      	mov	r0, r2
 800902c:	f000 fc9c 	bl	8009968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
	...

0800909c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d001      	beq.n	80090b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e04c      	b.n	800914e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2202      	movs	r2, #2
 80090b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a26      	ldr	r2, [pc, #152]	; (800915c <HAL_TIM_Base_Start+0xc0>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d022      	beq.n	800910c <HAL_TIM_Base_Start+0x70>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090ce:	d01d      	beq.n	800910c <HAL_TIM_Base_Start+0x70>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a22      	ldr	r2, [pc, #136]	; (8009160 <HAL_TIM_Base_Start+0xc4>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d018      	beq.n	800910c <HAL_TIM_Base_Start+0x70>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a21      	ldr	r2, [pc, #132]	; (8009164 <HAL_TIM_Base_Start+0xc8>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d013      	beq.n	800910c <HAL_TIM_Base_Start+0x70>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a1f      	ldr	r2, [pc, #124]	; (8009168 <HAL_TIM_Base_Start+0xcc>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d00e      	beq.n	800910c <HAL_TIM_Base_Start+0x70>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a1e      	ldr	r2, [pc, #120]	; (800916c <HAL_TIM_Base_Start+0xd0>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d009      	beq.n	800910c <HAL_TIM_Base_Start+0x70>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a1c      	ldr	r2, [pc, #112]	; (8009170 <HAL_TIM_Base_Start+0xd4>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d004      	beq.n	800910c <HAL_TIM_Base_Start+0x70>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a1b      	ldr	r2, [pc, #108]	; (8009174 <HAL_TIM_Base_Start+0xd8>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d115      	bne.n	8009138 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	689a      	ldr	r2, [r3, #8]
 8009112:	4b19      	ldr	r3, [pc, #100]	; (8009178 <HAL_TIM_Base_Start+0xdc>)
 8009114:	4013      	ands	r3, r2
 8009116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2b06      	cmp	r3, #6
 800911c:	d015      	beq.n	800914a <HAL_TIM_Base_Start+0xae>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009124:	d011      	beq.n	800914a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f042 0201 	orr.w	r2, r2, #1
 8009134:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009136:	e008      	b.n	800914a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f042 0201 	orr.w	r2, r2, #1
 8009146:	601a      	str	r2, [r3, #0]
 8009148:	e000      	b.n	800914c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800914a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3714      	adds	r7, #20
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	40010000 	.word	0x40010000
 8009160:	40000400 	.word	0x40000400
 8009164:	40000800 	.word	0x40000800
 8009168:	40000c00 	.word	0x40000c00
 800916c:	40010400 	.word	0x40010400
 8009170:	40014000 	.word	0x40014000
 8009174:	40001800 	.word	0x40001800
 8009178:	00010007 	.word	0x00010007

0800917c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800918a:	b2db      	uxtb	r3, r3
 800918c:	2b01      	cmp	r3, #1
 800918e:	d001      	beq.n	8009194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	e054      	b.n	800923e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2202      	movs	r2, #2
 8009198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68da      	ldr	r2, [r3, #12]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f042 0201 	orr.w	r2, r2, #1
 80091aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a26      	ldr	r2, [pc, #152]	; (800924c <HAL_TIM_Base_Start_IT+0xd0>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d022      	beq.n	80091fc <HAL_TIM_Base_Start_IT+0x80>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091be:	d01d      	beq.n	80091fc <HAL_TIM_Base_Start_IT+0x80>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a22      	ldr	r2, [pc, #136]	; (8009250 <HAL_TIM_Base_Start_IT+0xd4>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d018      	beq.n	80091fc <HAL_TIM_Base_Start_IT+0x80>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a21      	ldr	r2, [pc, #132]	; (8009254 <HAL_TIM_Base_Start_IT+0xd8>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d013      	beq.n	80091fc <HAL_TIM_Base_Start_IT+0x80>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a1f      	ldr	r2, [pc, #124]	; (8009258 <HAL_TIM_Base_Start_IT+0xdc>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d00e      	beq.n	80091fc <HAL_TIM_Base_Start_IT+0x80>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a1e      	ldr	r2, [pc, #120]	; (800925c <HAL_TIM_Base_Start_IT+0xe0>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d009      	beq.n	80091fc <HAL_TIM_Base_Start_IT+0x80>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a1c      	ldr	r2, [pc, #112]	; (8009260 <HAL_TIM_Base_Start_IT+0xe4>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d004      	beq.n	80091fc <HAL_TIM_Base_Start_IT+0x80>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a1b      	ldr	r2, [pc, #108]	; (8009264 <HAL_TIM_Base_Start_IT+0xe8>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d115      	bne.n	8009228 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	689a      	ldr	r2, [r3, #8]
 8009202:	4b19      	ldr	r3, [pc, #100]	; (8009268 <HAL_TIM_Base_Start_IT+0xec>)
 8009204:	4013      	ands	r3, r2
 8009206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2b06      	cmp	r3, #6
 800920c:	d015      	beq.n	800923a <HAL_TIM_Base_Start_IT+0xbe>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009214:	d011      	beq.n	800923a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f042 0201 	orr.w	r2, r2, #1
 8009224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009226:	e008      	b.n	800923a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f042 0201 	orr.w	r2, r2, #1
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	e000      	b.n	800923c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800923a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	40010000 	.word	0x40010000
 8009250:	40000400 	.word	0x40000400
 8009254:	40000800 	.word	0x40000800
 8009258:	40000c00 	.word	0x40000c00
 800925c:	40010400 	.word	0x40010400
 8009260:	40014000 	.word	0x40014000
 8009264:	40001800 	.word	0x40001800
 8009268:	00010007 	.word	0x00010007

0800926c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e049      	b.n	8009312 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b00      	cmp	r3, #0
 8009288:	d106      	bne.n	8009298 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 f841 	bl	800931a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2202      	movs	r2, #2
 800929c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	3304      	adds	r3, #4
 80092a8:	4619      	mov	r1, r3
 80092aa:	4610      	mov	r0, r2
 80092ac:	f000 fb5c 	bl	8009968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800931a:	b480      	push	{r7}
 800931c:	b083      	sub	sp, #12
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009322:	bf00      	nop
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b082      	sub	sp, #8
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	f003 0302 	and.w	r3, r3, #2
 8009340:	2b02      	cmp	r3, #2
 8009342:	d122      	bne.n	800938a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	f003 0302 	and.w	r3, r3, #2
 800934e:	2b02      	cmp	r3, #2
 8009350:	d11b      	bne.n	800938a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f06f 0202 	mvn.w	r2, #2
 800935a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	f003 0303 	and.w	r3, r3, #3
 800936c:	2b00      	cmp	r3, #0
 800936e:	d003      	beq.n	8009378 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fadb 	bl	800992c <HAL_TIM_IC_CaptureCallback>
 8009376:	e005      	b.n	8009384 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 facd 	bl	8009918 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fade 	bl	8009940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	f003 0304 	and.w	r3, r3, #4
 8009394:	2b04      	cmp	r3, #4
 8009396:	d122      	bne.n	80093de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	f003 0304 	and.w	r3, r3, #4
 80093a2:	2b04      	cmp	r3, #4
 80093a4:	d11b      	bne.n	80093de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f06f 0204 	mvn.w	r2, #4
 80093ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2202      	movs	r2, #2
 80093b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d003      	beq.n	80093cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fab1 	bl	800992c <HAL_TIM_IC_CaptureCallback>
 80093ca:	e005      	b.n	80093d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 faa3 	bl	8009918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fab4 	bl	8009940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	f003 0308 	and.w	r3, r3, #8
 80093e8:	2b08      	cmp	r3, #8
 80093ea:	d122      	bne.n	8009432 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	f003 0308 	and.w	r3, r3, #8
 80093f6:	2b08      	cmp	r3, #8
 80093f8:	d11b      	bne.n	8009432 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f06f 0208 	mvn.w	r2, #8
 8009402:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2204      	movs	r2, #4
 8009408:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	69db      	ldr	r3, [r3, #28]
 8009410:	f003 0303 	and.w	r3, r3, #3
 8009414:	2b00      	cmp	r3, #0
 8009416:	d003      	beq.n	8009420 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fa87 	bl	800992c <HAL_TIM_IC_CaptureCallback>
 800941e:	e005      	b.n	800942c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fa79 	bl	8009918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fa8a 	bl	8009940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	f003 0310 	and.w	r3, r3, #16
 800943c:	2b10      	cmp	r3, #16
 800943e:	d122      	bne.n	8009486 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	f003 0310 	and.w	r3, r3, #16
 800944a:	2b10      	cmp	r3, #16
 800944c:	d11b      	bne.n	8009486 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f06f 0210 	mvn.w	r2, #16
 8009456:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2208      	movs	r2, #8
 800945c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69db      	ldr	r3, [r3, #28]
 8009464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009468:	2b00      	cmp	r3, #0
 800946a:	d003      	beq.n	8009474 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fa5d 	bl	800992c <HAL_TIM_IC_CaptureCallback>
 8009472:	e005      	b.n	8009480 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fa4f 	bl	8009918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 fa60 	bl	8009940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	f003 0301 	and.w	r3, r3, #1
 8009490:	2b01      	cmp	r3, #1
 8009492:	d10e      	bne.n	80094b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	f003 0301 	and.w	r3, r3, #1
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d107      	bne.n	80094b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f06f 0201 	mvn.w	r2, #1
 80094aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7f8 faa9 	bl	8001a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094bc:	2b80      	cmp	r3, #128	; 0x80
 80094be:	d10e      	bne.n	80094de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094ca:	2b80      	cmp	r3, #128	; 0x80
 80094cc:	d107      	bne.n	80094de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80094d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fef3 	bl	800a2c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094ec:	d10e      	bne.n	800950c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094f8:	2b80      	cmp	r3, #128	; 0x80
 80094fa:	d107      	bne.n	800950c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fee6 	bl	800a2d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009516:	2b40      	cmp	r3, #64	; 0x40
 8009518:	d10e      	bne.n	8009538 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009524:	2b40      	cmp	r3, #64	; 0x40
 8009526:	d107      	bne.n	8009538 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fa0e 	bl	8009954 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	f003 0320 	and.w	r3, r3, #32
 8009542:	2b20      	cmp	r3, #32
 8009544:	d10e      	bne.n	8009564 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	f003 0320 	and.w	r3, r3, #32
 8009550:	2b20      	cmp	r3, #32
 8009552:	d107      	bne.n	8009564 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f06f 0220 	mvn.w	r2, #32
 800955c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fea6 	bl	800a2b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009564:	bf00      	nop
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800957e:	2b01      	cmp	r3, #1
 8009580:	d101      	bne.n	8009586 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009582:	2302      	movs	r3, #2
 8009584:	e0fd      	b.n	8009782 <HAL_TIM_PWM_ConfigChannel+0x216>
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2201      	movs	r2, #1
 800958a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2b14      	cmp	r3, #20
 8009592:	f200 80f0 	bhi.w	8009776 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009596:	a201      	add	r2, pc, #4	; (adr r2, 800959c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959c:	080095f1 	.word	0x080095f1
 80095a0:	08009777 	.word	0x08009777
 80095a4:	08009777 	.word	0x08009777
 80095a8:	08009777 	.word	0x08009777
 80095ac:	08009631 	.word	0x08009631
 80095b0:	08009777 	.word	0x08009777
 80095b4:	08009777 	.word	0x08009777
 80095b8:	08009777 	.word	0x08009777
 80095bc:	08009673 	.word	0x08009673
 80095c0:	08009777 	.word	0x08009777
 80095c4:	08009777 	.word	0x08009777
 80095c8:	08009777 	.word	0x08009777
 80095cc:	080096b3 	.word	0x080096b3
 80095d0:	08009777 	.word	0x08009777
 80095d4:	08009777 	.word	0x08009777
 80095d8:	08009777 	.word	0x08009777
 80095dc:	080096f5 	.word	0x080096f5
 80095e0:	08009777 	.word	0x08009777
 80095e4:	08009777 	.word	0x08009777
 80095e8:	08009777 	.word	0x08009777
 80095ec:	08009735 	.word	0x08009735
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68b9      	ldr	r1, [r7, #8]
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 fa56 	bl	8009aa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	699a      	ldr	r2, [r3, #24]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f042 0208 	orr.w	r2, r2, #8
 800960a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	699a      	ldr	r2, [r3, #24]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f022 0204 	bic.w	r2, r2, #4
 800961a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	6999      	ldr	r1, [r3, #24]
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	691a      	ldr	r2, [r3, #16]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	430a      	orrs	r2, r1
 800962c:	619a      	str	r2, [r3, #24]
      break;
 800962e:	e0a3      	b.n	8009778 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68b9      	ldr	r1, [r7, #8]
 8009636:	4618      	mov	r0, r3
 8009638:	f000 faa8 	bl	8009b8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	699a      	ldr	r2, [r3, #24]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800964a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	699a      	ldr	r2, [r3, #24]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800965a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	6999      	ldr	r1, [r3, #24]
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	021a      	lsls	r2, r3, #8
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	430a      	orrs	r2, r1
 800966e:	619a      	str	r2, [r3, #24]
      break;
 8009670:	e082      	b.n	8009778 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68b9      	ldr	r1, [r7, #8]
 8009678:	4618      	mov	r0, r3
 800967a:	f000 faff 	bl	8009c7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	69da      	ldr	r2, [r3, #28]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f042 0208 	orr.w	r2, r2, #8
 800968c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	69da      	ldr	r2, [r3, #28]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f022 0204 	bic.w	r2, r2, #4
 800969c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	69d9      	ldr	r1, [r3, #28]
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	691a      	ldr	r2, [r3, #16]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	430a      	orrs	r2, r1
 80096ae:	61da      	str	r2, [r3, #28]
      break;
 80096b0:	e062      	b.n	8009778 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68b9      	ldr	r1, [r7, #8]
 80096b8:	4618      	mov	r0, r3
 80096ba:	f000 fb55 	bl	8009d68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	69da      	ldr	r2, [r3, #28]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	69da      	ldr	r2, [r3, #28]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	69d9      	ldr	r1, [r3, #28]
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	021a      	lsls	r2, r3, #8
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	430a      	orrs	r2, r1
 80096f0:	61da      	str	r2, [r3, #28]
      break;
 80096f2:	e041      	b.n	8009778 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68b9      	ldr	r1, [r7, #8]
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 fb8c 	bl	8009e18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f042 0208 	orr.w	r2, r2, #8
 800970e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f022 0204 	bic.w	r2, r2, #4
 800971e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	691a      	ldr	r2, [r3, #16]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	430a      	orrs	r2, r1
 8009730:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009732:	e021      	b.n	8009778 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68b9      	ldr	r1, [r7, #8]
 800973a:	4618      	mov	r0, r3
 800973c:	f000 fbbe 	bl	8009ebc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800974e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800975e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	021a      	lsls	r2, r3, #8
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	430a      	orrs	r2, r1
 8009772:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009774:	e000      	b.n	8009778 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8009776:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2200      	movs	r2, #0
 800977c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop

0800978c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800979c:	2b01      	cmp	r3, #1
 800979e:	d101      	bne.n	80097a4 <HAL_TIM_ConfigClockSource+0x18>
 80097a0:	2302      	movs	r3, #2
 80097a2:	e0b3      	b.n	800990c <HAL_TIM_ConfigClockSource+0x180>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2202      	movs	r2, #2
 80097b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	4b55      	ldr	r3, [pc, #340]	; (8009914 <HAL_TIM_ConfigClockSource+0x188>)
 80097c0:	4013      	ands	r3, r2
 80097c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80097ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097dc:	d03e      	beq.n	800985c <HAL_TIM_ConfigClockSource+0xd0>
 80097de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097e2:	f200 8087 	bhi.w	80098f4 <HAL_TIM_ConfigClockSource+0x168>
 80097e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097ea:	f000 8085 	beq.w	80098f8 <HAL_TIM_ConfigClockSource+0x16c>
 80097ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097f2:	d87f      	bhi.n	80098f4 <HAL_TIM_ConfigClockSource+0x168>
 80097f4:	2b70      	cmp	r3, #112	; 0x70
 80097f6:	d01a      	beq.n	800982e <HAL_TIM_ConfigClockSource+0xa2>
 80097f8:	2b70      	cmp	r3, #112	; 0x70
 80097fa:	d87b      	bhi.n	80098f4 <HAL_TIM_ConfigClockSource+0x168>
 80097fc:	2b60      	cmp	r3, #96	; 0x60
 80097fe:	d050      	beq.n	80098a2 <HAL_TIM_ConfigClockSource+0x116>
 8009800:	2b60      	cmp	r3, #96	; 0x60
 8009802:	d877      	bhi.n	80098f4 <HAL_TIM_ConfigClockSource+0x168>
 8009804:	2b50      	cmp	r3, #80	; 0x50
 8009806:	d03c      	beq.n	8009882 <HAL_TIM_ConfigClockSource+0xf6>
 8009808:	2b50      	cmp	r3, #80	; 0x50
 800980a:	d873      	bhi.n	80098f4 <HAL_TIM_ConfigClockSource+0x168>
 800980c:	2b40      	cmp	r3, #64	; 0x40
 800980e:	d058      	beq.n	80098c2 <HAL_TIM_ConfigClockSource+0x136>
 8009810:	2b40      	cmp	r3, #64	; 0x40
 8009812:	d86f      	bhi.n	80098f4 <HAL_TIM_ConfigClockSource+0x168>
 8009814:	2b30      	cmp	r3, #48	; 0x30
 8009816:	d064      	beq.n	80098e2 <HAL_TIM_ConfigClockSource+0x156>
 8009818:	2b30      	cmp	r3, #48	; 0x30
 800981a:	d86b      	bhi.n	80098f4 <HAL_TIM_ConfigClockSource+0x168>
 800981c:	2b20      	cmp	r3, #32
 800981e:	d060      	beq.n	80098e2 <HAL_TIM_ConfigClockSource+0x156>
 8009820:	2b20      	cmp	r3, #32
 8009822:	d867      	bhi.n	80098f4 <HAL_TIM_ConfigClockSource+0x168>
 8009824:	2b00      	cmp	r3, #0
 8009826:	d05c      	beq.n	80098e2 <HAL_TIM_ConfigClockSource+0x156>
 8009828:	2b10      	cmp	r3, #16
 800982a:	d05a      	beq.n	80098e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800982c:	e062      	b.n	80098f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6818      	ldr	r0, [r3, #0]
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	6899      	ldr	r1, [r3, #8]
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	685a      	ldr	r2, [r3, #4]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	f000 fc0b 	bl	800a058 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009850:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	609a      	str	r2, [r3, #8]
      break;
 800985a:	e04e      	b.n	80098fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6818      	ldr	r0, [r3, #0]
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	6899      	ldr	r1, [r3, #8]
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	685a      	ldr	r2, [r3, #4]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	f000 fbf4 	bl	800a058 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	689a      	ldr	r2, [r3, #8]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800987e:	609a      	str	r2, [r3, #8]
      break;
 8009880:	e03b      	b.n	80098fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6818      	ldr	r0, [r3, #0]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	6859      	ldr	r1, [r3, #4]
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	461a      	mov	r2, r3
 8009890:	f000 fb68 	bl	8009f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2150      	movs	r1, #80	; 0x50
 800989a:	4618      	mov	r0, r3
 800989c:	f000 fbc1 	bl	800a022 <TIM_ITRx_SetConfig>
      break;
 80098a0:	e02b      	b.n	80098fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6818      	ldr	r0, [r3, #0]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	6859      	ldr	r1, [r3, #4]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	461a      	mov	r2, r3
 80098b0:	f000 fb87 	bl	8009fc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2160      	movs	r1, #96	; 0x60
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 fbb1 	bl	800a022 <TIM_ITRx_SetConfig>
      break;
 80098c0:	e01b      	b.n	80098fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6818      	ldr	r0, [r3, #0]
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	6859      	ldr	r1, [r3, #4]
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	461a      	mov	r2, r3
 80098d0:	f000 fb48 	bl	8009f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2140      	movs	r1, #64	; 0x40
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 fba1 	bl	800a022 <TIM_ITRx_SetConfig>
      break;
 80098e0:	e00b      	b.n	80098fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4619      	mov	r1, r3
 80098ec:	4610      	mov	r0, r2
 80098ee:	f000 fb98 	bl	800a022 <TIM_ITRx_SetConfig>
        break;
 80098f2:	e002      	b.n	80098fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80098f4:	bf00      	nop
 80098f6:	e000      	b.n	80098fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80098f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	fffeff88 	.word	0xfffeff88

08009918 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800995c:	bf00      	nop
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a40      	ldr	r2, [pc, #256]	; (8009a7c <TIM_Base_SetConfig+0x114>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d013      	beq.n	80099a8 <TIM_Base_SetConfig+0x40>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009986:	d00f      	beq.n	80099a8 <TIM_Base_SetConfig+0x40>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a3d      	ldr	r2, [pc, #244]	; (8009a80 <TIM_Base_SetConfig+0x118>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d00b      	beq.n	80099a8 <TIM_Base_SetConfig+0x40>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a3c      	ldr	r2, [pc, #240]	; (8009a84 <TIM_Base_SetConfig+0x11c>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d007      	beq.n	80099a8 <TIM_Base_SetConfig+0x40>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a3b      	ldr	r2, [pc, #236]	; (8009a88 <TIM_Base_SetConfig+0x120>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d003      	beq.n	80099a8 <TIM_Base_SetConfig+0x40>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a3a      	ldr	r2, [pc, #232]	; (8009a8c <TIM_Base_SetConfig+0x124>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d108      	bne.n	80099ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a2f      	ldr	r2, [pc, #188]	; (8009a7c <TIM_Base_SetConfig+0x114>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d02b      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099c8:	d027      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4a2c      	ldr	r2, [pc, #176]	; (8009a80 <TIM_Base_SetConfig+0x118>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d023      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4a2b      	ldr	r2, [pc, #172]	; (8009a84 <TIM_Base_SetConfig+0x11c>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d01f      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a2a      	ldr	r2, [pc, #168]	; (8009a88 <TIM_Base_SetConfig+0x120>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d01b      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a29      	ldr	r2, [pc, #164]	; (8009a8c <TIM_Base_SetConfig+0x124>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d017      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a28      	ldr	r2, [pc, #160]	; (8009a90 <TIM_Base_SetConfig+0x128>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d013      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a27      	ldr	r2, [pc, #156]	; (8009a94 <TIM_Base_SetConfig+0x12c>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d00f      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a26      	ldr	r2, [pc, #152]	; (8009a98 <TIM_Base_SetConfig+0x130>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d00b      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a25      	ldr	r2, [pc, #148]	; (8009a9c <TIM_Base_SetConfig+0x134>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d007      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a24      	ldr	r2, [pc, #144]	; (8009aa0 <TIM_Base_SetConfig+0x138>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d003      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a23      	ldr	r2, [pc, #140]	; (8009aa4 <TIM_Base_SetConfig+0x13c>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d108      	bne.n	8009a2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	689a      	ldr	r2, [r3, #8]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a0a      	ldr	r2, [pc, #40]	; (8009a7c <TIM_Base_SetConfig+0x114>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d003      	beq.n	8009a60 <TIM_Base_SetConfig+0xf8>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a0c      	ldr	r2, [pc, #48]	; (8009a8c <TIM_Base_SetConfig+0x124>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d103      	bne.n	8009a68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	691a      	ldr	r2, [r3, #16]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	615a      	str	r2, [r3, #20]
}
 8009a6e:	bf00      	nop
 8009a70:	3714      	adds	r7, #20
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	40010000 	.word	0x40010000
 8009a80:	40000400 	.word	0x40000400
 8009a84:	40000800 	.word	0x40000800
 8009a88:	40000c00 	.word	0x40000c00
 8009a8c:	40010400 	.word	0x40010400
 8009a90:	40014000 	.word	0x40014000
 8009a94:	40014400 	.word	0x40014400
 8009a98:	40014800 	.word	0x40014800
 8009a9c:	40001800 	.word	0x40001800
 8009aa0:	40001c00 	.word	0x40001c00
 8009aa4:	40002000 	.word	0x40002000

08009aa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b087      	sub	sp, #28
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a1b      	ldr	r3, [r3, #32]
 8009ab6:	f023 0201 	bic.w	r2, r3, #1
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	4b2b      	ldr	r3, [pc, #172]	; (8009b80 <TIM_OC1_SetConfig+0xd8>)
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f023 0303 	bic.w	r3, r3, #3
 8009ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	f023 0302 	bic.w	r3, r3, #2
 8009af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a21      	ldr	r2, [pc, #132]	; (8009b84 <TIM_OC1_SetConfig+0xdc>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d003      	beq.n	8009b0c <TIM_OC1_SetConfig+0x64>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a20      	ldr	r2, [pc, #128]	; (8009b88 <TIM_OC1_SetConfig+0xe0>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d10c      	bne.n	8009b26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	f023 0308 	bic.w	r3, r3, #8
 8009b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	697a      	ldr	r2, [r7, #20]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	f023 0304 	bic.w	r3, r3, #4
 8009b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a16      	ldr	r2, [pc, #88]	; (8009b84 <TIM_OC1_SetConfig+0xdc>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d003      	beq.n	8009b36 <TIM_OC1_SetConfig+0x8e>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a15      	ldr	r2, [pc, #84]	; (8009b88 <TIM_OC1_SetConfig+0xe0>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d111      	bne.n	8009b5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	693a      	ldr	r2, [r7, #16]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	693a      	ldr	r2, [r7, #16]
 8009b56:	4313      	orrs	r3, r2
 8009b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	685a      	ldr	r2, [r3, #4]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	697a      	ldr	r2, [r7, #20]
 8009b72:	621a      	str	r2, [r3, #32]
}
 8009b74:	bf00      	nop
 8009b76:	371c      	adds	r7, #28
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr
 8009b80:	fffeff8f 	.word	0xfffeff8f
 8009b84:	40010000 	.word	0x40010000
 8009b88:	40010400 	.word	0x40010400

08009b8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b087      	sub	sp, #28
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a1b      	ldr	r3, [r3, #32]
 8009b9a:	f023 0210 	bic.w	r2, r3, #16
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a1b      	ldr	r3, [r3, #32]
 8009ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	4b2e      	ldr	r3, [pc, #184]	; (8009c70 <TIM_OC2_SetConfig+0xe4>)
 8009bb8:	4013      	ands	r3, r2
 8009bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	021b      	lsls	r3, r3, #8
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	f023 0320 	bic.w	r3, r3, #32
 8009bd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	011b      	lsls	r3, r3, #4
 8009bde:	697a      	ldr	r2, [r7, #20]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a23      	ldr	r2, [pc, #140]	; (8009c74 <TIM_OC2_SetConfig+0xe8>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d003      	beq.n	8009bf4 <TIM_OC2_SetConfig+0x68>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a22      	ldr	r2, [pc, #136]	; (8009c78 <TIM_OC2_SetConfig+0xec>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d10d      	bne.n	8009c10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	011b      	lsls	r3, r3, #4
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a18      	ldr	r2, [pc, #96]	; (8009c74 <TIM_OC2_SetConfig+0xe8>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d003      	beq.n	8009c20 <TIM_OC2_SetConfig+0x94>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a17      	ldr	r2, [pc, #92]	; (8009c78 <TIM_OC2_SetConfig+0xec>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d113      	bne.n	8009c48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	695b      	ldr	r3, [r3, #20]
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	699b      	ldr	r3, [r3, #24]
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	693a      	ldr	r2, [r7, #16]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	693a      	ldr	r2, [r7, #16]
 8009c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	685a      	ldr	r2, [r3, #4]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	697a      	ldr	r2, [r7, #20]
 8009c60:	621a      	str	r2, [r3, #32]
}
 8009c62:	bf00      	nop
 8009c64:	371c      	adds	r7, #28
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	feff8fff 	.word	0xfeff8fff
 8009c74:	40010000 	.word	0x40010000
 8009c78:	40010400 	.word	0x40010400

08009c7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b087      	sub	sp, #28
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a1b      	ldr	r3, [r3, #32]
 8009c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	69db      	ldr	r3, [r3, #28]
 8009ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	4b2d      	ldr	r3, [pc, #180]	; (8009d5c <TIM_OC3_SetConfig+0xe0>)
 8009ca8:	4013      	ands	r3, r2
 8009caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f023 0303 	bic.w	r3, r3, #3
 8009cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	021b      	lsls	r3, r3, #8
 8009ccc:	697a      	ldr	r2, [r7, #20]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4a22      	ldr	r2, [pc, #136]	; (8009d60 <TIM_OC3_SetConfig+0xe4>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d003      	beq.n	8009ce2 <TIM_OC3_SetConfig+0x66>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a21      	ldr	r2, [pc, #132]	; (8009d64 <TIM_OC3_SetConfig+0xe8>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d10d      	bne.n	8009cfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	021b      	lsls	r3, r3, #8
 8009cf0:	697a      	ldr	r2, [r7, #20]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a17      	ldr	r2, [pc, #92]	; (8009d60 <TIM_OC3_SetConfig+0xe4>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d003      	beq.n	8009d0e <TIM_OC3_SetConfig+0x92>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4a16      	ldr	r2, [pc, #88]	; (8009d64 <TIM_OC3_SetConfig+0xe8>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d113      	bne.n	8009d36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	011b      	lsls	r3, r3, #4
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	699b      	ldr	r3, [r3, #24]
 8009d2e:	011b      	lsls	r3, r3, #4
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	685a      	ldr	r2, [r3, #4]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	621a      	str	r2, [r3, #32]
}
 8009d50:	bf00      	nop
 8009d52:	371c      	adds	r7, #28
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	fffeff8f 	.word	0xfffeff8f
 8009d60:	40010000 	.word	0x40010000
 8009d64:	40010400 	.word	0x40010400

08009d68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a1b      	ldr	r3, [r3, #32]
 8009d82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	69db      	ldr	r3, [r3, #28]
 8009d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	4b1e      	ldr	r3, [pc, #120]	; (8009e0c <TIM_OC4_SetConfig+0xa4>)
 8009d94:	4013      	ands	r3, r2
 8009d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	021b      	lsls	r3, r3, #8
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009db2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	031b      	lsls	r3, r3, #12
 8009dba:	693a      	ldr	r2, [r7, #16]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a13      	ldr	r2, [pc, #76]	; (8009e10 <TIM_OC4_SetConfig+0xa8>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d003      	beq.n	8009dd0 <TIM_OC4_SetConfig+0x68>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a12      	ldr	r2, [pc, #72]	; (8009e14 <TIM_OC4_SetConfig+0xac>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d109      	bne.n	8009de4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009dd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	695b      	ldr	r3, [r3, #20]
 8009ddc:	019b      	lsls	r3, r3, #6
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	697a      	ldr	r2, [r7, #20]
 8009de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	685a      	ldr	r2, [r3, #4]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	621a      	str	r2, [r3, #32]
}
 8009dfe:	bf00      	nop
 8009e00:	371c      	adds	r7, #28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	feff8fff 	.word	0xfeff8fff
 8009e10:	40010000 	.word	0x40010000
 8009e14:	40010400 	.word	0x40010400

08009e18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b087      	sub	sp, #28
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a1b      	ldr	r3, [r3, #32]
 8009e26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a1b      	ldr	r3, [r3, #32]
 8009e32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	4b1b      	ldr	r3, [pc, #108]	; (8009eb0 <TIM_OC5_SetConfig+0x98>)
 8009e44:	4013      	ands	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009e58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	041b      	lsls	r3, r3, #16
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a12      	ldr	r2, [pc, #72]	; (8009eb4 <TIM_OC5_SetConfig+0x9c>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d003      	beq.n	8009e76 <TIM_OC5_SetConfig+0x5e>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4a11      	ldr	r2, [pc, #68]	; (8009eb8 <TIM_OC5_SetConfig+0xa0>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d109      	bne.n	8009e8a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	695b      	ldr	r3, [r3, #20]
 8009e82:	021b      	lsls	r3, r3, #8
 8009e84:	697a      	ldr	r2, [r7, #20]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	685a      	ldr	r2, [r3, #4]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	693a      	ldr	r2, [r7, #16]
 8009ea2:	621a      	str	r2, [r3, #32]
}
 8009ea4:	bf00      	nop
 8009ea6:	371c      	adds	r7, #28
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr
 8009eb0:	fffeff8f 	.word	0xfffeff8f
 8009eb4:	40010000 	.word	0x40010000
 8009eb8:	40010400 	.word	0x40010400

08009ebc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b087      	sub	sp, #28
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6a1b      	ldr	r3, [r3, #32]
 8009ed6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	4b1c      	ldr	r3, [pc, #112]	; (8009f58 <TIM_OC6_SetConfig+0x9c>)
 8009ee8:	4013      	ands	r3, r2
 8009eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	021b      	lsls	r3, r3, #8
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	051b      	lsls	r3, r3, #20
 8009f06:	693a      	ldr	r2, [r7, #16]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a13      	ldr	r2, [pc, #76]	; (8009f5c <TIM_OC6_SetConfig+0xa0>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d003      	beq.n	8009f1c <TIM_OC6_SetConfig+0x60>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a12      	ldr	r2, [pc, #72]	; (8009f60 <TIM_OC6_SetConfig+0xa4>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d109      	bne.n	8009f30 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	695b      	ldr	r3, [r3, #20]
 8009f28:	029b      	lsls	r3, r3, #10
 8009f2a:	697a      	ldr	r2, [r7, #20]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	697a      	ldr	r2, [r7, #20]
 8009f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	685a      	ldr	r2, [r3, #4]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	693a      	ldr	r2, [r7, #16]
 8009f48:	621a      	str	r2, [r3, #32]
}
 8009f4a:	bf00      	nop
 8009f4c:	371c      	adds	r7, #28
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	feff8fff 	.word	0xfeff8fff
 8009f5c:	40010000 	.word	0x40010000
 8009f60:	40010400 	.word	0x40010400

08009f64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b087      	sub	sp, #28
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6a1b      	ldr	r3, [r3, #32]
 8009f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6a1b      	ldr	r3, [r3, #32]
 8009f7a:	f023 0201 	bic.w	r2, r3, #1
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	699b      	ldr	r3, [r3, #24]
 8009f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	011b      	lsls	r3, r3, #4
 8009f94:	693a      	ldr	r2, [r7, #16]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	f023 030a 	bic.w	r3, r3, #10
 8009fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009fa2:	697a      	ldr	r2, [r7, #20]
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	693a      	ldr	r2, [r7, #16]
 8009fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	697a      	ldr	r2, [r7, #20]
 8009fb4:	621a      	str	r2, [r3, #32]
}
 8009fb6:	bf00      	nop
 8009fb8:	371c      	adds	r7, #28
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fc2:	b480      	push	{r7}
 8009fc4:	b087      	sub	sp, #28
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	60f8      	str	r0, [r7, #12]
 8009fca:	60b9      	str	r1, [r7, #8]
 8009fcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	f023 0210 	bic.w	r2, r3, #16
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6a1b      	ldr	r3, [r3, #32]
 8009fe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009fec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	031b      	lsls	r3, r3, #12
 8009ff2:	697a      	ldr	r2, [r7, #20]
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009ffe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	011b      	lsls	r3, r3, #4
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	4313      	orrs	r3, r2
 800a008:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	697a      	ldr	r2, [r7, #20]
 800a00e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	621a      	str	r2, [r3, #32]
}
 800a016:	bf00      	nop
 800a018:	371c      	adds	r7, #28
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr

0800a022 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a022:	b480      	push	{r7}
 800a024:	b085      	sub	sp, #20
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
 800a02a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a038:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a03a:	683a      	ldr	r2, [r7, #0]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	4313      	orrs	r3, r2
 800a040:	f043 0307 	orr.w	r3, r3, #7
 800a044:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	609a      	str	r2, [r3, #8]
}
 800a04c:	bf00      	nop
 800a04e:	3714      	adds	r7, #20
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a058:	b480      	push	{r7}
 800a05a:	b087      	sub	sp, #28
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a072:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	021a      	lsls	r2, r3, #8
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	431a      	orrs	r2, r3
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	4313      	orrs	r3, r2
 800a080:	697a      	ldr	r2, [r7, #20]
 800a082:	4313      	orrs	r3, r2
 800a084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	697a      	ldr	r2, [r7, #20]
 800a08a:	609a      	str	r2, [r3, #8]
}
 800a08c:	bf00      	nop
 800a08e:	371c      	adds	r7, #28
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d101      	bne.n	800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0ac:	2302      	movs	r3, #2
 800a0ae:	e06d      	b.n	800a18c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2202      	movs	r2, #2
 800a0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a30      	ldr	r2, [pc, #192]	; (800a198 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d004      	beq.n	800a0e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a2f      	ldr	r2, [pc, #188]	; (800a19c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d108      	bne.n	800a0f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a0ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	4313      	orrs	r3, r2
 800a106:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a20      	ldr	r2, [pc, #128]	; (800a198 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d022      	beq.n	800a160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a122:	d01d      	beq.n	800a160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a1d      	ldr	r2, [pc, #116]	; (800a1a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d018      	beq.n	800a160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a1c      	ldr	r2, [pc, #112]	; (800a1a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d013      	beq.n	800a160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a1a      	ldr	r2, [pc, #104]	; (800a1a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d00e      	beq.n	800a160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a15      	ldr	r2, [pc, #84]	; (800a19c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d009      	beq.n	800a160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a16      	ldr	r2, [pc, #88]	; (800a1ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d004      	beq.n	800a160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a15      	ldr	r2, [pc, #84]	; (800a1b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d10c      	bne.n	800a17a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a166:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	4313      	orrs	r3, r2
 800a170:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	40010000 	.word	0x40010000
 800a19c:	40010400 	.word	0x40010400
 800a1a0:	40000400 	.word	0x40000400
 800a1a4:	40000800 	.word	0x40000800
 800a1a8:	40000c00 	.word	0x40000c00
 800a1ac:	40014000 	.word	0x40014000
 800a1b0:	40001800 	.word	0x40001800

0800a1b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d101      	bne.n	800a1d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a1cc:	2302      	movs	r3, #2
 800a1ce:	e065      	b.n	800a29c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	695b      	ldr	r3, [r3, #20]
 800a228:	4313      	orrs	r3, r2
 800a22a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a236:	4313      	orrs	r3, r2
 800a238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	699b      	ldr	r3, [r3, #24]
 800a244:	041b      	lsls	r3, r3, #16
 800a246:	4313      	orrs	r3, r2
 800a248:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a16      	ldr	r2, [pc, #88]	; (800a2a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d004      	beq.n	800a25e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a14      	ldr	r2, [pc, #80]	; (800a2ac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d115      	bne.n	800a28a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a268:	051b      	lsls	r3, r3, #20
 800a26a:	4313      	orrs	r3, r2
 800a26c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	69db      	ldr	r3, [r3, #28]
 800a278:	4313      	orrs	r3, r2
 800a27a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	6a1b      	ldr	r3, [r3, #32]
 800a286:	4313      	orrs	r3, r2
 800a288:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3714      	adds	r7, #20
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr
 800a2a8:	40010000 	.word	0x40010000
 800a2ac:	40010400 	.word	0x40010400

0800a2b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2b8:	bf00      	nop
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2cc:	bf00      	nop
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d101      	bne.n	800a2fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e040      	b.n	800a380 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a302:	2b00      	cmp	r3, #0
 800a304:	d106      	bne.n	800a314 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f7f8 f8ee 	bl	80024f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2224      	movs	r2, #36	; 0x24
 800a318:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f022 0201 	bic.w	r2, r2, #1
 800a328:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f8c0 	bl	800a4b0 <UART_SetConfig>
 800a330:	4603      	mov	r3, r0
 800a332:	2b01      	cmp	r3, #1
 800a334:	d101      	bne.n	800a33a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a336:	2301      	movs	r3, #1
 800a338:	e022      	b.n	800a380 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d002      	beq.n	800a348 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fb16 	bl	800a974 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	685a      	ldr	r2, [r3, #4]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a356:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	689a      	ldr	r2, [r3, #8]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a366:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f042 0201 	orr.w	r2, r2, #1
 800a376:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 fb9d 	bl	800aab8 <UART_CheckIdleState>
 800a37e:	4603      	mov	r3, r0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b08a      	sub	sp, #40	; 0x28
 800a38c:	af02      	add	r7, sp, #8
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	603b      	str	r3, [r7, #0]
 800a394:	4613      	mov	r3, r2
 800a396:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a39c:	2b20      	cmp	r3, #32
 800a39e:	f040 8081 	bne.w	800a4a4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d002      	beq.n	800a3ae <HAL_UART_Transmit+0x26>
 800a3a8:	88fb      	ldrh	r3, [r7, #6]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d101      	bne.n	800a3b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e079      	b.n	800a4a6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d101      	bne.n	800a3c0 <HAL_UART_Transmit+0x38>
 800a3bc:	2302      	movs	r3, #2
 800a3be:	e072      	b.n	800a4a6 <HAL_UART_Transmit+0x11e>
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2221      	movs	r2, #33	; 0x21
 800a3d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a3d6:	f7f8 fb61 	bl	8002a9c <HAL_GetTick>
 800a3da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	88fa      	ldrh	r2, [r7, #6]
 800a3e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	88fa      	ldrh	r2, [r7, #6]
 800a3e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3f4:	d108      	bne.n	800a408 <HAL_UART_Transmit+0x80>
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d104      	bne.n	800a408 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a3fe:	2300      	movs	r3, #0
 800a400:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	61bb      	str	r3, [r7, #24]
 800a406:	e003      	b.n	800a410 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a40c:	2300      	movs	r3, #0
 800a40e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2200      	movs	r2, #0
 800a414:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a418:	e02c      	b.n	800a474 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	9300      	str	r3, [sp, #0]
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	2200      	movs	r2, #0
 800a422:	2180      	movs	r1, #128	; 0x80
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f000 fb7a 	bl	800ab1e <UART_WaitOnFlagUntilTimeout>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d001      	beq.n	800a434 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a430:	2303      	movs	r3, #3
 800a432:	e038      	b.n	800a4a6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d10b      	bne.n	800a452 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	881b      	ldrh	r3, [r3, #0]
 800a43e:	461a      	mov	r2, r3
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a448:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	3302      	adds	r3, #2
 800a44e:	61bb      	str	r3, [r7, #24]
 800a450:	e007      	b.n	800a462 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	781a      	ldrb	r2, [r3, #0]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	3301      	adds	r3, #1
 800a460:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a468:	b29b      	uxth	r3, r3
 800a46a:	3b01      	subs	r3, #1
 800a46c:	b29a      	uxth	r2, r3
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d1cc      	bne.n	800a41a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	9300      	str	r3, [sp, #0]
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	2200      	movs	r2, #0
 800a488:	2140      	movs	r1, #64	; 0x40
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f000 fb47 	bl	800ab1e <UART_WaitOnFlagUntilTimeout>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d001      	beq.n	800a49a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800a496:	2303      	movs	r3, #3
 800a498:	e005      	b.n	800a4a6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2220      	movs	r2, #32
 800a49e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	e000      	b.n	800a4a6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800a4a4:	2302      	movs	r3, #2
  }
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3720      	adds	r7, #32
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
	...

0800a4b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b088      	sub	sp, #32
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	689a      	ldr	r2, [r3, #8]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	691b      	ldr	r3, [r3, #16]
 800a4c4:	431a      	orrs	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	695b      	ldr	r3, [r3, #20]
 800a4ca:	431a      	orrs	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	69db      	ldr	r3, [r3, #28]
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	4ba7      	ldr	r3, [pc, #668]	; (800a778 <UART_SetConfig+0x2c8>)
 800a4dc:	4013      	ands	r3, r2
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	6812      	ldr	r2, [r2, #0]
 800a4e2:	6979      	ldr	r1, [r7, #20]
 800a4e4:	430b      	orrs	r3, r1
 800a4e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	68da      	ldr	r2, [r3, #12]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	430a      	orrs	r2, r1
 800a4fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	699b      	ldr	r3, [r3, #24]
 800a502:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a1b      	ldr	r3, [r3, #32]
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	697a      	ldr	r2, [r7, #20]
 800a51e:	430a      	orrs	r2, r1
 800a520:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a95      	ldr	r2, [pc, #596]	; (800a77c <UART_SetConfig+0x2cc>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d120      	bne.n	800a56e <UART_SetConfig+0xbe>
 800a52c:	4b94      	ldr	r3, [pc, #592]	; (800a780 <UART_SetConfig+0x2d0>)
 800a52e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a532:	f003 0303 	and.w	r3, r3, #3
 800a536:	2b03      	cmp	r3, #3
 800a538:	d816      	bhi.n	800a568 <UART_SetConfig+0xb8>
 800a53a:	a201      	add	r2, pc, #4	; (adr r2, 800a540 <UART_SetConfig+0x90>)
 800a53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a540:	0800a551 	.word	0x0800a551
 800a544:	0800a55d 	.word	0x0800a55d
 800a548:	0800a557 	.word	0x0800a557
 800a54c:	0800a563 	.word	0x0800a563
 800a550:	2301      	movs	r3, #1
 800a552:	77fb      	strb	r3, [r7, #31]
 800a554:	e14f      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a556:	2302      	movs	r3, #2
 800a558:	77fb      	strb	r3, [r7, #31]
 800a55a:	e14c      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a55c:	2304      	movs	r3, #4
 800a55e:	77fb      	strb	r3, [r7, #31]
 800a560:	e149      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a562:	2308      	movs	r3, #8
 800a564:	77fb      	strb	r3, [r7, #31]
 800a566:	e146      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a568:	2310      	movs	r3, #16
 800a56a:	77fb      	strb	r3, [r7, #31]
 800a56c:	e143      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a84      	ldr	r2, [pc, #528]	; (800a784 <UART_SetConfig+0x2d4>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d132      	bne.n	800a5de <UART_SetConfig+0x12e>
 800a578:	4b81      	ldr	r3, [pc, #516]	; (800a780 <UART_SetConfig+0x2d0>)
 800a57a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a57e:	f003 030c 	and.w	r3, r3, #12
 800a582:	2b0c      	cmp	r3, #12
 800a584:	d828      	bhi.n	800a5d8 <UART_SetConfig+0x128>
 800a586:	a201      	add	r2, pc, #4	; (adr r2, 800a58c <UART_SetConfig+0xdc>)
 800a588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58c:	0800a5c1 	.word	0x0800a5c1
 800a590:	0800a5d9 	.word	0x0800a5d9
 800a594:	0800a5d9 	.word	0x0800a5d9
 800a598:	0800a5d9 	.word	0x0800a5d9
 800a59c:	0800a5cd 	.word	0x0800a5cd
 800a5a0:	0800a5d9 	.word	0x0800a5d9
 800a5a4:	0800a5d9 	.word	0x0800a5d9
 800a5a8:	0800a5d9 	.word	0x0800a5d9
 800a5ac:	0800a5c7 	.word	0x0800a5c7
 800a5b0:	0800a5d9 	.word	0x0800a5d9
 800a5b4:	0800a5d9 	.word	0x0800a5d9
 800a5b8:	0800a5d9 	.word	0x0800a5d9
 800a5bc:	0800a5d3 	.word	0x0800a5d3
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	77fb      	strb	r3, [r7, #31]
 800a5c4:	e117      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a5c6:	2302      	movs	r3, #2
 800a5c8:	77fb      	strb	r3, [r7, #31]
 800a5ca:	e114      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a5cc:	2304      	movs	r3, #4
 800a5ce:	77fb      	strb	r3, [r7, #31]
 800a5d0:	e111      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a5d2:	2308      	movs	r3, #8
 800a5d4:	77fb      	strb	r3, [r7, #31]
 800a5d6:	e10e      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a5d8:	2310      	movs	r3, #16
 800a5da:	77fb      	strb	r3, [r7, #31]
 800a5dc:	e10b      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a69      	ldr	r2, [pc, #420]	; (800a788 <UART_SetConfig+0x2d8>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d120      	bne.n	800a62a <UART_SetConfig+0x17a>
 800a5e8:	4b65      	ldr	r3, [pc, #404]	; (800a780 <UART_SetConfig+0x2d0>)
 800a5ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a5f2:	2b30      	cmp	r3, #48	; 0x30
 800a5f4:	d013      	beq.n	800a61e <UART_SetConfig+0x16e>
 800a5f6:	2b30      	cmp	r3, #48	; 0x30
 800a5f8:	d814      	bhi.n	800a624 <UART_SetConfig+0x174>
 800a5fa:	2b20      	cmp	r3, #32
 800a5fc:	d009      	beq.n	800a612 <UART_SetConfig+0x162>
 800a5fe:	2b20      	cmp	r3, #32
 800a600:	d810      	bhi.n	800a624 <UART_SetConfig+0x174>
 800a602:	2b00      	cmp	r3, #0
 800a604:	d002      	beq.n	800a60c <UART_SetConfig+0x15c>
 800a606:	2b10      	cmp	r3, #16
 800a608:	d006      	beq.n	800a618 <UART_SetConfig+0x168>
 800a60a:	e00b      	b.n	800a624 <UART_SetConfig+0x174>
 800a60c:	2300      	movs	r3, #0
 800a60e:	77fb      	strb	r3, [r7, #31]
 800a610:	e0f1      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a612:	2302      	movs	r3, #2
 800a614:	77fb      	strb	r3, [r7, #31]
 800a616:	e0ee      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a618:	2304      	movs	r3, #4
 800a61a:	77fb      	strb	r3, [r7, #31]
 800a61c:	e0eb      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a61e:	2308      	movs	r3, #8
 800a620:	77fb      	strb	r3, [r7, #31]
 800a622:	e0e8      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a624:	2310      	movs	r3, #16
 800a626:	77fb      	strb	r3, [r7, #31]
 800a628:	e0e5      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a57      	ldr	r2, [pc, #348]	; (800a78c <UART_SetConfig+0x2dc>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d120      	bne.n	800a676 <UART_SetConfig+0x1c6>
 800a634:	4b52      	ldr	r3, [pc, #328]	; (800a780 <UART_SetConfig+0x2d0>)
 800a636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a63a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a63e:	2bc0      	cmp	r3, #192	; 0xc0
 800a640:	d013      	beq.n	800a66a <UART_SetConfig+0x1ba>
 800a642:	2bc0      	cmp	r3, #192	; 0xc0
 800a644:	d814      	bhi.n	800a670 <UART_SetConfig+0x1c0>
 800a646:	2b80      	cmp	r3, #128	; 0x80
 800a648:	d009      	beq.n	800a65e <UART_SetConfig+0x1ae>
 800a64a:	2b80      	cmp	r3, #128	; 0x80
 800a64c:	d810      	bhi.n	800a670 <UART_SetConfig+0x1c0>
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d002      	beq.n	800a658 <UART_SetConfig+0x1a8>
 800a652:	2b40      	cmp	r3, #64	; 0x40
 800a654:	d006      	beq.n	800a664 <UART_SetConfig+0x1b4>
 800a656:	e00b      	b.n	800a670 <UART_SetConfig+0x1c0>
 800a658:	2300      	movs	r3, #0
 800a65a:	77fb      	strb	r3, [r7, #31]
 800a65c:	e0cb      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a65e:	2302      	movs	r3, #2
 800a660:	77fb      	strb	r3, [r7, #31]
 800a662:	e0c8      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a664:	2304      	movs	r3, #4
 800a666:	77fb      	strb	r3, [r7, #31]
 800a668:	e0c5      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a66a:	2308      	movs	r3, #8
 800a66c:	77fb      	strb	r3, [r7, #31]
 800a66e:	e0c2      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a670:	2310      	movs	r3, #16
 800a672:	77fb      	strb	r3, [r7, #31]
 800a674:	e0bf      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a45      	ldr	r2, [pc, #276]	; (800a790 <UART_SetConfig+0x2e0>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d125      	bne.n	800a6cc <UART_SetConfig+0x21c>
 800a680:	4b3f      	ldr	r3, [pc, #252]	; (800a780 <UART_SetConfig+0x2d0>)
 800a682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a68a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a68e:	d017      	beq.n	800a6c0 <UART_SetConfig+0x210>
 800a690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a694:	d817      	bhi.n	800a6c6 <UART_SetConfig+0x216>
 800a696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a69a:	d00b      	beq.n	800a6b4 <UART_SetConfig+0x204>
 800a69c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6a0:	d811      	bhi.n	800a6c6 <UART_SetConfig+0x216>
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d003      	beq.n	800a6ae <UART_SetConfig+0x1fe>
 800a6a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6aa:	d006      	beq.n	800a6ba <UART_SetConfig+0x20a>
 800a6ac:	e00b      	b.n	800a6c6 <UART_SetConfig+0x216>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	77fb      	strb	r3, [r7, #31]
 800a6b2:	e0a0      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	77fb      	strb	r3, [r7, #31]
 800a6b8:	e09d      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a6ba:	2304      	movs	r3, #4
 800a6bc:	77fb      	strb	r3, [r7, #31]
 800a6be:	e09a      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a6c0:	2308      	movs	r3, #8
 800a6c2:	77fb      	strb	r3, [r7, #31]
 800a6c4:	e097      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a6c6:	2310      	movs	r3, #16
 800a6c8:	77fb      	strb	r3, [r7, #31]
 800a6ca:	e094      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a30      	ldr	r2, [pc, #192]	; (800a794 <UART_SetConfig+0x2e4>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d125      	bne.n	800a722 <UART_SetConfig+0x272>
 800a6d6:	4b2a      	ldr	r3, [pc, #168]	; (800a780 <UART_SetConfig+0x2d0>)
 800a6d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a6e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a6e4:	d017      	beq.n	800a716 <UART_SetConfig+0x266>
 800a6e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a6ea:	d817      	bhi.n	800a71c <UART_SetConfig+0x26c>
 800a6ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6f0:	d00b      	beq.n	800a70a <UART_SetConfig+0x25a>
 800a6f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6f6:	d811      	bhi.n	800a71c <UART_SetConfig+0x26c>
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d003      	beq.n	800a704 <UART_SetConfig+0x254>
 800a6fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a700:	d006      	beq.n	800a710 <UART_SetConfig+0x260>
 800a702:	e00b      	b.n	800a71c <UART_SetConfig+0x26c>
 800a704:	2301      	movs	r3, #1
 800a706:	77fb      	strb	r3, [r7, #31]
 800a708:	e075      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a70a:	2302      	movs	r3, #2
 800a70c:	77fb      	strb	r3, [r7, #31]
 800a70e:	e072      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a710:	2304      	movs	r3, #4
 800a712:	77fb      	strb	r3, [r7, #31]
 800a714:	e06f      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a716:	2308      	movs	r3, #8
 800a718:	77fb      	strb	r3, [r7, #31]
 800a71a:	e06c      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a71c:	2310      	movs	r3, #16
 800a71e:	77fb      	strb	r3, [r7, #31]
 800a720:	e069      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a1c      	ldr	r2, [pc, #112]	; (800a798 <UART_SetConfig+0x2e8>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d137      	bne.n	800a79c <UART_SetConfig+0x2ec>
 800a72c:	4b14      	ldr	r3, [pc, #80]	; (800a780 <UART_SetConfig+0x2d0>)
 800a72e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a732:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a736:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a73a:	d017      	beq.n	800a76c <UART_SetConfig+0x2bc>
 800a73c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a740:	d817      	bhi.n	800a772 <UART_SetConfig+0x2c2>
 800a742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a746:	d00b      	beq.n	800a760 <UART_SetConfig+0x2b0>
 800a748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a74c:	d811      	bhi.n	800a772 <UART_SetConfig+0x2c2>
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d003      	beq.n	800a75a <UART_SetConfig+0x2aa>
 800a752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a756:	d006      	beq.n	800a766 <UART_SetConfig+0x2b6>
 800a758:	e00b      	b.n	800a772 <UART_SetConfig+0x2c2>
 800a75a:	2300      	movs	r3, #0
 800a75c:	77fb      	strb	r3, [r7, #31]
 800a75e:	e04a      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a760:	2302      	movs	r3, #2
 800a762:	77fb      	strb	r3, [r7, #31]
 800a764:	e047      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a766:	2304      	movs	r3, #4
 800a768:	77fb      	strb	r3, [r7, #31]
 800a76a:	e044      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a76c:	2308      	movs	r3, #8
 800a76e:	77fb      	strb	r3, [r7, #31]
 800a770:	e041      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a772:	2310      	movs	r3, #16
 800a774:	77fb      	strb	r3, [r7, #31]
 800a776:	e03e      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a778:	efff69f3 	.word	0xefff69f3
 800a77c:	40011000 	.word	0x40011000
 800a780:	40023800 	.word	0x40023800
 800a784:	40004400 	.word	0x40004400
 800a788:	40004800 	.word	0x40004800
 800a78c:	40004c00 	.word	0x40004c00
 800a790:	40005000 	.word	0x40005000
 800a794:	40011400 	.word	0x40011400
 800a798:	40007800 	.word	0x40007800
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a71      	ldr	r2, [pc, #452]	; (800a968 <UART_SetConfig+0x4b8>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d125      	bne.n	800a7f2 <UART_SetConfig+0x342>
 800a7a6:	4b71      	ldr	r3, [pc, #452]	; (800a96c <UART_SetConfig+0x4bc>)
 800a7a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a7b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a7b4:	d017      	beq.n	800a7e6 <UART_SetConfig+0x336>
 800a7b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a7ba:	d817      	bhi.n	800a7ec <UART_SetConfig+0x33c>
 800a7bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7c0:	d00b      	beq.n	800a7da <UART_SetConfig+0x32a>
 800a7c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7c6:	d811      	bhi.n	800a7ec <UART_SetConfig+0x33c>
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d003      	beq.n	800a7d4 <UART_SetConfig+0x324>
 800a7cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7d0:	d006      	beq.n	800a7e0 <UART_SetConfig+0x330>
 800a7d2:	e00b      	b.n	800a7ec <UART_SetConfig+0x33c>
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	77fb      	strb	r3, [r7, #31]
 800a7d8:	e00d      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a7da:	2302      	movs	r3, #2
 800a7dc:	77fb      	strb	r3, [r7, #31]
 800a7de:	e00a      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a7e0:	2304      	movs	r3, #4
 800a7e2:	77fb      	strb	r3, [r7, #31]
 800a7e4:	e007      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a7e6:	2308      	movs	r3, #8
 800a7e8:	77fb      	strb	r3, [r7, #31]
 800a7ea:	e004      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a7ec:	2310      	movs	r3, #16
 800a7ee:	77fb      	strb	r3, [r7, #31]
 800a7f0:	e001      	b.n	800a7f6 <UART_SetConfig+0x346>
 800a7f2:	2310      	movs	r3, #16
 800a7f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	69db      	ldr	r3, [r3, #28]
 800a7fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7fe:	d15b      	bne.n	800a8b8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800a800:	7ffb      	ldrb	r3, [r7, #31]
 800a802:	2b08      	cmp	r3, #8
 800a804:	d827      	bhi.n	800a856 <UART_SetConfig+0x3a6>
 800a806:	a201      	add	r2, pc, #4	; (adr r2, 800a80c <UART_SetConfig+0x35c>)
 800a808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80c:	0800a831 	.word	0x0800a831
 800a810:	0800a839 	.word	0x0800a839
 800a814:	0800a841 	.word	0x0800a841
 800a818:	0800a857 	.word	0x0800a857
 800a81c:	0800a847 	.word	0x0800a847
 800a820:	0800a857 	.word	0x0800a857
 800a824:	0800a857 	.word	0x0800a857
 800a828:	0800a857 	.word	0x0800a857
 800a82c:	0800a84f 	.word	0x0800a84f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a830:	f7fb fea0 	bl	8006574 <HAL_RCC_GetPCLK1Freq>
 800a834:	61b8      	str	r0, [r7, #24]
        break;
 800a836:	e013      	b.n	800a860 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a838:	f7fb feb0 	bl	800659c <HAL_RCC_GetPCLK2Freq>
 800a83c:	61b8      	str	r0, [r7, #24]
        break;
 800a83e:	e00f      	b.n	800a860 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a840:	4b4b      	ldr	r3, [pc, #300]	; (800a970 <UART_SetConfig+0x4c0>)
 800a842:	61bb      	str	r3, [r7, #24]
        break;
 800a844:	e00c      	b.n	800a860 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a846:	f7fb fdd3 	bl	80063f0 <HAL_RCC_GetSysClockFreq>
 800a84a:	61b8      	str	r0, [r7, #24]
        break;
 800a84c:	e008      	b.n	800a860 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a84e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a852:	61bb      	str	r3, [r7, #24]
        break;
 800a854:	e004      	b.n	800a860 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800a856:	2300      	movs	r3, #0
 800a858:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	77bb      	strb	r3, [r7, #30]
        break;
 800a85e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d074      	beq.n	800a950 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	005a      	lsls	r2, r3, #1
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	085b      	lsrs	r3, r3, #1
 800a870:	441a      	add	r2, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	fbb2 f3f3 	udiv	r3, r2, r3
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	2b0f      	cmp	r3, #15
 800a882:	d916      	bls.n	800a8b2 <UART_SetConfig+0x402>
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a88a:	d212      	bcs.n	800a8b2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	b29b      	uxth	r3, r3
 800a890:	f023 030f 	bic.w	r3, r3, #15
 800a894:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	085b      	lsrs	r3, r3, #1
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	f003 0307 	and.w	r3, r3, #7
 800a8a0:	b29a      	uxth	r2, r3
 800a8a2:	89fb      	ldrh	r3, [r7, #14]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	89fa      	ldrh	r2, [r7, #14]
 800a8ae:	60da      	str	r2, [r3, #12]
 800a8b0:	e04e      	b.n	800a950 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	77bb      	strb	r3, [r7, #30]
 800a8b6:	e04b      	b.n	800a950 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a8b8:	7ffb      	ldrb	r3, [r7, #31]
 800a8ba:	2b08      	cmp	r3, #8
 800a8bc:	d827      	bhi.n	800a90e <UART_SetConfig+0x45e>
 800a8be:	a201      	add	r2, pc, #4	; (adr r2, 800a8c4 <UART_SetConfig+0x414>)
 800a8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c4:	0800a8e9 	.word	0x0800a8e9
 800a8c8:	0800a8f1 	.word	0x0800a8f1
 800a8cc:	0800a8f9 	.word	0x0800a8f9
 800a8d0:	0800a90f 	.word	0x0800a90f
 800a8d4:	0800a8ff 	.word	0x0800a8ff
 800a8d8:	0800a90f 	.word	0x0800a90f
 800a8dc:	0800a90f 	.word	0x0800a90f
 800a8e0:	0800a90f 	.word	0x0800a90f
 800a8e4:	0800a907 	.word	0x0800a907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8e8:	f7fb fe44 	bl	8006574 <HAL_RCC_GetPCLK1Freq>
 800a8ec:	61b8      	str	r0, [r7, #24]
        break;
 800a8ee:	e013      	b.n	800a918 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8f0:	f7fb fe54 	bl	800659c <HAL_RCC_GetPCLK2Freq>
 800a8f4:	61b8      	str	r0, [r7, #24]
        break;
 800a8f6:	e00f      	b.n	800a918 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8f8:	4b1d      	ldr	r3, [pc, #116]	; (800a970 <UART_SetConfig+0x4c0>)
 800a8fa:	61bb      	str	r3, [r7, #24]
        break;
 800a8fc:	e00c      	b.n	800a918 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8fe:	f7fb fd77 	bl	80063f0 <HAL_RCC_GetSysClockFreq>
 800a902:	61b8      	str	r0, [r7, #24]
        break;
 800a904:	e008      	b.n	800a918 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a90a:	61bb      	str	r3, [r7, #24]
        break;
 800a90c:	e004      	b.n	800a918 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800a90e:	2300      	movs	r3, #0
 800a910:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a912:	2301      	movs	r3, #1
 800a914:	77bb      	strb	r3, [r7, #30]
        break;
 800a916:	bf00      	nop
    }

    if (pclk != 0U)
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d018      	beq.n	800a950 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	085a      	lsrs	r2, r3, #1
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	441a      	add	r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a930:	b29b      	uxth	r3, r3
 800a932:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	2b0f      	cmp	r3, #15
 800a938:	d908      	bls.n	800a94c <UART_SetConfig+0x49c>
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a940:	d204      	bcs.n	800a94c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	693a      	ldr	r2, [r7, #16]
 800a948:	60da      	str	r2, [r3, #12]
 800a94a:	e001      	b.n	800a950 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a95c:	7fbb      	ldrb	r3, [r7, #30]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3720      	adds	r7, #32
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	40007c00 	.word	0x40007c00
 800a96c:	40023800 	.word	0x40023800
 800a970:	00f42400 	.word	0x00f42400

0800a974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a980:	f003 0301 	and.w	r3, r3, #1
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00a      	beq.n	800a99e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	430a      	orrs	r2, r1
 800a99c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a2:	f003 0302 	and.w	r3, r3, #2
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00a      	beq.n	800a9c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	430a      	orrs	r2, r1
 800a9be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c4:	f003 0304 	and.w	r3, r3, #4
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00a      	beq.n	800a9e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	430a      	orrs	r2, r1
 800a9e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e6:	f003 0308 	and.w	r3, r3, #8
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00a      	beq.n	800aa04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	430a      	orrs	r2, r1
 800aa02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa08:	f003 0310 	and.w	r3, r3, #16
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d00a      	beq.n	800aa26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	430a      	orrs	r2, r1
 800aa24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2a:	f003 0320 	and.w	r3, r3, #32
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00a      	beq.n	800aa48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	430a      	orrs	r2, r1
 800aa46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d01a      	beq.n	800aa8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	430a      	orrs	r2, r1
 800aa68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa72:	d10a      	bne.n	800aa8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	430a      	orrs	r2, r1
 800aa88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00a      	beq.n	800aaac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	430a      	orrs	r2, r1
 800aaaa:	605a      	str	r2, [r3, #4]
  }
}
 800aaac:	bf00      	nop
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b086      	sub	sp, #24
 800aabc:	af02      	add	r7, sp, #8
 800aabe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aac8:	f7f7 ffe8 	bl	8002a9c <HAL_GetTick>
 800aacc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f003 0308 	and.w	r3, r3, #8
 800aad8:	2b08      	cmp	r3, #8
 800aada:	d10e      	bne.n	800aafa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aadc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 f817 	bl	800ab1e <UART_WaitOnFlagUntilTimeout>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d001      	beq.n	800aafa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e00d      	b.n	800ab16 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2220      	movs	r2, #32
 800aafe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2220      	movs	r2, #32
 800ab04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b084      	sub	sp, #16
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	60f8      	str	r0, [r7, #12]
 800ab26:	60b9      	str	r1, [r7, #8]
 800ab28:	603b      	str	r3, [r7, #0]
 800ab2a:	4613      	mov	r3, r2
 800ab2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab2e:	e05e      	b.n	800abee <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab30:	69bb      	ldr	r3, [r7, #24]
 800ab32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab36:	d05a      	beq.n	800abee <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab38:	f7f7 ffb0 	bl	8002a9c <HAL_GetTick>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	69ba      	ldr	r2, [r7, #24]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d302      	bcc.n	800ab4e <UART_WaitOnFlagUntilTimeout+0x30>
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d11b      	bne.n	800ab86 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ab5c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	689a      	ldr	r2, [r3, #8]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f022 0201 	bic.w	r2, r2, #1
 800ab6c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2220      	movs	r2, #32
 800ab72:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2220      	movs	r2, #32
 800ab78:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ab82:	2303      	movs	r3, #3
 800ab84:	e043      	b.n	800ac0e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f003 0304 	and.w	r3, r3, #4
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d02c      	beq.n	800abee <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	69db      	ldr	r3, [r3, #28]
 800ab9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aba2:	d124      	bne.n	800abee <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800abac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800abbc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	689a      	ldr	r2, [r3, #8]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f022 0201 	bic.w	r2, r2, #1
 800abcc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2220      	movs	r2, #32
 800abd2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2220      	movs	r2, #32
 800abd8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2220      	movs	r2, #32
 800abde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800abea:	2303      	movs	r3, #3
 800abec:	e00f      	b.n	800ac0e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	69da      	ldr	r2, [r3, #28]
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	4013      	ands	r3, r2
 800abf8:	68ba      	ldr	r2, [r7, #8]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	bf0c      	ite	eq
 800abfe:	2301      	moveq	r3, #1
 800ac00:	2300      	movne	r3, #0
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	461a      	mov	r2, r3
 800ac06:	79fb      	ldrb	r3, [r7, #7]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d091      	beq.n	800ab30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3710      	adds	r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
	...

0800ac18 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b085      	sub	sp, #20
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800ac22:	2300      	movs	r3, #0
 800ac24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800ac26:	2300      	movs	r3, #0
 800ac28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d027      	beq.n	800ac82 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	4b2f      	ldr	r3, [pc, #188]	; (800acf8 <FMC_SDRAM_Init+0xe0>)
 800ac3c:	4013      	ands	r3, r2
 800ac3e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ac48:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800ac4e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800ac54:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800ac5a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800ac60:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800ac66:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800ac6c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ac72:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	4313      	orrs	r3, r2
 800ac78:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	601a      	str	r2, [r3, #0]
 800ac80:	e032      	b.n	800ace8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ac8e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ac98:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ac9e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	4b12      	ldr	r3, [pc, #72]	; (800acf8 <FMC_SDRAM_Init+0xe0>)
 800acb0:	4013      	ands	r3, r2
 800acb2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800acbc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800acc2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800acc8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800acce:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800acd4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800acd6:	68ba      	ldr	r2, [r7, #8]
 800acd8:	4313      	orrs	r3, r2
 800acda:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	68ba      	ldr	r2, [r7, #8]
 800ace6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3714      	adds	r7, #20
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	ffff8000 	.word	0xffff8000

0800acfc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b087      	sub	sp, #28
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d02e      	beq.n	800ad74 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ad22:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ad32:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800ad3c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	3b01      	subs	r3, #1
 800ad44:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ad46:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	3b01      	subs	r3, #1
 800ad4e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800ad50:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	695b      	ldr	r3, [r3, #20]
 800ad56:	3b01      	subs	r3, #1
 800ad58:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ad5a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	699b      	ldr	r3, [r3, #24]
 800ad60:	3b01      	subs	r3, #1
 800ad62:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ad64:	4313      	orrs	r3, r2
 800ad66:	697a      	ldr	r2, [r7, #20]
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	697a      	ldr	r2, [r7, #20]
 800ad70:	609a      	str	r2, [r3, #8]
 800ad72:	e039      	b.n	800ade8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800ad7a:	697a      	ldr	r2, [r7, #20]
 800ad7c:	4b1e      	ldr	r3, [pc, #120]	; (800adf8 <FMC_SDRAM_Timing_Init+0xfc>)
 800ad7e:	4013      	ands	r3, r2
 800ad80:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	68db      	ldr	r3, [r3, #12]
 800ad86:	3b01      	subs	r3, #1
 800ad88:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	695b      	ldr	r3, [r3, #20]
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ad92:	4313      	orrs	r3, r2
 800ad94:	697a      	ldr	r2, [r7, #20]
 800ad96:	4313      	orrs	r3, r2
 800ad98:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ada6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	3b01      	subs	r3, #1
 800adb4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800adb6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	3b01      	subs	r3, #1
 800adbe:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800adc0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	691b      	ldr	r3, [r3, #16]
 800adc6:	3b01      	subs	r3, #1
 800adc8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800adca:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	699b      	ldr	r3, [r3, #24]
 800add0:	3b01      	subs	r3, #1
 800add2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800add4:	4313      	orrs	r3, r2
 800add6:	693a      	ldr	r2, [r7, #16]
 800add8:	4313      	orrs	r3, r2
 800adda:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	693a      	ldr	r2, [r7, #16]
 800ade6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	371c      	adds	r7, #28
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop
 800adf8:	ff0f0fff 	.word	0xff0f0fff

0800adfc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800adfc:	b084      	sub	sp, #16
 800adfe:	b480      	push	{r7}
 800ae00:	b085      	sub	sp, #20
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
 800ae06:	f107 001c 	add.w	r0, r7, #28
 800ae0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ae12:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ae14:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ae16:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ae18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ae1a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ae1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ae1e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ae20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ae22:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ae24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ae26:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	685a      	ldr	r2, [r3, #4]
 800ae32:	4b07      	ldr	r3, [pc, #28]	; (800ae50 <SDMMC_Init+0x54>)
 800ae34:	4013      	ands	r3, r2
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	431a      	orrs	r2, r3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ae3e:	2300      	movs	r3, #0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3714      	adds	r7, #20
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	b004      	add	sp, #16
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	ffff8100 	.word	0xffff8100

0800ae54 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	370c      	adds	r7, #12
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800ae6e:	b480      	push	{r7}
 800ae70:	b083      	sub	sp, #12
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
 800ae76:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae82:	2300      	movs	r3, #0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	370c      	adds	r7, #12
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2203      	movs	r2, #3
 800ae9c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ae9e:	2002      	movs	r0, #2
 800aea0:	f7f7 fe08 	bl	8002ab4 <HAL_Delay>
  
  return HAL_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3708      	adds	r7, #8
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800aeae:	b480      	push	{r7}
 800aeb0:	b083      	sub	sp, #12
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 0303 	and.w	r3, r3, #3
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	370c      	adds	r7, #12
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr
	...

0800aecc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800aecc:	b480      	push	{r7}
 800aece:	b085      	sub	sp, #20
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aed6:	2300      	movs	r3, #0
 800aed8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aeea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800aef0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800aef6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	68da      	ldr	r2, [r3, #12]
 800af02:	4b06      	ldr	r3, [pc, #24]	; (800af1c <SDMMC_SendCommand+0x50>)
 800af04:	4013      	ands	r3, r2
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	431a      	orrs	r2, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800af0e:	2300      	movs	r3, #0
}
 800af10:	4618      	mov	r0, r3
 800af12:	3714      	adds	r7, #20
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr
 800af1c:	fffff000 	.word	0xfffff000

0800af20 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	691b      	ldr	r3, [r3, #16]
 800af2c:	b2db      	uxtb	r3, r3
}
 800af2e:	4618      	mov	r0, r3
 800af30:	370c      	adds	r7, #12
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr

0800af3a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800af3a:	b480      	push	{r7}
 800af3c:	b085      	sub	sp, #20
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
 800af42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	3314      	adds	r3, #20
 800af48:	461a      	mov	r2, r3
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	4413      	add	r3, r2
 800af4e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
}  
 800af54:	4618      	mov	r0, r3
 800af56:	3714      	adds	r7, #20
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800af6a:	2300      	movs	r3, #0
 800af6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	685a      	ldr	r2, [r3, #4]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800af86:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800af8c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800af92:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800af94:	68fa      	ldr	r2, [r7, #12]
 800af96:	4313      	orrs	r3, r2
 800af98:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af9e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	431a      	orrs	r2, r3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800afaa:	2300      	movs	r3, #0

}
 800afac:	4618      	mov	r0, r3
 800afae:	3714      	adds	r7, #20
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b088      	sub	sp, #32
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800afc6:	2310      	movs	r3, #16
 800afc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afca:	2340      	movs	r3, #64	; 0x40
 800afcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afce:	2300      	movs	r3, #0
 800afd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afd8:	f107 0308 	add.w	r3, r7, #8
 800afdc:	4619      	mov	r1, r3
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f7ff ff74 	bl	800aecc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800afe4:	f241 3288 	movw	r2, #5000	; 0x1388
 800afe8:	2110      	movs	r1, #16
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 fa46 	bl	800b47c <SDMMC_GetCmdResp1>
 800aff0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aff2:	69fb      	ldr	r3, [r7, #28]
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3720      	adds	r7, #32
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b088      	sub	sp, #32
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b00a:	2311      	movs	r3, #17
 800b00c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b00e:	2340      	movs	r3, #64	; 0x40
 800b010:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b012:	2300      	movs	r3, #0
 800b014:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b01a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b01c:	f107 0308 	add.w	r3, r7, #8
 800b020:	4619      	mov	r1, r3
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f7ff ff52 	bl	800aecc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b028:	f241 3288 	movw	r2, #5000	; 0x1388
 800b02c:	2111      	movs	r1, #17
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 fa24 	bl	800b47c <SDMMC_GetCmdResp1>
 800b034:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b036:	69fb      	ldr	r3, [r7, #28]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3720      	adds	r7, #32
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b088      	sub	sp, #32
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b04e:	2312      	movs	r3, #18
 800b050:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b052:	2340      	movs	r3, #64	; 0x40
 800b054:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b056:	2300      	movs	r3, #0
 800b058:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b05a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b05e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b060:	f107 0308 	add.w	r3, r7, #8
 800b064:	4619      	mov	r1, r3
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f7ff ff30 	bl	800aecc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b06c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b070:	2112      	movs	r1, #18
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 fa02 	bl	800b47c <SDMMC_GetCmdResp1>
 800b078:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b07a:	69fb      	ldr	r3, [r7, #28]
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3720      	adds	r7, #32
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b088      	sub	sp, #32
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b092:	2318      	movs	r3, #24
 800b094:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b096:	2340      	movs	r3, #64	; 0x40
 800b098:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b09a:	2300      	movs	r3, #0
 800b09c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b09e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0a4:	f107 0308 	add.w	r3, r7, #8
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f7ff ff0e 	bl	800aecc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b0b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0b4:	2118      	movs	r1, #24
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 f9e0 	bl	800b47c <SDMMC_GetCmdResp1>
 800b0bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0be:	69fb      	ldr	r3, [r7, #28]
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3720      	adds	r7, #32
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b088      	sub	sp, #32
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b0d6:	2319      	movs	r3, #25
 800b0d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0da:	2340      	movs	r3, #64	; 0x40
 800b0dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0e8:	f107 0308 	add.w	r3, r7, #8
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f7ff feec 	bl	800aecc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b0f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0f8:	2119      	movs	r1, #25
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 f9be 	bl	800b47c <SDMMC_GetCmdResp1>
 800b100:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b102:	69fb      	ldr	r3, [r7, #28]
}
 800b104:	4618      	mov	r0, r3
 800b106:	3720      	adds	r7, #32
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b088      	sub	sp, #32
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b114:	2300      	movs	r3, #0
 800b116:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b118:	230c      	movs	r3, #12
 800b11a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b11c:	2340      	movs	r3, #64	; 0x40
 800b11e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b120:	2300      	movs	r3, #0
 800b122:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b128:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b12a:	f107 0308 	add.w	r3, r7, #8
 800b12e:	4619      	mov	r1, r3
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f7ff fecb 	bl	800aecc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b136:	4a05      	ldr	r2, [pc, #20]	; (800b14c <SDMMC_CmdStopTransfer+0x40>)
 800b138:	210c      	movs	r1, #12
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 f99e 	bl	800b47c <SDMMC_GetCmdResp1>
 800b140:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b142:	69fb      	ldr	r3, [r7, #28]
}
 800b144:	4618      	mov	r0, r3
 800b146:	3720      	adds	r7, #32
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	05f5e100 	.word	0x05f5e100

0800b150 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b08a      	sub	sp, #40	; 0x28
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b160:	2307      	movs	r3, #7
 800b162:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b164:	2340      	movs	r3, #64	; 0x40
 800b166:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b168:	2300      	movs	r3, #0
 800b16a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b16c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b170:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b172:	f107 0310 	add.w	r3, r7, #16
 800b176:	4619      	mov	r1, r3
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	f7ff fea7 	bl	800aecc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b17e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b182:	2107      	movs	r1, #7
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f000 f979 	bl	800b47c <SDMMC_GetCmdResp1>
 800b18a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3728      	adds	r7, #40	; 0x28
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b088      	sub	sp, #32
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1b4:	f107 0308 	add.w	r3, r7, #8
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f7ff fe86 	bl	800aecc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 f92f 	bl	800b424 <SDMMC_GetCmdError>
 800b1c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1c8:	69fb      	ldr	r3, [r7, #28]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3720      	adds	r7, #32
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b088      	sub	sp, #32
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b1da:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b1de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b1e0:	2308      	movs	r3, #8
 800b1e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1e4:	2340      	movs	r3, #64	; 0x40
 800b1e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1f2:	f107 0308 	add.w	r3, r7, #8
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f7ff fe67 	bl	800aecc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 fb26 	bl	800b850 <SDMMC_GetCmdResp7>
 800b204:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b206:	69fb      	ldr	r3, [r7, #28]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3720      	adds	r7, #32
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b088      	sub	sp, #32
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b21e:	2337      	movs	r3, #55	; 0x37
 800b220:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b222:	2340      	movs	r3, #64	; 0x40
 800b224:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b226:	2300      	movs	r3, #0
 800b228:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b22a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b22e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b230:	f107 0308 	add.w	r3, r7, #8
 800b234:	4619      	mov	r1, r3
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f7ff fe48 	bl	800aecc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b23c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b240:	2137      	movs	r1, #55	; 0x37
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 f91a 	bl	800b47c <SDMMC_GetCmdResp1>
 800b248:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b24a:	69fb      	ldr	r3, [r7, #28]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3720      	adds	r7, #32
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b088      	sub	sp, #32
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b25e:	683a      	ldr	r2, [r7, #0]
 800b260:	4b0d      	ldr	r3, [pc, #52]	; (800b298 <SDMMC_CmdAppOperCommand+0x44>)
 800b262:	4313      	orrs	r3, r2
 800b264:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b266:	2329      	movs	r3, #41	; 0x29
 800b268:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b26a:	2340      	movs	r3, #64	; 0x40
 800b26c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b26e:	2300      	movs	r3, #0
 800b270:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b276:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b278:	f107 0308 	add.w	r3, r7, #8
 800b27c:	4619      	mov	r1, r3
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f7ff fe24 	bl	800aecc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 fa2f 	bl	800b6e8 <SDMMC_GetCmdResp3>
 800b28a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b28c:	69fb      	ldr	r3, [r7, #28]
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3720      	adds	r7, #32
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	80100000 	.word	0x80100000

0800b29c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b088      	sub	sp, #32
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b2aa:	2306      	movs	r3, #6
 800b2ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2ae:	2340      	movs	r3, #64	; 0x40
 800b2b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2bc:	f107 0308 	add.w	r3, r7, #8
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f7ff fe02 	bl	800aecc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b2c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2cc:	2106      	movs	r1, #6
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 f8d4 	bl	800b47c <SDMMC_GetCmdResp1>
 800b2d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2d6:	69fb      	ldr	r3, [r7, #28]
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3720      	adds	r7, #32
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b088      	sub	sp, #32
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b2ec:	2333      	movs	r3, #51	; 0x33
 800b2ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2f0:	2340      	movs	r3, #64	; 0x40
 800b2f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2fe:	f107 0308 	add.w	r3, r7, #8
 800b302:	4619      	mov	r1, r3
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f7ff fde1 	bl	800aecc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b30a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b30e:	2133      	movs	r1, #51	; 0x33
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 f8b3 	bl	800b47c <SDMMC_GetCmdResp1>
 800b316:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b318:	69fb      	ldr	r3, [r7, #28]
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3720      	adds	r7, #32
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b088      	sub	sp, #32
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b32a:	2300      	movs	r3, #0
 800b32c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b32e:	2302      	movs	r3, #2
 800b330:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b332:	23c0      	movs	r3, #192	; 0xc0
 800b334:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b336:	2300      	movs	r3, #0
 800b338:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b33a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b33e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b340:	f107 0308 	add.w	r3, r7, #8
 800b344:	4619      	mov	r1, r3
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f7ff fdc0 	bl	800aecc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 f983 	bl	800b658 <SDMMC_GetCmdResp2>
 800b352:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b354:	69fb      	ldr	r3, [r7, #28]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3720      	adds	r7, #32
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b35e:	b580      	push	{r7, lr}
 800b360:	b088      	sub	sp, #32
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
 800b366:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b36c:	2309      	movs	r3, #9
 800b36e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b370:	23c0      	movs	r3, #192	; 0xc0
 800b372:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b374:	2300      	movs	r3, #0
 800b376:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b37c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b37e:	f107 0308 	add.w	r3, r7, #8
 800b382:	4619      	mov	r1, r3
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f7ff fda1 	bl	800aecc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 f964 	bl	800b658 <SDMMC_GetCmdResp2>
 800b390:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b392:	69fb      	ldr	r3, [r7, #28]
}
 800b394:	4618      	mov	r0, r3
 800b396:	3720      	adds	r7, #32
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b088      	sub	sp, #32
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b3aa:	2303      	movs	r3, #3
 800b3ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3ae:	2340      	movs	r3, #64	; 0x40
 800b3b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3bc:	f107 0308 	add.w	r3, r7, #8
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f7ff fd82 	bl	800aecc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b3c8:	683a      	ldr	r2, [r7, #0]
 800b3ca:	2103      	movs	r1, #3
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 f9c9 	bl	800b764 <SDMMC_GetCmdResp6>
 800b3d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3d4:	69fb      	ldr	r3, [r7, #28]
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3720      	adds	r7, #32
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b088      	sub	sp, #32
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
 800b3e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b3ec:	230d      	movs	r3, #13
 800b3ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3f0:	2340      	movs	r3, #64	; 0x40
 800b3f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3fe:	f107 0308 	add.w	r3, r7, #8
 800b402:	4619      	mov	r1, r3
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f7ff fd61 	bl	800aecc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b40a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b40e:	210d      	movs	r1, #13
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 f833 	bl	800b47c <SDMMC_GetCmdResp1>
 800b416:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b418:	69fb      	ldr	r3, [r7, #28]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3720      	adds	r7, #32
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
	...

0800b424 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b42c:	4b11      	ldr	r3, [pc, #68]	; (800b474 <SDMMC_GetCmdError+0x50>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a11      	ldr	r2, [pc, #68]	; (800b478 <SDMMC_GetCmdError+0x54>)
 800b432:	fba2 2303 	umull	r2, r3, r2, r3
 800b436:	0a5b      	lsrs	r3, r3, #9
 800b438:	f241 3288 	movw	r2, #5000	; 0x1388
 800b43c:	fb02 f303 	mul.w	r3, r2, r3
 800b440:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	1e5a      	subs	r2, r3, #1
 800b446:	60fa      	str	r2, [r7, #12]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d102      	bne.n	800b452 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b44c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b450:	e009      	b.n	800b466 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d0f1      	beq.n	800b442 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	22c5      	movs	r2, #197	; 0xc5
 800b462:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3714      	adds	r7, #20
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop
 800b474:	20000000 	.word	0x20000000
 800b478:	10624dd3 	.word	0x10624dd3

0800b47c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b088      	sub	sp, #32
 800b480:	af00      	add	r7, sp, #0
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	460b      	mov	r3, r1
 800b486:	607a      	str	r2, [r7, #4]
 800b488:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b48a:	4b70      	ldr	r3, [pc, #448]	; (800b64c <SDMMC_GetCmdResp1+0x1d0>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a70      	ldr	r2, [pc, #448]	; (800b650 <SDMMC_GetCmdResp1+0x1d4>)
 800b490:	fba2 2303 	umull	r2, r3, r2, r3
 800b494:	0a5a      	lsrs	r2, r3, #9
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	fb02 f303 	mul.w	r3, r2, r3
 800b49c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b49e:	69fb      	ldr	r3, [r7, #28]
 800b4a0:	1e5a      	subs	r2, r3, #1
 800b4a2:	61fa      	str	r2, [r7, #28]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d102      	bne.n	800b4ae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4ac:	e0c9      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4b2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d0ef      	beq.n	800b49e <SDMMC_GetCmdResp1+0x22>
 800b4be:	69bb      	ldr	r3, [r7, #24]
 800b4c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d1ea      	bne.n	800b49e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4cc:	f003 0304 	and.w	r3, r3, #4
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d004      	beq.n	800b4de <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2204      	movs	r2, #4
 800b4d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4da:	2304      	movs	r3, #4
 800b4dc:	e0b1      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4e2:	f003 0301 	and.w	r3, r3, #1
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d004      	beq.n	800b4f4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	e0a6      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	22c5      	movs	r2, #197	; 0xc5
 800b4f8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b4fa:	68f8      	ldr	r0, [r7, #12]
 800b4fc:	f7ff fd10 	bl	800af20 <SDMMC_GetCommandResponse>
 800b500:	4603      	mov	r3, r0
 800b502:	461a      	mov	r2, r3
 800b504:	7afb      	ldrb	r3, [r7, #11]
 800b506:	4293      	cmp	r3, r2
 800b508:	d001      	beq.n	800b50e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b50a:	2301      	movs	r3, #1
 800b50c:	e099      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b50e:	2100      	movs	r1, #0
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f7ff fd12 	bl	800af3a <SDMMC_GetResponse>
 800b516:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b518:	697a      	ldr	r2, [r7, #20]
 800b51a:	4b4e      	ldr	r3, [pc, #312]	; (800b654 <SDMMC_GetCmdResp1+0x1d8>)
 800b51c:	4013      	ands	r3, r2
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d101      	bne.n	800b526 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b522:	2300      	movs	r3, #0
 800b524:	e08d      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	da02      	bge.n	800b532 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b52c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b530:	e087      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d001      	beq.n	800b540 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b53c:	2340      	movs	r3, #64	; 0x40
 800b53e:	e080      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b546:	2b00      	cmp	r3, #0
 800b548:	d001      	beq.n	800b54e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b54a:	2380      	movs	r3, #128	; 0x80
 800b54c:	e079      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b554:	2b00      	cmp	r3, #0
 800b556:	d002      	beq.n	800b55e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b55c:	e071      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b564:	2b00      	cmp	r3, #0
 800b566:	d002      	beq.n	800b56e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b56c:	e069      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b574:	2b00      	cmp	r3, #0
 800b576:	d002      	beq.n	800b57e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b57c:	e061      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b584:	2b00      	cmp	r3, #0
 800b586:	d002      	beq.n	800b58e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b588:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b58c:	e059      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b59c:	e051      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d002      	beq.n	800b5ae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b5a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b5ac:	e049      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d002      	beq.n	800b5be <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b5b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b5bc:	e041      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d002      	beq.n	800b5ce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b5c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5cc:	e039      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d002      	beq.n	800b5de <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b5d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b5dc:	e031      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d002      	beq.n	800b5ee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b5e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b5ec:	e029      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d002      	beq.n	800b5fe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b5f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b5fc:	e021      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b604:	2b00      	cmp	r3, #0
 800b606:	d002      	beq.n	800b60e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b608:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b60c:	e019      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b614:	2b00      	cmp	r3, #0
 800b616:	d002      	beq.n	800b61e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b618:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b61c:	e011      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b624:	2b00      	cmp	r3, #0
 800b626:	d002      	beq.n	800b62e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b628:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b62c:	e009      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	f003 0308 	and.w	r3, r3, #8
 800b634:	2b00      	cmp	r3, #0
 800b636:	d002      	beq.n	800b63e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b638:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b63c:	e001      	b.n	800b642 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b63e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b642:	4618      	mov	r0, r3
 800b644:	3720      	adds	r7, #32
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop
 800b64c:	20000000 	.word	0x20000000
 800b650:	10624dd3 	.word	0x10624dd3
 800b654:	fdffe008 	.word	0xfdffe008

0800b658 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b660:	4b1f      	ldr	r3, [pc, #124]	; (800b6e0 <SDMMC_GetCmdResp2+0x88>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a1f      	ldr	r2, [pc, #124]	; (800b6e4 <SDMMC_GetCmdResp2+0x8c>)
 800b666:	fba2 2303 	umull	r2, r3, r2, r3
 800b66a:	0a5b      	lsrs	r3, r3, #9
 800b66c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b670:	fb02 f303 	mul.w	r3, r2, r3
 800b674:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	1e5a      	subs	r2, r3, #1
 800b67a:	60fa      	str	r2, [r7, #12]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d102      	bne.n	800b686 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b680:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b684:	e026      	b.n	800b6d4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b68a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b692:	2b00      	cmp	r3, #0
 800b694:	d0ef      	beq.n	800b676 <SDMMC_GetCmdResp2+0x1e>
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d1ea      	bne.n	800b676 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6a4:	f003 0304 	and.w	r3, r3, #4
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d004      	beq.n	800b6b6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2204      	movs	r2, #4
 800b6b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b6b2:	2304      	movs	r3, #4
 800b6b4:	e00e      	b.n	800b6d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ba:	f003 0301 	and.w	r3, r3, #1
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d004      	beq.n	800b6cc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	e003      	b.n	800b6d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	22c5      	movs	r2, #197	; 0xc5
 800b6d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b6d2:	2300      	movs	r3, #0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3714      	adds	r7, #20
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr
 800b6e0:	20000000 	.word	0x20000000
 800b6e4:	10624dd3 	.word	0x10624dd3

0800b6e8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b6f0:	4b1a      	ldr	r3, [pc, #104]	; (800b75c <SDMMC_GetCmdResp3+0x74>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a1a      	ldr	r2, [pc, #104]	; (800b760 <SDMMC_GetCmdResp3+0x78>)
 800b6f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b6fa:	0a5b      	lsrs	r3, r3, #9
 800b6fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b700:	fb02 f303 	mul.w	r3, r2, r3
 800b704:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	1e5a      	subs	r2, r3, #1
 800b70a:	60fa      	str	r2, [r7, #12]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d102      	bne.n	800b716 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b710:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b714:	e01b      	b.n	800b74e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b71a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b722:	2b00      	cmp	r3, #0
 800b724:	d0ef      	beq.n	800b706 <SDMMC_GetCmdResp3+0x1e>
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d1ea      	bne.n	800b706 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b734:	f003 0304 	and.w	r3, r3, #4
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d004      	beq.n	800b746 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2204      	movs	r2, #4
 800b740:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b742:	2304      	movs	r3, #4
 800b744:	e003      	b.n	800b74e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	22c5      	movs	r2, #197	; 0xc5
 800b74a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3714      	adds	r7, #20
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	20000000 	.word	0x20000000
 800b760:	10624dd3 	.word	0x10624dd3

0800b764 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b088      	sub	sp, #32
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	460b      	mov	r3, r1
 800b76e:	607a      	str	r2, [r7, #4]
 800b770:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b772:	4b35      	ldr	r3, [pc, #212]	; (800b848 <SDMMC_GetCmdResp6+0xe4>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a35      	ldr	r2, [pc, #212]	; (800b84c <SDMMC_GetCmdResp6+0xe8>)
 800b778:	fba2 2303 	umull	r2, r3, r2, r3
 800b77c:	0a5b      	lsrs	r3, r3, #9
 800b77e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b782:	fb02 f303 	mul.w	r3, r2, r3
 800b786:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	1e5a      	subs	r2, r3, #1
 800b78c:	61fa      	str	r2, [r7, #28]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d102      	bne.n	800b798 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b792:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b796:	e052      	b.n	800b83e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b79c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d0ef      	beq.n	800b788 <SDMMC_GetCmdResp6+0x24>
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d1ea      	bne.n	800b788 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7b6:	f003 0304 	and.w	r3, r3, #4
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d004      	beq.n	800b7c8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2204      	movs	r2, #4
 800b7c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b7c4:	2304      	movs	r3, #4
 800b7c6:	e03a      	b.n	800b83e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7cc:	f003 0301 	and.w	r3, r3, #1
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d004      	beq.n	800b7de <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e02f      	b.n	800b83e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f7ff fb9e 	bl	800af20 <SDMMC_GetCommandResponse>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	7afb      	ldrb	r3, [r7, #11]
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d001      	beq.n	800b7f2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	e025      	b.n	800b83e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	22c5      	movs	r2, #197	; 0xc5
 800b7f6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f7ff fb9d 	bl	800af3a <SDMMC_GetResponse>
 800b800:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d106      	bne.n	800b81a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	0c1b      	lsrs	r3, r3, #16
 800b810:	b29a      	uxth	r2, r3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b816:	2300      	movs	r3, #0
 800b818:	e011      	b.n	800b83e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b820:	2b00      	cmp	r3, #0
 800b822:	d002      	beq.n	800b82a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b828:	e009      	b.n	800b83e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b830:	2b00      	cmp	r3, #0
 800b832:	d002      	beq.n	800b83a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b838:	e001      	b.n	800b83e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b83a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3720      	adds	r7, #32
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	20000000 	.word	0x20000000
 800b84c:	10624dd3 	.word	0x10624dd3

0800b850 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b850:	b480      	push	{r7}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b858:	4b22      	ldr	r3, [pc, #136]	; (800b8e4 <SDMMC_GetCmdResp7+0x94>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a22      	ldr	r2, [pc, #136]	; (800b8e8 <SDMMC_GetCmdResp7+0x98>)
 800b85e:	fba2 2303 	umull	r2, r3, r2, r3
 800b862:	0a5b      	lsrs	r3, r3, #9
 800b864:	f241 3288 	movw	r2, #5000	; 0x1388
 800b868:	fb02 f303 	mul.w	r3, r2, r3
 800b86c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	1e5a      	subs	r2, r3, #1
 800b872:	60fa      	str	r2, [r7, #12]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d102      	bne.n	800b87e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b878:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b87c:	e02c      	b.n	800b8d8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b882:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d0ef      	beq.n	800b86e <SDMMC_GetCmdResp7+0x1e>
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b894:	2b00      	cmp	r3, #0
 800b896:	d1ea      	bne.n	800b86e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b89c:	f003 0304 	and.w	r3, r3, #4
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d004      	beq.n	800b8ae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2204      	movs	r2, #4
 800b8a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8aa:	2304      	movs	r3, #4
 800b8ac:	e014      	b.n	800b8d8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8b2:	f003 0301 	and.w	r3, r3, #1
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d004      	beq.n	800b8c4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e009      	b.n	800b8d8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d002      	beq.n	800b8d6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2240      	movs	r2, #64	; 0x40
 800b8d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b8d6:	2300      	movs	r3, #0
  
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3714      	adds	r7, #20
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	20000000 	.word	0x20000000
 800b8e8:	10624dd3 	.word	0x10624dd3

0800b8ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	f043 0201 	orr.w	r2, r3, #1
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	370c      	adds	r7, #12
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr

0800b90e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b90e:	b480      	push	{r7}
 800b910:	b083      	sub	sp, #12
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	f023 0201 	bic.w	r2, r3, #1
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b922:	2300      	movs	r3, #0
}
 800b924:	4618      	mov	r0, r3
 800b926:	370c      	adds	r7, #12
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b930:	b480      	push	{r7}
 800b932:	b085      	sub	sp, #20
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b93a:	2300      	movs	r3, #0
 800b93c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	019b      	lsls	r3, r3, #6
 800b942:	f043 0220 	orr.w	r2, r3, #32
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	3301      	adds	r3, #1
 800b94e:	60fb      	str	r3, [r7, #12]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	4a09      	ldr	r2, [pc, #36]	; (800b978 <USB_FlushTxFifo+0x48>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d901      	bls.n	800b95c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b958:	2303      	movs	r3, #3
 800b95a:	e006      	b.n	800b96a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	691b      	ldr	r3, [r3, #16]
 800b960:	f003 0320 	and.w	r3, r3, #32
 800b964:	2b20      	cmp	r3, #32
 800b966:	d0f0      	beq.n	800b94a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	00030d40 	.word	0x00030d40

0800b97c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b984:	2300      	movs	r3, #0
 800b986:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2210      	movs	r2, #16
 800b98c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	3301      	adds	r3, #1
 800b992:	60fb      	str	r3, [r7, #12]
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	4a09      	ldr	r2, [pc, #36]	; (800b9bc <USB_FlushRxFifo+0x40>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d901      	bls.n	800b9a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b99c:	2303      	movs	r3, #3
 800b99e:	e006      	b.n	800b9ae <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	691b      	ldr	r3, [r3, #16]
 800b9a4:	f003 0310 	and.w	r3, r3, #16
 800b9a8:	2b10      	cmp	r3, #16
 800b9aa:	d0f0      	beq.n	800b98e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3714      	adds	r7, #20
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	00030d40 	.word	0x00030d40

0800b9c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b089      	sub	sp, #36	; 0x24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b9d6:	88fb      	ldrh	r3, [r7, #6]
 800b9d8:	3303      	adds	r3, #3
 800b9da:	089b      	lsrs	r3, r3, #2
 800b9dc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b9de:	2300      	movs	r3, #0
 800b9e0:	61bb      	str	r3, [r7, #24]
 800b9e2:	e00b      	b.n	800b9fc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9ea:	681a      	ldr	r2, [r3, #0]
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	601a      	str	r2, [r3, #0]
    pDest++;
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	3304      	adds	r3, #4
 800b9f4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	61bb      	str	r3, [r7, #24]
 800b9fc:	69ba      	ldr	r2, [r7, #24]
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d3ef      	bcc.n	800b9e4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ba04:	69fb      	ldr	r3, [r7, #28]
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3724      	adds	r7, #36	; 0x24
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr

0800ba12 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ba12:	b480      	push	{r7}
 800ba14:	b085      	sub	sp, #20
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	695b      	ldr	r3, [r3, #20]
 800ba1e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	699b      	ldr	r3, [r3, #24]
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	4013      	ands	r3, r2
 800ba28:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3714      	adds	r7, #20
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b083      	sub	sp, #12
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	695b      	ldr	r3, [r3, #20]
 800ba44:	f003 0301 	and.w	r3, r3, #1
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	370c      	adds	r7, #12
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b085      	sub	sp, #20
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	68fa      	ldr	r2, [r7, #12]
 800ba6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba72:	f023 0303 	bic.w	r3, r3, #3
 800ba76:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	78fb      	ldrb	r3, [r7, #3]
 800ba82:	f003 0303 	and.w	r3, r3, #3
 800ba86:	68f9      	ldr	r1, [r7, #12]
 800ba88:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ba90:	78fb      	ldrb	r3, [r7, #3]
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d107      	bne.n	800baa6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800baa2:	6053      	str	r3, [r2, #4]
 800baa4:	e009      	b.n	800baba <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800baa6:	78fb      	ldrb	r3, [r7, #3]
 800baa8:	2b02      	cmp	r3, #2
 800baaa:	d106      	bne.n	800baba <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bab2:	461a      	mov	r2, r3
 800bab4:	f241 7370 	movw	r3, #6000	; 0x1770
 800bab8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800baba:	2300      	movs	r3, #0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3714      	adds	r7, #20
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr

0800bac8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bada:	695b      	ldr	r3, [r3, #20]
 800badc:	b29b      	uxth	r3, r3
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3714      	adds	r7, #20
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr

0800baea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800baea:	b480      	push	{r7}
 800baec:	b089      	sub	sp, #36	; 0x24
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
 800baf2:	460b      	mov	r3, r1
 800baf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800bafa:	78fb      	ldrb	r3, [r7, #3]
 800bafc:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800bafe:	2300      	movs	r3, #0
 800bb00:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	015a      	lsls	r2, r3, #5
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	4413      	add	r3, r2
 800bb0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	0c9b      	lsrs	r3, r3, #18
 800bb12:	f003 0303 	and.w	r3, r3, #3
 800bb16:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	015a      	lsls	r2, r3, #5
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	4413      	add	r3, r2
 800bb20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	0fdb      	lsrs	r3, r3, #31
 800bb28:	f003 0301 	and.w	r3, r3, #1
 800bb2c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	f003 0320 	and.w	r3, r3, #32
 800bb36:	2b20      	cmp	r3, #32
 800bb38:	d104      	bne.n	800bb44 <USB_HC_Halt+0x5a>
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d101      	bne.n	800bb44 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800bb40:	2300      	movs	r3, #0
 800bb42:	e0e8      	b.n	800bd16 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d002      	beq.n	800bb50 <USB_HC_Halt+0x66>
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	d173      	bne.n	800bc38 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	015a      	lsls	r2, r3, #5
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	4413      	add	r3, r2
 800bb58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	697a      	ldr	r2, [r7, #20]
 800bb60:	0151      	lsls	r1, r2, #5
 800bb62:	69ba      	ldr	r2, [r7, #24]
 800bb64:	440a      	add	r2, r1
 800bb66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb6e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	f003 0320 	and.w	r3, r3, #32
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f040 80cb 	bne.w	800bd14 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb82:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d143      	bne.n	800bc12 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	015a      	lsls	r2, r3, #5
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	4413      	add	r3, r2
 800bb92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	697a      	ldr	r2, [r7, #20]
 800bb9a:	0151      	lsls	r1, r2, #5
 800bb9c:	69ba      	ldr	r2, [r7, #24]
 800bb9e:	440a      	add	r2, r1
 800bba0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bba8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	015a      	lsls	r2, r3, #5
 800bbae:	69bb      	ldr	r3, [r7, #24]
 800bbb0:	4413      	add	r3, r2
 800bbb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	697a      	ldr	r2, [r7, #20]
 800bbba:	0151      	lsls	r1, r2, #5
 800bbbc:	69ba      	ldr	r2, [r7, #24]
 800bbbe:	440a      	add	r2, r1
 800bbc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bbc8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	015a      	lsls	r2, r3, #5
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	697a      	ldr	r2, [r7, #20]
 800bbda:	0151      	lsls	r1, r2, #5
 800bbdc:	69ba      	ldr	r2, [r7, #24]
 800bbde:	440a      	add	r2, r1
 800bbe0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbe4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bbe8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	3301      	adds	r3, #1
 800bbee:	61fb      	str	r3, [r7, #28]
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bbf6:	d81d      	bhi.n	800bc34 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	015a      	lsls	r2, r3, #5
 800bbfc:	69bb      	ldr	r3, [r7, #24]
 800bbfe:	4413      	add	r3, r2
 800bc00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc0e:	d0ec      	beq.n	800bbea <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bc10:	e080      	b.n	800bd14 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	015a      	lsls	r2, r3, #5
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	4413      	add	r3, r2
 800bc1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	697a      	ldr	r2, [r7, #20]
 800bc22:	0151      	lsls	r1, r2, #5
 800bc24:	69ba      	ldr	r2, [r7, #24]
 800bc26:	440a      	add	r2, r1
 800bc28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bc30:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bc32:	e06f      	b.n	800bd14 <USB_HC_Halt+0x22a>
            break;
 800bc34:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bc36:	e06d      	b.n	800bd14 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	015a      	lsls	r2, r3, #5
 800bc3c:	69bb      	ldr	r3, [r7, #24]
 800bc3e:	4413      	add	r3, r2
 800bc40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	697a      	ldr	r2, [r7, #20]
 800bc48:	0151      	lsls	r1, r2, #5
 800bc4a:	69ba      	ldr	r2, [r7, #24]
 800bc4c:	440a      	add	r2, r1
 800bc4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc56:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc5e:	691b      	ldr	r3, [r3, #16]
 800bc60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d143      	bne.n	800bcf0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	015a      	lsls	r2, r3, #5
 800bc6c:	69bb      	ldr	r3, [r7, #24]
 800bc6e:	4413      	add	r3, r2
 800bc70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	697a      	ldr	r2, [r7, #20]
 800bc78:	0151      	lsls	r1, r2, #5
 800bc7a:	69ba      	ldr	r2, [r7, #24]
 800bc7c:	440a      	add	r2, r1
 800bc7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc86:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	015a      	lsls	r2, r3, #5
 800bc8c:	69bb      	ldr	r3, [r7, #24]
 800bc8e:	4413      	add	r3, r2
 800bc90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	697a      	ldr	r2, [r7, #20]
 800bc98:	0151      	lsls	r1, r2, #5
 800bc9a:	69ba      	ldr	r2, [r7, #24]
 800bc9c:	440a      	add	r2, r1
 800bc9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bca6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	015a      	lsls	r2, r3, #5
 800bcac:	69bb      	ldr	r3, [r7, #24]
 800bcae:	4413      	add	r3, r2
 800bcb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	697a      	ldr	r2, [r7, #20]
 800bcb8:	0151      	lsls	r1, r2, #5
 800bcba:	69ba      	ldr	r2, [r7, #24]
 800bcbc:	440a      	add	r2, r1
 800bcbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bcc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bcc6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800bcc8:	69fb      	ldr	r3, [r7, #28]
 800bcca:	3301      	adds	r3, #1
 800bccc:	61fb      	str	r3, [r7, #28]
 800bcce:	69fb      	ldr	r3, [r7, #28]
 800bcd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bcd4:	d81d      	bhi.n	800bd12 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	015a      	lsls	r2, r3, #5
 800bcda:	69bb      	ldr	r3, [r7, #24]
 800bcdc:	4413      	add	r3, r2
 800bcde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bce8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcec:	d0ec      	beq.n	800bcc8 <USB_HC_Halt+0x1de>
 800bcee:	e011      	b.n	800bd14 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	015a      	lsls	r2, r3, #5
 800bcf4:	69bb      	ldr	r3, [r7, #24]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	697a      	ldr	r2, [r7, #20]
 800bd00:	0151      	lsls	r1, r2, #5
 800bd02:	69ba      	ldr	r2, [r7, #24]
 800bd04:	440a      	add	r2, r1
 800bd06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd0e:	6013      	str	r3, [r2, #0]
 800bd10:	e000      	b.n	800bd14 <USB_HC_Halt+0x22a>
          break;
 800bd12:	bf00      	nop
    }
  }

  return HAL_OK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3724      	adds	r7, #36	; 0x24
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr

0800bd22 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b086      	sub	sp, #24
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f7ff fdeb 	bl	800b90e <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800bd38:	2110      	movs	r1, #16
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f7ff fdf8 	bl	800b930 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f7ff fe1b 	bl	800b97c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800bd46:	2300      	movs	r3, #0
 800bd48:	613b      	str	r3, [r7, #16]
 800bd4a:	e01f      	b.n	800bd8c <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	015a      	lsls	r2, r3, #5
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	4413      	add	r3, r2
 800bd54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd62:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd6a:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bd72:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	015a      	lsls	r2, r3, #5
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	4413      	add	r3, r2
 800bd7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd80:	461a      	mov	r2, r3
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	3301      	adds	r3, #1
 800bd8a:	613b      	str	r3, [r7, #16]
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	2b0f      	cmp	r3, #15
 800bd90:	d9dc      	bls.n	800bd4c <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800bd92:	2300      	movs	r3, #0
 800bd94:	613b      	str	r3, [r7, #16]
 800bd96:	e034      	b.n	800be02 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	015a      	lsls	r2, r3, #5
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	4413      	add	r3, r2
 800bda0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bdae:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bdb6:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bdbe:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	015a      	lsls	r2, r3, #5
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	4413      	add	r3, r2
 800bdc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdcc:	461a      	mov	r2, r3
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	617b      	str	r3, [r7, #20]
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bdde:	d80c      	bhi.n	800bdfa <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	015a      	lsls	r2, r3, #5
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	4413      	add	r3, r2
 800bde8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bdf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdf6:	d0ec      	beq.n	800bdd2 <USB_StopHost+0xb0>
 800bdf8:	e000      	b.n	800bdfc <USB_StopHost+0xda>
        break;
 800bdfa:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	3301      	adds	r3, #1
 800be00:	613b      	str	r3, [r7, #16]
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	2b0f      	cmp	r3, #15
 800be06:	d9c7      	bls.n	800bd98 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be0e:	461a      	mov	r2, r3
 800be10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be14:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be1c:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f7ff fd64 	bl	800b8ec <USB_EnableGlobalInt>

  return HAL_OK;
 800be24:	2300      	movs	r3, #0
}
 800be26:	4618      	mov	r0, r3
 800be28:	3718      	adds	r7, #24
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
	...

0800be30 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800be34:	4904      	ldr	r1, [pc, #16]	; (800be48 <MX_FATFS_Init+0x18>)
 800be36:	4805      	ldr	r0, [pc, #20]	; (800be4c <MX_FATFS_Init+0x1c>)
 800be38:	f000 fa84 	bl	800c344 <FATFS_LinkDriver>
 800be3c:	4603      	mov	r3, r0
 800be3e:	461a      	mov	r2, r3
 800be40:	4b03      	ldr	r3, [pc, #12]	; (800be50 <MX_FATFS_Init+0x20>)
 800be42:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800be44:	bf00      	nop
 800be46:	bd80      	pop	{r7, pc}
 800be48:	20000f4c 	.word	0x20000f4c
 800be4c:	0800ddb8 	.word	0x0800ddb8
 800be50:	20000f48 	.word	0x20000f48

0800be54 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800be5a:	2300      	movs	r3, #0
 800be5c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800be5e:	f000 f879 	bl	800bf54 <BSP_SD_IsDetected>
 800be62:	4603      	mov	r3, r0
 800be64:	2b01      	cmp	r3, #1
 800be66:	d001      	beq.n	800be6c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800be68:	2302      	movs	r3, #2
 800be6a:	e012      	b.n	800be92 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800be6c:	480b      	ldr	r0, [pc, #44]	; (800be9c <BSP_SD_Init+0x48>)
 800be6e:	f7fb fe9d 	bl	8007bac <HAL_SD_Init>
 800be72:	4603      	mov	r3, r0
 800be74:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800be76:	79fb      	ldrb	r3, [r7, #7]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d109      	bne.n	800be90 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800be7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800be80:	4806      	ldr	r0, [pc, #24]	; (800be9c <BSP_SD_Init+0x48>)
 800be82:	f7fc fc7d 	bl	8008780 <HAL_SD_ConfigWideBusOperation>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d001      	beq.n	800be90 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800be8c:	2301      	movs	r3, #1
 800be8e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800be90:	79fb      	ldrb	r3, [r7, #7]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	20000988 	.word	0x20000988

0800bea0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b088      	sub	sp, #32
 800bea4:	af02      	add	r7, sp, #8
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	607a      	str	r2, [r7, #4]
 800beac:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800beae:	2300      	movs	r3, #0
 800beb0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	9300      	str	r3, [sp, #0]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	68ba      	ldr	r2, [r7, #8]
 800beba:	68f9      	ldr	r1, [r7, #12]
 800bebc:	4806      	ldr	r0, [pc, #24]	; (800bed8 <BSP_SD_ReadBlocks+0x38>)
 800bebe:	f7fb ff2b 	bl	8007d18 <HAL_SD_ReadBlocks>
 800bec2:	4603      	mov	r3, r0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d001      	beq.n	800becc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bec8:	2301      	movs	r3, #1
 800beca:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800becc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3718      	adds	r7, #24
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	bf00      	nop
 800bed8:	20000988 	.word	0x20000988

0800bedc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b088      	sub	sp, #32
 800bee0:	af02      	add	r7, sp, #8
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	607a      	str	r2, [r7, #4]
 800bee8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800beea:	2300      	movs	r3, #0
 800beec:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	9300      	str	r3, [sp, #0]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	68ba      	ldr	r2, [r7, #8]
 800bef6:	68f9      	ldr	r1, [r7, #12]
 800bef8:	4806      	ldr	r0, [pc, #24]	; (800bf14 <BSP_SD_WriteBlocks+0x38>)
 800befa:	f7fc f8eb 	bl	80080d4 <HAL_SD_WriteBlocks>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d001      	beq.n	800bf08 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bf04:	2301      	movs	r3, #1
 800bf06:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bf08:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3718      	adds	r7, #24
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	20000988 	.word	0x20000988

0800bf18 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bf1c:	4805      	ldr	r0, [pc, #20]	; (800bf34 <BSP_SD_GetCardState+0x1c>)
 800bf1e:	f7fc fcc9 	bl	80088b4 <HAL_SD_GetCardState>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b04      	cmp	r3, #4
 800bf26:	bf14      	ite	ne
 800bf28:	2301      	movne	r3, #1
 800bf2a:	2300      	moveq	r3, #0
 800bf2c:	b2db      	uxtb	r3, r3
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	20000988 	.word	0x20000988

0800bf38 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bf40:	6879      	ldr	r1, [r7, #4]
 800bf42:	4803      	ldr	r0, [pc, #12]	; (800bf50 <BSP_SD_GetCardInfo+0x18>)
 800bf44:	f7fc fbf0 	bl	8008728 <HAL_SD_GetCardInfo>
}
 800bf48:	bf00      	nop
 800bf4a:	3708      	adds	r7, #8
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	20000988 	.word	0x20000988

0800bf54 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bf5e:	f000 f80b 	bl	800bf78 <BSP_PlatformIsDetected>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d101      	bne.n	800bf6c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bf6c:	79fb      	ldrb	r3, [r7, #7]
 800bf6e:	b2db      	uxtb	r3, r3
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3708      	adds	r7, #8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bf82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bf86:	4806      	ldr	r0, [pc, #24]	; (800bfa0 <BSP_PlatformIsDetected+0x28>)
 800bf88:	f7f7 fe1e 	bl	8003bc8 <HAL_GPIO_ReadPin>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d001      	beq.n	800bf96 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bf92:	2300      	movs	r3, #0
 800bf94:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bf96:	79fb      	ldrb	r3, [r7, #7]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3708      	adds	r7, #8
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	40020800 	.word	0x40020800

0800bfa4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	4603      	mov	r3, r0
 800bfac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bfae:	4b0b      	ldr	r3, [pc, #44]	; (800bfdc <SD_CheckStatus+0x38>)
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bfb4:	f7ff ffb0 	bl	800bf18 <BSP_SD_GetCardState>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d107      	bne.n	800bfce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bfbe:	4b07      	ldr	r3, [pc, #28]	; (800bfdc <SD_CheckStatus+0x38>)
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	f023 0301 	bic.w	r3, r3, #1
 800bfc8:	b2da      	uxtb	r2, r3
 800bfca:	4b04      	ldr	r3, [pc, #16]	; (800bfdc <SD_CheckStatus+0x38>)
 800bfcc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bfce:	4b03      	ldr	r3, [pc, #12]	; (800bfdc <SD_CheckStatus+0x38>)
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	b2db      	uxtb	r3, r3
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3708      	adds	r7, #8
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}
 800bfdc:	20000009 	.word	0x20000009

0800bfe0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bfea:	4b0b      	ldr	r3, [pc, #44]	; (800c018 <SD_initialize+0x38>)
 800bfec:	2201      	movs	r2, #1
 800bfee:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bff0:	f7ff ff30 	bl	800be54 <BSP_SD_Init>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d107      	bne.n	800c00a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800bffa:	79fb      	ldrb	r3, [r7, #7]
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7ff ffd1 	bl	800bfa4 <SD_CheckStatus>
 800c002:	4603      	mov	r3, r0
 800c004:	461a      	mov	r2, r3
 800c006:	4b04      	ldr	r3, [pc, #16]	; (800c018 <SD_initialize+0x38>)
 800c008:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c00a:	4b03      	ldr	r3, [pc, #12]	; (800c018 <SD_initialize+0x38>)
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	b2db      	uxtb	r3, r3
}
 800c010:	4618      	mov	r0, r3
 800c012:	3708      	adds	r7, #8
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}
 800c018:	20000009 	.word	0x20000009

0800c01c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b082      	sub	sp, #8
 800c020:	af00      	add	r7, sp, #0
 800c022:	4603      	mov	r3, r0
 800c024:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c026:	79fb      	ldrb	r3, [r7, #7]
 800c028:	4618      	mov	r0, r3
 800c02a:	f7ff ffbb 	bl	800bfa4 <SD_CheckStatus>
 800c02e:	4603      	mov	r3, r0
}
 800c030:	4618      	mov	r0, r3
 800c032:	3708      	adds	r7, #8
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b086      	sub	sp, #24
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	60b9      	str	r1, [r7, #8]
 800c040:	607a      	str	r2, [r7, #4]
 800c042:	603b      	str	r3, [r7, #0]
 800c044:	4603      	mov	r3, r0
 800c046:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c048:	2301      	movs	r3, #1
 800c04a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c04c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c050:	683a      	ldr	r2, [r7, #0]
 800c052:	6879      	ldr	r1, [r7, #4]
 800c054:	68b8      	ldr	r0, [r7, #8]
 800c056:	f7ff ff23 	bl	800bea0 <BSP_SD_ReadBlocks>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d107      	bne.n	800c070 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c060:	bf00      	nop
 800c062:	f7ff ff59 	bl	800bf18 <BSP_SD_GetCardState>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d1fa      	bne.n	800c062 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800c06c:	2300      	movs	r3, #0
 800c06e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c070:	7dfb      	ldrb	r3, [r7, #23]
}
 800c072:	4618      	mov	r0, r3
 800c074:	3718      	adds	r7, #24
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}

0800c07a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b086      	sub	sp, #24
 800c07e:	af00      	add	r7, sp, #0
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
 800c084:	603b      	str	r3, [r7, #0]
 800c086:	4603      	mov	r3, r0
 800c088:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c08a:	2301      	movs	r3, #1
 800c08c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c08e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c092:	683a      	ldr	r2, [r7, #0]
 800c094:	6879      	ldr	r1, [r7, #4]
 800c096:	68b8      	ldr	r0, [r7, #8]
 800c098:	f7ff ff20 	bl	800bedc <BSP_SD_WriteBlocks>
 800c09c:	4603      	mov	r3, r0
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d107      	bne.n	800c0b2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c0a2:	bf00      	nop
 800c0a4:	f7ff ff38 	bl	800bf18 <BSP_SD_GetCardState>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d1fa      	bne.n	800c0a4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c0b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3718      	adds	r7, #24
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b08c      	sub	sp, #48	; 0x30
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	603a      	str	r2, [r7, #0]
 800c0c6:	71fb      	strb	r3, [r7, #7]
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c0d2:	4b25      	ldr	r3, [pc, #148]	; (800c168 <SD_ioctl+0xac>)
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	f003 0301 	and.w	r3, r3, #1
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d001      	beq.n	800c0e4 <SD_ioctl+0x28>
 800c0e0:	2303      	movs	r3, #3
 800c0e2:	e03c      	b.n	800c15e <SD_ioctl+0xa2>

  switch (cmd)
 800c0e4:	79bb      	ldrb	r3, [r7, #6]
 800c0e6:	2b03      	cmp	r3, #3
 800c0e8:	d834      	bhi.n	800c154 <SD_ioctl+0x98>
 800c0ea:	a201      	add	r2, pc, #4	; (adr r2, 800c0f0 <SD_ioctl+0x34>)
 800c0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f0:	0800c101 	.word	0x0800c101
 800c0f4:	0800c109 	.word	0x0800c109
 800c0f8:	0800c121 	.word	0x0800c121
 800c0fc:	0800c13b 	.word	0x0800c13b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c100:	2300      	movs	r3, #0
 800c102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c106:	e028      	b.n	800c15a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c108:	f107 030c 	add.w	r3, r7, #12
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7ff ff13 	bl	800bf38 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c118:	2300      	movs	r3, #0
 800c11a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c11e:	e01c      	b.n	800c15a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c120:	f107 030c 	add.w	r3, r7, #12
 800c124:	4618      	mov	r0, r3
 800c126:	f7ff ff07 	bl	800bf38 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12c:	b29a      	uxth	r2, r3
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c132:	2300      	movs	r3, #0
 800c134:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c138:	e00f      	b.n	800c15a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c13a:	f107 030c 	add.w	r3, r7, #12
 800c13e:	4618      	mov	r0, r3
 800c140:	f7ff fefa 	bl	800bf38 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c146:	0a5a      	lsrs	r2, r3, #9
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c14c:	2300      	movs	r3, #0
 800c14e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c152:	e002      	b.n	800c15a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c154:	2304      	movs	r3, #4
 800c156:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c15a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3730      	adds	r7, #48	; 0x30
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	20000009 	.word	0x20000009

0800c16c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c17a:	1c5a      	adds	r2, r3, #1
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 f804 	bl	800c190 <USBH_HandleSof>
}
 800c188:	bf00      	nop
 800c18a:	3708      	adds	r7, #8
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	2b0b      	cmp	r3, #11
 800c1a0:	d10a      	bne.n	800c1b8 <USBH_HandleSof+0x28>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d005      	beq.n	800c1b8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c1b2:	699b      	ldr	r3, [r3, #24]
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	4798      	blx	r3
  }
}
 800c1b8:	bf00      	nop
 800c1ba:	3708      	adds	r7, #8
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b083      	sub	sp, #12
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800c1d0:	bf00      	nop
}
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr

0800c1dc <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c1ec:	bf00      	nop
}
 800c1ee:	370c      	adds	r7, #12
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2201      	movs	r2, #1
 800c204:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2200      	movs	r2, #0
 800c214:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c218:	2300      	movs	r3, #0
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	370c      	adds	r7, #12
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr

0800c226 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b082      	sub	sp, #8
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2201      	movs	r2, #1
 800c232:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2200      	movs	r2, #0
 800c23a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2200      	movs	r2, #0
 800c242:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 f8df 	bl	800c40a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	791b      	ldrb	r3, [r3, #4]
 800c250:	4619      	mov	r1, r3
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 f80b 	bl	800c26e <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	795b      	ldrb	r3, [r3, #5]
 800c25c:	4619      	mov	r1, r3
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 f805 	bl	800c26e <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c264:	2300      	movs	r3, #0
}
 800c266:	4618      	mov	r0, r3
 800c268:	3708      	adds	r7, #8
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c26e:	b480      	push	{r7}
 800c270:	b083      	sub	sp, #12
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
 800c276:	460b      	mov	r3, r1
 800c278:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c27a:	78fb      	ldrb	r3, [r7, #3]
 800c27c:	2b0a      	cmp	r3, #10
 800c27e:	d80d      	bhi.n	800c29c <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c280:	78fb      	ldrb	r3, [r7, #3]
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	33e0      	adds	r3, #224	; 0xe0
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	4413      	add	r3, r2
 800c28a:	685a      	ldr	r2, [r3, #4]
 800c28c:	78fb      	ldrb	r3, [r7, #3]
 800c28e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c292:	6879      	ldr	r1, [r7, #4]
 800c294:	33e0      	adds	r3, #224	; 0xe0
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	440b      	add	r3, r1
 800c29a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c29c:	2300      	movs	r3, #0
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	370c      	adds	r7, #12
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
	...

0800c2ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b087      	sub	sp, #28
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	60b9      	str	r1, [r7, #8]
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c2c2:	4b1f      	ldr	r3, [pc, #124]	; (800c340 <FATFS_LinkDriverEx+0x94>)
 800c2c4:	7a5b      	ldrb	r3, [r3, #9]
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d131      	bne.n	800c330 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c2cc:	4b1c      	ldr	r3, [pc, #112]	; (800c340 <FATFS_LinkDriverEx+0x94>)
 800c2ce:	7a5b      	ldrb	r3, [r3, #9]
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	4b1a      	ldr	r3, [pc, #104]	; (800c340 <FATFS_LinkDriverEx+0x94>)
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c2da:	4b19      	ldr	r3, [pc, #100]	; (800c340 <FATFS_LinkDriverEx+0x94>)
 800c2dc:	7a5b      	ldrb	r3, [r3, #9]
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	4a17      	ldr	r2, [pc, #92]	; (800c340 <FATFS_LinkDriverEx+0x94>)
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	4413      	add	r3, r2
 800c2e6:	68fa      	ldr	r2, [r7, #12]
 800c2e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c2ea:	4b15      	ldr	r3, [pc, #84]	; (800c340 <FATFS_LinkDriverEx+0x94>)
 800c2ec:	7a5b      	ldrb	r3, [r3, #9]
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	4b13      	ldr	r3, [pc, #76]	; (800c340 <FATFS_LinkDriverEx+0x94>)
 800c2f4:	4413      	add	r3, r2
 800c2f6:	79fa      	ldrb	r2, [r7, #7]
 800c2f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c2fa:	4b11      	ldr	r3, [pc, #68]	; (800c340 <FATFS_LinkDriverEx+0x94>)
 800c2fc:	7a5b      	ldrb	r3, [r3, #9]
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	1c5a      	adds	r2, r3, #1
 800c302:	b2d1      	uxtb	r1, r2
 800c304:	4a0e      	ldr	r2, [pc, #56]	; (800c340 <FATFS_LinkDriverEx+0x94>)
 800c306:	7251      	strb	r1, [r2, #9]
 800c308:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c30a:	7dbb      	ldrb	r3, [r7, #22]
 800c30c:	3330      	adds	r3, #48	; 0x30
 800c30e:	b2da      	uxtb	r2, r3
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	3301      	adds	r3, #1
 800c318:	223a      	movs	r2, #58	; 0x3a
 800c31a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	3302      	adds	r3, #2
 800c320:	222f      	movs	r2, #47	; 0x2f
 800c322:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	3303      	adds	r3, #3
 800c328:	2200      	movs	r2, #0
 800c32a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c32c:	2300      	movs	r3, #0
 800c32e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c330:	7dfb      	ldrb	r3, [r7, #23]
}
 800c332:	4618      	mov	r0, r3
 800c334:	371c      	adds	r7, #28
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr
 800c33e:	bf00      	nop
 800c340:	2000069c 	.word	0x2000069c

0800c344 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c34e:	2200      	movs	r2, #0
 800c350:	6839      	ldr	r1, [r7, #0]
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f7ff ffaa 	bl	800c2ac <FATFS_LinkDriverEx>
 800c358:	4603      	mov	r3, r0
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3708      	adds	r7, #8
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}

0800c362 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c362:	b580      	push	{r7, lr}
 800c364:	b082      	sub	sp, #8
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c370:	4618      	mov	r0, r3
 800c372:	f7ff fefb 	bl	800c16c <USBH_LL_IncTimer>
}
 800c376:	bf00      	nop
 800c378:	3708      	adds	r7, #8
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}

0800c37e <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c37e:	b580      	push	{r7, lr}
 800c380:	b082      	sub	sp, #8
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7ff ff33 	bl	800c1f8 <USBH_LL_Connect>
}
 800c392:	bf00      	nop
 800c394:	3708      	adds	r7, #8
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b082      	sub	sp, #8
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7ff ff3c 	bl	800c226 <USBH_LL_Disconnect>
}
 800c3ae:	bf00      	nop
 800c3b0:	3708      	adds	r7, #8
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c3b6:	b480      	push	{r7}
 800c3b8:	b083      	sub	sp, #12
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
 800c3be:	460b      	mov	r3, r1
 800c3c0:	70fb      	strb	r3, [r7, #3]
 800c3c2:	4613      	mov	r3, r2
 800c3c4:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c3c6:	bf00      	nop
 800c3c8:	370c      	adds	r7, #12
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr

0800c3d2 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b082      	sub	sp, #8
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7ff feed 	bl	800c1c0 <USBH_LL_PortEnabled>
}
 800c3e6:	bf00      	nop
 800c3e8:	3708      	adds	r7, #8
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b082      	sub	sp, #8
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7ff feed 	bl	800c1dc <USBH_LL_PortDisabled>
}
 800c402:	bf00      	nop
 800c404:	3708      	adds	r7, #8
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b084      	sub	sp, #16
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c412:	2300      	movs	r3, #0
 800c414:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c416:	2300      	movs	r3, #0
 800c418:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c420:	4618      	mov	r0, r3
 800c422:	f7f7 fd20 	bl	8003e66 <HAL_HCD_Stop>
 800c426:	4603      	mov	r3, r0
 800c428:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c42a:	7bfb      	ldrb	r3, [r7, #15]
 800c42c:	4618      	mov	r0, r3
 800c42e:	f000 f807 	bl	800c440 <USBH_Get_USB_Status>
 800c432:	4603      	mov	r3, r0
 800c434:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c436:	7bbb      	ldrb	r3, [r7, #14]
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3710      	adds	r7, #16
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c440:	b480      	push	{r7}
 800c442:	b085      	sub	sp, #20
 800c444:	af00      	add	r7, sp, #0
 800c446:	4603      	mov	r3, r0
 800c448:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c44a:	2300      	movs	r3, #0
 800c44c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c44e:	79fb      	ldrb	r3, [r7, #7]
 800c450:	2b03      	cmp	r3, #3
 800c452:	d817      	bhi.n	800c484 <USBH_Get_USB_Status+0x44>
 800c454:	a201      	add	r2, pc, #4	; (adr r2, 800c45c <USBH_Get_USB_Status+0x1c>)
 800c456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c45a:	bf00      	nop
 800c45c:	0800c46d 	.word	0x0800c46d
 800c460:	0800c473 	.word	0x0800c473
 800c464:	0800c479 	.word	0x0800c479
 800c468:	0800c47f 	.word	0x0800c47f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c46c:	2300      	movs	r3, #0
 800c46e:	73fb      	strb	r3, [r7, #15]
    break;
 800c470:	e00b      	b.n	800c48a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c472:	2302      	movs	r3, #2
 800c474:	73fb      	strb	r3, [r7, #15]
    break;
 800c476:	e008      	b.n	800c48a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c478:	2301      	movs	r3, #1
 800c47a:	73fb      	strb	r3, [r7, #15]
    break;
 800c47c:	e005      	b.n	800c48a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c47e:	2302      	movs	r3, #2
 800c480:	73fb      	strb	r3, [r7, #15]
    break;
 800c482:	e002      	b.n	800c48a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c484:	2302      	movs	r3, #2
 800c486:	73fb      	strb	r3, [r7, #15]
    break;
 800c488:	bf00      	nop
  }
  return usb_status;
 800c48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3714      	adds	r7, #20
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr

0800c498 <ai_sine_model_create>:
}

AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af02      	add	r7, sp, #8
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	9301      	str	r3, [sp, #4]
 800c4a6:	2304      	movs	r3, #4
 800c4a8:	9300      	str	r3, [sp, #0]
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	4a04      	ldr	r2, [pc, #16]	; (800c4c0 <ai_sine_model_create+0x28>)
 800c4ae:	6839      	ldr	r1, [r7, #0]
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 f80b 	bl	800c4cc <ai_platform_network_create>
 800c4b6:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	200005c8 	.word	0x200005c8

0800c4c4 <_ai_platform_acquire_crc>:
 800c4c4:	2001      	movs	r0, #1
 800c4c6:	4770      	bx	lr

0800c4c8 <_ai_platform_release_crc>:
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop

0800c4cc <ai_platform_network_create>:
 800c4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4d0:	b082      	sub	sp, #8
 800c4d2:	4680      	mov	r8, r0
 800c4d4:	4616      	mov	r6, r2
 800c4d6:	461d      	mov	r5, r3
 800c4d8:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800c4dc:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 800c4e0:	f7ff fff0 	bl	800c4c4 <_ai_platform_acquire_crc>
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	d069      	beq.n	800c5bc <ai_platform_network_create+0xf0>
 800c4e8:	4b95      	ldr	r3, [pc, #596]	; (800c740 <ai_platform_network_create+0x274>)
 800c4ea:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4f6:	eb03 010c 	add.w	r1, r3, ip
 800c4fa:	2901      	cmp	r1, #1
 800c4fc:	d955      	bls.n	800c5aa <ai_platform_network_create+0xde>
 800c4fe:	f240 4149 	movw	r1, #1097	; 0x449
 800c502:	428b      	cmp	r3, r1
 800c504:	d051      	beq.n	800c5aa <ai_platform_network_create+0xde>
 800c506:	498f      	ldr	r1, [pc, #572]	; (800c744 <ai_platform_network_create+0x278>)
 800c508:	680b      	ldr	r3, [r1, #0]
 800c50a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c50e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c512:	d067      	beq.n	800c5e4 <ai_platform_network_create+0x118>
 800c514:	680b      	ldr	r3, [r1, #0]
 800c516:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c51a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c51e:	d07c      	beq.n	800c61a <ai_platform_network_create+0x14e>
 800c520:	f7ff ffd2 	bl	800c4c8 <_ai_platform_release_crc>
 800c524:	4a88      	ldr	r2, [pc, #544]	; (800c748 <ai_platform_network_create+0x27c>)
 800c526:	6813      	ldr	r3, [r2, #0]
 800c528:	f023 0301 	bic.w	r3, r3, #1
 800c52c:	6013      	str	r3, [r2, #0]
 800c52e:	f7ff ffc9 	bl	800c4c4 <_ai_platform_acquire_crc>
 800c532:	4b83      	ldr	r3, [pc, #524]	; (800c740 <ai_platform_network_create+0x274>)
 800c534:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c53e:	185a      	adds	r2, r3, r1
 800c540:	2a01      	cmp	r2, #1
 800c542:	d940      	bls.n	800c5c6 <ai_platform_network_create+0xfa>
 800c544:	f240 4249 	movw	r2, #1097	; 0x449
 800c548:	4293      	cmp	r3, r2
 800c54a:	d03c      	beq.n	800c5c6 <ai_platform_network_create+0xfa>
 800c54c:	4a7d      	ldr	r2, [pc, #500]	; (800c744 <ai_platform_network_create+0x278>)
 800c54e:	6813      	ldr	r3, [r2, #0]
 800c550:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c554:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c558:	f000 80a8 	beq.w	800c6ac <ai_platform_network_create+0x1e0>
 800c55c:	6813      	ldr	r3, [r2, #0]
 800c55e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c562:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c566:	f000 8091 	beq.w	800c68c <ai_platform_network_create+0x1c0>
 800c56a:	f7ff ffad 	bl	800c4c8 <_ai_platform_release_crc>
 800c56e:	f1b8 0f00 	cmp.w	r8, #0
 800c572:	d045      	beq.n	800c600 <ai_platform_network_create+0x134>
 800c574:	4b75      	ldr	r3, [pc, #468]	; (800c74c <ai_platform_network_create+0x280>)
 800c576:	6033      	str	r3, [r6, #0]
 800c578:	f8c8 6000 	str.w	r6, [r8]
 800c57c:	f000 f8f6 	bl	800c76c <core_init>
 800c580:	2800      	cmp	r0, #0
 800c582:	d157      	bne.n	800c634 <ai_platform_network_create+0x168>
 800c584:	062d      	lsls	r5, r5, #24
 800c586:	2230      	movs	r2, #48	; 0x30
 800c588:	0424      	lsls	r4, r4, #16
 800c58a:	2300      	movs	r3, #0
 800c58c:	2110      	movs	r1, #16
 800c58e:	f8c8 3000 	str.w	r3, [r8]
 800c592:	2000      	movs	r0, #0
 800c594:	ea44 2307 	orr.w	r3, r4, r7, lsl #8
 800c598:	f362 0007 	bfi	r0, r2, #0, #8
 800c59c:	432b      	orrs	r3, r5
 800c59e:	f361 201f 	bfi	r0, r1, #8, #24
 800c5a2:	6473      	str	r3, [r6, #68]	; 0x44
 800c5a4:	b002      	add	sp, #8
 800c5a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5aa:	4b69      	ldr	r3, [pc, #420]	; (800c750 <ai_platform_network_create+0x284>)
 800c5ac:	2118      	movs	r1, #24
 800c5ae:	6019      	str	r1, [r3, #0]
 800c5b0:	6819      	ldr	r1, [r3, #0]
 800c5b2:	2918      	cmp	r1, #24
 800c5b4:	d029      	beq.n	800c60a <ai_platform_network_create+0x13e>
 800c5b6:	4610      	mov	r0, r2
 800c5b8:	f7ff ff86 	bl	800c4c8 <_ai_platform_release_crc>
 800c5bc:	f241 0033 	movw	r0, #4147	; 0x1033
 800c5c0:	b002      	add	sp, #8
 800c5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5c6:	4b62      	ldr	r3, [pc, #392]	; (800c750 <ai_platform_network_create+0x284>)
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	601a      	str	r2, [r3, #0]
 800c5ce:	680b      	ldr	r3, [r1, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d1fc      	bne.n	800c5ce <ai_platform_network_create+0x102>
 800c5d4:	4b5f      	ldr	r3, [pc, #380]	; (800c754 <ai_platform_network_create+0x288>)
 800c5d6:	4960      	ldr	r1, [pc, #384]	; (800c758 <ai_platform_network_create+0x28c>)
 800c5d8:	4a60      	ldr	r2, [pc, #384]	; (800c75c <ai_platform_network_create+0x290>)
 800c5da:	6019      	str	r1, [r3, #0]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d0c3      	beq.n	800c56a <ai_platform_network_create+0x9e>
 800c5e2:	e7fe      	b.n	800c5e2 <ai_platform_network_create+0x116>
 800c5e4:	4b5e      	ldr	r3, [pc, #376]	; (800c760 <ai_platform_network_create+0x294>)
 800c5e6:	2118      	movs	r1, #24
 800c5e8:	6019      	str	r1, [r3, #0]
 800c5ea:	6819      	ldr	r1, [r3, #0]
 800c5ec:	2918      	cmp	r1, #24
 800c5ee:	d1e3      	bne.n	800c5b8 <ai_platform_network_create+0xec>
 800c5f0:	2101      	movs	r1, #1
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	6019      	str	r1, [r3, #0]
 800c5f6:	6803      	ldr	r3, [r0, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d1fc      	bne.n	800c5f6 <ai_platform_network_create+0x12a>
 800c5fc:	4610      	mov	r0, r2
 800c5fe:	e78f      	b.n	800c520 <ai_platform_network_create+0x54>
 800c600:	f241 0010 	movw	r0, #4112	; 0x1010
 800c604:	b002      	add	sp, #8
 800c606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c60a:	2101      	movs	r1, #1
 800c60c:	4618      	mov	r0, r3
 800c60e:	6019      	str	r1, [r3, #0]
 800c610:	6803      	ldr	r3, [r0, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d1fc      	bne.n	800c610 <ai_platform_network_create+0x144>
 800c616:	4610      	mov	r0, r2
 800c618:	e782      	b.n	800c520 <ai_platform_network_create+0x54>
 800c61a:	4b4d      	ldr	r3, [pc, #308]	; (800c750 <ai_platform_network_create+0x284>)
 800c61c:	2118      	movs	r1, #24
 800c61e:	6019      	str	r1, [r3, #0]
 800c620:	6819      	ldr	r1, [r3, #0]
 800c622:	2918      	cmp	r1, #24
 800c624:	d1c8      	bne.n	800c5b8 <ai_platform_network_create+0xec>
 800c626:	2101      	movs	r1, #1
 800c628:	4618      	mov	r0, r3
 800c62a:	6019      	str	r1, [r3, #0]
 800c62c:	6803      	ldr	r3, [r0, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d1fc      	bne.n	800c62c <ai_platform_network_create+0x160>
 800c632:	e7e3      	b.n	800c5fc <ai_platform_network_create+0x130>
 800c634:	4a44      	ldr	r2, [pc, #272]	; (800c748 <ai_platform_network_create+0x27c>)
 800c636:	6813      	ldr	r3, [r2, #0]
 800c638:	f023 0301 	bic.w	r3, r3, #1
 800c63c:	6013      	str	r3, [r2, #0]
 800c63e:	f7ff ff41 	bl	800c4c4 <_ai_platform_acquire_crc>
 800c642:	4b3f      	ldr	r3, [pc, #252]	; (800c740 <ai_platform_network_create+0x274>)
 800c644:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c64e:	189a      	adds	r2, r3, r2
 800c650:	2a01      	cmp	r2, #1
 800c652:	d965      	bls.n	800c720 <ai_platform_network_create+0x254>
 800c654:	f240 4249 	movw	r2, #1097	; 0x449
 800c658:	4293      	cmp	r3, r2
 800c65a:	d061      	beq.n	800c720 <ai_platform_network_create+0x254>
 800c65c:	4a39      	ldr	r2, [pc, #228]	; (800c744 <ai_platform_network_create+0x278>)
 800c65e:	6813      	ldr	r3, [r2, #0]
 800c660:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c664:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c668:	d04b      	beq.n	800c702 <ai_platform_network_create+0x236>
 800c66a:	6813      	ldr	r3, [r2, #0]
 800c66c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c670:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c674:	d034      	beq.n	800c6e0 <ai_platform_network_create+0x214>
 800c676:	062d      	lsls	r5, r5, #24
 800c678:	0424      	lsls	r4, r4, #16
 800c67a:	f7ff ff25 	bl	800c4c8 <_ai_platform_release_crc>
 800c67e:	ea45 0304 	orr.w	r3, r5, r4
 800c682:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 800c686:	d021      	beq.n	800c6cc <ai_platform_network_create+0x200>
 800c688:	2201      	movs	r2, #1
 800c68a:	e77e      	b.n	800c58a <ai_platform_network_create+0xbe>
 800c68c:	4b30      	ldr	r3, [pc, #192]	; (800c750 <ai_platform_network_create+0x284>)
 800c68e:	2201      	movs	r2, #1
 800c690:	4619      	mov	r1, r3
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	680b      	ldr	r3, [r1, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d1fc      	bne.n	800c694 <ai_platform_network_create+0x1c8>
 800c69a:	4b2e      	ldr	r3, [pc, #184]	; (800c754 <ai_platform_network_create+0x288>)
 800c69c:	492e      	ldr	r1, [pc, #184]	; (800c758 <ai_platform_network_create+0x28c>)
 800c69e:	4a2f      	ldr	r2, [pc, #188]	; (800c75c <ai_platform_network_create+0x290>)
 800c6a0:	6019      	str	r1, [r3, #0]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	f43f af60 	beq.w	800c56a <ai_platform_network_create+0x9e>
 800c6aa:	e7fe      	b.n	800c6aa <ai_platform_network_create+0x1de>
 800c6ac:	4b2c      	ldr	r3, [pc, #176]	; (800c760 <ai_platform_network_create+0x294>)
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	601a      	str	r2, [r3, #0]
 800c6b4:	680b      	ldr	r3, [r1, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d1fc      	bne.n	800c6b4 <ai_platform_network_create+0x1e8>
 800c6ba:	4b2a      	ldr	r3, [pc, #168]	; (800c764 <ai_platform_network_create+0x298>)
 800c6bc:	4926      	ldr	r1, [pc, #152]	; (800c758 <ai_platform_network_create+0x28c>)
 800c6be:	4a27      	ldr	r2, [pc, #156]	; (800c75c <ai_platform_network_create+0x290>)
 800c6c0:	6019      	str	r1, [r3, #0]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	f43f af50 	beq.w	800c56a <ai_platform_network_create+0x9e>
 800c6ca:	e7fe      	b.n	800c6ca <ai_platform_network_create+0x1fe>
 800c6cc:	4b26      	ldr	r3, [pc, #152]	; (800c768 <ai_platform_network_create+0x29c>)
 800c6ce:	a802      	add	r0, sp, #8
 800c6d0:	f840 3d04 	str.w	r3, [r0, #-4]!
 800c6d4:	f000 fe76 	bl	800d3c4 <ai_check_custom_types>
 800c6d8:	b188      	cbz	r0, 800c6fe <ai_platform_network_create+0x232>
 800c6da:	2100      	movs	r1, #0
 800c6dc:	460a      	mov	r2, r1
 800c6de:	e758      	b.n	800c592 <ai_platform_network_create+0xc6>
 800c6e0:	4b1b      	ldr	r3, [pc, #108]	; (800c750 <ai_platform_network_create+0x284>)
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	601a      	str	r2, [r3, #0]
 800c6e8:	680b      	ldr	r3, [r1, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d1fc      	bne.n	800c6e8 <ai_platform_network_create+0x21c>
 800c6ee:	4b19      	ldr	r3, [pc, #100]	; (800c754 <ai_platform_network_create+0x288>)
 800c6f0:	4919      	ldr	r1, [pc, #100]	; (800c758 <ai_platform_network_create+0x28c>)
 800c6f2:	4a1a      	ldr	r2, [pc, #104]	; (800c75c <ai_platform_network_create+0x290>)
 800c6f4:	6019      	str	r1, [r3, #0]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d0bc      	beq.n	800c676 <ai_platform_network_create+0x1aa>
 800c6fc:	e7fe      	b.n	800c6fc <ai_platform_network_create+0x230>
 800c6fe:	2202      	movs	r2, #2
 800c700:	e743      	b.n	800c58a <ai_platform_network_create+0xbe>
 800c702:	4b17      	ldr	r3, [pc, #92]	; (800c760 <ai_platform_network_create+0x294>)
 800c704:	2201      	movs	r2, #1
 800c706:	4619      	mov	r1, r3
 800c708:	601a      	str	r2, [r3, #0]
 800c70a:	680b      	ldr	r3, [r1, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d1fc      	bne.n	800c70a <ai_platform_network_create+0x23e>
 800c710:	4b14      	ldr	r3, [pc, #80]	; (800c764 <ai_platform_network_create+0x298>)
 800c712:	4911      	ldr	r1, [pc, #68]	; (800c758 <ai_platform_network_create+0x28c>)
 800c714:	4a11      	ldr	r2, [pc, #68]	; (800c75c <ai_platform_network_create+0x290>)
 800c716:	6019      	str	r1, [r3, #0]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d0ab      	beq.n	800c676 <ai_platform_network_create+0x1aa>
 800c71e:	e7fe      	b.n	800c71e <ai_platform_network_create+0x252>
 800c720:	4b0b      	ldr	r3, [pc, #44]	; (800c750 <ai_platform_network_create+0x284>)
 800c722:	2201      	movs	r2, #1
 800c724:	4619      	mov	r1, r3
 800c726:	601a      	str	r2, [r3, #0]
 800c728:	680b      	ldr	r3, [r1, #0]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d1fc      	bne.n	800c728 <ai_platform_network_create+0x25c>
 800c72e:	4b09      	ldr	r3, [pc, #36]	; (800c754 <ai_platform_network_create+0x288>)
 800c730:	4909      	ldr	r1, [pc, #36]	; (800c758 <ai_platform_network_create+0x28c>)
 800c732:	4a0a      	ldr	r2, [pc, #40]	; (800c75c <ai_platform_network_create+0x290>)
 800c734:	6019      	str	r1, [r3, #0]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4293      	cmp	r3, r2
 800c73a:	d09c      	beq.n	800c676 <ai_platform_network_create+0x1aa>
 800c73c:	e7fe      	b.n	800c73c <ai_platform_network_create+0x270>
 800c73e:	bf00      	nop
 800c740:	e0042000 	.word	0xe0042000
 800c744:	5c001000 	.word	0x5c001000
 800c748:	e0002000 	.word	0xe0002000
 800c74c:	a1c00100 	.word	0xa1c00100
 800c750:	40023008 	.word	0x40023008
 800c754:	40023000 	.word	0x40023000
 800c758:	f407a5c2 	.word	0xf407a5c2
 800c75c:	b5e8b5cd 	.word	0xb5e8b5cd
 800c760:	58024c08 	.word	0x58024c08
 800c764:	58024c00 	.word	0x58024c00
 800c768:	84048403 	.word	0x84048403

0800c76c <core_init>:
 800c76c:	2001      	movs	r0, #1
 800c76e:	4770      	bx	lr

0800c770 <ai_dict8_dot_array_f32>:
 800c770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c774:	9d06      	ldr	r5, [sp, #24]
 800c776:	4c88      	ldr	r4, [pc, #544]	; (800c998 <ai_dict8_dot_array_f32+0x228>)
 800c778:	2d07      	cmp	r5, #7
 800c77a:	442c      	add	r4, r5
 800c77c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c780:	f104 0620 	add.w	r6, r4, #32
 800c784:	d817      	bhi.n	800c7b6 <ai_dict8_dot_array_f32+0x46>
 800c786:	42b3      	cmp	r3, r6
 800c788:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800c99c <ai_dict8_dot_array_f32+0x22c>
 800c78c:	d20b      	bcs.n	800c7a6 <ai_dict8_dot_array_f32+0x36>
 800c78e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c792:	ecf3 7a01 	vldmia	r3!, {s15}
 800c796:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800c79a:	42b3      	cmp	r3, r6
 800c79c:	edd4 6a00 	vldr	s13, [r4]
 800c7a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c7a4:	d3f3      	bcc.n	800c78e <ai_dict8_dot_array_f32+0x1e>
 800c7a6:	edd0 7a00 	vldr	s15, [r0]
 800c7aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7ae:	ed80 7a00 	vstr	s14, [r0]
 800c7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b6:	f001 0503 	and.w	r5, r1, #3
 800c7ba:	2d02      	cmp	r5, #2
 800c7bc:	f000 80f0 	beq.w	800c9a0 <ai_dict8_dot_array_f32+0x230>
 800c7c0:	2d03      	cmp	r5, #3
 800c7c2:	f000 81ff 	beq.w	800cbc4 <ai_dict8_dot_array_f32+0x454>
 800c7c6:	2d01      	cmp	r5, #1
 800c7c8:	f000 81f0 	beq.w	800cbac <ai_dict8_dot_array_f32+0x43c>
 800c7cc:	42a3      	cmp	r3, r4
 800c7ce:	f200 81fc 	bhi.w	800cbca <ai_dict8_dot_array_f32+0x45a>
 800c7d2:	1ae4      	subs	r4, r4, r3
 800c7d4:	f101 0810 	add.w	r8, r1, #16
 800c7d8:	f101 0508 	add.w	r5, r1, #8
 800c7dc:	f103 0720 	add.w	r7, r3, #32
 800c7e0:	0964      	lsrs	r4, r4, #5
 800c7e2:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800c99c <ai_dict8_dot_array_f32+0x22c>
 800c7e6:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 800c7ea:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 800c7ee:	3508      	adds	r5, #8
 800c7f0:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 800c7f4:	3720      	adds	r7, #32
 800c7f6:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800c7fa:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 800c7fe:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800c802:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 800c806:	edde 7a00 	vldr	s15, [lr]
 800c80a:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 800c80e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c812:	eddc 5a00 	vldr	s11, [ip]
 800c816:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 800c81a:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 800c81e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c822:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800c826:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 800c82a:	ed9c 4a00 	vldr	s8, [ip]
 800c82e:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 800c832:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800c836:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 800c83a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800c83e:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 800c842:	eee4 7a26 	vfma.f32	s15, s8, s13
 800c846:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 800c84a:	ed9c 4a00 	vldr	s8, [ip]
 800c84e:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 800c852:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 800c856:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800c85a:	eee4 7a05 	vfma.f32	s15, s8, s10
 800c85e:	ed9e 5a00 	vldr	s10, [lr]
 800c862:	ed9c 4a00 	vldr	s8, [ip]
 800c866:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 800c86a:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 800c86e:	4545      	cmp	r5, r8
 800c870:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800c874:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800c878:	eee5 7a06 	vfma.f32	s15, s10, s12
 800c87c:	ed9e 5a00 	vldr	s10, [lr]
 800c880:	ed9c 6a00 	vldr	s12, [ip]
 800c884:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c888:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c88c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c890:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c894:	d1a9      	bne.n	800c7ea <ai_dict8_dot_array_f32+0x7a>
 800c896:	3401      	adds	r4, #1
 800c898:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800c89c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 800c8a0:	42b3      	cmp	r3, r6
 800c8a2:	d280      	bcs.n	800c7a6 <ai_dict8_dot_array_f32+0x36>
 800c8a4:	461c      	mov	r4, r3
 800c8a6:	780d      	ldrb	r5, [r1, #0]
 800c8a8:	ecf4 6a01 	vldmia	r4!, {s13}
 800c8ac:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c8b0:	42a6      	cmp	r6, r4
 800c8b2:	edd5 7a00 	vldr	s15, [r5]
 800c8b6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c8ba:	f67f af74 	bls.w	800c7a6 <ai_dict8_dot_array_f32+0x36>
 800c8be:	784d      	ldrb	r5, [r1, #1]
 800c8c0:	f103 0408 	add.w	r4, r3, #8
 800c8c4:	edd3 6a01 	vldr	s13, [r3, #4]
 800c8c8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c8cc:	42a6      	cmp	r6, r4
 800c8ce:	edd5 7a00 	vldr	s15, [r5]
 800c8d2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c8d6:	f67f af66 	bls.w	800c7a6 <ai_dict8_dot_array_f32+0x36>
 800c8da:	788d      	ldrb	r5, [r1, #2]
 800c8dc:	f103 040c 	add.w	r4, r3, #12
 800c8e0:	edd3 6a02 	vldr	s13, [r3, #8]
 800c8e4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c8e8:	42a6      	cmp	r6, r4
 800c8ea:	edd5 7a00 	vldr	s15, [r5]
 800c8ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c8f2:	f67f af58 	bls.w	800c7a6 <ai_dict8_dot_array_f32+0x36>
 800c8f6:	78cd      	ldrb	r5, [r1, #3]
 800c8f8:	f103 0410 	add.w	r4, r3, #16
 800c8fc:	edd3 6a03 	vldr	s13, [r3, #12]
 800c900:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c904:	42a6      	cmp	r6, r4
 800c906:	edd5 7a00 	vldr	s15, [r5]
 800c90a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c90e:	f67f af4a 	bls.w	800c7a6 <ai_dict8_dot_array_f32+0x36>
 800c912:	790d      	ldrb	r5, [r1, #4]
 800c914:	f103 0414 	add.w	r4, r3, #20
 800c918:	edd3 6a04 	vldr	s13, [r3, #16]
 800c91c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c920:	42a6      	cmp	r6, r4
 800c922:	edd5 7a00 	vldr	s15, [r5]
 800c926:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c92a:	f67f af3c 	bls.w	800c7a6 <ai_dict8_dot_array_f32+0x36>
 800c92e:	794d      	ldrb	r5, [r1, #5]
 800c930:	f103 0418 	add.w	r4, r3, #24
 800c934:	edd3 6a05 	vldr	s13, [r3, #20]
 800c938:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c93c:	42a6      	cmp	r6, r4
 800c93e:	edd5 7a00 	vldr	s15, [r5]
 800c942:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c946:	f67f af2e 	bls.w	800c7a6 <ai_dict8_dot_array_f32+0x36>
 800c94a:	798d      	ldrb	r5, [r1, #6]
 800c94c:	f103 041c 	add.w	r4, r3, #28
 800c950:	edd3 6a06 	vldr	s13, [r3, #24]
 800c954:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c958:	42a6      	cmp	r6, r4
 800c95a:	edd5 7a00 	vldr	s15, [r5]
 800c95e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c962:	f67f af20 	bls.w	800c7a6 <ai_dict8_dot_array_f32+0x36>
 800c966:	79cd      	ldrb	r5, [r1, #7]
 800c968:	f103 0420 	add.w	r4, r3, #32
 800c96c:	edd3 6a07 	vldr	s13, [r3, #28]
 800c970:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c974:	42a6      	cmp	r6, r4
 800c976:	edd5 7a00 	vldr	s15, [r5]
 800c97a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c97e:	f67f af12 	bls.w	800c7a6 <ai_dict8_dot_array_f32+0x36>
 800c982:	7a09      	ldrb	r1, [r1, #8]
 800c984:	edd3 7a08 	vldr	s15, [r3, #32]
 800c988:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c98c:	edd2 6a00 	vldr	s13, [r2]
 800c990:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c994:	e707      	b.n	800c7a6 <ai_dict8_dot_array_f32+0x36>
 800c996:	bf00      	nop
 800c998:	3ffffff8 	.word	0x3ffffff8
 800c99c:	00000000 	.word	0x00000000
 800c9a0:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 800c99c <ai_dict8_dot_array_f32+0x22c>
 800c9a4:	780d      	ldrb	r5, [r1, #0]
 800c9a6:	3304      	adds	r3, #4
 800c9a8:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c9ac:	3101      	adds	r1, #1
 800c9ae:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c9b2:	edd5 6a00 	vldr	s13, [r5]
 800c9b6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c9ba:	780d      	ldrb	r5, [r1, #0]
 800c9bc:	1d1f      	adds	r7, r3, #4
 800c9be:	edd3 7a00 	vldr	s15, [r3]
 800c9c2:	f101 0c01 	add.w	ip, r1, #1
 800c9c6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c9ca:	42bc      	cmp	r4, r7
 800c9cc:	edd5 6a00 	vldr	s13, [r5]
 800c9d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c9d4:	d365      	bcc.n	800caa2 <ai_dict8_dot_array_f32+0x332>
 800c9d6:	3324      	adds	r3, #36	; 0x24
 800c9d8:	f101 0e11 	add.w	lr, r1, #17
 800c9dc:	3109      	adds	r1, #9
 800c9de:	eba6 0803 	sub.w	r8, r6, r3
 800c9e2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800c9e6:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 800c9ea:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800c9ee:	3108      	adds	r1, #8
 800c9f0:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 800c9f4:	3320      	adds	r3, #32
 800c9f6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c9fa:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 800c9fe:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ca02:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 800ca06:	edd5 7a00 	vldr	s15, [r5]
 800ca0a:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 800ca0e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ca12:	edd4 5a00 	vldr	s11, [r4]
 800ca16:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 800ca1a:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 800ca1e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800ca22:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ca26:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800ca2a:	ed94 4a00 	vldr	s8, [r4]
 800ca2e:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 800ca32:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800ca36:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 800ca3a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ca3e:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 800ca42:	eee4 7a26 	vfma.f32	s15, s8, s13
 800ca46:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 800ca4a:	ed94 4a00 	vldr	s8, [r4]
 800ca4e:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 800ca52:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 800ca56:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ca5a:	eee4 7a05 	vfma.f32	s15, s8, s10
 800ca5e:	ed95 5a00 	vldr	s10, [r5]
 800ca62:	ed94 4a00 	vldr	s8, [r4]
 800ca66:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800ca6a:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 800ca6e:	458e      	cmp	lr, r1
 800ca70:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800ca74:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ca78:	eee5 7a06 	vfma.f32	s15, s10, s12
 800ca7c:	ed95 5a00 	vldr	s10, [r5]
 800ca80:	ed94 6a00 	vldr	s12, [r4]
 800ca84:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ca88:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ca8c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ca90:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ca94:	d1a9      	bne.n	800c9ea <ai_dict8_dot_array_f32+0x27a>
 800ca96:	f108 0801 	add.w	r8, r8, #1
 800ca9a:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800ca9e:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 800caa2:	42b7      	cmp	r7, r6
 800caa4:	f4bf ae7f 	bcs.w	800c7a6 <ai_dict8_dot_array_f32+0x36>
 800caa8:	463b      	mov	r3, r7
 800caaa:	f89c 1000 	ldrb.w	r1, [ip]
 800caae:	ecf3 6a01 	vldmia	r3!, {s13}
 800cab2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800cab6:	429e      	cmp	r6, r3
 800cab8:	edd1 7a00 	vldr	s15, [r1]
 800cabc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cac0:	f67f ae71 	bls.w	800c7a6 <ai_dict8_dot_array_f32+0x36>
 800cac4:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800cac8:	f107 0308 	add.w	r3, r7, #8
 800cacc:	edd7 6a01 	vldr	s13, [r7, #4]
 800cad0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800cad4:	429e      	cmp	r6, r3
 800cad6:	edd1 7a00 	vldr	s15, [r1]
 800cada:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cade:	f67f ae62 	bls.w	800c7a6 <ai_dict8_dot_array_f32+0x36>
 800cae2:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800cae6:	f107 030c 	add.w	r3, r7, #12
 800caea:	edd7 6a02 	vldr	s13, [r7, #8]
 800caee:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800caf2:	429e      	cmp	r6, r3
 800caf4:	edd1 7a00 	vldr	s15, [r1]
 800caf8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cafc:	f67f ae53 	bls.w	800c7a6 <ai_dict8_dot_array_f32+0x36>
 800cb00:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800cb04:	f107 0310 	add.w	r3, r7, #16
 800cb08:	edd7 6a03 	vldr	s13, [r7, #12]
 800cb0c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800cb10:	429e      	cmp	r6, r3
 800cb12:	edd1 7a00 	vldr	s15, [r1]
 800cb16:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cb1a:	f67f ae44 	bls.w	800c7a6 <ai_dict8_dot_array_f32+0x36>
 800cb1e:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800cb22:	f107 0314 	add.w	r3, r7, #20
 800cb26:	edd7 6a04 	vldr	s13, [r7, #16]
 800cb2a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800cb2e:	429e      	cmp	r6, r3
 800cb30:	edd1 7a00 	vldr	s15, [r1]
 800cb34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cb38:	f67f ae35 	bls.w	800c7a6 <ai_dict8_dot_array_f32+0x36>
 800cb3c:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800cb40:	f107 0318 	add.w	r3, r7, #24
 800cb44:	edd7 6a05 	vldr	s13, [r7, #20]
 800cb48:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800cb4c:	429e      	cmp	r6, r3
 800cb4e:	edd1 7a00 	vldr	s15, [r1]
 800cb52:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cb56:	f67f ae26 	bls.w	800c7a6 <ai_dict8_dot_array_f32+0x36>
 800cb5a:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800cb5e:	f107 031c 	add.w	r3, r7, #28
 800cb62:	edd7 6a06 	vldr	s13, [r7, #24]
 800cb66:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800cb6a:	429e      	cmp	r6, r3
 800cb6c:	edd1 7a00 	vldr	s15, [r1]
 800cb70:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cb74:	f67f ae17 	bls.w	800c7a6 <ai_dict8_dot_array_f32+0x36>
 800cb78:	f89c 1007 	ldrb.w	r1, [ip, #7]
 800cb7c:	f107 0320 	add.w	r3, r7, #32
 800cb80:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb84:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800cb88:	429e      	cmp	r6, r3
 800cb8a:	edd1 7a00 	vldr	s15, [r1]
 800cb8e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cb92:	f67f ae08 	bls.w	800c7a6 <ai_dict8_dot_array_f32+0x36>
 800cb96:	f89c 3008 	ldrb.w	r3, [ip, #8]
 800cb9a:	edd7 7a08 	vldr	s15, [r7, #32]
 800cb9e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cba2:	edd2 6a00 	vldr	s13, [r2]
 800cba6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cbaa:	e5fc      	b.n	800c7a6 <ai_dict8_dot_array_f32+0x36>
 800cbac:	780d      	ldrb	r5, [r1, #0]
 800cbae:	3304      	adds	r3, #4
 800cbb0:	ed53 7a01 	vldr	s15, [r3, #-4]
 800cbb4:	3101      	adds	r1, #1
 800cbb6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800cbba:	ed95 7a00 	vldr	s14, [r5]
 800cbbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbc2:	e6ef      	b.n	800c9a4 <ai_dict8_dot_array_f32+0x234>
 800cbc4:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 800c99c <ai_dict8_dot_array_f32+0x22c>
 800cbc8:	e6f7      	b.n	800c9ba <ai_dict8_dot_array_f32+0x24a>
 800cbca:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 800c99c <ai_dict8_dot_array_f32+0x22c>
 800cbce:	e667      	b.n	800c8a0 <ai_dict8_dot_array_f32+0x130>

0800cbd0 <ai_dict4_dot_array_f32>:
 800cbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cbd6:	f027 0c01 	bic.w	ip, r7, #1
 800cbda:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800cbde:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800cbe2:	f000 80ad 	beq.w	800cd40 <ai_dict4_dot_array_f32+0x170>
 800cbe6:	1d0d      	adds	r5, r1, #4
 800cbe8:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800cbec:	f103 0420 	add.w	r4, r3, #32
 800cbf0:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800cd48 <ai_dict4_dot_array_f32+0x178>
 800cbf4:	eb05 0e09 	add.w	lr, r5, r9
 800cbf8:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800cbfc:	3504      	adds	r5, #4
 800cbfe:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 800cc02:	3420      	adds	r4, #32
 800cc04:	f006 0a0f 	and.w	sl, r6, #15
 800cc08:	0936      	lsrs	r6, r6, #4
 800cc0a:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800cc0e:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800cc12:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 800cc16:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cc1a:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 800cc1e:	edda 7a00 	vldr	s15, [sl]
 800cc22:	edd6 5a00 	vldr	s11, [r6]
 800cc26:	ee67 7a85 	vmul.f32	s15, s15, s10
 800cc2a:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 800cc2e:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 800cc32:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800cc36:	f006 060f 	and.w	r6, r6, #15
 800cc3a:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800cc3e:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 800cc42:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800cc46:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 800cc4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cc4e:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 800cc52:	ed9a 3a00 	vldr	s6, [sl]
 800cc56:	ed96 5a00 	vldr	s10, [r6]
 800cc5a:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 800cc5e:	eee3 7a04 	vfma.f32	s15, s6, s8
 800cc62:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 800cc66:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800cc6a:	f00a 0a0f 	and.w	sl, sl, #15
 800cc6e:	45ae      	cmp	lr, r5
 800cc70:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800cc74:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800cc78:	ed9b 3a00 	vldr	s6, [fp]
 800cc7c:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 800cc80:	eee5 7a06 	vfma.f32	s15, s10, s12
 800cc84:	ed9a 4a00 	vldr	s8, [sl]
 800cc88:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 800cc8c:	f006 060f 	and.w	r6, r6, #15
 800cc90:	ed9a 5a00 	vldr	s10, [sl]
 800cc94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cc98:	ed96 6a00 	vldr	s12, [r6]
 800cc9c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800cca0:	eee4 7a24 	vfma.f32	s15, s8, s9
 800cca4:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cca8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ccac:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ccb0:	d1a2      	bne.n	800cbf8 <ai_dict4_dot_array_f32+0x28>
 800ccb2:	4449      	add	r1, r9
 800ccb4:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800ccb8:	459c      	cmp	ip, r3
 800ccba:	d92d      	bls.n	800cd18 <ai_dict4_dot_array_f32+0x148>
 800ccbc:	f10c 0c07 	add.w	ip, ip, #7
 800ccc0:	f103 0508 	add.w	r5, r3, #8
 800ccc4:	f103 0810 	add.w	r8, r3, #16
 800ccc8:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 800cccc:	ebac 0c05 	sub.w	ip, ip, r5
 800ccd0:	f02c 0407 	bic.w	r4, ip, #7
 800ccd4:	44a0      	add	r8, r4
 800ccd6:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800ccda:	3508      	adds	r5, #8
 800ccdc:	ed55 5a03 	vldr	s11, [r5, #-12]
 800cce0:	f004 060f 	and.w	r6, r4, #15
 800cce4:	0924      	lsrs	r4, r4, #4
 800cce6:	ed55 6a04 	vldr	s13, [r5, #-16]
 800ccea:	45a8      	cmp	r8, r5
 800ccec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ccf0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ccf4:	edd6 7a00 	vldr	s15, [r6]
 800ccf8:	ed94 6a00 	vldr	s12, [r4]
 800ccfc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cd00:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cd04:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cd08:	d1e5      	bne.n	800ccd6 <ai_dict4_dot_array_f32+0x106>
 800cd0a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800cd0e:	f10c 0c01 	add.w	ip, ip, #1
 800cd12:	4461      	add	r1, ip
 800cd14:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800cd18:	07fc      	lsls	r4, r7, #31
 800cd1a:	d509      	bpl.n	800cd30 <ai_dict4_dot_array_f32+0x160>
 800cd1c:	7809      	ldrb	r1, [r1, #0]
 800cd1e:	edd3 7a00 	vldr	s15, [r3]
 800cd22:	090b      	lsrs	r3, r1, #4
 800cd24:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cd28:	edd2 6a00 	vldr	s13, [r2]
 800cd2c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cd30:	edd0 7a00 	vldr	s15, [r0]
 800cd34:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd38:	ed80 7a00 	vstr	s14, [r0]
 800cd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd40:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800cd48 <ai_dict4_dot_array_f32+0x178>
 800cd44:	e7b8      	b.n	800ccb8 <ai_dict4_dot_array_f32+0xe8>
 800cd46:	bf00      	nop
 800cd48:	00000000 	.word	0x00000000

0800cd4c <forward_dense>:
 800cd4c:	6983      	ldr	r3, [r0, #24]
 800cd4e:	8818      	ldrh	r0, [r3, #0]
 800cd50:	2800      	cmp	r0, #0
 800cd52:	f000 80b7 	beq.w	800cec4 <forward_dense+0x178>
 800cd56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5a:	ed2d 8b08 	vpush	{d8-d11}
 800cd5e:	685f      	ldr	r7, [r3, #4]
 800cd60:	b091      	sub	sp, #68	; 0x44
 800cd62:	687d      	ldr	r5, [r7, #4]
 800cd64:	b105      	cbz	r5, 800cd68 <forward_dense+0x1c>
 800cd66:	682d      	ldr	r5, [r5, #0]
 800cd68:	2801      	cmp	r0, #1
 800cd6a:	f240 80a8 	bls.w	800cebe <forward_dense+0x172>
 800cd6e:	693c      	ldr	r4, [r7, #16]
 800cd70:	b104      	cbz	r4, 800cd74 <forward_dense+0x28>
 800cd72:	6824      	ldr	r4, [r4, #0]
 800cd74:	2802      	cmp	r0, #2
 800cd76:	f000 80a7 	beq.w	800cec8 <forward_dense+0x17c>
 800cd7a:	69fb      	ldr	r3, [r7, #28]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	f000 821b 	beq.w	800d1b8 <forward_dense+0x46c>
 800cd82:	681a      	ldr	r2, [r3, #0]
 800cd84:	9206      	str	r2, [sp, #24]
 800cd86:	f117 0218 	adds.w	r2, r7, #24
 800cd8a:	f000 80ca 	beq.w	800cf22 <forward_dense+0x1d6>
 800cd8e:	8b3a      	ldrh	r2, [r7, #24]
 800cd90:	2a01      	cmp	r2, #1
 800cd92:	f240 820e 	bls.w	800d1b2 <forward_dense+0x466>
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	f000 80c5 	beq.w	800cf26 <forward_dense+0x1da>
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	9307      	str	r3, [sp, #28]
 800cda0:	9b06      	ldr	r3, [sp, #24]
 800cda2:	2803      	cmp	r0, #3
 800cda4:	68e6      	ldr	r6, [r4, #12]
 800cda6:	6999      	ldr	r1, [r3, #24]
 800cda8:	680a      	ldr	r2, [r1, #0]
 800cdaa:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 800cdae:	f3c2 5341 	ubfx	r3, r2, #21, #2
 800cdb2:	fa48 f303 	asr.w	r3, r8, r3
 800cdb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdb8:	68eb      	ldr	r3, [r5, #12]
 800cdba:	9303      	str	r3, [sp, #12]
 800cdbc:	68f3      	ldr	r3, [r6, #12]
 800cdbe:	469c      	mov	ip, r3
 800cdc0:	68b3      	ldr	r3, [r6, #8]
 800cdc2:	6876      	ldr	r6, [r6, #4]
 800cdc4:	fb0c f303 	mul.w	r3, ip, r3
 800cdc8:	9308      	str	r3, [sp, #32]
 800cdca:	9b03      	ldr	r3, [sp, #12]
 800cdcc:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800cdd0:	f000 81db 	beq.w	800d18a <forward_dense+0x43e>
 800cdd4:	6abf      	ldr	r7, [r7, #40]	; 0x28
 800cdd6:	b117      	cbz	r7, 800cdde <forward_dense+0x92>
 800cdd8:	683f      	ldr	r7, [r7, #0]
 800cdda:	b107      	cbz	r7, 800cdde <forward_dense+0x92>
 800cddc:	69bf      	ldr	r7, [r7, #24]
 800cdde:	f3c2 4243 	ubfx	r2, r2, #17, #4
 800cde2:	2a04      	cmp	r2, #4
 800cde4:	f000 81d4 	beq.w	800d190 <forward_dense+0x444>
 800cde8:	2a08      	cmp	r2, #8
 800cdea:	f000 81d1 	beq.w	800d190 <forward_dense+0x444>
 800cdee:	f04f 0a00 	mov.w	sl, #0
 800cdf2:	69a3      	ldr	r3, [r4, #24]
 800cdf4:	00b1      	lsls	r1, r6, #2
 800cdf6:	69aa      	ldr	r2, [r5, #24]
 800cdf8:	6898      	ldr	r0, [r3, #8]
 800cdfa:	9b06      	ldr	r3, [sp, #24]
 800cdfc:	9109      	str	r1, [sp, #36]	; 0x24
 800cdfe:	1846      	adds	r6, r0, r1
 800ce00:	695b      	ldr	r3, [r3, #20]
 800ce02:	9004      	str	r0, [sp, #16]
 800ce04:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800ce08:	9b08      	ldr	r3, [sp, #32]
 800ce0a:	6897      	ldr	r7, [r2, #8]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d051      	beq.n	800ceb4 <forward_dense+0x168>
 800ce10:	f1a8 0310 	sub.w	r3, r8, #16
 800ce14:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800ce18:	eddf 2ad0 	vldr	s5, [pc, #832]	; 800d15c <forward_dense+0x410>
 800ce1c:	091b      	lsrs	r3, r3, #4
 800ce1e:	920a      	str	r2, [sp, #40]	; 0x28
 800ce20:	2200      	movs	r2, #0
 800ce22:	3301      	adds	r3, #1
 800ce24:	9205      	str	r2, [sp, #20]
 800ce26:	f008 020f 	and.w	r2, r8, #15
 800ce2a:	019b      	lsls	r3, r3, #6
 800ce2c:	920d      	str	r2, [sp, #52]	; 0x34
 800ce2e:	930c      	str	r3, [sp, #48]	; 0x30
 800ce30:	9b06      	ldr	r3, [sp, #24]
 800ce32:	699b      	ldr	r3, [r3, #24]
 800ce34:	689d      	ldr	r5, [r3, #8]
 800ce36:	9b07      	ldr	r3, [sp, #28]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	f000 818c 	beq.w	800d156 <forward_dense+0x40a>
 800ce3e:	699b      	ldr	r3, [r3, #24]
 800ce40:	689c      	ldr	r4, [r3, #8]
 800ce42:	9b04      	ldr	r3, [sp, #16]
 800ce44:	f1ba 0f00 	cmp.w	sl, #0
 800ce48:	d06f      	beq.n	800cf2a <forward_dense+0x1de>
 800ce4a:	42b3      	cmp	r3, r6
 800ce4c:	d228      	bcs.n	800cea0 <forward_dense+0x154>
 800ce4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce50:	469b      	mov	fp, r3
 800ce52:	ab0f      	add	r3, sp, #60	; 0x3c
 800ce54:	2a04      	cmp	r2, #4
 800ce56:	9303      	str	r3, [sp, #12]
 800ce58:	4633      	mov	r3, r6
 800ce5a:	4646      	mov	r6, r8
 800ce5c:	4698      	mov	r8, r3
 800ce5e:	d036      	beq.n	800cece <forward_dense+0x182>
 800ce60:	2c00      	cmp	r4, #0
 800ce62:	f000 817d 	beq.w	800d160 <forward_dense+0x414>
 800ce66:	f8d4 c000 	ldr.w	ip, [r4]
 800ce6a:	463b      	mov	r3, r7
 800ce6c:	4629      	mov	r1, r5
 800ce6e:	9600      	str	r6, [sp, #0]
 800ce70:	4652      	mov	r2, sl
 800ce72:	9803      	ldr	r0, [sp, #12]
 800ce74:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800ce78:	f7ff fc7a 	bl	800c770 <ai_dict8_dot_array_f32>
 800ce7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce7e:	3404      	adds	r4, #4
 800ce80:	444d      	add	r5, r9
 800ce82:	f84b 3b04 	str.w	r3, [fp], #4
 800ce86:	45c3      	cmp	fp, r8
 800ce88:	d3ea      	bcc.n	800ce60 <forward_dense+0x114>
 800ce8a:	4643      	mov	r3, r8
 800ce8c:	46b0      	mov	r8, r6
 800ce8e:	461e      	mov	r6, r3
 800ce90:	9a04      	ldr	r2, [sp, #16]
 800ce92:	43d3      	mvns	r3, r2
 800ce94:	4433      	add	r3, r6
 800ce96:	f023 0303 	bic.w	r3, r3, #3
 800ce9a:	3304      	adds	r3, #4
 800ce9c:	18d3      	adds	r3, r2, r3
 800ce9e:	9304      	str	r3, [sp, #16]
 800cea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cea2:	9b05      	ldr	r3, [sp, #20]
 800cea4:	4417      	add	r7, r2
 800cea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cea8:	3301      	adds	r3, #1
 800ceaa:	4416      	add	r6, r2
 800ceac:	9a08      	ldr	r2, [sp, #32]
 800ceae:	9305      	str	r3, [sp, #20]
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d1bd      	bne.n	800ce30 <forward_dense+0xe4>
 800ceb4:	b011      	add	sp, #68	; 0x44
 800ceb6:	ecbd 8b08 	vpop	{d8-d11}
 800ceba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cebe:	2300      	movs	r3, #0
 800cec0:	685b      	ldr	r3, [r3, #4]
 800cec2:	deff      	udf	#255	; 0xff
 800cec4:	6843      	ldr	r3, [r0, #4]
 800cec6:	deff      	udf	#255	; 0xff
 800cec8:	2300      	movs	r3, #0
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	deff      	udf	#255	; 0xff
 800cece:	b19c      	cbz	r4, 800cef8 <forward_dense+0x1ac>
 800ced0:	f8d4 c000 	ldr.w	ip, [r4]
 800ced4:	463b      	mov	r3, r7
 800ced6:	4629      	mov	r1, r5
 800ced8:	9600      	str	r6, [sp, #0]
 800ceda:	4652      	mov	r2, sl
 800cedc:	9803      	ldr	r0, [sp, #12]
 800cede:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800cee2:	f7ff fe75 	bl	800cbd0 <ai_dict4_dot_array_f32>
 800cee6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cee8:	3404      	adds	r4, #4
 800ceea:	444d      	add	r5, r9
 800ceec:	f84b 3b04 	str.w	r3, [fp], #4
 800cef0:	45c3      	cmp	fp, r8
 800cef2:	d2ca      	bcs.n	800ce8a <forward_dense+0x13e>
 800cef4:	2c00      	cmp	r4, #0
 800cef6:	d1eb      	bne.n	800ced0 <forward_dense+0x184>
 800cef8:	4634      	mov	r4, r6
 800cefa:	4646      	mov	r6, r8
 800cefc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800cf00:	463b      	mov	r3, r7
 800cf02:	4629      	mov	r1, r5
 800cf04:	9400      	str	r4, [sp, #0]
 800cf06:	4652      	mov	r2, sl
 800cf08:	4640      	mov	r0, r8
 800cf0a:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800cf0e:	f7ff fe5f 	bl	800cbd0 <ai_dict4_dot_array_f32>
 800cf12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf14:	444d      	add	r5, r9
 800cf16:	f84b 3b04 	str.w	r3, [fp], #4
 800cf1a:	45b3      	cmp	fp, r6
 800cf1c:	d3f0      	bcc.n	800cf00 <forward_dense+0x1b4>
 800cf1e:	46a0      	mov	r8, r4
 800cf20:	e7b6      	b.n	800ce90 <forward_dense+0x144>
 800cf22:	9207      	str	r2, [sp, #28]
 800cf24:	e73c      	b.n	800cda0 <forward_dense+0x54>
 800cf26:	9307      	str	r3, [sp, #28]
 800cf28:	e73a      	b.n	800cda0 <forward_dense+0x54>
 800cf2a:	42b3      	cmp	r3, r6
 800cf2c:	d2b8      	bcs.n	800cea0 <forward_dense+0x154>
 800cf2e:	4618      	mov	r0, r3
 800cf30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf32:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800cf36:	eb07 0c03 	add.w	ip, r7, r3
 800cf3a:	469e      	mov	lr, r3
 800cf3c:	2c00      	cmp	r4, #0
 800cf3e:	f000 80fe 	beq.w	800d13e <forward_dense+0x3f2>
 800cf42:	f1b8 0f0f 	cmp.w	r8, #15
 800cf46:	ed94 6a00 	vldr	s12, [r4]
 800cf4a:	f104 0404 	add.w	r4, r4, #4
 800cf4e:	f240 80fc 	bls.w	800d14a <forward_dense+0x3fe>
 800cf52:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800cf56:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800cf5a:	4641      	mov	r1, r8
 800cf5c:	eddf 6a7f 	vldr	s13, [pc, #508]	; 800d15c <forward_dense+0x410>
 800cf60:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 800cf64:	3910      	subs	r1, #16
 800cf66:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 800cf6a:	3240      	adds	r2, #64	; 0x40
 800cf6c:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 800cf70:	290f      	cmp	r1, #15
 800cf72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf76:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 800cf7a:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 800cf7e:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800cf82:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 800cf86:	eee5 7a87 	vfma.f32	s15, s11, s14
 800cf8a:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 800cf8e:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 800cf92:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 800cf96:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 800cf9a:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 800cf9e:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 800cfa2:	eee2 7a03 	vfma.f32	s15, s4, s6
 800cfa6:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800cfaa:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 800cfae:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800cfb2:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800cfb6:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 800cfba:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 800cfbe:	eee3 7a84 	vfma.f32	s15, s7, s8
 800cfc2:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 800cfc6:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 800cfca:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 800cfce:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 800cfd2:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 800cfd6:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 800cfda:	eee4 7a85 	vfma.f32	s15, s9, s10
 800cfde:	ed12 2a14 	vldr	s4, [r2, #-80]	; 0xffffffb0
 800cfe2:	ed13 3a14 	vldr	s6, [r3, #-80]	; 0xffffffb0
 800cfe6:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 800cfea:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800cfee:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 800cff2:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 800cff6:	eee5 7a87 	vfma.f32	s15, s11, s14
 800cffa:	ed52 5a11 	vldr	s11, [r2, #-68]	; 0xffffffbc
 800cffe:	ed13 7a11 	vldr	s14, [r3, #-68]	; 0xffffffbc
 800d002:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800d006:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800d00a:	eee9 7a89 	vfma.f32	s15, s19, s18
 800d00e:	eee8 7a88 	vfma.f32	s15, s17, s16
 800d012:	eee0 7a20 	vfma.f32	s15, s0, s1
 800d016:	eee1 7a21 	vfma.f32	s15, s2, s3
 800d01a:	eee2 7a03 	vfma.f32	s15, s4, s6
 800d01e:	eee3 7a84 	vfma.f32	s15, s7, s8
 800d022:	eee4 7a85 	vfma.f32	s15, s9, s10
 800d026:	eee5 7a87 	vfma.f32	s15, s11, s14
 800d02a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d02e:	d897      	bhi.n	800cf60 <forward_dense+0x214>
 800d030:	eb05 010e 	add.w	r1, r5, lr
 800d034:	465b      	mov	r3, fp
 800d036:	4662      	mov	r2, ip
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d075      	beq.n	800d128 <forward_dense+0x3dc>
 800d03c:	ed91 7a00 	vldr	s14, [r1]
 800d040:	2b01      	cmp	r3, #1
 800d042:	edd2 7a00 	vldr	s15, [r2]
 800d046:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d04a:	d06d      	beq.n	800d128 <forward_dense+0x3dc>
 800d04c:	ed91 7a01 	vldr	s14, [r1, #4]
 800d050:	2b02      	cmp	r3, #2
 800d052:	edd2 7a01 	vldr	s15, [r2, #4]
 800d056:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d05a:	d065      	beq.n	800d128 <forward_dense+0x3dc>
 800d05c:	ed91 7a02 	vldr	s14, [r1, #8]
 800d060:	2b03      	cmp	r3, #3
 800d062:	edd2 7a02 	vldr	s15, [r2, #8]
 800d066:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d06a:	d05d      	beq.n	800d128 <forward_dense+0x3dc>
 800d06c:	ed91 7a03 	vldr	s14, [r1, #12]
 800d070:	2b04      	cmp	r3, #4
 800d072:	edd2 7a03 	vldr	s15, [r2, #12]
 800d076:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d07a:	d055      	beq.n	800d128 <forward_dense+0x3dc>
 800d07c:	ed91 7a04 	vldr	s14, [r1, #16]
 800d080:	2b05      	cmp	r3, #5
 800d082:	edd2 7a04 	vldr	s15, [r2, #16]
 800d086:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d08a:	d04d      	beq.n	800d128 <forward_dense+0x3dc>
 800d08c:	ed91 7a05 	vldr	s14, [r1, #20]
 800d090:	2b06      	cmp	r3, #6
 800d092:	edd2 7a05 	vldr	s15, [r2, #20]
 800d096:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d09a:	d045      	beq.n	800d128 <forward_dense+0x3dc>
 800d09c:	ed91 7a06 	vldr	s14, [r1, #24]
 800d0a0:	2b07      	cmp	r3, #7
 800d0a2:	edd2 7a06 	vldr	s15, [r2, #24]
 800d0a6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d0aa:	d03d      	beq.n	800d128 <forward_dense+0x3dc>
 800d0ac:	ed91 7a07 	vldr	s14, [r1, #28]
 800d0b0:	2b08      	cmp	r3, #8
 800d0b2:	edd2 7a07 	vldr	s15, [r2, #28]
 800d0b6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d0ba:	d035      	beq.n	800d128 <forward_dense+0x3dc>
 800d0bc:	ed91 7a08 	vldr	s14, [r1, #32]
 800d0c0:	2b09      	cmp	r3, #9
 800d0c2:	edd2 7a08 	vldr	s15, [r2, #32]
 800d0c6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d0ca:	d02d      	beq.n	800d128 <forward_dense+0x3dc>
 800d0cc:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800d0d0:	2b0a      	cmp	r3, #10
 800d0d2:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800d0d6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d0da:	d025      	beq.n	800d128 <forward_dense+0x3dc>
 800d0dc:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800d0e0:	2b0b      	cmp	r3, #11
 800d0e2:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800d0e6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d0ea:	d01d      	beq.n	800d128 <forward_dense+0x3dc>
 800d0ec:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800d0f0:	2b0c      	cmp	r3, #12
 800d0f2:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800d0f6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d0fa:	d015      	beq.n	800d128 <forward_dense+0x3dc>
 800d0fc:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800d100:	2b0d      	cmp	r3, #13
 800d102:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800d106:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d10a:	d00d      	beq.n	800d128 <forward_dense+0x3dc>
 800d10c:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800d110:	2b0e      	cmp	r3, #14
 800d112:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800d116:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d11a:	d005      	beq.n	800d128 <forward_dense+0x3dc>
 800d11c:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800d120:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800d124:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d128:	ee76 6a26 	vadd.f32	s13, s12, s13
 800d12c:	444d      	add	r5, r9
 800d12e:	ece0 6a01 	vstmia	r0!, {s13}
 800d132:	42b0      	cmp	r0, r6
 800d134:	f4bf aeac 	bcs.w	800ce90 <forward_dense+0x144>
 800d138:	2c00      	cmp	r4, #0
 800d13a:	f47f af02 	bne.w	800cf42 <forward_dense+0x1f6>
 800d13e:	f1b8 0f0f 	cmp.w	r8, #15
 800d142:	eeb0 6a62 	vmov.f32	s12, s5
 800d146:	f63f af04 	bhi.w	800cf52 <forward_dense+0x206>
 800d14a:	4643      	mov	r3, r8
 800d14c:	4629      	mov	r1, r5
 800d14e:	463a      	mov	r2, r7
 800d150:	eddf 6a02 	vldr	s13, [pc, #8]	; 800d15c <forward_dense+0x410>
 800d154:	e770      	b.n	800d038 <forward_dense+0x2ec>
 800d156:	461c      	mov	r4, r3
 800d158:	e673      	b.n	800ce42 <forward_dense+0xf6>
 800d15a:	bf00      	nop
 800d15c:	00000000 	.word	0x00000000
 800d160:	4634      	mov	r4, r6
 800d162:	4646      	mov	r6, r8
 800d164:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d168:	463b      	mov	r3, r7
 800d16a:	4629      	mov	r1, r5
 800d16c:	9400      	str	r4, [sp, #0]
 800d16e:	4652      	mov	r2, sl
 800d170:	4640      	mov	r0, r8
 800d172:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800d176:	f7ff fafb 	bl	800c770 <ai_dict8_dot_array_f32>
 800d17a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d17c:	444d      	add	r5, r9
 800d17e:	f84b 3b04 	str.w	r3, [fp], #4
 800d182:	455e      	cmp	r6, fp
 800d184:	d8f0      	bhi.n	800d168 <forward_dense+0x41c>
 800d186:	46a0      	mov	r8, r4
 800d188:	e682      	b.n	800ce90 <forward_dense+0x144>
 800d18a:	2300      	movs	r3, #0
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	deff      	udf	#255	; 0xff
 800d190:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 800d194:	2f00      	cmp	r7, #0
 800d196:	f43f ae2c 	beq.w	800cdf2 <forward_dense+0xa6>
 800d19a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d19e:	f000 f93b 	bl	800d418 <ai_array_get_byte_size>
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	4651      	mov	r1, sl
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	469a      	mov	sl, r3
 800d1ac:	f000 f986 	bl	800d4bc <memcpy>
 800d1b0:	e61f      	b.n	800cdf2 <forward_dense+0xa6>
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	9307      	str	r3, [sp, #28]
 800d1b6:	e5f3      	b.n	800cda0 <forward_dense+0x54>
 800d1b8:	9306      	str	r3, [sp, #24]
 800d1ba:	e5e4      	b.n	800cd86 <forward_dense+0x3a>

0800d1bc <nl_func_relu_generic_array_f32>:
 800d1bc:	b470      	push	{r4, r5, r6}
 800d1be:	edd3 6a02 	vldr	s13, [r3, #8]
 800d1c2:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800d1c6:	6985      	ldr	r5, [r0, #24]
 800d1c8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800d1cc:	4414      	add	r4, r2
 800d1ce:	6989      	ldr	r1, [r1, #24]
 800d1d0:	00a4      	lsls	r4, r4, #2
 800d1d2:	68aa      	ldr	r2, [r5, #8]
 800d1d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1d8:	6888      	ldr	r0, [r1, #8]
 800d1da:	4422      	add	r2, r4
 800d1dc:	ed93 7a00 	vldr	s14, [r3]
 800d1e0:	4404      	add	r4, r0
 800d1e2:	ed93 6a01 	vldr	s12, [r3, #4]
 800d1e6:	d420      	bmi.n	800d22a <nl_func_relu_generic_array_f32+0x6e>
 800d1e8:	42a0      	cmp	r0, r4
 800d1ea:	d83b      	bhi.n	800d264 <nl_func_relu_generic_array_f32+0xa8>
 800d1ec:	1d23      	adds	r3, r4, #4
 800d1ee:	3204      	adds	r2, #4
 800d1f0:	e010      	b.n	800d214 <nl_func_relu_generic_array_f32+0x58>
 800d1f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1f6:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800d1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1fe:	d501      	bpl.n	800d204 <nl_func_relu_generic_array_f32+0x48>
 800d200:	ee65 7a86 	vmul.f32	s15, s11, s12
 800d204:	f1a3 0408 	sub.w	r4, r3, #8
 800d208:	ed62 7a01 	vstmdb	r2!, {s15}
 800d20c:	4603      	mov	r3, r0
 800d20e:	6888      	ldr	r0, [r1, #8]
 800d210:	4284      	cmp	r4, r0
 800d212:	d327      	bcc.n	800d264 <nl_func_relu_generic_array_f32+0xa8>
 800d214:	ed53 7a01 	vldr	s15, [r3, #-4]
 800d218:	1f18      	subs	r0, r3, #4
 800d21a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800d21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d222:	d4e6      	bmi.n	800d1f2 <nl_func_relu_generic_array_f32+0x36>
 800d224:	eef0 7a66 	vmov.f32	s15, s13
 800d228:	e7ec      	b.n	800d204 <nl_func_relu_generic_array_f32+0x48>
 800d22a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800d22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d232:	d019      	beq.n	800d268 <nl_func_relu_generic_array_f32+0xac>
 800d234:	42a0      	cmp	r0, r4
 800d236:	d815      	bhi.n	800d264 <nl_func_relu_generic_array_f32+0xa8>
 800d238:	1d23      	adds	r3, r4, #4
 800d23a:	3204      	adds	r2, #4
 800d23c:	ed53 7a01 	vldr	s15, [r3, #-4]
 800d240:	1f18      	subs	r0, r3, #4
 800d242:	f1a3 0508 	sub.w	r5, r3, #8
 800d246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d24a:	4603      	mov	r3, r0
 800d24c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800d250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d254:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d258:	d51c      	bpl.n	800d294 <nl_func_relu_generic_array_f32+0xd8>
 800d25a:	ed62 6a01 	vstmdb	r2!, {s13}
 800d25e:	6888      	ldr	r0, [r1, #8]
 800d260:	42a8      	cmp	r0, r5
 800d262:	d9eb      	bls.n	800d23c <nl_func_relu_generic_array_f32+0x80>
 800d264:	bc70      	pop	{r4, r5, r6}
 800d266:	4770      	bx	lr
 800d268:	42a0      	cmp	r0, r4
 800d26a:	d8fb      	bhi.n	800d264 <nl_func_relu_generic_array_f32+0xa8>
 800d26c:	1d23      	adds	r3, r4, #4
 800d26e:	3204      	adds	r2, #4
 800d270:	2600      	movs	r6, #0
 800d272:	ed53 7a01 	vldr	s15, [r3, #-4]
 800d276:	1f18      	subs	r0, r3, #4
 800d278:	f1a3 0508 	sub.w	r5, r3, #8
 800d27c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d280:	4603      	mov	r3, r0
 800d282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d286:	db0b      	blt.n	800d2a0 <nl_func_relu_generic_array_f32+0xe4>
 800d288:	ed62 7a01 	vstmdb	r2!, {s15}
 800d28c:	6888      	ldr	r0, [r1, #8]
 800d28e:	42a8      	cmp	r0, r5
 800d290:	d9ef      	bls.n	800d272 <nl_func_relu_generic_array_f32+0xb6>
 800d292:	e7e7      	b.n	800d264 <nl_func_relu_generic_array_f32+0xa8>
 800d294:	ed62 7a01 	vstmdb	r2!, {s15}
 800d298:	6888      	ldr	r0, [r1, #8]
 800d29a:	42a8      	cmp	r0, r5
 800d29c:	d9ce      	bls.n	800d23c <nl_func_relu_generic_array_f32+0x80>
 800d29e:	e7e1      	b.n	800d264 <nl_func_relu_generic_array_f32+0xa8>
 800d2a0:	f842 6d04 	str.w	r6, [r2, #-4]!
 800d2a4:	6888      	ldr	r0, [r1, #8]
 800d2a6:	42a8      	cmp	r0, r5
 800d2a8:	d9e3      	bls.n	800d272 <nl_func_relu_generic_array_f32+0xb6>
 800d2aa:	e7db      	b.n	800d264 <nl_func_relu_generic_array_f32+0xa8>

0800d2ac <forward_relu>:
 800d2ac:	6982      	ldr	r2, [r0, #24]
 800d2ae:	8813      	ldrh	r3, [r2, #0]
 800d2b0:	b333      	cbz	r3, 800d300 <forward_relu+0x54>
 800d2b2:	6852      	ldr	r2, [r2, #4]
 800d2b4:	6851      	ldr	r1, [r2, #4]
 800d2b6:	b101      	cbz	r1, 800d2ba <forward_relu+0xe>
 800d2b8:	6809      	ldr	r1, [r1, #0]
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	d91d      	bls.n	800d2fa <forward_relu+0x4e>
 800d2be:	b4f0      	push	{r4, r5, r6, r7}
 800d2c0:	6917      	ldr	r7, [r2, #16]
 800d2c2:	b107      	cbz	r7, 800d2c6 <forward_relu+0x1a>
 800d2c4:	683f      	ldr	r7, [r7, #0]
 800d2c6:	688c      	ldr	r4, [r1, #8]
 800d2c8:	69c3      	ldr	r3, [r0, #28]
 800d2ca:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d043      	beq.n	800d35a <forward_relu+0xae>
 800d2d2:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800d2d6:	2d01      	cmp	r5, #1
 800d2d8:	d014      	beq.n	800d304 <forward_relu+0x58>
 800d2da:	2c00      	cmp	r4, #0
 800d2dc:	d06d      	beq.n	800d3ba <forward_relu+0x10e>
 800d2de:	68ce      	ldr	r6, [r1, #12]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800d2e6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d2ea:	42a6      	cmp	r6, r4
 800d2ec:	fb05 f202 	mul.w	r2, r5, r2
 800d2f0:	d1f9      	bne.n	800d2e6 <forward_relu+0x3a>
 800d2f2:	4638      	mov	r0, r7
 800d2f4:	bcf0      	pop	{r4, r5, r6, r7}
 800d2f6:	f7ff bf61 	b.w	800d1bc <nl_func_relu_generic_array_f32>
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	deff      	udf	#255	; 0xff
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	deff      	udf	#255	; 0xff
 800d304:	69ba      	ldr	r2, [r7, #24]
 800d306:	698e      	ldr	r6, [r1, #24]
 800d308:	6890      	ldr	r0, [r2, #8]
 800d30a:	ed93 7a00 	vldr	s14, [r3]
 800d30e:	68b2      	ldr	r2, [r6, #8]
 800d310:	b184      	cbz	r4, 800d334 <forward_relu+0x88>
 800d312:	68cf      	ldr	r7, [r1, #12]
 800d314:	4629      	mov	r1, r5
 800d316:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800d31a:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800d31e:	42a7      	cmp	r7, r4
 800d320:	fb03 f101 	mul.w	r1, r3, r1
 800d324:	d1f9      	bne.n	800d31a <forward_relu+0x6e>
 800d326:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d32a:	440b      	add	r3, r1
 800d32c:	009b      	lsls	r3, r3, #2
 800d32e:	18d2      	adds	r2, r2, r3
 800d330:	4418      	add	r0, r3
 800d332:	d238      	bcs.n	800d3a6 <forward_relu+0xfa>
 800d334:	1d13      	adds	r3, r2, #4
 800d336:	2400      	movs	r4, #0
 800d338:	1d02      	adds	r2, r0, #4
 800d33a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800d33e:	1f19      	subs	r1, r3, #4
 800d340:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d348:	d82f      	bhi.n	800d3aa <forward_relu+0xfe>
 800d34a:	ed62 7a01 	vstmdb	r2!, {s15}
 800d34e:	3b08      	subs	r3, #8
 800d350:	68b0      	ldr	r0, [r6, #8]
 800d352:	4298      	cmp	r0, r3
 800d354:	d827      	bhi.n	800d3a6 <forward_relu+0xfa>
 800d356:	460b      	mov	r3, r1
 800d358:	e7ef      	b.n	800d33a <forward_relu+0x8e>
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	698d      	ldr	r5, [r1, #24]
 800d35e:	689a      	ldr	r2, [r3, #8]
 800d360:	68ab      	ldr	r3, [r5, #8]
 800d362:	b184      	cbz	r4, 800d386 <forward_relu+0xda>
 800d364:	68ce      	ldr	r6, [r1, #12]
 800d366:	2101      	movs	r1, #1
 800d368:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800d36c:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 800d370:	42a6      	cmp	r6, r4
 800d372:	fb00 f101 	mul.w	r1, r0, r1
 800d376:	d1f9      	bne.n	800d36c <forward_relu+0xc0>
 800d378:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800d37c:	4408      	add	r0, r1
 800d37e:	0081      	lsls	r1, r0, #2
 800d380:	185b      	adds	r3, r3, r1
 800d382:	440a      	add	r2, r1
 800d384:	d20f      	bcs.n	800d3a6 <forward_relu+0xfa>
 800d386:	3304      	adds	r3, #4
 800d388:	1d11      	adds	r1, r2, #4
 800d38a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800d3c0 <forward_relu+0x114>
 800d38e:	ed53 7a01 	vldr	s15, [r3, #-4]
 800d392:	f1a3 0208 	sub.w	r2, r3, #8
 800d396:	3b04      	subs	r3, #4
 800d398:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800d39c:	ed61 7a01 	vstmdb	r1!, {s15}
 800d3a0:	68a8      	ldr	r0, [r5, #8]
 800d3a2:	4290      	cmp	r0, r2
 800d3a4:	d9f3      	bls.n	800d38e <forward_relu+0xe2>
 800d3a6:	bcf0      	pop	{r4, r5, r6, r7}
 800d3a8:	4770      	bx	lr
 800d3aa:	f842 4d04 	str.w	r4, [r2, #-4]!
 800d3ae:	3b08      	subs	r3, #8
 800d3b0:	68b0      	ldr	r0, [r6, #8]
 800d3b2:	4298      	cmp	r0, r3
 800d3b4:	d8f7      	bhi.n	800d3a6 <forward_relu+0xfa>
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	e7bf      	b.n	800d33a <forward_relu+0x8e>
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	e799      	b.n	800d2f2 <forward_relu+0x46>
 800d3be:	bf00      	nop
 800d3c0:	00000000 	.word	0x00000000

0800d3c4 <ai_check_custom_types>:
 800d3c4:	4b13      	ldr	r3, [pc, #76]	; (800d414 <ai_check_custom_types+0x50>)
 800d3c6:	b082      	sub	sp, #8
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	9301      	str	r3, [sp, #4]
 800d3cc:	b118      	cbz	r0, 800d3d6 <ai_check_custom_types+0x12>
 800d3ce:	7803      	ldrb	r3, [r0, #0]
 800d3d0:	2b03      	cmp	r3, #3
 800d3d2:	d002      	beq.n	800d3da <ai_check_custom_types+0x16>
 800d3d4:	2000      	movs	r0, #0
 800d3d6:	b002      	add	sp, #8
 800d3d8:	4770      	bx	lr
 800d3da:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d004      	beq.n	800d3ec <ai_check_custom_types+0x28>
 800d3e2:	2001      	movs	r0, #1
 800d3e4:	f080 0001 	eor.w	r0, r0, #1
 800d3e8:	b002      	add	sp, #8
 800d3ea:	4770      	bx	lr
 800d3ec:	7842      	ldrb	r2, [r0, #1]
 800d3ee:	3001      	adds	r0, #1
 800d3f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d1f4      	bne.n	800d3e2 <ai_check_custom_types+0x1e>
 800d3f8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800d3fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d400:	429a      	cmp	r2, r3
 800d402:	d1ee      	bne.n	800d3e2 <ai_check_custom_types+0x1e>
 800d404:	7842      	ldrb	r2, [r0, #1]
 800d406:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d1e9      	bne.n	800d3e2 <ai_check_custom_types+0x1e>
 800d40e:	2000      	movs	r0, #0
 800d410:	e7e8      	b.n	800d3e4 <ai_check_custom_types+0x20>
 800d412:	bf00      	nop
 800d414:	0800dd9c 	.word	0x0800dd9c

0800d418 <ai_array_get_byte_size>:
 800d418:	b1e1      	cbz	r1, 800d454 <ai_array_get_byte_size+0x3c>
 800d41a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800d41e:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800d422:	b410      	push	{r4}
 800d424:	f3c0 3482 	ubfx	r4, r0, #14, #3
 800d428:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800d42c:	4423      	add	r3, r4
 800d42e:	2804      	cmp	r0, #4
 800d430:	fb01 f103 	mul.w	r1, r1, r3
 800d434:	f101 0107 	add.w	r1, r1, #7
 800d438:	f021 0107 	bic.w	r1, r1, #7
 800d43c:	fa21 f102 	lsr.w	r1, r1, r2
 800d440:	d00a      	beq.n	800d458 <ai_array_get_byte_size+0x40>
 800d442:	2808      	cmp	r0, #8
 800d444:	d101      	bne.n	800d44a <ai_array_get_byte_size+0x32>
 800d446:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800d44a:	3107      	adds	r1, #7
 800d44c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d450:	08c8      	lsrs	r0, r1, #3
 800d452:	4770      	bx	lr
 800d454:	4608      	mov	r0, r1
 800d456:	4770      	bx	lr
 800d458:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800d45c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d460:	3107      	adds	r1, #7
 800d462:	08c8      	lsrs	r0, r1, #3
 800d464:	4770      	bx	lr
 800d466:	bf00      	nop

0800d468 <__errno>:
 800d468:	4b01      	ldr	r3, [pc, #4]	; (800d470 <__errno+0x8>)
 800d46a:	6818      	ldr	r0, [r3, #0]
 800d46c:	4770      	bx	lr
 800d46e:	bf00      	nop
 800d470:	20000610 	.word	0x20000610

0800d474 <__libc_init_array>:
 800d474:	b570      	push	{r4, r5, r6, lr}
 800d476:	4d0d      	ldr	r5, [pc, #52]	; (800d4ac <__libc_init_array+0x38>)
 800d478:	4c0d      	ldr	r4, [pc, #52]	; (800d4b0 <__libc_init_array+0x3c>)
 800d47a:	1b64      	subs	r4, r4, r5
 800d47c:	10a4      	asrs	r4, r4, #2
 800d47e:	2600      	movs	r6, #0
 800d480:	42a6      	cmp	r6, r4
 800d482:	d109      	bne.n	800d498 <__libc_init_array+0x24>
 800d484:	4d0b      	ldr	r5, [pc, #44]	; (800d4b4 <__libc_init_array+0x40>)
 800d486:	4c0c      	ldr	r4, [pc, #48]	; (800d4b8 <__libc_init_array+0x44>)
 800d488:	f000 fc4e 	bl	800dd28 <_init>
 800d48c:	1b64      	subs	r4, r4, r5
 800d48e:	10a4      	asrs	r4, r4, #2
 800d490:	2600      	movs	r6, #0
 800d492:	42a6      	cmp	r6, r4
 800d494:	d105      	bne.n	800d4a2 <__libc_init_array+0x2e>
 800d496:	bd70      	pop	{r4, r5, r6, pc}
 800d498:	f855 3b04 	ldr.w	r3, [r5], #4
 800d49c:	4798      	blx	r3
 800d49e:	3601      	adds	r6, #1
 800d4a0:	e7ee      	b.n	800d480 <__libc_init_array+0xc>
 800d4a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4a6:	4798      	blx	r3
 800d4a8:	3601      	adds	r6, #1
 800d4aa:	e7f2      	b.n	800d492 <__libc_init_array+0x1e>
 800d4ac:	0800de30 	.word	0x0800de30
 800d4b0:	0800de30 	.word	0x0800de30
 800d4b4:	0800de30 	.word	0x0800de30
 800d4b8:	0800de34 	.word	0x0800de34

0800d4bc <memcpy>:
 800d4bc:	440a      	add	r2, r1
 800d4be:	4291      	cmp	r1, r2
 800d4c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d4c4:	d100      	bne.n	800d4c8 <memcpy+0xc>
 800d4c6:	4770      	bx	lr
 800d4c8:	b510      	push	{r4, lr}
 800d4ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4d2:	4291      	cmp	r1, r2
 800d4d4:	d1f9      	bne.n	800d4ca <memcpy+0xe>
 800d4d6:	bd10      	pop	{r4, pc}

0800d4d8 <memset>:
 800d4d8:	4402      	add	r2, r0
 800d4da:	4603      	mov	r3, r0
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d100      	bne.n	800d4e2 <memset+0xa>
 800d4e0:	4770      	bx	lr
 800d4e2:	f803 1b01 	strb.w	r1, [r3], #1
 800d4e6:	e7f9      	b.n	800d4dc <memset+0x4>

0800d4e8 <_free_r>:
 800d4e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d4ea:	2900      	cmp	r1, #0
 800d4ec:	d048      	beq.n	800d580 <_free_r+0x98>
 800d4ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4f2:	9001      	str	r0, [sp, #4]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	f1a1 0404 	sub.w	r4, r1, #4
 800d4fa:	bfb8      	it	lt
 800d4fc:	18e4      	addlt	r4, r4, r3
 800d4fe:	f000 f8cd 	bl	800d69c <__malloc_lock>
 800d502:	4a20      	ldr	r2, [pc, #128]	; (800d584 <_free_r+0x9c>)
 800d504:	9801      	ldr	r0, [sp, #4]
 800d506:	6813      	ldr	r3, [r2, #0]
 800d508:	4615      	mov	r5, r2
 800d50a:	b933      	cbnz	r3, 800d51a <_free_r+0x32>
 800d50c:	6063      	str	r3, [r4, #4]
 800d50e:	6014      	str	r4, [r2, #0]
 800d510:	b003      	add	sp, #12
 800d512:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d516:	f000 b8c7 	b.w	800d6a8 <__malloc_unlock>
 800d51a:	42a3      	cmp	r3, r4
 800d51c:	d90b      	bls.n	800d536 <_free_r+0x4e>
 800d51e:	6821      	ldr	r1, [r4, #0]
 800d520:	1862      	adds	r2, r4, r1
 800d522:	4293      	cmp	r3, r2
 800d524:	bf04      	itt	eq
 800d526:	681a      	ldreq	r2, [r3, #0]
 800d528:	685b      	ldreq	r3, [r3, #4]
 800d52a:	6063      	str	r3, [r4, #4]
 800d52c:	bf04      	itt	eq
 800d52e:	1852      	addeq	r2, r2, r1
 800d530:	6022      	streq	r2, [r4, #0]
 800d532:	602c      	str	r4, [r5, #0]
 800d534:	e7ec      	b.n	800d510 <_free_r+0x28>
 800d536:	461a      	mov	r2, r3
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	b10b      	cbz	r3, 800d540 <_free_r+0x58>
 800d53c:	42a3      	cmp	r3, r4
 800d53e:	d9fa      	bls.n	800d536 <_free_r+0x4e>
 800d540:	6811      	ldr	r1, [r2, #0]
 800d542:	1855      	adds	r5, r2, r1
 800d544:	42a5      	cmp	r5, r4
 800d546:	d10b      	bne.n	800d560 <_free_r+0x78>
 800d548:	6824      	ldr	r4, [r4, #0]
 800d54a:	4421      	add	r1, r4
 800d54c:	1854      	adds	r4, r2, r1
 800d54e:	42a3      	cmp	r3, r4
 800d550:	6011      	str	r1, [r2, #0]
 800d552:	d1dd      	bne.n	800d510 <_free_r+0x28>
 800d554:	681c      	ldr	r4, [r3, #0]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	6053      	str	r3, [r2, #4]
 800d55a:	4421      	add	r1, r4
 800d55c:	6011      	str	r1, [r2, #0]
 800d55e:	e7d7      	b.n	800d510 <_free_r+0x28>
 800d560:	d902      	bls.n	800d568 <_free_r+0x80>
 800d562:	230c      	movs	r3, #12
 800d564:	6003      	str	r3, [r0, #0]
 800d566:	e7d3      	b.n	800d510 <_free_r+0x28>
 800d568:	6825      	ldr	r5, [r4, #0]
 800d56a:	1961      	adds	r1, r4, r5
 800d56c:	428b      	cmp	r3, r1
 800d56e:	bf04      	itt	eq
 800d570:	6819      	ldreq	r1, [r3, #0]
 800d572:	685b      	ldreq	r3, [r3, #4]
 800d574:	6063      	str	r3, [r4, #4]
 800d576:	bf04      	itt	eq
 800d578:	1949      	addeq	r1, r1, r5
 800d57a:	6021      	streq	r1, [r4, #0]
 800d57c:	6054      	str	r4, [r2, #4]
 800d57e:	e7c7      	b.n	800d510 <_free_r+0x28>
 800d580:	b003      	add	sp, #12
 800d582:	bd30      	pop	{r4, r5, pc}
 800d584:	20000724 	.word	0x20000724

0800d588 <_malloc_r>:
 800d588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d58a:	1ccd      	adds	r5, r1, #3
 800d58c:	f025 0503 	bic.w	r5, r5, #3
 800d590:	3508      	adds	r5, #8
 800d592:	2d0c      	cmp	r5, #12
 800d594:	bf38      	it	cc
 800d596:	250c      	movcc	r5, #12
 800d598:	2d00      	cmp	r5, #0
 800d59a:	4606      	mov	r6, r0
 800d59c:	db01      	blt.n	800d5a2 <_malloc_r+0x1a>
 800d59e:	42a9      	cmp	r1, r5
 800d5a0:	d903      	bls.n	800d5aa <_malloc_r+0x22>
 800d5a2:	230c      	movs	r3, #12
 800d5a4:	6033      	str	r3, [r6, #0]
 800d5a6:	2000      	movs	r0, #0
 800d5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5aa:	f000 f877 	bl	800d69c <__malloc_lock>
 800d5ae:	4921      	ldr	r1, [pc, #132]	; (800d634 <_malloc_r+0xac>)
 800d5b0:	680a      	ldr	r2, [r1, #0]
 800d5b2:	4614      	mov	r4, r2
 800d5b4:	b99c      	cbnz	r4, 800d5de <_malloc_r+0x56>
 800d5b6:	4f20      	ldr	r7, [pc, #128]	; (800d638 <_malloc_r+0xb0>)
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	b923      	cbnz	r3, 800d5c6 <_malloc_r+0x3e>
 800d5bc:	4621      	mov	r1, r4
 800d5be:	4630      	mov	r0, r6
 800d5c0:	f000 f83c 	bl	800d63c <_sbrk_r>
 800d5c4:	6038      	str	r0, [r7, #0]
 800d5c6:	4629      	mov	r1, r5
 800d5c8:	4630      	mov	r0, r6
 800d5ca:	f000 f837 	bl	800d63c <_sbrk_r>
 800d5ce:	1c43      	adds	r3, r0, #1
 800d5d0:	d123      	bne.n	800d61a <_malloc_r+0x92>
 800d5d2:	230c      	movs	r3, #12
 800d5d4:	6033      	str	r3, [r6, #0]
 800d5d6:	4630      	mov	r0, r6
 800d5d8:	f000 f866 	bl	800d6a8 <__malloc_unlock>
 800d5dc:	e7e3      	b.n	800d5a6 <_malloc_r+0x1e>
 800d5de:	6823      	ldr	r3, [r4, #0]
 800d5e0:	1b5b      	subs	r3, r3, r5
 800d5e2:	d417      	bmi.n	800d614 <_malloc_r+0x8c>
 800d5e4:	2b0b      	cmp	r3, #11
 800d5e6:	d903      	bls.n	800d5f0 <_malloc_r+0x68>
 800d5e8:	6023      	str	r3, [r4, #0]
 800d5ea:	441c      	add	r4, r3
 800d5ec:	6025      	str	r5, [r4, #0]
 800d5ee:	e004      	b.n	800d5fa <_malloc_r+0x72>
 800d5f0:	6863      	ldr	r3, [r4, #4]
 800d5f2:	42a2      	cmp	r2, r4
 800d5f4:	bf0c      	ite	eq
 800d5f6:	600b      	streq	r3, [r1, #0]
 800d5f8:	6053      	strne	r3, [r2, #4]
 800d5fa:	4630      	mov	r0, r6
 800d5fc:	f000 f854 	bl	800d6a8 <__malloc_unlock>
 800d600:	f104 000b 	add.w	r0, r4, #11
 800d604:	1d23      	adds	r3, r4, #4
 800d606:	f020 0007 	bic.w	r0, r0, #7
 800d60a:	1ac2      	subs	r2, r0, r3
 800d60c:	d0cc      	beq.n	800d5a8 <_malloc_r+0x20>
 800d60e:	1a1b      	subs	r3, r3, r0
 800d610:	50a3      	str	r3, [r4, r2]
 800d612:	e7c9      	b.n	800d5a8 <_malloc_r+0x20>
 800d614:	4622      	mov	r2, r4
 800d616:	6864      	ldr	r4, [r4, #4]
 800d618:	e7cc      	b.n	800d5b4 <_malloc_r+0x2c>
 800d61a:	1cc4      	adds	r4, r0, #3
 800d61c:	f024 0403 	bic.w	r4, r4, #3
 800d620:	42a0      	cmp	r0, r4
 800d622:	d0e3      	beq.n	800d5ec <_malloc_r+0x64>
 800d624:	1a21      	subs	r1, r4, r0
 800d626:	4630      	mov	r0, r6
 800d628:	f000 f808 	bl	800d63c <_sbrk_r>
 800d62c:	3001      	adds	r0, #1
 800d62e:	d1dd      	bne.n	800d5ec <_malloc_r+0x64>
 800d630:	e7cf      	b.n	800d5d2 <_malloc_r+0x4a>
 800d632:	bf00      	nop
 800d634:	20000724 	.word	0x20000724
 800d638:	20000728 	.word	0x20000728

0800d63c <_sbrk_r>:
 800d63c:	b538      	push	{r3, r4, r5, lr}
 800d63e:	4d06      	ldr	r5, [pc, #24]	; (800d658 <_sbrk_r+0x1c>)
 800d640:	2300      	movs	r3, #0
 800d642:	4604      	mov	r4, r0
 800d644:	4608      	mov	r0, r1
 800d646:	602b      	str	r3, [r5, #0]
 800d648:	f7f5 f996 	bl	8002978 <_sbrk>
 800d64c:	1c43      	adds	r3, r0, #1
 800d64e:	d102      	bne.n	800d656 <_sbrk_r+0x1a>
 800d650:	682b      	ldr	r3, [r5, #0]
 800d652:	b103      	cbz	r3, 800d656 <_sbrk_r+0x1a>
 800d654:	6023      	str	r3, [r4, #0]
 800d656:	bd38      	pop	{r3, r4, r5, pc}
 800d658:	200016b4 	.word	0x200016b4

0800d65c <siprintf>:
 800d65c:	b40e      	push	{r1, r2, r3}
 800d65e:	b500      	push	{lr}
 800d660:	b09c      	sub	sp, #112	; 0x70
 800d662:	ab1d      	add	r3, sp, #116	; 0x74
 800d664:	9002      	str	r0, [sp, #8]
 800d666:	9006      	str	r0, [sp, #24]
 800d668:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d66c:	4809      	ldr	r0, [pc, #36]	; (800d694 <siprintf+0x38>)
 800d66e:	9107      	str	r1, [sp, #28]
 800d670:	9104      	str	r1, [sp, #16]
 800d672:	4909      	ldr	r1, [pc, #36]	; (800d698 <siprintf+0x3c>)
 800d674:	f853 2b04 	ldr.w	r2, [r3], #4
 800d678:	9105      	str	r1, [sp, #20]
 800d67a:	6800      	ldr	r0, [r0, #0]
 800d67c:	9301      	str	r3, [sp, #4]
 800d67e:	a902      	add	r1, sp, #8
 800d680:	f000 f89a 	bl	800d7b8 <_svfiprintf_r>
 800d684:	9b02      	ldr	r3, [sp, #8]
 800d686:	2200      	movs	r2, #0
 800d688:	701a      	strb	r2, [r3, #0]
 800d68a:	b01c      	add	sp, #112	; 0x70
 800d68c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d690:	b003      	add	sp, #12
 800d692:	4770      	bx	lr
 800d694:	20000610 	.word	0x20000610
 800d698:	ffff0208 	.word	0xffff0208

0800d69c <__malloc_lock>:
 800d69c:	4801      	ldr	r0, [pc, #4]	; (800d6a4 <__malloc_lock+0x8>)
 800d69e:	f000 bb1f 	b.w	800dce0 <__retarget_lock_acquire_recursive>
 800d6a2:	bf00      	nop
 800d6a4:	200016bc 	.word	0x200016bc

0800d6a8 <__malloc_unlock>:
 800d6a8:	4801      	ldr	r0, [pc, #4]	; (800d6b0 <__malloc_unlock+0x8>)
 800d6aa:	f000 bb1a 	b.w	800dce2 <__retarget_lock_release_recursive>
 800d6ae:	bf00      	nop
 800d6b0:	200016bc 	.word	0x200016bc

0800d6b4 <_realloc_r>:
 800d6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6b6:	4607      	mov	r7, r0
 800d6b8:	4614      	mov	r4, r2
 800d6ba:	460e      	mov	r6, r1
 800d6bc:	b921      	cbnz	r1, 800d6c8 <_realloc_r+0x14>
 800d6be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d6c2:	4611      	mov	r1, r2
 800d6c4:	f7ff bf60 	b.w	800d588 <_malloc_r>
 800d6c8:	b922      	cbnz	r2, 800d6d4 <_realloc_r+0x20>
 800d6ca:	f7ff ff0d 	bl	800d4e8 <_free_r>
 800d6ce:	4625      	mov	r5, r4
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6d4:	f000 fb20 	bl	800dd18 <_malloc_usable_size_r>
 800d6d8:	42a0      	cmp	r0, r4
 800d6da:	d20f      	bcs.n	800d6fc <_realloc_r+0x48>
 800d6dc:	4621      	mov	r1, r4
 800d6de:	4638      	mov	r0, r7
 800d6e0:	f7ff ff52 	bl	800d588 <_malloc_r>
 800d6e4:	4605      	mov	r5, r0
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	d0f2      	beq.n	800d6d0 <_realloc_r+0x1c>
 800d6ea:	4631      	mov	r1, r6
 800d6ec:	4622      	mov	r2, r4
 800d6ee:	f7ff fee5 	bl	800d4bc <memcpy>
 800d6f2:	4631      	mov	r1, r6
 800d6f4:	4638      	mov	r0, r7
 800d6f6:	f7ff fef7 	bl	800d4e8 <_free_r>
 800d6fa:	e7e9      	b.n	800d6d0 <_realloc_r+0x1c>
 800d6fc:	4635      	mov	r5, r6
 800d6fe:	e7e7      	b.n	800d6d0 <_realloc_r+0x1c>

0800d700 <__ssputs_r>:
 800d700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d704:	688e      	ldr	r6, [r1, #8]
 800d706:	429e      	cmp	r6, r3
 800d708:	4682      	mov	sl, r0
 800d70a:	460c      	mov	r4, r1
 800d70c:	4690      	mov	r8, r2
 800d70e:	461f      	mov	r7, r3
 800d710:	d838      	bhi.n	800d784 <__ssputs_r+0x84>
 800d712:	898a      	ldrh	r2, [r1, #12]
 800d714:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d718:	d032      	beq.n	800d780 <__ssputs_r+0x80>
 800d71a:	6825      	ldr	r5, [r4, #0]
 800d71c:	6909      	ldr	r1, [r1, #16]
 800d71e:	eba5 0901 	sub.w	r9, r5, r1
 800d722:	6965      	ldr	r5, [r4, #20]
 800d724:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d728:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d72c:	3301      	adds	r3, #1
 800d72e:	444b      	add	r3, r9
 800d730:	106d      	asrs	r5, r5, #1
 800d732:	429d      	cmp	r5, r3
 800d734:	bf38      	it	cc
 800d736:	461d      	movcc	r5, r3
 800d738:	0553      	lsls	r3, r2, #21
 800d73a:	d531      	bpl.n	800d7a0 <__ssputs_r+0xa0>
 800d73c:	4629      	mov	r1, r5
 800d73e:	f7ff ff23 	bl	800d588 <_malloc_r>
 800d742:	4606      	mov	r6, r0
 800d744:	b950      	cbnz	r0, 800d75c <__ssputs_r+0x5c>
 800d746:	230c      	movs	r3, #12
 800d748:	f8ca 3000 	str.w	r3, [sl]
 800d74c:	89a3      	ldrh	r3, [r4, #12]
 800d74e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d752:	81a3      	strh	r3, [r4, #12]
 800d754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d75c:	6921      	ldr	r1, [r4, #16]
 800d75e:	464a      	mov	r2, r9
 800d760:	f7ff feac 	bl	800d4bc <memcpy>
 800d764:	89a3      	ldrh	r3, [r4, #12]
 800d766:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d76a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d76e:	81a3      	strh	r3, [r4, #12]
 800d770:	6126      	str	r6, [r4, #16]
 800d772:	6165      	str	r5, [r4, #20]
 800d774:	444e      	add	r6, r9
 800d776:	eba5 0509 	sub.w	r5, r5, r9
 800d77a:	6026      	str	r6, [r4, #0]
 800d77c:	60a5      	str	r5, [r4, #8]
 800d77e:	463e      	mov	r6, r7
 800d780:	42be      	cmp	r6, r7
 800d782:	d900      	bls.n	800d786 <__ssputs_r+0x86>
 800d784:	463e      	mov	r6, r7
 800d786:	4632      	mov	r2, r6
 800d788:	6820      	ldr	r0, [r4, #0]
 800d78a:	4641      	mov	r1, r8
 800d78c:	f000 faaa 	bl	800dce4 <memmove>
 800d790:	68a3      	ldr	r3, [r4, #8]
 800d792:	6822      	ldr	r2, [r4, #0]
 800d794:	1b9b      	subs	r3, r3, r6
 800d796:	4432      	add	r2, r6
 800d798:	60a3      	str	r3, [r4, #8]
 800d79a:	6022      	str	r2, [r4, #0]
 800d79c:	2000      	movs	r0, #0
 800d79e:	e7db      	b.n	800d758 <__ssputs_r+0x58>
 800d7a0:	462a      	mov	r2, r5
 800d7a2:	f7ff ff87 	bl	800d6b4 <_realloc_r>
 800d7a6:	4606      	mov	r6, r0
 800d7a8:	2800      	cmp	r0, #0
 800d7aa:	d1e1      	bne.n	800d770 <__ssputs_r+0x70>
 800d7ac:	6921      	ldr	r1, [r4, #16]
 800d7ae:	4650      	mov	r0, sl
 800d7b0:	f7ff fe9a 	bl	800d4e8 <_free_r>
 800d7b4:	e7c7      	b.n	800d746 <__ssputs_r+0x46>
	...

0800d7b8 <_svfiprintf_r>:
 800d7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7bc:	4698      	mov	r8, r3
 800d7be:	898b      	ldrh	r3, [r1, #12]
 800d7c0:	061b      	lsls	r3, r3, #24
 800d7c2:	b09d      	sub	sp, #116	; 0x74
 800d7c4:	4607      	mov	r7, r0
 800d7c6:	460d      	mov	r5, r1
 800d7c8:	4614      	mov	r4, r2
 800d7ca:	d50e      	bpl.n	800d7ea <_svfiprintf_r+0x32>
 800d7cc:	690b      	ldr	r3, [r1, #16]
 800d7ce:	b963      	cbnz	r3, 800d7ea <_svfiprintf_r+0x32>
 800d7d0:	2140      	movs	r1, #64	; 0x40
 800d7d2:	f7ff fed9 	bl	800d588 <_malloc_r>
 800d7d6:	6028      	str	r0, [r5, #0]
 800d7d8:	6128      	str	r0, [r5, #16]
 800d7da:	b920      	cbnz	r0, 800d7e6 <_svfiprintf_r+0x2e>
 800d7dc:	230c      	movs	r3, #12
 800d7de:	603b      	str	r3, [r7, #0]
 800d7e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7e4:	e0d1      	b.n	800d98a <_svfiprintf_r+0x1d2>
 800d7e6:	2340      	movs	r3, #64	; 0x40
 800d7e8:	616b      	str	r3, [r5, #20]
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	9309      	str	r3, [sp, #36]	; 0x24
 800d7ee:	2320      	movs	r3, #32
 800d7f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7f8:	2330      	movs	r3, #48	; 0x30
 800d7fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d9a4 <_svfiprintf_r+0x1ec>
 800d7fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d802:	f04f 0901 	mov.w	r9, #1
 800d806:	4623      	mov	r3, r4
 800d808:	469a      	mov	sl, r3
 800d80a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d80e:	b10a      	cbz	r2, 800d814 <_svfiprintf_r+0x5c>
 800d810:	2a25      	cmp	r2, #37	; 0x25
 800d812:	d1f9      	bne.n	800d808 <_svfiprintf_r+0x50>
 800d814:	ebba 0b04 	subs.w	fp, sl, r4
 800d818:	d00b      	beq.n	800d832 <_svfiprintf_r+0x7a>
 800d81a:	465b      	mov	r3, fp
 800d81c:	4622      	mov	r2, r4
 800d81e:	4629      	mov	r1, r5
 800d820:	4638      	mov	r0, r7
 800d822:	f7ff ff6d 	bl	800d700 <__ssputs_r>
 800d826:	3001      	adds	r0, #1
 800d828:	f000 80aa 	beq.w	800d980 <_svfiprintf_r+0x1c8>
 800d82c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d82e:	445a      	add	r2, fp
 800d830:	9209      	str	r2, [sp, #36]	; 0x24
 800d832:	f89a 3000 	ldrb.w	r3, [sl]
 800d836:	2b00      	cmp	r3, #0
 800d838:	f000 80a2 	beq.w	800d980 <_svfiprintf_r+0x1c8>
 800d83c:	2300      	movs	r3, #0
 800d83e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d846:	f10a 0a01 	add.w	sl, sl, #1
 800d84a:	9304      	str	r3, [sp, #16]
 800d84c:	9307      	str	r3, [sp, #28]
 800d84e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d852:	931a      	str	r3, [sp, #104]	; 0x68
 800d854:	4654      	mov	r4, sl
 800d856:	2205      	movs	r2, #5
 800d858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d85c:	4851      	ldr	r0, [pc, #324]	; (800d9a4 <_svfiprintf_r+0x1ec>)
 800d85e:	f7f2 fcd7 	bl	8000210 <memchr>
 800d862:	9a04      	ldr	r2, [sp, #16]
 800d864:	b9d8      	cbnz	r0, 800d89e <_svfiprintf_r+0xe6>
 800d866:	06d0      	lsls	r0, r2, #27
 800d868:	bf44      	itt	mi
 800d86a:	2320      	movmi	r3, #32
 800d86c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d870:	0711      	lsls	r1, r2, #28
 800d872:	bf44      	itt	mi
 800d874:	232b      	movmi	r3, #43	; 0x2b
 800d876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d87a:	f89a 3000 	ldrb.w	r3, [sl]
 800d87e:	2b2a      	cmp	r3, #42	; 0x2a
 800d880:	d015      	beq.n	800d8ae <_svfiprintf_r+0xf6>
 800d882:	9a07      	ldr	r2, [sp, #28]
 800d884:	4654      	mov	r4, sl
 800d886:	2000      	movs	r0, #0
 800d888:	f04f 0c0a 	mov.w	ip, #10
 800d88c:	4621      	mov	r1, r4
 800d88e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d892:	3b30      	subs	r3, #48	; 0x30
 800d894:	2b09      	cmp	r3, #9
 800d896:	d94e      	bls.n	800d936 <_svfiprintf_r+0x17e>
 800d898:	b1b0      	cbz	r0, 800d8c8 <_svfiprintf_r+0x110>
 800d89a:	9207      	str	r2, [sp, #28]
 800d89c:	e014      	b.n	800d8c8 <_svfiprintf_r+0x110>
 800d89e:	eba0 0308 	sub.w	r3, r0, r8
 800d8a2:	fa09 f303 	lsl.w	r3, r9, r3
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	9304      	str	r3, [sp, #16]
 800d8aa:	46a2      	mov	sl, r4
 800d8ac:	e7d2      	b.n	800d854 <_svfiprintf_r+0x9c>
 800d8ae:	9b03      	ldr	r3, [sp, #12]
 800d8b0:	1d19      	adds	r1, r3, #4
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	9103      	str	r1, [sp, #12]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	bfbb      	ittet	lt
 800d8ba:	425b      	neglt	r3, r3
 800d8bc:	f042 0202 	orrlt.w	r2, r2, #2
 800d8c0:	9307      	strge	r3, [sp, #28]
 800d8c2:	9307      	strlt	r3, [sp, #28]
 800d8c4:	bfb8      	it	lt
 800d8c6:	9204      	strlt	r2, [sp, #16]
 800d8c8:	7823      	ldrb	r3, [r4, #0]
 800d8ca:	2b2e      	cmp	r3, #46	; 0x2e
 800d8cc:	d10c      	bne.n	800d8e8 <_svfiprintf_r+0x130>
 800d8ce:	7863      	ldrb	r3, [r4, #1]
 800d8d0:	2b2a      	cmp	r3, #42	; 0x2a
 800d8d2:	d135      	bne.n	800d940 <_svfiprintf_r+0x188>
 800d8d4:	9b03      	ldr	r3, [sp, #12]
 800d8d6:	1d1a      	adds	r2, r3, #4
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	9203      	str	r2, [sp, #12]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	bfb8      	it	lt
 800d8e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d8e4:	3402      	adds	r4, #2
 800d8e6:	9305      	str	r3, [sp, #20]
 800d8e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d9b4 <_svfiprintf_r+0x1fc>
 800d8ec:	7821      	ldrb	r1, [r4, #0]
 800d8ee:	2203      	movs	r2, #3
 800d8f0:	4650      	mov	r0, sl
 800d8f2:	f7f2 fc8d 	bl	8000210 <memchr>
 800d8f6:	b140      	cbz	r0, 800d90a <_svfiprintf_r+0x152>
 800d8f8:	2340      	movs	r3, #64	; 0x40
 800d8fa:	eba0 000a 	sub.w	r0, r0, sl
 800d8fe:	fa03 f000 	lsl.w	r0, r3, r0
 800d902:	9b04      	ldr	r3, [sp, #16]
 800d904:	4303      	orrs	r3, r0
 800d906:	3401      	adds	r4, #1
 800d908:	9304      	str	r3, [sp, #16]
 800d90a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d90e:	4826      	ldr	r0, [pc, #152]	; (800d9a8 <_svfiprintf_r+0x1f0>)
 800d910:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d914:	2206      	movs	r2, #6
 800d916:	f7f2 fc7b 	bl	8000210 <memchr>
 800d91a:	2800      	cmp	r0, #0
 800d91c:	d038      	beq.n	800d990 <_svfiprintf_r+0x1d8>
 800d91e:	4b23      	ldr	r3, [pc, #140]	; (800d9ac <_svfiprintf_r+0x1f4>)
 800d920:	bb1b      	cbnz	r3, 800d96a <_svfiprintf_r+0x1b2>
 800d922:	9b03      	ldr	r3, [sp, #12]
 800d924:	3307      	adds	r3, #7
 800d926:	f023 0307 	bic.w	r3, r3, #7
 800d92a:	3308      	adds	r3, #8
 800d92c:	9303      	str	r3, [sp, #12]
 800d92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d930:	4433      	add	r3, r6
 800d932:	9309      	str	r3, [sp, #36]	; 0x24
 800d934:	e767      	b.n	800d806 <_svfiprintf_r+0x4e>
 800d936:	fb0c 3202 	mla	r2, ip, r2, r3
 800d93a:	460c      	mov	r4, r1
 800d93c:	2001      	movs	r0, #1
 800d93e:	e7a5      	b.n	800d88c <_svfiprintf_r+0xd4>
 800d940:	2300      	movs	r3, #0
 800d942:	3401      	adds	r4, #1
 800d944:	9305      	str	r3, [sp, #20]
 800d946:	4619      	mov	r1, r3
 800d948:	f04f 0c0a 	mov.w	ip, #10
 800d94c:	4620      	mov	r0, r4
 800d94e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d952:	3a30      	subs	r2, #48	; 0x30
 800d954:	2a09      	cmp	r2, #9
 800d956:	d903      	bls.n	800d960 <_svfiprintf_r+0x1a8>
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d0c5      	beq.n	800d8e8 <_svfiprintf_r+0x130>
 800d95c:	9105      	str	r1, [sp, #20]
 800d95e:	e7c3      	b.n	800d8e8 <_svfiprintf_r+0x130>
 800d960:	fb0c 2101 	mla	r1, ip, r1, r2
 800d964:	4604      	mov	r4, r0
 800d966:	2301      	movs	r3, #1
 800d968:	e7f0      	b.n	800d94c <_svfiprintf_r+0x194>
 800d96a:	ab03      	add	r3, sp, #12
 800d96c:	9300      	str	r3, [sp, #0]
 800d96e:	462a      	mov	r2, r5
 800d970:	4b0f      	ldr	r3, [pc, #60]	; (800d9b0 <_svfiprintf_r+0x1f8>)
 800d972:	a904      	add	r1, sp, #16
 800d974:	4638      	mov	r0, r7
 800d976:	f3af 8000 	nop.w
 800d97a:	1c42      	adds	r2, r0, #1
 800d97c:	4606      	mov	r6, r0
 800d97e:	d1d6      	bne.n	800d92e <_svfiprintf_r+0x176>
 800d980:	89ab      	ldrh	r3, [r5, #12]
 800d982:	065b      	lsls	r3, r3, #25
 800d984:	f53f af2c 	bmi.w	800d7e0 <_svfiprintf_r+0x28>
 800d988:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d98a:	b01d      	add	sp, #116	; 0x74
 800d98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d990:	ab03      	add	r3, sp, #12
 800d992:	9300      	str	r3, [sp, #0]
 800d994:	462a      	mov	r2, r5
 800d996:	4b06      	ldr	r3, [pc, #24]	; (800d9b0 <_svfiprintf_r+0x1f8>)
 800d998:	a904      	add	r1, sp, #16
 800d99a:	4638      	mov	r0, r7
 800d99c:	f000 f87a 	bl	800da94 <_printf_i>
 800d9a0:	e7eb      	b.n	800d97a <_svfiprintf_r+0x1c2>
 800d9a2:	bf00      	nop
 800d9a4:	0800ddf4 	.word	0x0800ddf4
 800d9a8:	0800ddfe 	.word	0x0800ddfe
 800d9ac:	00000000 	.word	0x00000000
 800d9b0:	0800d701 	.word	0x0800d701
 800d9b4:	0800ddfa 	.word	0x0800ddfa

0800d9b8 <_printf_common>:
 800d9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9bc:	4616      	mov	r6, r2
 800d9be:	4699      	mov	r9, r3
 800d9c0:	688a      	ldr	r2, [r1, #8]
 800d9c2:	690b      	ldr	r3, [r1, #16]
 800d9c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	bfb8      	it	lt
 800d9cc:	4613      	movlt	r3, r2
 800d9ce:	6033      	str	r3, [r6, #0]
 800d9d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d9d4:	4607      	mov	r7, r0
 800d9d6:	460c      	mov	r4, r1
 800d9d8:	b10a      	cbz	r2, 800d9de <_printf_common+0x26>
 800d9da:	3301      	adds	r3, #1
 800d9dc:	6033      	str	r3, [r6, #0]
 800d9de:	6823      	ldr	r3, [r4, #0]
 800d9e0:	0699      	lsls	r1, r3, #26
 800d9e2:	bf42      	ittt	mi
 800d9e4:	6833      	ldrmi	r3, [r6, #0]
 800d9e6:	3302      	addmi	r3, #2
 800d9e8:	6033      	strmi	r3, [r6, #0]
 800d9ea:	6825      	ldr	r5, [r4, #0]
 800d9ec:	f015 0506 	ands.w	r5, r5, #6
 800d9f0:	d106      	bne.n	800da00 <_printf_common+0x48>
 800d9f2:	f104 0a19 	add.w	sl, r4, #25
 800d9f6:	68e3      	ldr	r3, [r4, #12]
 800d9f8:	6832      	ldr	r2, [r6, #0]
 800d9fa:	1a9b      	subs	r3, r3, r2
 800d9fc:	42ab      	cmp	r3, r5
 800d9fe:	dc26      	bgt.n	800da4e <_printf_common+0x96>
 800da00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da04:	1e13      	subs	r3, r2, #0
 800da06:	6822      	ldr	r2, [r4, #0]
 800da08:	bf18      	it	ne
 800da0a:	2301      	movne	r3, #1
 800da0c:	0692      	lsls	r2, r2, #26
 800da0e:	d42b      	bmi.n	800da68 <_printf_common+0xb0>
 800da10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da14:	4649      	mov	r1, r9
 800da16:	4638      	mov	r0, r7
 800da18:	47c0      	blx	r8
 800da1a:	3001      	adds	r0, #1
 800da1c:	d01e      	beq.n	800da5c <_printf_common+0xa4>
 800da1e:	6823      	ldr	r3, [r4, #0]
 800da20:	68e5      	ldr	r5, [r4, #12]
 800da22:	6832      	ldr	r2, [r6, #0]
 800da24:	f003 0306 	and.w	r3, r3, #6
 800da28:	2b04      	cmp	r3, #4
 800da2a:	bf08      	it	eq
 800da2c:	1aad      	subeq	r5, r5, r2
 800da2e:	68a3      	ldr	r3, [r4, #8]
 800da30:	6922      	ldr	r2, [r4, #16]
 800da32:	bf0c      	ite	eq
 800da34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da38:	2500      	movne	r5, #0
 800da3a:	4293      	cmp	r3, r2
 800da3c:	bfc4      	itt	gt
 800da3e:	1a9b      	subgt	r3, r3, r2
 800da40:	18ed      	addgt	r5, r5, r3
 800da42:	2600      	movs	r6, #0
 800da44:	341a      	adds	r4, #26
 800da46:	42b5      	cmp	r5, r6
 800da48:	d11a      	bne.n	800da80 <_printf_common+0xc8>
 800da4a:	2000      	movs	r0, #0
 800da4c:	e008      	b.n	800da60 <_printf_common+0xa8>
 800da4e:	2301      	movs	r3, #1
 800da50:	4652      	mov	r2, sl
 800da52:	4649      	mov	r1, r9
 800da54:	4638      	mov	r0, r7
 800da56:	47c0      	blx	r8
 800da58:	3001      	adds	r0, #1
 800da5a:	d103      	bne.n	800da64 <_printf_common+0xac>
 800da5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da64:	3501      	adds	r5, #1
 800da66:	e7c6      	b.n	800d9f6 <_printf_common+0x3e>
 800da68:	18e1      	adds	r1, r4, r3
 800da6a:	1c5a      	adds	r2, r3, #1
 800da6c:	2030      	movs	r0, #48	; 0x30
 800da6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800da72:	4422      	add	r2, r4
 800da74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800da78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800da7c:	3302      	adds	r3, #2
 800da7e:	e7c7      	b.n	800da10 <_printf_common+0x58>
 800da80:	2301      	movs	r3, #1
 800da82:	4622      	mov	r2, r4
 800da84:	4649      	mov	r1, r9
 800da86:	4638      	mov	r0, r7
 800da88:	47c0      	blx	r8
 800da8a:	3001      	adds	r0, #1
 800da8c:	d0e6      	beq.n	800da5c <_printf_common+0xa4>
 800da8e:	3601      	adds	r6, #1
 800da90:	e7d9      	b.n	800da46 <_printf_common+0x8e>
	...

0800da94 <_printf_i>:
 800da94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da98:	460c      	mov	r4, r1
 800da9a:	4691      	mov	r9, r2
 800da9c:	7e27      	ldrb	r7, [r4, #24]
 800da9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800daa0:	2f78      	cmp	r7, #120	; 0x78
 800daa2:	4680      	mov	r8, r0
 800daa4:	469a      	mov	sl, r3
 800daa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800daaa:	d807      	bhi.n	800dabc <_printf_i+0x28>
 800daac:	2f62      	cmp	r7, #98	; 0x62
 800daae:	d80a      	bhi.n	800dac6 <_printf_i+0x32>
 800dab0:	2f00      	cmp	r7, #0
 800dab2:	f000 80d8 	beq.w	800dc66 <_printf_i+0x1d2>
 800dab6:	2f58      	cmp	r7, #88	; 0x58
 800dab8:	f000 80a3 	beq.w	800dc02 <_printf_i+0x16e>
 800dabc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dac0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dac4:	e03a      	b.n	800db3c <_printf_i+0xa8>
 800dac6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800daca:	2b15      	cmp	r3, #21
 800dacc:	d8f6      	bhi.n	800dabc <_printf_i+0x28>
 800dace:	a001      	add	r0, pc, #4	; (adr r0, 800dad4 <_printf_i+0x40>)
 800dad0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800dad4:	0800db2d 	.word	0x0800db2d
 800dad8:	0800db41 	.word	0x0800db41
 800dadc:	0800dabd 	.word	0x0800dabd
 800dae0:	0800dabd 	.word	0x0800dabd
 800dae4:	0800dabd 	.word	0x0800dabd
 800dae8:	0800dabd 	.word	0x0800dabd
 800daec:	0800db41 	.word	0x0800db41
 800daf0:	0800dabd 	.word	0x0800dabd
 800daf4:	0800dabd 	.word	0x0800dabd
 800daf8:	0800dabd 	.word	0x0800dabd
 800dafc:	0800dabd 	.word	0x0800dabd
 800db00:	0800dc4d 	.word	0x0800dc4d
 800db04:	0800db71 	.word	0x0800db71
 800db08:	0800dc2f 	.word	0x0800dc2f
 800db0c:	0800dabd 	.word	0x0800dabd
 800db10:	0800dabd 	.word	0x0800dabd
 800db14:	0800dc6f 	.word	0x0800dc6f
 800db18:	0800dabd 	.word	0x0800dabd
 800db1c:	0800db71 	.word	0x0800db71
 800db20:	0800dabd 	.word	0x0800dabd
 800db24:	0800dabd 	.word	0x0800dabd
 800db28:	0800dc37 	.word	0x0800dc37
 800db2c:	680b      	ldr	r3, [r1, #0]
 800db2e:	1d1a      	adds	r2, r3, #4
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	600a      	str	r2, [r1, #0]
 800db34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800db38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db3c:	2301      	movs	r3, #1
 800db3e:	e0a3      	b.n	800dc88 <_printf_i+0x1f4>
 800db40:	6825      	ldr	r5, [r4, #0]
 800db42:	6808      	ldr	r0, [r1, #0]
 800db44:	062e      	lsls	r6, r5, #24
 800db46:	f100 0304 	add.w	r3, r0, #4
 800db4a:	d50a      	bpl.n	800db62 <_printf_i+0xce>
 800db4c:	6805      	ldr	r5, [r0, #0]
 800db4e:	600b      	str	r3, [r1, #0]
 800db50:	2d00      	cmp	r5, #0
 800db52:	da03      	bge.n	800db5c <_printf_i+0xc8>
 800db54:	232d      	movs	r3, #45	; 0x2d
 800db56:	426d      	negs	r5, r5
 800db58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db5c:	485e      	ldr	r0, [pc, #376]	; (800dcd8 <_printf_i+0x244>)
 800db5e:	230a      	movs	r3, #10
 800db60:	e019      	b.n	800db96 <_printf_i+0x102>
 800db62:	f015 0f40 	tst.w	r5, #64	; 0x40
 800db66:	6805      	ldr	r5, [r0, #0]
 800db68:	600b      	str	r3, [r1, #0]
 800db6a:	bf18      	it	ne
 800db6c:	b22d      	sxthne	r5, r5
 800db6e:	e7ef      	b.n	800db50 <_printf_i+0xbc>
 800db70:	680b      	ldr	r3, [r1, #0]
 800db72:	6825      	ldr	r5, [r4, #0]
 800db74:	1d18      	adds	r0, r3, #4
 800db76:	6008      	str	r0, [r1, #0]
 800db78:	0628      	lsls	r0, r5, #24
 800db7a:	d501      	bpl.n	800db80 <_printf_i+0xec>
 800db7c:	681d      	ldr	r5, [r3, #0]
 800db7e:	e002      	b.n	800db86 <_printf_i+0xf2>
 800db80:	0669      	lsls	r1, r5, #25
 800db82:	d5fb      	bpl.n	800db7c <_printf_i+0xe8>
 800db84:	881d      	ldrh	r5, [r3, #0]
 800db86:	4854      	ldr	r0, [pc, #336]	; (800dcd8 <_printf_i+0x244>)
 800db88:	2f6f      	cmp	r7, #111	; 0x6f
 800db8a:	bf0c      	ite	eq
 800db8c:	2308      	moveq	r3, #8
 800db8e:	230a      	movne	r3, #10
 800db90:	2100      	movs	r1, #0
 800db92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800db96:	6866      	ldr	r6, [r4, #4]
 800db98:	60a6      	str	r6, [r4, #8]
 800db9a:	2e00      	cmp	r6, #0
 800db9c:	bfa2      	ittt	ge
 800db9e:	6821      	ldrge	r1, [r4, #0]
 800dba0:	f021 0104 	bicge.w	r1, r1, #4
 800dba4:	6021      	strge	r1, [r4, #0]
 800dba6:	b90d      	cbnz	r5, 800dbac <_printf_i+0x118>
 800dba8:	2e00      	cmp	r6, #0
 800dbaa:	d04d      	beq.n	800dc48 <_printf_i+0x1b4>
 800dbac:	4616      	mov	r6, r2
 800dbae:	fbb5 f1f3 	udiv	r1, r5, r3
 800dbb2:	fb03 5711 	mls	r7, r3, r1, r5
 800dbb6:	5dc7      	ldrb	r7, [r0, r7]
 800dbb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dbbc:	462f      	mov	r7, r5
 800dbbe:	42bb      	cmp	r3, r7
 800dbc0:	460d      	mov	r5, r1
 800dbc2:	d9f4      	bls.n	800dbae <_printf_i+0x11a>
 800dbc4:	2b08      	cmp	r3, #8
 800dbc6:	d10b      	bne.n	800dbe0 <_printf_i+0x14c>
 800dbc8:	6823      	ldr	r3, [r4, #0]
 800dbca:	07df      	lsls	r7, r3, #31
 800dbcc:	d508      	bpl.n	800dbe0 <_printf_i+0x14c>
 800dbce:	6923      	ldr	r3, [r4, #16]
 800dbd0:	6861      	ldr	r1, [r4, #4]
 800dbd2:	4299      	cmp	r1, r3
 800dbd4:	bfde      	ittt	le
 800dbd6:	2330      	movle	r3, #48	; 0x30
 800dbd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dbdc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800dbe0:	1b92      	subs	r2, r2, r6
 800dbe2:	6122      	str	r2, [r4, #16]
 800dbe4:	f8cd a000 	str.w	sl, [sp]
 800dbe8:	464b      	mov	r3, r9
 800dbea:	aa03      	add	r2, sp, #12
 800dbec:	4621      	mov	r1, r4
 800dbee:	4640      	mov	r0, r8
 800dbf0:	f7ff fee2 	bl	800d9b8 <_printf_common>
 800dbf4:	3001      	adds	r0, #1
 800dbf6:	d14c      	bne.n	800dc92 <_printf_i+0x1fe>
 800dbf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dbfc:	b004      	add	sp, #16
 800dbfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc02:	4835      	ldr	r0, [pc, #212]	; (800dcd8 <_printf_i+0x244>)
 800dc04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dc08:	6823      	ldr	r3, [r4, #0]
 800dc0a:	680e      	ldr	r6, [r1, #0]
 800dc0c:	061f      	lsls	r7, r3, #24
 800dc0e:	f856 5b04 	ldr.w	r5, [r6], #4
 800dc12:	600e      	str	r6, [r1, #0]
 800dc14:	d514      	bpl.n	800dc40 <_printf_i+0x1ac>
 800dc16:	07d9      	lsls	r1, r3, #31
 800dc18:	bf44      	itt	mi
 800dc1a:	f043 0320 	orrmi.w	r3, r3, #32
 800dc1e:	6023      	strmi	r3, [r4, #0]
 800dc20:	b91d      	cbnz	r5, 800dc2a <_printf_i+0x196>
 800dc22:	6823      	ldr	r3, [r4, #0]
 800dc24:	f023 0320 	bic.w	r3, r3, #32
 800dc28:	6023      	str	r3, [r4, #0]
 800dc2a:	2310      	movs	r3, #16
 800dc2c:	e7b0      	b.n	800db90 <_printf_i+0xfc>
 800dc2e:	6823      	ldr	r3, [r4, #0]
 800dc30:	f043 0320 	orr.w	r3, r3, #32
 800dc34:	6023      	str	r3, [r4, #0]
 800dc36:	2378      	movs	r3, #120	; 0x78
 800dc38:	4828      	ldr	r0, [pc, #160]	; (800dcdc <_printf_i+0x248>)
 800dc3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dc3e:	e7e3      	b.n	800dc08 <_printf_i+0x174>
 800dc40:	065e      	lsls	r6, r3, #25
 800dc42:	bf48      	it	mi
 800dc44:	b2ad      	uxthmi	r5, r5
 800dc46:	e7e6      	b.n	800dc16 <_printf_i+0x182>
 800dc48:	4616      	mov	r6, r2
 800dc4a:	e7bb      	b.n	800dbc4 <_printf_i+0x130>
 800dc4c:	680b      	ldr	r3, [r1, #0]
 800dc4e:	6826      	ldr	r6, [r4, #0]
 800dc50:	6960      	ldr	r0, [r4, #20]
 800dc52:	1d1d      	adds	r5, r3, #4
 800dc54:	600d      	str	r5, [r1, #0]
 800dc56:	0635      	lsls	r5, r6, #24
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	d501      	bpl.n	800dc60 <_printf_i+0x1cc>
 800dc5c:	6018      	str	r0, [r3, #0]
 800dc5e:	e002      	b.n	800dc66 <_printf_i+0x1d2>
 800dc60:	0671      	lsls	r1, r6, #25
 800dc62:	d5fb      	bpl.n	800dc5c <_printf_i+0x1c8>
 800dc64:	8018      	strh	r0, [r3, #0]
 800dc66:	2300      	movs	r3, #0
 800dc68:	6123      	str	r3, [r4, #16]
 800dc6a:	4616      	mov	r6, r2
 800dc6c:	e7ba      	b.n	800dbe4 <_printf_i+0x150>
 800dc6e:	680b      	ldr	r3, [r1, #0]
 800dc70:	1d1a      	adds	r2, r3, #4
 800dc72:	600a      	str	r2, [r1, #0]
 800dc74:	681e      	ldr	r6, [r3, #0]
 800dc76:	6862      	ldr	r2, [r4, #4]
 800dc78:	2100      	movs	r1, #0
 800dc7a:	4630      	mov	r0, r6
 800dc7c:	f7f2 fac8 	bl	8000210 <memchr>
 800dc80:	b108      	cbz	r0, 800dc86 <_printf_i+0x1f2>
 800dc82:	1b80      	subs	r0, r0, r6
 800dc84:	6060      	str	r0, [r4, #4]
 800dc86:	6863      	ldr	r3, [r4, #4]
 800dc88:	6123      	str	r3, [r4, #16]
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc90:	e7a8      	b.n	800dbe4 <_printf_i+0x150>
 800dc92:	6923      	ldr	r3, [r4, #16]
 800dc94:	4632      	mov	r2, r6
 800dc96:	4649      	mov	r1, r9
 800dc98:	4640      	mov	r0, r8
 800dc9a:	47d0      	blx	sl
 800dc9c:	3001      	adds	r0, #1
 800dc9e:	d0ab      	beq.n	800dbf8 <_printf_i+0x164>
 800dca0:	6823      	ldr	r3, [r4, #0]
 800dca2:	079b      	lsls	r3, r3, #30
 800dca4:	d413      	bmi.n	800dcce <_printf_i+0x23a>
 800dca6:	68e0      	ldr	r0, [r4, #12]
 800dca8:	9b03      	ldr	r3, [sp, #12]
 800dcaa:	4298      	cmp	r0, r3
 800dcac:	bfb8      	it	lt
 800dcae:	4618      	movlt	r0, r3
 800dcb0:	e7a4      	b.n	800dbfc <_printf_i+0x168>
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	4632      	mov	r2, r6
 800dcb6:	4649      	mov	r1, r9
 800dcb8:	4640      	mov	r0, r8
 800dcba:	47d0      	blx	sl
 800dcbc:	3001      	adds	r0, #1
 800dcbe:	d09b      	beq.n	800dbf8 <_printf_i+0x164>
 800dcc0:	3501      	adds	r5, #1
 800dcc2:	68e3      	ldr	r3, [r4, #12]
 800dcc4:	9903      	ldr	r1, [sp, #12]
 800dcc6:	1a5b      	subs	r3, r3, r1
 800dcc8:	42ab      	cmp	r3, r5
 800dcca:	dcf2      	bgt.n	800dcb2 <_printf_i+0x21e>
 800dccc:	e7eb      	b.n	800dca6 <_printf_i+0x212>
 800dcce:	2500      	movs	r5, #0
 800dcd0:	f104 0619 	add.w	r6, r4, #25
 800dcd4:	e7f5      	b.n	800dcc2 <_printf_i+0x22e>
 800dcd6:	bf00      	nop
 800dcd8:	0800de05 	.word	0x0800de05
 800dcdc:	0800de16 	.word	0x0800de16

0800dce0 <__retarget_lock_acquire_recursive>:
 800dce0:	4770      	bx	lr

0800dce2 <__retarget_lock_release_recursive>:
 800dce2:	4770      	bx	lr

0800dce4 <memmove>:
 800dce4:	4288      	cmp	r0, r1
 800dce6:	b510      	push	{r4, lr}
 800dce8:	eb01 0402 	add.w	r4, r1, r2
 800dcec:	d902      	bls.n	800dcf4 <memmove+0x10>
 800dcee:	4284      	cmp	r4, r0
 800dcf0:	4623      	mov	r3, r4
 800dcf2:	d807      	bhi.n	800dd04 <memmove+0x20>
 800dcf4:	1e43      	subs	r3, r0, #1
 800dcf6:	42a1      	cmp	r1, r4
 800dcf8:	d008      	beq.n	800dd0c <memmove+0x28>
 800dcfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd02:	e7f8      	b.n	800dcf6 <memmove+0x12>
 800dd04:	4402      	add	r2, r0
 800dd06:	4601      	mov	r1, r0
 800dd08:	428a      	cmp	r2, r1
 800dd0a:	d100      	bne.n	800dd0e <memmove+0x2a>
 800dd0c:	bd10      	pop	{r4, pc}
 800dd0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd16:	e7f7      	b.n	800dd08 <memmove+0x24>

0800dd18 <_malloc_usable_size_r>:
 800dd18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd1c:	1f18      	subs	r0, r3, #4
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	bfbc      	itt	lt
 800dd22:	580b      	ldrlt	r3, [r1, r0]
 800dd24:	18c0      	addlt	r0, r0, r3
 800dd26:	4770      	bx	lr

0800dd28 <_init>:
 800dd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd2a:	bf00      	nop
 800dd2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd2e:	bc08      	pop	{r3}
 800dd30:	469e      	mov	lr, r3
 800dd32:	4770      	bx	lr

0800dd34 <_fini>:
 800dd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd36:	bf00      	nop
 800dd38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd3a:	bc08      	pop	{r3}
 800dd3c:	469e      	mov	lr, r3
 800dd3e:	4770      	bx	lr
